index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,DEFAULT_MAX_SIZE,default max size ,Field,,,,,63,1,26,,private static final long   DEFAULT_MAX_SIZE  = Long.MAX_VALUE;,False,False,,False,
2,DEFAULT_MAX_COUNT,default max count ,Field,,,,,66,1,26,,private static final int    DEFAULT_MAX_COUNT = Integer.MAX_VALUE;,False,False,,False,
3,CACHE_PREFIX,cache prefix ,Field,,,,,55,1,26,,"private static final String CACHE_PREFIX      = ""cdu_"";",False,False,,False,
4,TYPE_BYTE,type byte ,Field,,,,,54,1,26,,"private static final String TYPE_BYTE         = ""by_"";",False,False,,False,
5,TYPE_STRING,type string ,Field,,,,,54,1,26,,"private static final String TYPE_STRING       = ""st_"";",False,False,,False,
6,TYPE_JSON_OBJECT,type json object ,Field,,,,,54,1,26,,"private static final String TYPE_JSON_OBJECT  = ""jo_"";",False,False,,False,
7,TYPE_JSON_ARRAY,type json array ,Field,,,,,54,1,26,,"private static final String TYPE_JSON_ARRAY   = ""ja_"";",False,False,,False,
8,TYPE_BITMAP,type bitmap ,Field,,,,,54,1,26,,"private static final String TYPE_BITMAP       = ""bi_"";",False,False,,False,
9,TYPE_DRAWABLE,type drawable ,Field,,,,,54,1,26,,"private static final String TYPE_DRAWABLE     = ""dr_"";",False,False,,False,
10,TYPE_PARCELABLE,type parcelable ,Field,,,,,54,1,26,,"private static final String TYPE_PARCELABLE   = ""pa_"";",False,False,,False,
11,TYPE_SERIALIZABLE,type serializable ,Field,,,,,54,1,26,,"private static final String TYPE_SERIALIZABLE = ""se_"";",False,False,,False,
12,CACHE_MAP,cache map ,Field,,,,,77,1,26,,"private static final Map<String, CacheDiskUtils> CACHE_MAP = new HashMap<>();",False,False,,False,
13,mCacheKey,m cache key ,Field,,,,,41,1,18,,private final String           mCacheKey;,False,False,,False,
14,mCacheDir,m cache dir ,Field,,,,,41,1,18,,private final File             mCacheDir;,False,False,,False,
15,mMaxSize,m max size ,Field,,,,,40,1,18,,private final long             mMaxSize;,False,False,,False,
16,mMaxCount,m max count ,Field,,,,,41,1,18,,private final int              mMaxCount;,False,False,,False,
17,mDiskCacheManager,m disk cache manager ,Field,,,,,49,1,2,,private       DiskCacheManager mDiskCacheManager;,False,False,,False,
18,getInstance(),get instance return the single link cache disk utils instance cache directory data data package cache cache utils cache size unlimited cache count unlimited return the single link cache disk utils instance ,Method,,com.blankj.utilcode.util.CacheDiskStaticUtils+getDefaultCacheDiskUtils() com.blankj.utilcode.util.CacheDoubleUtils+getInstance(),"com.blankj.utilcode.util.CacheDiskUtils+getInstance(String,long,int) com.blankj.utilcode.util.CacheDiskUtils+getInstance(String,long,int)",com.blankj.utilcode.util.CacheDiskUtils+DEFAULT_MAX_SIZE com.blankj.utilcode.util.CacheDiskUtils+DEFAULT_MAX_COUNT,398,11,9,"/** 
 * Return the single  {@link CacheDiskUtils} instance.<p>cache directory: /data/data/package/cache/cacheUtils</p> <p>cache size: unlimited</p> <p>cache count: unlimited</p>
 * @return the single {@link CacheDiskUtils} instance
 */
","/**
     * Return the single {@link CacheDiskUtils} instance.
     * <p>cache directory: /data/data/package/cache/cacheUtils</p>
     * <p>cache size: unlimited</p>
     * <p>cache count: unlimited</p>
     *
     * @return the single {@link CacheDiskUtils} instance
     */
    public static CacheDiskUtils getInstance() {
        return getInstance("""", DEFAULT_MAX_SIZE, DEFAULT_MAX_COUNT);
    }",False,False,"This method returns the single instance of the CacheDiskUtils class with default cache directory, unlimited cache size, and unlimited cache count.",False,The code defines a method called `getInstance()` which returns a single instance of the `CacheDiskUtils` class. The method creates a cache directory with a default path and sets the cache size and count to unlimited.
19,getInstance(String),get instance cache name return the single link cache disk utils instance cache directory data data package cache cache utils cache size unlimited cache count unlimited param cache name the name of cache return the single link cache disk utils instance ,Method,,,"com.blankj.utilcode.util.CacheDiskUtils+getInstance(String,long,int) com.blankj.utilcode.util.CacheDiskUtils+getInstance(String,long,int)",com.blankj.utilcode.util.CacheDiskUtils+DEFAULT_MAX_SIZE com.blankj.utilcode.util.CacheDiskUtils+DEFAULT_MAX_COUNT,470,12,9,"/** 
 * Return the single  {@link CacheDiskUtils} instance.<p>cache directory: /data/data/package/cache/cacheUtils</p> <p>cache size: unlimited</p> <p>cache count: unlimited</p>
 * @param cacheName The name of cache.
 * @return the single {@link CacheDiskUtils} instance
 */
","/**
     * Return the single {@link CacheDiskUtils} instance.
     * <p>cache directory: /data/data/package/cache/cacheUtils</p>
     * <p>cache size: unlimited</p>
     * <p>cache count: unlimited</p>
     *
     * @param cacheName The name of cache.
     * @return the single {@link CacheDiskUtils} instance
     */
    public static CacheDiskUtils getInstance(final String cacheName) {
        return getInstance(cacheName, DEFAULT_MAX_SIZE, DEFAULT_MAX_COUNT);
    }",False,False,"This method returns a single instance of the CacheDiskUtils class with default cache size and count, using the provided cache name.",False,"This code defines a method called `getInstance` in the `CacheDiskUtils` class. It returns a single instance of `CacheDiskUtils` with a specified cache name, default cache size, and default cache count. The cache directory is set to `/data/data/package/cache/cacheUtils`."
20,"getInstance(long,int)",get instance max size max count return the single link cache disk utils instance cache directory data data package cache cache utils param max size the max size of cache in bytes param max count the max count of cache return the single link cache disk utils instance ,Method,,,"com.blankj.utilcode.util.CacheDiskUtils+getInstance(String,long,int) com.blankj.utilcode.util.CacheDiskUtils+getInstance(String,long,int)",,448,11,9,"/** 
 * Return the single  {@link CacheDiskUtils} instance.<p>cache directory: /data/data/package/cache/cacheUtils</p>
 * @param maxSize  The max size of cache, in bytes.
 * @param maxCount The max count of cache.
 * @return the single {@link CacheDiskUtils} instance
 */
","/**
     * Return the single {@link CacheDiskUtils} instance.
     * <p>cache directory: /data/data/package/cache/cacheUtils</p>
     *
     * @param maxSize  The max size of cache, in bytes.
     * @param maxCount The max count of cache.
     * @return the single {@link CacheDiskUtils} instance
     */
    public static CacheDiskUtils getInstance(final long maxSize, final int maxCount) {
        return getInstance("""", maxSize, maxCount);
    }",False,False,This method returns the single instance of the CacheDiskUtils class. It takes the maximum size and maximum count of the cache as parameters and returns the instance.,False,"This code is a method that returns a single instance of the CacheDiskUtils class. It takes in two parameters, maxSize and maxCount, which determine the maximum size and count of the cache. The cache directory is set to ""/data/data/package/cache/cacheUtils""."
21,"getInstance(String,long,int)",get instance cache name max size max count return the single link cache disk utils instance cache directory data data package cache cache name param cache name the name of cache param max size the max size of cache in bytes param max count the max count of cache return the single link cache disk utils instance ,Method,"getInstance() getInstance(String) getInstance(long,int)",,"com.blankj.utilcode.util.CacheDiskUtils+isSpace(String) com.blankj.utilcode.util.CacheDiskUtils+isSpace(String) java.io.File+File(String,String) com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.CacheDiskUtils+getInstance(File,long,int) com.blankj.utilcode.util.CacheDiskUtils+getInstance(File,long,int)",,641,14,9,"/** 
 * Return the single  {@link CacheDiskUtils} instance.<p>cache directory: /data/data/package/cache/cacheName</p>
 * @param cacheName The name of cache.
 * @param maxSize   The max size of cache, in bytes.
 * @param maxCount  The max count of cache.
 * @return the single {@link CacheDiskUtils} instance
 */
","/**
     * Return the single {@link CacheDiskUtils} instance.
     * <p>cache directory: /data/data/package/cache/cacheName</p>
     *
     * @param cacheName The name of cache.
     * @param maxSize   The max size of cache, in bytes.
     * @param maxCount  The max count of cache.
     * @return the single {@link CacheDiskUtils} instance
     */
    public static CacheDiskUtils getInstance(String cacheName, final long maxSize, final int maxCount) {
        if (isSpace(cacheName)) cacheName = ""cacheUtils"";
        File file = new File(Utils.getApp().getCacheDir(), cacheName);
        return getInstance(file, maxSize, maxCount);
    }",False,False,"This method returns a single instance of the CacheDiskUtils class. It takes in a cache name, maximum size, and maximum count as parameters. If the cache name is empty, it sets it to ""cacheUtils"". It then creates a file object with the cache directory path and the cache name. Finally, it returns the instance of CacheDiskUtils with the file, maximum size, and maximum count.",False,"This code is a method that returns a single instance of the CacheDiskUtils class. It takes in parameters for the cache name, maximum size, and maximum count of the cache. It creates a file object using the cache directory and returns the instance of CacheDiskUtils with the specified parameters."
22,getInstance(File),get instance cache dir return the single link cache disk utils instance cache size unlimited cache count unlimited param cache dir the directory of cache return the single link cache disk utils instance ,Method,,,"com.blankj.utilcode.util.CacheDiskUtils+getInstance(File,long,int) com.blankj.utilcode.util.CacheDiskUtils+getInstance(File,long,int)",com.blankj.utilcode.util.CacheDiskUtils+DEFAULT_MAX_SIZE com.blankj.utilcode.util.CacheDiskUtils+DEFAULT_MAX_COUNT,412,11,9,"/** 
 * Return the single  {@link CacheDiskUtils} instance.<p>cache size: unlimited</p> <p>cache count: unlimited</p>
 * @param cacheDir The directory of cache.
 * @return the single {@link CacheDiskUtils} instance
 */
","/**
     * Return the single {@link CacheDiskUtils} instance.
     * <p>cache size: unlimited</p>
     * <p>cache count: unlimited</p>
     *
     * @param cacheDir The directory of cache.
     * @return the single {@link CacheDiskUtils} instance
     */
    public static CacheDiskUtils getInstance(@NonNull final File cacheDir) {
        return getInstance(cacheDir, DEFAULT_MAX_SIZE, DEFAULT_MAX_COUNT);
    }",False,False,"This method returns a single instance of the CacheDiskUtils class with unlimited cache size and count, using the specified cache directory.",False,The code is a method that returns a single instance of the CacheDiskUtils class. It takes a cache directory as a parameter and sets the cache size and count to unlimited by default. The method is used to create and manage cache on disk.
23,"getInstance(File,long,int)",get instance cache dir max size max count return the single link cache disk utils instance param cache dir the directory of cache param max size the max size of cache in bytes param max count the max count of cache return the single link cache disk utils instance ,Method,"getInstance(String,long,int) getInstance(File)",,"java.io.File+getAbsoluteFile() java.io.File+getAbsoluteFile() java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) com.blankj.utilcode.util.CacheDiskUtils+CacheDiskUtils(String,File,long,int) java.util.Map+put(K,V) java.util.Map+put(K,V)",com.blankj.utilcode.util.CacheDiskUtils+CACHE_MAP com.blankj.utilcode.util.CacheDiskUtils+CACHE_MAP com.blankj.utilcode.util.CacheDiskUtils+CACHE_MAP,1014,24,9,"/** 
 * Return the single  {@link CacheDiskUtils} instance.
 * @param cacheDir The directory of cache.
 * @param maxSize  The max size of cache, in bytes.
 * @param maxCount The max count of cache.
 * @return the single {@link CacheDiskUtils} instance
 */
","/**
     * Return the single {@link CacheDiskUtils} instance.
     *
     * @param cacheDir The directory of cache.
     * @param maxSize  The max size of cache, in bytes.
     * @param maxCount The max count of cache.
     * @return the single {@link CacheDiskUtils} instance
     */
    public static CacheDiskUtils getInstance(@NonNull final File cacheDir,
                                             final long maxSize,
                                             final int maxCount) {
        final String cacheKey = cacheDir.getAbsoluteFile() + ""_"" + maxSize + ""_"" + maxCount;
        CacheDiskUtils cache = CACHE_MAP.get(cacheKey);
        if (cache == null) {
            synchronized (CacheDiskUtils.class) {
                cache = CACHE_MAP.get(cacheKey);
                if (cache == null) {
                    cache = new CacheDiskUtils(cacheKey, cacheDir, maxSize, maxCount);
                    CACHE_MAP.put(cacheKey, cache);
                }
            }
        }
        return cache;
    }",False,False,"This method returns a single instance of the CacheDiskUtils class. It takes in a cache directory, maximum size, and maximum count as parameters. It uses a cache key to check if an instance already exists in a cache map. If not, it creates a new instance and adds it to the cache map before returning it.",False,"This code is a method that returns a single instance of the CacheDiskUtils class. It takes in parameters for the cache directory, maximum size, and maximum count of the cache. It uses a cache key to check if an instance already exists in a map, and if not, creates a new instance and adds it to the map before returning it."
24,"CacheDiskUtils(String,File,long,int)",cache disk utils cache key cache dir max size max count ,Method,,,,com.blankj.utilcode.util.CacheDiskUtils+mCacheKey com.blankj.utilcode.util.CacheDiskUtils+mCacheDir com.blankj.utilcode.util.CacheDiskUtils+mMaxSize com.blankj.utilcode.util.CacheDiskUtils+mMaxCount,313,9,2,,"private CacheDiskUtils(final String cacheKey,
                           final File cacheDir,
                           final long maxSize,
                           final int maxCount) {
        mCacheKey = cacheKey;
        mCacheDir = cacheDir;
        mMaxSize = maxSize;
        mMaxCount = maxCount;
    }",False,False,"This method serves as a constructor for the CacheDiskUtils class, initializing the cacheKey, cacheDir, maxSize, and maxCount variables.",False,"The code defines a private constructor for a CacheDiskUtils class, which takes in parameters such as cache key, cache directory, maximum size, and maximum count. It initializes the corresponding class variables with the provided values."
25,getDiskCacheManager(),get disk cache manager ,Method,"realPutBytes(String,byte[],int) realGetBytes(String,byte[]) getCacheSize() getCacheCount() remove(String) clear()",,"java.io.File+exists() java.io.File+exists() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+DiskCacheManager(File,long,int) java.io.File+mkdirs() java.io.File+mkdirs() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+DiskCacheManager(File,long,int) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath()",com.blankj.utilcode.util.CacheDiskUtils+mCacheDir com.blankj.utilcode.util.CacheDiskUtils+mDiskCacheManager com.blankj.utilcode.util.CacheDiskUtils+mDiskCacheManager com.blankj.utilcode.util.CacheDiskUtils+mCacheDir com.blankj.utilcode.util.CacheDiskUtils+mMaxSize com.blankj.utilcode.util.CacheDiskUtils+mMaxCount com.blankj.utilcode.util.CacheDiskUtils+mCacheDir com.blankj.utilcode.util.CacheDiskUtils+mDiskCacheManager com.blankj.utilcode.util.CacheDiskUtils+mCacheDir com.blankj.utilcode.util.CacheDiskUtils+mMaxSize com.blankj.utilcode.util.CacheDiskUtils+mMaxCount com.blankj.utilcode.util.CacheDiskUtils+mCacheDir com.blankj.utilcode.util.CacheDiskUtils+mDiskCacheManager,555,14,2,,"private DiskCacheManager getDiskCacheManager() {
        if (mCacheDir.exists()) {
            if (mDiskCacheManager == null) {
                mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);
            }
        } else {
            if (mCacheDir.mkdirs()) {
                mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);
            } else {
                Log.e(""CacheDiskUtils"", ""can't make dirs in "" + mCacheDir.getAbsolutePath());
            }
        }
        return mDiskCacheManager;
    }",False,False,"This method returns the DiskCacheManager object. If the cache directory exists, it checks if the DiskCacheManager object is null. If it is null, it creates a new DiskCacheManager object. If the cache directory does not exist, it tries to create the directory and then creates a new DiskCacheManager object. Finally, it returns the DiskCacheManager object.",False,"This code is a method that returns an instance of the DiskCacheManager class. It checks if the cache directory exists, and if not, it creates it. It then initializes the DiskCacheManager with the cache directory, maximum size, and maximum count, and returns it."
26,toString(),to string ,Method,,"com.blankj.utilcode.util.CacheDoubleUtils+getInstance(CacheMemoryUtils,CacheDiskUtils)",java.lang.Integer+toHexString(int) java.lang.Integer+toHexString(int) java.lang.Object+hashCode() java.lang.Object+hashCode(),com.blankj.utilcode.util.CacheDiskUtils+mCacheKey,112,4,1,,"@Override
    public String toString() {
        return mCacheKey + ""@"" + Integer.toHexString(hashCode());
    }",False,False,This method overrides the default toString() method and returns a string representation of the object. It concatenates the mCacheKey with the hexadecimal representation of the object's hash code.,False,"The code overrides the `toString()` method to return a string representation of the object. It concatenates the `mCacheKey` value with the hexadecimal representation of the object's hash code, separated by an ""@"" symbol."
27,"put(String,byte[])",put key value put bytes in cache param key the key of cache param value the value of cache ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,byte[],CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int)",,227,9,1,"/** 
 * Put bytes in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put bytes in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final byte[] value) {
        put(key, value, -1);
    }",False,False,"The function of this method is to put bytes in cache by taking a key and a value as parameters. It then calls another method with the same key and value, along with a default expiration time of -1.",True,"This code defines a method called ""put"" that is used to store byte arrays in a cache. It takes a key and a value as parameters and allows for an optional expiration time. The method is overloaded to provide a simplified version that sets the expiration time to -1 by default."
28,"put(String,byte[],int)",put key value save time put bytes in cache param key the key of cache param value the value of cache param save time the save time of cache in seconds ,Method,"put(String,byte[])","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,byte[],int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_BYTE,339,10,1,"/** 
 * Put bytes in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put bytes in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final byte[] value, final int saveTime) {
        realPutBytes(TYPE_BYTE + key, value, saveTime);
    }",False,False,"This method is used to put bytes in cache by specifying a key, value, and save time. It calls the ""realPutBytes"" method to perform the actual operation.",True,"The given code snippet is a method named ""put"" that is used to store byte arrays in a cache. It takes a key, value, and save time as parameters and internally calls another method ""realPutBytes"" to perform the actual caching operation."
29,"realPutBytes(String,byte[],int)",real put bytes key value save time ,Method,"put(String,byte[],int) put(String,String,int) put(String,JSONObject,int) put(String,JSONArray,int) put(String,Bitmap,int) put(String,Drawable,int) put(String,Parcelable,int) put(String,Serializable,int)",,"com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+newByteArrayWithTime(int,byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+newByteArrayWithTime(int,byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileBeforePut(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileBeforePut(String) com.blankj.utilcode.util.CacheDiskUtils+writeFileFromBytes(File,byte[]) com.blankj.utilcode.util.CacheDiskUtils+writeFileFromBytes(File,byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+updateModify(File) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+updateModify(File) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+put(File) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+put(File)",,499,10,2,,"private void realPutBytes(final String key, byte[] value, int saveTime) {
        if (value == null) return;
        DiskCacheManager diskCacheManager = getDiskCacheManager();
        if (diskCacheManager == null) return;
        if (saveTime >= 0) value = DiskCacheHelper.newByteArrayWithTime(saveTime, value);
        File file = diskCacheManager.getFileBeforePut(key);
        writeFileFromBytes(file, value);
        diskCacheManager.updateModify(file);
        diskCacheManager.put(file);
    }",False,False,"This method is used to store a byte array in a disk cache. It takes a key, a byte array, and a save time as parameters. It checks if the byte array is null, gets the disk cache manager, creates a new byte array with a specified save time if necessary, gets the file before putting the byte array, writes the byte array to the file, updates the modification time of the file, and puts the file in the disk cache.",False,"This code is a private method that is responsible for storing byte data in a disk cache. It first checks if the value is not null and if the disk cache manager is available. If a save time is specified, it adds a timestamp to the byte data. Then, it writes the byte data to a file, updates the modification time of the file, and puts the file in the disk cache."
30,getBytes(String),get bytes key return the bytes in cache param key the key of cache return the bytes if cache exists or null otherwise ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getBytes(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getBytes() com.blankj.utilcode.util.CacheDiskUtilsTest+getBytes() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getBytes(String,byte[]) com.blankj.utilcode.util.CacheDiskUtils+getBytes(String,byte[])",,245,9,1,"/** 
 * Return the bytes in cache.
 * @param key The key of cache.
 * @return the bytes if cache exists or null otherwise
 */
","/**
     * Return the bytes in cache.
     *
     * @param key The key of cache.
     * @return the bytes if cache exists or null otherwise
     */
    public byte[] getBytes(@NonNull final String key) {
        return getBytes(key, null);
    }",False,False,"The function of this method is to retrieve the bytes from the cache based on the provided key. It returns the bytes if the cache exists, otherwise it returns null.",False,"The `getBytes` method is used to retrieve the bytes stored in the cache based on a given key. It returns the bytes if the cache exists for the specified key, otherwise it returns null."
31,"getBytes(String,byte[])",get bytes key default value return the bytes in cache param key the key of cache param default value the default value if the cache doesn t exist return the bytes if cache exists or default value otherwise ,Method,getBytes(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getBytes(String,byte[],CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getBytes(String,byte[]) com.blankj.utilcode.util.CacheDiskUtilsTest+getBytes() com.blankj.utilcode.util.CacheDiskUtilsTest+getBytes() com.blankj.utilcode.util.CacheDiskUtilsTest+getBytes() com.blankj.utilcode.util.CacheDiskUtilsTest+getBytes()","com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String,byte[]) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String,byte[])",com.blankj.utilcode.util.CacheDiskUtils+TYPE_BYTE,386,10,1,"/** 
 * Return the bytes in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the bytes if cache exists or defaultValue otherwise
 */
","/**
     * Return the bytes in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the bytes if cache exists or defaultValue otherwise
     */
    public byte[] getBytes(@NonNull final String key, final byte[] defaultValue) {
        return realGetBytes(TYPE_BYTE + key, defaultValue);
    }",False,False,"This method returns the bytes in cache for a given key. If the cache exists, it returns the bytes. If the cache doesn't exist, it returns the defaultValue.",False,"This code defines a method called ""getBytes"" that retrieves the bytes stored in a cache using a given key. If the cache exists, it returns the bytes; otherwise, it returns a default value provided as an argument."
32,realGetBytes(String),real get bytes key ,Method,"getString(String,String) getJSONObject(String,JSONObject) getJSONArray(String,JSONArray) getBitmap(String,Bitmap) getDrawable(String,Drawable) getParcelable(String,Parcelable.Creator<T>,T) getSerializable(String,Object)",,"com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String,byte[]) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String,byte[])",,102,3,2,,"private byte[] realGetBytes(@NonNull final String key) {
        return realGetBytes(key, null);
    }",False,False,"The function ""realGetBytes"" is a private method that takes a non-null String key as input and returns a byte array. It calls another method ""realGetBytes"" with the key and a null value as parameters.",False,The code snippet defines a private method named `realGetBytes` that takes a non-null `String` parameter `key` and returns a byte array. It also has an overloaded version of the method that takes an additional parameter `null` and calls the main method with default arguments.
33,"realGetBytes(String,byte[])",real get bytes key default value ,Method,"getBytes(String,byte[]) realGetBytes(String)",,com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileIfExists(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileIfExists(String) com.blankj.utilcode.util.CacheDiskUtils+readFile2Bytes(File) com.blankj.utilcode.util.CacheDiskUtils+readFile2Bytes(File) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+isDue(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+isDue(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+updateModify(File) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+updateModify(File) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+getDataWithoutDueTime(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+getDataWithoutDueTime(byte[]),,609,13,2,,"private byte[] realGetBytes(@NonNull final String key, final byte[] defaultValue) {
        DiskCacheManager diskCacheManager = getDiskCacheManager();
        if (diskCacheManager == null) return defaultValue;
        final File file = diskCacheManager.getFileIfExists(key);
        if (file == null) return defaultValue;
        byte[] data = readFile2Bytes(file);
        if (DiskCacheHelper.isDue(data)) {
            diskCacheManager.removeByKey(key);
            return defaultValue;
        }
        diskCacheManager.updateModify(file);
        return DiskCacheHelper.getDataWithoutDueTime(data);
    }",False,False,"This method retrieves the byte array data associated with a given key from a disk cache. If the data is expired or the cache manager is not available, it returns a default value.",False,"This code is a private method that retrieves a byte array from a disk cache based on a given key. It checks if the cache is available and if the file exists, reads the file into a byte array. If the data in the cache is expired, it removes the cache entry and returns a default value. Otherwise, it updates the modification time of the file and returns the data without the expiration time."
34,"put(String,String)",put key value put string value in cache param key the key of cache param value the value of cache ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,String,int) com.blankj.utilcode.util.CacheDiskUtils+put(String,String,int)",,234,9,1,"/** 
 * Put string value in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put string value in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final String value) {
        put(key, value, -1);
    }",False,False,"The function of this method is to put a string value in the cache, using the provided key and value. It also has an optional parameter for setting the expiration time of the cache entry.",True,"The given code is a method named ""put"" that is used to store a string value in a cache. It takes a key and a value as parameters and has an optional parameter for setting an expiration time for the cache entry."
35,"put(String,String,int)",put key value save time put string value in cache param key the key of cache param value the value of cache param save time the save time of cache in seconds ,Method,"put(String,String)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,String,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,String,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+string2Bytes(String) com.blankj.utilcode.util.CacheDiskUtils+string2Bytes(String)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_STRING,362,10,1,"/** 
 * Put string value in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put string value in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final String value, final int saveTime) {
        realPutBytes(TYPE_STRING + key, string2Bytes(value), saveTime);
    }",False,False,"This method is used to store a string value in a cache, using a specified key and save time. The value is converted to bytes and then stored in the cache.",True,"The given code is a method named ""put"" that is used to store a string value in a cache. It takes a key, value, and save time as parameters and internally converts the string value to bytes before storing it in the cache."
36,getString(String),get string key return the string value in cache param key the key of cache return the string value if cache exists or null otherwise ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getString(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getString() com.blankj.utilcode.util.CacheDiskUtilsTest+getString() com.blankj.utilcode.util.CacheDiskUtilsTest+remove() com.blankj.utilcode.util.CacheDiskUtilsTest+remove() com.blankj.utilcode.util.CacheDiskUtilsTest+remove() com.blankj.utilcode.util.CacheDiskUtilsTest+remove() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getString(String,String) com.blankj.utilcode.util.CacheDiskUtils+getString(String,String)",,261,9,1,"/** 
 * Return the string value in cache.
 * @param key The key of cache.
 * @return the string value if cache exists or null otherwise
 */
","/**
     * Return the string value in cache.
     *
     * @param key The key of cache.
     * @return the string value if cache exists or null otherwise
     */
    public String getString(@NonNull final String key) {
        return getString(key, null);
    }",False,False,"The method serves to retrieve a string value from the cache based on a given key. If the cache exists, it returns the string value; otherwise, it returns null.",False,"The code is a method called ""getString"" that retrieves a string value from a cache based on a given key. It returns the string value if the cache exists, or null if it doesn't."
37,"getString(String,String)",get string key default value return the string value in cache param key the key of cache param default value the default value if the cache doesn t exist return the string value if cache exists or default value otherwise ,Method,getString(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getString(String,String,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getString(String,String) com.blankj.utilcode.util.CacheDiskUtilsTest+getString() com.blankj.utilcode.util.CacheDiskUtilsTest+getString() com.blankj.utilcode.util.CacheDiskUtilsTest+getString() com.blankj.utilcode.util.CacheDiskUtilsTest+getString()",com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+bytes2String(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2String(byte[]),com.blankj.utilcode.util.CacheDiskUtils+TYPE_STRING,481,12,1,"/** 
 * Return the string value in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the string value if cache exists or defaultValue otherwise
 */
","/**
     * Return the string value in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the string value if cache exists or defaultValue otherwise
     */
    public String getString(@NonNull final String key, final String defaultValue) {
        byte[] bytes = realGetBytes(TYPE_STRING + key);
        if (bytes == null) return defaultValue;
        return bytes2String(bytes);
    }",False,False,"This method returns the string value from the cache if it exists, otherwise it returns the default value provided.",False,"This code defines a method called `getString` that retrieves a string value from a cache based on a given key. If the cache exists, the method returns the string value; otherwise, it returns a default value provided as an argument."
38,"put(String,JSONObject)",put key value put json object in cache param key the key of cache param value the value of cache ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,JSONObject,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,JSONObject,int) com.blankj.utilcode.util.CacheDiskUtils+put(String,JSONObject,int)",,236,9,1,"/** 
 * Put JSONObject in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put JSONObject in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final JSONObject value) {
        put(key, value, -1);
    }",False,False,"This method is used to put a JSONObject in the cache, using a specified key and value. The cache is a data structure that stores data temporarily for faster access.",True,"The given code is a method named ""put"" that is used to store a JSONObject in a cache. It takes a key and a value as parameters and stores the value in the cache with the given key."
39,"put(String,JSONObject,int)",put key value save time put json object in cache param key the key of cache param value the value of cache param save time the save time of cache in seconds ,Method,"put(String,JSONObject)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,JSONObject,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,JSONObject,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+jsonObject2Bytes(JSONObject) com.blankj.utilcode.util.CacheDiskUtils+jsonObject2Bytes(JSONObject)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_JSON_OBJECT,413,12,1,"/** 
 * Put JSONObject in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put JSONObject in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key,
                    final JSONObject value,
                    final int saveTime) {
        realPutBytes(TYPE_JSON_OBJECT + key, jsonObject2Bytes(value), saveTime);
    }",False,False,"This method is used to put a JSONObject in the cache. It takes a key, value, and save time as parameters, and internally calls another method to store the JSONObject in the cache.",True,"This code defines a method called ""put"" that is used to store a JSONObject in a cache. The method takes a key, value, and save time as parameters and internally converts the JSONObject to bytes before storing it in the cache."
40,getJSONObject(String),get json object key return the json object in cache param key the key of cache return the json object if cache exists or null otherwise ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getJSONObject(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getJSONObject(String,JSONObject) com.blankj.utilcode.util.CacheDiskUtils+getJSONObject(String,JSONObject)",,269,9,1,"/** 
 * Return the JSONObject in cache.
 * @param key The key of cache.
 * @return the JSONObject if cache exists or null otherwise
 */
","/**
     * Return the JSONObject in cache.
     *
     * @param key The key of cache.
     * @return the JSONObject if cache exists or null otherwise
     */
    public JSONObject getJSONObject(@NonNull final String key) {
        return getJSONObject(key, null);
    }",False,False,"The function of this method is to retrieve a JSONObject from the cache using a specified key. It returns the JSONObject if it exists in the cache, otherwise it returns null.",False,"The given code is a method named ""getJSONObject"" that retrieves a JSONObject from a cache based on a provided key. It returns the JSONObject if it exists in the cache, otherwise it returns null."
41,"getJSONObject(String,JSONObject)",get json object key default value return the json object in cache param key the key of cache param default value the default value if the cache doesn t exist return the json object if cache exists or default value otherwise ,Method,getJSONObject(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getJSONObject(String,JSONObject,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getJSONObject(String,JSONObject) com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONObject()",com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+bytes2JSONObject(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2JSONObject(byte[]),com.blankj.utilcode.util.CacheDiskUtils+TYPE_JSON_OBJECT,498,12,1,"/** 
 * Return the JSONObject in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the JSONObject if cache exists or defaultValue otherwise
 */
","/**
     * Return the JSONObject in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the JSONObject if cache exists or defaultValue otherwise
     */
    public JSONObject getJSONObject(@NonNull final String key, final JSONObject defaultValue) {
        byte[] bytes = realGetBytes(TYPE_JSON_OBJECT + key);
        if (bytes == null) return defaultValue;
        return bytes2JSONObject(bytes);
    }",False,False,"This method retrieves a JSONObject from cache using a given key. If the cache exists, it returns the JSONObject. If the cache doesn't exist, it returns a default value.",False,"This code defines a method called `getJSONObject` that retrieves a JSONObject from a cache based on a given key. If the cache does not exist, it returns a default value. The method takes the key and the default value as parameters and returns the JSONObject if found or the default value if not."
42,"put(String,JSONArray)",put key value put json array in cache param key the key of cache param value the value of cache ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,JSONArray,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,JSONArray,int) com.blankj.utilcode.util.CacheDiskUtils+put(String,JSONArray,int)",,234,9,1,"/** 
 * Put JSONArray in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put JSONArray in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final JSONArray value) {
        put(key, value, -1);
    }",False,False,"This method is used to put a JSONArray object into a cache, using a specified key. The cache is a data structure that stores values temporarily for quick access.",True,"The given code is a method named ""put"" that is used to store a JSONArray object in a cache. It takes a key and a value as parameters, where the key is used to identify the cache entry, and the value is the JSONArray object to be stored."
43,"put(String,JSONArray,int)",put key value save time put json array in cache param key the key of cache param value the value of cache param save time the save time of cache in seconds ,Method,"put(String,JSONArray)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,JSONArray,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,JSONArray,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+jsonArray2Bytes(JSONArray) com.blankj.utilcode.util.CacheDiskUtils+jsonArray2Bytes(JSONArray)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_JSON_ARRAY,369,10,1,"/** 
 * Put JSONArray in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put JSONArray in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final JSONArray value, final int saveTime) {
        realPutBytes(TYPE_JSON_ARRAY + key, jsonArray2Bytes(value), saveTime);
    }",False,False,"This method is used to put a JSONArray object into a cache, using a specified key and save time. It internally converts the JSONArray to bytes and calls another method to store the bytes in the cache.",True,"This code defines a method called ""put"" that is used to store a JSONArray object in a cache. The method takes a key, value, and save time as parameters, and internally converts the JSONArray to bytes before storing it in the cache."
44,getJSONArray(String),get json array key return the json array in cache param key the key of cache return the json array if cache exists or null otherwise ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getJSONArray(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getJSONArray(String,JSONArray) com.blankj.utilcode.util.CacheDiskUtils+getJSONArray(String,JSONArray)",,264,9,1,"/** 
 * Return the JSONArray in cache.
 * @param key The key of cache.
 * @return the JSONArray if cache exists or null otherwise
 */
","/**
     * Return the JSONArray in cache.
     *
     * @param key The key of cache.
     * @return the JSONArray if cache exists or null otherwise
     */
    public JSONArray getJSONArray(@NonNull final String key) {
        return getJSONArray(key, null);
    }",False,False,"This method returns the JSONArray from cache based on the provided key. If the cache exists, it returns the JSONArray, otherwise it returns null.",False,"The given code is a method named ""getJSONArray"" that retrieves a JSONArray from cache based on a given key. It returns the JSONArray if the cache exists, otherwise it returns null."
45,"getJSONArray(String,JSONArray)",get json array key default value return the json array in cache param key the key of cache param default value the default value if the cache doesn t exist return the json array if cache exists or default value otherwise ,Method,getJSONArray(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getJSONArray(String,JSONArray,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getJSONArray(String,JSONArray) com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONArray()",com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+bytes2JSONArray(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2JSONArray(byte[]),com.blankj.utilcode.util.CacheDiskUtils+TYPE_JSON_ARRAY,491,12,1,"/** 
 * Return the JSONArray in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the JSONArray if cache exists or defaultValue otherwise
 */
","/**
     * Return the JSONArray in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the JSONArray if cache exists or defaultValue otherwise
     */
    public JSONArray getJSONArray(@NonNull final String key, final JSONArray defaultValue) {
        byte[] bytes = realGetBytes(TYPE_JSON_ARRAY + key);
        if (bytes == null) return defaultValue;
        return bytes2JSONArray(bytes);
    }",False,False,"This method retrieves a JSONArray from cache using a specified key. If the cache exists, it returns the JSONArray. If the cache doesn't exist, it returns a default value.",False,"This code defines a method called `getJSONArray` that retrieves a JSONArray from cache based on a given key. If the cache exists, the method returns the JSONArray; otherwise, it returns a default value provided as an argument."
46,"put(String,Bitmap)",put key value put bitmap in cache param key the key of cache param value the value of cache ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Bitmap,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int)",,228,9,1,"/** 
 * Put bitmap in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put bitmap in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final Bitmap value) {
        put(key, value, -1);
    }",False,False,"The function of this method is to put a bitmap in the cache, using a key-value pair. The key represents the identifier of the cache, and the value represents the bitmap to be stored.",True,"This code defines a method called ""put"" that is used to store a bitmap in a cache. It takes a key and a value (bitmap) as parameters and stores them in the cache. The method also has an overloaded version that allows specifying a timeout for the cache entry."
47,"put(String,Bitmap,int)",put key value save time put bitmap in cache param key the key of cache param value the value of cache param save time the save time of cache in seconds ,Method,"put(String,Bitmap)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Bitmap,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,Bitmap,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+bitmap2Bytes(Bitmap) com.blankj.utilcode.util.CacheDiskUtils+bitmap2Bytes(Bitmap)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_BITMAP,356,10,1,"/** 
 * Put bitmap in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put bitmap in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final Bitmap value, final int saveTime) {
        realPutBytes(TYPE_BITMAP + key, bitmap2Bytes(value), saveTime);
    }",False,False,"This method is used to put a bitmap into a cache. It takes a key, a bitmap value, and a save time in seconds as parameters, and then calls another method to store the bitmap in the cache.",True,"This code defines a method called ""put"" that is used to store a bitmap in a cache. The method takes a key, a bitmap value, and a save time as parameters. It internally converts the bitmap to bytes and calls another method to store the bytes in the cache with the specified save time."
48,getBitmap(String),get bitmap key return the bitmap in cache param key the key of cache return the bitmap if cache exists or null otherwise ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getBitmap(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDiskUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getBitmap(String,Bitmap) com.blankj.utilcode.util.CacheDiskUtils+getBitmap(String,Bitmap)",,249,9,1,"/** 
 * Return the bitmap in cache.
 * @param key The key of cache.
 * @return the bitmap if cache exists or null otherwise
 */
","/**
     * Return the bitmap in cache.
     *
     * @param key The key of cache.
     * @return the bitmap if cache exists or null otherwise
     */
    public Bitmap getBitmap(@NonNull final String key) {
        return getBitmap(key, null);
    }",False,False,"The function of this method is to retrieve a bitmap from the cache based on a given key. It returns the bitmap if it exists in the cache, otherwise it returns null.",False,"This code defines a method called ""getBitmap"" that retrieves a bitmap from a cache based on a given key. It returns the bitmap if it exists in the cache, otherwise it returns null."
49,"getBitmap(String,Bitmap)",get bitmap key default value return the bitmap in cache param key the key of cache param default value the default value if the cache doesn t exist return the bitmap if cache exists or default value otherwise ,Method,getBitmap(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getBitmap(String,Bitmap,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getBitmap(String,Bitmap) com.blankj.utilcode.util.CacheDiskUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDiskUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDiskUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDiskUtilsTest+getBitmap()",com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+bytes2Bitmap(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2Bitmap(byte[]),com.blankj.utilcode.util.CacheDiskUtils+TYPE_BITMAP,469,12,1,"/** 
 * Return the bitmap in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the bitmap if cache exists or defaultValue otherwise
 */
","/**
     * Return the bitmap in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the bitmap if cache exists or defaultValue otherwise
     */
    public Bitmap getBitmap(@NonNull final String key, final Bitmap defaultValue) {
        byte[] bytes = realGetBytes(TYPE_BITMAP + key);
        if (bytes == null) return defaultValue;
        return bytes2Bitmap(bytes);
    }",False,False,"This method serves to retrieve a bitmap from the cache using a given key. If the bitmap is not found in the cache, it returns a default value.",False,"This code defines a method called ""getBitmap"" that retrieves a bitmap from a cache using a given key. If the cache does not exist, it returns a default value. The method takes the key and a default bitmap as parameters and returns the retrieved bitmap or the default bitmap."
50,"put(String,Drawable)",put key value put drawable in cache param key the key of cache param value the value of cache ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Drawable,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int)",,232,9,1,"/** 
 * Put drawable in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put drawable in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final Drawable value) {
        put(key, value, -1);
    }",False,False,"This method is used to put a drawable object into a cache, using a key-value pair. The key represents the identifier of the cache, and the value represents the drawable object to be stored.",True,"The given code is a method named ""put"" that is used to store a drawable object in a cache. It takes a key and a value as parameters, where the key is used to identify the cache entry, and the value is the drawable object to be stored."
51,"put(String,Drawable,int)",put key value save time put drawable in cache param key the key of cache param value the value of cache param save time the save time of cache in seconds ,Method,"put(String,Drawable)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Drawable,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,Drawable,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+drawable2Bytes(Drawable) com.blankj.utilcode.util.CacheDiskUtils+drawable2Bytes(Drawable)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_DRAWABLE,364,10,1,"/** 
 * Put drawable in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put drawable in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final Drawable value, final int saveTime) {
        realPutBytes(TYPE_DRAWABLE + key, drawable2Bytes(value), saveTime);
    }",False,False,"This method is used to put a drawable object into a cache, using a key-value pair. The save time parameter determines how long the drawable will be stored in the cache.",True,"The given code is a method that puts a drawable object into a cache. It takes a key, value, and save time as parameters. The method converts the drawable object into bytes and stores it in the cache with a specific key and save time."
52,getDrawable(String),get drawable key return the drawable in cache param key the key of cache return the drawable if cache exists or null otherwise ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getDrawable(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDiskUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getDrawable(String,Drawable) com.blankj.utilcode.util.CacheDiskUtils+getDrawable(String,Drawable)",,259,9,1,"/** 
 * Return the drawable in cache.
 * @param key The key of cache.
 * @return the drawable if cache exists or null otherwise
 */
","/**
     * Return the drawable in cache.
     *
     * @param key The key of cache.
     * @return the drawable if cache exists or null otherwise
     */
    public Drawable getDrawable(@NonNull final String key) {
        return getDrawable(key, null);
    }",False,False,"The function of this method is to retrieve a drawable from the cache based on a given key. It returns the drawable if it exists in the cache, otherwise it returns null.",False,"The code is a method named ""getDrawable"" that takes a key as a parameter and returns a drawable object from the cache if it exists, or null if it doesn't. It has an overloaded version of the method that allows passing a default drawable to be returned if the cache doesn't contain the specified key."
53,"getDrawable(String,Drawable)",get drawable key default value return the drawable in cache param key the key of cache param default value the default value if the cache doesn t exist return the drawable if cache exists or default value otherwise ,Method,getDrawable(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getDrawable(String,Drawable,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getDrawable(String,Drawable) com.blankj.utilcode.util.CacheDiskUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDiskUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDiskUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDiskUtilsTest+getDrawable()",com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+bytes2Drawable(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2Drawable(byte[]),com.blankj.utilcode.util.CacheDiskUtils+TYPE_DRAWABLE,483,12,1,"/** 
 * Return the drawable in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the drawable if cache exists or defaultValue otherwise
 */
","/**
     * Return the drawable in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the drawable if cache exists or defaultValue otherwise
     */
    public Drawable getDrawable(@NonNull final String key, final Drawable defaultValue) {
        byte[] bytes = realGetBytes(TYPE_DRAWABLE + key);
        if (bytes == null) return defaultValue;
        return bytes2Drawable(bytes);
    }",False,False,"This method serves to retrieve a drawable from the cache using a given key. If the drawable is not found in the cache, it returns a default value.",False,"This code defines a method called ""getDrawable"" that retrieves a drawable from a cache based on a given key. If the cache does not contain the drawable, it returns a default value. The method takes the key and the default value as parameters and returns the drawable if found or the default value if not."
54,"put(String,Parcelable)",put key value put parcelable in cache param key the key of cache param value the value of cache ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Parcelable,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int)",,236,9,1,"/** 
 * Put parcelable in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put parcelable in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final Parcelable value) {
        put(key, value, -1);
    }",False,False,"This method is used to put a Parcelable object into a cache, using a specified key. The cache is a data structure that stores objects temporarily for quick access.",True,"This code defines a method called ""put"" that is used to store a Parcelable object in a cache. The method takes a key and a value as parameters, where the key is used to identify the cache entry. Additionally, there is an overloaded version of the method that allows specifying a time-to-live value for the cache entry."
55,"put(String,Parcelable,int)",put key value save time put parcelable in cache param key the key of cache param value the value of cache param save time the save time of cache in seconds ,Method,"put(String,Parcelable)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Parcelable,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,Parcelable,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+parcelable2Bytes(Parcelable) com.blankj.utilcode.util.CacheDiskUtils+parcelable2Bytes(Parcelable)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_PARCELABLE,372,10,1,"/** 
 * Put parcelable in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put parcelable in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final Parcelable value, final int saveTime) {
        realPutBytes(TYPE_PARCELABLE + key, parcelable2Bytes(value), saveTime);
    }",False,False,"This method is used to put a Parcelable object into a cache, using a specified key and save time. It converts the Parcelable object into bytes and calls another method to store the bytes in the cache.",True,"This code defines a method called ""put"" that is used to store a Parcelable object in a cache. The method takes a key, value, and save time as parameters, and internally converts the Parcelable object to bytes before storing it in the cache."
56,"getParcelable(String,Parcelable.Creator<T>)",get parcelable key creator return the parcelable in cache param key the key of cache param creator the creator param the value type return the parcelable if cache exists or null otherwise ,Method,,,,,427,12,1,"/** 
 * Return the parcelable in cache.
 * @param key     The key of cache.
 * @param creator The creator.
 * @param < T >     The value type.
 * @return the parcelable if cache exists or null otherwise
 */
","/**
     * Return the parcelable in cache.
     *
     * @param key     The key of cache.
     * @param creator The creator.
     * @param <T>     The value type.
     * @return the parcelable if cache exists or null otherwise
     */
    public <T> T getParcelable(@NonNull final String key,
                               @NonNull final Parcelable.Creator<T> creator) {
        return getParcelable(key, creator, null);
    }",False,False,"This method returns the Parcelable object from the cache if it exists, otherwise it returns null. It takes a key and a creator as parameters.",False,"This code defines a method called ""getParcelable"" that retrieves a parcelable object from a cache based on a given key. It takes a creator as a parameter and returns the parcelable if it exists in the cache, or null otherwise."
57,"getParcelable(String,Parcelable.Creator<T>,T)",get parcelable key creator default value return the parcelable in cache param key the key of cache param creator the creator param default value the default value if the cache doesn t exist param the value type return the parcelable if cache exists or default value otherwise ,Method,,,com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String),com.blankj.utilcode.util.CacheDiskUtils+TYPE_PARCELABLE,683,16,1,"/** 
 * Return the parcelable in cache.
 * @param key          The key of cache.
 * @param creator      The creator.
 * @param defaultValue The default value if the cache doesn't exist.
 * @param < T >          The value type.
 * @return the parcelable if cache exists or defaultValue otherwise
 */
","/**
     * Return the parcelable in cache.
     *
     * @param key          The key of cache.
     * @param creator      The creator.
     * @param defaultValue The default value if the cache doesn't exist.
     * @param <T>          The value type.
     * @return the parcelable if cache exists or defaultValue otherwise
     */
    public <T> T getParcelable(@NonNull final String key,
                               @NonNull final Parcelable.Creator<T> creator,
                               final T defaultValue) {
        byte[] bytes = realGetBytes(TYPE_PARCELABLE + key);
        if (bytes == null) return defaultValue;
        return bytes2Parcelable(bytes, creator);
    }",False,False,"The function of this method is to retrieve a Parcelable object from the cache using a specified key. If the cache does not exist, it returns a default value.",False,"This code defines a method called `getParcelable` that retrieves a parcelable object from a cache using a given key. It takes a creator for the parcelable object, and returns the object if it exists in the cache, or a default value if it doesn't."
58,"put(String,Serializable)",put key value put serializable in cache param key the key of cache param value the value of cache ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Serializable,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,Serializable,int) com.blankj.utilcode.util.CacheDiskUtils+put(String,Serializable,int)",,240,9,1,"/** 
 * Put serializable in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put serializable in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final Serializable value) {
        put(key, value, -1);
    }",False,False,"This method is used to put a serializable object into a cache, using a key-value pair. The key is a string, and the value is the serializable object.",True,"The given code is a method named ""put"" that is used to store a serializable object in a cache. It takes a key and a value as parameters and stores the value in the cache with the given key."
59,"put(String,Serializable,int)",put key value save time put serializable in cache param key the key of cache param value the value of cache param save time the save time of cache in seconds ,Method,"put(String,Serializable)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Serializable,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,Serializable,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+serializable2Bytes(Serializable) com.blankj.utilcode.util.CacheDiskUtils+serializable2Bytes(Serializable)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_SERIALIZABLE,380,10,1,"/** 
 * Put serializable in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put serializable in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final Serializable value, final int saveTime) {
        realPutBytes(TYPE_SERIALIZABLE + key, serializable2Bytes(value), saveTime);
    }",False,False,"This method is used to put a serializable object into a cache, using a specified key and save time. It internally converts the object to bytes and calls another method to store the bytes in the cache.",True,"This code defines a method called ""put"" that is used to store a serializable object in a cache. The method takes a key, a value, and a save time as parameters. It internally converts the value to bytes and calls another method to store the bytes in the cache with a specific expiration time."
60,getSerializable(String),get serializable key return the serializable in cache param key the key of cache return the bitmap if cache exists or null otherwise ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getSerializable(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getSerializable() com.blankj.utilcode.util.CacheDiskUtilsTest+getSerializable() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getSerializable(String,Object) com.blankj.utilcode.util.CacheDiskUtils+getSerializable(String,Object)",,267,9,1,"/** 
 * Return the serializable in cache.
 * @param key The key of cache.
 * @return the bitmap if cache exists or null otherwise
 */
","/**
     * Return the serializable in cache.
     *
     * @param key The key of cache.
     * @return the bitmap if cache exists or null otherwise
     */
    public Object getSerializable(@NonNull final String key) {
        return getSerializable(key, null);
    }",False,False,"The function of this method is to retrieve a serializable object from the cache based on a given key. It returns the object if it exists in the cache, otherwise it returns null.",False,"The given code is a method named ""getSerializable"" that retrieves a serializable object from a cache based on a provided key. It returns the object if it exists in the cache, otherwise it returns null."
61,"getSerializable(String,Object)",get serializable key default value return the serializable in cache param key the key of cache param default value the default value if the cache doesn t exist return the bitmap if cache exists or default value otherwise ,Method,getSerializable(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getSerializable(String,Object,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getSerializable(String,Object) com.blankj.utilcode.util.CacheDiskUtilsTest+getSerializable() com.blankj.utilcode.util.CacheDiskUtilsTest+getSerializable() com.blankj.utilcode.util.CacheDiskUtilsTest+getSerializable() com.blankj.utilcode.util.CacheDiskUtilsTest+getSerializable()",com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+bytes2Object(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2Object(byte[]),com.blankj.utilcode.util.CacheDiskUtils+TYPE_SERIALIZABLE,487,12,1,"/** 
 * Return the serializable in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the bitmap if cache exists or defaultValue otherwise
 */
","/**
     * Return the serializable in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the bitmap if cache exists or defaultValue otherwise
     */
    public Object getSerializable(@NonNull final String key, final Object defaultValue) {
        byte[] bytes = realGetBytes(TYPE_SERIALIZABLE + key);
        if (bytes == null) return defaultValue;
        return bytes2Object(bytes);
    }",False,False,"This method retrieves a serializable object from the cache using a given key. If the object is not found in the cache, it returns a default value.",False,"This code defines a method called ""getSerializable"" that retrieves a serializable object from a cache based on a given key. If the object is found in the cache, it is returned. Otherwise, the method returns a default value provided by the caller."
62,getCacheSize(),get cache size return the size of cache in bytes return the size of cache in bytes ,Method,,com.blankj.utilcode.util.CacheDiskStaticUtils+getCacheSize(CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getCacheDiskSize() com.blankj.utilcode.util.CacheDiskUtilsTest+getCacheSize() com.blankj.utilcode.util.CacheDiskUtilsTest+getCacheSize() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear(),com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheSize() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheSize(),,306,10,1,"/** 
 * Return the size of cache, in bytes.
 * @return the size of cache, in bytes
 */
","/**
     * Return the size of cache, in bytes.
     *
     * @return the size of cache, in bytes
     */
    public long getCacheSize() {
        DiskCacheManager diskCacheManager = getDiskCacheManager();
        if (diskCacheManager == null) return 0;
        return diskCacheManager.getCacheSize();
    }",False,False,"This method returns the size of the cache in bytes. It first gets the disk cache manager and if it is null, it returns 0. Otherwise, it calls the getCacheSize() method of the disk cache manager and returns the result.",True,"This code defines a method called ""getCacheSize"" that returns the size of a cache in bytes. It first retrieves the DiskCacheManager object and if it is not null, it calls the ""getCacheSize"" method of the DiskCacheManager to get the cache size."
63,getCacheCount(),get cache count return the count of cache return the count of cache ,Method,,com.blankj.utilcode.util.CacheDiskStaticUtils+getCacheCount(CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getCacheDiskCount() com.blankj.utilcode.util.CacheDiskUtilsTest+getCacheCount() com.blankj.utilcode.util.CacheDiskUtilsTest+getCacheCount() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear(),com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheCount() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheCount(),,289,10,1,"/** 
 * Return the count of cache.
 * @return the count of cache
 */
","/**
     * Return the count of cache.
     *
     * @return the count of cache
     */
    public int getCacheCount() {
        DiskCacheManager diskCacheManager = getDiskCacheManager();
        if (diskCacheManager == null) return 0;
        return diskCacheManager.getCacheCount();
    }",False,False,"This method returns the count of cache by first getting the disk cache manager and then returning the cache count from the disk cache manager. If the disk cache manager is null, it returns 0.",True,"This code defines a method called ""getCacheCount"" that returns the count of cache. It first checks if the disk cache manager is null, and if not, it calls the ""getCacheCount"" method of the disk cache manager and returns the result."
64,remove(String),remove key remove the cache by key param key the key of cache return code true success code false fail ,Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+remove(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+remove(String) com.blankj.utilcode.util.CacheDiskUtilsTest+remove() com.blankj.utilcode.util.CacheDiskUtilsTest+remove() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getBytes() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getString() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getParcel() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getSerializable() com.blankj.utilcode.util.CacheDoubleUtilsTest+getBytes() com.blankj.utilcode.util.CacheDoubleUtilsTest+getString() com.blankj.utilcode.util.CacheDoubleUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDoubleUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDoubleUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDoubleUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDoubleUtilsTest+getParcel() com.blankj.utilcode.util.CacheDoubleUtilsTest+getSerializable()",com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String),com.blankj.utilcode.util.CacheDiskUtils+TYPE_BYTE com.blankj.utilcode.util.CacheDiskUtils+TYPE_STRING com.blankj.utilcode.util.CacheDiskUtils+TYPE_JSON_OBJECT com.blankj.utilcode.util.CacheDiskUtils+TYPE_JSON_ARRAY com.blankj.utilcode.util.CacheDiskUtils+TYPE_BITMAP com.blankj.utilcode.util.CacheDiskUtils+TYPE_DRAWABLE com.blankj.utilcode.util.CacheDiskUtils+TYPE_PARCELABLE com.blankj.utilcode.util.CacheDiskUtils+TYPE_SERIALIZABLE,877,18,1,"/** 
 * Remove the cache by key.
 * @param key The key of cache.
 * @return {@code true}: success<br> {@code false}: fail
 */
","/**
     * Remove the cache by key.
     *
     * @param key The key of cache.
     * @return {@code true}: success<br>{@code false}: fail
     */
    public boolean remove(@NonNull final String key) {
        DiskCacheManager diskCacheManager = getDiskCacheManager();
        if (diskCacheManager == null) return true;
        return diskCacheManager.removeByKey(TYPE_BYTE + key)
                && diskCacheManager.removeByKey(TYPE_STRING + key)
                && diskCacheManager.removeByKey(TYPE_JSON_OBJECT + key)
                && diskCacheManager.removeByKey(TYPE_JSON_ARRAY + key)
                && diskCacheManager.removeByKey(TYPE_BITMAP + key)
                && diskCacheManager.removeByKey(TYPE_DRAWABLE + key)
                && diskCacheManager.removeByKey(TYPE_PARCELABLE + key)
                && diskCacheManager.removeByKey(TYPE_SERIALIZABLE + key);
    }",False,False,"The function of this method is to remove cache entries from the disk cache manager using the provided key. It returns true if all cache entries are successfully removed, and false if any removal fails.",True,"This code defines a method called ""remove"" that removes cache entries from a disk cache. It takes a key as a parameter and removes cache entries associated with that key for various data types such as byte, string, JSON object, JSON array, bitmap, drawable, parcelable, and serializable. The method returns true if all cache entries are successfully removed, otherwise false."
65,clear(),clear clear all of the cache return code true success code false fail ,Method,,com.blankj.utilcode.util.CacheDiskStaticUtils+clear(CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+tearDown() com.blankj.utilcode.util.CacheDiskUtilsTest+tearDown(),com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+clear() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+clear(),,303,10,1,"/** 
 * Clear all of the cache.
 * @return {@code true}: success<br> {@code false}: fail
 */
","/**
     * Clear all of the cache.
     *
     * @return {@code true}: success<br>{@code false}: fail
     */
    public boolean clear() {
        DiskCacheManager diskCacheManager = getDiskCacheManager();
        if (diskCacheManager == null) return true;
        return diskCacheManager.clear();
    }",False,False,"This method clears the cache by calling the clear() method of the DiskCacheManager class. It returns true if the cache is cleared successfully, and false if it fails.",True,"The code defines a method called ""clear"" that is used to clear the cache. It checks if a disk cache manager is available and if so, it calls the ""clear"" method of the disk cache manager and returns the result. The method returns true if the cache is successfully cleared and false if it fails."
66,DiskCacheManager,disk cache manager ,MemberClass,,,"java.util.Collections+synchronizedMap(Map) java.util.Collections+synchronizedMap(Map) java.util.HashMap+HashMap() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+DiskCacheManager(File,long,int) java.util.concurrent.atomic.AtomicLong+AtomicLong() java.util.concurrent.atomic.AtomicInteger+AtomicInteger() java.lang.Thread+Thread(Runnable) +() +run() java.io.File+listFiles(FilenameFilter) java.io.File+listFiles(FilenameFilter) +() +accept(File,String) java.lang.String+startsWith(String) java.lang.String+startsWith(String) java.io.File+length() java.io.File+length() java.util.Map+put(K,V) java.util.Map+put(K,V) java.io.File+lastModified() java.io.File+lastModified() java.util.concurrent.atomic.AtomicLong+getAndAdd(long) java.util.concurrent.atomic.AtomicLong+getAndAdd(long) java.util.concurrent.atomic.AtomicInteger+getAndAdd(int) java.util.concurrent.atomic.AtomicInteger+getAndAdd(int) java.lang.Thread+start() java.lang.Thread+start() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheSize() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() java.util.concurrent.atomic.AtomicLong+get() java.util.concurrent.atomic.AtomicLong+get() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheCount() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() java.util.concurrent.atomic.AtomicInteger+get() java.util.concurrent.atomic.AtomicInteger+get() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileBeforePut(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() java.io.File+File(File,String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheNameByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheNameByKey(String) java.io.File+exists() java.io.File+exists() java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.io.File+length() java.io.File+length() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() java.lang.Thread+join() java.lang.Thread+join() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileIfExists(String) java.io.File+File(File,String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheNameByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheNameByKey(String) java.io.File+exists() java.io.File+exists() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheNameByKey(String) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+hashCode() java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+hashCode() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+put(File) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.io.File+length() java.io.File+length() java.util.concurrent.atomic.AtomicInteger+get() java.util.concurrent.atomic.AtomicInteger+get() java.util.concurrent.atomic.AtomicLong+get() java.util.concurrent.atomic.AtomicLong+get() java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.util.concurrent.atomic.AtomicLong+addAndGet(long) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeOldest() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeOldest() java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+updateModify(File) java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() java.io.File+setLastModified(long) java.io.File+setLastModified(long) java.util.Map+put(K,V) java.util.Map+put(K,V) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileIfExists(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileIfExists(String) java.io.File+delete() java.io.File+delete() java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.io.File+length() java.io.File+length() java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.Map+remove(Object) java.util.Map+remove(Object) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+clear() java.io.File+listFiles(FilenameFilter) java.io.File+listFiles(FilenameFilter) +() +accept(File,String) java.lang.String+startsWith(String) java.lang.String+startsWith(String) java.io.File+delete() java.io.File+delete() java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.io.File+length() java.io.File+length() java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Map+clear() java.util.Map+clear() java.util.concurrent.atomic.AtomicLong+set(long) java.util.concurrent.atomic.AtomicLong+set(long) java.util.concurrent.atomic.AtomicInteger+set(int) java.util.concurrent.atomic.AtomicInteger+set(int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeOldest() java.util.Map+isEmpty() java.util.Map+isEmpty() java.util.Map+entrySet() java.util.Map+entrySet() java.util.Map.Entry+getValue() java.util.Map.Entry+getValue() java.util.Map.Entry+getKey() java.util.Map.Entry+getKey() java.io.File+length() java.io.File+length() java.io.File+delete() java.io.File+delete() java.util.Map+remove(Object) java.util.Map+remove(Object)",com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+sizeLimit com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+countLimit com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheDir com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+mThread com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheDir com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+sizeLimit com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+countLimit com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+mThread com.blankj.utilcode.util.CacheDiskUtils+CACHE_PREFIX com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+mThread com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheDir com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+mThread com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheDir com.blankj.utilcode.util.CacheDiskUtils+CACHE_PREFIX com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+countLimit com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+sizeLimit com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheDir com.blankj.utilcode.util.CacheDiskUtils+CACHE_PREFIX com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates java.lang.Long+MAX_VALUE com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates,5697,158,26,,"private static final class DiskCacheManager {
        private final AtomicLong      cacheSize;
        private final AtomicInteger   cacheCount;
        private final long            sizeLimit;
        private final int             countLimit;
        private final Map<File, Long> lastUsageDates
                = Collections.synchronizedMap(new HashMap<File, Long>());
        private final File            cacheDir;
        private final Thread          mThread;

        private DiskCacheManager(final File cacheDir, final long sizeLimit, final int countLimit) {
            this.cacheDir = cacheDir;
            this.sizeLimit = sizeLimit;
            this.countLimit = countLimit;
            cacheSize = new AtomicLong();
            cacheCount = new AtomicInteger();
            mThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int size = 0;
                    int count = 0;
                    final File[] cachedFiles = cacheDir.listFiles(new FilenameFilter() {
                        @Override
                        public boolean accept(File dir, String name) {
                            return name.startsWith(CACHE_PREFIX);
                        }
                    });
                    if (cachedFiles != null) {
                        for (File cachedFile : cachedFiles) {
                            size += cachedFile.length();
                            count += 1;
                            lastUsageDates.put(cachedFile, cachedFile.lastModified());
                        }
                        cacheSize.getAndAdd(size);
                        cacheCount.getAndAdd(count);
                    }
                }
            });
            mThread.start();
        }

        private long getCacheSize() {
            wait2InitOk();
            return cacheSize.get();
        }

        private int getCacheCount() {
            wait2InitOk();
            return cacheCount.get();
        }

        private File getFileBeforePut(final String key) {
            wait2InitOk();
            File file = new File(cacheDir, getCacheNameByKey(key));
            if (file.exists()) {
                cacheCount.addAndGet(-1);
                cacheSize.addAndGet(-file.length());
            }
            return file;
        }

        private void wait2InitOk() {
            try {
                mThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        private File getFileIfExists(final String key) {
            File file = new File(cacheDir, getCacheNameByKey(key));
            if (!file.exists()) return null;
            return file;
        }

        private String getCacheNameByKey(final String key) {
            return CACHE_PREFIX + key.substring(0, 3) + key.substring(3).hashCode();
        }

        private void put(final File file) {
            cacheCount.addAndGet(1);
            cacheSize.addAndGet(file.length());
            while (cacheCount.get() > countLimit || cacheSize.get() > sizeLimit) {
                cacheSize.addAndGet(-removeOldest());
                cacheCount.addAndGet(-1);
            }
        }

        private void updateModify(final File file) {
            Long millis = System.currentTimeMillis();
            file.setLastModified(millis);
            lastUsageDates.put(file, millis);
        }

        private boolean removeByKey(final String key) {
            File file = getFileIfExists(key);
            if (file == null) return true;
            if (!file.delete()) return false;
            cacheSize.addAndGet(-file.length());
            cacheCount.addAndGet(-1);
            lastUsageDates.remove(file);
            return true;
        }

        private boolean clear() {
            File[] files = cacheDir.listFiles(new FilenameFilter() {
                @Override
                public boolean accept(File dir, String name) {
                    return name.startsWith(CACHE_PREFIX);
                }
            });
            if (files == null || files.length <= 0) return true;
            boolean flag = true;
            for (File file : files) {
                if (!file.delete()) {
                    flag = false;
                    continue;
                }
                cacheSize.addAndGet(-file.length());
                cacheCount.addAndGet(-1);
                lastUsageDates.remove(file);
            }
            if (flag) {
                lastUsageDates.clear();
                cacheSize.set(0);
                cacheCount.set(0);
            }
            return flag;
        }

        /**
         * Remove the oldest files.
         *
         * @return the size of oldest files, in bytes
         */
        private long removeOldest() {
            if (lastUsageDates.isEmpty()) return 0;
            Long oldestUsage = Long.MAX_VALUE;
            File oldestFile = null;
            Set<Map.Entry<File, Long>> entries = lastUsageDates.entrySet();
            synchronized (lastUsageDates) {
                for (Map.Entry<File, Long> entry : entries) {
                    Long lastValueUsage = entry.getValue();
                    if (lastValueUsage < oldestUsage) {
                        oldestUsage = lastValueUsage;
                        oldestFile = entry.getKey();
                    }
                }
            }
            if (oldestFile == null) return 0;
            long fileSize = oldestFile.length();
            if (oldestFile.delete()) {
                lastUsageDates.remove(oldestFile);
                return fileSize;
            }
            return 0;
        }
    }",False,False,,False,
67,DiskCacheHelper,disk cache helper ,MemberClass,,,"com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+newByteArrayWithTime(int,byte[]) java.lang.String+getBytes() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+createDueTime(int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+createDueTime(int) java.lang.String+getBytes() java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+createDueTime(int) java.lang.String+format(Locale,String,Object[]) java.lang.String+format(Locale,String,Object[]) java.util.Locale+getDefault() java.util.Locale+getDefault() java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+isDue(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+getDueTime(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+getDueTime(byte[]) java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+getDueTime(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+hasTimeInfo(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+hasTimeInfo(byte[]) java.lang.String+String(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+copyOfRange(byte[],int,int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+copyOfRange(byte[],int,int) java.lang.Long+parseLong(String) java.lang.Long+parseLong(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+getDataWithoutDueTime(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+hasTimeInfo(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+hasTimeInfo(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+copyOfRange(byte[],int,int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+copyOfRange(byte[],int,int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+copyOfRange(byte[],int,int) java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.Math+min(int,int) java.lang.Math+min(int,int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+hasTimeInfo(byte[])",com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+TIME_INFO_LEN com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+TIME_INFO_LEN com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+TIME_INFO_LEN,2420,66,26,,"private static final class DiskCacheHelper {

        static final int TIME_INFO_LEN = 14;

        private static byte[] newByteArrayWithTime(final int second, final byte[] data) {
            byte[] time = createDueTime(second).getBytes();
            byte[] content = new byte[time.length + data.length];
            System.arraycopy(time, 0, content, 0, time.length);
            System.arraycopy(data, 0, content, time.length, data.length);
            return content;
        }

        /**
         * Return the string of due time.
         *
         * @param seconds The seconds.
         * @return the string of due time
         */
        private static String createDueTime(final int seconds) {
            return String.format(
                    Locale.getDefault(), ""_$%010d$_"",
                    System.currentTimeMillis() / 1000 + seconds
            );
        }

        private static boolean isDue(final byte[] data) {
            long millis = getDueTime(data);
            return millis != -1 && System.currentTimeMillis() > millis;
        }

        private static long getDueTime(final byte[] data) {
            if (hasTimeInfo(data)) {
                String millis = new String(copyOfRange(data, 2, 12));
                try {
                    return Long.parseLong(millis) * 1000;
                } catch (NumberFormatException e) {
                    return -1;
                }
            }
            return -1;
        }

        private static byte[] getDataWithoutDueTime(final byte[] data) {
            if (hasTimeInfo(data)) {
                return copyOfRange(data, TIME_INFO_LEN, data.length);
            }
            return data;
        }

        private static byte[] copyOfRange(final byte[] original, final int from, final int to) {
            int newLength = to - from;
            if (newLength < 0) throw new IllegalArgumentException(from + "" > "" + to);
            byte[] copy = new byte[newLength];
            System.arraycopy(original, from, copy, 0, Math.min(original.length - from, newLength));
            return copy;
        }

        private static boolean hasTimeInfo(final byte[] data) {
            return data != null
                    && data.length >= TIME_INFO_LEN
                    && data[0] == '_'
                    && data[1] == '$'
                    && data[12] == '$'
                    && data[13] == '_';
        }
    }",False,False,,False,
68,string2Bytes(String),string2 bytes string ,Method,"put(String,String,int)",,java.lang.String+getBytes() java.lang.String+getBytes(),,138,4,10,,"private static byte[] string2Bytes(final String string) {
        if (string == null) return null;
        return string.getBytes();
    }",True,True,"This method converts a string into an array of bytes. If the input string is null, it returns null. Otherwise, it uses the getBytes() method to convert the string into bytes and returns the result.",False,"The code defines a private static method named ""string2Bytes"" that takes a string as input and converts it into an array of bytes. If the input string is null, the method returns null; otherwise, it returns the byte array representation of the string."
69,bytes2String(byte[]),bytes2 string bytes ,Method,"getString(String,String)",,java.lang.String+String(byte[]),,136,4,10,,"private static String bytes2String(final byte[] bytes) {
        if (bytes == null) return null;
        return new String(bytes);
    }",True,True,"This method converts a byte array into a string. If the byte array is null, it returns null. Otherwise, it creates a new string using the byte array and returns it.",False,"The given code is a private static method named ""bytes2String"" that takes in a byte array as input. It converts the byte array into a string and returns the string. If the input byte array is null, it returns null."
70,jsonObject2Bytes(JSONObject),json object2 bytes json object ,Method,"put(String,JSONObject,int)",,java.lang.String+getBytes() org.json.JSONObject+toString() org.json.JSONObject+toString() java.lang.String+getBytes(),,169,4,10,,"private static byte[] jsonObject2Bytes(final JSONObject jsonObject) {
        if (jsonObject == null) return null;
        return jsonObject.toString().getBytes();
    }",True,True,"This method converts a JSONObject into a byte array. If the JSONObject is null, it returns null. Otherwise, it converts the JSONObject to a string and then converts the string to a byte array.",False,"The given code is a private static method named ""jsonObject2Bytes"" that takes a JSONObject as input and converts it into a byte array. It returns the byte array representation of the input JSONObject, or null if the input is null."
71,bytes2JSONObject(byte[]),bytes2 json object bytes ,Method,"getJSONObject(String,JSONObject)",,org.json.JSONObject+JSONObject(String) java.lang.String+String(byte[]) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,278,9,10,,"private static JSONObject bytes2JSONObject(final byte[] bytes) {
        if (bytes == null) return null;
        try {
            return new JSONObject(new String(bytes));
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }",True,True,"This method converts a byte array into a JSONObject. If the byte array is null or an exception occurs during the conversion, it returns null.",False,"The given code defines a private static method named ""bytes2JSONObject"" that takes in a byte array as input. It attempts to convert the byte array into a JSONObject by creating a new String from the bytes and then constructing a JSONObject from that string. If successful, it returns the created JSONObject, otherwise it prints the exception stack trace and returns null."
72,jsonArray2Bytes(JSONArray),json array2 bytes json array ,Method,"put(String,JSONArray,int)",,java.lang.String+getBytes() org.json.JSONArray+toString() org.json.JSONArray+toString() java.lang.String+getBytes(),,164,4,10,,"private static byte[] jsonArray2Bytes(final JSONArray jsonArray) {
        if (jsonArray == null) return null;
        return jsonArray.toString().getBytes();
    }",True,True,"This method converts a JSONArray object into a byte array. If the input JSONArray is null, it returns null. Otherwise, it converts the JSONArray to a string and then converts the string to a byte array.",False,"The code defines a private static method named jsonArray2Bytes that takes a JSONArray as input. It converts the JSONArray to a string representation and returns the byte array of the string. If the input JSONArray is null, it returns null."
73,bytes2JSONArray(byte[]),bytes2 json array bytes ,Method,"getJSONArray(String,JSONArray)",,org.json.JSONArray+JSONArray(String) java.lang.String+String(byte[]) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,275,9,10,,"private static JSONArray bytes2JSONArray(final byte[] bytes) {
        if (bytes == null) return null;
        try {
            return new JSONArray(new String(bytes));
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }",True,True,"This method converts a byte array into a JSONArray object. If the byte array is null or an exception occurs during the conversion, it returns null.",False,"The given code defines a private static method named ""bytes2JSONArray"" that takes in a byte array as input. It attempts to convert the byte array into a JSONArray object by creating a new String from the byte array and then initializing a JSONArray with that string. If successful, it returns the created JSONArray, otherwise it prints the exception stack trace and returns null."
74,parcelable2Bytes(Parcelable),parcelable2 bytes parcelable ,Method,"put(String,Parcelable,int)",,,,296,8,10,,"private static byte[] parcelable2Bytes(final Parcelable parcelable) {
        if (parcelable == null) return null;
        Parcel parcel = Parcel.obtain();
        parcelable.writeToParcel(parcel, 0);
        byte[] bytes = parcel.marshall();
        parcel.recycle();
        return bytes;
    }",True,True,This method converts a Parcelable object into a byte array by writing it to a Parcel and then marshalling the Parcel into a byte array.,False,"The given code is a method named ""parcelable2Bytes"" that takes a Parcelable object as input and converts it into a byte array. It does this by writing the Parcelable object to a Parcel, marshalling the Parcel into a byte array, and then recycling the Parcel before returning the byte array."
75,"bytes2Parcelable(byte[],Parcelable.Creator<T>)",bytes2 parcelable bytes creator ,Method,,,,,413,10,10,,"private static <T> T bytes2Parcelable(final byte[] bytes,
                                          final Parcelable.Creator<T> creator) {
        if (bytes == null) return null;
        Parcel parcel = Parcel.obtain();
        parcel.unmarshall(bytes, 0, bytes.length);
        parcel.setDataPosition(0);
        T result = creator.createFromParcel(parcel);
        parcel.recycle();
        return result;
    }",False,True,This method converts a byte array into a Parcelable object using the provided Parcelable.Creator.,False,"This code defines a method that converts a byte array into a Parcelable object. It takes the byte array and a Parcelable.Creator as input, creates a Parcel object, unmarshalls the byte array into the Parcel, creates the Parcelable object using the creator, recycles the Parcel, and returns the resulting Parcelable object."
76,serializable2Bytes(Serializable),serializable2 bytes serializable ,Method,"put(String,Serializable,int)",,java.io.ObjectOutputStream+ObjectOutputStream(OutputStream) java.io.ByteArrayOutputStream+ByteArrayOutputStream() java.io.ObjectOutputStream+writeObject(Object) java.io.ObjectOutputStream+writeObject(Object) java.io.ByteArrayOutputStream+toByteArray() java.io.ByteArrayOutputStream+toByteArray() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.io.ObjectOutputStream+close() java.io.ObjectOutputStream+close() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,690,21,10,,"private static byte[] serializable2Bytes(final Serializable serializable) {
        if (serializable == null) return null;
        ByteArrayOutputStream baos;
        ObjectOutputStream oos = null;
        try {
            oos = new ObjectOutputStream(baos = new ByteArrayOutputStream());
            oos.writeObject(serializable);
            return baos.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            try {
                if (oos != null) {
                    oos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }",True,True,This method converts a serializable object into a byte array.,False,This code defines a private static method named `serializable2Bytes` that takes a `Serializable` object as input and converts it into a byte array. It uses an `ObjectOutputStream` to write the object into a `ByteArrayOutputStream` and returns the resulting byte array.
77,bytes2Object(byte[]),bytes2 object bytes ,Method,"getSerializable(String,Object)",,java.io.ObjectInputStream+ObjectInputStream(InputStream) java.io.ByteArrayInputStream+ByteArrayInputStream(byte[]) java.io.ObjectInputStream+readObject() java.io.ObjectInputStream+readObject() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.io.ObjectInputStream+close() java.io.ObjectInputStream+close() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,578,19,10,,"private static Object bytes2Object(final byte[] bytes) {
        if (bytes == null) return null;
        ObjectInputStream ois = null;
        try {
            ois = new ObjectInputStream(new ByteArrayInputStream(bytes));
            return ois.readObject();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            try {
                if (ois != null) {
                    ois.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }",True,True,This method converts a byte array into an Object by deserializing it using an ObjectInputStream. It returns the deserialized Object or null if an exception occurs.,False,"This code defines a private static method called ""bytes2Object"" that takes in a byte array as input. It uses an ObjectInputStream to convert the byte array into an Object and returns the Object. If any exception occurs during the process, it prints the stack trace and returns null."
78,bitmap2Bytes(Bitmap),bitmap2 bytes bitmap ,Method,"put(String,Bitmap,int) drawable2Bytes(Drawable)",,java.io.ByteArrayOutputStream+ByteArrayOutputStream() java.io.ByteArrayOutputStream+toByteArray() java.io.ByteArrayOutputStream+toByteArray(),,268,6,10,,"private static byte[] bitmap2Bytes(final Bitmap bitmap) {
        if (bitmap == null) return null;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
        return baos.toByteArray();
    }",True,True,This method converts a Bitmap image into a byte array by compressing it using the PNG format. It returns the byte array representation of the image.,False,"This code defines a private static method named ""bitmap2Bytes"" that takes a Bitmap object as input and converts it into a byte array. It uses the PNG compression format with a quality of 100, and returns the resulting byte array."
79,bytes2Bitmap(byte[]),bytes2 bitmap bytes ,Method,"getBitmap(String,Bitmap) bytes2Drawable(byte[])",,,,210,5,10,,"private static Bitmap bytes2Bitmap(final byte[] bytes) {
        return (bytes == null || bytes.length <= 0)
                ? null
                : BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
    }",True,True,"This method converts a byte array into a Bitmap image. If the byte array is null or empty, it returns null. Otherwise, it decodes the byte array into a Bitmap using BitmapFactory.",False,"The given code is a private static method named ""bytes2Bitmap"" that takes in a byte array as input. It returns a Bitmap object by decoding the byte array using the BitmapFactory class. If the byte array is null or empty, it returns null."
80,drawable2Bytes(Drawable),drawable2 bytes drawable ,Method,"put(String,Drawable,int)",,com.blankj.utilcode.util.CacheDiskUtils+bitmap2Bytes(Bitmap) com.blankj.utilcode.util.CacheDiskUtils+bitmap2Bytes(Bitmap) com.blankj.utilcode.util.CacheDiskUtils+drawable2Bitmap(Drawable) com.blankj.utilcode.util.CacheDiskUtils+drawable2Bitmap(Drawable),,151,3,10,,"private static byte[] drawable2Bytes(final Drawable drawable) {
        return drawable == null ? null : bitmap2Bytes(drawable2Bitmap(drawable));
    }",True,True,"This method converts a Drawable object into a byte array. It first converts the Drawable into a Bitmap, and then converts the Bitmap into a byte array using another method called bitmap2Bytes.",False,"The code defines a private static method named ""drawable2Bytes"" that takes a Drawable object as input. It converts the Drawable into a Bitmap and then converts the Bitmap into a byte array using another method named ""bitmap2Bytes"". The method returns the byte array or null if the Drawable is null."
81,bytes2Drawable(byte[]),bytes2 drawable bytes ,Method,"getDrawable(String,Drawable)",,com.blankj.utilcode.util.CacheDiskUtils+bitmap2Drawable(Bitmap) com.blankj.utilcode.util.CacheDiskUtils+bitmap2Drawable(Bitmap) com.blankj.utilcode.util.CacheDiskUtils+bytes2Bitmap(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2Bitmap(byte[]),,142,3,10,,"private static Drawable bytes2Drawable(final byte[] bytes) {
        return bytes == null ? null : bitmap2Drawable(bytes2Bitmap(bytes));
    }",True,True,"This method converts a byte array into a Drawable object. It first converts the byte array into a Bitmap object using the bytes2Bitmap method, and then converts the Bitmap into a Drawable object using the bitmap2Drawable method.",False,"The given code is a private static method that takes in a byte array as input and converts it into a Drawable object. It first converts the byte array into a Bitmap object using the bytes2Bitmap() method, and then converts the Bitmap into a Drawable using the bitmap2Drawable() method. If the input byte array is null, it returns null."
82,drawable2Bitmap(Drawable),drawable2 bitmap drawable ,Method,drawable2Bytes(Drawable),,java.lang.Object+Object(),,1229,30,10,,"private static Bitmap drawable2Bitmap(final Drawable drawable) {
        if (drawable instanceof BitmapDrawable) {
            BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
            if (bitmapDrawable.getBitmap() != null) {
                return bitmapDrawable.getBitmap();
            }
        }
        Bitmap bitmap;
        if (drawable.getIntrinsicWidth() <= 0 || drawable.getIntrinsicHeight() <= 0) {
            bitmap = Bitmap.createBitmap(
                    1,
                    1,
                    drawable.getOpacity() != PixelFormat.OPAQUE
                            ? Bitmap.Config.ARGB_8888
                            : Bitmap.Config.RGB_565
            );
        } else {
            bitmap = Bitmap.createBitmap(
                    drawable.getIntrinsicWidth(),
                    drawable.getIntrinsicHeight(),
                    drawable.getOpacity() != PixelFormat.OPAQUE
                            ? Bitmap.Config.ARGB_8888
                            : Bitmap.Config.RGB_565
            );
        }
        Canvas canvas = new Canvas(bitmap);
        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        drawable.draw(canvas);
        return bitmap;
    }",False,True,"This method converts a Drawable object into a Bitmap object. If the Drawable is already a BitmapDrawable, it returns the Bitmap. Otherwise, it creates a new Bitmap with the same dimensions as the Drawable and draws the Drawable onto the Bitmap.",False,"This code defines a method named `drawable2Bitmap` that takes a `Drawable` object as input and converts it into a `Bitmap` object. It handles different cases based on the type and properties of the drawable, and creates a bitmap with appropriate dimensions and configuration before drawing the drawable onto it."
83,bitmap2Drawable(Bitmap),bitmap2 drawable bitmap ,Method,bytes2Drawable(byte[]),,java.lang.Object+Object() com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.Utils+getApp(),,198,5,10,,"private static Drawable bitmap2Drawable(final Bitmap bitmap) {
        return bitmap == null
                ? null
                : new BitmapDrawable(Utils.getApp().getResources(), bitmap);
    }",True,True,"This method converts a Bitmap object into a Drawable object. If the Bitmap is null, it returns null. Otherwise, it creates a new BitmapDrawable using the Bitmap and the application's resources.",False,"The code defines a private static method named `bitmap2Drawable` that takes a Bitmap as input and returns a Drawable. It checks if the input bitmap is null and returns null if true, otherwise it creates a new BitmapDrawable using the input bitmap and returns it."
84,"writeFileFromBytes(File,byte[])",write file from bytes file bytes ,Method,"realPutBytes(String,byte[],int)",,"java.io.FileOutputStream+getChannel() java.io.FileOutputStream+FileOutputStream(File,boolean) java.io.FileOutputStream+getChannel() java.nio.channels.FileChannel+write(ByteBuffer) java.nio.channels.FileChannel+write(ByteBuffer) java.nio.ByteBuffer+wrap(byte[]) java.nio.ByteBuffer+wrap(byte[]) java.nio.channels.FileChannel+force(boolean) java.nio.channels.FileChannel+force(boolean) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.nio.channels.spi.AbstractInterruptibleChannel+close() java.nio.channels.spi.AbstractInterruptibleChannel+close() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()",,555,18,10,,"private static void writeFileFromBytes(final File file, final byte[] bytes) {
        FileChannel fc = null;
        try {
            fc = new FileOutputStream(file, false).getChannel();
            fc.write(ByteBuffer.wrap(bytes));
            fc.force(true);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fc != null) {
                    fc.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }",False,True,This method writes the given byte array to a file specified by the given file object.,False,"The code defines a method named `writeFileFromBytes` that takes a `File` object and a byte array as parameters. It writes the contents of the byte array to the specified file using a `FileChannel`, ensuring that the changes are immediately flushed to disk."
85,readFile2Bytes(File),read file2 bytes file ,Method,"realGetBytes(String,byte[])",,"java.io.RandomAccessFile+getChannel() java.io.RandomAccessFile+RandomAccessFile(File,String) java.io.RandomAccessFile+getChannel() java.nio.channels.FileChannel+size() java.nio.channels.FileChannel+size() java.nio.MappedByteBuffer+load() java.nio.channels.FileChannel+map(MapMode,long,long) java.nio.channels.FileChannel+map(MapMode,long,long) java.nio.MappedByteBuffer+load() java.nio.ByteBuffer+get(byte[],int,int) java.nio.ByteBuffer+get(byte[],int,int) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.nio.channels.spi.AbstractInterruptibleChannel+close() java.nio.channels.spi.AbstractInterruptibleChannel+close() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()",java.nio.channels.FileChannel.MapMode+READ_ONLY,715,22,10,,"private static byte[] readFile2Bytes(final File file) {
        FileChannel fc = null;
        try {
            fc = new RandomAccessFile(file, ""r"").getChannel();
            int size = (int) fc.size();
            MappedByteBuffer mbb = fc.map(FileChannel.MapMode.READ_ONLY, 0, size).load();
            byte[] data = new byte[size];
            mbb.get(data, 0, size);
            return data;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        } finally {
            try {
                if (fc != null) {
                    fc.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }",True,True,This method reads the contents of a file and returns them as a byte array.,False,"This code reads the contents of a file and returns them as a byte array. It uses a FileChannel and MappedByteBuffer to efficiently read the file, and handles any IOExceptions that may occur during the process."
86,isSpace(String),is space s ,Method,"getInstance(String,long,int)",,java.lang.String+length() java.lang.String+length() java.lang.Character+isWhitespace(char) java.lang.Character+isWhitespace(char) java.lang.String+charAt(int) java.lang.String+charAt(int),,279,9,10,,"private static boolean isSpace(final String s) {
        if (s == null) return true;
        for (int i = 0, len = s.length(); i < len; ++i) {
            if (!Character.isWhitespace(s.charAt(i))) {
                return false;
            }
        }
        return true;
    }",True,True,"The function checks if a given string consists only of whitespace characters. It returns true if the string is null or contains only whitespace, and false otherwise.",False,"The given code is a private static method named ""isSpace"" that takes a string as input and checks if it contains only whitespace characters. It returns true if the string is null or consists of only whitespace characters, otherwise it returns false."
