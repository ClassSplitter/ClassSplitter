index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,listeners,listeners ,Field,,,,,89,2,2,,"private List<ScOtrEngineListener> listeners =
        new Vector<ScOtrEngineListener>();",False,False,,False,
2,addListener(ScOtrEngineListener),add listener l ,Method,,,java.util.List+add(E) java.util.List+add(E),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,87,4,1,,"public void addListener(ScOtrEngineListener l)
    {
        listeners.add(l);
    }",False,False,This method adds a listener to a list of listeners in a class called ScOtrEngineListener.,True,"The code defines a method called ""addListener"" that takes a parameter of type ""ScOtrEngineListener"". This method adds the provided listener to a collection called ""listeners""."
3,removeListener(ScOtrEngineListener),remove listener l ,Method,,,java.util.List+remove(Object) java.util.List+remove(Object),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,93,4,1,,"public void removeListener(ScOtrEngineListener l)
    {
        listeners.remove(l);
    }",False,False,This method removes a listener from a list of listeners in a ScOtrEngineListener object.,False,"The code defines a method called ""removeListener"" that takes a parameter of type ""ScOtrEngineListener"". This method removes the specified listener from a collection called ""listeners""."
4,injectedMessageUIDs,injected message ui ds ,Field,,,,,64,1,2,,private List<String> injectedMessageUIDs = new Vector<String>();,False,False,,False,
5,isMessageUIDInjected(String),is message uid injected m uid ,Method,,,java.util.List+contains(Object) java.util.List+contains(Object),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+injectedMessageUIDs,114,4,1,,"public boolean isMessageUIDInjected(String mUID)
    {
        return injectedMessageUIDs.contains(mUID);
    }",False,False,This method checks if a given message UID is present in a collection of injected message UIDs and returns a boolean value indicating the result.,True,"The given code defines a method named ""isMessageUIDInjected"" that takes a string parameter ""mUID"". It checks if the ""mUID"" is present in the ""injectedMessageUIDs"" collection and returns a boolean value indicating whether it is present or not."
6,ScOtrKeyManager,sc otr key manager ,MemberClass,,,net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.ScOtrKeyManager+getKeyPair(SessionID) net.java.otr4j.session.SessionID+getAccountID() net.java.otr4j.session.SessionID+getAccountID() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadKeyPair(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadKeyPair(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+generateKeyPair(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+generateKeyPair(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadKeyPair(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadKeyPair(String),,385,13,0,,"class ScOtrKeyManager
        implements OtrKeyManager
    {
        public KeyPair getKeyPair(SessionID sessionID)
        {
            String accountID = sessionID.getAccountID();
            KeyPair keyPair = loadKeyPair(accountID);
            if (keyPair == null)
                generateKeyPair(accountID);

            return loadKeyPair(accountID);
        }
    }",False,False,,False,
7,ScOtrEngineHost,sc otr engine host ,MemberClass,,,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.ScOtrEngineHost+showWarning(SessionID,String) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.ScOtrEngineHost+showError(SessionID,String) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.ScOtrEngineHost+injectMessage(SessionID,String) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+createMessage(String) net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+createMessage(String) java.util.List+add(E) java.util.List+add(E) net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+sendInstantMessage(Contact,Message) net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+sendInstantMessage(Contact,Message) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.ScOtrEngineHost+getSessionPolicy(SessionID) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getContactPolicy(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getContactPolicy(Contact) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.ScOtrEngineHost+sessionStatusChanged(SessionID) java.util.Map+get(Object) java.util.Map+get(Object) net.java.otr4j.OtrEngine+getSessionStatus(SessionID) net.java.otr4j.OtrEngine+getSessionStatus(SessionID) net.java.otr4j.OtrEngine+getRemotePublicKey(SessionID) net.java.otr4j.OtrEngine+getRemotePublicKey(SessionID) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadPublicKey(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadPublicKey(String) net.java.otr4j.session.SessionID+getUserID() net.java.otr4j.session.SessionID+getUserID() java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+savePublicKey(String,PublicKey) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+savePublicKey(String,PublicKey) net.java.otr4j.session.SessionID+getUserID() net.java.otr4j.session.SessionID+getUserID() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() net.java.sip.communicator.plugin.otr.ScOtrEngineListener+sessionStatusChanged(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineListener+sessionStatusChanged(Contact)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+contactsMap net.java.sip.communicator.plugin.otr.OtrActivator+uiService net.java.sip.communicator.service.gui.Chat+SYSTEM_MESSAGE net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+DEFAULT_MIME_TYPE net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+contactsMap net.java.sip.communicator.plugin.otr.OtrActivator+uiService net.java.sip.communicator.service.gui.Chat+ERROR_MESSAGE net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+DEFAULT_MIME_TYPE net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+contactsMap net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+injectedMessageUIDs net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+contactsMap net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+contactsMap net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine net.java.otr4j.session.SessionStatus+ENCRYPTED net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine net.java.sip.communicator.plugin.otr.OtrActivator+resourceService net.java.sip.communicator.plugin.otr.OtrActivator+uiService net.java.sip.communicator.service.gui.Chat+SYSTEM_MESSAGE net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+HTML_MIME_TYPE net.java.sip.communicator.plugin.otr.OtrActivator+resourceService net.java.otr4j.session.SessionStatus+FINISHED net.java.sip.communicator.plugin.otr.OtrActivator+resourceService net.java.otr4j.session.SessionStatus+PLAINTEXT net.java.sip.communicator.plugin.otr.OtrActivator+resourceService net.java.sip.communicator.plugin.otr.OtrActivator+uiService net.java.sip.communicator.service.gui.Chat+SYSTEM_MESSAGE net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+HTML_MIME_TYPE net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,4479,111,0,,"class ScOtrEngineHost
        implements OtrEngineHost
    {
        public void showWarning(SessionID sessionID, String warn)
        {
            Contact contact = contactsMap.get(sessionID);
            if (contact == null)
                return;

            OtrActivator.uiService.getChat(contact).addMessage(
                contact.getDisplayName(), System.currentTimeMillis(),
                Chat.SYSTEM_MESSAGE, warn,
                OperationSetBasicInstantMessaging.DEFAULT_MIME_TYPE);
        }

        public void showError(SessionID sessionID, String err)
        {
            Contact contact = contactsMap.get(sessionID);
            if (contact == null)
                return;

            OtrActivator.uiService.getChat(contact).addMessage(
                contact.getDisplayName(), System.currentTimeMillis(),
                Chat.ERROR_MESSAGE, err,
                OperationSetBasicInstantMessaging.DEFAULT_MIME_TYPE);
        }

        public void injectMessage(SessionID sessionID, String messageText)
        {
            Contact contact = contactsMap.get(sessionID);
            OperationSetBasicInstantMessaging imOpSet =
                (OperationSetBasicInstantMessaging) contact
                    .getProtocolProvider().getOperationSet(
                        OperationSetBasicInstantMessaging.class);

            Message message = imOpSet.createMessage(messageText);
            injectedMessageUIDs.add(message.getMessageUID());
            imOpSet.sendInstantMessage(contact, message);
        }

        public OtrPolicy getSessionPolicy(SessionID sessionID)
        {
            return getContactPolicy(contactsMap.get(sessionID));
        }

        public void sessionStatusChanged(SessionID sessionID)
        {
            Contact contact = contactsMap.get(sessionID);
            if (contact == null)
                return;

            String message = """";
            switch (otrEngine.getSessionStatus(sessionID))
            {
            case ENCRYPTED:
                PublicKey remotePubKey =
                    otrEngine.getRemotePublicKey(sessionID);

                PublicKey storedPubKey = loadPublicKey(sessionID.getUserID());

                if (!remotePubKey.equals(storedPubKey))
                    savePublicKey(sessionID.getUserID(), remotePubKey);

                if (!isContactVerified(contact))
                {
                    String unverifiedSessionWarning =
                        OtrActivator.resourceService.getI18NString(
                            ""plugin.otr.activator.unverifiedsessionwarning"",
                            new String[]
                            { contact.getDisplayName() });

                    OtrActivator.uiService.getChat(contact).addMessage(
                        contact.getDisplayName(), System.currentTimeMillis(),
                        Chat.SYSTEM_MESSAGE, unverifiedSessionWarning,
                        OperationSetBasicInstantMessaging.HTML_MIME_TYPE);

                }
                message =
                    OtrActivator.resourceService
                        .getI18NString(
                            (isContactVerified(contact)) ? ""plugin.otr.activator.sessionstared""
                                : ""plugin.otr.activator.unverifiedsessionstared"",
                            new String[]
                            { contact.getDisplayName() });

                break;
            case FINISHED:
                message =
                    OtrActivator.resourceService.getI18NString(
                        ""plugin.otr.activator.sessionfinished"", new String[]
                        { contact.getDisplayName() });
                break;
            case PLAINTEXT:
                message =
                    OtrActivator.resourceService.getI18NString(
                        ""plugin.otr.activator.sessionlost"", new String[]
                        { contact.getDisplayName() });
                break;
            }

            OtrActivator.uiService.getChat(contact).addMessage(
                contact.getDisplayName(), System.currentTimeMillis(),
                Chat.SYSTEM_MESSAGE, message,
                OperationSetBasicInstantMessaging.HTML_MIME_TYPE);

            for (ScOtrEngineListener l : listeners)
            {
                l.sessionStatusChanged(contact);
            }
        }
    }",False,False,,False,
8,otrEngine,otr engine ,Field,,,,,103,2,2,,"private OtrEngine otrEngine =
        new OtrEngineImpl(new ScOtrEngineHost(), new ScOtrKeyManager());",False,False,,False,
9,isContactVerified(Contact),is contact verified contact ,Method,ScOtrEngineHost.sessionStatusChanged(SessionID) ScOtrEngineHost.sessionStatusChanged(SessionID) verifyContactFingerprint(Contact) forgetContactFingerprint(Contact),,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBoolean(String,boolean) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBoolean(String,boolean) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator,183,5,1,,"public boolean isContactVerified(Contact contact)
    {
        return this.configurator.getPropertyBoolean(getSessionID(contact)
            + ""publicKey.verified"", false);
    }",False,False,"This method checks if the contact's public key is verified by retrieving a boolean property from the configurator using the contact's session ID. It returns true if the property is set to true, otherwise it returns false.",True,"The given code defines a method named ""isContactVerified"" that takes a Contact object as a parameter. It retrieves a boolean value from a configuration property based on the session ID of the contact's public key, indicating whether the contact is verified or not. The method returns this boolean value."
10,contactsMap,contacts map ,Field,,,,,74,1,0,,"Map<SessionID, Contact> contactsMap = new Hashtable<SessionID, Contact>();",False,False,,False,
11,endSession(Contact),end session contact ,Method,,,net.java.otr4j.OtrEngine+endSession(SessionID) net.java.otr4j.OtrEngine+endSession(SessionID) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine,107,4,1,,"public void endSession(Contact contact)
    {
        otrEngine.endSession(getSessionID(contact));
    }",False,False,"This method ends a session for a given contact by calling the ""endSession"" method of the ""otrEngine"" object, passing the session ID of the contact as a parameter.",False,"The given code defines a method named ""endSession"" that takes a ""Contact"" object as a parameter. This method calls the ""endSession"" method of an ""otrEngine"" object, passing the session ID obtained from the ""getSessionID"" method with the given ""contact"" object."
12,getSessionStatus(Contact),get session status contact ,Method,,,net.java.otr4j.OtrEngine+getSessionStatus(SessionID) net.java.otr4j.OtrEngine+getSessionStatus(SessionID) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine,135,4,1,,"public SessionStatus getSessionStatus(Contact contact)
    {
        return otrEngine.getSessionStatus(getSessionID(contact));
    }",False,False,The function of the given method is to retrieve the session status of a contact by using the contact's session ID.,False,"This code defines a method named ""getSessionStatus"" that takes a ""Contact"" object as a parameter. It returns the session status of the contact by calling the ""getSessionStatus"" method of the ""otrEngine"" object, passing the session ID of the contact obtained from the ""getSessionID"" method."
13,"transformReceiving(Contact,String)",transform receiving contact msg text ,Method,,,"net.java.otr4j.OtrEngine+transformReceiving(SessionID,String) net.java.otr4j.OtrEngine+transformReceiving(SessionID,String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine,157,4,1,,"public String transformReceiving(Contact contact, String msgText)
    {
        return otrEngine.transformReceiving(getSessionID(contact), msgText);
    }",False,False,"This method takes a Contact object and a String message text as parameters. It then calls a method called ""transformReceiving"" from an ""otrEngine"" object, passing the session ID of the contact and the message text. The method returns the result of the ""transformReceiving"" method.",False,"The given code snippet defines a method named ""transformReceiving"" that takes a Contact object and a String as parameters. It calls a method named ""transformReceiving"" from an ""otrEngine"" object, passing the session ID of the contact and the message text as arguments, and returns the result as a String."
14,"transformSending(Contact,String)",transform sending contact msg text ,Method,,,"net.java.otr4j.OtrEngine+transformSending(SessionID,String) net.java.otr4j.OtrEngine+transformSending(SessionID,String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine,153,4,1,,"public String transformSending(Contact contact, String msgText)
    {
        return otrEngine.transformSending(getSessionID(contact), msgText);
    }",False,False,"This method takes a Contact object and a message text as input, and returns the transformed message text using the OTR engine for sending.",False,"The given code snippet defines a method named ""transformSending"" that takes a Contact object and a String message text as input parameters. It then calls the ""transformSending"" method of an ""otrEngine"" object, passing the session ID of the contact and the message text, and returns the result as a String."
15,refreshSession(Contact),refresh session contact ,Method,,,net.java.otr4j.OtrEngine+refreshSession(SessionID) net.java.otr4j.OtrEngine+refreshSession(SessionID) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine,115,4,1,,"public void refreshSession(Contact contact)
    {
        otrEngine.refreshSession(getSessionID(contact));
    }",False,False,The function of the method is to refresh the session for a given contact by calling the refreshSession method of the otrEngine object with the session ID obtained from the contact.,False,"The code defines a method named ""refreshSession"" that takes a ""Contact"" object as a parameter. It calls a method named ""refreshSession"" from an ""otrEngine"" object, passing the session ID of the provided contact as an argument. This method is responsible for refreshing the session associated with the given contact."
16,startSession(Contact),start session contact ,Method,,,net.java.otr4j.OtrEngine+startSession(SessionID) net.java.otr4j.OtrEngine+startSession(SessionID) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine,111,4,1,,"public void startSession(Contact contact)
    {
        otrEngine.startSession(getSessionID(contact));
    }",False,False,The function of the method is to start a session using the OTR engine with the session ID obtained from the given contact.,False,"The code defines a method called ""startSession"" that takes a ""Contact"" object as a parameter. It then calls the ""startSession"" method of an ""otrEngine"" object, passing in the session ID obtained from the ""getSessionID"" method with the ""contact"" parameter."
17,getSessionID(Contact),get session id contact ,Method,"isContactVerified(Contact) endSession(Contact) getSessionStatus(Contact) transformReceiving(Contact,String) transformSending(Contact,String) refreshSession(Contact) startSession(Contact) verifyContactFingerprint(Contact) forgetContactFingerprint(Contact) getContactPolicy(Contact) setContactPolicy(Contact,OtrPolicy)",,"net.java.otr4j.session.SessionID+SessionID(String,String,String) net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() java.util.Map+put(K,V) java.util.Map+put(K,V)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+contactsMap,369,10,2,,"private SessionID getSessionID(Contact contact)
    {
        SessionID sessionID =
            new SessionID(contact.getProtocolProvider().getAccountID()
                .getAccountUniqueID(), contact.getAddress(), contact
                .getProtocolProvider().getProtocolName());

        contactsMap.put(sessionID, contact);
        return sessionID;
    }",False,True,"This method generates a unique session ID for a given contact by combining the account unique ID, contact address, and protocol name. It then adds the session ID and contact to a map and returns the session ID.",False,"This code defines a private method called getSessionID that takes a Contact object as a parameter. It creates a SessionID object using information from the Contact object and adds it to a contactsMap. Finally, it returns the created SessionID object."
18,getRemoteFingerprint(Contact),get remote fingerprint contact ,Method,,,net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadPublicKey(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadPublicKey(String) net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.otr4j.crypto.OtrCryptoEngineImpl+getFingerprint(PublicKey) net.java.otr4j.crypto.OtrCryptoEngineImpl+OtrCryptoEngineImpl() net.java.otr4j.crypto.OtrCryptoEngineImpl+getFingerprint(PublicKey) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,437,15,1,,"public String getRemoteFingerprint(Contact contact)
    {
        PublicKey remotePublicKey = loadPublicKey(contact.getAddress());
        if (remotePublicKey == null)
            return null;
        try
        {
            return new OtrCryptoEngineImpl().getFingerprint(remotePublicKey);
        }
        catch (OtrCryptoException e)
        {
            e.printStackTrace();
            return null;
        }
    }",True,True,"This method retrieves the fingerprint of a remote contact's public key. It loads the public key from the contact's address, and then uses the OtrCryptoEngineImpl class to generate the fingerprint. If an exception occurs, it returns null.",False,"This code defines a method called ""getRemoteFingerprint"" that takes a Contact object as a parameter. It loads the public key of the contact's address, and then uses the OtrCryptoEngineImpl class to generate and return the fingerprint of the loaded public key. If any exception occurs during the process, it prints the stack trace and returns null."
19,getLocalFingerprint(AccountID),get local fingerprint account ,Method,,,net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadKeyPair(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadKeyPair(String) net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() java.security.KeyPair+getPublic() java.security.KeyPair+getPublic() net.java.otr4j.crypto.OtrCryptoEngineImpl+getFingerprint(PublicKey) net.java.otr4j.crypto.OtrCryptoEngineImpl+OtrCryptoEngineImpl() net.java.otr4j.crypto.OtrCryptoEngineImpl+getFingerprint(PublicKey) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,472,19,1,,"public String getLocalFingerprint(AccountID account)
    {
        KeyPair keyPair = loadKeyPair(account.getAccountUniqueID());

        if (keyPair == null)
            return null;

        PublicKey pubKey = keyPair.getPublic();

        try
        {
            return new OtrCryptoEngineImpl().getFingerprint(pubKey);
        }
        catch (OtrCryptoException e)
        {
            e.printStackTrace();
            return null;
        }
    }",True,True,"This method returns the local fingerprint of a given account by loading the account's key pair, retrieving the public key, and using it to generate the fingerprint using the OtrCryptoEngineImpl class. If an exception occurs, it returns null.",False,"The code defines a method called ""getLocalFingerprint"" that takes an AccountID object as a parameter. It loads a KeyPair based on the account's unique ID, retrieves the public key from the KeyPair, and uses an OtrCryptoEngineImpl object to generate and return the fingerprint of the public key. If any exception occurs during the process, it prints the stack trace and returns null."
20,configurator,configurator ,Field,"isContactVerified(Contact) verifyContactFingerprint(Contact) forgetContactFingerprint(Contact) getGlobalPolicy() setGlobalPolicy(OtrPolicy) setGlobalPolicy(OtrPolicy) getContactPolicy(Contact) setContactPolicy(Contact,OtrPolicy) setContactPolicy(Contact,OtrPolicy) loadKeyPair(String) loadKeyPair(String) generateKeyPair(String) generateKeyPair(String) savePublicKey(String,PublicKey) savePublicKey(String,PublicKey) loadPublicKey(String)",,,,55,1,2,,private Configurator configurator = new Configurator();,False,False,,False,
21,Configurator,configurator ,MemberClass,,,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getXmlFriendlyString(String) java.lang.String+length() java.lang.String+length() java.lang.Character+isDigit(char) java.lang.Character+isDigit(char) java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.String+length() java.lang.String+length() java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.Character+isLetterOrDigit(char) java.lang.Character+isLetterOrDigit(char) java.lang.String+String(char[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getXmlFriendlyString(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getXmlFriendlyString(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) net.java.sip.communicator.service.configuration.ConfigurationService+getProperty(String) net.java.sip.communicator.service.configuration.ConfigurationService+getProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) java.lang.String+getBytes() java.lang.String+getBytes() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBoolean(String,boolean) net.java.sip.communicator.service.configuration.ConfigurationService+getBoolean(String,boolean) net.java.sip.communicator.service.configuration.ConfigurationService+getBoolean(String,boolean) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) java.lang.String+String(String) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,boolean) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,Integer) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.service.configuration.ConfigurationService+removeProperty(String) net.java.sip.communicator.service.configuration.ConfigurationService+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyInt(String,int) net.java.sip.communicator.service.configuration.ConfigurationService+getInt(String,int) net.java.sip.communicator.service.configuration.ConfigurationService+getInt(String,int) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String)",net.java.sip.communicator.plugin.otr.OtrActivator+configService net.java.sip.communicator.plugin.otr.OtrActivator+configService net.java.sip.communicator.plugin.otr.OtrActivator+configService net.java.sip.communicator.plugin.otr.OtrActivator+configService net.java.sip.communicator.plugin.otr.OtrActivator+configService net.java.sip.communicator.plugin.otr.OtrActivator+configService net.java.sip.communicator.plugin.otr.OtrActivator+configService,2206,73,0,,"class Configurator
    {

        private String getXmlFriendlyString(String s)
        {
            if (s == null || s.length() < 1)
                return s;

            // XML Tags are not allowed to start with digits,
            // insert a dummy ""p"" char.
            if (Character.isDigit(s.charAt(0)))
                s = ""p"" + s;

            char[] cId = new char[s.length()];
            for (int i = 0; i < cId.length; i++)
            {
                char c = s.charAt(i);
                cId[i] = (Character.isLetterOrDigit(c)) ? c : '_';
            }

            return new String(cId);
        }

        private String getID(String id)
        {
            return ""net.java.sip.communicator.plugin.otr.""
                + getXmlFriendlyString(id);
        }

        public byte[] getPropertyBytes(String id)
        {
            String value =
                (String) OtrActivator.configService.getProperty(this.getID(id));
            if (value == null)
                return null;

            return Base64.decode(value.getBytes());
        }

        public Boolean getPropertyBoolean(String id, boolean defaultValue)
        {
            return OtrActivator.configService.getBoolean(this.getID(id),
                defaultValue);
        }

        public void setProperty(String id, byte[] value)
        {
            String valueToStore = new String(Base64.encode(value));

            OtrActivator.configService
                .setProperty(this.getID(id), valueToStore);
        }

        public void setProperty(String id, boolean value)
        {
            OtrActivator.configService.setProperty(this.getID(id), value);
        }

        public void setProperty(String id, Integer value)
        {
            OtrActivator.configService.setProperty(this.getID(id), value);
        }

        public void removeProperty(String id)
        {
            OtrActivator.configService.removeProperty(this.getID(id));
        }

        public int getPropertyInt(String id, int defaultValue)
        {
            return OtrActivator.configService.getInt(getID(id), defaultValue);
        }
    }",False,False,,False,
22,verifyContactFingerprint(Contact),verify contact fingerprint contact ,Method,,,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,boolean) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,boolean) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineListener+contactVerificationStatusChanged(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineListener+contactVerificationStatusChanged(Contact)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,414,14,1,,"public void verifyContactFingerprint(Contact contact)
    {
        if (contact == null)
            return;

        if (isContactVerified(contact))
            return;
        
        this.configurator.setProperty(getSessionID(contact)
            + ""publicKey.verified"", true);
        
        for (ScOtrEngineListener l : listeners)
            l.contactVerificationStatusChanged(contact);
    }",True,True,"This method verifies the fingerprint of a contact. If the contact is null or already verified, it returns. Otherwise, it sets a property for the contact's session ID and notifies listeners of the contact's verification status change.",False,"The code defines a method called ""verifyContactFingerprint"" that takes a Contact object as a parameter. It checks if the contact is null or already verified, and if not, it sets a property related to the contact's public key verification and notifies the listeners about the change in contact verification status."
23,forgetContactFingerprint(Contact),forget contact fingerprint contact ,Method,,,net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineListener+contactVerificationStatusChanged(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineListener+contactVerificationStatusChanged(Contact),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,404,14,1,,"public void forgetContactFingerprint(Contact contact)
    {
        if (contact == null)
            return;

        if (!isContactVerified(contact))
            return;
        
        this.configurator.removeProperty(getSessionID(contact)
            + ""publicKey.verified"");

        for (ScOtrEngineListener l : listeners)
            l.contactVerificationStatusChanged(contact);
    }",False,True,The function of this method is to remove the fingerprint of a verified contact and notify the listeners about the change in contact verification status.,False,"The given code defines a method called ""forgetContactFingerprint"" that takes a ""Contact"" object as a parameter. It first checks if the contact is null or not verified, and if so, it returns. Otherwise, it removes a property related to the contact's public key verification and notifies the listeners about the change in contact verification status."
24,getGlobalPolicy(),get global policy ,Method,getContactPolicy(Contact),,"net.java.otr4j.OtrPolicyImpl+OtrPolicyImpl(int) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyInt(String,int) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyInt(String,int)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.otr4j.OtrPolicy+OTRL_POLICY_DEFAULT,171,5,1,,"public OtrPolicy getGlobalPolicy()
    {
        return new OtrPolicyImpl(this.configurator.getPropertyInt(""POLICY"",
            OtrPolicy.OTRL_POLICY_DEFAULT));
    }",False,False,"This method returns a new instance of the OtrPolicyImpl class, using the value of the ""POLICY"" property from the configurator as the parameter for the constructor.",False,"This code defines a method named ""getGlobalPolicy"" that returns an instance of the ""OtrPolicy"" class. The returned object is created using the value of a property named ""POLICY"" from a configuration file, or a default value if the property is not found."
25,setGlobalPolicy(OtrPolicy),set global policy policy ,Method,,,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.otr4j.OtrPolicy+getPolicy() net.java.otr4j.OtrPolicy+getPolicy() net.java.sip.communicator.plugin.otr.ScOtrEngineListener+globalPolicyChanged() net.java.sip.communicator.plugin.otr.ScOtrEngineListener+globalPolicyChanged()",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,322,10,1,,"public void setGlobalPolicy(OtrPolicy policy)
    {
        if (policy == null)
            this.configurator.removeProperty(""POLICY"");
        else
            this.configurator.setProperty(""POLICY"", policy.getPolicy());

        for (ScOtrEngineListener l : listeners)
            l.globalPolicyChanged();
    }",False,False,"This method sets the global policy for OTR (Off-the-Record) messaging. If the policy is null, it removes the ""POLICY"" property. Otherwise, it sets the ""POLICY"" property to the policy value. It then notifies all listeners that the global policy has changed.",False,"The code defines a method called ""setGlobalPolicy"" that takes an OtrPolicy object as a parameter. If the policy is null, it removes the ""POLICY"" property from the configurator, otherwise it sets the ""POLICY"" property to the policy's value. It then iterates through a list of ScOtrEngineListener objects and calls the ""globalPolicyChanged"" method on each listener."
26,launchHelp(),launch help ,Method,,,org.osgi.framework.BundleContext+getServiceReference(String) org.osgi.framework.BundleContext+getServiceReference(String) java.lang.Class+getName() java.lang.Class+getName() org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.BundleContext+getService(ServiceReference) net.java.sip.communicator.service.browserlauncher.BrowserLauncherService+openURL(String) net.java.sip.communicator.service.browserlauncher.BrowserLauncherService+openURL(String) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String),net.java.sip.communicator.plugin.otr.OtrActivator+bundleContext net.java.sip.communicator.plugin.otr.OtrActivator+bundleContext net.java.sip.communicator.plugin.otr.OtrActivator+resourceService,489,15,1,,"public void launchHelp()
    {
        ServiceReference ref =
            OtrActivator.bundleContext
                .getServiceReference(BrowserLauncherService.class.getName());

        if (ref == null)
            return;

        BrowserLauncherService service =
            (BrowserLauncherService) OtrActivator.bundleContext.getService(ref);

        service.openURL(OtrActivator.resourceService
            .getI18NString(""plugin.otr.authbuddydialog.HELP_URI""));
    }",False,False,"The function of this method is to launch a help page in a web browser. It retrieves a reference to the browser launcher service, checks if it is available, and then opens a specific URL in the browser.",False,"The code defines a method called ""launchHelp"" that launches a help page in a web browser. It first checks if a reference to a browser launcher service is available, and if so, it retrieves the service and uses it to open a specific URL defined in the OtrActivator resource service."
27,getContactPolicy(Contact),get contact policy contact ,Method,ScOtrEngineHost.getSessionPolicy(SessionID),,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyInt(String,int) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyInt(String,int) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getGlobalPolicy() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getGlobalPolicy() net.java.otr4j.OtrPolicyImpl+OtrPolicyImpl(int)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator,313,10,1,,"public OtrPolicy getContactPolicy(Contact contact)
    {
        int policy =
            this.configurator.getPropertyInt(getSessionID(contact) + ""policy"",
                -1);
        if (policy < 0)
            return getGlobalPolicy();
        else
            return new OtrPolicyImpl(policy);
    }",False,False,"This method returns an OtrPolicy object based on the given Contact object. It checks if a specific policy is set for the contact, and if not, it returns the global policy. If a policy is set, it creates a new OtrPolicyImpl object with the given policy value.",False,"This code defines a method named ""getContactPolicy"" that takes a ""Contact"" object as a parameter. It retrieves a policy value from a configuration property based on the session ID of the contact, and if the value is less than 0, it returns the global policy. Otherwise, it creates and returns a new ""OtrPolicyImpl"" object with the retrieved policy value."
28,"setContactPolicy(Contact,OtrPolicy)",set contact policy contact policy ,Method,,,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.otr4j.OtrPolicy+getPolicy() net.java.otr4j.OtrPolicy+getPolicy() net.java.sip.communicator.plugin.otr.ScOtrEngineListener+contactPolicyChanged(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineListener+contactPolicyChanged(Contact)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,417,12,1,,"public void setContactPolicy(Contact contact, OtrPolicy policy)
    {
        String propertyID = getSessionID(contact) + ""policy"";
        if (policy == null)
            this.configurator.removeProperty(propertyID);
        else
            this.configurator.setProperty(propertyID, policy.getPolicy());

        for (ScOtrEngineListener l : listeners)
            l.contactPolicyChanged(contact);

    }",False,False,"This method sets the contact policy for a given contact. It removes the property if the policy is null, otherwise it sets the property with the policy value. It then notifies all listeners that the contact policy has changed.",False,"This code defines a method called ""setContactPolicy"" that takes a Contact object and an OtrPolicy object as parameters. It sets a property in the configurator based on the session ID of the contact and the policy value. If the policy is null, the property is removed. Finally, it notifies all registered listeners that the contact's policy has changed."
29,loadKeyPair(String),load key pair account id ,Method,ScOtrKeyManager.getKeyPair(SessionID) ScOtrKeyManager.getKeyPair(SessionID) getLocalFingerprint(AccountID),,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) java.security.spec.PKCS8EncodedKeySpec+PKCS8EncodedKeySpec(byte[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) java.security.spec.X509EncodedKeySpec+X509EncodedKeySpec(byte[]) java.security.KeyFactory+getInstance(String) java.security.KeyFactory+getInstance(String) java.security.KeyFactory+generatePublic(KeySpec) java.security.KeyFactory+generatePublic(KeySpec) java.security.KeyFactory+generatePrivate(KeySpec) java.security.KeyFactory+generatePrivate(KeySpec) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.security.KeyPair+KeyPair(PublicKey,PrivateKey)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator,1286,43,2,,"private KeyPair loadKeyPair(String accountID)
    {
        // Load Private Key.
        byte[] b64PrivKey =
            this.configurator.getPropertyBytes(accountID + "".privateKey"");
        if (b64PrivKey == null)
            return null;

        PKCS8EncodedKeySpec privateKeySpec =
            new PKCS8EncodedKeySpec(b64PrivKey);

        // Load Public Key.
        byte[] b64PubKey =
            this.configurator.getPropertyBytes(accountID + "".publicKey"");
        if (b64PubKey == null)
            return null;

        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(b64PubKey);

        PublicKey publicKey;
        PrivateKey privateKey;

        // Generate KeyPair.
        KeyFactory keyFactory;
        try
        {
            keyFactory = KeyFactory.getInstance(""DSA"");
            publicKey = keyFactory.generatePublic(publicKeySpec);
            privateKey = keyFactory.generatePrivate(privateKeySpec);
        }
        catch (NoSuchAlgorithmException e)
        {
            e.printStackTrace();
            return null;
        }
        catch (InvalidKeySpecException e)
        {
            e.printStackTrace();
            return null;
        }

        return new KeyPair(publicKey, privateKey);
    }",False,True,"This method loads a key pair (public and private keys) for a given account ID. It retrieves the encoded keys from a configuration file, decodes them, and generates a KeyPair object using the DSA algorithm. If any step fails, it returns null.",True,This code defines a private method `loadKeyPair` that takes an account ID as input and loads the corresponding public and private keys from a configuration file. It then generates a `KeyPair` object using the loaded keys and returns it.
30,generateKeyPair(String),generate key pair account id ,Method,ScOtrKeyManager.getKeyPair(SessionID),,"java.security.KeyPairGenerator+genKeyPair() java.security.KeyPairGenerator+getInstance(String) java.security.KeyPairGenerator+getInstance(String) java.security.KeyPairGenerator+genKeyPair() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.security.KeyPair+getPublic() java.security.KeyPair+getPublic() java.security.spec.X509EncodedKeySpec+X509EncodedKeySpec(byte[]) java.security.Key+getEncoded() java.security.Key+getEncoded() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) java.security.spec.X509EncodedKeySpec+getEncoded() java.security.spec.X509EncodedKeySpec+getEncoded() java.security.KeyPair+getPrivate() java.security.KeyPair+getPrivate() java.security.spec.PKCS8EncodedKeySpec+PKCS8EncodedKeySpec(byte[]) java.security.Key+getEncoded() java.security.Key+getEncoded() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) java.security.spec.PKCS8EncodedKeySpec+getEncoded() java.security.spec.PKCS8EncodedKeySpec+getEncoded()",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator,928,29,1,,"public void generateKeyPair(String accountID)
    {
        KeyPair keyPair;
        try
        {
            keyPair = KeyPairGenerator.getInstance(""DSA"").genKeyPair();
        }
        catch (NoSuchAlgorithmException e)
        {
            e.printStackTrace();
            return;
        }

        // Store Public Key.
        PublicKey pubKey = keyPair.getPublic();
        X509EncodedKeySpec x509EncodedKeySpec =
            new X509EncodedKeySpec(pubKey.getEncoded());

        this.configurator.setProperty(accountID + "".publicKey"",
            x509EncodedKeySpec.getEncoded());

        // Store Private Key.
        PrivateKey privKey = keyPair.getPrivate();
        PKCS8EncodedKeySpec pkcs8EncodedKeySpec =
            new PKCS8EncodedKeySpec(privKey.getEncoded());

        this.configurator.setProperty(accountID + "".privateKey"",
            pkcs8EncodedKeySpec.getEncoded());
    }",False,True,"The function generates a key pair using the DSA algorithm, stores the public key and private key in a configuration file using the account ID as the key.",False,This code generates a key pair using the DSA algorithm and stores the public and private keys in a configuration file. The account ID is used as a prefix for the property names in the configuration file.
31,"savePublicKey(String,PublicKey)",save public key user id pub key ,Method,ScOtrEngineHost.sessionStatusChanged(SessionID),,"java.security.spec.X509EncodedKeySpec+X509EncodedKeySpec(byte[]) java.security.Key+getEncoded() java.security.Key+getEncoded() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) java.security.spec.X509EncodedKeySpec+getEncoded() java.security.spec.X509EncodedKeySpec+getEncoded() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator,369,10,2,,"private void savePublicKey(String userID, PublicKey pubKey)
    {
        X509EncodedKeySpec x509EncodedKeySpec =
            new X509EncodedKeySpec(pubKey.getEncoded());

        this.configurator.setProperty(userID + "".publicKey"", x509EncodedKeySpec
            .getEncoded());

        this.configurator.removeProperty(userID + "".publicKey.verified"");
    }",True,True,The function of this method is to save a user's public key by encoding it and storing it in a configuration file. It also removes a property related to the public key verification.,True,This code is a private method that saves a user's public key in a configuration file. It encodes the public key and sets it as a property in the configuration file using the user's ID. It also removes a property indicating that the public key has been verified.
32,loadPublicKey(String),load public key user id ,Method,ScOtrEngineHost.sessionStatusChanged(SessionID) getRemoteFingerprint(Contact),,net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) java.security.spec.X509EncodedKeySpec+X509EncodedKeySpec(byte[]) java.security.KeyFactory+getInstance(String) java.security.KeyFactory+getInstance(String) java.security.KeyFactory+generatePublic(KeySpec) java.security.KeyFactory+generatePublic(KeySpec) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator,768,27,2,,"private PublicKey loadPublicKey(String userID)
    {
        byte[] b64PubKey =
            this.configurator.getPropertyBytes(userID + "".publicKey"");
        if (b64PubKey == null)
            return null;

        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(b64PubKey);

        // Generate KeyPair.
        KeyFactory keyFactory;
        try
        {
            keyFactory = KeyFactory.getInstance(""DSA"");
            return keyFactory.generatePublic(publicKeySpec);
        }
        catch (NoSuchAlgorithmException e)
        {
            e.printStackTrace();
            return null;
        }
        catch (InvalidKeySpecException e)
        {
            e.printStackTrace();
            return null;
        }
    }",False,True,"This method loads a public key for a given user ID from a configuration file, decodes it from Base64, and generates a PublicKey object using the DSA algorithm. It returns the generated public key or null if an error occurs.",False,This code defines a private method `loadPublicKey` that takes a `userID` as input and retrieves the corresponding public key from a configuration file. It then generates a `PublicKey` object using the retrieved key and returns it.
