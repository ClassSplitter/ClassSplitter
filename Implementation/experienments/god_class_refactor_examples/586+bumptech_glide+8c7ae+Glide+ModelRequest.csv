index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,TAG,tag ,Field,,,,,42,1,26,,"private static final String TAG = ""Glide"";",False,False,,False,
2,GLIDE,glide ,Field,,,,,47,1,26,,private static final Glide GLIDE = new Glide();,False,False,,False,
3,metadataTracker,metadata tracker ,Field,,,,,90,1,18,,"private final Map<Target, Metadata> metadataTracker = new WeakHashMap<Target, Metadata>();",False,False,,False,
4,loaderFactory,loader factory ,Field,,,,,78,1,18,,private final GenericLoaderFactory loaderFactory = new GenericLoaderFactory();,False,False,,False,
5,imageManager,image manager ,Field,,,,,41,1,2,,private ImageManager imageManager = null;,False,False,,False,
6,RequestListener,request listener a class for monitoring the status of a request while images load param the type of the model being loaded ,MemberClass,,,"com.bumptech.glide.Glide.RequestListener+onException(Exception,T,Target) com.bumptech.glide.Glide.RequestListener+onImageReady(T,Target)",,1980,45,1,"/** 
 * A class for monitoring the status of a request while images load.
 * @param < T > The type of the model being loaded
 */
","/**
     * A class for monitoring the status of a request while images load.
     *
     * @param <T> The type of the model being loaded
     */
    public interface RequestListener<T> {

        /**
         * Called when an exception occurs during a load. Will only be called if we currently want to display an image
         * for the given model in the given target. It is recommended to create a single instance per activity/fragment
         * rather than instantiate a new object for each call to {@code Glide.load()} to avoid object churn.
         *
         * <p>
         *     It is safe to reload this or a different model or change what is displayed in the target at this point.
         *     For example:
         * <pre>
         * <code>
         *     public void onException(Exception e, ModelType model, Target target) {
         *         target.setPlaceholder(R.drawable.a_specific_error_for_my_exception);
         *         Glide.load(model).into(target);
         *     }
         * </code>
         * </pre>
         * </p>
         *
         * <p>
         *     Note - if you want to reload this or any other model after an exception, you will need to include all
         *     relevant builder calls (like centerCrop, placeholder etc).
         * </p>
         *
         * @param e The exception, or null
         * @param model The model we were trying to load when the exception occurred
         * @param target The {@link Target} we were trying to load the image into
         */
        public abstract void onException(Exception e, T model, Target target);

        /**
         * Called when a load completes successfully, immediately after
         * {@link Target#onImageReady(android.graphics.Bitmap)}.
         *
         * @param model The specific model that was used to load the image.
         * @param target The target the model was loaded into.
         */
        public abstract void onImageReady(T model, Target target);
    }",False,False,"/** 
 * A class for monitoring the status of a request while images load.
 * @param < T > The type of the model being loaded
 */
",False,"/** 
 * A class for monitoring the status of a request while images load.
 * @param < T > The type of the model being loaded
 */
"
7,get(),get get the singleton return the singleton ,Method,,,,com.bumptech.glide.Glide+GLIDE,133,8,9,"/** 
 * Get the singleton.
 * @return the singleton
 */
","/**
     * Get the singleton.
     *
     * @return the singleton
     */
    public static Glide get() {
        return GLIDE;
    }",False,False,This method serves to retrieve the singleton instance of the Glide class.,False,"The code defines a method named ""get"" that returns a singleton instance of the Glide class. The method has no parameters and is accessible from anywhere in the code."
8,Glide(),glide ,Method,,,"com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorFileLoader.Factory+Factory() com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.loader.bitmap.model.stream.StreamFileLoader.Factory+Factory() com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorResourceLoader.Factory+Factory() com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.loader.bitmap.model.stream.StreamResourceLoader.Factory+Factory() com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorStringLoader.Factory+Factory() com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.loader.bitmap.model.stream.StreamStringLoader.Factory+Factory() com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorUriLoader.Factory+Factory() com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.loader.bitmap.model.stream.StreamUriLoader.Factory+Factory() java.lang.Class+forName(String) java.lang.Class+forName(String) com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.Glide+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.volley.VolleyUrlLoader.Factory+Factory()",com.bumptech.glide.Glide+TAG com.bumptech.glide.Glide+TAG,1123,18,4,,"protected Glide() {
        register(File.class, ParcelFileDescriptor.class, new FileDescriptorFileLoader.Factory());
        register(File.class, InputStream.class, new StreamFileLoader.Factory());
        register(Integer.class, ParcelFileDescriptor.class, new FileDescriptorResourceLoader.Factory());
        register(Integer.class, InputStream.class, new StreamResourceLoader.Factory());
        register(String.class, ParcelFileDescriptor.class, new FileDescriptorStringLoader.Factory());
        register(String.class, InputStream.class, new StreamStringLoader.Factory());
        register(Uri.class, ParcelFileDescriptor.class, new FileDescriptorUriLoader.Factory());
        register(Uri.class, InputStream.class, new StreamUriLoader.Factory());
        try {
            Class.forName(""com.bumptech.glide.volley.VolleyUrlLoader$Factory"");
            register(URL.class, InputStream.class, new VolleyUrlLoader.Factory());
        } catch (ClassNotFoundException e) {
            if (Log.isLoggable(TAG, Log.DEBUG)) {
                Log.d(TAG, ""Volley not found, missing url loader"");
            }
        }
    }",False,False,"The function of this method is to register various loaders for different types of resources (such as files, integers, strings, URIs, and URLs) in the Glide library.",False,"The code defines a protected constructor for the Glide class. It registers various loaders for different types of resources, such as files, integers, strings, and URIs, to be used by the Glide library for loading and displaying images. Additionally, it checks if the Volley library is available and registers a URL loader if it is."
9,getImageManager(Context),get image manager context return the current link image manager or create and return a new one if one is not currently set see set image manager com bumptech glide resize image manager builder see is image manager set param context any link context this will not be retained passed this call return the current image manager ,Method,,,com.bumptech.glide.Glide+isImageManagerSet() com.bumptech.glide.Glide+isImageManagerSet() com.bumptech.glide.Glide+setImageManager(Builder) com.bumptech.glide.Glide+setImageManager(Builder) com.bumptech.glide.resize.ImageManager.Builder+Builder(Context),com.bumptech.glide.Glide+imageManager,572,15,1,"/** 
 * Return the current  {@link ImageManager} or create and return a new one if one is not currently set.
 * @see #setImageManager(com.bumptech.glide.resize.ImageManager.Builder)
 * @see #isImageManagerSet()
 * @param context Any {@link Context}. This will not be retained passed this call
 * @return The current ImageManager
 */
","/**
     * Return the current {@link ImageManager} or create and return a new one if one is not currently set.
     *
     * @see #setImageManager(com.bumptech.glide.resize.ImageManager.Builder)
     * @see #isImageManagerSet()
     *
     * @param context Any {@link Context}. This will not be retained passed this call
     * @return The current ImageManager
     */
    public ImageManager getImageManager(Context context) {
        if (!isImageManagerSet()) {
            setImageManager(new ImageManager.Builder(context));
        }
        return imageManager;
    }",False,False,"This method returns the current ImageManager object, or creates a new one if it is not currently set. It takes a Context parameter and returns the current ImageManager.",False,"This code defines a method called `getImageManager` that returns the current `ImageManager` object. If an `ImageManager` object is not currently set, it creates a new one using the provided `Context` and sets it as the current `ImageManager`."
10,isImageManagerSet(),is image manager set use to check whether or not an link image manager has been set yet can be used in link android app activity on create android os bundle activity on create along with link set image manager com bumptech glide resize image manager builder set image manager to set an link image manager with custom options for use with link generic request and or as aneasily accessible singleton return true iff an link image manager is currently set ,Method,,,,com.bumptech.glide.Glide+imageManager,591,12,1,"/** 
 * Use to check whether or not an  {@link ImageManager} has been set yet. Can be used in{@link android.app.Activity#onCreate(android.os.Bundle) Activity.onCreate} along with{@link #setImageManager(com.bumptech.glide.resize.ImageManager.Builder) setImageManager} to set an{@link ImageManager} with custom options for use with {@link GenericRequest} and/or as aneasily accessible singleton.
 * @return true iff an {@link ImageManager} is currently set
 */
","/**
     * Use to check whether or not an {@link ImageManager} has been set yet. Can be used in
     * {@link android.app.Activity#onCreate(android.os.Bundle) Activity.onCreate} along with
     * {@link #setImageManager(com.bumptech.glide.resize.ImageManager.Builder) setImageManager} to set an
     * {@link ImageManager} with custom options for use with {@link GenericRequest} and/or as an
     * easily accessible singleton.
     *
     * @return true iff an {@link ImageManager} is currently set
     */
    public boolean isImageManagerSet() {
        return imageManager != null;
    }",False,False,"This method is used to check whether or not an ImageManager has been set. It returns true if an ImageManager is currently set, and false otherwise.",False,"The code defines a method called ""isImageManagerSet()"" which checks if an ImageManager has been set. It can be used in an Activity's onCreate() method to determine if an ImageManager has been set with custom options for use with GenericRequest and/or as a singleton. The method returns true if an ImageManager is currently set."
11,setImageManager(ImageManager.Builder),set image manager builder set the link image manager to use with link generic request see set image manager com bumptech glide resize image manager param builder the builder that will be used to construct a new image manager ,Method,,,com.bumptech.glide.Glide+setImageManager(ImageManager) com.bumptech.glide.Glide+setImageManager(ImageManager) com.bumptech.glide.resize.ImageManager.Builder+build() com.bumptech.glide.resize.ImageManager.Builder+build(),,362,10,1,"/** 
 * Set the  {@link ImageManager} to use with {@link GenericRequest}.
 * @see #setImageManager(com.bumptech.glide.resize.ImageManager)
 * @param builder The builder that will be used to construct a new ImageManager
 */
","/**
     * Set the {@link ImageManager} to use with {@link GenericRequest}.
     *
     * @see #setImageManager(com.bumptech.glide.resize.ImageManager)
     *
     * @param builder The builder that will be used to construct a new ImageManager
     */
    public void setImageManager(ImageManager.Builder builder) {
        setImageManager(builder.build());
    }",False,False,This method sets the ImageManager to be used with GenericRequest by taking a builder and constructing a new ImageManager using it.,False,This code is a method that sets the ImageManager to be used with GenericRequest. It takes a builder as a parameter and constructs a new ImageManager using the builder. The method is a convenience method that calls the setImageManager method with the newly built ImageManager.
12,setImageManager(ImageManager),set image manager image manager set the link image manager to use with link generic request replaces the current link image manager if one has already been set see is image manager set param image manager the image manager to use ,Method,,,,com.bumptech.glide.Glide+imageManager com.bumptech.glide.Glide+imageManager,367,11,1,"/** 
 * Set the  {@link ImageManager} to use with {@link GenericRequest} Replaces the current{@link ImageManager} if one has already been set.
 * @see #isImageManagerSet()
 * @param imageManager The ImageManager to use
 */
","/**
     * Set the {@link ImageManager} to use with {@link GenericRequest} Replaces the current
     * {@link ImageManager} if one has already been set.
     *
     * @see #isImageManagerSet()
     *
     * @param imageManager The ImageManager to use
     */
    public void setImageManager(ImageManager imageManager) {
        this.imageManager = imageManager;
    }",False,False,This method sets the ImageManager to be used with GenericRequest. It replaces the current ImageManager if one has already been set.,False,This code defines a method called `setImageManager` that sets the `ImageManager` to be used with `GenericRequest`. It replaces the current `ImageManager` if one has already been set. The method takes an `ImageManager` object as a parameter.
13,"register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>)",register model class resource class factory use the given factory to build a link model loader for models of the given class generally the best use ofthis method is to replace one of the default factories or add an implementation for other similar low level models typically the link glide using stream model loader or link glide using file descriptor model loader syntax is preferred because it directly links the model with the model loader being used to load it note if a factory already exists for the given class it will be replaced if that factory is not being used for any other model class link model loader factory teardown will be called note the factory must not be an anonymous inner class of an activity or another object that cannot be retained statically see using file descriptor model loader see using stream model loader param model class the model class param resource class the resource class the model loader will translate the model type into param factory the factory to use param the type of the model param the type of the resource ,Method,,,"com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory+register(Class<T>,Class<Y>,ModelLoaderFactory<T,Y>) com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory+teardown() com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory+teardown()",com.bumptech.glide.Glide+loaderFactory,1562,32,1,"/** 
 * Use the given factory to build a  {@link ModelLoader} for models of the given class. Generally the best use ofthis method is to replace one of the default factories or add an implementation for other similar low level models. Typically the  {@link Glide#using(StreamModelLoader)} or {@link Glide#using(FileDescriptorModelLoader)}syntax is preferred because it directly links the model with the ModelLoader being used to load it. <p> Note - If a factory already exists for the given class, it will be replaced. If that factory is not being used for any other model class,  {@link ModelLoaderFactory#teardown()}will be called. </p> <p> Note - The factory must not be an anonymous inner class of an Activity or another object that cannot be retained statically. </p>
 * @see #using(FileDescriptorModelLoader)
 * @see #using(StreamModelLoader)
 * @param modelClass The model class.
 * @param resourceClass The resource class the model loader will translate the model type into.
 * @param factory The factory to use.
 * @param < T > The type of the model.
 * @param < Y > the type of the resource.
 */
","/**
     * Use the given factory to build a {@link ModelLoader} for models of the given class. Generally the best use of
     * this method is to replace one of the default factories or add an implementation for other similar low level
     * models. Typically the {@link Glide#using(StreamModelLoader)} or {@link Glide#using(FileDescriptorModelLoader)}
     * syntax is preferred because it directly links the model with the ModelLoader being used to load it.
     *
     * <p>
     *     Note - If a factory already exists for the given class, it will be replaced. If that factory is not being
     *     used for any other model class, {@link ModelLoaderFactory#teardown()}
     *     will be called.
     * </p>
     *
     * <p>
     *     Note - The factory must not be an anonymous inner class of an Activity or another object that cannot be
     *     retained statically.
     * </p>
     *
     * @see #using(FileDescriptorModelLoader)
     * @see #using(StreamModelLoader)
     *
     * @param modelClass The model class.
     * @param resourceClass The resource class the model loader will translate the model type into.
     * @param factory The factory to use.
     * @param <T> The type of the model.
     * @param <Y> the type of the resource.
     */
    public <T, Y> void register(Class<T> modelClass, Class<Y> resourceClass, ModelLoaderFactory<T, Y> factory) {
        ModelLoaderFactory<T, Y> removed = loaderFactory.register(modelClass, resourceClass, factory);
        if (removed != null) {
            removed.teardown();
        }
    }",False,False,"This method is used to register a custom ModelLoaderFactory for a specific model class and resource class. If a factory already exists for the given class, it will be replaced and the teardown method will be called if it is not being used for any other model class.",True,"This code defines a method called ""register"" that allows the user to register a custom ModelLoaderFactory for a specific model class and resource class. If a factory already exists for the given class, it will be replaced and the teardown method will be called on the removed factory."
14,"buildModelLoader(Class<T>,Class<Y>,Context)",build model loader model class resource class context build a link model loader for the given model class using a registered factory param model class the class to get a link model loader for param context any context param the type of the model return a new link model loader for the given model class throws illegal argument exception if no factory exists for the given class ,Method,,,"com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory+buildModelLoader(Class<T>,Class<Y>,Context) com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory+buildModelLoader(Class<T>,Class<Y>,Context)",com.bumptech.glide.Glide+GLIDE com.bumptech.glide.Glide+loaderFactory,616,12,9,"/** 
 * Build a  {@link ModelLoader} for the given model class using a registered factory.
 * @param modelClass The class to get a {@link ModelLoader} for
 * @param context Any context
 * @param < T > The type of the model
 * @return A new {@link ModelLoader} for the given model class
 * @throws IllegalArgumentException if no factory exists for the given class
 */
","/**
     * Build a {@link ModelLoader} for the given model class using a registered factory.
     *
     * @param modelClass The class to get a {@link ModelLoader} for
     * @param context Any context
     * @param <T> The type of the model
     * @return A new {@link ModelLoader} for the given model class
     * @throws IllegalArgumentException if no factory exists for the given class
     */
    public static <T, Y> ModelLoader<T, Y> buildModelLoader(Class<T> modelClass, Class<Y> resourceClass, Context context) {
        return GLIDE.loaderFactory.buildModelLoader(modelClass, resourceClass, context);
    }",False,False,"This method builds a ModelLoader for a given model class using a registered factory. It takes in the model class, resource class, and context as parameters, and returns a new ModelLoader for the given model class. If no factory exists for the given class, it throws an IllegalArgumentException.",True,"This code is a method that builds a ModelLoader for a given model class using a registered factory. It takes in the model class, resource class, and context as parameters and returns a new ModelLoader. If no factory exists for the given class, it throws an IllegalArgumentException."
15,"getFactory(T,Class<Y>)",get factory model resource class ,Method,,,"com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory+getFactory(Class<T>,Class<Y>) com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory+getFactory(Class<T>,Class<Y>) java.lang.Object+getClass() java.lang.Object+getClass()",com.bumptech.glide.Glide+loaderFactory,211,4,2,,"@SuppressWarnings(""unchecked"")
    private <T, Y> ModelLoaderFactory<T, Y> getFactory(T model, Class<Y> resourceClass) {
        return loaderFactory.getFactory((Class<T>) model.getClass(), resourceClass);
    }",False,False,The function of this method is to retrieve a ModelLoaderFactory based on the given model and resource class. It suppresses unchecked warnings and returns the appropriate factory based on the model's class and the resource class.,False,This code is a private method that returns a ModelLoaderFactory based on the given model and resource class. It suppresses unchecked warnings and casts the model to its class before calling the getFactory method from the loaderFactory object.
16,getImageViewTarget(ImageView),get image view target image view ,Method,,,java.lang.IllegalArgumentException+IllegalArgumentException(String),,429,11,2,,"private ImageViewTarget getImageViewTarget(ImageView imageView) {
        Object tag = imageView.getTag();
        ImageViewTarget result = null;
        if (tag instanceof ImageViewTarget) {
            result = (ImageViewTarget) tag;
        } else if (tag != null) {
            throw new IllegalArgumentException(""You cannot set a tag on an image view Glide is loading an image into"");
        }

        return result;
    }",False,True,"This method returns an ImageViewTarget object based on the tag set on the provided ImageView. If the tag is an instance of ImageViewTarget, it is casted and returned. If the tag is not null but not an instance of ImageViewTarget, an exception is thrown.",False,"This code defines a private method named ""getImageViewTarget"" that takes an ImageView as a parameter. It retrieves the tag associated with the ImageView and checks if it is an instance of ImageViewTarget. If it is, it returns the tag as an ImageViewTarget. Otherwise, if the tag is not null, it throws an IllegalArgumentException."
17,getImageViewTargetOrSet(ImageView),get image view target or set image view ,Method,,,com.bumptech.glide.Glide+getImageViewTarget(ImageView) com.bumptech.glide.Glide+getImageViewTarget(ImageView) com.bumptech.glide.presenter.target.ImageViewTarget+ImageViewTarget(ImageView),,294,8,2,,"private ImageViewTarget getImageViewTargetOrSet(ImageView imageView) {
        ImageViewTarget result = getImageViewTarget(imageView);
        if (result == null) {
            result = new ImageViewTarget(imageView);
            imageView.setTag(result);
        }
        return result;
    }",False,True,"This method returns an ImageViewTarget object associated with the given ImageView. If the ImageView does not have an associated ImageViewTarget, it creates a new one and sets it as the ImageView's tag.",False,"This code defines a private method named ""getImageViewTargetOrSet"" that takes an ImageView as a parameter. It checks if the ImageView has a corresponding ImageViewTarget object associated with it. If not, it creates a new ImageViewTarget object, sets it as the tag of the ImageView, and returns it."
18,using(StreamModelLoader<T>),using model loader set the link model loader to use for for a new load where the model loader translates from a model to an link input stream resource for loading images param model loader the model loader to use param the type of the model return a new link image model request ,Method,,,"com.bumptech.glide.Glide.ImageModelRequest+ImageModelRequest(ModelLoaderFactory<T,InputStream>) com.bumptech.glide.Glide+modelLoaderToFactory(ModelLoader<T,Y>) com.bumptech.glide.Glide+modelLoaderToFactory(ModelLoader<T,Y>)",,501,11,9,"/** 
 * Set the  {@link ModelLoader} to use for for a new load where the model loader translates from a model to an{@link InputStream} resource for loading images.
 * @param modelLoader The model loader to use.
 * @param < T > The type of the model.
 * @return A new {@link ImageModelRequest}.
 */
","/**
     * Set the {@link ModelLoader} to use for for a new load where the model loader translates from a model to an
     * {@link InputStream} resource for loading images.
     *
     * @param modelLoader The model loader to use.
     * @param <T> The type of the model.
     * @return A new {@link ImageModelRequest}.
     */
    public static <T> ImageModelRequest<T> using(final StreamModelLoader<T> modelLoader) {
        return new ImageModelRequest<T>(modelLoaderToFactory(modelLoader));
    }",True,True,"This method sets the model loader to use for loading images, where the model loader translates from a model to an input stream resource. It returns a new ImageModelRequest with the specified model loader.",False,"This code defines a static method called ""using"" that takes a StreamModelLoader as a parameter and returns a new ImageModelRequest. The method is used to set the model loader for loading images, where the model loader translates from a model to an InputStream resource."
19,using(FileDescriptorModelLoader<T>),using model loader set the link model loader to use for a new load where the model loader translates from a model to an link parcel file descriptor resource for loading video thumbnails param model loader the model loader to use param the type of the model return a new link video model request ,Method,,,"com.bumptech.glide.Glide.VideoModelRequest+VideoModelRequest(ModelLoaderFactory<T,ParcelFileDescriptor>) com.bumptech.glide.Glide+modelLoaderToFactory(ModelLoader<T,Y>) com.bumptech.glide.Glide+modelLoaderToFactory(ModelLoader<T,Y>)",,525,12,9,"/** 
 * Set the  {@link ModelLoader} to use for a new load where the model loader translates from a model to an{@link ParcelFileDescriptor} resource for loading video thumbnails.
 * @param modelLoader The model loader to use.
 * @param < T > The type of the model.
 * @return A new {@link VideoModelRequest}.
 */
","/**
     * Set the {@link ModelLoader} to use for a new load where the model loader translates from a model to an
     * {@link ParcelFileDescriptor} resource for loading video thumbnails.
     *
     * @param modelLoader The model loader to use.
     * @param <T> The type of the model.
     * @return A new {@link VideoModelRequest}.
     */
    public static <T> VideoModelRequest<T> using(final FileDescriptorModelLoader<T> modelLoader) {
        return new VideoModelRequest<T>(modelLoaderToFactory(modelLoader));

    }",True,True,This method sets the model loader to use for loading video thumbnails from a model to a ParcelFileDescriptor resource. It returns a new VideoModelRequest with the specified model loader.,False,"This code defines a static method called ""using"" that takes a FileDescriptorModelLoader as a parameter and returns a new VideoModelRequest. The method is used to set the model loader for loading video thumbnails from a model to a ParcelFileDescriptor resource."
20,load(String),load string use the link model loader factory currently registered for link string to load the image represented by thegiven link string defaults to link stream string loader factory and link stream string loader to load the given model see using stream model loader param string the string representing the image must be either a path or a uri handled by link stream uri loader return a link generic request to set options for the load and ultimately the target to load the model into ,Method,,,com.bumptech.glide.Glide.Request+Request(ModelType),,660,12,9,"/** 
 * Use the  {@link ModelLoaderFactory} currently registered for {@link String} to load the image represented by thegiven  {@link String}. Defaults to  {@link StreamStringLoader.Factory} and {@link StreamStringLoader} to load the given model.
 * @see #using(StreamModelLoader)
 * @param string The string representing the image. Must be either a path, or a uri handled by {@link StreamUriLoader}
 * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into
 */
","/**
     * Use the {@link ModelLoaderFactory} currently registered for {@link String} to load the image represented by the
     * given {@link String}. Defaults to {@link StreamStringLoader.Factory} and {@link StreamStringLoader} to load the given model.
     *
     * @see #using(StreamModelLoader)
     *
     * @param string The string representing the image. Must be either a path, or a uri handled by {@link StreamUriLoader}
     * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into
     */
    public static Request<String> load(String string) {
        return new Request<String>(string);
    }",True,True,The function serves to load an image represented by a given string using the currently registered ModelLoaderFactory for String. It returns a GenericRequest to set options for the load and ultimately the target to load the model into.,True,"The code defines a static method called ""load"" that takes a string parameter representing an image. It returns a Request object that can be used to set options for loading the image and specifying the target to load the image into. The method uses a ModelLoaderFactory to load the image, with a default implementation using StreamStringLoader."
21,load(Uri),load uri use the link model loader factory currently registered for link uri to load the image at the given uri defaults to link stream uri loader factory and link stream uri loader see using stream model loader param uri the uri representing the image must be a uri handled by link stream uri loader return a link generic request to set options for the load and ultimately the target to load the model into ,Method,,,com.bumptech.glide.Glide.Request+Request(ModelType),,565,12,9,"/** 
 * Use the  {@link ModelLoaderFactory} currently registered for {@link Uri} to load the image at the given uri.Defaults to  {@link StreamUriLoader.Factory} and {@link StreamUriLoader}.
 * @see #using(StreamModelLoader)
 * @param uri The uri representing the image. Must be a uri handled by {@link StreamUriLoader}
 * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into
 */
","/**
     * Use the {@link ModelLoaderFactory} currently registered for {@link Uri} to load the image at the given uri.
     * Defaults to {@link StreamUriLoader.Factory} and {@link StreamUriLoader}.
     *
     * @see #using(StreamModelLoader)
     *
     * @param uri The uri representing the image. Must be a uri handled by {@link StreamUriLoader}
     * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into
     */
    public static Request<Uri> load(Uri uri) {
        return new Request<Uri>(uri);
    }",True,True,The function serves to create a request to load an image from a given URI using the currently registered ModelLoaderFactory for Uri. It returns a GenericRequest object to set options for the load and the target to load the model into.,True,"The code defines a static method called ""load"" that takes a Uri as a parameter and returns a Request object. This method is used to load an image from the given Uri using the registered ModelLoaderFactory for Uri, which defaults to StreamUriLoader.Factory and StreamUriLoader."
22,load(URL),load url use the link model loader factory currently registered for link url to load the image represented by thegiven link url defaults to link volley url loader factory and link volley url loader to load the givenmodel see using stream model loader param url the url representing the image return a link generic request to set options for the load and ultimately the target to load the model into ,Method,,,com.bumptech.glide.Glide.Request+Request(ModelType),,567,13,9,"/** 
 * Use the  {@link ModelLoaderFactory} currently registered for {@link URL} to load the image represented by thegiven  {@link URL}. Defaults to  {@link VolleyUrlLoader.Factory} and {@link VolleyUrlLoader} to load the givenmodel.
 * @see #using(StreamModelLoader)
 * @param url The URL representing the image.
 * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into
 */
","/**
     * Use the {@link ModelLoaderFactory} currently registered for {@link URL} to load the image represented by the
     * given {@link URL}. Defaults to {@link VolleyUrlLoader.Factory} and {@link VolleyUrlLoader} to load the given
     * model.
     *
     * @see #using(StreamModelLoader)
     *
     * @param url The URL representing the image.
     * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into
     */
    public static Request<URL> load(URL url) {
        return new Request<URL>(url);
    }",True,True,The function serves to load an image represented by a given URL using the currently registered ModelLoaderFactory for URL. It returns a GenericRequest to set options for the load and ultimately the target to load the model into.,True,"The code defines a static method called ""load"" that takes a URL as input and returns a GenericRequest object. This method uses the ModelLoaderFactory registered for URL to load the image represented by the given URL, with a default implementation using VolleyUrlLoader. The returned GenericRequest can be used to set options for the load and specify the target to load the image into."
23,load(File),load file use the link model loader factory currently registered for link file to load the image represented by thegiven link file defaults to link stream file loader factory and link stream file loader to load the given model see using stream model loader param file the file containing the image return a link generic request to set options for the load and ultimately the target to load the model into ,Method,,,com.bumptech.glide.Glide.Request+Request(ModelType),,568,12,9,"/** 
 * Use the  {@link ModelLoaderFactory} currently registered for {@link File} to load the image represented by thegiven  {@link File}. Defaults to  {@link StreamFileLoader.Factory} and {@link StreamFileLoader} to load the given model.
 * @see #using(StreamModelLoader)
 * @param file The File containing the image
 * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into
 */
","/**
     * Use the {@link ModelLoaderFactory} currently registered for {@link File} to load the image represented by the
     * given {@link File}. Defaults to {@link StreamFileLoader.Factory} and {@link StreamFileLoader} to load the given model.
     *
     * @see #using(StreamModelLoader)
     *
     * @param file The File containing the image
     * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into
     */
    public static Request<File> load(File file) {
        return new Request<File>(file);
    }",True,True,This method is used to load an image represented by a given File. It returns a GenericRequest object that can be used to set options for the load and specify the target to load the model into.,True,"The code defines a static method called ""load"" that takes a File object as a parameter and returns a Request object. This method is used to load an image represented by the given File using a ModelLoaderFactory, with the default being StreamFileLoader.Factory and StreamFileLoader."
24,load(Integer),load resource id use the link model loader factory currently registered for link integer to load the image represented by thegiven link integer resource id defaults to link stream resource loader factory and link stream resource loader to loadthe given model see using stream model loader param resource id the id of the resource containing the image return a link generic request to set options for the load and ultimately the target to load the model into ,Method,,,com.bumptech.glide.Glide.Request+Request(ModelType),,642,13,9,"/** 
 * Use the  {@link ModelLoaderFactory} currently registered for {@link Integer} to load the image represented by thegiven  {@link Integer} resource id. Defaults to {@link StreamResourceLoader.Factory} and {@link StreamResourceLoader} to loadthe given model.
 * @see #using(StreamModelLoader)
 * @param resourceId the id of the resource containing the image
 * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into
 */
","/**
     * Use the {@link ModelLoaderFactory} currently registered for {@link Integer} to load the image represented by the
     * given {@link Integer} resource id. Defaults to {@link StreamResourceLoader.Factory} and {@link StreamResourceLoader} to load
     * the given model.
     *
     * @see #using(StreamModelLoader)
     *
     * @param resourceId the id of the resource containing the image
     * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into
     */
    public static Request<Integer> load(Integer resourceId) {
        return new Request<Integer>(resourceId);
    }",True,True,This method is used to load an image represented by a given resource ID. It returns a GenericRequest object that allows options to be set for the load and specifies the target to load the model into.,True,"This code defines a static method called ""load"" that takes an Integer resource id as input and returns a Request object. The method uses the ModelLoaderFactory registered for Integer to load the image represented by the resource id, with StreamResourceLoader as the default loader. The returned Request object can be used to set options for the load and specify the target to load the model into."
25,loadFromImage(T),load from image model use the link model loader factory currently registered for the given model type to load the image represented bythe given model param model the model to load param the type of the model to load return a link generic request to set options for the load and ultimately the target to load the image into throws illegal argument exception if no such link model loader factory is registered for the given model type ,Method,,,"com.bumptech.glide.Glide.ImageModelRequest+load(T) com.bumptech.glide.Glide.ImageModelRequest+ImageModelRequest(ModelLoaderFactory<T,InputStream>) com.bumptech.glide.Glide+getFactory(T,Class<Y>) com.bumptech.glide.Glide+getFactory(T,Class<Y>) com.bumptech.glide.Glide.ImageModelRequest+load(T)",com.bumptech.glide.Glide+GLIDE,680,13,9,"/** 
 * Use the  {@link ModelLoaderFactory} currently registered for the given model type to load the image represented bythe given model.
 * @param model The model to load.
 * @param < T > The type of the model to load.
 * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the image into.
 * @throws IllegalArgumentException If no such {@link ModelLoaderFactory} is registered for the given model type.
 */
","/**
     * Use the {@link ModelLoaderFactory} currently registered for the given model type to load the image represented by
     * the given model.
     *
     * @param model The model to load.
     * @param <T> The type of the model to load.
     * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the image into.
     * @throws IllegalArgumentException If no such {@link ModelLoaderFactory} is registered for the given model type.
     */
    @SuppressWarnings(""unused"")
    public static <T> Request<T> loadFromImage(T model) {
        return new ImageModelRequest<T>(GLIDE.getFactory(model, InputStream.class)).load(model);
    }",True,True,"This method is used to load an image represented by a given model using the registered ModelLoaderFactory for that model type. It returns a GenericRequest to set options for the load and target to load the image into. If no ModelLoaderFactory is registered for the given model type, it throws an IllegalArgumentException.",True,"The code defines a method called `loadFromImage` that takes a model as input and returns a `Request` object. This method uses the registered `ModelLoaderFactory` for the given model type to load the image represented by the model. If no `ModelLoaderFactory` is registered for the model type, an `IllegalArgumentException` is thrown."
26,loadFromVideo(T),load from video model use the link model loader factory currently registered for the given model type for link parcel file descriptor s to load a thumbnail for the video represented by the given model param model the model to load param the type of the model to load return a link request to set options for the load an ultimately the target to load the thumbnail into throws illegal argument exception if no such link model loader factory is registered for the given model type ,Method,,,"com.bumptech.glide.Glide.VideoModelRequest+loadFromVideo(T) com.bumptech.glide.Glide.VideoModelRequest+VideoModelRequest(ModelLoaderFactory<T,ParcelFileDescriptor>) com.bumptech.glide.Glide+getFactory(T,Class<Y>) com.bumptech.glide.Glide+getFactory(T,Class<Y>) com.bumptech.glide.Glide.VideoModelRequest+loadFromVideo(T)",com.bumptech.glide.Glide+GLIDE,744,13,9,"/** 
 * Use the  {@link ModelLoaderFactory} currently registered for the given model type for{@link ParcelFileDescriptor}s to load a thumbnail for the video represented by the given model.
 * @param model The model to load.
 * @param < T > The type of the model to load.
 * @return A {@link Request} to set options for the load an ultimately the target to load the thumbnail into.
 * @throws IllegalArgumentException If no such {@link ModelLoaderFactory} is registered for the given model type.
 */
","/**
     * Use the {@link ModelLoaderFactory} currently registered for the given model type for
     * {@link ParcelFileDescriptor}s to load a thumbnail for the video represented by the given model.
     *
     * @param model The model to load.
     * @param <T> The type of the model to load.
     * @return A {@link Request} to set options for the load an ultimately the target to load the thumbnail into.
     * @throws IllegalArgumentException If no such {@link ModelLoaderFactory} is registered for the given model type.
     */
    @SuppressWarnings(""unused"")
    public static <T> Request<T> loadFromVideo(T model) {
        return new VideoModelRequest<T>(GLIDE.getFactory(model, ParcelFileDescriptor.class)).loadFromVideo(model);
    }",True,True,This method is used to load a thumbnail for a video represented by a given model. It returns a Request object to set options for the load and ultimately the target to load the thumbnail into. It throws an IllegalArgumentException if no ModelLoaderFactory is registered for the given model type.,True,
27,cancel(ImageView),cancel image view see cancel com bumptech glide presenter target target ,Method,,,com.bumptech.glide.Glide+getImageViewTarget(ImageView) com.bumptech.glide.Glide+getImageViewTarget(ImageView) com.bumptech.glide.Glide+cancel(Target) com.bumptech.glide.Glide+cancel(Target),com.bumptech.glide.Glide+GLIDE,253,7,9,"/** 
 * @see #cancel(com.bumptech.glide.presenter.target.Target)
 */
","/**
     * @see #cancel(com.bumptech.glide.presenter.target.Target)
     */
    public static boolean cancel(ImageView imageView) {
        final Target target = GLIDE.getImageViewTarget(imageView);
        return target != null && cancel(target);
    }",False,False,"This method cancels the loading of an image into an ImageView using Glide library by retrieving the target associated with the ImageView and calling the cancel method on it. It returns true if the cancellation is successful, otherwise false.",True,"The code is a static method that cancels the loading of an image into an ImageView using Glide library. It retrieves the target associated with the ImageView and cancels it if it exists, returning a boolean value indicating whether the cancellation was successful or not."
28,cancel(Target),cancel target cancel any pending loads glide may have for the target after the load is cancelled glide will not load a placeholder or bitmap into the target so it is safe to do so yourself until you start another load param target the target to cancel loads for return true iff glide had ever been asked to load an image for this target ,Method,,,com.bumptech.glide.presenter.target.Target+getImagePresenter() com.bumptech.glide.presenter.target.Target+getImagePresenter() com.bumptech.glide.presenter.ImagePresenter+clear() com.bumptech.glide.presenter.ImagePresenter+clear(),,632,16,9,"/** 
 * Cancel any pending loads Glide may have for the target. After the load is cancelled Glide will not load a placeholder or bitmap into the target so it is safe to do so yourself until you start another load.
 * @param target The Target to cancel loads for
 * @return True iff Glide had ever been asked to load an image for this target
 */
","/**
     * Cancel any pending loads Glide may have for the target. After the load is cancelled Glide will not load
     * a placeholder or bitmap into the target so it is safe to do so yourself until you start another load.
     *
     * @param target The Target to cancel loads for
     * @return True iff Glide had ever been asked to load an image for this target
     */
    public static boolean cancel(Target target) {
        ImagePresenter current = target.getImagePresenter();
        final boolean cancelled = current != null;
        if (cancelled) {
            current.clear();
        }

        return cancelled;
    }",False,False,The function of this method is to cancel any pending loads for a given target in Glide. It returns true if Glide had ever been asked to load an image for this target.,True,"This code defines a method called ""cancel"" that cancels any pending image loads for a given target. It returns true if Glide had been asked to load an image for the target before cancellation."
29,VideoModelRequest,video model request a helper class for building requests with custom link model loader s that translate models to link parcel file descriptor resources for loading video thumbnails param the type of the model ,MemberClass,,,"com.bumptech.glide.Glide.VideoModelRequest+VideoModelRequest(ModelLoaderFactory<T,ParcelFileDescriptor>) com.bumptech.glide.Glide.VideoModelRequest+loadFromVideo(T) com.bumptech.glide.Glide.Request+Request(ModelType,ModelLoaderFactory<ModelType,InputStream>,ModelLoaderFactory<ModelType,ParcelFileDescriptor>)",com.bumptech.glide.Glide.VideoModelRequest+factory com.bumptech.glide.Glide.VideoModelRequest+factory com.bumptech.glide.Glide.VideoModelRequest+factory,614,17,9,"/** 
 * A helper class for building requests with custom  {@link ModelLoader}s that translate models to {@link ParcelFileDescriptor} resources for loading video thumbnails.
 * @param < T > The type of the model.
 */
","/**
     * A helper class for building requests with custom {@link ModelLoader}s that translate models to
     * {@link ParcelFileDescriptor} resources for loading video thumbnails.
     *
     * @param <T> The type of the model.
     */
    public static class VideoModelRequest<T> {
        private ModelLoaderFactory<T, ParcelFileDescriptor> factory;

        private VideoModelRequest(ModelLoaderFactory<T, ParcelFileDescriptor> factory) {
            this.factory = factory;
        }

        public Request<T> loadFromVideo(T model) {
            return new Request<T>(model, null, factory);
        }
    }",False,False,"/** 
 * A helper class for building requests with custom  {@link ModelLoader}s that translate models to {@link ParcelFileDescriptor} resources for loading video thumbnails.
 * @param < T > The type of the model.
 */
",False,"/** 
 * A helper class for building requests with custom  {@link ModelLoader}s that translate models to {@link ParcelFileDescriptor} resources for loading video thumbnails.
 * @param < T > The type of the model.
 */
"
30,ImageModelRequest,image model request a helper class for building requests with custom link model loader s that translate models to link input stream resources for loading images param the type of the model ,MemberClass,,,"com.bumptech.glide.Glide.ImageModelRequest+ImageModelRequest(ModelLoaderFactory<T,InputStream>) com.bumptech.glide.Glide.ImageModelRequest+load(T) com.bumptech.glide.Glide.Request+Request(ModelType,ModelLoaderFactory<ModelType,InputStream>,ModelLoaderFactory<ModelType,ParcelFileDescriptor>)",com.bumptech.glide.Glide.ImageModelRequest+factory com.bumptech.glide.Glide.ImageModelRequest+factory com.bumptech.glide.Glide.ImageModelRequest+factory,574,17,9,"/** 
 * A helper class for building requests with custom  {@link ModelLoader}s that translate models to {@link InputStream} resources for loading images.
 * @param < T > The type of the model.
 */
","/**
     * A helper class for building requests with custom {@link ModelLoader}s that translate models to
     * {@link InputStream} resources for loading images.
     *
     * @param <T> The type of the model.
     */
    public static class ImageModelRequest<T> {
        private final ModelLoaderFactory<T, InputStream> factory;

        private ImageModelRequest(ModelLoaderFactory<T, InputStream> factory) {
            this.factory = factory;
        }

        public Request<T> load(T model) {
            return new Request<T>(model, factory, null);
        }
    }",False,False,"/** 
 * A helper class for building requests with custom  {@link ModelLoader}s that translate models to {@link InputStream} resources for loading images.
 * @param < T > The type of the model.
 */
",False,"/** 
 * A helper class for building requests with custom  {@link ModelLoader}s that translate models to {@link InputStream} resources for loading images.
 * @param < T > The type of the model.
 */
"
31,ContextRequest,context request an request for the user to provide an link context to start an image load ,MemberClass,,,"com.bumptech.glide.Glide.ContextRequest+ContextRequest(GenericRequest,Target) com.bumptech.glide.Glide.ContextRequest+with(Context) com.bumptech.glide.Glide.GenericRequest+finish(Context,Target) com.bumptech.glide.Glide.GenericRequest+finish(Context,Target)",com.bumptech.glide.Glide.ContextRequest+request com.bumptech.glide.Glide.ContextRequest+target com.bumptech.glide.Glide.ContextRequest+request com.bumptech.glide.Glide.ContextRequest+target com.bumptech.glide.Glide.ContextRequest+request com.bumptech.glide.Glide.ContextRequest+target,730,22,9,"/** 
 * An request for the user to provide an  {@link Context} to start an image load.
 */
","/**
     * An request for the user to provide an {@link Context} to start an image load.
     */
    public static class ContextRequest {
        private final GenericRequest request;
        private final Target target;

        private ContextRequest(GenericRequest request, Target target) {
            this.request = request;
            this.target = target;
        }

        /**
         * Start loading the image using the given context. The context will not be referenced statically so any
         * context is acceptable.
         *
         * @param context The context to use to help load the image.
         */
        public void with(Context context) {
            request.finish(context, target);
        }
    }",False,False,"/** 
 * An request for the user to provide an  {@link Context} to start an image load.
 */
",False,"/** 
 * An request for the user to provide an  {@link Context} to start an image load.
 */
"
32,Request,request a class for creating a request to load a bitmap for an image or from a video sets a variety of type independent options including resizing animations and placeholders param model type the type of model that will be loaded into the target ,MemberClass,,,"com.bumptech.glide.Glide.Request+Request(ModelType) com.bumptech.glide.Glide+getFactory(T,Class<Y>) com.bumptech.glide.Glide+getFactory(T,Class<Y>) com.bumptech.glide.Glide+getFactory(T,Class<Y>) com.bumptech.glide.Glide+getFactory(T,Class<Y>) com.bumptech.glide.Glide.Request+Request(ModelType,ModelLoaderFactory<ModelType,InputStream>,ModelLoaderFactory<ModelType,ParcelFileDescriptor>) com.bumptech.glide.Glide.Request+videoDecoder(BitmapDecoder<ParcelFileDescriptor>) com.bumptech.glide.Glide.Request+approximate() com.bumptech.glide.Glide.Request+approximate() com.bumptech.glide.Glide.Request+videoDecoder(BitmapDecoder<ParcelFileDescriptor>) com.bumptech.glide.resize.load.VideoBitmapDecoder+VideoBitmapDecoder() com.bumptech.glide.Glide.Request+downsample(Downsampler) com.bumptech.glide.Glide.Request+approximate() com.bumptech.glide.Glide.Request+downsample(Downsampler) com.bumptech.glide.Glide.Request+downsample(Downsampler) com.bumptech.glide.Glide.Request+downsample(Downsampler) com.bumptech.glide.Glide.Request+asIs() com.bumptech.glide.Glide.Request+downsample(Downsampler) com.bumptech.glide.Glide.Request+downsample(Downsampler) com.bumptech.glide.Glide.Request+imageDecoder(BitmapDecoder<InputStream>) com.bumptech.glide.Glide.Request+videoDecoder(BitmapDecoder<ParcelFileDescriptor>) com.bumptech.glide.Glide.Request+downsample(Downsampler) com.bumptech.glide.Glide.GenericRequest+imageDecoder(BitmapDecoder<ImageResourceType>) com.bumptech.glide.Glide.Request+imageDecoder(BitmapDecoder<InputStream>) com.bumptech.glide.Glide.GenericRequest+imageDecoder(BitmapDecoder<ImageResourceType>) com.bumptech.glide.Glide.Request+videoDecoder(BitmapDecoder<ParcelFileDescriptor>) com.bumptech.glide.Glide.GenericRequest+videoDecoder(BitmapDecoder<VideoResourceType>) com.bumptech.glide.Glide.Request+centerCrop() com.bumptech.glide.Glide.GenericRequest+centerCrop() com.bumptech.glide.Glide.Request+fitCenter() com.bumptech.glide.Glide.GenericRequest+fitCenter() com.bumptech.glide.Glide.Request+transform(Transformation) com.bumptech.glide.Glide.GenericRequest+transform(Transformation) com.bumptech.glide.Glide.Request+transform(TransformationLoader<ModelType>) com.bumptech.glide.Glide.GenericRequest+transform(TransformationLoader<ModelType>) com.bumptech.glide.Glide.Request+animate(int) com.bumptech.glide.Glide.GenericRequest+animate(int) com.bumptech.glide.Glide.Request+placeholder(int) com.bumptech.glide.Glide.GenericRequest+placeholder(int) com.bumptech.glide.Glide.Request+error(int) com.bumptech.glide.Glide.GenericRequest+error(int) com.bumptech.glide.Glide.Request+listener(RequestListener<ModelType>) com.bumptech.glide.Glide.GenericRequest+listener(RequestListener<ModelType>)",com.bumptech.glide.Glide+GLIDE com.bumptech.glide.Glide+GLIDE com.bumptech.glide.resize.load.Downsampler+AT_LEAST com.bumptech.glide.resize.load.Downsampler+AT_LEAST com.bumptech.glide.resize.load.Downsampler+NONE com.bumptech.glide.resize.load.Downsampler+NONE com.bumptech.glide.resize.load.Downsampler+AT_LEAST,3921,118,9,"/** 
 * A class for creating a request to load a bitmap for an image or from a video. Sets a variety of type independent options including resizing, animations, and placeholders.
 * @param < ModelType > The type of model that will be loaded into the target.
 */
","/**
     * A class for creating a request to load a bitmap for an image or from a video. Sets a variety of type independent
      * options including resizing, animations, and placeholders.
     *
     * @param <ModelType> The type of model that will be loaded into the target.
     */
    @SuppressWarnings(""unused"") //public api
    public static class Request<ModelType> extends GenericRequest<ModelType, InputStream, ParcelFileDescriptor> {
        private Request(ModelType model) {
            this(model, GLIDE.getFactory(model, InputStream.class),
                    GLIDE.getFactory(model, ParcelFileDescriptor.class));
        }

        private Request(ModelType model,
                ModelLoaderFactory<ModelType, InputStream> imageFactory,
                ModelLoaderFactory<ModelType, ParcelFileDescriptor> videoFactory) {
            super(model, imageFactory, videoFactory);
            approximate().videoDecoder(new VideoBitmapDecoder());
        }

        /**
         * Load images at a size near the size of the target using {@link Downsampler#AT_LEAST}.
         *
         * @see #downsample(com.bumptech.glide.resize.load.Downsampler)
         *
         * @return This Request
         */
        public Request<ModelType> approximate() {
            return downsample(Downsampler.AT_LEAST);
        }

        /**
         * Load images at their original size using {@link Downsampler#NONE}.
         *
         * @see #downsample(com.bumptech.glide.resize.load.Downsampler)
         *
         * @return This Request
         */
        public Request<ModelType> asIs() {
            return downsample(Downsampler.NONE);
        }

        /**
         * Load images using the given {@link Downsampler}. Replaces any existing image decoder. Defaults to
         * {@link Downsampler#AT_LEAST}. Will be ignored if the data represented by the model is a video.
         *
         * @see #imageDecoder
         * @see #videoDecoder(BitmapDecoder)
         *
         * @param downsampler The downsampler
         * @return This Request
         */
        public Request<ModelType> downsample(Downsampler downsampler) {
            super.imageDecoder(downsampler);
            return this;
        }

        @Override
        public Request<ModelType> imageDecoder(BitmapDecoder<InputStream> decoder) {
            super.imageDecoder(decoder);
            return this;
        }

        @Override
        public Request<ModelType> videoDecoder(BitmapDecoder<ParcelFileDescriptor> decoder) {
            super.videoDecoder(decoder);
            return this;
        }

        @Override
        public Request<ModelType> centerCrop() {
            super.centerCrop();
            return this;
        }

        @Override
        public Request<ModelType> fitCenter() {
            super.fitCenter();
            return this;
        }

        @Override
        public Request<ModelType> transform(Transformation transformation) {
            super.transform(transformation);
            return this;
        }

        @Override
        public Request<ModelType> transform(
                TransformationLoader<ModelType> transformationLoader) {
            super.transform(transformationLoader);
            return this;
        }

        @Override
        public Request<ModelType> animate(int animationId) {
            super.animate(animationId);
            return this;
        }

        @Override
        public Request<ModelType> placeholder(int resourceId) {
            super.placeholder(resourceId);
            return this;
        }

        @Override
        public Request<ModelType> error(int resourceId) {
            super.error(resourceId);
            return this;
        }

        @Override
        public Request<ModelType> listener(RequestListener<ModelType> requestListener) {
            super.listener(requestListener);
            return this;
        }
    }",False,False,"/** 
 * A class for creating a request to load a bitmap for an image or from a video. Sets a variety of type independent options including resizing, animations, and placeholders.
 * @param < ModelType > The type of model that will be loaded into the target.
 */
",False,"/** 
 * A class for creating a request to load a bitmap for an image or from a video. Sets a variety of type independent options including resizing, animations, and placeholders.
 * @param < ModelType > The type of model that will be loaded into the target.
 */
"
33,GenericRequest,generic request a generic class that can handle loading a bitmap either from an image or as a thumbnail from a video given models loaders to translate a model into generic resources for either an image or a video and decoders that can decode those resources into bitmaps param model type the type of model representing the image or video param image resource type the resource type that the image link model loader will provide that can be decodedby the image link bitmap decoder param video resource type the resource type that the video link model loader will provide that can be decodedby the video link bitmap decoder ,MemberClass,,,"java.util.ArrayList+ArrayList() com.bumptech.glide.Glide.GenericRequest+GenericRequest(ModelType,ModelLoaderFactory<ModelType,ImageResourceType>,ModelLoaderFactory<ModelType,VideoResourceType>) java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.Object+getClass() java.lang.Object+getClass() com.bumptech.glide.Glide.GenericRequest+imageDecoder(BitmapDecoder<ImageResourceType>) com.bumptech.glide.Glide.GenericRequest+videoDecoder(BitmapDecoder<VideoResourceType>) com.bumptech.glide.Glide.GenericRequest+transform(TransformationLoader<ModelType>) com.bumptech.glide.Glide.GenericRequest+centerCrop() com.bumptech.glide.Glide.GenericRequest+transform(TransformationLoader<ModelType>) com.bumptech.glide.Glide.GenericRequest+transform(TransformationLoader<ModelType>) com.bumptech.glide.loader.bitmap.transformation.CenterCrop+CenterCrop() com.bumptech.glide.Glide.GenericRequest+transform(TransformationLoader<ModelType>) com.bumptech.glide.Glide.GenericRequest+fitCenter() com.bumptech.glide.Glide.GenericRequest+transform(TransformationLoader<ModelType>) com.bumptech.glide.Glide.GenericRequest+transform(TransformationLoader<ModelType>) com.bumptech.glide.loader.bitmap.transformation.FitCenter+FitCenter() com.bumptech.glide.Glide.GenericRequest+transform(TransformationLoader<ModelType>) com.bumptech.glide.Glide.GenericRequest+transform(Transformation) com.bumptech.glide.Glide.GenericRequest+transform(TransformationLoader<ModelType>) com.bumptech.glide.Glide.GenericRequest+transform(TransformationLoader<ModelType>) +() +getTransformation(ModelType) +getId() com.bumptech.glide.resize.load.Transformation+getId() com.bumptech.glide.resize.load.Transformation+getId() com.bumptech.glide.Glide.GenericRequest+transform(TransformationLoader<ModelType>) java.util.ArrayList+add(E) java.util.ArrayList+add(E) com.bumptech.glide.Glide.GenericRequest+animate(int) com.bumptech.glide.Glide.GenericRequest+placeholder(int) com.bumptech.glide.Glide.GenericRequest+error(int) com.bumptech.glide.Glide.GenericRequest+listener(RequestListener<ModelType>) com.bumptech.glide.presenter.ImagePresenter+setModel(T) com.bumptech.glide.Glide.GenericRequest+into(ImageView) com.bumptech.glide.Glide.GenericRequest+finish(Context,Target) com.bumptech.glide.Glide.GenericRequest+finish(Context,Target) com.bumptech.glide.Glide+getImageViewTargetOrSet(ImageView) com.bumptech.glide.Glide+getImageViewTargetOrSet(ImageView) com.bumptech.glide.Glide.GenericRequest+into(Target) com.bumptech.glide.Glide.ContextRequest+ContextRequest(GenericRequest,Target) com.bumptech.glide.Glide.GenericRequest+finish(Context,Target) com.bumptech.glide.Glide.GenericRequest+getImagePresenter(Target) com.bumptech.glide.Glide.GenericRequest+getImagePresenter(Target) com.bumptech.glide.presenter.ImagePresenter+setModel(T) com.bumptech.glide.presenter.ImagePresenter+setModel(T) com.bumptech.glide.presenter.target.Target+setImagePresenter(ImagePresenter) com.bumptech.glide.Glide.GenericRequest+getImagePresenter(Target) com.bumptech.glide.presenter.target.Target+getImagePresenter() com.bumptech.glide.presenter.target.Target+getImagePresenter() java.util.Map+get(Object) java.util.Map+get(Object) com.bumptech.glide.Glide.Metadata+Metadata(GenericRequest) com.bumptech.glide.Glide.Metadata+isIdenticalTo(Metadata) com.bumptech.glide.Glide.Metadata+isIdenticalTo(Metadata) com.bumptech.glide.presenter.ImagePresenter+clear() com.bumptech.glide.presenter.ImagePresenter+clear() com.bumptech.glide.Glide.GenericRequest+buildImagePresenter(Target) com.bumptech.glide.Glide.GenericRequest+buildImagePresenter(Target) com.bumptech.glide.presenter.target.Target+setImagePresenter(ImagePresenter) com.bumptech.glide.presenter.target.Target+setImagePresenter(ImagePresenter) java.util.Map+put(K,V) java.util.Map+put(K,V) com.bumptech.glide.Glide.GenericRequest+buildImagePresenter(Target) com.bumptech.glide.Glide.GenericRequest+getFinalTransformationLoader() com.bumptech.glide.Glide.GenericRequest+getFinalTransformationLoader() com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory+build(Context,GenericLoaderFactory) com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory+build(Context,GenericLoaderFactory) com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory+build(Context,GenericLoaderFactory) com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory+build(Context,GenericLoaderFactory) com.bumptech.glide.presenter.ImagePresenter.Builder+setTarget(Target,Context) com.bumptech.glide.presenter.ImagePresenter.Builder+Builder() com.bumptech.glide.presenter.ImagePresenter.Builder+setTarget(Target,Context) com.bumptech.glide.loader.bitmap.BaseBitmapLoadFactory+BaseBitmapLoadFactory(ModelLoader<T,Y>,BitmapDecoder<Y>,ModelLoader<T,Z>,BitmapDecoder<Z>,TransformationLoader<T>) com.bumptech.glide.loader.image.ImageManagerLoader+ImageManagerLoader(Context) com.bumptech.glide.presenter.ImagePresenter.Builder+setImageReadyCallback(ImageReadyCallback<T>) com.bumptech.glide.presenter.ImagePresenter.Builder+setImageReadyCallback(ImageReadyCallback<T>) +() +onImageReady(ModelType,Target,boolean) com.bumptech.glide.presenter.target.Target+startAnimation(Animation) com.bumptech.glide.presenter.target.Target+startAnimation(Animation) com.bumptech.glide.Glide.RequestListener+onImageReady(T,Target) com.bumptech.glide.Glide.RequestListener+onImageReady(T,Target) com.bumptech.glide.presenter.ImagePresenter.Builder+setPlaceholderResource(int) com.bumptech.glide.presenter.ImagePresenter.Builder+setPlaceholderResource(int) com.bumptech.glide.presenter.ImagePresenter.Builder+setErrorResource(int) com.bumptech.glide.presenter.ImagePresenter.Builder+setErrorResource(int) com.bumptech.glide.presenter.ImagePresenter.Builder+setExceptionHandler(ExceptionHandler<T>) com.bumptech.glide.presenter.ImagePresenter.Builder+setExceptionHandler(ExceptionHandler<T>) +() +onException(Exception,ModelType,boolean) com.bumptech.glide.Glide.RequestListener+onException(Exception,T,Target) com.bumptech.glide.Glide.RequestListener+onException(Exception,T,Target) com.bumptech.glide.presenter.ImagePresenter.Builder+build() com.bumptech.glide.presenter.ImagePresenter.Builder+build() com.bumptech.glide.Glide.GenericRequest+getFinalTransformationLoader() java.util.ArrayList+size() java.util.ArrayList+size() com.bumptech.glide.loader.bitmap.transformation.None+None() java.util.ArrayList+get(int) java.util.ArrayList+get(int) com.bumptech.glide.loader.bitmap.transformation.MultiTransformationLoader+MultiTransformationLoader(List<TransformationLoader<T>>) com.bumptech.glide.Glide.GenericRequest+getFinalTransformationId() java.util.ArrayList+size() java.util.ArrayList+size() com.bumptech.glide.resize.load.Transformation+getId() com.bumptech.glide.resize.load.Transformation+getId() com.bumptech.glide.loader.bitmap.transformation.TransformationLoader+getId() java.util.ArrayList+get(int) java.util.ArrayList+get(int) com.bumptech.glide.loader.bitmap.transformation.TransformationLoader+getId() java.lang.StringBuilder+StringBuilder() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) com.bumptech.glide.loader.bitmap.transformation.TransformationLoader+getId() com.bumptech.glide.loader.bitmap.transformation.TransformationLoader+getId() java.lang.StringBuilder+toString() java.lang.StringBuilder+toString()",com.bumptech.glide.Glide.GenericRequest+context com.bumptech.glide.Glide.GenericRequest+imageModelLoaderFactory com.bumptech.glide.Glide.GenericRequest+videoModelLoaderFactory com.bumptech.glide.Glide.GenericRequest+model com.bumptech.glide.Glide.GenericRequest+animationId com.bumptech.glide.Glide.GenericRequest+placeholderId com.bumptech.glide.Glide.GenericRequest+errorId com.bumptech.glide.Glide.GenericRequest+transformationLoaders com.bumptech.glide.Glide.GenericRequest+requestListener com.bumptech.glide.Glide.GenericRequest+imageDecoder com.bumptech.glide.Glide.GenericRequest+videoDecoder com.bumptech.glide.Glide.GenericRequest+model com.bumptech.glide.Glide.GenericRequest+imageModelLoaderFactory com.bumptech.glide.Glide.GenericRequest+videoModelLoaderFactory com.bumptech.glide.Glide.GenericRequest+imageDecoder com.bumptech.glide.Glide.GenericRequest+videoDecoder com.bumptech.glide.Glide.GenericRequest+transformationLoaders com.bumptech.glide.Glide.GenericRequest+animationId com.bumptech.glide.Glide.GenericRequest+placeholderId com.bumptech.glide.Glide.GenericRequest+errorId com.bumptech.glide.Glide.GenericRequest+requestListener com.bumptech.glide.Glide+GLIDE com.bumptech.glide.Glide.GenericRequest+context com.bumptech.glide.Glide.GenericRequest+model com.bumptech.glide.Glide+GLIDE com.bumptech.glide.Glide+metadataTracker com.bumptech.glide.Glide+GLIDE com.bumptech.glide.Glide+metadataTracker com.bumptech.glide.Glide.GenericRequest+imageModelLoaderFactory com.bumptech.glide.Glide.GenericRequest+imageModelLoaderFactory com.bumptech.glide.Glide.GenericRequest+context com.bumptech.glide.Glide+GLIDE com.bumptech.glide.Glide+loaderFactory com.bumptech.glide.Glide.GenericRequest+videoModelLoaderFactory com.bumptech.glide.Glide.GenericRequest+videoModelLoaderFactory com.bumptech.glide.Glide.GenericRequest+context com.bumptech.glide.Glide+GLIDE com.bumptech.glide.Glide+loaderFactory com.bumptech.glide.Glide.GenericRequest+context com.bumptech.glide.Glide.GenericRequest+imageDecoder com.bumptech.glide.Glide.GenericRequest+videoDecoder com.bumptech.glide.Glide.GenericRequest+context com.bumptech.glide.Glide.GenericRequest+animationId com.bumptech.glide.Glide.GenericRequest+requestListener com.bumptech.glide.Glide.GenericRequest+animationId com.bumptech.glide.Glide.GenericRequest+context com.bumptech.glide.Glide.GenericRequest+animationId com.bumptech.glide.Glide.GenericRequest+requestListener com.bumptech.glide.Glide.GenericRequest+requestListener com.bumptech.glide.Glide.GenericRequest+placeholderId com.bumptech.glide.Glide.GenericRequest+placeholderId com.bumptech.glide.Glide.GenericRequest+errorId com.bumptech.glide.Glide.GenericRequest+errorId com.bumptech.glide.Glide.GenericRequest+requestListener com.bumptech.glide.Glide.GenericRequest+requestListener com.bumptech.glide.Glide.GenericRequest+transformationLoaders com.bumptech.glide.Glide.GenericRequest+transformationLoaders com.bumptech.glide.Glide.GenericRequest+transformationLoaders com.bumptech.glide.Glide.GenericRequest+transformationLoaders com.bumptech.glide.resize.load.Transformation+NONE com.bumptech.glide.Glide.GenericRequest+transformationLoaders com.bumptech.glide.Glide.GenericRequest+transformationLoaders,13820,341,10,"/** 
 * A generic class that can handle loading a bitmap either from an image or as a thumbnail from a video given models loaders to translate a model into generic resources for either an image or a video and decoders that can decode those resources into bitmaps.
 * @param < ModelType > The type of model representing the image or video.
 * @param < ImageResourceType > The resource type that the image {@link ModelLoader} will provide that can be decodedby the image  {@link BitmapDecoder}.
 * @param < VideoResourceType > The resource type that the video {@link ModelLoader} will provide that can be decodedby the video  {@link BitmapDecoder}.
 */
","/**
     * A generic class that can handle loading a bitmap either from an image or as a thumbnail from a video given
     * models loaders to translate a model into generic resources for either an image or a video and decoders that can
     * decode those resources into bitmaps.
     *
     * @param <ModelType> The type of model representing the image or video.
     * @param <ImageResourceType> The resource type that the image {@link ModelLoader} will provide that can be decoded
     *                           by the image {@link BitmapDecoder}.
     * @param <VideoResourceType> The resource type that the video {@link ModelLoader} will provide that can be decoded
     *                           by the video {@link BitmapDecoder}.
     */
    private static class GenericRequest<ModelType, ImageResourceType, VideoResourceType> {
        private Context context;
        private ModelLoaderFactory<ModelType, ImageResourceType> imageModelLoaderFactory;
        private final ModelLoaderFactory<ModelType, VideoResourceType> videoModelLoaderFactory;
        private final ModelType model;

        private int animationId = -1;
        private int placeholderId = -1;
        private int errorId = -1;
        private ArrayList<TransformationLoader<ModelType>> transformationLoaders = new ArrayList<TransformationLoader<ModelType>>();
        private RequestListener<ModelType> requestListener;
        private BitmapDecoder<ImageResourceType> imageDecoder;
        private BitmapDecoder<VideoResourceType> videoDecoder;

        private GenericRequest(ModelType model, ModelLoaderFactory<ModelType, ImageResourceType> imageFactory,
                ModelLoaderFactory<ModelType, VideoResourceType> videoFactory) {
             if (model == null ) {
                throw new IllegalArgumentException(""Model can't be null"");
            }
            this.model = model;

            if (imageFactory == null && videoFactory == null) {
                throw new IllegalArgumentException(""No ModelLoaderFactorys registered for either image or video type,""
                        + "" class="" + model.getClass());
            }
            this.imageModelLoaderFactory = imageFactory;
            this.videoModelLoaderFactory = videoFactory;
        }

        /**
         * Loads the image from the given resource type into an {@link Bitmap} using the given {@link BitmapDecoder}.
         *
         * <p>
         *     Will be ignored if the data represented by the given model is not an image.
         * </p>
         *
         * @see Downsampler
         *
         * @param decoder The {@link BitmapDecoder} to use to decode the image resource.
         * @return This Request.
         */
        public GenericRequest<ModelType, ImageResourceType, VideoResourceType> imageDecoder(
                BitmapDecoder<ImageResourceType> decoder) {
            this.imageDecoder = decoder;

            return this;
        }

        /**
         * Loads the video from the given resource type into an {@link Bitmap} using the given {@link BitmapDecoder}.
         *
         * <p>
         *     Will be ignored if the data represented by the given model is not a video.
         * </p>
         *
         * @see VideoBitmapDecoder
         *
         * @param decoder The {@link BitmapDecoder} to use to decode the video resource.
         * @return This request.
         */
        public GenericRequest<ModelType, ImageResourceType, VideoResourceType> videoDecoder(
                BitmapDecoder<VideoResourceType> decoder) {
            this.videoDecoder = decoder;

            return this;
        }

        /**
         * Transform images using {@link CenterCrop}.
         *
         * @see #transform(TransformationLoader)
         *
         * @return This Request
         */
        public GenericRequest<ModelType, ImageResourceType, VideoResourceType> centerCrop() {
            return transform(new CenterCrop<ModelType>());
        }

        /**
         * Transform images using {@link FitCenter}.
         *
         * @see #transform(TransformationLoader)
         *
         * @return This Request
         */
        public GenericRequest<ModelType, ImageResourceType, VideoResourceType> fitCenter() {
            return transform(new FitCenter<ModelType>());
        }

        /**
         * Set an arbitrary transformation to apply after an image has been loaded into memory.
         *
         * @see #transform(TransformationLoader)
         *
         * @param transformation The transformation to use
         * @return This Request
         */
        public GenericRequest<ModelType, ImageResourceType, VideoResourceType> transform(
                final Transformation transformation) {
            return transform(new TransformationLoader<ModelType>() {
                @Override
                public Transformation getTransformation(ModelType model) {
                    return transformation;
                }

                @Override
                public String getId() {
                    return transformation.getId();
                }
            });
        }

        /**
         * Transform images with the given {@link TransformationLoader}. Appends this transformation onto any existing
         * transformations
         *
         * @param transformationLoader The loader to obtaian a transformation for a given model
         * @return This Request
         */
        public GenericRequest<ModelType, ImageResourceType, VideoResourceType> transform(
                TransformationLoader<ModelType> transformationLoader) {
            transformationLoaders.add(transformationLoader);

            return this;
        }

        /**
         * Sets an animation to run on the wrapped target when an image load finishes. Will only be run if the image
         * was loaded asynchronously (ie was not in the memory cache)
         *
         * @param animationId The resource id of the animation to run
         * @return This Request
         */
        public GenericRequest<ModelType, ImageResourceType, VideoResourceType> animate(int animationId) {
            this.animationId = animationId;

            return this;
        }

        /**
         * Sets a resource to display while an image is loading
         *
         * @param resourceId The id of the resource to use as a placeholder
         * @return This Request
         */
        public GenericRequest<ModelType, ImageResourceType, VideoResourceType> placeholder(int resourceId) {
            this.placeholderId = resourceId;

            return this;
        }

        /**
         * Sets a resource to display if a load fails
         *
         * @param resourceId The id of the resource to use as a placeholder
         * @return This request
         */
        public GenericRequest<ModelType, ImageResourceType, VideoResourceType> error(int resourceId) {
            this.errorId = resourceId;

            return this;
        }

        /**
         * Sets a Request listener to monitor the image load. It's best to create a single instance of an exception
         * handler per type of request (usually activity/fragment) rather than pass one in per request to avoid some
         * redundant object allocation.
         *
         * @param requestListener The request listener to use
         * @return This request
         */
        public GenericRequest<ModelType, ImageResourceType, VideoResourceType> listener(
                RequestListener<ModelType> requestListener) {
            this.requestListener = requestListener;

            return this;
        }

        /**
         * Start loading the image into the view.
         *
         * <p>
         *     Note - This method will call {@link ImageView#setTag(Object)} and may silently overwrite any tag that
         *     might already be set on the view.
         * </p>
         *
         * @see ImagePresenter#setModel(Object)
         * @param imageView The view that will display the image
         */
        public void into(ImageView imageView) {
            finish(imageView.getContext(), GLIDE.getImageViewTargetOrSet(imageView));
        }

        /**
         * Set the target the image will be loaded into.
         *
         * <p>
         *     Note - This method does not actually start loading the view. You must first pass in a {@link Context} to
         *     returned Request via {@link ContextRequest#with(android.content.Context)}.
         * </p>
         *
         * @param target The target to load te image for
         * @return A {@link ContextRequest} that can start the load
         */
        public ContextRequest into(Target target) {
            return new ContextRequest(this, target);
        }

        private void finish(Context context, Target target) {
            this.context = context;

            ImagePresenter<ModelType> imagePresenter = getImagePresenter(target);
            imagePresenter.setModel(model);
        }

        /**
         * Creates the new {@link ImagePresenter} if one does not currently exist for the current target and sets it as
         * the target's ImagePresenter via {@link Target#setImagePresenter(com.bumptech.glide.presenter.ImagePresenter)}
         */
        @SuppressWarnings(""unchecked"")
        private ImagePresenter<ModelType> getImagePresenter(Target target) {
            ImagePresenter<ModelType> result = target.getImagePresenter();

            Metadata previous = GLIDE.metadataTracker.get(target);
            Metadata current = new Metadata(this);

            if (previous != null && result == null) {
                previous = null;
            }

            if (!current.isIdenticalTo(previous)) {
                if (result != null) {
                    result.clear();
                }

                result = buildImagePresenter(target);
                target.setImagePresenter(result);

                GLIDE.metadataTracker.put(target, current);
            }

            return result;
        }

        private ImagePresenter<ModelType> buildImagePresenter(final Target target) {
            TransformationLoader<ModelType> transformationLoader = getFinalTransformationLoader();

            ModelLoader<ModelType, ImageResourceType> imageModelLoader = null;
            if (imageModelLoaderFactory != null) {
                imageModelLoader = imageModelLoaderFactory.build(context, GLIDE.loaderFactory);
            }
            ModelLoader<ModelType, VideoResourceType> videoModelLoader = null;
            if (videoModelLoaderFactory != null) {
                videoModelLoader = videoModelLoaderFactory.build(context, GLIDE.loaderFactory);
            }

            ImagePresenter.Builder<ModelType> builder = new ImagePresenter.Builder<ModelType>()
                    .setTarget(target, context)
                    .setBitmapLoadFactory(new BaseBitmapLoadFactory<ModelType, ImageResourceType, VideoResourceType>(
                            imageModelLoader, imageDecoder, videoModelLoader, videoDecoder, transformationLoader))
                    .setImageLoader(new ImageManagerLoader(context));

            if (animationId != -1 || requestListener != null) {
                final Animation animation;
                if (animationId != -1) {
                    animation = AnimationUtils.loadAnimation(context, animationId);
                } else {
                    animation = null;
                }
                builder.setImageReadyCallback(new ImagePresenter.ImageReadyCallback<ModelType>() {
                    @Override
                    public void onImageReady(ModelType model, Target target, boolean fromCache) {
                        if (animation != null && !fromCache) {
                            target.startAnimation(animation);
                        }
                        if (requestListener != null) {
                            requestListener.onImageReady(null, target);
                        }
                    }
                });
            }

            if (placeholderId != -1) {
                builder.setPlaceholderResource(placeholderId);
            }

            if (errorId != -1) {
                builder.setErrorResource(errorId);
            }

            if (requestListener != null) {
                builder.setExceptionHandler(new ImagePresenter.ExceptionHandler<ModelType>() {
                    @Override
                    public void onException(Exception e, ModelType model, boolean isCurrent) {
                        if (isCurrent) {
                            requestListener.onException(e, model, target);
                        }
                    }
                });
            }

            return builder.build();
        }

        private TransformationLoader<ModelType> getFinalTransformationLoader() {
            switch (transformationLoaders.size()) {
                case 0:
                    return new None<ModelType>();
                case 1:
                    return transformationLoaders.get(0);
                default:
                    return new MultiTransformationLoader<ModelType>(transformationLoaders);
            }
        }

        private String getFinalTransformationId() {
            switch (transformationLoaders.size()) {
                case 0:
                    return Transformation.NONE.getId();
                case 1:
                    return transformationLoaders.get(0).getId();
                default:
                    StringBuilder sb = new StringBuilder();
                    for (TransformationLoader transformationLoader : transformationLoaders) {
                        sb.append(transformationLoader.getId());
                    }
                    return sb.toString();
            }
        }
    }",False,False,"/** 
 * A generic class that can handle loading a bitmap either from an image or as a thumbnail from a video given models loaders to translate a model into generic resources for either an image or a video and decoders that can decode those resources into bitmaps.
 * @param < ModelType > The type of model representing the image or video.
 * @param < ImageResourceType > The resource type that the image {@link ModelLoader} will provide that can be decodedby the image  {@link BitmapDecoder}.
 * @param < VideoResourceType > The resource type that the video {@link ModelLoader} will provide that can be decodedby the video  {@link BitmapDecoder}.
 */
",False,"/** 
 * A generic class that can handle loading a bitmap either from an image or as a thumbnail from a video given models loaders to translate a model into generic resources for either an image or a video and decoders that can decode those resources into bitmaps.
 * @param < ModelType > The type of model representing the image or video.
 * @param < ImageResourceType > The resource type that the image {@link ModelLoader} will provide that can be decodedby the image  {@link BitmapDecoder}.
 * @param < VideoResourceType > The resource type that the video {@link ModelLoader} will provide that can be decodedby the video  {@link BitmapDecoder}.
 */
"
34,"modelLoaderToFactory(ModelLoader<T,Y>)",model loader to factory model loader ,Method,,,"+() +build(Context,GenericLoaderFactory)",,623,17,10,,"private static <T, Y> ModelLoaderFactory<T, Y> modelLoaderToFactory(final ModelLoader<T, Y> modelLoader) {
        return new ModelLoaderFactory<T, Y>() {
            @Override
            public ModelLoader<T, Y> build(Context context, GenericLoaderFactory factories) {
                return modelLoader;
            }

            @SuppressWarnings(""unchecked"")
            @Override
            public Class<? extends ModelLoader<T, Y>> loaderClass() {
                return (Class<ModelLoader<T, Y>>) modelLoader.getClass();
            }

            @Override
            public void teardown() { }
        };
    }",False,False,This method converts a ModelLoader into a ModelLoaderFactory by implementing the necessary methods of the ModelLoaderFactory interface.,False,"The code defines a method called `modelLoaderToFactory` that takes a `ModelLoader` as input and returns a `ModelLoaderFactory`. The returned factory's `build` method simply returns the input `modelLoader`, and the `loaderClass` method returns the class of the input `modelLoader`. The `teardown` method does nothing."
35,Metadata,metadata ,MemberClass,,,com.bumptech.glide.Glide.Metadata+Metadata(GenericRequest) java.lang.Object+getClass() java.lang.Object+getClass() com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory+loaderClass() com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory+loaderClass() com.bumptech.glide.resize.load.BitmapDecoder+getId() com.bumptech.glide.resize.load.BitmapDecoder+getId() com.bumptech.glide.Glide.GenericRequest+getFinalTransformationId() com.bumptech.glide.Glide.GenericRequest+getFinalTransformationId() java.lang.Object+getClass() java.lang.Object+getClass() com.bumptech.glide.Glide.Metadata+isIdenticalTo(Metadata) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.Object+equals(Object) java.lang.Object+equals(Object),com.bumptech.glide.Glide.Metadata+modelClass com.bumptech.glide.Glide.Metadata+modelLoaderClass com.bumptech.glide.Glide.Metadata+animationId com.bumptech.glide.Glide.Metadata+placeholderId com.bumptech.glide.Glide.Metadata+errorId com.bumptech.glide.Glide.Metadata+transformationId com.bumptech.glide.Glide.Metadata+requestListenerClass com.bumptech.glide.Glide.Metadata+decoderId com.bumptech.glide.Glide.Metadata+modelClass com.bumptech.glide.Glide.GenericRequest+model com.bumptech.glide.Glide.Metadata+modelLoaderClass com.bumptech.glide.Glide.GenericRequest+imageModelLoaderFactory com.bumptech.glide.Glide.Metadata+decoderId com.bumptech.glide.Glide.GenericRequest+imageDecoder com.bumptech.glide.Glide.Metadata+transformationId com.bumptech.glide.Glide.Metadata+animationId com.bumptech.glide.Glide.GenericRequest+animationId com.bumptech.glide.Glide.Metadata+placeholderId com.bumptech.glide.Glide.GenericRequest+placeholderId com.bumptech.glide.Glide.Metadata+errorId com.bumptech.glide.Glide.GenericRequest+errorId com.bumptech.glide.Glide.Metadata+requestListenerClass com.bumptech.glide.Glide.GenericRequest+requestListener com.bumptech.glide.Glide.GenericRequest+requestListener com.bumptech.glide.Glide.Metadata+animationId com.bumptech.glide.Glide.Metadata+animationId com.bumptech.glide.Glide.Metadata+errorId com.bumptech.glide.Glide.Metadata+errorId com.bumptech.glide.Glide.Metadata+placeholderId com.bumptech.glide.Glide.Metadata+placeholderId com.bumptech.glide.Glide.Metadata+decoderId com.bumptech.glide.Glide.Metadata+decoderId com.bumptech.glide.Glide.Metadata+modelClass com.bumptech.glide.Glide.Metadata+modelClass com.bumptech.glide.Glide.Metadata+modelLoaderClass com.bumptech.glide.Glide.Metadata+modelLoaderClass com.bumptech.glide.Glide.Metadata+transformationId com.bumptech.glide.Glide.Metadata+transformationId com.bumptech.glide.Glide.Metadata+requestListenerClass com.bumptech.glide.Glide.Metadata+requestListenerClass com.bumptech.glide.Glide.Metadata+requestListenerClass com.bumptech.glide.Glide.Metadata+requestListenerClass,1915,41,10,,"private static class Metadata {
        public final Class modelClass;
        public final Class modelLoaderClass;
        public final int animationId;
        public final int placeholderId;
        public final int errorId;

        private final String transformationId;
        private final Class requestListenerClass;
        private final String decoderId;

        public Metadata(GenericRequest request) {
            modelClass = request.model.getClass();
            modelLoaderClass = request.imageModelLoaderFactory
                    .loaderClass();
            decoderId = request.imageDecoder
                    .getId();
            transformationId = request.getFinalTransformationId();
            animationId = request.animationId;
            placeholderId = request.placeholderId;
            errorId = request.errorId;
            requestListenerClass = (request.requestListener != null ?
                    request.requestListener.getClass() : null);
        }

        //we don't want to change behavior in sets/maps, just be able to compare properties
        public boolean isIdenticalTo(Metadata metadata) {
            if (metadata == null) return false;
            if (animationId != metadata.animationId) return false;
            if (errorId != metadata.errorId) return false;
            if (placeholderId != metadata.placeholderId) return false;
            if (!decoderId.equals(metadata.decoderId)) return false;
            if (!modelClass.equals(metadata.modelClass)) return false;
            if (!modelLoaderClass.equals(metadata.modelLoaderClass)) return false;
            if (!transformationId.equals(metadata.transformationId)) return false;
            if (requestListenerClass == null ? metadata.requestListenerClass != null :
                    !requestListenerClass.equals(metadata.requestListenerClass)) return false;

            return true;
        }
    }",False,False,,False,
