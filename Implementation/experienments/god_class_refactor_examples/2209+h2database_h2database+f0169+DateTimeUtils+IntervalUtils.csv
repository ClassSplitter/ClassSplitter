index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,code summary
1,MILLIS_PER_DAY,millis per day the number of milliseconds per day ,Field,,,,,122,4,25,"/** 
 * The number of milliseconds per day.
 */
","/**
     * The number of milliseconds per day.
     */
    public static final long MILLIS_PER_DAY = 24 * 60 * 60 * 1000L;",False,False,"/** 
 * The number of milliseconds per day.
 */
","/** 
 * The number of milliseconds per day.
 */
"
2,SECONDS_PER_DAY,seconds per day the number of seconds per day ,Field,,,,,110,4,25,"/** 
 * The number of seconds per day.
 */
","/**
     * The number of seconds per day.
     */
    public static final long SECONDS_PER_DAY = 24 * 60 * 60;",False,False,"/** 
 * The number of seconds per day.
 */
","/** 
 * The number of seconds per day.
 */
"
3,UTC,utc utc time zone ,Field,,,,,101,4,25,"/** 
 * UTC time zone.
 */
","/**
     * UTC time zone.
     */
    public static final TimeZone UTC = TimeZone.getTimeZone(""UTC"");",False,False,"/** 
 * UTC time zone.
 */
","/** 
 * UTC time zone.
 */
"
4,NANOS_PER_SECOND,nanos per second the number of nanoseconds per second ,Field,,,,,121,4,25,"/** 
 * The number of nanoseconds per second.
 */
","/**
     * The number of nanoseconds per second.
     */
    public static final long NANOS_PER_SECOND = 1_000_000_000;

",False,False,"/** 
 * The number of nanoseconds per second.
 */
","/** 
 * The number of nanoseconds per second.
 */
"
5,NANOS_PER_MINUTE,nanos per minute the number of nanoseconds per minute ,Field,,,,,127,4,25,"/** 
 * The number of nanoseconds per minute.
 */
","/**
     * The number of nanoseconds per minute.
     */
    public static final long NANOS_PER_MINUTE = 60 * NANOS_PER_SECOND;",False,False,"/** 
 * The number of nanoseconds per minute.
 */
","/** 
 * The number of nanoseconds per minute.
 */
"
6,NANOS_PER_HOUR,nanos per hour the number of nanoseconds per hour ,Field,,,,,123,4,25,"/** 
 * The number of nanoseconds per hour.
 */
","/**
     * The number of nanoseconds per hour.
     */
    public static final long NANOS_PER_HOUR = 60 * NANOS_PER_MINUTE;",False,False,"/** 
 * The number of nanoseconds per hour.
 */
","/** 
 * The number of nanoseconds per hour.
 */
"
7,NANOS_PER_DAY,nanos per day the number of nanoseconds per day ,Field,,,,,128,4,25,"/** 
 * The number of nanoseconds per day.
 */
","/**
     * The number of nanoseconds per day.
     */
    public static final long NANOS_PER_DAY = MILLIS_PER_DAY * 1_000_000;

",False,False,"/** 
 * The number of nanoseconds per day.
 */
","/** 
 * The number of nanoseconds per day.
 */
"
8,SHIFT_YEAR,shift year ,Field,,,,,40,1,26,,private static final int SHIFT_YEAR = 9;,False,False,,
9,SHIFT_MONTH,shift month ,Field,,,,,41,1,26,,private static final int SHIFT_MONTH = 5;,False,False,,
10,EPOCH_DATE_VALUE,epoch date value date value for 1970 01 01 ,Field,,,,,139,4,25,"/** 
 * Date value for 1970-01-01.
 */
","/**
     * Date value for 1970-01-01.
     */
    public static final int EPOCH_DATE_VALUE = (1970 << SHIFT_YEAR) + (1 << SHIFT_MONTH) + 1;",False,False,"/** 
 * Date value for 1970-01-01.
 */
","/** 
 * Date value for 1970-01-01.
 */
"
11,NORMAL_DAYS_PER_MONTH,normal days per month ,Field,,,,,117,2,26,,"private static final int[] NORMAL_DAYS_PER_MONTH = { 0, 31, 28, 31, 30, 31,
            30, 31, 31, 30, 31, 30, 31 };",False,False,,
12,DAYS_OFFSET,days offset offsets of month within a year starting with march april ,Field,,,,,202,5,26,"/** 
 * Offsets of month within a year, starting with March, April,...
 */
","/**
     * Offsets of month within a year, starting with March, April,...
     */
    private static final int[] DAYS_OFFSET = { 0, 31, 61, 92, 122, 153, 184,
            214, 245, 275, 306, 337, 366 };",False,False,"/** 
 * Offsets of month within a year, starting with March, April,...
 */
","/** 
 * Offsets of month within a year, starting with March, April,...
 */
"
13,CONVERT_SCALE_TABLE,convert scale table multipliers for link convert scale long int ,Field,,,,,223,5,26,"/** 
 * Multipliers for  {@link #convertScale(long,int)}.
 */
","/**
     * Multipliers for {@link #convertScale(long, int)}.
     */
    private static final int[] CONVERT_SCALE_TABLE = { 1_000_000_000, 100_000_000,
            10_000_000, 1_000_000, 100_000, 10_000, 1_000, 100, 10 };

",False,False,"/** 
 * Multipliers for  {@link #convertScale(long,int)}.
 */
","/** 
 * Multipliers for  {@link #convertScale(long,int)}.
 */
"
14,CACHED_CALENDAR,cached calendar the thread local can not override initial value because this would result in an inner class which would not be garbage collected in a web container and prevent the class loader of h2 from being garbage collected using a thread local on a system class like calendar does not have that problem and while it is still a small memory leak it is not a class loader memory leak ,Field,,,,,524,9,26,"/** 
 * The thread local. Can not override initialValue because this would result in an inner class, which would not be garbage collected in a web container, and prevent the class loader of H2 from being garbage collected. Using a ThreadLocal on a system class like Calendar does not have that problem, and while it is still a small memory leak, it is not a class loader memory leak.
 */
","/**
     * The thread local. Can not override initialValue because this would result
     * in an inner class, which would not be garbage collected in a web
     * container, and prevent the class loader of H2 from being garbage
     * collected. Using a ThreadLocal on a system class like Calendar does not
     * have that problem, and while it is still a small memory leak, it is not a
     * class loader memory leak.
     */
    private static final ThreadLocal<GregorianCalendar> CACHED_CALENDAR = new ThreadLocal<>();",False,False,"/** 
 * The thread local. Can not override initialValue because this would result in an inner class, which would not be garbage collected in a web container, and prevent the class loader of H2 from being garbage collected. Using a ThreadLocal on a system class like Calendar does not have that problem, and while it is still a small memory leak, it is not a class loader memory leak.
 */
","/** 
 * The thread local. Can not override initialValue because this would result in an inner class, which would not be garbage collected in a web container, and prevent the class loader of H2 from being garbage collected. Using a ThreadLocal on a system class like Calendar does not have that problem, and while it is still a small memory leak, it is not a class loader memory leak.
 */
"
15,CACHED_CALENDAR_NON_DEFAULT_TIMEZONE,cached calendar non default timezone a cached instance of calendar used when a timezone is specified ,Field,,,,,211,5,26,"/** 
 * A cached instance of Calendar used when a timezone is specified.
 */
","/**
     * A cached instance of Calendar used when a timezone is specified.
     */
    private static final ThreadLocal<GregorianCalendar> CACHED_CALENDAR_NON_DEFAULT_TIMEZONE =
            new ThreadLocal<>();",False,False,"/** 
 * A cached instance of Calendar used when a timezone is specified.
 */
","/** 
 * A cached instance of Calendar used when a timezone is specified.
 */
"
16,timeZone,time zone cached local time zone ,Field,,,,,89,4,74,"/** 
 * Cached local time zone.
 */
","/**
     * Cached local time zone.
     */
    private static volatile TimeZone timeZone;",False,False,"/** 
 * Cached local time zone.
 */
","/** 
 * Cached local time zone.
 */
"
17,zoneOffsetMillis,zone offset millis observed jvm behaviour is that if the timezone of the host computer is changed while the jvm is running the zone offset does not change but keeps the initial value so it is correct to measure this once and use this value throughout the jvm s lifecycle in any case it is safer to use a fixed value throughout the duration of the jvm s life rather than have this offset change possibly midway through a long running query ,Field,,,,,575,9,10,"/** 
 * Observed JVM behaviour is that if the timezone of the host computer is changed while the JVM is running, the zone offset does not change but keeps the initial value. So it is correct to measure this once and use this value throughout the JVM's lifecycle. In any case, it is safer to use a fixed value throughout the duration of the JVM's life, rather than have this offset change, possibly midway through a long-running query.
 */
","/**
     * Observed JVM behaviour is that if the timezone of the host computer is
     * changed while the JVM is running, the zone offset does not change but
     * keeps the initial value. So it is correct to measure this once and use
     * this value throughout the JVM's lifecycle. In any case, it is safer to
     * use a fixed value throughout the duration of the JVM's life, rather than
     * have this offset change, possibly midway through a long-running query.
     */
    private static int zoneOffsetMillis = createGregorianCalendar().get(Calendar.ZONE_OFFSET);",False,False,"/** 
 * Observed JVM behaviour is that if the timezone of the host computer is changed while the JVM is running, the zone offset does not change but keeps the initial value. So it is correct to measure this once and use this value throughout the JVM's lifecycle. In any case, it is safer to use a fixed value throughout the duration of the JVM's life, rather than have this offset change, possibly midway through a long-running query.
 */
","/** 
 * Observed JVM behaviour is that if the timezone of the host computer is changed while the JVM is running, the zone offset does not change but keeps the initial value. So it is correct to measure this once and use this value throughout the JVM's lifecycle. In any case, it is safer to use a fixed value throughout the duration of the JVM's life, rather than have this offset change, possibly midway through a long-running query.
 */
"
18,DateTimeUtils(),date time utils ,Method,,,,,56,3,2,,"private DateTimeUtils() {
        // utility class
    }",False,False,"This method serves as a private constructor for the DateTimeUtils class, indicating that the class is a utility class and cannot be instantiated.","The code snippet defines a private constructor for a class named DateTimeUtils, indicating that it is a utility class. This constructor is used to prevent the instantiation of the class, as it only contains static methods and should not be instantiated."
19,getTimeZone(),get time zone returns local time zone return local time zone ,Method,dateValueFromDate(long),,java.util.TimeZone+getDefault() java.util.TimeZone+getDefault(),org.h2.util.DateTimeUtils+timeZone org.h2.util.DateTimeUtils+timeZone,261,12,8,"/** 
 * Returns local time zone.
 * @return local time zone
 */
","/**
     * Returns local time zone.
     *
     * @return local time zone
     */
    static TimeZone getTimeZone() {
        TimeZone tz = timeZone;
        if (tz == null) {
            timeZone = tz = TimeZone.getDefault();
        }
        return tz;
    }",False,False,"This method returns the local time zone. It first checks if the time zone has already been set, and if not, it sets it to the default time zone and returns it.","This code defines a static method called `getTimeZone()` that returns the local time zone. It first checks if the time zone has already been assigned and if not, it assigns the default time zone and returns it."
20,resetCalendar(),reset calendar reset the cached calendar for default timezone for example after changing the default timezone ,Method,,org.h2.test.db.TestDateStorage+testDateTimeTimestampWithCalendar() org.h2.test.db.TestDateStorage+testDateTimeTimestampWithCalendar() org.h2.test.db.TestDateStorage+testAllTimeZones() org.h2.test.db.TestDateStorage+testAllTimeZones() org.h2.test.unit.TestDateTimeUtils+testUTC2Value(boolean) org.h2.test.unit.TestDateTimeUtils+testUTC2Value(boolean) org.h2.test.unit.TestTimeStampWithTimeZone+testConversions() org.h2.test.unit.TestTimeStampWithTimeZone+testConversions(),java.lang.ThreadLocal+remove() java.lang.ThreadLocal+remove() java.util.Calendar+get(int) org.h2.util.DateTimeUtils+createGregorianCalendar() org.h2.util.DateTimeUtils+createGregorianCalendar() java.util.Calendar+get(int),org.h2.util.DateTimeUtils+CACHED_CALENDAR org.h2.util.DateTimeUtils+timeZone org.h2.util.DateTimeUtils+zoneOffsetMillis java.util.Calendar+ZONE_OFFSET,308,9,9,"/** 
 * Reset the cached calendar for default timezone, for example after changing the default timezone.
 */
","/**
     * Reset the cached calendar for default timezone, for example after
     * changing the default timezone.
     */
    public static void resetCalendar() {
        CACHED_CALENDAR.remove();
        timeZone = null;
        zoneOffsetMillis = createGregorianCalendar().get(Calendar.ZONE_OFFSET);
    }",False,False,"This method resets the cached calendar for the default timezone. It removes the cached calendar, resets the timezone to null, and updates the zone offset in milliseconds.","The code defines a method called ""resetCalendar"" that clears the cached calendar for the default timezone. It also resets the timezone and calculates the zone offset in milliseconds using the Gregorian calendar. This method is typically used after changing the default timezone."
21,getCalendar(),get calendar get a calendar for the default timezone return a calendar instance a cached instance is returned where possible ,Method,"getMillis(TimeZone,int,int,int,int,int,int,int)",org.h2.util.ToDateParser+queryCurrentYearAndMonth(),java.lang.ThreadLocal+get() java.lang.ThreadLocal+get() org.h2.util.DateTimeUtils+createGregorianCalendar() org.h2.util.DateTimeUtils+createGregorianCalendar() java.lang.ThreadLocal+set(T) java.lang.ThreadLocal+set(T) java.util.Calendar+clear() java.util.Calendar+clear(),org.h2.util.DateTimeUtils+CACHED_CALENDAR org.h2.util.DateTimeUtils+CACHED_CALENDAR,409,14,9,"/** 
 * Get a calendar for the default timezone.
 * @return a calendar instance. A cached instance is returned where possible
 */
","/**
     * Get a calendar for the default timezone.
     *
     * @return a calendar instance. A cached instance is returned where possible
     */
    public static GregorianCalendar getCalendar() {
        GregorianCalendar c = CACHED_CALENDAR.get();
        if (c == null) {
            c = createGregorianCalendar();
            CACHED_CALENDAR.set(c);
        }
        c.clear();
        return c;
    }",False,False,"This method serves to return a GregorianCalendar instance for the default timezone. It first checks if there is a cached instance, and if not, it creates a new instance and caches it. It then clears the calendar and returns it.","This code defines a method called ""getCalendar"" that returns a GregorianCalendar instance for the default timezone. It first checks if a cached instance exists, and if not, creates a new one and caches it. The returned calendar is cleared before being returned."
22,getCalendar(TimeZone),get calendar tz get a calendar for the given timezone param tz timezone for the calendar is never null return a calendar instance a cached instance is returned where possible ,Method,"getMillis(TimeZone,int,int,int,int,int,int,int)",,java.lang.ThreadLocal+get() java.lang.ThreadLocal+get() java.lang.Object+equals(Object) java.util.GregorianCalendar+getTimeZone() java.util.GregorianCalendar+getTimeZone() java.lang.Object+equals(Object) org.h2.util.DateTimeUtils+createGregorianCalendar(TimeZone) org.h2.util.DateTimeUtils+createGregorianCalendar(TimeZone) java.lang.ThreadLocal+set(T) java.lang.ThreadLocal+set(T) java.util.Calendar+clear() java.util.Calendar+clear(),org.h2.util.DateTimeUtils+CACHED_CALENDAR_NON_DEFAULT_TIMEZONE org.h2.util.DateTimeUtils+CACHED_CALENDAR_NON_DEFAULT_TIMEZONE,552,15,10,"/** 
 * Get a calendar for the given timezone.
 * @param tz timezone for the calendar, is never null
 * @return a calendar instance. A cached instance is returned where possible
 */
","/**
     * Get a calendar for the given timezone.
     *
     * @param tz timezone for the calendar, is never null
     * @return a calendar instance. A cached instance is returned where possible
     */
    private static GregorianCalendar getCalendar(TimeZone tz) {
        GregorianCalendar c = CACHED_CALENDAR_NON_DEFAULT_TIMEZONE.get();
        if (c == null || !c.getTimeZone().equals(tz)) {
            c = createGregorianCalendar(tz);
            CACHED_CALENDAR_NON_DEFAULT_TIMEZONE.set(c);
        }
        c.clear();
        return c;
    }",False,False,"This method returns a GregorianCalendar instance for the given timezone. It first checks if a cached instance exists and if it has the same timezone. If not, it creates a new instance and caches it. Finally, it clears the calendar and returns it.","This code defines a private static method called ""getCalendar"" that returns a GregorianCalendar instance for a given timezone. It first checks if a cached instance exists and if it matches the given timezone, otherwise it creates a new instance and caches it. The returned calendar is cleared before being returned."
23,createGregorianCalendar(),create gregorian calendar creates a gregorian calendar for the default timezone using the default locale dates in h2 are represented in a gregorian calendar so this method should be used instead of calendar get instance to ensure that the gregorian calendar is used for all date processing instead of a default locale calendar that can be non gregorian in some locales return a new calendar instance ,Method,resetCalendar() getCalendar(),"org.h2.jdbc.JdbcResultSet+extractObjectOfType(Class<T>,Value) org.h2.test.db.TestFunctions+testTruncate() org.h2.test.jdbc.TestResultSet+testDatetimeWithCalendar() org.h2.test.synth.TestCrashAPI+getRandomParam(Class<?>) org.h2.test.unit.TestDate+testDateTimeUtils() org.h2.test.unit.TestDate+testDateTimeUtils()",java.util.GregorianCalendar+GregorianCalendar(),,550,12,9,"/** 
 * Creates a Gregorian calendar for the default timezone using the default locale. Dates in H2 are represented in a Gregorian calendar. So this method should be used instead of Calendar.getInstance() to ensure that the Gregorian calendar is used for all date processing instead of a default locale calendar that can be non-Gregorian in some locales.
 * @return a new calendar instance.
 */
","/**
     * Creates a Gregorian calendar for the default timezone using the default
     * locale. Dates in H2 are represented in a Gregorian calendar. So this
     * method should be used instead of Calendar.getInstance() to ensure that
     * the Gregorian calendar is used for all date processing instead of a
     * default locale calendar that can be non-Gregorian in some locales.
     *
     * @return a new calendar instance.
     */
    public static GregorianCalendar createGregorianCalendar() {
        return new GregorianCalendar();
    }",False,False,"This method creates a new instance of the GregorianCalendar class, which represents dates in the Gregorian calendar. It should be used instead of Calendar.getInstance() to ensure consistent date processing across different locales.","This code defines a method called ""createGregorianCalendar"" that returns a new instance of the GregorianCalendar class. It is recommended to use this method instead of Calendar.getInstance() to ensure that the Gregorian calendar is used for all date processing, regardless of the default locale."
24,createGregorianCalendar(TimeZone),create gregorian calendar tz creates a gregorian calendar for the given timezone using the default locale dates in h2 are represented in a gregorian calendar so this method should be used instead of calendar get instance to ensure that the gregorian calendar is used for all date processing instead of a default locale calendar that can be non gregorian in some locales param tz timezone for the calendar is never null return a new calendar instance ,Method,getCalendar(TimeZone),org.h2.test.jdbc.TestResultSet+testDatetimeWithCalendar() org.h2.test.unit.TestDate+testValidDate(),java.util.GregorianCalendar+GregorianCalendar(TimeZone),,619,13,9,"/** 
 * Creates a Gregorian calendar for the given timezone using the default locale. Dates in H2 are represented in a Gregorian calendar. So this method should be used instead of Calendar.getInstance() to ensure that the Gregorian calendar is used for all date processing instead of a default locale calendar that can be non-Gregorian in some locales.
 * @param tz timezone for the calendar, is never null
 * @return a new calendar instance.
 */
","/**
     * Creates a Gregorian calendar for the given timezone using the default
     * locale. Dates in H2 are represented in a Gregorian calendar. So this
     * method should be used instead of Calendar.getInstance() to ensure that
     * the Gregorian calendar is used for all date processing instead of a
     * default locale calendar that can be non-Gregorian in some locales.
     *
     * @param tz timezone for the calendar, is never null
     * @return a new calendar instance.
     */
    public static GregorianCalendar createGregorianCalendar(TimeZone tz) {
        return new GregorianCalendar(tz);
    }",False,False,"This method creates a new instance of a Gregorian calendar for a given timezone, ensuring that the Gregorian calendar is used for all date processing instead of a default locale calendar.","This code defines a method called ""createGregorianCalendar"" that takes a timezone as input and returns a new instance of GregorianCalendar. It is used to ensure that all date processing in H2 is done using a Gregorian calendar instead of a default locale calendar."
25,"convertDate(Value,Calendar)",convert date value calendar convert the date to the specified time zone param value the date might be value null param calendar the calendar return the date using the correct time zone ,Method,,"org.h2.jdbc.JdbcResultSet+getDate(int,Calendar) org.h2.jdbc.JdbcResultSet+getDate(String,Calendar)","org.h2.value.Value+convertTo(int) org.h2.value.Value+convertTo(int) java.util.Calendar+clone() java.util.Calendar+clone() java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+setLenient(boolean) java.util.Calendar+setLenient(boolean) org.h2.value.ValueDate+getDateValue() org.h2.value.ValueDate+getDateValue() org.h2.util.DateTimeUtils+convertToMillis(Calendar,int,int,int,int,int,int,int) org.h2.util.DateTimeUtils+convertToMillis(Calendar,int,int,int,int,int,int,int) org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long) java.sql.Date+Date(long)",org.h2.value.ValueNull+INSTANCE org.h2.value.Value+DATE,773,21,9,"/** 
 * Convert the date to the specified time zone.
 * @param value the date (might be ValueNull)
 * @param calendar the calendar
 * @return the date using the correct time zone
 */
","/**
     * Convert the date to the specified time zone.
     *
     * @param value the date (might be ValueNull)
     * @param calendar the calendar
     * @return the date using the correct time zone
     */
    public static Date convertDate(Value value, Calendar calendar) {
        if (value == ValueNull.INSTANCE) {
            return null;
        }
        ValueDate d = (ValueDate) value.convertTo(Value.DATE);
        Calendar cal = (Calendar) calendar.clone();
        cal.clear();
        cal.setLenient(true);
        long dateValue = d.getDateValue();
        long ms = convertToMillis(cal, yearFromDateValue(dateValue),
                monthFromDateValue(dateValue), dayFromDateValue(dateValue), 0,
                0, 0, 0);
        return new Date(ms);
    }",False,False,"This method converts a date to a specified time zone. It takes a date value and a calendar as input, and returns the date in the correct time zone. If the input date is null, it returns null.","This code defines a method called `convertDate` that takes a `Value` object and a `Calendar` object as parameters. It converts the date value to the specified time zone by extracting the year, month, and day from the `Value` object and creating a new `Date` object with the converted time zone. If the `Value` object is null, it returns null."
26,"convertTime(Value,Calendar)",convert time value calendar convert the time to the specified time zone param value the time might be value null param calendar the calendar return the time using the correct time zone ,Method,,"org.h2.jdbc.JdbcResultSet+getTime(int,Calendar) org.h2.jdbc.JdbcResultSet+getTime(String,Calendar)",,,894,26,9,"/** 
 * Convert the time to the specified time zone.
 * @param value the time (might be ValueNull)
 * @param calendar the calendar
 * @return the time using the correct time zone
 */
","/**
     * Convert the time to the specified time zone.
     *
     * @param value the time (might be ValueNull)
     * @param calendar the calendar
     * @return the time using the correct time zone
     */
    public static Time convertTime(Value value, Calendar calendar) {
        if (value == ValueNull.INSTANCE) {
            return null;
        }
        ValueTime t = (ValueTime) value.convertTo(Value.TIME);
        Calendar cal = (Calendar) calendar.clone();
        cal.clear();
        cal.setLenient(true);
        long nanos = t.getNanos();
        long millis = nanos / 1_000_000;
        nanos -= millis * 1_000_000;
        long s = millis / 1_000;
        millis -= s * 1_000;
        long m = s / 60;
        s -= m * 60;
        long h = m / 60;
        m -= h * 60;
        return new Time(convertToMillis(cal, 1970, 1, 1, (int) h, (int) m, (int) s, (int) millis));
    }",False,False,"The function converts a given time value to the specified time zone by performing calculations to extract the hours, minutes, seconds, and milliseconds from the time value, and then converting it to milliseconds since January 1, 1970.","This code defines a method called `convertTime` that takes a `Value` object and a `Calendar` object as parameters. It converts the time value to the specified time zone by extracting the hours, minutes, seconds, and milliseconds from the `Value` object and using them to create a new `Time` object."
27,"convertTimestamp(Value,Calendar)",convert timestamp value calendar convert the timestamp to the specified time zone param value the timestamp might be value null param calendar the calendar return the timestamp using the correct time zone ,Method,,"org.h2.jdbc.JdbcResultSet+getTimestamp(int,Calendar) org.h2.jdbc.JdbcResultSet+getTimestamp(String,Calendar)",,,1202,32,9,"/** 
 * Convert the timestamp to the specified time zone.
 * @param value the timestamp (might be ValueNull)
 * @param calendar the calendar
 * @return the timestamp using the correct time zone
 */
","/**
     * Convert the timestamp to the specified time zone.
     *
     * @param value the timestamp (might be ValueNull)
     * @param calendar the calendar
     * @return the timestamp using the correct time zone
     */
    public static Timestamp convertTimestamp(Value value, Calendar calendar) {
        if (value == ValueNull.INSTANCE) {
            return null;
        }
        ValueTimestamp ts = (ValueTimestamp) value.convertTo(Value.TIMESTAMP);
        Calendar cal = (Calendar) calendar.clone();
        cal.clear();
        cal.setLenient(true);
        long dateValue = ts.getDateValue();
        long nanos = ts.getTimeNanos();
        long millis = nanos / 1_000_000;
        nanos -= millis * 1_000_000;
        long s = millis / 1_000;
        millis -= s * 1_000;
        long m = s / 60;
        s -= m * 60;
        long h = m / 60;
        m -= h * 60;
        long ms = convertToMillis(cal, yearFromDateValue(dateValue),
                monthFromDateValue(dateValue), dayFromDateValue(dateValue),
                (int) h, (int) m, (int) s, (int) millis);
        Timestamp x = new Timestamp(ms);
        x.setNanos((int) (nanos + millis * 1_000_000));
        return x;
    }",False,False,"This method converts a timestamp to a specified time zone. It takes a timestamp value and a calendar as input, and returns the converted timestamp using the correct time zone.","This code defines a method called `convertTimestamp` that takes a timestamp value and a calendar as input and returns a converted timestamp using the specified time zone. It first checks if the input value is null and returns null if so. Then, it performs various calculations to extract the date, time, and milliseconds from the timestamp value and converts them to the specified time zone using the provided calendar. Finally, it creates a new Timestamp object with the converted values and returns it."
28,"convertDate(Date,Calendar)",convert date x calendar convert a java util date using the specified calendar param x the date param calendar the calendar return the date ,Method,,"org.h2.jdbc.JdbcPreparedStatement+setDate(int,java.sql.Date,Calendar)",java.util.Calendar+clone() java.util.Calendar+clone() java.util.Calendar+setTimeInMillis(long) java.util.Calendar+setTimeInMillis(long) java.util.Date+getTime() java.util.Date+getTime() org.h2.util.DateTimeUtils+dateValueFromCalendar(Calendar) org.h2.util.DateTimeUtils+dateValueFromCalendar(Calendar) org.h2.value.ValueDate+fromDateValue(long) org.h2.value.ValueDate+fromDateValue(long),,438,13,9,"/** 
 * Convert a java.util.Date using the specified calendar.
 * @param x the date
 * @param calendar the calendar
 * @return the date
 */
","/**
     * Convert a java.util.Date using the specified calendar.
     *
     * @param x the date
     * @param calendar the calendar
     * @return the date
     */
    public static ValueDate convertDate(Date x, Calendar calendar) {
        Calendar cal = (Calendar) calendar.clone();
        cal.setTimeInMillis(x.getTime());
        long dateValue = dateValueFromCalendar(cal);
        return ValueDate.fromDateValue(dateValue);
    }",False,False,This method converts a java.util.Date object to a ValueDate object using the specified calendar.,This code defines a method called `convertDate` that takes a `java.util.Date` and a `Calendar` as input parameters. It converts the given date to a `ValueDate` object by setting the time in the calendar and then extracting the date value from the calendar. The resulting `ValueDate` object is returned as the output.
29,"convertTime(Time,Calendar)",convert time x calendar convert the time using the specified calendar param x the time param calendar the calendar return the time ,Method,,"org.h2.jdbc.JdbcPreparedStatement+setTime(int,java.sql.Time,Calendar)",java.util.Calendar+clone() java.util.Calendar+clone() java.util.Calendar+setTimeInMillis(long) java.util.Calendar+setTimeInMillis(long) java.util.Date+getTime() java.util.Date+getTime() org.h2.util.DateTimeUtils+nanosFromCalendar(Calendar) org.h2.util.DateTimeUtils+nanosFromCalendar(Calendar) org.h2.value.ValueTime+fromNanos(long) org.h2.value.ValueTime+fromNanos(long),,414,13,9,"/** 
 * Convert the time using the specified calendar.
 * @param x the time
 * @param calendar the calendar
 * @return the time
 */
","/**
     * Convert the time using the specified calendar.
     *
     * @param x the time
     * @param calendar the calendar
     * @return the time
     */
    public static ValueTime convertTime(Time x, Calendar calendar) {
        Calendar cal = (Calendar) calendar.clone();
        cal.setTimeInMillis(x.getTime());
        long nanos = nanosFromCalendar(cal);
        return ValueTime.fromNanos(nanos);
    }",False,False,"This method converts a given time using a specified calendar. It creates a clone of the calendar, sets the time to the given time, calculates the nanoseconds from the calendar, and returns the time as a ValueTime object.",This code defines a method called `convertTime` that takes a `Time` object and a `Calendar` object as parameters. It converts the time from the `Time` object to nanoseconds using the specified `Calendar` and returns a `ValueTime` object representing the converted time.
30,"convertTimestamp(Timestamp,Calendar)",convert timestamp x calendar convert the timestamp using the specified calendar param x the time param calendar the calendar return the timestamp ,Method,,"org.h2.jdbc.JdbcPreparedStatement+setTimestamp(int,java.sql.Timestamp,Calendar) org.h2.test.unit.TestDate+testDateTimeUtils() org.h2.test.unit.TestDate+testDateTimeUtils() org.h2.test.unit.TestDateTimeUtils+testUTC2ValueImpl(TimeZone,GregorianCalendar)",,,575,16,9,"/** 
 * Convert the timestamp using the specified calendar.
 * @param x the time
 * @param calendar the calendar
 * @return the timestamp
 */
","/**
     * Convert the timestamp using the specified calendar.
     *
     * @param x the time
     * @param calendar the calendar
     * @return the timestamp
     */
    public static ValueTimestamp convertTimestamp(Timestamp x,
            Calendar calendar) {
        Calendar cal = (Calendar) calendar.clone();
        cal.setTimeInMillis(x.getTime());
        long dateValue = dateValueFromCalendar(cal);
        long nanos = nanosFromCalendar(cal);
        nanos += x.getNanos() % 1_000_000;
        return ValueTimestamp.fromDateValueAndNanos(dateValue, nanos);
    }",False,False,"This method converts a given timestamp to a new timestamp using a specified calendar. It takes a Timestamp object and a Calendar object as parameters, and returns a ValueTimestamp object.","This code defines a method called `convertTimestamp` that takes a `Timestamp` object and a `Calendar` object as parameters. It converts the given timestamp to a date value and nanoseconds using the specified calendar, and returns a `ValueTimestamp` object with the converted values."
31,"parseDateValue(String,int,int)",parse date value s start end parse a date string the format is year month day or yyyy m mdd param s the string to parse param start the parse index start param end the parse index end return the date value throws illegal argument exception if there is a problem ,Method,,org.h2.value.ValueDate+parse(String),"java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String) java.lang.String+substring(int,int) java.lang.String+substring(int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.DateTimeUtils+isValidDate(int,int,int) org.h2.util.DateTimeUtils+isValidDate(int,int,int) java.lang.IllegalArgumentException+IllegalArgumentException(String) org.h2.util.DateTimeUtils+dateValue(long,int,int) org.h2.util.DateTimeUtils+dateValue(long,int,int)",,1589,43,9,"/** 
 * Parse a date string. The format is: [+|-]year-month-day or [+|-]yyyyMMdd.
 * @param s the string to parse
 * @param start the parse index start
 * @param end the parse index end
 * @return the date value
 * @throws IllegalArgumentException if there is a problem
 */
","/**
     * Parse a date string. The format is: [+|-]year-month-day
     * or [+|-]yyyyMMdd.
     *
     * @param s the string to parse
     * @param start the parse index start
     * @param end the parse index end
     * @return the date value
     * @throws IllegalArgumentException if there is a problem
     */
    public static long parseDateValue(String s, int start, int end) {
        if (s.charAt(start) == '+') {
            // +year
            start++;
        }
        // start at position 1 to support ""-year""
        int yEnd = s.indexOf('-', start + 1);
        int mStart, mEnd, dStart;
        if (yEnd > 0) {
            // Standard [+|-]year-month-day format
            mStart = yEnd + 1;
            mEnd = s.indexOf('-', mStart);
            if (mEnd <= mStart) {
                throw new IllegalArgumentException(s);
            }
            dStart = mEnd + 1;
        } else {
            // Additional [+|-]yyyyMMdd format for compatibility
            mEnd = dStart = end - 2;
            yEnd = mStart = mEnd - 2;
            // Accept only 3 or more digits in year for now
            if (yEnd < start + 3) {
                throw new IllegalArgumentException(s);
            }
        }
        int year = Integer.parseInt(s.substring(start, yEnd));
        int month = StringUtils.parseUInt31(s, mStart, mEnd);
        int day = StringUtils.parseUInt31(s, dStart, end);
        if (!isValidDate(year, month, day)) {
            throw new IllegalArgumentException(year + ""-"" + month + ""-"" + day);
        }
        return dateValue(year, month, day);
    }",False,False,"The function of the method is to parse a date string in the format of [+|-]year-month-day or [+|-]yyyyMMdd, and return the corresponding date value as a long. It throws an IllegalArgumentException if there is a problem with the input string.","The `parseDateValue` method is used to parse a date string in the format of either [+|-]year-month-day or [+|-]yyyyMMdd. It extracts the year, month, and day values from the string and checks if they form a valid date. If valid, it returns the date value as a long."
32,"parseTimeNanos(String,int,int)",parse time nanos s start end parse a time string the format is hour minute second nanos hhmm ss nanos or hour minute second nanos param s the string to parse param start the parse index start param end the parse index end return the time in nanoseconds throws illegal argument exception if there is a problem ,Method,,org.h2.value.ValueTime+parse(String) org.h2.test.unit.TestDateTimeUtils+testParseTimeNanosDB2Format() org.h2.test.unit.TestDateTimeUtils+testParseTimeNanosDB2Format() org.h2.test.unit.TestDateTimeUtils+testParseTimeNanosDB2Format() org.h2.test.unit.TestDateTimeUtils+testParseTimeNanosDB2Format(),"java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) java.lang.IllegalArgumentException+IllegalArgumentException(String) org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.DateTimeUtils+parseNanos(String,int,int) org.h2.util.DateTimeUtils+parseNanos(String,int,int) java.lang.IllegalArgumentException+IllegalArgumentException(String)",org.h2.util.DateTimeUtils+NANOS_PER_SECOND,3068,82,9,"/** 
 * Parse a time string. The format is: hour:minute[:second[.nanos]], hhmm[ss[.nanos]], or hour.minute.second[.nanos].
 * @param s the string to parse
 * @param start the parse index start
 * @param end the parse index end
 * @return the time in nanoseconds
 * @throws IllegalArgumentException if there is a problem
 */
","/**
     * Parse a time string. The format is: hour:minute[:second[.nanos]],
     * hhmm[ss[.nanos]], or hour.minute.second[.nanos].
     *
     * @param s the string to parse
     * @param start the parse index start
     * @param end the parse index end
     * @return the time in nanoseconds
     * @throws IllegalArgumentException if there is a problem
     */
    public static long parseTimeNanos(String s, int start, int end) {
        int hour, minute, second, nanos;
        int hEnd = s.indexOf(':', start);
        int mStart, mEnd, sStart, sEnd;
        if (hEnd > 0) {
            mStart = hEnd + 1;
            mEnd = s.indexOf(':', mStart);
            if (mEnd >= mStart) {
                // Standard hour:minute:second[.nanos] format
                sStart = mEnd + 1;
                sEnd = s.indexOf('.', sStart);
            } else {
                // Additional hour:minute format for compatibility
                mEnd = end;
                sStart = sEnd = -1;
            }
        } else {
            int t = s.indexOf('.', start);
            if (t < 0) {
                // Additional hhmm[ss] format for compatibility
                hEnd = mStart = start + 2;
                mEnd = mStart + 2;
                int len = end - start;
                if (len == 6) {
                    sStart = mEnd;
                    sEnd = -1;
                } else if (len == 4) {
                    sStart = sEnd = -1;
                } else {
                    throw new IllegalArgumentException(s);
                }
            } else if (t >= start + 6) {
                // Additional hhmmss.nanos format for compatibility
                if (t - start != 6) {
                    throw new IllegalArgumentException(s);
                }
                hEnd = mStart = start + 2;
                mEnd = sStart = mStart + 2;
                sEnd = t;
            } else {
                // Additional hour.minute.second[.nanos] IBM DB2 time format
                hEnd = t;
                mStart = hEnd + 1;
                mEnd = s.indexOf('.', mStart);
                if (mEnd <= mStart) {
                    throw new IllegalArgumentException(s);
                }
                sStart = mEnd + 1;
                sEnd = s.indexOf('.', sStart);
            }
        }
        hour = StringUtils.parseUInt31(s, start, hEnd);
        if (hour >= 24) {
            throw new IllegalArgumentException(s);
        }
        minute = StringUtils.parseUInt31(s, mStart, mEnd);
        if (sStart > 0) {
            if (sEnd < 0) {
                second = StringUtils.parseUInt31(s, sStart, end);
                nanos = 0;
            } else {
                second = StringUtils.parseUInt31(s, sStart, sEnd);
                nanos = parseNanos(s, sEnd + 1, end);
            }
        } else {
            second = nanos = 0;
        }
        if (minute >= 60 || second >= 60) {
            throw new IllegalArgumentException(s);
        }
        return ((((hour * 60L) + minute) * 60) + second) * NANOS_PER_SECOND + nanos;
    }",False,False,"The function of the method is to parse a time string in various formats (hour:minute[:second[.nanos]], hhmm[ss[.nanos]], or hour.minute.second[.nanos]) and return the time in nanoseconds. It throws an IllegalArgumentException if there is a problem with the input string.","The `parseTimeNanos` method is used to parse a time string in various formats (hour:minute[:second[.nanos]], hhmm[ss[.nanos]], or hour.minute.second[.nanos]) and convert it into nanoseconds. It takes a string, start index, and end index as parameters and returns the time in nanoseconds. It throws an `IllegalArgumentException` if there is a problem with the input string."
33,"parseNanos(String,int,int)",parse nanos s start end ,Method,"parseTimeNanos(String,int,int) parseInterval(IntervalQualifier,boolean,String) parseIntervalRemainingSeconds(String,int)",,,,591,17,10,,"private static int parseNanos(String s, int start, int end) {
        if (start >= end) {
            throw new IllegalArgumentException(s);
        }
        int nanos = 0, mul = 100_000_000;
        do {
            char c = s.charAt(start);
            if (c < '0' || c > '9') {
                throw new IllegalArgumentException(s);
            }
            nanos += mul * (c - '0');
            // mul can become 0, but continue loop anyway to ensure that all
            // remaining digits are valid
            mul /= 10;
        } while (++start < end);
        return nanos;
    }",False,False,The function parses a substring of a string into an integer representing nanoseconds. It checks if the substring contains valid digits and throws an exception if not. It then calculates the nanoseconds by multiplying each digit by a decreasing power of 10.,The `parseNanos` method takes a string `s` and two indices `start` and `end` as input. It parses a substring of `s` from `start` to `end` into an integer representing nanoseconds. It throws an `IllegalArgumentException` if the substring contains non-digit characters or if `start` is greater than or equal to `end`.
34,"findNthIndexOf(String,char,int)",find nth index of str chr n see https stackoverflow com questions 3976616 how to find nth occurrence of character in a string answer 3976656 ,Method,,,"java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int)",,366,11,10,"/** 
 * See: https://stackoverflow.com/questions/3976616/how-to-find-nth-occurrence-of-character-in-a-string#answer-3976656
 */
","/**
     * See:
     * https://stackoverflow.com/questions/3976616/how-to-find-nth-occurrence-of-character-in-a-string#answer-3976656
     */
    private static int findNthIndexOf(String str, char chr, int n) {
        int pos = str.indexOf(chr);
        while (--n > 0 && pos != -1) {
            pos = str.indexOf(chr, pos + 1);
        }
        return pos;
    }",False,False,This method finds the index of the nth occurrence of a character in a given string.,"The code defines a method called ""findNthIndexOf"" that takes a string, a character, and an integer as parameters. It finds the position of the nth occurrence of the character in the string and returns the position. If the character is not found or the nth occurrence does not exist, it returns -1."
35,"parseTimestamp(String,Mode,boolean)",parse timestamp s mode with time zone parses timestamp value from the specified string param s string to parse param mode database mode or code null param with time zone if code true return link value timestamp time zone instead of link value timestamp return parsed timestamp ,Method,,"org.h2.value.ValueTimestamp+parse(String,Mode) org.h2.value.ValueTimestampTimeZone+parse(String)",,,3747,92,9,"/** 
 * Parses timestamp value from the specified string.
 * @param s string to parse
 * @param mode database mode, or  {@code null}
 * @param withTimeZone if  {@code true} return {@link ValueTimestampTimeZone} instead of{@link ValueTimestamp}
 * @return parsed timestamp
 */
","/**
     * Parses timestamp value from the specified string.
     *
     * @param s
     *            string to parse
     * @param mode
     *            database mode, or {@code null}
     * @param withTimeZone
     *            if {@code true} return {@link ValueTimestampTimeZone} instead of
     *            {@link ValueTimestamp}
     * @return parsed timestamp
     */
    public static Value parseTimestamp(String s, Mode mode, boolean withTimeZone) {
        int dateEnd = s.indexOf(' ');
        if (dateEnd < 0) {
            // ISO 8601 compatibility
            dateEnd = s.indexOf('T');
            if (dateEnd < 0 && mode != null && mode.allowDB2TimestampFormat) {
                // DB2 also allows dash between date and time
                dateEnd = findNthIndexOf(s, '-', 3);
            }
        }
        int timeStart;
        if (dateEnd < 0) {
            dateEnd = s.length();
            timeStart = -1;
        } else {
            timeStart = dateEnd + 1;
        }
        long dateValue = parseDateValue(s, 0, dateEnd);
        long nanos;
        short tzMinutes = 0;
        if (timeStart < 0) {
            nanos = 0;
        } else {
            int timeEnd = s.length();
            TimeZone tz = null;
            if (s.endsWith(""Z"")) {
                tz = UTC;
                timeEnd--;
            } else {
                int timeZoneStart = s.indexOf('+', dateEnd + 1);
                if (timeZoneStart < 0) {
                    timeZoneStart = s.indexOf('-', dateEnd + 1);
                }
                if (timeZoneStart >= 0) {
                    // Allow [timeZoneName] part after time zone offset
                    int offsetEnd = s.indexOf('[', timeZoneStart + 1);
                    if (offsetEnd < 0) {
                        offsetEnd = s.length();
                    }
                    String tzName = ""GMT"" + s.substring(timeZoneStart, offsetEnd);
                    tz = TimeZone.getTimeZone(tzName);
                    if (!tz.getID().startsWith(tzName)) {
                        throw new IllegalArgumentException(
                                tzName + "" ("" + tz.getID() + ""?)"");
                    }
                    if (s.charAt(timeZoneStart - 1) == ' ') {
                        timeZoneStart--;
                    }
                    timeEnd = timeZoneStart;
                } else {
                    timeZoneStart = s.indexOf(' ', dateEnd + 1);
                    if (timeZoneStart > 0) {
                        String tzName = s.substring(timeZoneStart + 1);
                        tz = TimeZone.getTimeZone(tzName);
                        if (!tz.getID().startsWith(tzName)) {
                            throw new IllegalArgumentException(tzName);
                        }
                        timeEnd = timeZoneStart;
                    }
                }
            }
            nanos = parseTimeNanos(s, dateEnd + 1, timeEnd);
            if (tz != null) {
                if (withTimeZone) {
                    if (tz != UTC) {
                        long millis = convertDateTimeValueToMillis(tz, dateValue, nanos / 1_000_000);
                        tzMinutes = (short) (tz.getOffset(millis) / 60_000);
                    }
                } else {
                    long millis = convertDateTimeValueToMillis(tz, dateValue, nanos / 1_000_000);
                    dateValue = dateValueFromDate(millis);
                    nanos = nanos % 1_000_000 + nanosFromDate(millis);
                }
            }
        }
        if (withTimeZone) {
            return ValueTimestampTimeZone.fromDateValueAndNanos(dateValue, nanos, tzMinutes);
        }
        return ValueTimestamp.fromDateValueAndNanos(dateValue, nanos);
    }",False,False,"The function of this method is to parse a timestamp value from a specified string. It takes in the string to parse, a database mode, and a boolean indicating whether to return a timestamp with time zone or without. It then extracts the date and time components from the string, parses them, and returns the parsed timestamp value.",This code is a method that parses a timestamp value from a string. It takes into account the database mode and whether or not to include the time zone. It returns the parsed timestamp as either a ValueTimestampTimeZone or a ValueTimestamp object.
36,"getTimeZoneOffsetMillis(TimeZone,long,long)",get time zone offset millis tz date value time nanos calculates the time zone offset in minutes for the specified time zone date value and nanoseconds since midnight param tz time zone or code null for default param date value date value param time nanos nanoseconds since midnight return time zone offset in milliseconds ,Method,,,,,722,18,9,"/** 
 * Calculates the time zone offset in minutes for the specified time zone, date value, and nanoseconds since midnight.
 * @param tz time zone, or  {@code null} for default
 * @param dateValue date value
 * @param timeNanos nanoseconds since midnight
 * @return time zone offset in milliseconds
 */
","/**
     * Calculates the time zone offset in minutes for the specified time zone, date
     * value, and nanoseconds since midnight.
     *
     * @param tz
     *            time zone, or {@code null} for default
     * @param dateValue
     *            date value
     * @param timeNanos
     *            nanoseconds since midnight
     * @return time zone offset in milliseconds
     */
    public static int getTimeZoneOffsetMillis(TimeZone tz, long dateValue, long timeNanos) {
        long msec = timeNanos / 1_000_000;
        long utc = convertDateTimeValueToMillis(tz, dateValue, msec);
        long local = absoluteDayFromDateValue(dateValue) * MILLIS_PER_DAY + msec;
        return (int) (local - utc);
    }",False,False,"This method calculates the time zone offset in milliseconds for a specified time zone, date value, and nanoseconds since midnight. It takes a time zone, date value, and time in nanoseconds as input and returns the time zone offset in milliseconds.","This code calculates the time zone offset in milliseconds for a given time zone, date value, and nanoseconds since midnight. It converts the nanoseconds to milliseconds, converts the date value to milliseconds, and subtracts the UTC time from the local time to determine the offset."
37,"getMillis(long,long,short)",get millis date value time nanos offset mins calculates the milliseconds since epoch for the specified date value nanoseconds since midnight and time zone offset param date value date value param time nanos nanoseconds since midnight param offset mins time zone offset in minutes return milliseconds since epoch in ut c ,Method,,org.h2.value.Value+convertToDate(),,,607,15,9,"/** 
 * Calculates the milliseconds since epoch for the specified date value, nanoseconds since midnight, and time zone offset.
 * @param dateValue date value
 * @param timeNanos nanoseconds since midnight
 * @param offsetMins time zone offset in minutes
 * @return milliseconds since epoch in UTC
 */
","/**
     * Calculates the milliseconds since epoch for the specified date value,
     * nanoseconds since midnight, and time zone offset.
     * @param dateValue
     *            date value
     * @param timeNanos
     *            nanoseconds since midnight
     * @param offsetMins
     *            time zone offset in minutes
     * @return milliseconds since epoch in UTC
     */
    public static long getMillis(long dateValue, long timeNanos, short offsetMins) {
        return absoluteDayFromDateValue(dateValue) * MILLIS_PER_DAY
                + timeNanos / 1_000_000 - offsetMins * 60_000;
    }",False,False,"This method calculates the milliseconds since the epoch (January 1, 1970) in UTC for a specified date value, nanoseconds since midnight, and time zone offset.","This code defines a method called ""getMillis"" that calculates the milliseconds since epoch in UTC for a given date value, nanoseconds since midnight, and time zone offset. It does this by multiplying the number of days since epoch by the number of milliseconds per day, subtracting the offset in minutes converted to milliseconds, and adding the nanoseconds since midnight converted to milliseconds."
38,"getMillis(TimeZone,int,int,int,int,int,int,int)",get millis tz year month day hour minute second millis calculate the milliseconds since 1970 01 01 utc for the given date and time in the specified timezone param tz the timezone of the parameters or null for the defaulttimezone param year the absolute year positive or negative param month the month 1 12 param day the day 1 31 param hour the hour 0 23 param minute the minutes 0 59 param second the number of seconds 0 59 param millis the number of milliseconds return the number of milliseconds utc ,Method,"convertDateValueToDate(long) convertDateTimeValueToMillis(TimeZone,long,long)","org.h2.test.unit.TestDate+testDate(int,int,int)","org.h2.util.DateTimeUtils+getCalendar() org.h2.util.DateTimeUtils+getCalendar() org.h2.util.DateTimeUtils+getCalendar(TimeZone) org.h2.util.DateTimeUtils+getCalendar(TimeZone) java.util.Calendar+setLenient(boolean) java.util.Calendar+setLenient(boolean) org.h2.util.DateTimeUtils+convertToMillis(Calendar,int,int,int,int,int,int,int) org.h2.util.DateTimeUtils+convertToMillis(Calendar,int,int,int,int,int,int,int) java.lang.Throwable+toString() java.lang.Throwable+toString() java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.util.GregorianCalendar+isLeapYear(int) java.util.GregorianCalendar+isLeapYear(int) java.util.Calendar+setLenient(boolean) java.util.Calendar+setLenient(boolean) org.h2.util.DateTimeUtils+convertToMillis(Calendar,int,int,int,int,int,int,int) org.h2.util.DateTimeUtils+convertToMillis(Calendar,int,int,int,int,int,int,int)",org.h2.util.DateTimeUtils+NORMAL_DAYS_PER_MONTH,2109,53,9,"/** 
 * Calculate the milliseconds since 1970-01-01 (UTC) for the given date and time (in the specified timezone).
 * @param tz the timezone of the parameters, or null for the defaulttimezone
 * @param year the absolute year (positive or negative)
 * @param month the month (1-12)
 * @param day the day (1-31)
 * @param hour the hour (0-23)
 * @param minute the minutes (0-59)
 * @param second the number of seconds (0-59)
 * @param millis the number of milliseconds
 * @return the number of milliseconds (UTC)
 */
","/**
     * Calculate the milliseconds since 1970-01-01 (UTC) for the given date and
     * time (in the specified timezone).
     *
     * @param tz the timezone of the parameters, or null for the default
     *            timezone
     * @param year the absolute year (positive or negative)
     * @param month the month (1-12)
     * @param day the day (1-31)
     * @param hour the hour (0-23)
     * @param minute the minutes (0-59)
     * @param second the number of seconds (0-59)
     * @param millis the number of milliseconds
     * @return the number of milliseconds (UTC)
     */
    public static long getMillis(TimeZone tz, int year, int month, int day,
            int hour, int minute, int second, int millis) {
        GregorianCalendar c;
        if (tz == null) {
            c = getCalendar();
        } else {
            c = getCalendar(tz);
        }
        c.setLenient(false);
        try {
            return convertToMillis(c, year, month, day, hour, minute, second, millis);
        } catch (IllegalArgumentException e) {
            // special case: if the time simply doesn't exist because of
            // daylight saving time changes, use the lenient version
            String message = e.toString();
            if (message.indexOf(""HOUR_OF_DAY"") > 0) {
                if (hour < 0 || hour > 23) {
                    throw e;
                }
            } else if (message.indexOf(""DAY_OF_MONTH"") > 0) {
                int maxDay;
                if (month == 2) {
                    maxDay = c.isLeapYear(year) ? 29 : 28;
                } else {
                    maxDay = NORMAL_DAYS_PER_MONTH[month];
                }
                if (day < 1 || day > maxDay) {
                    throw e;
                }
                // DAY_OF_MONTH is thrown for years > 2037
                // using the timezone Brasilia and others,
                // for example for 2042-10-12 00:00:00.
                hour += 6;
            }
            c.setLenient(true);
            return convertToMillis(c, year, month, day, hour, minute, second, millis);
        }
    }",False,False,"This method calculates the number of milliseconds since 1970-01-01 (UTC) for a given date and time in a specified timezone. It takes in parameters such as the timezone, year, month, day, hour, minute, second, and milliseconds, and returns the number of milliseconds in UTC.","This code defines a method called ""getMillis"" that calculates the number of milliseconds since 1970-01-01 (UTC) for a given date and time in the specified timezone. It handles cases where the time doesn't exist due to daylight saving time changes by using a lenient version of the calendar."
39,"convertToMillis(Calendar,int,int,int,int,int,int,int)",convert to millis cal year month day hour minute second millis ,Method,"convertDate(Value,Calendar) getMillis(TimeZone,int,int,int,int,int,int,int) getMillis(TimeZone,int,int,int,int,int,int,int)",,"java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+getTimeInMillis() java.util.Calendar+getTimeInMillis()",java.util.Calendar+ERA java.util.GregorianCalendar+BC java.util.Calendar+YEAR java.util.Calendar+ERA java.util.GregorianCalendar+AD java.util.Calendar+YEAR java.util.Calendar+MONTH java.util.Calendar+DAY_OF_MONTH java.util.Calendar+HOUR_OF_DAY java.util.Calendar+MINUTE java.util.Calendar+SECOND java.util.Calendar+MILLISECOND,726,18,10,,"private static long convertToMillis(Calendar cal, int year, int month, int day,
            int hour, int minute, int second, int millis) {
        if (year <= 0) {
            cal.set(Calendar.ERA, GregorianCalendar.BC);
            cal.set(Calendar.YEAR, 1 - year);
        } else {
            cal.set(Calendar.ERA, GregorianCalendar.AD);
            cal.set(Calendar.YEAR, year);
        }
        // january is 0
        cal.set(Calendar.MONTH, month - 1);
        cal.set(Calendar.DAY_OF_MONTH, day);
        cal.set(Calendar.HOUR_OF_DAY, hour);
        cal.set(Calendar.MINUTE, minute);
        cal.set(Calendar.SECOND, second);
        cal.set(Calendar.MILLISECOND, millis);
        return cal.getTimeInMillis();
    }",False,False,"This method converts a given date and time to milliseconds since January 1, 1970. It takes in the year, month, day, hour, minute, second, and millisecond values and sets them in a Calendar object. It then returns the time in milliseconds.","This code is a method that takes in various date and time components and converts them into milliseconds since January 1, 1970. It handles both positive and negative years, sets the appropriate calendar era, and returns the calculated milliseconds."
40,dateAndTimeFromValue(Value),date and time from value value extracts date value and nanos of day from the specified value param value value to extract fields from return array with date value and nanos of day ,Method,,"org.h2.expression.Function+getSimpleValue(Session,Value,Expression[],Value[]) org.h2.expression.Function+getSimpleValue(Session,Value,Expression[],Value[]) org.h2.expression.IntervalOperation+getDateTimeWithInterval(Value,Value,int,int) org.h2.util.DateTimeFunctions+extract(String,Value)",org.h2.value.ValueTimestamp+getDateValue() org.h2.value.ValueTimestamp+getDateValue() org.h2.value.ValueTimestamp+getTimeNanos() org.h2.value.ValueTimestamp+getTimeNanos() org.h2.value.ValueDate+getDateValue() org.h2.value.ValueDate+getDateValue() org.h2.value.ValueTime+getNanos() org.h2.value.ValueTime+getNanos() org.h2.value.ValueTimestampTimeZone+getDateValue() org.h2.value.ValueTimestampTimeZone+getDateValue() org.h2.value.ValueTimestampTimeZone+getTimeNanos() org.h2.value.ValueTimestampTimeZone+getTimeNanos() org.h2.value.Value+convertTo(int) org.h2.value.Value+convertTo(int) org.h2.value.ValueTimestamp+getDateValue() org.h2.value.ValueTimestamp+getDateValue() org.h2.value.ValueTimestamp+getTimeNanos() org.h2.value.ValueTimestamp+getTimeNanos(),org.h2.util.DateTimeUtils+EPOCH_DATE_VALUE org.h2.value.Value+TIMESTAMP,1207,29,9,"/** 
 * Extracts date value and nanos of day from the specified value.
 * @param value value to extract fields from
 * @return array with date value and nanos of day
 */
","/**
     * Extracts date value and nanos of day from the specified value.
     *
     * @param value
     *            value to extract fields from
     * @return array with date value and nanos of day
     */
    public static long[] dateAndTimeFromValue(Value value) {
        long dateValue = EPOCH_DATE_VALUE;
        long timeNanos = 0;
        if (value instanceof ValueTimestamp) {
            ValueTimestamp v = (ValueTimestamp) value;
            dateValue = v.getDateValue();
            timeNanos = v.getTimeNanos();
        } else if (value instanceof ValueDate) {
            dateValue = ((ValueDate) value).getDateValue();
        } else if (value instanceof ValueTime) {
            timeNanos = ((ValueTime) value).getNanos();
        } else if (value instanceof ValueTimestampTimeZone) {
            ValueTimestampTimeZone v = (ValueTimestampTimeZone) value;
            dateValue = v.getDateValue();
            timeNanos = v.getTimeNanos();
        } else {
            ValueTimestamp v = (ValueTimestamp) value.convertTo(Value.TIMESTAMP);
            dateValue = v.getDateValue();
            timeNanos = v.getTimeNanos();
        }
        return new long[] {dateValue, timeNanos};
    }",False,False,"The function extracts the date value and nanoseconds of the day from a given value. It checks the type of the value and retrieves the corresponding date value and time nanoseconds. If the value is not of a recognized type, it converts it to a timestamp and retrieves the date value and time nanoseconds. The function returns an array with the extracted values.","This code is a method called ""dateAndTimeFromValue"" that takes a Value object as input and extracts the date value and nanoseconds of the day from it. It handles different types of Value objects, such as ValueTimestamp, ValueDate, ValueTime, and ValueTimestampTimeZone, and returns an array with the extracted values."
41,"dateTimeToValue(Value,long,long,boolean)",date time to value original date value time nanos force timestamp creates a new date time value with the same type as original value if original value is a value timestamp time zone returned value will have the same time zone offset as original value param original original value param date value date value for the returned value param time nanos nanos of day for the returned value param force timestamp if code true return value timestamp if original argument is value date or value time return new value with specified date value and nanos of day ,Method,,"org.h2.expression.IntervalOperation+getDateTimeWithInterval(Value,Value,int,int)","org.h2.value.ValueDate+fromDateValue(long) org.h2.value.ValueDate+fromDateValue(long) org.h2.value.ValueTime+fromNanos(long) org.h2.value.ValueTime+fromNanos(long) org.h2.value.ValueTimestampTimeZone+fromDateValueAndNanos(long,long,short) org.h2.value.ValueTimestampTimeZone+fromDateValueAndNanos(long,long,short) org.h2.value.ValueTimestampTimeZone+getTimeZoneOffsetMins() org.h2.value.ValueTimestampTimeZone+getTimeZoneOffsetMins() org.h2.value.ValueTimestamp+fromDateValueAndNanos(long,long) org.h2.value.ValueTimestamp+fromDateValueAndNanos(long,long)",,1475,33,9,"/** 
 * Creates a new date-time value with the same type as original value. If original value is a ValueTimestampTimeZone, returned value will have the same time zone offset as original value.
 * @param original original value
 * @param dateValue date value for the returned value
 * @param timeNanos nanos of day for the returned value
 * @param forceTimestamp if  {@code true} return ValueTimestamp if original argument isValueDate or ValueTime
 * @return new value with specified date value and nanos of day
 */
","/**
     * Creates a new date-time value with the same type as original value. If
     * original value is a ValueTimestampTimeZone, returned value will have the same
     * time zone offset as original value.
     *
     * @param original
     *            original value
     * @param dateValue
     *            date value for the returned value
     * @param timeNanos
     *            nanos of day for the returned value
     * @param forceTimestamp
     *            if {@code true} return ValueTimestamp if original argument is
     *            ValueDate or ValueTime
     * @return new value with specified date value and nanos of day
     */
    public static Value dateTimeToValue(Value original, long dateValue, long timeNanos, boolean forceTimestamp) {
        if (!(original instanceof ValueTimestamp)) {
            if (!forceTimestamp) {
                if (original instanceof ValueDate) {
                    return ValueDate.fromDateValue(dateValue);
                }
                if (original instanceof ValueTime) {
                    return ValueTime.fromNanos(timeNanos);
                }
            }
            if (original instanceof ValueTimestampTimeZone) {
                return ValueTimestampTimeZone.fromDateValueAndNanos(dateValue, timeNanos,
                        ((ValueTimestampTimeZone) original).getTimeZoneOffsetMins());
            }
        }
        return ValueTimestamp.fromDateValueAndNanos(dateValue, timeNanos);
    }",False,False,"This method creates a new date-time value with the same type as the original value. It takes in the original value, a date value, nanos of day, and a boolean flag. If the original value is not a ValueTimestamp, it checks if the flag is set to force a ValueTimestamp. If not, it checks if the original value is a ValueDate or ValueTime and returns the corresponding value. If the original value is a ValueTimestampTimeZone, it returns a new value with the specified date value, nanos of day, and the same time zone offset. Otherwise, it returns a new ValueTimestamp with the specified date value and nanos of day.","This code defines a method called `dateTimeToValue` that takes in a `Value` object, a date value, a time in nanoseconds, and a boolean flag. It returns a new `Value` object with the specified date value and nanoseconds. If the original value is not a `ValueTimestamp`, it checks if it is a `ValueDate`, `ValueTime`, or `ValueTimestampTimeZone` and returns the corresponding value."
42,getTimeLocalWithoutDst(java.util.Date),get time local without dst d get the number of milliseconds since 1970 01 01 in the local timezone but without daylight saving time into account param d the date return the milliseconds ,Method,,,java.util.Date+getTime() java.util.Date+getTime(),org.h2.util.DateTimeUtils+zoneOffsetMillis,326,10,9,"/** 
 * Get the number of milliseconds since 1970-01-01 in the local timezone, but without daylight saving time into account.
 * @param d the date
 * @return the milliseconds
 */
","/**
     * Get the number of milliseconds since 1970-01-01 in the local timezone,
     * but without daylight saving time into account.
     *
     * @param d the date
     * @return the milliseconds
     */
    public static long getTimeLocalWithoutDst(java.util.Date d) {
        return d.getTime() + zoneOffsetMillis;
    }",False,False,"This method returns the number of milliseconds since 1970-01-01 in the local timezone, without considering daylight saving time. It takes a date as input and adds the zone offset milliseconds to the date's time.","The code defines a method called `getTimeLocalWithoutDst` that takes a `java.util.Date` object as input and returns the number of milliseconds since 1970-01-01 in the local timezone, without considering daylight saving time. The method achieves this by adding the `zoneOffsetMillis` value to the time of the input date."
43,getTimeUTCWithoutDst(long),get time utc without dst millis convert the number of milliseconds since 1970 01 01 in the local timezone to utc but without daylight saving time into account param millis the number of milliseconds in the local timezone return the number of milliseconds in ut c ,Method,,org.h2.test.unit.TestDate+testDateTimeUtils() org.h2.test.unit.TestDate+testDateTimeUtils(),,org.h2.util.DateTimeUtils+zoneOffsetMillis,387,10,9,"/** 
 * Convert the number of milliseconds since 1970-01-01 in the local timezone to UTC, but without daylight saving time into account.
 * @param millis the number of milliseconds in the local timezone
 * @return the number of milliseconds in UTC
 */
","/**
     * Convert the number of milliseconds since 1970-01-01 in the local timezone
     * to UTC, but without daylight saving time into account.
     *
     * @param millis the number of milliseconds in the local timezone
     * @return the number of milliseconds in UTC
     */
    public static long getTimeUTCWithoutDst(long millis) {
        return millis - zoneOffsetMillis;
    }",False,False,"The function converts the number of milliseconds in the local timezone to UTC, without considering daylight saving time, by subtracting the zone offset in milliseconds.","The given code is a method named ""getTimeUTCWithoutDst"" that takes the number of milliseconds in the local timezone as input and returns the equivalent number of milliseconds in UTC without considering daylight saving time. It achieves this by subtracting the zone offset in milliseconds from the input value."
44,"getDayOfWeek(long,int)",get day of week date value first day of week returns day of week param date value the date value param first day of week first day of week monday as 1 sunday as 7 or 0 return day of week see get iso day of week long ,Method,getIsoDayOfWeek(long) getSundayDayOfWeek(long),,"org.h2.util.DateTimeUtils+getDayOfWeekFromAbsolute(long,int) org.h2.util.DateTimeUtils+getDayOfWeekFromAbsolute(long,int) org.h2.util.DateTimeUtils+absoluteDayFromDateValue(long) org.h2.util.DateTimeUtils+absoluteDayFromDateValue(long)",,434,13,9,"/** 
 * Returns day of week.
 * @param dateValue the date value
 * @param firstDayOfWeek first day of week, Monday as 1, Sunday as 7 or 0
 * @return day of week
 * @see #getIsoDayOfWeek(long)
 */
","/**
     * Returns day of week.
     *
     * @param dateValue
     *            the date value
     * @param firstDayOfWeek
     *            first day of week, Monday as 1, Sunday as 7 or 0
     * @return day of week
     * @see #getIsoDayOfWeek(long)
     */
    public static int getDayOfWeek(long dateValue, int firstDayOfWeek) {
        return getDayOfWeekFromAbsolute(absoluteDayFromDateValue(dateValue), firstDayOfWeek);
    }",False,False,This method returns the day of the week based on the given date value and the specified first day of the week.,"This code defines a method called ""getDayOfWeek"" that takes a date value and the first day of the week as parameters. It returns the day of the week corresponding to the given date value, based on the specified first day of the week. The method internally calls another method to calculate the day of the week."
45,"getDayOfWeekFromAbsolute(long,int)",get day of week from absolute absolute value first day of week get the day of the week from the absolute day value param absolute value the absolute day param first day of week the first day of the week return the day of week ,Method,"getDayOfWeek(long,int) getWeekOfYearBase(int,int,int)",,,,466,11,9,"/** 
 * Get the day of the week from the absolute day value.
 * @param absoluteValue the absolute day
 * @param firstDayOfWeek the first day of the week
 * @return the day of week
 */
","/**
     * Get the day of the week from the absolute day value.
     *
     * @param absoluteValue the absolute day
     * @param firstDayOfWeek the first day of the week
     * @return the day of week
     */
    public static int getDayOfWeekFromAbsolute(long absoluteValue, int firstDayOfWeek) {
        return absoluteValue >= 0 ? (int) ((absoluteValue - firstDayOfWeek + 11) % 7) + 1
                : (int) ((absoluteValue - firstDayOfWeek - 2) % 7) + 7;
    }",False,False,"This method calculates the day of the week based on an absolute day value and the first day of the week. It returns an integer representing the day of the week, with Sunday being 1 and Saturday being 7.","This code defines a method called ""getDayOfWeekFromAbsolute"" that takes in an absolute day value and the first day of the week as parameters. It calculates and returns the day of the week (1-7) based on the given absolute day value and the specified first day of the week."
46,getDayOfYear(long),get day of year date value returns number of day in year param date value the date value return number of day in year ,Method,,,org.h2.util.DateTimeUtils+absoluteDayFromDateValue(long) org.h2.util.DateTimeUtils+absoluteDayFromDateValue(long) org.h2.util.DateTimeUtils+absoluteDayFromYear(long) org.h2.util.DateTimeUtils+absoluteDayFromYear(long) org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+yearFromDateValue(long),,325,10,9,"/** 
 * Returns number of day in year.
 * @param dateValue the date value
 * @return number of day in year
 */
","/**
     * Returns number of day in year.
     *
     * @param dateValue
     *            the date value
     * @return number of day in year
     */
    public static int getDayOfYear(long dateValue) {
        return (int) (absoluteDayFromDateValue(dateValue) - absoluteDayFromYear(yearFromDateValue(dateValue))) + 1;
    }",False,False,This method calculates the number of the day in the year based on a given date value. It uses other helper methods to calculate the absolute day and the year from the date value.,"The code defines a method called ""getDayOfYear"" that takes a date value as input and returns the number of the day in the year corresponding to that date. The method calculates the day by subtracting the absolute day of the year from the absolute day of the given date and adding 1."
47,getIsoDayOfWeek(long),get iso day of week date value returns iso day of week param date value the date value return iso day of week monday as 1 to sunday as 7 see get sunday day of week long ,Method,,,"org.h2.util.DateTimeUtils+getDayOfWeek(long,int) org.h2.util.DateTimeUtils+getDayOfWeek(long,int)",,309,11,9,"/** 
 * Returns ISO day of week.
 * @param dateValue the date value
 * @return ISO day of week, Monday as 1 to Sunday as 7
 * @see #getSundayDayOfWeek(long)
 */
","/**
     * Returns ISO day of week.
     *
     * @param dateValue
     *            the date value
     * @return ISO day of week, Monday as 1 to Sunday as 7
     * @see #getSundayDayOfWeek(long)
     */
    public static int getIsoDayOfWeek(long dateValue) {
        return getDayOfWeek(dateValue, 1);
    }",False,False,"This method returns the ISO day of the week (Monday as 1 to Sunday as 7) for a given date value. It calls another method, getDayOfWeek, with a parameter of 1 to indicate ISO day of the week.","This code defines a method called ""getIsoDayOfWeek"" that takes a long value representing a date and returns the ISO day of the week for that date. The ISO day of the week ranges from Monday as 1 to Sunday as 7. The method calls another method called ""getDayOfWeek"" with the specified date value and a parameter of 1 to calculate the day of the week."
48,getIsoWeekOfYear(long),get iso week of year date value returns iso number of week in year param date value the date value return number of week in year see get iso week year long see get week of year long int int ,Method,,,"org.h2.util.DateTimeUtils+getWeekOfYear(long,int,int) org.h2.util.DateTimeUtils+getWeekOfYear(long,int,int)",,343,12,9,"/** 
 * Returns ISO number of week in year.
 * @param dateValue the date value
 * @return number of week in year
 * @see #getIsoWeekYear(long)
 * @see #getWeekOfYear(long,int,int)
 */
","/**
     * Returns ISO number of week in year.
     *
     * @param dateValue
     *            the date value
     * @return number of week in year
     * @see #getIsoWeekYear(long)
     * @see #getWeekOfYear(long, int, int)
     */
    public static int getIsoWeekOfYear(long dateValue) {
        return getWeekOfYear(dateValue, 1, 4);
    }",False,False,"This method returns the ISO number of the week in a year based on a given date value. It calls another method, getWeekOfYear, with specific parameters to calculate the week number.","The code contains a method called ""getIsoWeekOfYear"" that takes a date value as input and returns the ISO number of the week in the year. It calls another method called ""getWeekOfYear"" with specific parameters to calculate the week number."
49,getIsoWeekYear(long),get iso week year date value returns iso week year param date value the date value return iso week year see get iso week of year long see get week year long int int ,Method,,,"org.h2.util.DateTimeUtils+getWeekYear(long,int,int) org.h2.util.DateTimeUtils+getWeekYear(long,int,int)",,317,12,9,"/** 
 * Returns ISO week year.
 * @param dateValue the date value
 * @return ISO week year
 * @see #getIsoWeekOfYear(long)
 * @see #getWeekYear(long,int,int)
 */
","/**
     * Returns ISO week year.
     *
     * @param dateValue
     *            the date value
     * @return ISO week year
     * @see #getIsoWeekOfYear(long)
     * @see #getWeekYear(long, int, int)
     */
    public static int getIsoWeekYear(long dateValue) {
        return getWeekYear(dateValue, 1, 4);
    }",False,False,This method returns the ISO week year by calling another method with the given date value and specific parameters.,"The code contains a method called ""getIsoWeekYear"" that takes a date value as input and returns the ISO week year. It calls another method called ""getWeekYear"" with specific parameters to calculate the week year. The method's purpose is to provide a convenient way to retrieve the ISO week year from a given date."
50,getSundayDayOfWeek(long),get sunday day of week date value returns day of week with sunday as 1 param date value the date value return day of week sunday as 1 to monday as 7 see get iso day of week long ,Method,,"org.h2.expression.Function+getSimpleValue(Session,Value,Expression[],Value[])","org.h2.util.DateTimeUtils+getDayOfWeek(long,int) org.h2.util.DateTimeUtils+getDayOfWeek(long,int)",,318,11,9,"/** 
 * Returns day of week with Sunday as 1.
 * @param dateValue the date value
 * @return day of week, Sunday as 1 to Monday as 7
 * @see #getIsoDayOfWeek(long)
 */
","/**
     * Returns day of week with Sunday as 1.
     *
     * @param dateValue
     *            the date value
     * @return day of week, Sunday as 1 to Monday as 7
     * @see #getIsoDayOfWeek(long)
     */
    public static int getSundayDayOfWeek(long dateValue) {
        return getDayOfWeek(dateValue, 0);
    }",False,False,"This method returns the day of the week with Sunday as 1, given a date value. It calls another method, getDayOfWeek, with a parameter of 0 to indicate Sunday as the first day of the week.","This code defines a method called ""getSundayDayOfWeek"" that takes a date value as input and returns the day of the week with Sunday represented as 1 and Monday as 7. It is a wrapper method that calls another method called ""getDayOfWeek"" with an additional parameter of 0."
51,"getWeekOfYear(long,int,int)",get week of year date value first day of week minimal days in first week returns number of week in year param date value the date value param first day of week first day of week monday as 1 sunday as 7 or 0 param minimal days in first week minimal days in first week of year return number of week in year see get iso week of year long ,Method,getIsoWeekOfYear(long),,"org.h2.util.DateTimeUtils+absoluteDayFromDateValue(long) org.h2.util.DateTimeUtils+absoluteDayFromDateValue(long) org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+getWeekOfYearBase(int,int,int) org.h2.util.DateTimeUtils+getWeekOfYearBase(int,int,int) org.h2.util.DateTimeUtils+getWeekOfYearBase(int,int,int) org.h2.util.DateTimeUtils+getWeekOfYearBase(int,int,int) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long) org.h2.util.DateTimeUtils+getWeekOfYearBase(int,int,int) org.h2.util.DateTimeUtils+getWeekOfYearBase(int,int,int)",,1098,25,9,"/** 
 * Returns number of week in year.
 * @param dateValue the date value
 * @param firstDayOfWeek first day of week, Monday as 1, Sunday as 7 or 0
 * @param minimalDaysInFirstWeek minimal days in first week of year
 * @return number of week in year
 * @see #getIsoWeekOfYear(long)
 */
","/**
     * Returns number of week in year.
     *
     * @param dateValue
     *            the date value
     * @param firstDayOfWeek
     *            first day of week, Monday as 1, Sunday as 7 or 0
     * @param minimalDaysInFirstWeek
     *            minimal days in first week of year
     * @return number of week in year
     * @see #getIsoWeekOfYear(long)
     */
    public static int getWeekOfYear(long dateValue, int firstDayOfWeek, int minimalDaysInFirstWeek) {
        long abs = absoluteDayFromDateValue(dateValue);
        int year = yearFromDateValue(dateValue);
        long base = getWeekOfYearBase(year, firstDayOfWeek, minimalDaysInFirstWeek);
        if (abs - base < 0) {
            base = getWeekOfYearBase(year - 1, firstDayOfWeek, minimalDaysInFirstWeek);
        } else if (monthFromDateValue(dateValue) == 12 && 24 + minimalDaysInFirstWeek < dayFromDateValue(dateValue)) {
            if (abs >= getWeekOfYearBase(year + 1, firstDayOfWeek, minimalDaysInFirstWeek)) {
                return 1;
            }
        }
        return (int) ((abs - base) / 7) + 1;
    }",False,False,"This method calculates the number of the week in the year based on the given date value, first day of the week, and minimal days in the first week of the year.","This code is a method that calculates the number of the week in a year based on a given date. It takes into account the first day of the week, the minimal days in the first week, and handles cases where the date falls in the previous or next year."
52,"getWeekOfYearBase(int,int,int)",get week of year base year first day of week minimal days in first week ,Method,"getWeekOfYear(long,int,int) getWeekOfYear(long,int,int) getWeekOfYear(long,int,int) getWeekYear(long,int,int) getWeekYear(long,int,int)",,"org.h2.util.DateTimeUtils+absoluteDayFromYear(long) org.h2.util.DateTimeUtils+absoluteDayFromYear(long) org.h2.util.DateTimeUtils+getDayOfWeekFromAbsolute(long,int) org.h2.util.DateTimeUtils+getDayOfWeekFromAbsolute(long,int)",,390,9,10,,"private static long getWeekOfYearBase(int year, int firstDayOfWeek, int minimalDaysInFirstWeek) {
        long first = absoluteDayFromYear(year);
        int daysInFirstWeek = 8 - getDayOfWeekFromAbsolute(first, firstDayOfWeek);
        long base = first + daysInFirstWeek;
        if (daysInFirstWeek >= minimalDaysInFirstWeek) {
            base -= 7;
        }
        return base;
    }",False,False,"This method calculates the base day of the first week of a given year, based on the year, the first day of the week, and the minimum number of days in the first week.","The code calculates the base day of the first week of a given year based on the provided parameters: year, first day of the week, and minimal days in the first week. It determines the number of days in the first week, adjusts the base day accordingly, and returns the calculated base day."
53,"getWeekYear(long,int,int)",get week year date value first day of week minimal days in first week returns week year param date value the date value param first day of week first day of week monday as 1 sunday as 7 or 0 param minimal days in first week minimal days in first week of year return week year see get iso week year long ,Method,getIsoWeekYear(long),,"org.h2.util.DateTimeUtils+absoluteDayFromDateValue(long) org.h2.util.DateTimeUtils+absoluteDayFromDateValue(long) org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+getWeekOfYearBase(int,int,int) org.h2.util.DateTimeUtils+getWeekOfYearBase(int,int,int) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long) org.h2.util.DateTimeUtils+getWeekOfYearBase(int,int,int) org.h2.util.DateTimeUtils+getWeekOfYearBase(int,int,int)",,992,25,9,"/** 
 * Returns week year.
 * @param dateValue the date value
 * @param firstDayOfWeek first day of week, Monday as 1, Sunday as 7 or 0
 * @param minimalDaysInFirstWeek minimal days in first week of year
 * @return week year
 * @see #getIsoWeekYear(long)
 */
","/**
     * Returns week year.
     *
     * @param dateValue
     *            the date value
     * @param firstDayOfWeek
     *            first day of week, Monday as 1, Sunday as 7 or 0
     * @param minimalDaysInFirstWeek
     *            minimal days in first week of year
     * @return week year
     * @see #getIsoWeekYear(long)
     */
    public static int getWeekYear(long dateValue, int firstDayOfWeek, int minimalDaysInFirstWeek) {
        long abs = absoluteDayFromDateValue(dateValue);
        int year = yearFromDateValue(dateValue);
        long base = getWeekOfYearBase(year, firstDayOfWeek, minimalDaysInFirstWeek);
        if (abs - base < 0) {
            return year - 1;
        } else if (monthFromDateValue(dateValue) == 12 && 24 + minimalDaysInFirstWeek < dayFromDateValue(dateValue)) {
            if (abs >= getWeekOfYearBase(year + 1, firstDayOfWeek, minimalDaysInFirstWeek)) {
                return year + 1;
            }
        }
        return year;
    }",False,False,"This method returns the week year based on the given date value, first day of the week, and minimal days in the first week of the year. It calculates the week year by comparing the absolute day of the date value with the base week of the year. If the absolute day is less than the base, it returns the previous year. If the month is December and the day is greater than 24 + minimal days in the first week, it checks if the absolute day is greater than or equal to the base week of the next year, and returns the next year if true. Otherwise, it returns the current year.","This code is a method that calculates the week year based on a given date value, first day of the week, and minimal days in the first week. It uses various helper methods to determine the week year and handles cases where the date value falls before or after the calculated week year."
54,"getDaysInMonth(int,int)",get days in month year month returns number of days in month param year the year param month the month return number of days in the specified month ,Method,"isValidDate(int,int,int) dateValueFromDenormalizedDate(long,long,int) incrementDateValue(long) decrementDateValue(long)",,,org.h2.util.DateTimeUtils+NORMAL_DAYS_PER_MONTH,644,19,9,"/** 
 * Returns number of days in month.
 * @param year the year
 * @param month the month
 * @return number of days in the specified month
 */
","/**
     * Returns number of days in month.
     *
     * @param year the year
     * @param month the month
     * @return number of days in the specified month
     */
    public static int getDaysInMonth(int year, int month) {
        if (month != 2) {
            return NORMAL_DAYS_PER_MONTH[month];
        }
        // All leap years divisible by 4
        return (year & 3) == 0
                // All such years before 1582 are Julian and leap
                && (year < 1582
                        // Otherwise check Gregorian conditions
                        || year % 100 != 0 || year % 400 == 0)
                ? 29 : 28;
    }",False,False,This method returns the number of days in a specified month of a given year. It takes the year and month as parameters and uses a series of conditions to determine the number of days in the month.,"This code is a method that takes in a year and month as parameters and returns the number of days in that month. It uses an array to store the number of days in each month except February, which is handled separately based on leap year conditions."
55,"isValidDate(int,int,int)",is valid date year month day verify if the specified date is valid param year the year param month the month january is 1 param day the day 1 is the first of the month return true if it is valid ,Method,"parseDateValue(String,int,int)",org.h2.test.unit.TestDate+testAbsoluteDay() org.h2.test.unit.TestDate+testValidDate(),"org.h2.util.DateTimeUtils+getDaysInMonth(int,int) org.h2.util.DateTimeUtils+getDaysInMonth(int,int)",,620,18,9,"/** 
 * Verify if the specified date is valid.
 * @param year the year
 * @param month the month (January is 1)
 * @param day the day (1 is the first of the month)
 * @return true if it is valid
 */
","/**
     * Verify if the specified date is valid.
     *
     * @param year the year
     * @param month the month (January is 1)
     * @param day the day (1 is the first of the month)
     * @return true if it is valid
     */
    public static boolean isValidDate(int year, int month, int day) {
        if (month < 1 || month > 12 || day < 1) {
            return false;
        }
        if (year == 1582 && month == 10) {
            // special case: days 1582-10-05 .. 1582-10-14 don't exist
            return day < 5 || (day > 14 && day <= 31);
        }
        return day <= getDaysInMonth(year, month);
    }",False,False,"This method verifies if a specified date is valid by checking if the month and day are within valid ranges, and if the year and month have a valid number of days.","This code defines a method called `isValidDate` that takes in three parameters (year, month, and day) and checks if the specified date is valid. It returns true if the date is valid, otherwise false. It also handles a special case for the year 1582 and month 10, where certain days don't exist."
56,convertDateValueToDate(long),convert date value to date date value convert an encoded date value to a java util date using the default timezone param date value the date value return the date ,Method,,org.h2.value.ValueDate+getDate(),"org.h2.util.DateTimeUtils+getMillis(TimeZone,int,int,int,int,int,int,int) org.h2.util.DateTimeUtils+getMillis(TimeZone,int,int,int,int,int,int,int) org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long) java.sql.Date+Date(long)",,450,13,9,"/** 
 * Convert an encoded date value to a java.util.Date, using the default timezone.
 * @param dateValue the date value
 * @return the date
 */
","/**
     * Convert an encoded date value to a java.util.Date, using the default
     * timezone.
     *
     * @param dateValue the date value
     * @return the date
     */
    public static Date convertDateValueToDate(long dateValue) {
        long millis = getMillis(null, yearFromDateValue(dateValue),
                monthFromDateValue(dateValue), dayFromDateValue(dateValue), 0,
                0, 0, 0);
        return new Date(millis);
    }",False,False,"This method converts an encoded date value to a java.util.Date object by extracting the year, month, and day from the encoded value and creating a new Date object with these values.","This code defines a method called `convertDateValueToDate` that takes a long value representing an encoded date and converts it to a `java.util.Date` object. The method uses helper functions to extract the year, month, and day from the encoded date value and then calculates the corresponding milliseconds. Finally, it creates a new `Date` object using the calculated milliseconds and returns it."
57,"convertDateTimeValueToMillis(TimeZone,long,long)",convert date time value to millis tz date value ms convert an encoded date time value to millis using the supplied timezone param tz the timezone param date value the date value param ms milliseconds of day return the date ,Method,,,"org.h2.util.DateTimeUtils+getMillis(TimeZone,int,int,int,int,int,int,int) org.h2.util.DateTimeUtils+getMillis(TimeZone,int,int,int,int,int,int,int) org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long)",,698,18,9,"/** 
 * Convert an encoded date-time value to millis, using the supplied timezone.
 * @param tz the timezone
 * @param dateValue the date value
 * @param ms milliseconds of day
 * @return the date
 */
","/**
     * Convert an encoded date-time value to millis, using the supplied timezone.
     *
     * @param tz the timezone
     * @param dateValue the date value
     * @param ms milliseconds of day
     * @return the date
     */
    public static long convertDateTimeValueToMillis(TimeZone tz, long dateValue, long ms) {
        long second = ms / 1000;
        ms -= second * 1000;
        int minute = (int) (second / 60);
        second -= minute * 60;
        int hour = minute / 60;
        minute -= hour * 60;
        return getMillis(tz, yearFromDateValue(dateValue), monthFromDateValue(dateValue), dayFromDateValue(dateValue),
                hour, minute, (int) second, (int) ms);
    }",False,False,"This method converts an encoded date-time value to milliseconds, using the supplied timezone. It takes the timezone, date value, and milliseconds of the day as input, and returns the corresponding date in milliseconds.","This code is a method that converts an encoded date-time value to milliseconds, using a specified timezone. It takes in the timezone, date value, and milliseconds of the day as parameters and returns the corresponding date in milliseconds."
58,"convertDateValueToTimestamp(long,long)",convert date value to timestamp date value time nanos convert an encoded date value time value to a timestamp using the default timezone param date value the date value param time nanos the nanoseconds since midnight return the timestamp ,Method,,org.h2.value.ValueTimestamp+getTimestamp(),,,621,15,9,"/** 
 * Convert an encoded date value / time value to a timestamp, using the default timezone.
 * @param dateValue the date value
 * @param timeNanos the nanoseconds since midnight
 * @return the timestamp
 */
","/**
     * Convert an encoded date value / time value to a timestamp, using the
     * default timezone.
     *
     * @param dateValue the date value
     * @param timeNanos the nanoseconds since midnight
     * @return the timestamp
     */
    public static Timestamp convertDateValueToTimestamp(long dateValue,
            long timeNanos) {
        Timestamp ts = new Timestamp(convertDateTimeValueToMillis(null, dateValue, timeNanos / 1_000_000));
        // This method expects the complete nanoseconds value including milliseconds
        ts.setNanos((int) (timeNanos % NANOS_PER_SECOND));
        return ts;
    }",False,False,"The function of this method is to convert an encoded date value and time value into a timestamp, using the default timezone. It takes in the date value and the nanoseconds since midnight, and returns the corresponding timestamp.","This code defines a method called `convertDateValueToTimestamp` that takes a date value and nanoseconds since midnight as input. It converts the date value and time nanoseconds to a timestamp, sets the nanoseconds value, and returns the resulting timestamp. The method assumes the default timezone."
59,"convertTimestampTimeZoneToTimestamp(long,long,short)",convert timestamp time zone to timestamp date value time nanos offset mins convert an encoded date value time value to a timestamp using the specified time zone offset param date value the date value param time nanos the nanoseconds since midnight param offset mins time zone offset in minutes return the timestamp ,Method,,org.h2.value.ValueTimestampTimeZone+getTimestamp(),"java.sql.Timestamp+Timestamp(long) org.h2.util.DateTimeUtils+getMillis(long,long,short) org.h2.util.DateTimeUtils+getMillis(long,long,short) java.sql.Timestamp+setNanos(int) java.sql.Timestamp+setNanos(int)",org.h2.util.DateTimeUtils+NANOS_PER_SECOND,587,14,9,"/** 
 * Convert an encoded date value / time value to a timestamp using the specified time zone offset.
 * @param dateValue the date value
 * @param timeNanos the nanoseconds since midnight
 * @param offsetMins time zone offset in minutes
 * @return the timestamp
 */
","/**
     * Convert an encoded date value / time value to a timestamp using the specified
     * time zone offset.
     *
     * @param dateValue the date value
     * @param timeNanos the nanoseconds since midnight
     * @param offsetMins time zone offset in minutes
     * @return the timestamp
     */
    public static Timestamp convertTimestampTimeZoneToTimestamp(long dateValue, long timeNanos, short offsetMins) {
        Timestamp ts = new Timestamp(getMillis(dateValue, timeNanos, offsetMins));
        ts.setNanos((int) (timeNanos % NANOS_PER_SECOND));
        return ts;
    }",False,False,This method converts an encoded date value and time value to a timestamp using a specified time zone offset. It returns the timestamp with the nanoseconds set.,"This code defines a method called `convertTimestampTimeZoneToTimestamp` that takes in a date value, time value in nanoseconds, and a time zone offset in minutes. It converts these values into a `Timestamp` object by calculating the milliseconds since the epoch and setting the nanoseconds. The resulting `Timestamp` object is then returned."
60,convertNanoToTime(long),convert nano to time nanos since midnight convert a time value to a time using the default timezone param nanos since midnight the nanoseconds since midnight return the time ,Method,,org.h2.value.ValueTime+getTime(),,,595,18,9,"/** 
 * Convert a time value to a time, using the default timezone.
 * @param nanosSinceMidnight the nanoseconds since midnight
 * @return the time
 */
","/**
     * Convert a time value to a time, using the default timezone.
     *
     * @param nanosSinceMidnight the nanoseconds since midnight
     * @return the time
     */
    public static Time convertNanoToTime(long nanosSinceMidnight) {
        long millis = nanosSinceMidnight / 1_000_000;
        long s = millis / 1_000;
        millis -= s * 1_000;
        long m = s / 60;
        s -= m * 60;
        long h = m / 60;
        m -= h * 60;
        long ms = getMillis(null, 1970, 1, 1, (int) (h % 24), (int) m, (int) s,
                (int) millis);
        return new Time(ms);
    }",False,False,"This method converts a time value represented in nanoseconds since midnight to a Time object, using the default timezone.","This code defines a method called `convertNanoToTime` that takes a long value representing nanoseconds since midnight and converts it to a `Time` object. The method performs calculations to extract the hours, minutes, seconds, and milliseconds from the nanoseconds value and then uses the `getMillis` method to obtain the milliseconds since the epoch (January 1, 1970). Finally, it creates a new `Time` object using the obtained milliseconds and returns it."
61,yearFromDateValue(long),year from date value x get the year from a date value param x the date value return the year ,Method,"convertDate(Value,Calendar) getDayOfYear(long) getWeekOfYear(long,int,int) getWeekYear(long,int,int) convertDateValueToDate(long) convertDateTimeValueToMillis(TimeZone,long,long) incrementDateValue(long) decrementDateValue(long)","org.h2.api.TimestampWithTimeZone+getYear() org.h2.util.LocalDateTimeUtils+localDateFromDateValue(long) org.h2.test.unit.TestDate+testAbsoluteDay() org.h2.test.unit.TestDateTimeUtils+testUTC2ValueImpl(TimeZone,GregorianCalendar)",,org.h2.util.DateTimeUtils+SHIFT_YEAR,209,9,9,"/** 
 * Get the year from a date value.
 * @param x the date value
 * @return the year
 */
","/**
     * Get the year from a date value.
     *
     * @param x the date value
     * @return the year
     */
    public static int yearFromDateValue(long x) {
        return (int) (x >>> SHIFT_YEAR);
    }",False,False,This method takes a date value as input and returns the year extracted from it. It uses a bitwise right shift operation to extract the year from the date value.,"This code defines a method named ""yearFromDateValue"" that takes a date value as input and returns the year extracted from it. The method uses a bitwise right shift operation to extract the year from the given value."
62,monthFromDateValue(long),month from date value x get the month from a date value param x the date value return the month 1 12 ,Method,"convertDate(Value,Calendar) getWeekOfYear(long,int,int) getWeekYear(long,int,int) convertDateValueToDate(long) convertDateTimeValueToMillis(TimeZone,long,long) incrementDateValue(long) decrementDateValue(long)","org.h2.api.TimestampWithTimeZone+getMonth() org.h2.expression.Function+getSimpleValue(Session,Value,Expression[],Value[]) org.h2.util.LocalDateTimeUtils+localDateFromDateValue(long) org.h2.test.unit.TestDate+testAbsoluteDay() org.h2.test.unit.TestDateTimeUtils+testUTC2ValueImpl(TimeZone,GregorianCalendar)",,org.h2.util.DateTimeUtils+SHIFT_MONTH,226,9,9,"/** 
 * Get the month from a date value.
 * @param x the date value
 * @return the month (1..12)
 */
","/**
     * Get the month from a date value.
     *
     * @param x the date value
     * @return the month (1..12)
     */
    public static int monthFromDateValue(long x) {
        return (int) (x >>> SHIFT_MONTH) & 15;
    }",False,False,This method extracts the month from a given date value and returns it as an integer between 1 and 12.,"The given code is a method named ""monthFromDateValue"" that takes a date value as input and returns the month (1 to 12) extracted from the input value. It uses bitwise shifting and masking operations to extract the month value from the given date value."
63,dayFromDateValue(long),day from date value x get the day of month from a date value param x the date value return the day 1 31 ,Method,"convertDate(Value,Calendar) getWeekOfYear(long,int,int) getWeekYear(long,int,int) convertDateValueToDate(long) convertDateTimeValueToMillis(TimeZone,long,long) incrementDateValue(long) decrementDateValue(long)","org.h2.api.TimestampWithTimeZone+getDay() org.h2.util.LocalDateTimeUtils+localDateFromDateValue(long) org.h2.test.unit.TestDate+testAbsoluteDay() org.h2.test.unit.TestDateTimeUtils+testUTC2ValueImpl(TimeZone,GregorianCalendar)",,,213,9,9,"/** 
 * Get the day of month from a date value.
 * @param x the date value
 * @return the day (1..31)
 */
","/**
     * Get the day of month from a date value.
     *
     * @param x the date value
     * @return the day (1..31)
     */
    public static int dayFromDateValue(long x) {
        return (int) (x & 31);
    }",False,False,This method extracts the day of the month from a given date value by performing a bitwise AND operation with 31 and returning the result.,"The given code is a method named ""dayFromDateValue"" that takes a date value as input and returns the day of the month (ranging from 1 to 31). It achieves this by performing a bitwise AND operation with the input value and 31, effectively extracting the last 5 bits which represent the day."
64,"dateValue(long,int,int)",date value year month day get the date value from a given date param year the year param month the month 1 12 param day the day 1 31 return the date value ,Method,"parseDateValue(String,int,int) dateValueFromDenormalizedDate(long,long,int) incrementDateValue(long) decrementDateValue(long)","org.h2.util.LocalDateTimeUtils+dateValueFromLocalDate(Object) org.h2.test.unit.TestDate+testAbsoluteDay() org.h2.test.unit.TestDateTimeUtils+testUTC2ValueImpl(TimeZone,GregorianCalendar) org.h2.test.unit.TestDateTimeUtils+testUTC2ValueImpl(TimeZone,GregorianCalendar)",,org.h2.util.DateTimeUtils+SHIFT_YEAR org.h2.util.DateTimeUtils+SHIFT_MONTH,333,11,9,"/** 
 * Get the date value from a given date.
 * @param year the year
 * @param month the month (1..12)
 * @param day the day (1..31)
 * @return the date value
 */
","/**
     * Get the date value from a given date.
     *
     * @param year the year
     * @param month the month (1..12)
     * @param day the day (1..31)
     * @return the date value
     */
    public static long dateValue(long year, int month, int day) {
        return (year << SHIFT_YEAR) | (month << SHIFT_MONTH) | day;
    }",False,False,"This method takes in a year, month, and day as parameters and returns a long value representing the date. The year is shifted left by a certain amount, the month is shifted left by a different amount, and then the day is combined with the shifted values using bitwise OR.","The code defines a method called ""dateValue"" that takes in three parameters: year, month, and day. It returns a long value that represents the date by combining the year, month, and day using bitwise shift operations."
65,"dateValueFromDenormalizedDate(long,long,int)",date value from denormalized date year month day get the date value from a given denormalized date with possible out of range values of month and or day used after addition or subtraction month or years to from it to get a valid date param year the year param month the month if out of range month and year will be normalized param day the day of the month if out of range it will be saturated return the date value ,Method,,org.h2.test.unit.TestDateTimeUtils+testDateValueFromDenormalizedDate() org.h2.test.unit.TestDateTimeUtils+testDateValueFromDenormalizedDate() org.h2.test.unit.TestDateTimeUtils+testDateValueFromDenormalizedDate() org.h2.test.unit.TestDateTimeUtils+testDateValueFromDenormalizedDate() org.h2.test.unit.TestDateTimeUtils+testDateValueFromDenormalizedDate(),"org.h2.util.DateTimeUtils+getDaysInMonth(int,int) org.h2.util.DateTimeUtils+getDaysInMonth(int,int) org.h2.util.DateTimeUtils+dateValue(long,int,int) org.h2.util.DateTimeUtils+dateValue(long,int,int)",,1016,31,9,"/** 
 * Get the date value from a given denormalized date with possible out of range values of month and/or day. Used after addition or subtraction month or years to (from) it to get a valid date.
 * @param year the year
 * @param month the month, if out of range month and year will be normalized
 * @param day the day of the month, if out of range it will be saturated
 * @return the date value
 */
","/**
     * Get the date value from a given denormalized date with possible out of range
     * values of month and/or day. Used after addition or subtraction month or years
     * to (from) it to get a valid date.
     *
     * @param year
     *            the year
     * @param month
     *            the month, if out of range month and year will be normalized
     * @param day
     *            the day of the month, if out of range it will be saturated
     * @return the date value
     */
    public static long dateValueFromDenormalizedDate(long year, long month, int day) {
        long mm1 = month - 1;
        long yd = mm1 / 12;
        if (mm1 < 0 && yd * 12 != mm1) {
            yd--;
        }
        int y = (int) (year + yd);
        int m = (int) (month - yd * 12);
        if (day < 1) {
            day = 1;
        } else {
            int max = getDaysInMonth(y, m);
            if (day > max) {
                day = max;
            }
        }
        return dateValue(y, m, day);
    }",False,False,"This method is used to get a valid date value from a given denormalized date, which may have out of range values for the month and/or day. It normalizes the month and year, and saturates the day if necessary, before returning the date value.","This code is a method that takes a denormalized date (with possible out of range values for month and/or day) and returns a valid date value. It normalizes the month and year, and saturates the day if it is out of range. The method then calls another method to calculate and return the date value."
66,dateValueFromDate(long),date value from date ms convert a utc datetime in millis to an encoded date in the default timezone param ms the milliseconds return the date value ,Method,,"org.h2.value.ValueDate+get(Date) org.h2.value.ValueDate+fromMillis(long) org.h2.value.ValueTimestamp+fromMillisNanos(long,int) org.h2.value.ValueTimestamp+fromMillis(long) org.h2.test.unit.TestDateTimeUtils+testUTC2ValueImpl(TimeZone,GregorianCalendar)",java.util.TimeZone+getOffset(long) org.h2.util.DateTimeUtils+getTimeZone() org.h2.util.DateTimeUtils+getTimeZone() java.util.TimeZone+getOffset(long) org.h2.util.DateTimeUtils+dateValueFromAbsoluteDay(long) org.h2.util.DateTimeUtils+dateValueFromAbsoluteDay(long),org.h2.util.DateTimeUtils+MILLIS_PER_DAY org.h2.util.DateTimeUtils+MILLIS_PER_DAY,517,16,9,"/** 
 * Convert a UTC datetime in millis to an encoded date in the default timezone.
 * @param ms the milliseconds
 * @return the date value
 */
","/**
     * Convert a UTC datetime in millis to an encoded date in the default
     * timezone.
     *
     * @param ms the milliseconds
     * @return the date value
     */
    public static long dateValueFromDate(long ms) {
        ms += getTimeZone().getOffset(ms);
        long absoluteDay = ms / MILLIS_PER_DAY;
        // Round toward negative infinity
        if (ms < 0 && (absoluteDay * MILLIS_PER_DAY != ms)) {
            absoluteDay--;
        }
        return dateValueFromAbsoluteDay(absoluteDay);
    }",False,False,"This method converts a UTC datetime in milliseconds to an encoded date in the default timezone. It adjusts the milliseconds based on the timezone offset, calculates the absolute day, and then returns the date value based on the absolute day.","This code is a method that converts a UTC datetime in milliseconds to an encoded date in the default timezone. It adjusts the milliseconds by the offset of the timezone, calculates the absolute day, and then returns the encoded date value."
67,dateValueFromCalendar(Calendar),date value from calendar cal calculate the encoded date value from a given calendar param cal the calendar return the date value ,Method,"convertDate(Date,Calendar)",,java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int),java.util.Calendar+YEAR java.util.Calendar+ERA java.util.GregorianCalendar+BC java.util.Calendar+MONTH java.util.Calendar+DAY_OF_MONTH org.h2.util.DateTimeUtils+SHIFT_YEAR org.h2.util.DateTimeUtils+SHIFT_MONTH,527,15,10,"/** 
 * Calculate the encoded date value from a given calendar.
 * @param cal the calendar
 * @return the date value
 */
","/**
     * Calculate the encoded date value from a given calendar.
     *
     * @param cal the calendar
     * @return the date value
     */
    private static long dateValueFromCalendar(Calendar cal) {
        int year = cal.get(Calendar.YEAR);
        if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
            year = 1 - year;
        }
        int month = cal.get(Calendar.MONTH) + 1;
        int day = cal.get(Calendar.DAY_OF_MONTH);
        return ((long) year << SHIFT_YEAR) | (month << SHIFT_MONTH) | day;
    }",False,False,"This method calculates the encoded date value from a given calendar by extracting the year, month, and day from the calendar and combining them into a single long value.",
68,nanosFromDate(long),nanos from date ms convert a time in milliseconds in utc to the nanoseconds since midnight in the default timezone param ms the milliseconds return the nanoseconds ,Method,,"org.h2.value.ValueTime+get(Time) org.h2.value.ValueTime+fromMillis(long) org.h2.value.ValueTimestamp+fromMillisNanos(long,int) org.h2.value.ValueTimestamp+fromMillis(long) org.h2.test.unit.TestDate+testDateTimeUtils() org.h2.test.unit.TestDate+testDateTimeUtils() org.h2.test.unit.TestDateTimeUtils+testUTC2ValueImpl(TimeZone,GregorianCalendar)",,,546,16,9,"/** 
 * Convert a time in milliseconds in UTC to the nanoseconds since midnight (in the default timezone).
 * @param ms the milliseconds
 * @return the nanoseconds
 */
","/**
     * Convert a time in milliseconds in UTC to the nanoseconds since midnight
     * (in the default timezone).
     *
     * @param ms the milliseconds
     * @return the nanoseconds
     */
    public static long nanosFromDate(long ms) {
        ms += getTimeZone().getOffset(ms);
        long absoluteDay = ms / MILLIS_PER_DAY;
        // Round toward negative infinity
        if (ms < 0 && (absoluteDay * MILLIS_PER_DAY != ms)) {
            absoluteDay--;
        }
        return (ms - absoluteDay * MILLIS_PER_DAY) * 1_000_000;
    }",False,False,This method converts a time in milliseconds in UTC to the nanoseconds since midnight in the default timezone.,"The `nanosFromDate` method takes a time in milliseconds in UTC and converts it to the nanoseconds since midnight in the default timezone. It adjusts the milliseconds for the timezone offset, calculates the absolute day, and then returns the nanoseconds by subtracting the absolute day in milliseconds from the adjusted milliseconds and multiplying by 1,000,000."
69,nanosFromCalendar(Calendar),nanos from calendar cal convert a java util calendar to nanoseconds since midnight param cal the calendar return the nanoseconds ,Method,"convertTime(Time,Calendar)",,java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int),java.util.Calendar+HOUR_OF_DAY java.util.Calendar+MINUTE java.util.Calendar+SECOND java.util.Calendar+MILLISECOND,469,13,10,"/** 
 * Convert a java.util.Calendar to nanoseconds since midnight.
 * @param cal the calendar
 * @return the nanoseconds
 */
","/**
     * Convert a java.util.Calendar to nanoseconds since midnight.
     *
     * @param cal the calendar
     * @return the nanoseconds
     */
    private static long nanosFromCalendar(Calendar cal) {
        int h = cal.get(Calendar.HOUR_OF_DAY);
        int m = cal.get(Calendar.MINUTE);
        int s = cal.get(Calendar.SECOND);
        int millis = cal.get(Calendar.MILLISECOND);
        return ((((((h * 60L) + m) * 60) + s) * 1000) + millis) * 1000000;
    }",False,False,This method converts a java.util.Calendar object to the number of nanoseconds since midnight.,"This code defines a private static method called ""nanosFromCalendar"" that takes a java.util.Calendar object as input and returns the number of nanoseconds since midnight represented by the calendar time. The method calculates the total number of milliseconds since midnight and converts it to nanoseconds by multiplying it by 1,000,000."
70,"normalizeTimestamp(long,long)",normalize timestamp absolute day nanos calculate the normalized timestamp param absolute day the absolute day param nanos the nanoseconds may be negative or larger than one day return the timestamp ,Method,,org.h2.value.Value+convertToTimestampTimeZone() org.h2.value.ValueTimestamp+add(Value) org.h2.value.ValueTimestamp+subtract(Value),"org.h2.value.ValueTimestamp+fromDateValueAndNanos(long,long) org.h2.value.ValueTimestamp+fromDateValueAndNanos(long,long) org.h2.util.DateTimeUtils+dateValueFromAbsoluteDay(long) org.h2.util.DateTimeUtils+dateValueFromAbsoluteDay(long)",org.h2.util.DateTimeUtils+NANOS_PER_DAY org.h2.util.DateTimeUtils+NANOS_PER_DAY org.h2.util.DateTimeUtils+NANOS_PER_DAY org.h2.util.DateTimeUtils+NANOS_PER_DAY org.h2.util.DateTimeUtils+NANOS_PER_DAY org.h2.util.DateTimeUtils+NANOS_PER_DAY,762,22,9,"/** 
 * Calculate the normalized timestamp.
 * @param absoluteDay the absolute day
 * @param nanos the nanoseconds (may be negative or larger than one day)
 * @return the timestamp
 */
","/**
     * Calculate the normalized timestamp.
     *
     * @param absoluteDay the absolute day
     * @param nanos the nanoseconds (may be negative or larger than one day)
     * @return the timestamp
     */
    public static ValueTimestamp normalizeTimestamp(long absoluteDay,
            long nanos) {
        if (nanos > NANOS_PER_DAY || nanos < 0) {
            long d;
            if (nanos > NANOS_PER_DAY) {
                d = nanos / NANOS_PER_DAY;
            } else {
                d = (nanos - NANOS_PER_DAY + 1) / NANOS_PER_DAY;
            }
            nanos -= d * NANOS_PER_DAY;
            absoluteDay += d;
        }
        return ValueTimestamp.fromDateValueAndNanos(
                dateValueFromAbsoluteDay(absoluteDay), nanos);
    }",False,False,"This method calculates the normalized timestamp by adjusting the given nanoseconds to be within the range of one day, and then combining it with the absolute day to create a timestamp.","This code is a method called `normalizeTimestamp` that takes in an absolute day and nanoseconds as parameters. It checks if the nanoseconds are greater than a day or negative, and if so, adjusts the absolute day and nanoseconds accordingly. It then returns a timestamp value based on the adjusted absolute day and nanoseconds."
71,"timestampTimeZoneFromLocalDateValueAndNanos(long,long)",timestamp time zone from local date value and nanos date value time nanos converts local date value and nanoseconds to timestamp with time zone param date value date value param time nanos nanoseconds since midnight return timestamp with time zone ,Method,,org.h2.value.Value+convertToTimestampTimeZone() org.h2.value.Value+convertToTimestampTimeZone() org.h2.value.Value+convertToTimestampTimeZone(),,,1052,25,9,"/** 
 * Converts local date value and nanoseconds to timestamp with time zone.
 * @param dateValue date value
 * @param timeNanos nanoseconds since midnight
 * @return timestamp with time zone
 */
","/**
     * Converts local date value and nanoseconds to timestamp with time zone.
     *
     * @param dateValue
     *            date value
     * @param timeNanos
     *            nanoseconds since midnight
     * @return timestamp with time zone
     */
    public static ValueTimestampTimeZone timestampTimeZoneFromLocalDateValueAndNanos(long dateValue, long timeNanos) {
        int timeZoneOffset = getTimeZoneOffsetMillis(null, dateValue, timeNanos);
        int offsetMins = timeZoneOffset / 60_000;
        int correction = timeZoneOffset % 60_000;
        if (correction != 0) {
            timeNanos -= correction;
            if (timeNanos < 0) {
                timeNanos += NANOS_PER_DAY;
                dateValue = decrementDateValue(dateValue);
            } else if (timeNanos >= NANOS_PER_DAY) {
                timeNanos -= NANOS_PER_DAY;
                dateValue = incrementDateValue(dateValue);
            }
        }
        return ValueTimestampTimeZone.fromDateValueAndNanos(dateValue, timeNanos, (short) offsetMins);
    }",False,False,"This method converts a local date value and nanoseconds to a timestamp with time zone. It calculates the time zone offset, adjusts the time if necessary, and returns the timestamp with the offset.","This code converts a local date value and nanoseconds to a timestamp with time zone. It calculates the time zone offset, adjusts the time if necessary, and returns the timestamp with the corresponding offset."
72,timestampTimeZoneFromMillis(long),timestamp time zone from millis ms param ms milliseconds since 1970 01 01 utc return timestamp with time zone with specified value and current time zone ,Method,,org.h2.util.CurrentTimestamp+get(),,,719,17,9,"/** 
 * @param ms milliseconds since 1970-01-01 (UTC)
 * @return timestamp with time zone with specified value and current time zone
 */
","/**
     * @param ms milliseconds since 1970-01-01 (UTC)
     * @return timestamp with time zone with specified value and current time zone
     */
    public static ValueTimestampTimeZone timestampTimeZoneFromMillis(long ms) {
        int offset = getTimeZone().getOffset(ms);
        ms += offset;
        long absoluteDay = ms / MILLIS_PER_DAY;
        // Round toward negative infinity
        if (ms < 0 && (absoluteDay * MILLIS_PER_DAY != ms)) {
            absoluteDay--;
        }
        return ValueTimestampTimeZone.fromDateValueAndNanos(
                dateValueFromAbsoluteDay(absoluteDay),
                (ms - absoluteDay * MILLIS_PER_DAY) * 1_000_000,
                (short) (offset / 60_000));
    }",False,False,"This method takes a number of milliseconds since 1970-01-01 (UTC) as input and returns a timestamp with time zone value. It calculates the offset of the current time zone, adjusts the input milliseconds by the offset, calculates the absolute day, and then constructs a ValueTimestampTimeZone object using the calculated values.","This code is a method that takes a timestamp in milliseconds since 1970-01-01 (UTC) and returns a timestamp with time zone. It calculates the offset of the current time zone, adjusts the input timestamp accordingly, and then constructs a new timestamp with the adjusted value and the current time zone's offset."
73,absoluteDayFromYear(long),absolute day from year year calculate the absolute day for a january 1 of the specified year param year the year return the absolute day ,Method,"getDayOfYear(long) getWeekOfYearBase(int,int,int)",org.h2.test.unit.TestDate+testAbsoluteDay(),,,551,19,9,"/** 
 * Calculate the absolute day for a January, 1 of the specified year.
 * @param year the year
 * @return the absolute day
 */
","/**
     * Calculate the absolute day for a January, 1 of the specified year.
     *
     * @param year
     *            the year
     * @return the absolute day
     */
    public static long absoluteDayFromYear(long year) {
        year--;
        long a = ((year * 1461L) >> 2) - 719_177;
        if (year < 1582) {
            // Julian calendar
            a += 13;
        } else if (year < 1900 || year > 2099) {
            // Gregorian calendar (slow mode)
            a += (year / 400) - (year / 100) + 15;
        }
        return a;
    }",False,False,This method calculates the absolute day for January 1 of a specified year. It takes the year as input and returns the absolute day. The calculation is based on the Julian and Gregorian calendars.,This code calculates the absolute day for January 1st of a given year. It uses the Julian calendar for years before 1582 and the Gregorian calendar for years between 1582 and 2099. The result is returned as a long value.
74,absoluteDayFromDateValue(long),absolute day from date value date value calculate the absolute day from an encoded date value param date value the date value return the absolute day ,Method,"getDayOfWeek(long,int) getDayOfYear(long) getWeekOfYear(long,int,int) getWeekYear(long,int,int) incrementDateValue(long) decrementDateValue(long)","org.h2.expression.IntervalOperation+getDateTimeWithInterval(Value,Value,int,int) org.h2.expression.IntervalOperation+getDateTimeWithInterval(Value,Value,int,int) org.h2.util.DateTimeFunctions+extract(String,Value) org.h2.value.ValueTimestamp+add(Value) org.h2.value.ValueTimestamp+add(Value) org.h2.value.ValueTimestamp+subtract(Value) org.h2.value.ValueTimestamp+subtract(Value) org.h2.test.unit.TestDate+testValueTimestamp() org.h2.test.unit.TestDate+testAbsoluteDay() org.h2.test.unit.TestDateTimeUtils+testUTC2ValueImpl(TimeZone,GregorianCalendar) org.h2.test.unit.TestDateTimeUtils+testUTC2ValueImpl(TimeZone,GregorianCalendar)",,,821,24,9,"/** 
 * Calculate the absolute day from an encoded date value.
 * @param dateValue the date value
 * @return the absolute day
 */
","/**
     * Calculate the absolute day from an encoded date value.
     *
     * @param dateValue the date value
     * @return the absolute day
     */
    public static long absoluteDayFromDateValue(long dateValue) {
        long y = yearFromDateValue(dateValue);
        int m = monthFromDateValue(dateValue);
        int d = dayFromDateValue(dateValue);
        if (m <= 2) {
            y--;
            m += 12;
        }
        long a = ((y * 1461L) >> 2) + DAYS_OFFSET[m - 3] + d - 719_484;
        if (y <= 1582 && ((y < 1582) || (m * 100 + d < 10_15))) {
            // Julian calendar (cutover at 1582-10-04 / 1582-10-15)
            a += 13;
        } else if (y < 1900 || y > 2099) {
            // Gregorian calendar (slow mode)
            a += (y / 400) - (y / 100) + 15;
        }
        return a;
    }",False,False,"This method calculates the absolute day from an encoded date value. It takes the date value as input and returns the absolute day. The method performs various calculations based on the year, month, and day of the date value to determine the absolute day.","This code calculates the absolute day from an encoded date value. It takes the year, month, and day from the encoded value and performs calculations based on the Julian and Gregorian calendars to determine the absolute day. The result is returned as a long value."
75,prolepticGregorianAbsoluteDayFromDateValue(long),proleptic gregorian absolute day from date value date value calculate the absolute day from an encoded date value in proleptic gregorian calendar param date value the date value return the absolute day in proleptic gregorian calendar ,Method,,,,,727,22,9,"/** 
 * Calculate the absolute day from an encoded date value in proleptic Gregorian calendar.
 * @param dateValue the date value
 * @return the absolute day in proleptic Gregorian calendar
 */
","/**
     * Calculate the absolute day from an encoded date value in proleptic Gregorian
     * calendar.
     *
     * @param dateValue the date value
     * @return the absolute day in proleptic Gregorian calendar
     */
    public static long prolepticGregorianAbsoluteDayFromDateValue(long dateValue) {
        long y = yearFromDateValue(dateValue);
        int m = monthFromDateValue(dateValue);
        int d = dayFromDateValue(dateValue);
        if (m <= 2) {
            y--;
            m += 12;
        }
        long a = ((y * 1461L) >> 2) + DAYS_OFFSET[m - 3] + d - 719_484;
        if (y < 1900 || y > 2099) {
            // Slow mode
            a += (y / 400) - (y / 100) + 15;
        }
        return a;
    }",False,False,"This method calculates the absolute day in the proleptic Gregorian calendar from an encoded date value. It takes the year, month, and day from the date value and performs calculations to determine the absolute day. It also includes a slow mode for years outside the range 1900-2099.","This code calculates the absolute day in the proleptic Gregorian calendar from an encoded date value. It handles cases where the year is before 1900 or after 2099 separately, using a faster calculation for years within that range."
76,dateValueFromAbsoluteDay(long),date value from absolute day absolute day calculate the encoded date value from an absolute day param absolute day the absolute day return the date value ,Method,"dateValueFromDate(long) normalizeTimestamp(long,long) incrementDateValue(long) decrementDateValue(long)","org.h2.expression.IntervalOperation+getDateTimeWithInterval(Value,Value,int,int) org.h2.expression.IntervalOperation+getDateTimeWithInterval(Value,Value,int,int) org.h2.test.unit.TestDate+testAbsoluteDay() org.h2.test.unit.TestDate+testAbsoluteDay() org.h2.test.unit.TestDateTimeUtils+testUTC2ValueImpl(TimeZone,GregorianCalendar)",,,1130,40,9,"/** 
 * Calculate the encoded date value from an absolute day.
 * @param absoluteDay the absolute day
 * @return the date value
 */
","/**
     * Calculate the encoded date value from an absolute day.
     *
     * @param absoluteDay the absolute day
     * @return the date value
     */
    public static long dateValueFromAbsoluteDay(long absoluteDay) {
        long d = absoluteDay + 719_468;
        long y100, offset;
        if (d > 578_040) {
            // Gregorian calendar
            long y400 = d / 146_097;
            d -= y400 * 146_097;
            y100 = d / 36_524;
            d -= y100 * 36_524;
            offset = y400 * 400 + y100 * 100;
        } else {
            // Julian calendar
            y100 = 0;
            d += 292_200_000_002L;
            offset = -800_000_000;
        }
        long y4 = d / 1461;
        d -= y4 * 1461;
        long y = d / 365;
        d -= y * 365;
        if (d == 0 && (y == 4 || y100 == 4)) {
            y--;
            d += 365;
        }
        y += offset + y4 * 4;
        // month of a day
        int m = ((int) d * 2 + 1) * 5 / 306;
        d -= DAYS_OFFSET[m] - 1;
        if (m >= 10) {
            y++;
            m -= 12;
        }
        return dateValue(y, m + 3, (int) d);
    }",False,False,"This method calculates the encoded date value from an absolute day, taking into account both the Gregorian and Julian calendars. It returns the date value in the form of a long integer.","This code calculates the encoded date value from an absolute day. It handles both the Gregorian and Julian calendars, and accounts for leap years. The resulting date value is returned."
77,incrementDateValue(long),increment date value date value return the next date value param date value the date value return the next date value ,Method,,"org.h2.value.ValueTimestamp+convertScale(boolean,int) org.h2.value.ValueTimestampTimeZone+convertScale(boolean,int) org.h2.test.unit.TestDate+testAbsoluteDay()","org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+dateValueFromAbsoluteDay(long) org.h2.util.DateTimeUtils+dateValueFromAbsoluteDay(long) org.h2.util.DateTimeUtils+absoluteDayFromDateValue(long) org.h2.util.DateTimeUtils+absoluteDayFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+getDaysInMonth(int,int) org.h2.util.DateTimeUtils+getDaysInMonth(int,int) org.h2.util.DateTimeUtils+dateValue(long,int,int) org.h2.util.DateTimeUtils+dateValue(long,int,int)",,874,29,9,"/** 
 * Return the next date value.
 * @param dateValue the date value
 * @return the next date value
 */
","/**
     * Return the next date value.
     *
     * @param dateValue
     *            the date value
     * @return the next date value
     */
    public static long incrementDateValue(long dateValue) {
        int year = yearFromDateValue(dateValue);
        if (year == 1582) {
            // Use slow way instead of rarely needed large custom code.
            return dateValueFromAbsoluteDay(absoluteDayFromDateValue(dateValue) + 1);
        }
        int day = dayFromDateValue(dateValue);
        if (day < 28) {
            return dateValue + 1;
        }
        int month = monthFromDateValue(dateValue);
        if (day < getDaysInMonth(year, month)) {
            return dateValue + 1;
        }
        if (month < 12) {
            month++;
        } else {
            month = 1;
            year++;
        }
        return dateValue(year, month, 1);
    }",False,False,This method increments a given date value by one day and returns the updated date value. It handles special cases for the year 1582 and checks if the current day is the last day of the month.,"The method `incrementDateValue` takes a date value as input and returns the next date value. It handles special cases for the year 1582 and checks if the current day is less than the number of days in the current month. If not, it increments the month and year accordingly."
78,decrementDateValue(long),decrement date value date value return the previous date value param date value the date value return the previous date value ,Method,,org.h2.test.unit.TestDate+testAbsoluteDay(),"org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+yearFromDateValue(long) org.h2.util.DateTimeUtils+dateValueFromAbsoluteDay(long) org.h2.util.DateTimeUtils+dateValueFromAbsoluteDay(long) org.h2.util.DateTimeUtils+absoluteDayFromDateValue(long) org.h2.util.DateTimeUtils+absoluteDayFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long) org.h2.util.DateTimeUtils+dayFromDateValue(long) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+monthFromDateValue(long) org.h2.util.DateTimeUtils+dateValue(long,int,int) org.h2.util.DateTimeUtils+dateValue(long,int,int) org.h2.util.DateTimeUtils+getDaysInMonth(int,int) org.h2.util.DateTimeUtils+getDaysInMonth(int,int)",,791,25,9,"/** 
 * Return the previous date value.
 * @param dateValue the date value
 * @return the previous date value
 */
","/**
     * Return the previous date value.
     *
     * @param dateValue
     *            the date value
     * @return the previous date value
     */
    public static long decrementDateValue(long dateValue) {
        int year = yearFromDateValue(dateValue);
        if (year == 1582) {
            // Use slow way instead of rarely needed large custom code.
            return dateValueFromAbsoluteDay(absoluteDayFromDateValue(dateValue) - 1);
        }
        if (dayFromDateValue(dateValue) > 1) {
            return dateValue - 1;
        }
        int month = monthFromDateValue(dateValue);
        if (month > 1) {
            month--;
        } else {
            month = 12;
            year--;
        }
        return dateValue(year, month, getDaysInMonth(year, month));
    }",False,False,This method decrements a given date value by one day and returns the new date value. It handles special cases for the year 1582 and checks if the day is the first day of the month to determine the new date value.,"This code is a method called `decrementDateValue` that takes a `long` value representing a date and returns the previous date value. It handles special cases for the year 1582 and checks if the day is greater than 1 before decrementing it. If the day is 1, it decrements the month and year accordingly."
79,"appendDate(StringBuilder,long)",append date buff date value append a date to the string builder param buff the target string builder param date value the date value ,Method,"timestampTimeZoneToString(long,long,short)",org.h2.value.ValueDate+getString() org.h2.value.ValueTimestamp+getString(),,,658,20,9,"/** 
 * Append a date to the string builder.
 * @param buff the target string builder
 * @param dateValue the date value
 */
","/**
     * Append a date to the string builder.
     *
     * @param buff the target string builder
     * @param dateValue the date value
     */
    public static void appendDate(StringBuilder buff, long dateValue) {
        int y = yearFromDateValue(dateValue);
        int m = monthFromDateValue(dateValue);
        int d = dayFromDateValue(dateValue);
        if (y > 0 && y < 10_000) {
            StringUtils.appendZeroPadded(buff, 4, y);
        } else {
            buff.append(y);
        }
        buff.append('-');
        StringUtils.appendZeroPadded(buff, 2, m);
        buff.append('-');
        StringUtils.appendZeroPadded(buff, 2, d);
    }",False,False,"The function appends a date in the format ""yyyy-mm-dd"" to a StringBuilder object, using the provided date value.","This code defines a method called `appendDate` that takes a `StringBuilder` and a `long` value representing a date. It extracts the year, month, and day from the date value and appends them to the `StringBuilder` in the format ""yyyy-mm-dd"". The year is zero-padded to 4 digits if it is between 1 and 9999."
80,"appendTime(StringBuilder,long)",append time buff nanos append a time to the string builder param buff the target string builder param nanos the time in nanoseconds ,Method,"timestampTimeZoneToString(long,long,short)",org.h2.value.ValueTime+fromNanos(long) org.h2.value.ValueTime+getString() org.h2.value.ValueTimestamp+getString(),,,1323,39,9,"/** 
 * Append a time to the string builder.
 * @param buff the target string builder
 * @param nanos the time in nanoseconds
 */
","/**
     * Append a time to the string builder.
     *
     * @param buff the target string builder
     * @param nanos the time in nanoseconds
     */
    public static void appendTime(StringBuilder buff, long nanos) {
        if (nanos < 0) {
            buff.append('-');
            nanos = -nanos;
        }
        /*
         * nanos now either in range from 0 to Long.MAX_VALUE or equals to
         * Long.MIN_VALUE. We need to divide nanos by 1000000 with unsigned division to
         * get correct result. The simplest way to do this with such constraints is to
         * divide -nanos by -1000000.
         */
        long ms = -nanos / -1_000_000;
        nanos -= ms * 1_000_000;
        long s = ms / 1_000;
        ms -= s * 1_000;
        long m = s / 60;
        s -= m * 60;
        long h = m / 60;
        m -= h * 60;
        StringUtils.appendZeroPadded(buff, 2, h);
        buff.append(':');
        StringUtils.appendZeroPadded(buff, 2, m);
        buff.append(':');
        StringUtils.appendZeroPadded(buff, 2, s);
        if (ms > 0 || nanos > 0) {
            buff.append('.');
            StringUtils.appendZeroPadded(buff, 3, ms);
            if (nanos > 0) {
                StringUtils.appendZeroPadded(buff, 6, nanos);
            }
            stripTrailingZeroes(buff);
        }
    }",False,False,"This method appends a time (in the format HH:MM:SS.MMMNNN) to a StringBuilder object. It takes a long value representing the time in nanoseconds and converts it to hours, minutes, seconds, milliseconds, and nanoseconds before appending it to the StringBuilder.","This code defines a method called ""appendTime"" that takes a StringBuilder and a time in nanoseconds as parameters. It converts the nanoseconds into hours, minutes, seconds, milliseconds, and nanoseconds, and appends them to the StringBuilder in the format ""hh:mm:ss.SSSnnn""."
81,stripTrailingZeroes(StringBuilder),strip trailing zeroes buff ,Method,"appendNanos(StringBuilder,long)",,java.lang.StringBuilder+length() java.lang.StringBuilder+length() java.lang.StringBuilder+charAt(int) java.lang.StringBuilder+charAt(int) java.lang.StringBuilder+charAt(int) java.lang.StringBuilder+charAt(int) java.lang.StringBuilder+setLength(int) java.lang.StringBuilder+setLength(int),,274,9,10,,"private static void stripTrailingZeroes(StringBuilder buff) {
        int i = buff.length() - 1;
        if (buff.charAt(i) == '0') {
            while (buff.charAt(--i) == '0') {
                // do nothing
            }
            buff.setLength(i + 1);
        }
    }",False,False,The function of the method is to remove any trailing zeroes from a StringBuilder object.,"The code defines a private static method called ""stripTrailingZeroes"" that takes a StringBuilder object as a parameter. It removes any trailing zeroes from the StringBuilder by iterating backwards through the characters and shortening the StringBuilder's length until a non-zero character is encountered."
82,"appendTimeZone(StringBuilder,short)",append time zone buff tz append a time zone to the string builder param buff the target string builder param tz the time zone in minutes ,Method,"timestampTimeZoneToString(long,long,short)",,"java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long)",,623,22,9,"/** 
 * Append a time zone to the string builder.
 * @param buff the target string builder
 * @param tz the time zone in minutes
 */
","/**
     * Append a time zone to the string builder.
     *
     * @param buff the target string builder
     * @param tz the time zone in minutes
     */
    public static void appendTimeZone(StringBuilder buff, short tz) {
        if (tz < 0) {
            buff.append('-');
            tz = (short) -tz;
        } else {
            buff.append('+');
        }
        int hours = tz / 60;
        tz -= hours * 60;
        int mins = tz;
        StringUtils.appendZeroPadded(buff, 2, hours);
        if (mins != 0) {
            buff.append(':');
            StringUtils.appendZeroPadded(buff, 2, mins);
        }
    }",False,False,"This method appends a time zone to a string builder. It takes a target string builder and a time zone in minutes as parameters. The method converts the time zone to hours and minutes, and appends it to the string builder in the format ""+HH:MM"" or ""-HH:MM"" depending on the sign of the time zone.","This code defines a method called `appendTimeZone` that appends a time zone to a given `StringBuilder` object. The time zone is specified in minutes and is formatted as ""+HH:MM"" or ""-HH:MM"" depending on whether it is positive or negative."
83,"timestampTimeZoneToString(long,long,short)",timestamp time zone to string date value time nanos time zone offset mins formats timestamp with time zone as string param date value the year month day bit field param time nanos nanoseconds since midnight param time zone offset mins the time zone offset in minutes return formatted string ,Method,,org.h2.api.TimestampWithTimeZone+toString() org.h2.value.ValueTimestampTimeZone+getString(),"java.lang.StringBuilder+StringBuilder(int) org.h2.util.DateTimeUtils+appendDate(StringBuilder,long) org.h2.util.DateTimeUtils+appendDate(StringBuilder,long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) org.h2.util.DateTimeUtils+appendTime(StringBuilder,long) org.h2.util.DateTimeUtils+appendTime(StringBuilder,long) org.h2.util.DateTimeUtils+appendTimeZone(StringBuilder,short) org.h2.util.DateTimeUtils+appendTimeZone(StringBuilder,short) java.lang.StringBuilder+toString() java.lang.StringBuilder+toString()",org.h2.value.ValueTimestampTimeZone+MAXIMUM_PRECISION,659,16,9,"/** 
 * Formats timestamp with time zone as string.
 * @param dateValue the year-month-day bit field
 * @param timeNanos nanoseconds since midnight
 * @param timeZoneOffsetMins the time zone offset in minutes
 * @return formatted string
 */
","/**
     * Formats timestamp with time zone as string.
     *
     * @param dateValue the year-month-day bit field
     * @param timeNanos nanoseconds since midnight
     * @param timeZoneOffsetMins the time zone offset in minutes
     * @return formatted string
     */
    public static String timestampTimeZoneToString(long dateValue, long timeNanos, short timeZoneOffsetMins) {
        StringBuilder buff = new StringBuilder(ValueTimestampTimeZone.MAXIMUM_PRECISION);
        appendDate(buff, dateValue);
        buff.append(' ');
        appendTime(buff, timeNanos);
        appendTimeZone(buff, timeZoneOffsetMins);
        return buff.toString();
    }",False,False,"The function of this method is to format a timestamp with time zone as a string. It takes in a year-month-day bit field, nanoseconds since midnight, and a time zone offset in minutes, and returns a formatted string representation of the timestamp with time zone.","This code defines a method called `timestampTimeZoneToString` that takes in a date value, time in nanoseconds, and a time zone offset in minutes. It formats these values into a string representation of a timestamp with time zone and returns it."
84,timeZoneNameFromOffsetMins(int),time zone name from offset mins offset mins generates time zone name for the specified offset in minutes param offset mins offset in minutes return time zone name ,Method,,"org.h2.util.ToChar+getTimeZone(Value,boolean)","java.lang.StringBuilder+StringBuilder(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) java.lang.StringBuilder+toString() java.lang.StringBuilder+toString()",,717,24,9,"/** 
 * Generates time zone name for the specified offset in minutes.
 * @param offsetMins offset in minutes
 * @return time zone name
 */
","/**
     * Generates time zone name for the specified offset in minutes.
     *
     * @param offsetMins
     *            offset in minutes
     * @return time zone name
     */
    public static String timeZoneNameFromOffsetMins(int offsetMins) {
        if (offsetMins == 0) {
            return ""UTC"";
        }
        StringBuilder b = new StringBuilder(9);
        b.append(""GMT"");
        if (offsetMins < 0) {
            b.append('-');
            offsetMins = -offsetMins;
        } else {
            b.append('+');
        }
        StringUtils.appendZeroPadded(b, 2, offsetMins / 60);
        b.append(':');
        StringUtils.appendZeroPadded(b, 2, offsetMins % 60);
        return b.toString();
    }",False,False,This method generates a time zone name based on the specified offset in minutes. It returns the time zone name as a string.,"This code is a method that generates a time zone name based on the specified offset in minutes. It returns the time zone name in the format ""GMT¬±HH:MM"" where ¬± indicates the direction of the offset and HH:MM represents the offset in hours and minutes. If the offset is 0, it returns ""UTC""."
85,"parseFormattedInterval(IntervalQualifier,String)",parse formatted interval qualifier s parses the specified string as code interval value param qualifier the default qualifier to use if string does not have one param s the string with type information to parse return the interval value type of value can be different from the specified qualifier ,Method,,org.h2.value.Value+convertToIntervalYearMonth(int) org.h2.value.Value+convertToIntervalDayTime(int),"org.h2.util.DateTimeUtils+skipWS(String,int) org.h2.util.DateTimeUtils+skipWS(String,int) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+skipWS(String,int) org.h2.util.DateTimeUtils+skipWS(String,int) java.lang.String+charAt(int) java.lang.String+charAt(int) org.h2.util.DateTimeUtils+skipWS(String,int) org.h2.util.DateTimeUtils+skipWS(String,int) java.lang.String+charAt(int) java.lang.String+charAt(int) org.h2.util.DateTimeUtils+skipWS(String,int) org.h2.util.DateTimeUtils+skipWS(String,int) java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.String+length() java.lang.String+length() java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.String+substring(int,int) java.lang.String+substring(int,int) org.h2.util.DateTimeUtils+skipWS(String,int) org.h2.util.DateTimeUtils+skipWS(String,int) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWS(String,int) org.h2.util.DateTimeUtils+skipWS(String,int) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWS(String,int) org.h2.util.DateTimeUtils+skipWS(String,int) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWS(String,int) org.h2.util.DateTimeUtils+skipWS(String,int) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWS(String,int) org.h2.util.DateTimeUtils+skipWS(String,int) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) java.lang.String+regionMatches(boolean,int,String,int,int) java.lang.String+regionMatches(boolean,int,String,int,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+skipWSEnd(String,int) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) org.h2.util.DateTimeUtils+parseInterval(IntervalQualifier,boolean,String) java.lang.IllegalArgumentException+IllegalArgumentException(String)",,5158,128,9,"/** 
 * Parses the specified string as  {@code INTERVAL} value.
 * @param qualifier the default qualifier to use if string does not have one
 * @param s the string with type information to parse
 * @return the interval value.Type of value can be different from the specified qualifier.
 */
","/**
     * Parses the specified string as {@code INTERVAL} value.
     *
     * @param qualifier the default qualifier to use if string does not have one
     * @param s the string with type information to parse
     * @return the interval value.
     *         Type of value can be different from the specified qualifier.
     */
    public static ValueInterval parseFormattedInterval(IntervalQualifier qualifier, String s) {
        int i = 0;
        i = skipWS(s, i);
        if (!s.regionMatches(true, i, ""INTERVAL"", 0, 8)) {
            return parseInterval(qualifier, false, s);
        }
        i = skipWS(s, i + 8);
        boolean negative = false;
        char ch = s.charAt(i);
        if (ch == '-') {
            negative = true;
            i = skipWS(s, i + 1);
            ch = s.charAt(i);
        } else if (ch == '+') {
            i = skipWS(s, i + 1);
            ch = s.charAt(i);
        }
        if (ch != '\'') {
            throw new IllegalArgumentException(s);
        }
        int start = ++i;
        int l = s.length();
        for (;;) {
            if (i == l) {
                throw new IllegalArgumentException(s);
            }
            if (s.charAt(i) == '\'') {
                break;
            }
            i++;
        }
        String v = s.substring(start, i);
        i = skipWS(s, i + 1);
        if (s.regionMatches(true, i, ""YEAR"", 0, 4)) {
            i += 4;
            int j = skipWSEnd(s, i);
            if (j == l) {
                return parseInterval(IntervalQualifier.YEAR, negative, v);
            }
            if (j > i && s.regionMatches(true, j, ""TO"", 0, 2)) {
                j += 2;
                i = skipWS(s, j);
                if (i > j && s.regionMatches(true, i, ""MONTH"", 0, 5)) {
                    if (skipWSEnd(s, i + 5) == l) {
                        return parseInterval(IntervalQualifier.YEAR_TO_MONTH, negative, v);
                    }
                }
            }
        } else if (s.regionMatches(true, i, ""MONTH"", 0, 5)) {
            if (skipWSEnd(s, i + 5) == l) {
                return parseInterval(IntervalQualifier.MONTH, negative, v);
            }
        } if (s.regionMatches(true, i, ""DAY"", 0, 3)) {
            i += 3;
            int j = skipWSEnd(s, i);
            if (j == l) {
                return parseInterval(IntervalQualifier.DAY, negative, v);
            }
            if (j > i && s.regionMatches(true, j, ""TO"", 0, 2)) {
                j += 2;
                i = skipWS(s, j);
                if (i > j) {
                    if (s.regionMatches(true, i, ""HOUR"", 0, 4)) {
                        if (skipWSEnd(s, i + 4) == l) {
                            return parseInterval(IntervalQualifier.DAY_TO_HOUR, negative, v);
                        }
                    } else if (s.regionMatches(true, i, ""MINUTE"", 0, 6)) {
                        if (skipWSEnd(s, i + 6) == l) {
                            return parseInterval(IntervalQualifier.DAY_TO_MINUTE, negative, v);
                        }
                    } else if (s.regionMatches(true, i, ""SECOND"", 0, 6)) {
                        if (skipWSEnd(s, i + 6) == l) {
                            return parseInterval(IntervalQualifier.DAY_TO_SECOND, negative, v);
                        }
                    }
                }
            }
        } if (s.regionMatches(true, i, ""HOUR"", 0, 4)) {
            i += 4;
            int j = skipWSEnd(s, i);
            if (j == l) {
                return parseInterval(IntervalQualifier.HOUR, negative, v);
            }
            if (j > i && s.regionMatches(true, j, ""TO"", 0, 2)) {
                j += 2;
                i = skipWS(s, j);
                if (i > j) {
                    if (s.regionMatches(true, i, ""MINUTE"", 0, 6)) {
                        if (skipWSEnd(s, i + 6) == l) {
                            return parseInterval(IntervalQualifier.HOUR_TO_MINUTE, negative, v);
                        }
                    } else if (s.regionMatches(true, i, ""SECOND"", 0, 6)) {
                        if (skipWSEnd(s, i + 6) == l) {
                            return parseInterval(IntervalQualifier.HOUR_TO_SECOND, negative, v);
                        }
                    }
                }
            }
        } if (s.regionMatches(true, i, ""MINUTE"", 0, 6)) {
            i += 6;
            int j = skipWSEnd(s, i);
            if (j == l) {
                return parseInterval(IntervalQualifier.MINUTE, negative, v);
            }
            if (j > i && s.regionMatches(true, j, ""TO"", 0, 2)) {
                j += 2;
                i = skipWS(s, j);
                if (i > j && s.regionMatches(true, i, ""SECOND"", 0, 6)) {
                    if (skipWSEnd(s, i + 6) == l) {
                        return parseInterval(IntervalQualifier.MINUTE_TO_SECOND, negative, v);
                    }
                }
            }
        } if (s.regionMatches(true, i, ""SECOND"", 0, 6)) {
            if (skipWSEnd(s, i + 6) == l) {
                return parseInterval(IntervalQualifier.SECOND, negative, v);
            }
        }
        throw new IllegalArgumentException(s);
    }",True,True,The function of the method is to parse a string as an INTERVAL value and return the corresponding interval value. The method takes a qualifier and a string as input and returns the interval value. The type of the value can be different from the specified qualifier.,"The code is a method called `parseFormattedInterval` that takes an `IntervalQualifier` and a string as input. It parses the string to extract an interval value, which can have different types depending on the specified qualifier. If the string does not start with ""INTERVAL"", it calls another method called `parseInterval` to parse the interval value."
86,"skipWS(String,int)",skip ws s i ,Method,"parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String)",,java.lang.String+length() java.lang.String+length() java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.Character+isWhitespace(char) java.lang.Character+isWhitespace(char) java.lang.String+charAt(int) java.lang.String+charAt(int),,293,10,10,,"private static int skipWS(String s, int i) {
        for (int l = s.length(); ; i++) {
            if (i == l) {
                throw new IllegalArgumentException(s);
            }
            if (!Character.isWhitespace(s.charAt(i))) {
                return i;
            }
        }
    }",True,True,"The function of the method is to skip any whitespace characters in a given string starting from a specified index, and return the index of the first non-whitespace character. If there are no non-whitespace characters, it throws an exception.","The code defines a private static method called ""skipWS"" that takes a string and an integer as input. It iterates through the characters of the string starting from the given index, and returns the index of the first non-whitespace character encountered. If no non-whitespace character is found, it throws an IllegalArgumentException with the input string as the message."
87,"skipWSEnd(String,int)",skip ws end s i ,Method,"parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String)",,java.lang.String+length() java.lang.String+length() java.lang.Character+isWhitespace(char) java.lang.Character+isWhitespace(char) java.lang.String+charAt(int) java.lang.String+charAt(int),,267,10,10,,"private static int skipWSEnd(String s, int i) {
        for (int l = s.length(); ; i++) {
            if (i == l) {
                return i;
            }
            if (!Character.isWhitespace(s.charAt(i))) {
                return i;
            }
        }
    }",True,True,The function of the method is to skip any whitespace characters at the end of a given string and return the index of the first non-whitespace character.,"The given code is a method named ""skipWSEnd"" that takes a string ""s"" and an integer ""i"" as parameters. It iterates through the characters of the string starting from index ""i"" until it finds a non-whitespace character or reaches the end of the string, and returns the index of that character."
88,"parseInterval(IntervalQualifier,boolean,String)",parse interval qualifier negative s parses the specified string as code interval value param qualifier the qualifier of interval param negative whether the interval is negative param s the string to parse return the interval value ,Method,"parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String) parseFormattedInterval(IntervalQualifier,String)","org.h2.command.Parser+readInterval() org.h2.test.unit.TestDateTimeUtils+testParseIntervalImpl(IntervalQualifier,boolean,long,long,String,String)","org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) java.lang.String+length() java.lang.String+length() java.lang.String+indexOf(int) java.lang.String+indexOf(int) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) java.lang.String+length() java.lang.String+length() org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseNanos(String,int,int) org.h2.util.DateTimeUtils+parseNanos(String,int,int) java.lang.String+length() java.lang.String+length() org.h2.util.DateTimeUtils+parseInterval2(IntervalQualifier,String,char,int,boolean) org.h2.util.DateTimeUtils+parseInterval2(IntervalQualifier,String,char,int,boolean) org.h2.util.DateTimeUtils+parseInterval2(IntervalQualifier,String,char,int,boolean) org.h2.util.DateTimeUtils+parseInterval2(IntervalQualifier,String,char,int,boolean) java.lang.String+indexOf(int) java.lang.String+indexOf(int) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) java.lang.String+length() java.lang.String+length() org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) java.lang.String+length() java.lang.String+length() org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) java.lang.String+length() java.lang.String+length() java.lang.String+indexOf(int) java.lang.String+indexOf(int) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) java.lang.String+length() java.lang.String+length() org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) java.lang.String+length() java.lang.String+length() java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) java.lang.String+length() java.lang.String+length() org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemainingSeconds(String,int) org.h2.util.DateTimeUtils+parseIntervalRemainingSeconds(String,int) org.h2.util.DateTimeUtils+parseInterval2(IntervalQualifier,String,char,int,boolean) org.h2.util.DateTimeUtils+parseInterval2(IntervalQualifier,String,char,int,boolean) java.lang.String+indexOf(int) java.lang.String+indexOf(int) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) java.lang.String+length() java.lang.String+length() org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) java.lang.String+length() java.lang.String+length() org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemainingSeconds(String,int) org.h2.util.DateTimeUtils+parseIntervalRemainingSeconds(String,int) java.lang.String+indexOf(int) java.lang.String+indexOf(int) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) java.lang.String+length() java.lang.String+length() org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalRemainingSeconds(String,int) org.h2.util.DateTimeUtils+parseIntervalRemainingSeconds(String,int) java.lang.IllegalArgumentException+IllegalArgumentException() org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long)",org.h2.util.DateTimeUtils+NANOS_PER_HOUR org.h2.util.DateTimeUtils+NANOS_PER_HOUR org.h2.util.DateTimeUtils+NANOS_PER_MINUTE org.h2.util.DateTimeUtils+NANOS_PER_HOUR org.h2.util.DateTimeUtils+NANOS_PER_MINUTE org.h2.util.DateTimeUtils+NANOS_PER_MINUTE org.h2.util.DateTimeUtils+NANOS_PER_MINUTE java.lang.Long+MIN_VALUE,4803,118,9,"/** 
 * Parses the specified string as  {@code INTERVAL} value.
 * @param qualifier the qualifier of interval
 * @param negative whether the interval is negative
 * @param s the string to parse
 * @return the interval value
 */
","/**
     * Parses the specified string as {@code INTERVAL} value.
     *
     * @param qualifier the qualifier of interval
     * @param negative whether the interval is negative
     * @param s the string to parse
     * @return the interval value
     */
    public static ValueInterval parseInterval(IntervalQualifier qualifier, boolean negative, String s) {
        long leading, remaining;
        switch (qualifier) {
        case YEAR:
        case MONTH:
        case DAY:
        case HOUR:
        case MINUTE:
            leading = parseIntervalLeading(s, 0, s.length(), negative);
            remaining = 0;
            break;
        case SECOND: {
            int dot = s.indexOf('.');
            if (dot < 0) {
                leading = parseIntervalLeading(s, 0, s.length(), negative);
                remaining = 0;
            } else {
                leading = parseIntervalLeading(s, 0, dot, negative);
                remaining = parseNanos(s, dot + 1, s.length());
            }
            break;
        }
        case YEAR_TO_MONTH:
            return parseInterval2(qualifier, s, '-', 11, negative);
        case DAY_TO_HOUR:
            return parseInterval2(qualifier, s, ' ', 23, negative);
        case DAY_TO_MINUTE: {
            int space = s.indexOf(' ');
            if (space < 0) {
                leading = parseIntervalLeading(s, 0, s.length(), negative);
                remaining = 0;
            } else {
                leading = parseIntervalLeading(s, 0, space, negative);
                int colon = s.indexOf(':', space + 1);
                if (colon < 0) {
                    remaining = parseIntervalRemaining(s, space + 1, s.length(), 23) * 60;
                } else {
                    remaining = parseIntervalRemaining(s, space + 1, colon, 23) * 60
                            + parseIntervalRemaining(s, colon + 1, s.length(), 59);
                }
            }
            break;
        }
        case DAY_TO_SECOND: {
            int space = s.indexOf(' ');
            if (space < 0) {
                leading = parseIntervalLeading(s, 0, s.length(), negative);
                remaining = 0;
            } else {
                leading = parseIntervalLeading(s, 0, space, negative);
                int colon = s.indexOf(':', space + 1);
                if (colon < 0) {
                    remaining = parseIntervalRemaining(s, space + 1, s.length(), 23) * NANOS_PER_HOUR;
                } else {
                    int colon2 = s.indexOf(':', colon + 1);
                    if (colon2 < 0) {
                        remaining = parseIntervalRemaining(s, space + 1, colon, 23) * NANOS_PER_HOUR
                                + parseIntervalRemaining(s, colon + 1, s.length(), 59) * NANOS_PER_MINUTE;
                    } else {
                        remaining = parseIntervalRemaining(s, space + 1, colon, 23) * NANOS_PER_HOUR
                                + parseIntervalRemaining(s, colon + 1, colon2, 59) * NANOS_PER_MINUTE
                                + parseIntervalRemainingSeconds(s, colon2 + 1);
                    }
                }
            }
            break;
        }
        case HOUR_TO_MINUTE:
            return parseInterval2(qualifier, s, ':', 59, negative);
        case HOUR_TO_SECOND: {
            int colon = s.indexOf(':');
            if (colon < 0) {
                leading = parseIntervalLeading(s, 0, s.length(), negative);
                remaining = 0;
            } else {
                leading = parseIntervalLeading(s, 0, colon, negative);
                int colon2 = s.indexOf(':', colon + 1);
                if (colon2 < 0) {
                    remaining = parseIntervalRemaining(s, colon + 1, s.length(), 59) * NANOS_PER_MINUTE;
                } else {
                    remaining = parseIntervalRemaining(s, colon + 1, colon2, 59) * NANOS_PER_MINUTE
                            + parseIntervalRemainingSeconds(s, colon2 + 1);
                }
            }
            break;
        }
        case MINUTE_TO_SECOND: {
            int dash = s.indexOf(':');
            if (dash < 0) {
                leading = parseIntervalLeading(s, 0, s.length(), negative);
                remaining = 0;
            } else {
                leading = parseIntervalLeading(s, 0, dash, negative);
                remaining = parseIntervalRemainingSeconds(s, dash + 1);
            }
            break;
        }
        default:
            throw new IllegalArgumentException();
        }
        negative = leading < 0;
        if (negative) {
            if (leading != Long.MIN_VALUE) {
                leading = -leading;
            } else {
                leading = 0;
            }
        }
        return ValueInterval.from(qualifier, negative, leading, remaining);
    }",False,True,"The function of this method is to parse a string as an interval value, based on the specified qualifier, whether the interval is negative, and the string to parse. It returns the interval value.","The code contains a method called `parseInterval` that takes in a qualifier, a boolean value, and a string as parameters. It parses the string based on the qualifier and returns an interval value. The method handles different cases for different qualifiers, such as year, month, day, hour, minute, second, etc."
89,"parseInterval2(IntervalQualifier,String,char,int,boolean)",parse interval2 qualifier s ch max negative ,Method,"parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String)",,"java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) java.lang.String+length() java.lang.String+length() org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalLeading(String,int,int,boolean) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) org.h2.util.DateTimeUtils+parseIntervalRemaining(String,int,int,int) java.lang.String+length() java.lang.String+length() org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long)",java.lang.Long+MIN_VALUE,782,21,8,,"static ValueInterval parseInterval2(IntervalQualifier qualifier, String s, char ch, int max, boolean negative) {
        long leading;
        long remaining;
        int dash = s.indexOf(ch, 1);
        if (dash < 0) {
            leading = parseIntervalLeading(s, 0, s.length(), negative);
            remaining = 0;
        } else {
            leading = parseIntervalLeading(s, 0, dash, negative);
            remaining = parseIntervalRemaining(s, dash + 1, s.length(), max);
        }
        negative = leading < 0;
        if (negative) {
            if (leading != Long.MIN_VALUE) {
                leading = -leading;
            } else {
                leading = 0;
            }
        }
        return ValueInterval.from(qualifier, negative, leading, remaining);
    }",True,True,"This method parses a string representation of an interval and returns a ValueInterval object. It takes in an IntervalQualifier, a string, a character, an integer, and a boolean as parameters. It uses helper methods to parse the leading and remaining parts of the interval string, and then creates a ValueInterval object with the parsed values.","This code defines a static method `parseInterval2` that takes an `IntervalQualifier`, a `String`, a `char`, an `int`, and a `boolean` as parameters. It parses the given string to extract a leading and remaining value, and then returns a `ValueInterval` object created from these values and other parameters."
90,"parseIntervalLeading(String,int,int,boolean)",parse interval leading s start end negative ,Method,"parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval2(IntervalQualifier,String,char,int,boolean) parseInterval2(IntervalQualifier,String,char,int,boolean)",,"java.lang.Long+parseLong(String) java.lang.Long+parseLong(String) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+charAt(int) java.lang.String+charAt(int)",java.lang.Long+MIN_VALUE,319,7,10,,"private static long parseIntervalLeading(String s, int start, int end, boolean negative) {
        long leading = Long.parseLong(s.substring(start, end));
        if (leading == 0) {
            return negative ^ s.charAt(start) == '-' ? Long.MIN_VALUE : 0;
        }
        return negative ? -leading : leading;
    }",True,True,"The function parses a substring of a given string into a long integer. It checks if the parsed value is zero and returns a specific value based on the conditions. Finally, it returns the parsed value with a negative sign if specified.","The code defines a private static method called `parseIntervalLeading` that takes a string `s`, start and end indices, and a boolean `negative` as input. It parses a substring of `s` into a long value, checks if the parsed value is zero, and returns either `Long.MIN_VALUE`, 0, or the parsed value based on certain conditions."
91,"parseIntervalRemaining(String,int,int,int)",parse interval remaining s start end max ,Method,"parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval2(IntervalQualifier,String,char,int,boolean)",,"org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) java.lang.IllegalArgumentException+IllegalArgumentException(String)",,247,7,10,,"private static long parseIntervalRemaining(String s, int start, int end, int max) {
        int v = StringUtils.parseUInt31(s, start, end);
        if (v > max) {
            throw new IllegalArgumentException(s);
        }
        return v;
    }",True,True,"The function parses a substring of a string into an integer value, checks if the value is greater than a maximum value, and throws an exception if it is. It then returns the parsed value as a long.","The given code is a private static method named `parseIntervalRemaining` that takes a string `s`, start and end indices, and a maximum value as input. It parses a substring of `s` into an integer value and checks if it exceeds the maximum value. If it does, it throws an `IllegalArgumentException`. Finally, it returns the parsed integer value."
92,"parseIntervalRemainingSeconds(String,int)",parse interval remaining seconds s start ,Method,"parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String) parseInterval(IntervalQualifier,boolean,String)",,"java.lang.String+indexOf(int,int) java.lang.String+indexOf(int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) java.lang.String+length() java.lang.String+length() org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.StringUtils+parseUInt31(String,int,int) org.h2.util.DateTimeUtils+parseNanos(String,int,int) org.h2.util.DateTimeUtils+parseNanos(String,int,int) java.lang.String+length() java.lang.String+length() java.lang.IllegalArgumentException+IllegalArgumentException(String)",org.h2.util.DateTimeUtils+NANOS_PER_SECOND,551,15,10,,"private static long parseIntervalRemainingSeconds(String s, int start) {
        int seconds, nanos;
        int dot = s.indexOf('.', start + 1);
        if (dot < 0) {
            seconds = StringUtils.parseUInt31(s, start, s.length());
            nanos = 0;
        } else {
            seconds = StringUtils.parseUInt31(s, start, dot);
            nanos = parseNanos(s, dot + 1, s.length());
        }
        if (seconds > 59) {
            throw new IllegalArgumentException(s);
        }
        return seconds * NANOS_PER_SECOND + nanos;
    }",True,True,The function parses a string representation of a time interval and returns the remaining seconds in the interval as a long value. It handles both whole seconds and fractional seconds.,"This code is a private static method that parses a string representation of a time interval and returns the remaining seconds. It checks if the string contains a decimal point and parses the seconds and nanoseconds accordingly. If the parsed seconds exceed 59, it throws an IllegalArgumentException."
93,"intervalToString(IntervalQualifier,boolean,long,long)",interval to string qualifier negative leading remaining formats interval as a string param qualifier qualifier of the interval param negative whether interval is negative param leading the value of leading field param remaining the value of all remaining fields return string representation of the specified interval ,Method,,org.h2.api.Interval+toString() org.h2.value.ValueInterval+getString(),"java.lang.StringBuilder+append(String) java.lang.StringBuilder+StringBuilder() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(long) org.h2.util.DateTimeUtils+appendNanos(StringBuilder,long) org.h2.util.DateTimeUtils+appendNanos(StringBuilder,long) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) org.h2.util.DateTimeUtils+appendSecondsWithNanos(StringBuilder,long) org.h2.util.DateTimeUtils+appendSecondsWithNanos(StringBuilder,long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) org.h2.util.DateTimeUtils+appendSecondsWithNanos(StringBuilder,long) org.h2.util.DateTimeUtils+appendSecondsWithNanos(StringBuilder,long) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(char) org.h2.util.DateTimeUtils+appendSecondsWithNanos(StringBuilder,long) org.h2.util.DateTimeUtils+appendSecondsWithNanos(StringBuilder,long) java.lang.StringBuilder+append(Object) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(Object) java.lang.StringBuilder+toString() java.lang.StringBuilder+toString()",org.h2.util.DateTimeUtils+NANOS_PER_MINUTE org.h2.util.DateTimeUtils+NANOS_PER_MINUTE org.h2.util.DateTimeUtils+NANOS_PER_MINUTE org.h2.util.DateTimeUtils+NANOS_PER_MINUTE,2550,70,9,"/** 
 * Formats interval as a string.
 * @param qualifier qualifier of the interval
 * @param negative whether interval is negative
 * @param leading the value of leading field
 * @param remaining the value of all remaining fields
 * @return string representation of the specified interval
 */
","/**
     * Formats interval as a string.
     *
     * @param qualifier qualifier of the interval
     * @param negative whether interval is negative
     * @param leading the value of leading field
     * @param remaining the value of all remaining fields
     * @return string representation of the specified interval
     */
    public static String intervalToString(IntervalQualifier qualifier, boolean negative, long leading, long remaining)
    {
        StringBuilder buff = new StringBuilder().append(""INTERVAL "");
        buff.append('\'');
        if (negative) {
            buff.append('-');
        }
        switch (qualifier) {
        case YEAR:
        case MONTH:
        case DAY:
        case HOUR:
        case MINUTE:
            buff.append(leading);
            break;
        case SECOND:
            buff.append(leading);
            appendNanos(buff, remaining);
            break;
        case YEAR_TO_MONTH:
            buff.append(leading).append('-').append(remaining);
            break;
        case DAY_TO_HOUR:
            buff.append(leading).append(' ');
            StringUtils.appendZeroPadded(buff, 2, remaining);
            break;
        case DAY_TO_MINUTE:
            buff.append(leading).append(' ');
            StringUtils.appendZeroPadded(buff, 2, remaining / 60);
            buff.append(':');
            StringUtils.appendZeroPadded(buff, 2, remaining % 60);
            break;
        case DAY_TO_SECOND: {
            long nanos = remaining % NANOS_PER_MINUTE;
            remaining /= NANOS_PER_MINUTE;
            buff.append(leading).append(' ');
            StringUtils.appendZeroPadded(buff, 2, remaining / 60);
            buff.append(':');
            StringUtils.appendZeroPadded(buff, 2, remaining % 60);
            buff.append(':');
            appendSecondsWithNanos(buff, nanos);
            break;
        }
        case HOUR_TO_MINUTE:
            buff.append(leading).append(':');
            StringUtils.appendZeroPadded(buff, 2, remaining);
            break;
        case HOUR_TO_SECOND:
            buff.append(leading).append(':');
            StringUtils.appendZeroPadded(buff, 2, remaining / NANOS_PER_MINUTE);
            buff.append(':');
            appendSecondsWithNanos(buff, remaining % NANOS_PER_MINUTE);
            break;
        case MINUTE_TO_SECOND:
            buff.append(leading).append(':');
            appendSecondsWithNanos(buff, remaining);
            break;
        }
        buff.append(""' "").append(qualifier);
        return buff.toString();
    }",True,True,"This method formats an interval as a string. It takes in a qualifier, a boolean indicating if the interval is negative, a leading value, and a remaining value. It returns a string representation of the specified interval.","This code defines a method called `intervalToString` that takes in an interval qualifier, a boolean indicating if the interval is negative, a leading value, and a remaining value. It formats the interval as a string based on the provided inputs and returns the string representation of the interval."
94,"appendSecondsWithNanos(StringBuilder,long)",append seconds with nanos buff nanos ,Method,"intervalToString(IntervalQualifier,boolean,long,long) intervalToString(IntervalQualifier,boolean,long,long) intervalToString(IntervalQualifier,boolean,long,long)",,"org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.DateTimeUtils+appendNanos(StringBuilder,long) org.h2.util.DateTimeUtils+appendNanos(StringBuilder,long)",org.h2.util.DateTimeUtils+NANOS_PER_SECOND org.h2.util.DateTimeUtils+NANOS_PER_SECOND,208,4,10,,"private static void appendSecondsWithNanos(StringBuilder buff, long nanos) {
        StringUtils.appendZeroPadded(buff, 2, nanos / NANOS_PER_SECOND);
        appendNanos(buff, nanos % NANOS_PER_SECOND);
    }",True,True,This method appends the seconds and nanoseconds to a StringBuilder object. It uses another method to append the seconds with zero padding and then appends the remaining nanoseconds.,"The method ""appendSecondsWithNanos"" takes a StringBuilder object and a long value representing nanoseconds as input. It appends the seconds portion of the nanoseconds to the StringBuilder object by dividing the nanoseconds by the constant ""NANOS_PER_SECOND"" and then appends the remaining nanoseconds by calling the ""appendNanos"" method."
95,"appendNanos(StringBuilder,long)",append nanos buff nanos ,Method,"intervalToString(IntervalQualifier,boolean,long,long) appendSecondsWithNanos(StringBuilder,long)",,"java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.StringUtils+appendZeroPadded(StringBuilder,int,long) org.h2.util.DateTimeUtils+stripTrailingZeroes(StringBuilder) org.h2.util.DateTimeUtils+stripTrailingZeroes(StringBuilder)",,233,7,10,,"private static void appendNanos(StringBuilder buff, long nanos) {
        if (nanos > 0) {
            buff.append('.');
            StringUtils.appendZeroPadded(buff, 9, nanos);
            stripTrailingZeroes(buff);
        }
    }",True,True,"This method appends nanoseconds to a StringBuilder object, with leading zeros and trailing zeroes removed.","The method ""appendNanos"" appends the nanoseconds value to a StringBuilder object if it is greater than zero. It ensures that the nanoseconds are zero-padded to 9 digits and removes any trailing zeroes."
96,"convertScale(long,int)",convert scale nanos of day scale converts scale of nanoseconds param nanos of day nanoseconds of day param scale fractional seconds precision return scaled value ,Method,,"org.h2.value.ValueTime+convertScale(boolean,int) org.h2.value.ValueTimestamp+convertScale(boolean,int) org.h2.value.ValueTimestampTimeZone+convertScale(boolean,int)",,org.h2.util.DateTimeUtils+CONVERT_SCALE_TABLE,497,18,9,"/** 
 * Converts scale of nanoseconds.
 * @param nanosOfDay nanoseconds of day
 * @param scale fractional seconds precision
 * @return scaled value
 */
","/**
     * Converts scale of nanoseconds.
     *
     * @param nanosOfDay nanoseconds of day
     * @param scale fractional seconds precision
     * @return scaled value
     */
    public static long convertScale(long nanosOfDay, int scale) {
        if (scale >= 9) {
            return nanosOfDay;
        }
        int m = CONVERT_SCALE_TABLE[scale];
        long mod = nanosOfDay % m;
        if (mod >= m >>> 1) {
            nanosOfDay += m;
        }
        return nanosOfDay - mod;
    }",False,False,This method converts the scale of nanoseconds by rounding the value based on the given fractional seconds precision. It returns the scaled value.,This code defines a method called `convertScale` that takes in a value representing nanoseconds of the day and a scale representing fractional seconds precision. It returns the scaled value by rounding the nanoseconds of the day based on the given scale.
97,intervalToAbsolute(ValueInterval),interval to absolute interval converts interval value to an absolute value param interval the interval value return absolute value in months for year month intervals in nanoseconds for day time intervals ,Method,,"org.h2.expression.IntervalOperation+getDateTimeWithInterval(Value,Value,int,int) org.h2.expression.IntervalOperation+getDateTimeWithInterval(Value,Value,int,int) org.h2.expression.IntervalOperation+getDateTimeWithInterval(Value,Value,int,int) org.h2.util.DateTimeFunctions+extract(String,Value) org.h2.value.Value+convertToIntervalYearMonth(int) org.h2.value.Value+convertToIntervalDayTime(int) org.h2.value.ValueInterval+add(Value) org.h2.value.ValueInterval+add(Value) org.h2.value.ValueInterval+subtract(Value) org.h2.value.ValueInterval+subtract(Value)","org.h2.value.ValueInterval+getQualifier() org.h2.value.ValueInterval+getQualifier() java.math.BigInteger+multiply(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.value.ValueInterval+getLeading() org.h2.value.ValueInterval+getLeading() java.math.BigInteger+multiply(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.value.ValueInterval+getLeading() org.h2.value.ValueInterval+getLeading() java.math.BigInteger+multiply(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.value.ValueInterval+getLeading() org.h2.value.ValueInterval+getLeading() java.math.BigInteger+multiply(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) java.math.BigInteger+multiply(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.value.ValueInterval+getLeading() org.h2.value.ValueInterval+getLeading() java.math.BigInteger+multiply(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) java.math.BigInteger+multiply(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.value.ValueInterval+getLeading() org.h2.value.ValueInterval+getLeading() java.math.BigInteger+multiply(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long) java.lang.IllegalArgumentException+IllegalArgumentException() org.h2.value.ValueInterval+isNegative() org.h2.value.ValueInterval+isNegative() java.math.BigInteger+negate() java.math.BigInteger+negate()",org.h2.util.DateTimeUtils+NANOS_PER_DAY org.h2.util.DateTimeUtils+NANOS_PER_HOUR org.h2.util.DateTimeUtils+NANOS_PER_MINUTE org.h2.util.DateTimeUtils+NANOS_PER_SECOND org.h2.util.DateTimeUtils+NANOS_PER_HOUR org.h2.util.DateTimeUtils+NANOS_PER_MINUTE org.h2.util.DateTimeUtils+NANOS_PER_DAY org.h2.util.DateTimeUtils+NANOS_PER_MINUTE org.h2.util.DateTimeUtils+NANOS_PER_HOUR org.h2.util.DateTimeUtils+NANOS_PER_MINUTE,2045,54,9,"/** 
 * Converts interval value to an absolute value.
 * @param interval the interval value
 * @return absolute value in months for year-month intervals,in nanoseconds for day-time intervals
 */
","/**
     * Converts interval value to an absolute value.
     *
     * @param interval the interval value
     * @return absolute value in months for year-month intervals,
     *         in nanoseconds for day-time intervals
     */
    public static BigInteger intervalToAbsolute(ValueInterval interval) {
        BigInteger r;
        switch (interval.getQualifier()) {
        case YEAR:
            r = BigInteger.valueOf(interval.getLeading()).multiply(BigInteger.valueOf(12));
            break;
        case MONTH:
            r = BigInteger.valueOf(interval.getLeading());
            break;
        case DAY:
            r = BigInteger.valueOf(interval.getLeading()).multiply(BigInteger.valueOf(NANOS_PER_DAY));
            break;
        case HOUR:
            r = BigInteger.valueOf(interval.getLeading()).multiply(BigInteger.valueOf(NANOS_PER_HOUR));
            break;
        case MINUTE:
            r = BigInteger.valueOf(interval.getLeading()).multiply(BigInteger.valueOf(NANOS_PER_MINUTE));
            break;
        case SECOND:
            r = intervalToAbsolute(interval, NANOS_PER_SECOND);
            break;
        case YEAR_TO_MONTH:
            r = intervalToAbsolute(interval, 12);
            break;
        case DAY_TO_HOUR:
            r = intervalToAbsolute(interval, 24, NANOS_PER_HOUR);
            break;
        case DAY_TO_MINUTE:
            r = intervalToAbsolute(interval, 24 * 60, NANOS_PER_MINUTE);
            break;
        case DAY_TO_SECOND:
            r = intervalToAbsolute(interval, NANOS_PER_DAY);
            break;
        case HOUR_TO_MINUTE:
            r = intervalToAbsolute(interval, 60, NANOS_PER_MINUTE);
            break;
        case HOUR_TO_SECOND:
            r = intervalToAbsolute(interval, NANOS_PER_HOUR);
            break;
        case MINUTE_TO_SECOND:
            r = intervalToAbsolute(interval, NANOS_PER_MINUTE);
            break;
        default:
            throw new IllegalArgumentException();
        }
        return interval.isNegative() ? r.negate() : r;
    }",True,True,This method converts an interval value to an absolute value. The absolute value is returned in months for year-month intervals and in nanoseconds for day-time intervals.,"This code defines a method called `intervalToAbsolute` that takes a `ValueInterval` object as input and returns the absolute value in either months or nanoseconds, depending on the interval qualifier. The method uses a switch statement to determine the appropriate calculation based on the qualifier and returns the result, negated if the interval is negative."
98,"intervalToAbsolute(ValueInterval,long,long)",interval to absolute interval multiplier total multiplier ,Method,intervalToAbsolute(ValueInterval) intervalToAbsolute(ValueInterval) intervalToAbsolute(ValueInterval),,"java.math.BigInteger+multiply(BigInteger) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long) org.h2.util.DateTimeUtils+intervalToAbsolute(ValueInterval,long) java.math.BigInteger+multiply(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long)",,218,3,10,,"private static BigInteger intervalToAbsolute(ValueInterval interval, long multiplier, long totalMultiplier) {
        return intervalToAbsolute(interval, multiplier).multiply(BigInteger.valueOf(totalMultiplier));
    }",True,True,"This method takes a ValueInterval, a multiplier, and a totalMultiplier as input. It calls another method intervalToAbsolute with the interval and multiplier, and then multiplies the result with totalMultiplier. The method returns a BigInteger.","The code defines a private static method named ""intervalToAbsolute"" that takes in a ValueInterval object, a multiplier, and a totalMultiplier. It returns the absolute value of the interval multiplied by the totalMultiplier as a BigInteger."
99,"intervalToAbsolute(ValueInterval,long)",interval to absolute interval multiplier ,Method,"intervalToAbsolute(ValueInterval) intervalToAbsolute(ValueInterval) intervalToAbsolute(ValueInterval) intervalToAbsolute(ValueInterval) intervalToAbsolute(ValueInterval) intervalToAbsolute(ValueInterval,long,long)",,java.math.BigInteger+add(BigInteger) java.math.BigInteger+multiply(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.value.ValueInterval+getLeading() org.h2.value.ValueInterval+getLeading() java.math.BigInteger+multiply(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) java.math.BigInteger+add(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.value.ValueInterval+getRemaining() org.h2.value.ValueInterval+getRemaining(),,258,4,10,,"private static BigInteger intervalToAbsolute(ValueInterval interval, long multiplier) {
        return BigInteger.valueOf(interval.getLeading()).multiply(BigInteger.valueOf(multiplier))
                .add(BigInteger.valueOf(interval.getRemaining()));
    }",True,True,"This method takes a ValueInterval object and a long multiplier as input. It returns the absolute value of the interval's leading value multiplied by the multiplier, plus the interval's remaining value.",The code defines a private static method named `intervalToAbsolute` that takes a `ValueInterval` object and a `long` multiplier as parameters. It returns a `BigInteger` value obtained by multiplying the leading value of the interval with the multiplier and adding the remaining value of the interval.
100,"intervalFromAbsolute(IntervalQualifier,BigInteger)",interval from absolute qualifier absolute converts absolute value to an interval value param qualifier the qualifier of interval param absolute absolute value in months for year month intervals in nanoseconds for day time intervals return the interval value ,Method,,org.h2.value.Value+convertToIntervalYearMonth(int) org.h2.value.Value+convertToIntervalDayTime(int) org.h2.value.ValueInterval+add(Value) org.h2.value.ValueInterval+subtract(Value),"org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) java.math.BigInteger+signum() java.math.BigInteger+signum() org.h2.util.DateTimeUtils+leadingExact(BigInteger) org.h2.util.DateTimeUtils+leadingExact(BigInteger) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) java.math.BigInteger+signum() java.math.BigInteger+signum() org.h2.util.DateTimeUtils+leadingExact(BigInteger) org.h2.util.DateTimeUtils+leadingExact(BigInteger) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) java.math.BigInteger+signum() java.math.BigInteger+signum() org.h2.util.DateTimeUtils+leadingExact(BigInteger) org.h2.util.DateTimeUtils+leadingExact(BigInteger) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) java.math.BigInteger+signum() java.math.BigInteger+signum() org.h2.util.DateTimeUtils+leadingExact(BigInteger) org.h2.util.DateTimeUtils+leadingExact(BigInteger) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) java.math.BigInteger+signum() java.math.BigInteger+signum() org.h2.util.DateTimeUtils+leadingExact(BigInteger) org.h2.util.DateTimeUtils+leadingExact(BigInteger) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+divide(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) org.h2.util.DateTimeUtils+intervalFromAbsolute(IntervalQualifier,BigInteger,long) java.lang.IllegalArgumentException+IllegalArgumentException()",org.h2.util.DateTimeUtils+NANOS_PER_DAY org.h2.util.DateTimeUtils+NANOS_PER_HOUR org.h2.util.DateTimeUtils+NANOS_PER_MINUTE org.h2.util.DateTimeUtils+NANOS_PER_SECOND org.h2.util.DateTimeUtils+NANOS_PER_HOUR org.h2.util.DateTimeUtils+NANOS_PER_MINUTE org.h2.util.DateTimeUtils+NANOS_PER_DAY org.h2.util.DateTimeUtils+NANOS_PER_MINUTE org.h2.util.DateTimeUtils+NANOS_PER_HOUR org.h2.util.DateTimeUtils+NANOS_PER_MINUTE,2282,44,9,"/** 
 * Converts absolute value to an interval value.
 * @param qualifier the qualifier of interval
 * @param absolute absolute value in months for year-month intervals,in nanoseconds for day-time intervals
 * @return the interval value
 */
","/**
     * Converts absolute value to an interval value.
     *
     * @param qualifier the qualifier of interval
     * @param absolute absolute value in months for year-month intervals,
     *                 in nanoseconds for day-time intervals
     * @return the interval value
     */
    public static ValueInterval intervalFromAbsolute(IntervalQualifier qualifier, BigInteger absolute) {
        switch (qualifier) {
        case YEAR:
            return ValueInterval.from(qualifier, absolute.signum() < 0,
                    leadingExact(absolute.divide(BigInteger.valueOf(12))), 0);
        case MONTH:
            return ValueInterval.from(qualifier, absolute.signum() < 0, leadingExact(absolute), 0);
        case DAY:
            return ValueInterval.from(qualifier, absolute.signum() < 0,
                    leadingExact(absolute.divide(BigInteger.valueOf(NANOS_PER_DAY))), 0);
        case HOUR:
            return ValueInterval.from(qualifier, absolute.signum() < 0,
                    leadingExact(absolute.divide(BigInteger.valueOf(NANOS_PER_HOUR))), 0);
        case MINUTE:
            return ValueInterval.from(qualifier, absolute.signum() < 0,
                    leadingExact(absolute.divide(BigInteger.valueOf(NANOS_PER_MINUTE))), 0);
        case SECOND:
            return intervalFromAbsolute(qualifier, absolute, NANOS_PER_SECOND);
        case YEAR_TO_MONTH:
            return intervalFromAbsolute(qualifier, absolute, 12);
        case DAY_TO_HOUR:
            return intervalFromAbsolute(qualifier, absolute.divide(BigInteger.valueOf(NANOS_PER_HOUR)), 24);
        case DAY_TO_MINUTE:
            return intervalFromAbsolute(qualifier, absolute.divide(BigInteger.valueOf(NANOS_PER_MINUTE)), 24 * 60);
        case DAY_TO_SECOND:
            return intervalFromAbsolute(qualifier, absolute, NANOS_PER_DAY);
        case HOUR_TO_MINUTE:
            return intervalFromAbsolute(qualifier, absolute.divide(BigInteger.valueOf(NANOS_PER_MINUTE)), 60);
        case HOUR_TO_SECOND:
            return intervalFromAbsolute(qualifier, absolute, NANOS_PER_HOUR);
        case MINUTE_TO_SECOND:
            return intervalFromAbsolute(qualifier, absolute, NANOS_PER_MINUTE);
        default:
            throw new IllegalArgumentException();
        }
    }",True,True,This method converts an absolute value to an interval value based on the given qualifier. It handles different cases for different qualifiers and returns the corresponding interval value.,"This code defines a method called `intervalFromAbsolute` that takes a qualifier and an absolute value as input and returns an interval value. The method uses a switch statement to determine the appropriate conversion based on the qualifier, and then calls other helper methods to perform the conversion."
101,"intervalFromAbsolute(IntervalQualifier,BigInteger,long)",interval from absolute qualifier absolute divisor ,Method,"intervalFromAbsolute(IntervalQualifier,BigInteger) intervalFromAbsolute(IntervalQualifier,BigInteger) intervalFromAbsolute(IntervalQualifier,BigInteger) intervalFromAbsolute(IntervalQualifier,BigInteger) intervalFromAbsolute(IntervalQualifier,BigInteger) intervalFromAbsolute(IntervalQualifier,BigInteger) intervalFromAbsolute(IntervalQualifier,BigInteger) intervalFromAbsolute(IntervalQualifier,BigInteger)",,"java.math.BigInteger+divideAndRemainder(BigInteger) java.math.BigInteger+divideAndRemainder(BigInteger) java.math.BigInteger+valueOf(long) java.math.BigInteger+valueOf(long) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long) java.math.BigInteger+signum() java.math.BigInteger+signum() org.h2.util.DateTimeUtils+leadingExact(BigInteger) org.h2.util.DateTimeUtils+leadingExact(BigInteger) java.lang.Math+abs(long) java.lang.Math+abs(long) java.math.BigInteger+longValue() java.math.BigInteger+longValue()",,324,4,10,,"private static ValueInterval intervalFromAbsolute(IntervalQualifier qualifier, BigInteger absolute, long divisor) {
        BigInteger[] dr = absolute.divideAndRemainder(BigInteger.valueOf(divisor));
        return ValueInterval.from(qualifier, absolute.signum() < 0, leadingExact(dr[0]), Math.abs(dr[1].longValue()));
    }",True,True,"This method takes an interval qualifier, an absolute value, and a divisor as input. It divides the absolute value by the divisor and returns a ValueInterval object created from the resulting quotient and remainder.","This code defines a private static method called ""intervalFromAbsolute"" that takes in an interval qualifier, a BigInteger value, and a long divisor. It divides the absolute value by the divisor and returns a ValueInterval object with the appropriate qualifier, sign, leading exact value, and absolute remainder."
102,leadingExact(BigInteger),leading exact absolute ,Method,"intervalFromAbsolute(IntervalQualifier,BigInteger) intervalFromAbsolute(IntervalQualifier,BigInteger) intervalFromAbsolute(IntervalQualifier,BigInteger) intervalFromAbsolute(IntervalQualifier,BigInteger) intervalFromAbsolute(IntervalQualifier,BigInteger) intervalFromAbsolute(IntervalQualifier,BigInteger,long)",,,,387,7,10,,"private static long leadingExact(BigInteger absolute) {
        if (absolute.compareTo(BigInteger.valueOf(999_999_999_999_999_999L)) > 0
                || absolute.compareTo(BigInteger.valueOf(-999_999_999_999_999_999L)) < 0) {
            throw DbException.get(ErrorCode.NUMERIC_VALUE_OUT_OF_RANGE_1, absolute.toString());
        }
        return Math.abs(absolute.longValue());
    }",True,True,"This method returns the absolute value of a BigInteger as a long, but throws an exception if the BigInteger is outside the range of -999_999_999_999_999_999 to 999_999_999_999_999_999.","The `leadingExact` method takes a `BigInteger` parameter called `absolute` and checks if it is within the range of -999,999,999,999,999,999 to 999,999,999,999,999,999. If it is outside this range, it throws an exception with an error code and the string representation of the `absolute` value. Otherwise, it returns the absolute value of `absolute` as a `long`."
103,"validateInterval(IntervalQualifier,boolean,long,long)",validate interval qualifier negative leading remaining ensures that all fields in interval are valid param qualifier qualifier param negative whether interval is negative param leading value of leading field param remaining values of all remaining fields return fixed value of negative field ,Method,,"org.h2.api.Interval+Interval(IntervalQualifier,boolean,long,long) org.h2.value.ValueInterval+from(IntervalQualifier,boolean,long,long)",,,2001,66,9,"/** 
 * Ensures that all fields in interval are valid.
 * @param qualifier qualifier
 * @param negative whether interval is negative
 * @param leading value of leading field
 * @param remaining values of all remaining fields
 * @return fixed value of negative field
 */
","/**
     * Ensures that all fields in interval are valid.
     *
     * @param qualifier
     *            qualifier
     * @param negative
     *            whether interval is negative
     * @param leading
     *            value of leading field
     * @param remaining
     *            values of all remaining fields
     * @return fixed value of negative field
     */
    public static boolean validateInterval(IntervalQualifier qualifier, boolean negative, long leading, long remaining)
    {
        if (qualifier == null) {
            throw new NullPointerException();
        }
        if (leading == 0L && remaining == 0L) {
            return false;
        }
        // Upper bound for remaining value (exclusive)
        long bound;
        switch (qualifier) {
        case YEAR:
        case MONTH:
        case DAY:
        case HOUR:
        case MINUTE:
            bound = 1;
            break;
        case SECOND:
            bound = NANOS_PER_SECOND;
            break;
        case YEAR_TO_MONTH:
            bound = 12;
            break;
        case DAY_TO_HOUR:
            bound = 24;
            break;
        case DAY_TO_MINUTE:
            bound = 24 * 60;
            break;
        case DAY_TO_SECOND:
            bound = NANOS_PER_DAY;
            break;
        case HOUR_TO_MINUTE:
            bound = 60;
            break;
        case HOUR_TO_SECOND:
            bound = NANOS_PER_HOUR;
            break;
        case MINUTE_TO_SECOND:
            bound = NANOS_PER_MINUTE;
            break;
        default:
            throw DbException.getInvalidValueException(""interval"", qualifier);
        }
        if (leading < 0L || leading >= 1_000_000_000_000_000_000L) {
            throw DbException.getInvalidValueException(""interval"", Long.toString(leading));
        }
        if (remaining < 0L || remaining >= bound) {
            throw DbException.getInvalidValueException(""interval"", Long.toString(remaining));
        }
        return negative;
    }",True,True,This method validates the fields of an interval by checking if they are within valid ranges. It throws exceptions if any of the fields are invalid. It returns the value of the negative field.,"This code defines a method called `validateInterval` that ensures the validity of all fields in an interval. It takes in parameters such as the qualifier, whether the interval is negative, the value of the leading field, and the values of all remaining fields. It returns the fixed value of the negative field."
104,"yearsFromInterval(IntervalQualifier,boolean,long,long)",years from interval qualifier negative leading remaining param qualifier qualifier param negative whether interval is negative param leading value of leading field param remaining values of all remaining fields return years or 0 ,Method,,org.h2.api.Interval+getYears(),,,688,22,9,"/** 
 * @param qualifier qualifier
 * @param negative whether interval is negative
 * @param leading value of leading field
 * @param remaining values of all remaining fields
 * @return years, or 0
 */
","/**
     * @param qualifier
     *            qualifier
     * @param negative
     *            whether interval is negative
     * @param leading
     *            value of leading field
     * @param remaining
     *            values of all remaining fields
     * @return years, or 0
     */
    public static long yearsFromInterval(IntervalQualifier qualifier, boolean negative, long leading, long remaining) {
        if (qualifier == IntervalQualifier.YEAR || qualifier == IntervalQualifier.YEAR_TO_MONTH) {
            long v = leading;
            if (negative) {
                v = -v;
            }
            return v;
        } else {
            return 0;
        }
    }",True,True,"This method returns the number of years from an interval, based on the given qualifier and values. If the qualifier is YEAR or YEAR_TO_MONTH, it returns the leading value (with a negative sign if specified). Otherwise, it returns 0.","This code defines a method called `yearsFromInterval` that takes in four parameters: `qualifier`, `negative`, `leading`, and `remaining`. It checks if the `qualifier` is either `YEAR` or `YEAR_TO_MONTH` and returns the value of `leading` if true, otherwise it returns 0."
105,"monthsFromInterval(IntervalQualifier,boolean,long,long)",months from interval qualifier negative leading remaining param qualifier qualifier param negative whether interval is negative param leading value of leading field param remaining values of all remaining fields return months or 0 ,Method,,org.h2.api.Interval+getMonths(),,,735,26,9,"/** 
 * @param qualifier qualifier
 * @param negative whether interval is negative
 * @param leading value of leading field
 * @param remaining values of all remaining fields
 * @return months, or 0
 */
","/**
     * @param qualifier
     *            qualifier
     * @param negative
     *            whether interval is negative
     * @param leading
     *            value of leading field
     * @param remaining
     *            values of all remaining fields
     * @return months, or 0
     */
    public static long monthsFromInterval(IntervalQualifier qualifier, boolean negative, long leading, long remaining)
    {
        long v;
        if (qualifier == IntervalQualifier.MONTH) {
            v = leading;
        } else if (qualifier == IntervalQualifier.YEAR_TO_MONTH){
            v = remaining;
        } else {
            return 0;
        }
        if (negative) {
            v = -v;
        }
        return v;
    }",True,True,"This method returns the number of months based on the given interval qualifier, whether it is negative, and the values of the leading and remaining fields. If the qualifier is not recognized, it returns 0.","This code defines a method called ""monthsFromInterval"" that takes in four parameters: a qualifier, a boolean indicating if the interval is negative, a leading value, and a remaining value. It returns the number of months based on the qualifier and the other parameters, or 0 if the qualifier is not valid."
106,"daysFromInterval(IntervalQualifier,boolean,long,long)",days from interval qualifier negative leading remaining param qualifier qualifier param negative whether interval is negative param leading value of leading field param remaining values of all remaining fields return months or 0 ,Method,,org.h2.api.Interval+getDays(),,,718,26,9,"/** 
 * @param qualifier qualifier
 * @param negative whether interval is negative
 * @param leading value of leading field
 * @param remaining values of all remaining fields
 * @return months, or 0
 */
","/**
     * @param qualifier
     *            qualifier
     * @param negative
     *            whether interval is negative
     * @param leading
     *            value of leading field
     * @param remaining
     *            values of all remaining fields
     * @return months, or 0
     */
    public static long daysFromInterval(IntervalQualifier qualifier, boolean negative, long leading, long remaining) {
        switch (qualifier) {
        case DAY:
        case DAY_TO_HOUR:
        case DAY_TO_MINUTE:
        case DAY_TO_SECOND:
            long v = leading;
            if (negative) {
                v = -v;
            }
            return v;
        default:
            return 0;
        }
    }",False,False,"This method calculates the number of days from an interval, based on the given qualifier, negative flag, leading value, and remaining values. It returns the calculated number of days, or 0 if the qualifier is not one of the specified cases.","This code defines a method named ""daysFromInterval"" that takes in four parameters: a qualifier, a boolean indicating if the interval is negative, a value for the leading field, and a value for the remaining fields. It returns the number of days based on the qualifier and the leading value, or 0 if the qualifier does not match any of the specified cases."
107,"hoursFromInterval(IntervalQualifier,boolean,long,long)",hours from interval qualifier negative leading remaining param qualifier qualifier param negative whether interval is negative param leading value of leading field param remaining values of all remaining fields return hours or 0 ,Method,,org.h2.api.Interval+getHours(),,org.h2.util.DateTimeUtils+NANOS_PER_HOUR,951,36,9,"/** 
 * @param qualifier qualifier
 * @param negative whether interval is negative
 * @param leading value of leading field
 * @param remaining values of all remaining fields
 * @return hours, or 0
 */
","/**
     * @param qualifier
     *            qualifier
     * @param negative
     *            whether interval is negative
     * @param leading
     *            value of leading field
     * @param remaining
     *            values of all remaining fields
     * @return hours, or 0
     */
    public static long hoursFromInterval(IntervalQualifier qualifier, boolean negative, long leading, long remaining) {
        long v;
        switch (qualifier) {
        case HOUR:
        case HOUR_TO_MINUTE:
        case HOUR_TO_SECOND:
            v = leading;
            break;
        case DAY_TO_HOUR:
            v = remaining;
            break;
        case DAY_TO_MINUTE:
            v = remaining / 60;
            break;
        case DAY_TO_SECOND:
            v = remaining / NANOS_PER_HOUR;
            break;
        default:
            return 0;
        }
        if (negative) {
            v = -v;
        }
        return v;
    }",True,True,"This method takes in several parameters and returns the number of hours based on the given interval qualifier, whether the interval is negative, and the values of the leading and remaining fields. If the qualifier is not recognized, it returns 0.","This code is a method named ""hoursFromInterval"" that takes in four parameters: a qualifier, a boolean indicating if the interval is negative, a long value for the leading field, and a long value for the remaining fields. It returns the number of hours based on the qualifier and the provided values, or 0 if the qualifier is not recognized."
108,"minutesFromInterval(IntervalQualifier,boolean,long,long)",minutes from interval qualifier negative leading remaining param qualifier qualifier param negative whether interval is negative param leading value of leading field param remaining values of all remaining fields return minutes or 0 ,Method,,org.h2.api.Interval+getMinutes(),,org.h2.util.DateTimeUtils+NANOS_PER_MINUTE org.h2.util.DateTimeUtils+NANOS_PER_MINUTE,1038,39,9,"/** 
 * @param qualifier qualifier
 * @param negative whether interval is negative
 * @param leading value of leading field
 * @param remaining values of all remaining fields
 * @return minutes, or 0
 */
","/**
     * @param qualifier
     *            qualifier
     * @param negative
     *            whether interval is negative
     * @param leading
     *            value of leading field
     * @param remaining
     *            values of all remaining fields
     * @return minutes, or 0
     */
    public static long minutesFromInterval(IntervalQualifier qualifier, boolean negative, long leading, long remaining)
    {
        long v;
        switch (qualifier) {
        case MINUTE:
        case MINUTE_TO_SECOND:
            v = leading;
            break;
        case DAY_TO_MINUTE:
            v = remaining % 60;
            break;
        case DAY_TO_SECOND:
            v = remaining / NANOS_PER_MINUTE % 60;
            break;
        case HOUR_TO_MINUTE:
            v = remaining;
            break;
        case HOUR_TO_SECOND:
            v = remaining / NANOS_PER_MINUTE;
            break;
        default:
            return 0;
        }
        if (negative) {
            v = -v;
        }
        return v;
    }",True,True,"This method takes in various parameters related to time intervals and returns the number of minutes represented by the interval. The specific calculation depends on the value of the ""qualifier"" parameter. If the interval is negative, the result is negated. If the qualifier is not recognized, the method returns 0.","This code defines a method called ""minutesFromInterval"" that takes in four parameters: a qualifier, a boolean indicating if the interval is negative, a leading value, and a remaining value. It calculates and returns the number of minutes based on the given qualifier and values, or 0 if the qualifier is not supported."
109,"nanosFromInterval(IntervalQualifier,boolean,long,long)",nanos from interval qualifier negative leading remaining param qualifier qualifier param negative whether interval is negative param leading value of leading field param remaining values of all remaining fields return nanoseconds or 0 ,Method,,org.h2.api.Interval+getSecondsAndNanos(),,org.h2.util.DateTimeUtils+NANOS_PER_SECOND org.h2.util.DateTimeUtils+NANOS_PER_MINUTE,889,32,9,"/** 
 * @param qualifier qualifier
 * @param negative whether interval is negative
 * @param leading value of leading field
 * @param remaining values of all remaining fields
 * @return nanoseconds, or 0
 */
","/**
     * @param qualifier
     *            qualifier
     * @param negative
     *            whether interval is negative
     * @param leading
     *            value of leading field
     * @param remaining
     *            values of all remaining fields
     * @return nanoseconds, or 0
     */
    public static long nanosFromInterval(IntervalQualifier qualifier, boolean negative, long leading, long remaining) {
        long v;
        switch (qualifier) {
        case SECOND:
            v = leading * NANOS_PER_SECOND + remaining;
            break;
        case DAY_TO_SECOND:
        case HOUR_TO_SECOND:
            v = remaining % NANOS_PER_MINUTE;
            break;
        case MINUTE_TO_SECOND:
            v = remaining;
            break;
        default:
            return 0;
        }
        if (negative) {
            v = -v;
        }
        return v;
    }",True,True,"This method calculates the number of nanoseconds based on the given interval qualifier, whether the interval is negative, the value of the leading field, and the values of all remaining fields. It returns the calculated number of nanoseconds, or 0 if the qualifier is not recognized.","This code defines a method called `nanosFromInterval` that takes in an interval qualifier, a boolean indicating if the interval is negative, a leading value, and remaining values. It calculates and returns the number of nanoseconds based on the given inputs, or returns 0 if the qualifier is not supported."
