index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,BLOCK_COMPARISON_SIZE,block comparison size ,Field,,,,,53,1,26,,private static final int BLOCK_COMPARISON_SIZE = 512;,False,False,,False,
2,"rangeCheckUnknown(long,long)",range check unknown zero based offset length ,Method,"rangeInputStream(InputStream,long,long,long) rangeReader(Reader,long,long,long)",,"org.h2.message.DbException+getInvalidValueException(String,Object) org.h2.message.DbException+getInvalidValueException(String,Object) org.h2.message.DbException+getInvalidValueException(String,Object) org.h2.message.DbException+getInvalidValueException(String,Object)",,322,8,10,,"private static void rangeCheckUnknown(long zeroBasedOffset, long length) {
        if (zeroBasedOffset < 0) {
            throw DbException.getInvalidValueException(""offset"", zeroBasedOffset + 1);
        }
        if (length < 0) {
            throw DbException.getInvalidValueException(""length"", length);
        }
    }",False,False,"This method is used to check if the given zero-based offset and length are valid. If either of them is negative, it throws an exception indicating the invalid value.",False,"The given code is a private static method called ""rangeCheckUnknown"" that checks if the zero-based offset and length values are valid. If the offset is less than 0, it throws an exception with the invalid offset value. If the length is less than 0, it throws an exception with the invalid length value."
3,"rangeInputStream(InputStream,long,long,long)",range input stream input stream one based offset length data size create an input stream that is s subset of the given stream param input stream the source input stream param one based offset the offset 1 means no offset param length the length of the result in bytes param data size the length of the input in bytes return the smaller input stream ,Method,"getInputStream(long,long)",,"org.h2.value.Value+rangeCheck(long,long,long) org.h2.value.Value+rangeCheck(long,long,long) org.h2.value.ValueLob+rangeCheckUnknown(long,long) org.h2.value.ValueLob+rangeCheckUnknown(long,long) org.h2.store.RangeInputStream+RangeInputStream(InputStream,long,long) org.h2.message.DbException+getInvalidValueException(String,Object) org.h2.message.DbException+getInvalidValueException(String,Object)",,889,22,10,"/** 
 * Create an input stream that is s subset of the given stream.
 * @param inputStream the source input stream
 * @param oneBasedOffset the offset (1 means no offset)
 * @param length the length of the result, in bytes
 * @param dataSize the length of the input, in bytes
 * @return the smaller input stream
 */
","/**
     * Create an input stream that is s subset of the given stream.
     *
     * @param inputStream the source input stream
     * @param oneBasedOffset the offset (1 means no offset)
     * @param length the length of the result, in bytes
     * @param dataSize the length of the input, in bytes
     * @return the smaller input stream
     */
    private static InputStream rangeInputStream(InputStream inputStream, long oneBasedOffset, long length,
            long dataSize) {
        if (dataSize > 0) {
            rangeCheck(oneBasedOffset - 1, length, dataSize);
        } else {
            rangeCheckUnknown(oneBasedOffset - 1, length);
        }
        try {
            return new RangeInputStream(inputStream, oneBasedOffset - 1, length);
        } catch (IOException e) {
            throw DbException.getInvalidValueException(""offset"", oneBasedOffset);
        }
    }",False,False,"This method creates a smaller input stream that is a subset of the given input stream. The subset is determined by an offset and length, and the method performs range checks to ensure the subset is within the bounds of the input stream.",False,"This code defines a method called `rangeInputStream` that takes an input stream, an offset, a length, and a data size as parameters. It performs range checks on the offset and length, and then creates and returns a new input stream that is a subset of the original input stream based on the offset and length values."
4,"rangeReader(Reader,long,long,long)",range reader reader one based offset length data size create a reader that is s subset of the given reader param reader the input reader param one based offset the offset 1 means no offset param length the length of the result in bytes param data size the length of the input in bytes return the smaller input stream ,Method,"getReader(long,long)",,"org.h2.value.Value+rangeCheck(long,long,long) org.h2.value.Value+rangeCheck(long,long,long) org.h2.value.ValueLob+rangeCheckUnknown(long,long) org.h2.value.ValueLob+rangeCheckUnknown(long,long) org.h2.store.RangeReader+RangeReader(Reader,long,long) org.h2.message.DbException+getInvalidValueException(String,Object) org.h2.message.DbException+getInvalidValueException(String,Object)",,828,21,10,"/** 
 * Create a reader that is s subset of the given reader.
 * @param reader the input reader
 * @param oneBasedOffset the offset (1 means no offset)
 * @param length the length of the result, in bytes
 * @param dataSize the length of the input, in bytes
 * @return the smaller input stream
 */
","/**
     * Create a reader that is s subset of the given reader.
     *
     * @param reader the input reader
     * @param oneBasedOffset the offset (1 means no offset)
     * @param length the length of the result, in bytes
     * @param dataSize the length of the input, in bytes
     * @return the smaller input stream
     */
    private static Reader rangeReader(Reader reader, long oneBasedOffset, long length, long dataSize) {
        if (dataSize > 0) {
            rangeCheck(oneBasedOffset - 1, length, dataSize);
        } else {
            rangeCheckUnknown(oneBasedOffset - 1, length);
        }
        try {
            return new RangeReader(reader, oneBasedOffset - 1, length);
        } catch (IOException e) {
            throw DbException.getInvalidValueException(""offset"", oneBasedOffset);
        }
    }",False,False,"This method creates a subset of a given reader by specifying an offset and length. It performs range checks on the offset and length parameters, and then creates a new RangeReader object with the specified offset and length.",False,"The `rangeReader` method takes a `Reader` object, an offset, a length, and the size of the input data as parameters. It performs range checks on the offset and length, and then creates and returns a new `Reader` object that represents a subset of the original reader starting from the specified offset and with the specified length."
5,"compare(ValueLob,ValueLob)",compare v1 v2 compares lo bs of the same type param v1 first lob value param v2 second lob value return result of comparison ,Method,"compareTypeSafe(Value,CompareMode,CastDataProvider)",,,,3504,81,10,"/** 
 * Compares LOBs of the same type.
 * @param v1 first LOB value
 * @param v2 second LOB value
 * @return result of comparison
 */
","/**
     * Compares LOBs of the same type.
     *
     * @param v1 first LOB value
     * @param v2 second LOB value
     * @return result of comparison
     */
    private static int compare(ValueLob v1, ValueLob v2) {
        int valueType = v1.getValueType();
        assert valueType == v2.getValueType();
        byte[] small1 = v1.getSmall(), small2 = v2.getSmall();
        if (small1 != null && small2 != null) {
            if (valueType == Value.BLOB) {
                return Bits.compareNotNullSigned(small1, small2);
            } else {
                return Integer.signum(v1.getString().compareTo(v2.getString()));
            }
        }
        long minPrec = Math.min(v1.getType().getPrecision(), v2.getType().getPrecision());
        if (valueType == Value.BLOB) {
            try (InputStream is1 = v1.getInputStream();
                    InputStream is2 = v2.getInputStream()) {
                byte[] buf1 = new byte[BLOCK_COMPARISON_SIZE];
                byte[] buf2 = new byte[BLOCK_COMPARISON_SIZE];
                for (; minPrec >= BLOCK_COMPARISON_SIZE; minPrec -= BLOCK_COMPARISON_SIZE) {
                    if (IOUtils.readFully(is1, buf1, BLOCK_COMPARISON_SIZE) != BLOCK_COMPARISON_SIZE
                            || IOUtils.readFully(is2, buf2, BLOCK_COMPARISON_SIZE) != BLOCK_COMPARISON_SIZE) {
                        throw DbException.getUnsupportedException(""Invalid LOB"");
                    }
                    int cmp = Bits.compareNotNullSigned(buf1, buf2);
                    if (cmp != 0) {
                        return cmp;
                    }
                }
                for (;;) {
                    int c1 = is1.read(), c2 = is2.read();
                    if (c1 < 0) {
                        return c2 < 0 ? 0 : -1;
                    }
                    if (c2 < 0) {
                        return 1;
                    }
                    if (c1 != c2) {
                        return Integer.compare(c1, c2);
                    }
                }
            } catch (IOException ex) {
                throw DbException.convert(ex);
            }
        } else {
            try (Reader reader1 = v1.getReader();
                    Reader reader2 = v2.getReader()) {
                char[] buf1 = new char[BLOCK_COMPARISON_SIZE];
                char[] buf2 = new char[BLOCK_COMPARISON_SIZE];
                for (; minPrec >= BLOCK_COMPARISON_SIZE; minPrec -= BLOCK_COMPARISON_SIZE) {
                    if (IOUtils.readFully(reader1, buf1, BLOCK_COMPARISON_SIZE) != BLOCK_COMPARISON_SIZE
                            || IOUtils.readFully(reader2, buf2, BLOCK_COMPARISON_SIZE) != BLOCK_COMPARISON_SIZE) {
                        throw DbException.getUnsupportedException(""Invalid LOB"");
                    }
                    int cmp = Bits.compareNotNull(buf1, buf2);
                    if (cmp != 0) {
                        return cmp;
                    }
                }
                for (;;) {
                    int c1 = reader1.read(), c2 = reader2.read();
                    if (c1 < 0) {
                        return c2 < 0 ? 0 : -1;
                    }
                    if (c2 < 0) {
                        return 1;
                    }
                    if (c1 != c2) {
                        return Integer.compare(c1, c2);
                    }
                }
            } catch (IOException ex) {
                throw DbException.convert(ex);
            }
        }
    }",False,False,"The function compares two LOB values of the same type and returns the result of the comparison. It handles both BLOB and CLOB types, and performs the comparison based on the values stored in the LOBs.",False,"This code defines a private static method called ""compare"" that compares two LOB (Large Object) values of the same type. It first checks if the LOBs are small and compares them accordingly. If not, it reads the LOBs in blocks and compares them byte by byte until the end or a difference is found."
6,valueType,value type the value type value blob or clob ,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,87,4,18,"/** 
 * the value type (Value.BLOB or CLOB)
 */
","/**
     * the value type (Value.BLOB or CLOB)
     */
    private final int valueType;",False,False,"/** 
 * the value type (Value.BLOB or CLOB)
 */
",False,"/** 
 * the value type (Value.BLOB or CLOB)
 */
"
7,type,type ,Field,getType() getType(),,,,22,1,2,,private TypeInfo type;,False,False,,False,
8,tableId,table id if the lob is managed by the one the lob storage backend classes these are the unique key inside that storage ,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,166,5,18,"/** 
 * If the LOB is managed by the one the LobStorageBackend classes, these are the unique key inside that storage.
 */
","/**
     * If the LOB is managed by the one the LobStorageBackend classes, these are the
     * unique key inside that storage.
     */
    private final int tableId;",True,True,"/** 
 * If the LOB is managed by the one the LobStorageBackend classes, these are the unique key inside that storage.
 */
",False,"/** 
 * If the LOB is managed by the one the LobStorageBackend classes, these are the unique key inside that storage.
 */
"
9,lobId,lob id ,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,25,1,18,,private final long lobId;,True,True,,False,
10,hmac,hmac if this is a client side value lob db object returned by a result set the hmac acts a security cookie that the client can send back to the server to ask for data related to this lob ,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,244,6,18,"/** 
 * If this is a client-side ValueLobDb object returned by a ResultSet, the hmac acts a security cookie that the client can send back to the server to ask for data related to this LOB.
 */
","/**
     * If this is a client-side ValueLobDb object returned by a ResultSet, the
     * hmac acts a security cookie that the client can send back to the server
     * to ask for data related to this LOB.
     */
    private final byte[] hmac;",False,True,"/** 
 * If this is a client-side ValueLobDb object returned by a ResultSet, the hmac acts a security cookie that the client can send back to the server to ask for data related to this LOB.
 */
",False,"/** 
 * If this is a client-side ValueLobDb object returned by a ResultSet, the hmac acts a security cookie that the client can send back to the server to ask for data related to this LOB.
 */
"
11,small,small if the lob is below the inline size we just store load it directly here ,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,131,5,18,"/** 
 * If the LOB is below the inline size, we just store/load it directly here.
 */
","/**
     * If the LOB is below the inline size, we just store/load it directly
     * here.
     */
    private final byte[] small;",True,True,"/** 
 * If the LOB is below the inline size, we just store/load it directly here.
 */
",False,"/** 
 * If the LOB is below the inline size, we just store/load it directly here.
 */
"
12,handler,handler ,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,28,1,2,,private DataHandler handler;,False,True,,False,
13,precision,precision for a blob precision is length in bytes for a clob precision is length in chars ,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long) convertPrecision(long)",,,,143,5,18,"/** 
 * For a BLOB, precision is length in bytes. For a CLOB, precision is length in chars.
 */
","/**
     * For a BLOB, precision is length in bytes.
     * For a CLOB, precision is length in chars.
     */
    private final long precision;",False,True,"/** 
 * For a BLOB, precision is length in bytes. For a CLOB, precision is length in chars.
 */
",False,"/** 
 * For a BLOB, precision is length in bytes. For a CLOB, precision is length in chars.
 */
"
14,fileName,file name if the lob is a temporary lob being managed by a temporary result set it is stored in a temporary file ,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,164,5,18,"/** 
 * If the LOB is a temporary LOB being managed by a temporary ResultSet, it is stored in a temporary file.
 */
","/**
     * If the LOB is a temporary LOB being managed by a temporary ResultSet,
     * it is stored in a temporary file.
     */
    private final String fileName;",False,True,"/** 
 * If the LOB is a temporary LOB being managed by a temporary ResultSet, it is stored in a temporary file.
 */
",False,"/** 
 * If the LOB is a temporary LOB being managed by a temporary ResultSet, it is stored in a temporary file.
 */
"
15,tempFile,temp file ,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,33,1,18,,private final FileStore tempFile;,True,True,,False,
16,hash,hash cache the hash code because it can be expensive to compute ,Field,,,,,99,4,2,"/** 
 * Cache the hashCode because it can be expensive to compute.
 */
","/**
     * Cache the hashCode because it can be expensive to compute.
     */
    private int hash;",False,False,"/** 
 * Cache the hashCode because it can be expensive to compute.
 */
",False,"/** 
 * Cache the hashCode because it can be expensive to compute.
 */
"
17,isRecoveryReference,is recovery reference ,Field,setRecoveryReference(boolean),,,,36,1,2,,private boolean isRecoveryReference;,True,True,,False,
18,"ValueLob(int,DataHandler,int,long,byte[],long)",value lob type handler table id lob id hmac precision ,Method,,,,org.h2.value.ValueLob+valueType org.h2.value.ValueLob+valueType org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler org.h2.value.ValueLob+tableId org.h2.value.ValueLob+tableId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+hmac org.h2.value.ValueLob+hmac org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+small org.h2.value.ValueLob+small org.h2.value.ValueLob+fileName org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile,393,12,2,,"private ValueLob(int type, DataHandler handler, int tableId, long lobId,
            byte[] hmac, long precision) {
        this.valueType = type;
        this.handler = handler;
        this.tableId = tableId;
        this.lobId = lobId;
        this.hmac = hmac;
        this.precision = precision;
        this.small = null;
        this.fileName = null;
        this.tempFile = null;
    }",False,True,This method is a constructor for the ValueLob class. It initializes the instance variables with the provided values and sets other variables to null.,True,"This code defines a private constructor for the ValueLob class, which initializes its instance variables with the provided parameters. The constructor sets the type, data handler, table ID, lob ID, HMAC, and precision values. It also initializes some additional variables to null."
19,"ValueLob(int,byte[],long)",value lob type small precision ,Method,,,,org.h2.value.ValueLob+valueType org.h2.value.ValueLob+valueType org.h2.value.ValueLob+small org.h2.value.ValueLob+small org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+lobId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+hmac org.h2.value.ValueLob+hmac org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler org.h2.value.ValueLob+fileName org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tableId org.h2.value.ValueLob+tableId,324,11,2,,"private ValueLob(int type, byte[] small, long precision) {
        this.valueType = type;
        this.small = small;
        this.precision = precision;
        this.lobId = 0;
        this.hmac = null;
        this.handler = null;
        this.fileName = null;
        this.tempFile = null;
        this.tableId = 0;
    }",False,True,This method is a constructor for the ValueLob class. It initializes the instance variables with the provided values and sets some variables to their default values.,True,"This code defines a private constructor for the ValueLob class, which initializes its instance variables with the provided parameters. The constructor sets the valueType, small, precision, lobId, hmac, handler, fileName, tempFile, and tableId variables to their respective values."
20,"ValueLob(DataHandler,Reader,long)",value lob handler in remaining create a clob in a temporary file ,Method,,,"org.h2.value.ValueLob+createTempLobFileName(DataHandler) org.h2.value.ValueLob+createTempLobFileName(DataHandler) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.FileStore+autoDelete() org.h2.store.FileStore+autoDelete() org.h2.store.FileStoreOutputStream+FileStoreOutputStream(FileStore,DataHandler,String) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.util.IOUtils+readFully(Reader,char[],int) org.h2.util.IOUtils+readFully(Reader,char[],int) java.lang.String+getBytes(Charset) java.lang.String+String(char[],int,int) java.lang.String+getBytes(Charset) org.h2.store.FileStoreOutputStream+write(byte[]) org.h2.store.FileStoreOutputStream+write(byte[])",org.h2.value.ValueLob+valueType org.h2.value.ValueLob+valueType org.h2.value.Value+CLOB org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler org.h2.value.ValueLob+small org.h2.value.ValueLob+small org.h2.value.ValueLob+lobId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+hmac org.h2.value.ValueLob+hmac org.h2.value.ValueLob+fileName org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.engine.Constants+IO_BUFFER_SIZE java.nio.charset.StandardCharsets+UTF_8 org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+tableId org.h2.value.ValueLob+tableId,1126,31,2,"/** 
 * Create a CLOB in a temporary file.
 */
","/**
     * Create a CLOB in a temporary file.
     */
    private ValueLob(DataHandler handler, Reader in, long remaining)
            throws IOException {
        this.valueType = Value.CLOB;
        this.handler = handler;
        this.small = null;
        this.lobId = 0;
        this.hmac = null;
        this.fileName = createTempLobFileName(handler);
        this.tempFile = handler.openFile(fileName, ""rw"", false);
        this.tempFile.autoDelete();

        long tmpPrecision = 0;
        try (FileStoreOutputStream out = new FileStoreOutputStream(tempFile, null, null)) {
            char[] buff = new char[Constants.IO_BUFFER_SIZE];
            while (true) {
                int len = getBufferSize(handler, false, remaining);
                len = IOUtils.readFully(in, buff, len);
                if (len == 0) {
                    break;
                }
                byte[] data = new String(buff, 0, len).getBytes(StandardCharsets.UTF_8);
                out.write(data);
                tmpPrecision += len;
            }
        }
        this.precision = tmpPrecision;
        this.tableId = 0;
    }",True,True,"The function of this method is to create a CLOB (Character Large Object) in a temporary file. It takes a DataHandler, a Reader, and the remaining length as parameters. It sets the valueType to CLOB, initializes variables, creates a temporary file, and writes data from the Reader to the file. Finally, it sets the precision and tableId.",True,"This code creates a CLOB (Character Large Object) by reading data from a Reader and storing it in a temporary file. The data is read in chunks, converted to bytes using UTF-8 encoding, and written to the temporary file. The precision of the CLOB is calculated based on the length of the data."
21,"ValueLob(DataHandler,byte[],int,InputStream,long)",value lob handler buff len in remaining create a blob in a temporary file ,Method,,,"org.h2.value.ValueLob+createTempLobFileName(DataHandler) org.h2.value.ValueLob+createTempLobFileName(DataHandler) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.FileStore+autoDelete() org.h2.store.FileStore+autoDelete() org.h2.store.DataHandler+getLobCompressionAlgorithm(int) org.h2.store.DataHandler+getLobCompressionAlgorithm(int) org.h2.store.FileStoreOutputStream+FileStoreOutputStream(FileStore,DataHandler,String) org.h2.store.FileStoreOutputStream+write(byte[],int,int) org.h2.store.FileStoreOutputStream+write(byte[],int,int) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.util.IOUtils+readFully(InputStream,byte[],int) org.h2.util.IOUtils+readFully(InputStream,byte[],int)",org.h2.value.ValueLob+valueType org.h2.value.ValueLob+valueType org.h2.value.Value+BLOB org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler org.h2.value.ValueLob+small org.h2.value.ValueLob+small org.h2.value.ValueLob+lobId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+hmac org.h2.value.ValueLob+hmac org.h2.value.ValueLob+fileName org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.value.Value+BLOB org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+tableId org.h2.value.ValueLob+tableId,1208,33,2,"/** 
 * Create a BLOB in a temporary file.
 */
","/**
     * Create a BLOB in a temporary file.
     */
    private ValueLob(DataHandler handler, byte[] buff, int len, InputStream in,
            long remaining) throws IOException {
        this.valueType = Value.BLOB;
        this.handler = handler;
        this.small = null;
        this.lobId = 0;
        this.hmac = null;
        this.fileName = createTempLobFileName(handler);
        this.tempFile = handler.openFile(fileName, ""rw"", false);
        this.tempFile.autoDelete();
        long tmpPrecision = 0;
        boolean compress = handler.getLobCompressionAlgorithm(Value.BLOB) != null;
        try (FileStoreOutputStream out = new FileStoreOutputStream(tempFile, null, null)) {
            while (true) {
                tmpPrecision += len;
                out.write(buff, 0, len);
                remaining -= len;
                if (remaining <= 0) {
                    break;
                }
                len = getBufferSize(handler, compress, remaining);
                len = IOUtils.readFully(in, buff, len);
                if (len <= 0) {
                    break;
                }
            }
        }
        this.precision = tmpPrecision;
        this.tableId = 0;
    }",True,True,This method creates a BLOB (Binary Large Object) by writing data from a byte array or an input stream to a temporary file. It also calculates the precision of the BLOB and sets other necessary attributes.,True,"This code creates a BLOB (Binary Large Object) by writing data from a byte array or an input stream to a temporary file. The data is written in chunks, with the option to compress the data. The precision of the BLOB is calculated based on the length of the data written."
22,createTempLobFileName(DataHandler),create temp lob file name handler ,Method,"ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,"org.h2.store.DataHandler+getDatabasePath() org.h2.store.DataHandler+getDatabasePath() java.lang.String+isEmpty() java.lang.String+isEmpty() org.h2.store.fs.FileUtils+createTempFile(String,String,boolean) org.h2.store.fs.FileUtils+createTempFile(String,String,boolean)",org.h2.engine.SysProperties+PREFIX_TEMP_FILE org.h2.engine.Constants+SUFFIX_TEMP_FILE,324,8,10,,"private static String createTempLobFileName(DataHandler handler)
            throws IOException {
        String path = handler.getDatabasePath();
        if (path.isEmpty()) {
            path = SysProperties.PREFIX_TEMP_FILE;
        }
        return FileUtils.createTempFile(path, Constants.SUFFIX_TEMP_FILE, true);
    }",True,True,"This method creates a temporary file name for a lob (large object) using the given DataHandler. It retrieves the database path from the handler, and if it is empty, it uses a default prefix. It then calls a utility method to create a temporary file with the path and a constant suffix. The file name is returned.",False,"This code defines a private static method called ""createTempLobFileName"" that takes a DataHandler object as a parameter. It retrieves the database path from the DataHandler and if it is empty, it assigns a default path. It then calls the ""createTempFile"" method from the FileUtils class to create a temporary file with the specified path and returns the file name."
23,"create(int,DataHandler,int,long,byte[],long)",create type handler table id id hmac precision create a lob value param type the type value blob or clob param handler the data handler param table id the table id param id the lob id param hmac the message authentication code param precision the precision number of bytes characters return the value ,Method,,"org.h2.mvstore.db.LobStorageMap+createClob(Reader,long) org.h2.mvstore.db.LobStorageMap+createLob(InputStream,int) org.h2.mvstore.db.LobStorageMap+copyLob(ValueLob,int,long) org.h2.pagestore.db.LobStorageBackend+registerLob(int,long,int,long,long) org.h2.pagestore.db.LobStorageBackend+copyLob(ValueLob,int,long) org.h2.pagestore.db.LobStorageBackend+copyLob(ValueLob,int,long) org.h2.server.TcpServerThread+process() org.h2.tools.Recover+readBlobDb(Connection,long,long) org.h2.tools.Recover+readClobDb(Connection,long,long) org.h2.value.Transfer+readValue() org.h2.value.Transfer+readValue()","org.h2.value.ValueLob+ValueLob(int,DataHandler,int,long,byte[],long)",,551,15,9,"/** 
 * Create a LOB value.
 * @param type the type (Value.BLOB or CLOB)
 * @param handler the data handler
 * @param tableId the table id
 * @param id the lob id
 * @param hmac the message authentication code
 * @param precision the precision (number of bytes / characters)
 * @return the value
 */
","/**
     * Create a LOB value.
     *
     * @param type the type (Value.BLOB or CLOB)
     * @param handler the data handler
     * @param tableId the table id
     * @param id the lob id
     * @param hmac the message authentication code
     * @param precision the precision (number of bytes / characters)
     * @return the value
     */
    public static ValueLob create(int type, DataHandler handler,
            int tableId, long id, byte[] hmac, long precision) {
        return new ValueLob(type, handler, tableId, id, hmac, precision);
    }",False,True,"The function of this method is to create a LOB value by taking in various parameters such as type, data handler, table id, lob id, message authentication code, and precision, and returning a new instance of ValueLob.",False,"This code is a static method that creates a LOB (Large Object) value. It takes in parameters such as the type of LOB (BLOB or CLOB), a data handler, table ID, LOB ID, message authentication code, and precision. It returns a new instance of the ValueLob class with the provided parameters."
24,isLinkedToTable(),is linked to table check if this value is linked to a specific table for values that are kept fully in memory this method returns false return true if it is ,Method,,org.h2.engine.Session+removeAtCommit(ValueLob) org.h2.engine.Session+removeAtCommitStop(ValueLob) org.h2.result.RowList+readRow(Data),,org.h2.value.ValueLob+small org.h2.value.ValueLob+tableId,272,9,1,"/** 
 * Check if this value is linked to a specific table. For values that are kept fully in memory, this method returns false.
 * @return true if it is
 */
","/**
     * Check if this value is linked to a specific table. For values that are
     * kept fully in memory, this method returns false.
     *
     * @return true if it is
     */
    public boolean isLinkedToTable() {
        return small == null && tableId >= 0;
    }",False,False,"This method checks if the value is linked to a specific table. It returns true if it is linked, and false if it is kept fully in memory.",False,"The `isLinkedToTable()` method checks if a value is linked to a specific table. It returns true if the value is linked to a table, and false if it is kept fully in memory. The method determines this by checking if the `small` variable is null and if the `tableId` is greater than or equal to 0."
25,isStored(),is stored ,Method,,org.h2.value.Transfer+writeValue(Value) org.h2.value.Transfer+writeValue(Value),,org.h2.value.ValueLob+small org.h2.value.ValueLob+fileName,83,3,1,,"public boolean isStored() {
        return small == null && fileName == null;
    }",False,False,"The function of the method isStored() is to check if both the small variable and the fileName variable are null. It returns true if both variables are null, indicating that the object is not stored. Otherwise, it returns false.",False,"The `isStored()` method checks if both the `small` and `fileName` variables are null, indicating that the data is not stored. It returns a boolean value, true if the data is not stored and false otherwise."
26,remove(),remove remove the underlying resource if any for values that are kept fully in memory this method has no effect ,Method,"copy(DataHandler,int)","org.h2.command.CommandRemote+close() org.h2.engine.Session+setVariable(String,Value) org.h2.engine.Session+endTransaction(boolean) org.h2.expression.ParameterRemote+setValue(Value,boolean)",org.h2.store.FileStore+stopAutoDelete() org.h2.store.FileStore+stopAutoDelete() org.h2.store.DataHandler+getLobSyncObject() org.h2.store.DataHandler+getLobSyncObject() org.h2.store.fs.FileUtils+delete(String) org.h2.store.fs.FileUtils+delete(String) org.h2.store.LobStorageInterface+removeLob(ValueLob) org.h2.store.DataHandler+getLobStorage() org.h2.store.DataHandler+getLobStorage() org.h2.store.LobStorageInterface+removeLob(ValueLob),org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+handler org.h2.value.ValueLob+fileName org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler,627,19,1,"/** 
 * Remove the underlying resource, if any. For values that are kept fully in memory this method has no effect.
 */
","/**
     * Remove the underlying resource, if any. For values that are kept fully in
     * memory this method has no effect.
     */
    public void remove() {
        if (fileName != null) {
            if (tempFile != null) {
                tempFile.stopAutoDelete();
            }
            // synchronize on the database, to avoid concurrent temp file
            // creation / deletion / backup
            synchronized (handler.getLobSyncObject()) {
                FileUtils.delete(fileName);
            }
        }
        if (handler != null) {
            handler.getLobStorage().removeLob(this);
        }
    }",True,True,"The function of this method is to remove the underlying resource, if any. It checks if there is a file name and a temporary file, stops the automatic deletion of the temporary file, synchronizes with the database, and deletes the file. It also removes the LOB from the LOB storage.",False,"The `remove()` method is used to delete the underlying resource associated with a value. It first checks if a file name is present and if so, stops the automatic deletion of the temporary file. Then, it synchronizes with the database to avoid concurrent file operations and deletes the file. Finally, it removes the value from the LobStorage."
27,"copy(DataHandler,int)",copy database table id copy a large value to be used in the given table for values that are kept fully in memory this method has no effect param database the data handler param table id the table where this object is used return the new value or itself ,Method,"copy(DataHandler,int)","org.h2.engine.Session+setVariable(String,Value) org.h2.mvstore.db.MVPrimaryIndex+add(Session,Row)","org.h2.store.LobStorageInterface+copyLob(ValueLob,int,long) org.h2.store.DataHandler+getLobStorage() org.h2.store.DataHandler+getLobStorage() org.h2.store.LobStorageInterface+copyLob(ValueLob,int,long) org.h2.store.DataHandler+getMaxLengthInplaceLob() org.h2.store.DataHandler+getMaxLengthInplaceLob() org.h2.store.DataHandler+getLobStorage() org.h2.store.DataHandler+getLobStorage() org.h2.store.LobStorageInterface+createBlob(InputStream,long) org.h2.store.LobStorageInterface+createBlob(InputStream,long) org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream() org.h2.store.LobStorageInterface+createClob(Reader,long) org.h2.store.LobStorageInterface+createClob(Reader,long) org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+copy(DataHandler,int) org.h2.value.ValueLob+copy(DataHandler,int) org.h2.value.ValueLob+remove() org.h2.value.ValueLob+remove()",org.h2.value.ValueLob+small org.h2.value.ValueLob+handler org.h2.value.ValueLob+precision org.h2.value.ValueLob+small org.h2.value.ValueLob+valueType org.h2.value.Value+BLOB org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision,950,25,1,"/** 
 * Copy a large value, to be used in the given table. For values that are kept fully in memory this method has no effect.
 * @param database the data handler
 * @param tableId the table where this object is used
 * @return the new value or itself
 */
","/**
     * Copy a large value, to be used in the given table. For values that are
     * kept fully in memory this method has no effect.
     *
     * @param database the data handler
     * @param tableId the table where this object is used
     * @return the new value or itself
     */
    public ValueLob copy(DataHandler database, int tableId) {
        if (small == null) {
            return handler.getLobStorage().copyLob(this, tableId, precision);
        } else if (small.length > database.getMaxLengthInplaceLob()) {
            LobStorageInterface s = database.getLobStorage();
            ValueLob v;
            if (valueType == Value.BLOB) {
                v = s.createBlob(getInputStream(), precision);
            } else {
                v = s.createClob(getReader(), precision);
            }
            ValueLob v2 = v.copy(database, tableId);
            v.remove();
            return v2;
        }
        return this;
    }",False,False,"The function of this method is to copy a large value to be used in a given table. If the value is small and fits in memory, it has no effect. If the value is large, it creates a new value and copies it to the table, removing the original value.",False,"This code defines a method called ""copy"" that is used to create a copy of a large value stored in a table. If the value is stored fully in memory, the method has no effect. Otherwise, it uses the data handler and table ID to create a new value and return it."
28,getTableId(),get table id get the current table id of this lob return the table id ,Method,,"org.h2.engine.Session+addTemporaryLob(ValueLob) org.h2.mvstore.db.LobStorageMap+createClob(Reader,long) org.h2.mvstore.db.LobStorageMap+copyLob(ValueLob,int,long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+removeLob(ValueLob) org.h2.result.RowList+writeRow(Data,Row) org.h2.result.RowList+readRow(Data) org.h2.value.Transfer+writeValue(Value) org.h2.value.Transfer+writeValue(Value)",,org.h2.value.ValueLob+tableId,151,8,1,"/** 
 * Get the current table id of this lob.
 * @return the table id
 */
","/**
     * Get the current table id of this lob.
     *
     * @return the table id
     */
    public int getTableId() {
        return tableId;
    }",True,True,This method serves to retrieve the current table id of a lob. It returns an integer value representing the table id.,False,"This code defines a method called ""getTableId()"" which returns the table id of a lob. The method has no parameters and returns an integer value representing the table id."
29,getType(),get type ,Method,,"org.h2.mvstore.db.LobStorageMap+copyLob(ValueLob,int,long) org.h2.tools.Recover+getSQL(StringBuilder,String,Value) org.h2.value.Transfer+writeValue(Value) org.h2.value.Transfer+writeValue(Value)","org.h2.value.TypeInfo+TypeInfo(int,long,int,int,ExtTypeInfo) org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long)",org.h2.value.ValueLob+type org.h2.value.ValueLob+type org.h2.value.ValueLob+type org.h2.value.ValueLob+type org.h2.value.ValueLob+valueType org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision,256,8,1,,"@Override
    public TypeInfo getType() {
        TypeInfo type = this.type;
        if (type == null) {
            this.type = type = new TypeInfo(valueType, precision, 0, MathUtils.convertLongToInt(precision), null);
        }
        return type;
    }",False,False,"This method returns the type information of an object. If the type information is null, it creates a new type information object and assigns it to the variable ""type"" before returning it.",False,"This code defines a method called `getType()` that returns an object of type `TypeInfo`. If the `type` object is null, it creates a new `TypeInfo` object and assigns it to `type` before returning it."
30,getValueType(),get value type ,Method,,"org.h2.mvstore.db.LobStorageMap+copyLob(ValueLob,int,long) org.h2.pagestore.db.LobStorageBackend+copyLob(ValueLob,int,long) org.h2.tools.Recover+getSQL(StringBuilder,String,Value) org.h2.util.JdbcUtils+setLob(PreparedStatement,int,ValueLob)",,org.h2.value.ValueLob+valueType,73,4,1,,"@Override
    public int getValueType() {
        return valueType;
    }",False,False,"This method serves to return the value type, which is an integer.",False,"The code snippet is a method named `getValueType()` that returns an integer value. It is marked with the `@Override` annotation, indicating that it overrides a method from a superclass or interface."
31,getString(),get string ,Method,"getSQL(StringBuilder,int) getSQL(StringBuilder,int)",,"java.lang.String+String(byte[],Charset) org.h2.util.IOUtils+readStringAndClose(Reader,int) org.h2.util.IOUtils+readStringAndClose(Reader,int) org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getReader() org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+toString() org.h2.value.ValueLob+toString()",org.h2.value.ValueLob+precision java.lang.Integer+MAX_VALUE org.h2.value.ValueLob+precision java.lang.Integer+MAX_VALUE org.h2.value.ValueLob+precision org.h2.value.ValueLob+small org.h2.value.ValueLob+small java.nio.charset.StandardCharsets+UTF_8,469,13,1,,"@Override
    public String getString() {
        int len = precision > Integer.MAX_VALUE || precision == 0 ?
                Integer.MAX_VALUE : (int) precision;
        try {
            if (small != null) {
                return new String(small, StandardCharsets.UTF_8);
            }
            return IOUtils.readStringAndClose(getReader(), len);
        } catch (IOException e) {
            throw DbException.convertIOException(e, toString());
        }
    }",False,False,"This method returns a string. It first checks the precision value and assigns it to the variable len. Then, it tries to read a string from a reader object and returns it. If an IOException occurs, it throws a converted DbException.",False,"This code defines a method called `getString()` that returns a string value. It first checks if a byte array called `small` is not null, and if so, it converts it to a string using UTF-8 encoding. Otherwise, it reads a string from a reader object and returns it, with a maximum length of `precision` characters."
32,getBytes(),get bytes ,Method,,,"org.h2.util.Utils+cloneByteArray(byte[]) org.h2.util.Utils+cloneByteArray(byte[]) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream() org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+toString() org.h2.value.ValueLob+toString()",org.h2.value.ValueLob+small org.h2.value.ValueLob+small java.lang.Integer+MAX_VALUE,339,11,1,,"@Override
    public byte[] getBytes() {
        if (small != null) {
            return Utils.cloneByteArray(small);
        }
        try {
            return IOUtils.readBytesAndClose(getInputStream(), Integer.MAX_VALUE);
        } catch (IOException e) {
            throw DbException.convertIOException(e, toString());
        }
    }",False,False,"This method returns a byte array. If the ""small"" byte array is not null, it is cloned and returned. Otherwise, it reads bytes from an input stream and returns them. If an IOException occurs, it is converted and thrown as a DbException.",False,"The `getBytes()` method returns a byte array. If the `small` byte array is not null, it is cloned and returned. Otherwise, it reads bytes from an input stream and returns them. If an IOException occurs, it is converted to a DbException and thrown."
33,getBytesNoCopy(),get bytes no copy ,Method,"hashCode() getSQL(StringBuilder,int) getSQL(StringBuilder,int)","org.h2.value.Value+convertToBlob(TypeInfo,int,Object)","org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream() org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+toString() org.h2.value.ValueLob+toString()",org.h2.value.ValueLob+small org.h2.value.ValueLob+small java.lang.Integer+MAX_VALUE,323,11,1,,"@Override
    public byte[] getBytesNoCopy() {
        if (small != null) {
            return small;
        }
        try {
            return IOUtils.readBytesAndClose(getInputStream(), Integer.MAX_VALUE);
        } catch (IOException e) {
            throw DbException.convertIOException(e, toString());
        }
    }",False,False,"This method returns a byte array containing the data from an input stream. If the data is small, it returns a pre-existing byte array. Otherwise, it reads the data from the input stream and returns it.",False,"The `getBytesNoCopy()` method returns a byte array. If the `small` byte array is not null, it is returned directly. Otherwise, it reads bytes from an input stream and returns them. If an IOException occurs during the process, it is converted and thrown as a DbException."
34,hashCode(),hash code ,Method,equals(Object) equals(Object),,org.h2.util.Utils+getByteArrayHash(byte[]) org.h2.util.Utils+getByteArrayHash(byte[]) org.h2.value.ValueLob+getBytesNoCopy() org.h2.value.ValueLob+getBytesNoCopy(),org.h2.value.ValueLob+hash org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+hash org.h2.value.ValueLob+hash,395,12,1,,"@Override
    public int hashCode() {
        if (hash == 0) {
            if (precision > 4096) {
                // TODO: should calculate the hash code when saving, and store
                // it in the database file
                return (int) (precision ^ (precision >>> 32));
            }
            hash = Utils.getByteArrayHash(getBytesNoCopy());
        }
        return hash;
    }",False,False,"This method calculates and returns the hash code of an object. If the hash code has not been calculated yet, it is calculated based on the precision value. If the precision is greater than 4096, a specific calculation is performed. Otherwise, the hash code is calculated using a utility method.",False,"This code overrides the default hashCode() method to calculate and return the hash code of an object. If the precision value is greater than 4096, it returns a calculated hash code, otherwise it uses a utility method to calculate the hash code based on the object's byte representation."
35,"compareTypeSafe(Value,CompareMode,CastDataProvider)",compare type safe v mode provider ,Method,equals(Object),,"org.h2.value.ValueLob+compare(ValueLob,ValueLob) org.h2.value.ValueLob+compare(ValueLob,ValueLob)",org.h2.value.ValueLob+lobId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+small org.h2.value.ValueLob+small,331,11,1,,"@Override
    public int compareTypeSafe(Value v, CompareMode mode, CastDataProvider provider) {
        if (v == this) {
            return 0;
        }
        ValueLob v2 = (ValueLob) v;
        if (lobId == v2.lobId && small == null && v2.small == null) {
            return 0;
        }
        return compare(this, v2);
    }",False,False,"This method is used to compare two values of type ValueLob. It checks if the values are equal based on their lobId and small properties. If they are equal, it returns 0. Otherwise, it calls the compare method to determine the comparison result.",False,"This code is a method that compares two instances of the ValueLob class. It first checks if the two instances are the same, and if so, returns 0. Then it compares the lobId and small properties of the instances, and if they are equal, returns 0. Otherwise, it calls the compare method to perform a more detailed comparison."
36,getObject(),get object ,Method,,,org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream(),org.h2.value.ValueLob+valueType org.h2.value.Value+CLOB,161,7,1,,"@Override
    public Object getObject() {
        if (valueType == Value.CLOB) {
            return getReader();
        }
        return getInputStream();
    }",False,False,"The method returns an object based on the value type. If the value type is CLOB, it returns a reader. Otherwise, it returns an input stream.",False,"The code is an implementation of the `getObject()` method, which returns an object based on the value type. If the value type is a CLOB (Character Large Object), it returns a reader object. Otherwise, it returns an input stream object."
37,getReader(),get reader ,Method,"copy(DataHandler,int) getString() getObject() getReader(long,long) convertPrecision(long) convertPrecision(long)","org.h2.util.JdbcUtils+setLob(PreparedStatement,int,ValueLob) org.h2.value.Value+convertToClob(TypeInfo,int,Object)",org.h2.util.IOUtils+getBufferedReader(InputStream) org.h2.util.IOUtils+getBufferedReader(InputStream) org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream(),,107,4,1,,"@Override
    public Reader getReader() {
        return IOUtils.getBufferedReader(getInputStream());
    }",False,False,The function of the method is to return a Reader object that is obtained by using the IOUtils class to get a BufferedReader object from the InputStream object.,False,The code is implementing a method called `getReader()` which returns a `Reader` object. It uses the `IOUtils` class to get a buffered reader from the input stream obtained from `getInputStream()`.
38,"getReader(long,long)",get reader one based offset length ,Method,,,"org.h2.value.ValueLob+rangeReader(Reader,long,long,long) org.h2.value.ValueLob+rangeReader(Reader,long,long,long) org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getReader()",org.h2.value.ValueLob+valueType org.h2.value.Value+CLOB org.h2.value.ValueLob+precision,186,4,1,,"@Override
    public Reader getReader(long oneBasedOffset, long length) {
        return rangeReader(getReader(), oneBasedOffset, length, valueType == Value.CLOB ? precision : -1);
    }",False,False,"The method ""getReader"" returns a Reader object with a specified offset and length. It uses the ""rangeReader"" method to create the Reader object based on the given parameters.",False,"The code snippet is an overridden method that returns a Reader object. It calls the rangeReader method, passing the current Reader object, an offset, a length, and a precision value. The precision value is determined based on the valueType, which can be either Value.CLOB or another value."
39,getInputStream(),get input stream ,Method,"copy(DataHandler,int) getBytes() getBytesNoCopy() getObject() getReader() convertPrecision(long) convertPrecision(long)","org.h2.util.JdbcUtils+setLob(PreparedStatement,int,ValueLob) org.h2.value.Value+convertToBlob(TypeInfo,int,Object)","java.io.ByteArrayInputStream+ByteArrayInputStream(byte[]) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.DataHandler+openFile(String,String,boolean) java.io.BufferedInputStream+BufferedInputStream(InputStream,int) org.h2.store.FileStoreInputStream+FileStoreInputStream(FileStore,DataHandler,boolean,boolean) org.h2.store.LobStorageInterface+getInputStream(ValueLob,byte[],long) org.h2.store.DataHandler+getLobStorage() org.h2.store.DataHandler+getLobStorage() org.h2.store.LobStorageInterface+getInputStream(ValueLob,byte[],long) org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+toString() org.h2.value.ValueLob+toString()",org.h2.value.ValueLob+small org.h2.value.ValueLob+small org.h2.value.ValueLob+fileName org.h2.value.ValueLob+handler org.h2.value.ValueLob+fileName org.h2.engine.SysProperties+lobCloseBetweenReads org.h2.value.ValueLob+handler org.h2.engine.Constants+IO_BUFFER_SIZE org.h2.value.ValueLob+valueType org.h2.value.Value+BLOB org.h2.value.ValueLob+precision org.h2.value.ValueLob+handler org.h2.value.ValueLob+hmac,752,17,1,,"@Override
    public InputStream getInputStream() {
        if (small != null) {
            return new ByteArrayInputStream(small);
        } else if (fileName != null) {
            FileStore store = handler.openFile(fileName, ""r"", true);
            boolean alwaysClose = SysProperties.lobCloseBetweenReads;
            return new BufferedInputStream(new FileStoreInputStream(store,
                    handler, false, alwaysClose), Constants.IO_BUFFER_SIZE);
        }
        long byteCount = (valueType == Value.BLOB) ? precision : -1;
        try {
            return handler.getLobStorage().getInputStream(this, hmac, byteCount);
        } catch (IOException e) {
            throw DbException.convertIOException(e, toString());
        }
    }",False,False,"This method serves to retrieve an InputStream for reading the contents of a file or a LOB (Large Object) stored in a database. It first checks if the file or LOB is small enough to be stored in memory, and if so, returns a ByteArrayInputStream. If not, it retrieves the InputStream from the LOB storage using the provided parameters.",False,
40,"getInputStream(long,long)",get input stream one based offset length ,Method,,,"org.h2.value.Value+getInputStream(long,long) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.FileStore+length() org.h2.store.FileStore+length() java.io.BufferedInputStream+BufferedInputStream(InputStream,int) org.h2.store.FileStoreInputStream+FileStoreInputStream(FileStore,DataHandler,boolean,boolean) org.h2.store.LobStorageInterface+getInputStream(ValueLob,byte[],long) org.h2.store.DataHandler+getLobStorage() org.h2.store.DataHandler+getLobStorage() org.h2.store.LobStorageInterface+getInputStream(ValueLob,byte[],long) org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+toString() org.h2.value.ValueLob+toString() org.h2.value.ValueLob+rangeInputStream(InputStream,long,long,long) org.h2.value.ValueLob+rangeInputStream(InputStream,long,long,long)",org.h2.value.ValueLob+small org.h2.value.ValueLob+fileName org.h2.value.ValueLob+handler org.h2.value.ValueLob+fileName org.h2.engine.SysProperties+lobCloseBetweenReads org.h2.value.ValueLob+handler org.h2.engine.Constants+IO_BUFFER_SIZE org.h2.value.ValueLob+valueType org.h2.value.Value+BLOB org.h2.value.ValueLob+precision org.h2.value.ValueLob+handler org.h2.value.ValueLob+hmac,1025,22,1,,"@Override
    public InputStream getInputStream(long oneBasedOffset, long length) {
        long byteCount;
        InputStream inputStream;
        if (small != null) {
            return super.getInputStream(oneBasedOffset, length);
        } else if (fileName != null) {
            FileStore store = handler.openFile(fileName, ""r"", true);
            boolean alwaysClose = SysProperties.lobCloseBetweenReads;
            byteCount = store.length();
            inputStream = new BufferedInputStream(new FileStoreInputStream(store,
                    handler, false, alwaysClose), Constants.IO_BUFFER_SIZE);
        } else {
            byteCount = (valueType == Value.BLOB) ? precision : -1;
            try {
                inputStream = handler.getLobStorage().getInputStream(this, hmac, byteCount);
            } catch (IOException e) {
                throw DbException.convertIOException(e, toString());
            }
        }
        return rangeInputStream(inputStream, oneBasedOffset, length, byteCount);
    }",False,False,"This method returns an InputStream for reading data from a file or a lob (large object) based on the given offset and length. It handles different cases such as reading from a small object, a file, or a lob, and returns a rangeInputStream based on the given parameters.",False,"This code defines a method called `getInputStream` that returns an `InputStream` object. The method checks if the `small` variable is not null and if so, it calls the superclass's `getInputStream` method. Otherwise, it checks if the `fileName` variable is not null and if so, it opens a file and creates a buffered input stream. If neither `small` nor `fileName` is not null, it retrieves an input stream from the `handler` object and returns a range input stream based on the given offset and length."
41,"getSQL(StringBuilder,int)",get sql builder sql flags ,Method,,,"java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) org.h2.util.StringUtils+quoteStringSQL(StringBuilder,String) org.h2.util.StringUtils+quoteStringSQL(StringBuilder,String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.h2.value.ValueLob+getString() org.h2.value.ValueLob+getString() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) org.h2.util.StringUtils+quoteStringSQL(StringBuilder,String) org.h2.util.StringUtils+quoteStringSQL(StringBuilder,String) org.h2.value.ValueLob+getString() org.h2.value.ValueLob+getString() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) org.h2.util.StringUtils+convertBytesToHex(StringBuilder,byte[]) org.h2.util.StringUtils+convertBytesToHex(StringBuilder,byte[]) org.h2.value.ValueLob+getBytesNoCopy() org.h2.value.ValueLob+getBytesNoCopy() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+convertBytesToHex(StringBuilder,byte[]) org.h2.util.StringUtils+convertBytesToHex(StringBuilder,byte[]) org.h2.value.ValueLob+getBytesNoCopy() org.h2.value.ValueLob+getBytesNoCopy() java.lang.StringBuilder+append(char)",org.h2.util.HasSQL+REPLACE_LOBS_FOR_TRACE org.h2.value.ValueLob+small org.h2.value.ValueLob+precision org.h2.engine.SysProperties+MAX_TRACE_DATA_LENGTH org.h2.value.ValueLob+valueType org.h2.value.Value+CLOB org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+tableId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+valueType org.h2.value.Value+CLOB org.h2.util.HasSQL+REPLACE_LOBS_FOR_TRACE org.h2.util.HasSQL+NO_CASTS org.h2.value.ValueLob+precision org.h2.util.HasSQL+REPLACE_LOBS_FOR_TRACE org.h2.util.HasSQL+NO_CASTS org.h2.value.ValueLob+precision,1423,30,1,,"@Override
    public StringBuilder getSQL(StringBuilder builder, int sqlFlags) {
        if ((sqlFlags & REPLACE_LOBS_FOR_TRACE) != 0
                && (small == null || precision > SysProperties.MAX_TRACE_DATA_LENGTH)) {
            if (valueType == Value.CLOB) {
                builder.append(""SPACE("").append(precision);
            } else {
                builder.append(""CAST(REPEAT('00', "").append(precision).append("") AS BINARY"");
            }
            builder.append("" /* table: "").append(tableId).append("" id: "").append(lobId).append("" */)"");
        }
        if (valueType == Value.CLOB) {
            if ((sqlFlags & (REPLACE_LOBS_FOR_TRACE | NO_CASTS)) == 0) {
                StringUtils.quoteStringSQL(builder.append(""CAST(""), getString()).append("" AS CLOB("").append(precision)
                        .append(""))"");
            } else {
                StringUtils.quoteStringSQL(builder, getString());
            }
        } else {
            if ((sqlFlags & (REPLACE_LOBS_FOR_TRACE | NO_CASTS)) == 0) {
                builder.append(""CAST(X'"");
                StringUtils.convertBytesToHex(builder, getBytesNoCopy()).append(""' AS BLOB("").append(precision)
                        .append(""))"");
            } else {
                builder.append(""X'"");
                StringUtils.convertBytesToHex(builder, getBytesNoCopy()).append('\'');
            }
        }
        return builder;
    }",False,False,"This method is used to generate an SQL statement for retrieving a value from a database. It handles different cases based on the value type and SQL flags, such as replacing large objects (LOBs) for tracing purposes and casting values to the appropriate data type. The generated SQL statement is appended to the provided StringBuilder object, which is then returned.",False,"This code is a method that generates SQL statements for retrieving LOB (Large Object) values from a database. It checks if the LOB value needs to be replaced for tracing purposes, and if so, it constructs the appropriate SQL statement. It also handles the conversion and casting of LOB values to the appropriate data type (CLOB or BLOB) based on the SQL flags provided."
42,getPrecision(),get precision returns the precision return the precision ,Method,,"org.h2.util.JdbcUtils+setLob(PreparedStatement,int,ValueLob) org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToClob(TypeInfo,int,Object)",,org.h2.value.ValueLob+precision,142,8,1,"/** 
 * Returns the precision.
 * @return the precision
 */
","/**
     * Returns the precision.
     *
     * @return the precision
     */
    public long getPrecision() {
        return precision;
    }",False,False,This method serves to retrieve the precision value.,False,
43,getSmall(),get small get the data if this a small lob value return the data ,Method,,"org.h2.result.RowList+writeRow(Data,Row) org.h2.tools.Recover+getSQL(StringBuilder,String,Value) org.h2.value.Value+convertToClob(TypeInfo,int,Object)",,org.h2.value.ValueLob+small,148,8,1,"/** 
 * Get the data if this a small lob value.
 * @return the data
 */
","/**
     * Get the data if this a small lob value.
     *
     * @return the data
     */
    public byte[] getSmall() {
        return small;
    }",True,True,This method serves to retrieve the data if it is a small lob value. It returns the data as a byte array.,False,"The given code is a method named ""getSmall"" that returns a byte array. It is used to retrieve the data if it is a small lob value. The method does not take any parameters and has a summary description indicating its purpose."
44,getDataHandler(),get data handler returns the data handler return the data handler or code null ,Method,,"org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToClob(TypeInfo,int,Object)",,org.h2.value.ValueLob+handler,172,8,1,"/** 
 * Returns the data handler.
 * @return the data handler, or {@code null}
 */
","/**
     * Returns the data handler.
     *
     * @return the data handler, or {@code null}
     */
    public DataHandler getDataHandler() {
        return handler;
    }",True,True,This method returns the data handler.,False,This code defines a method called `getDataHandler()` that returns a `DataHandler` object. The method has a summary description stating that it returns the data handler or `null` if it is not available.
45,equals(Object),equals other ,Method,,,"org.h2.value.ValueLob+hashCode() org.h2.value.ValueLob+hashCode() org.h2.value.ValueLob+hashCode() org.h2.value.ValueLob+hashCode() org.h2.value.ValueLob+compareTypeSafe(Value,CompareMode,CastDataProvider) org.h2.value.ValueLob+compareTypeSafe(Value,CompareMode,CastDataProvider)",,308,9,1,,"@Override
    public boolean equals(Object other) {
        if (!(other instanceof ValueLob))
            return false;
        ValueLob otherLob = (ValueLob) other;
        if (hashCode() != otherLob.hashCode())
            return false;
        return compareTypeSafe((Value) other, null, null) == 0;
    }",False,False,"This method overrides the equals() method to compare two objects. It checks if the other object is an instance of ValueLob, has the same hash code, and is type-safe. It returns true if all conditions are met, otherwise false.",False,"This code overrides the equals() method to compare two objects of type ValueLob. It first checks if the other object is an instance of ValueLob, then compares their hash codes. If the hash codes are equal, it calls the compareTypeSafe() method to perform a type-safe comparison and returns true if the result is 0, indicating equality."
46,getMemory(),get memory ,Method,,,,org.h2.value.ValueLob+small org.h2.value.ValueLob+small,291,12,1,,"@Override
    public int getMemory() {
        if (small != null) {
            /*
             * Java 11 with -XX:-UseCompressedOops
             * 0 bytes: 120 bytes
             * 1 byte: 128 bytes
             */
            return small.length + 127;
        }
        return 140;
    }",False,False,"This method returns the amount of memory used by an object. If the object is small, it calculates the memory based on the length of the object plus 127 bytes. Otherwise, it returns a default value of 140 bytes.",False,"The code defines a method named ""getMemory"" that returns an integer value. If the variable ""small"" is not null, the method calculates and returns the length of ""small"" plus 127. Otherwise, it returns a fixed value of 140."
47,copyToTemp(),copy to temp create an independent copy of this temporary value the file will not be deleted automatically return the value ,Method,,"org.h2.result.RowList+writeRow(Data,Row)",,,215,9,1,"/** 
 * Create an independent copy of this temporary value. The file will not be deleted automatically.
 * @return the value
 */
","/**
     * Create an independent copy of this temporary value.
     * The file will not be deleted automatically.
     *
     * @return the value
     */
    public ValueLob copyToTemp() {
        return this;
    }",False,False,The method creates a copy of a temporary value and returns it. The copied value is independent and will not be automatically deleted.,False,"The given code is a method named ""copyToTemp"" which returns an instance of the ""ValueLob"" class. It creates an independent copy of a temporary value and does not delete the associated file automatically."
48,copyToResult(),copy to result create an independent copy of this value that will be bound to a result return the value this for small objects ,Method,,org.h2.result.LocalResult+cloneLobs(Value[]),"org.h2.store.DataHandler+getLobStorage() org.h2.store.DataHandler+getLobStorage() org.h2.store.LobStorageInterface+isReadOnly() org.h2.store.LobStorageInterface+isReadOnly() org.h2.store.LobStorageInterface+copyLob(ValueLob,int,long) org.h2.store.LobStorageInterface+copyLob(ValueLob,int,long)",org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler org.h2.store.LobStorageFrontend+TABLE_RESULT org.h2.value.ValueLob+precision,463,16,1,"/** 
 * Create an independent copy of this value, that will be bound to a result.
 * @return the value (this for small objects)
 */
","/**
     * Create an independent copy of this value,
     * that will be bound to a result.
     *
     * @return the value (this for small objects)
     */
    public ValueLob copyToResult() {
        if (handler == null) {
            return this;
        }
        LobStorageInterface s = handler.getLobStorage();
        if (s.isReadOnly()) {
            return this;
        }
        return s.copyLob(this, LobStorageFrontend.TABLE_RESULT, precision);
    }",False,False,"This method creates an independent copy of a value that is bound to a result. If the value's handler is null or the storage is read-only, it returns the original value. Otherwise, it returns a copy of the value using the specified storage and precision.",False,"The `copyToResult()` method creates an independent copy of a value that is bound to a result. If the value's handler is null or the associated LobStorageInterface is read-only, the method returns the original value. Otherwise, it uses the LobStorageInterface to create a copy of the value with the specified precision and returns it."
49,getLobId(),get lob id ,Method,,"org.h2.mvstore.db.LobStorageMap+createClob(Reader,long) org.h2.mvstore.db.LobStorageMap+copyLob(ValueLob,int,long) org.h2.mvstore.db.LobStorageMap+copyLob(ValueLob,int,long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+removeLob(ValueLob) org.h2.pagestore.db.LobStorageBackend+removeLob(ValueLob) org.h2.pagestore.db.LobStorageBackend+getInputStream(ValueLob,byte[],long) org.h2.pagestore.db.LobStorageBackend+copyLob(ValueLob,int,long) org.h2.store.LobStorageInterface+LobStorageRemoteInputStream(DataHandler,ValueLob,byte[],long) org.h2.tools.Recover+getSQL(StringBuilder,String,Value) org.h2.value.Transfer+writeValue(Value) org.h2.value.Transfer+writeValue(Value) org.h2.value.Transfer+writeValue(Value) org.h2.value.Transfer+writeValue(Value)",,org.h2.value.ValueLob+lobId,52,3,1,,"public long getLobId() {
        return lobId;
    }",True,True,"The function of the given method is to retrieve and return the value of the variable ""lobId"" as a long data type.",False,"The code contains a method named ""getLobId"" which returns a long value representing the lobId. This method does not take any parameters and simply returns the value of the lobId variable."
50,toString(),to string ,Method,"getString() getBytes() getBytesNoCopy() getInputStream() getInputStream(long,long)",org.h2.engine.Session+removeAtCommit(ValueLob) org.h2.engine.Session+removeAtCommitStop(ValueLob),,org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tableId org.h2.value.ValueLob+lobId,122,4,1,,"@Override
    public String toString() {
        return ""lob: "" + fileName + "" table: "" + tableId + "" id: "" + lobId;
    }",True,True,"This method overrides the default toString() method and returns a string representation of the object, including the values of fileName, tableId, and lobId.",False,"The code snippet is an implementation of the `toString()` method, which is used to convert an object into a string representation. In this case, it returns a string that combines the values of `fileName`, `tableId`, and `lobId` with specific labels, such as ""lob:"", ""table:"", and ""id:""."
51,"createTempClob(Reader,long,DataHandler)",create temp clob in length handler create a temporary clob value from a stream param in the reader param length the number of characters to read or 1 for no limit param handler the data handler return the lob value ,Method,convertPrecision(long),"org.h2.store.LobStorageFrontend+createClob(Reader,long)","org.h2.store.RangeReader+RangeReader(Reader,long,long) org.h2.message.DbException+convert(Throwable) org.h2.message.DbException+convert(Throwable) java.io.BufferedReader+BufferedReader(Reader,int) org.h2.store.DataHandler+getLobCompressionAlgorithm(int) org.h2.store.DataHandler+getLobCompressionAlgorithm(int) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.util.IOUtils+readStringAndClose(Reader,int) org.h2.util.IOUtils+readStringAndClose(Reader,int) java.lang.String+toCharArray() java.lang.String+toCharArray() java.io.BufferedReader+mark(int) java.io.BufferedReader+mark(int) org.h2.util.IOUtils+readFully(Reader,char[],int) org.h2.util.IOUtils+readFully(Reader,char[],int) org.h2.store.DataHandler+getMaxLengthInplaceLob() org.h2.store.DataHandler+getMaxLengthInplaceLob() java.lang.String+getBytes(Charset) java.lang.String+String(char[],int,int) java.lang.String+getBytes(Charset) org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.value.ValueLob+createSmallLob(int,byte[],long) java.io.BufferedReader+reset() java.io.BufferedReader+reset() org.h2.value.ValueLob+ValueLob(DataHandler,Reader,long) org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String)",org.h2.engine.Constants+IO_BUFFER_SIZE org.h2.value.Value+CLOB java.lang.Long+MAX_VALUE java.lang.Integer+MAX_VALUE java.nio.charset.StandardCharsets+UTF_8 org.h2.value.Value+CLOB,2022,52,9,"/** 
 * Create a temporary CLOB value from a stream.
 * @param in the reader
 * @param length the number of characters to read, or -1 for no limit
 * @param handler the data handler
 * @return the lob value
 */
","/**
     * Create a temporary CLOB value from a stream.
     *
     * @param in the reader
     * @param length the number of characters to read, or -1 for no limit
     * @param handler the data handler
     * @return the lob value
     */
    public static ValueLob createTempClob(Reader in, long length,
            DataHandler handler) {
        if (length >= 0) {
            // Otherwise BufferedReader may try to read more data than needed and that
            // blocks the network level
            try {
                in = new RangeReader(in, 0, length);
            } catch (IOException e) {
                throw DbException.convert(e);
            }
        }
        BufferedReader reader;
        if (in instanceof BufferedReader) {
            reader = (BufferedReader) in;
        } else {
            reader = new BufferedReader(in, Constants.IO_BUFFER_SIZE);
        }
        try {
            boolean compress = handler.getLobCompressionAlgorithm(Value.CLOB) != null;
            long remaining = Long.MAX_VALUE;
            if (length >= 0 && length < remaining) {
                remaining = length;
            }
            int len = getBufferSize(handler, compress, remaining);
            char[] buff;
            if (len >= Integer.MAX_VALUE) {
                String data = IOUtils.readStringAndClose(reader, -1);
                buff = data.toCharArray();
                len = buff.length;
            } else {
                buff = new char[len];
                reader.mark(len);
                len = IOUtils.readFully(reader, buff, len);
            }
            if (len <= handler.getMaxLengthInplaceLob()) {
                byte[] small = new String(buff, 0, len).getBytes(StandardCharsets.UTF_8);
                return ValueLob.createSmallLob(Value.CLOB, small, len);
            }
            reader.reset();
            return new ValueLob(handler, reader, remaining);
        } catch (IOException e) {
            throw DbException.convertIOException(e, null);
        }
    }",True,True,"This method creates a temporary CLOB (Character Large Object) value from a stream. It takes a reader, the number of characters to read, and a data handler as parameters. It reads the stream, compresses it if necessary, and returns the lob value.",True,"This code defines a method called `createTempClob` that takes a reader, length, and data handler as input. It creates a temporary CLOB value by reading characters from the reader, compressing them if necessary, and returning a `ValueLob` object."
52,"createTempBlob(InputStream,long,DataHandler)",create temp blob in length handler create a temporary blob value from a stream param in the input stream param length the number of characters to read or 1 for no limit param handler the data handler return the lob value ,Method,convertPrecision(long),"org.h2.store.LobStorageFrontend+createBlob(InputStream,long)","org.h2.store.DataHandler+getLobCompressionAlgorithm(int) org.h2.store.DataHandler+getLobCompressionAlgorithm(int) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.util.Utils+newBytes(int) org.h2.util.Utils+newBytes(int) org.h2.util.IOUtils+readFully(InputStream,byte[],int) org.h2.util.IOUtils+readFully(InputStream,byte[],int) org.h2.store.DataHandler+getMaxLengthInplaceLob() org.h2.store.DataHandler+getMaxLengthInplaceLob() org.h2.util.Utils+copyBytes(byte[],int) org.h2.util.Utils+copyBytes(byte[],int) org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.value.ValueLob+ValueLob(DataHandler,byte[],int,InputStream,long) org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String)",java.lang.Long+MAX_VALUE org.h2.value.Value+BLOB java.lang.Integer+MAX_VALUE org.h2.value.Value+BLOB,1355,34,9,"/** 
 * Create a temporary BLOB value from a stream.
 * @param in the input stream
 * @param length the number of characters to read, or -1 for no limit
 * @param handler the data handler
 * @return the lob value
 */
","/**
     * Create a temporary BLOB value from a stream.
     *
     * @param in the input stream
     * @param length the number of characters to read, or -1 for no limit
     * @param handler the data handler
     * @return the lob value
     */
    public static ValueLob createTempBlob(InputStream in, long length,
            DataHandler handler) {
        try {
            long remaining = Long.MAX_VALUE;
            boolean compress = handler.getLobCompressionAlgorithm(Value.BLOB) != null;
            if (length >= 0 && length < remaining) {
                remaining = length;
            }
            int len = getBufferSize(handler, compress, remaining);
            byte[] buff;
            if (len >= Integer.MAX_VALUE) {
                buff = IOUtils.readBytesAndClose(in, -1);
                len = buff.length;
            } else {
                buff = Utils.newBytes(len);
                len = IOUtils.readFully(in, buff, len);
            }
            if (len <= handler.getMaxLengthInplaceLob()) {
                byte[] small = Utils.copyBytes(buff, len);
                return ValueLob.createSmallLob(Value.BLOB, small, small.length);
            }
            return new ValueLob(handler, buff, len, in, remaining);
        } catch (IOException e) {
            throw DbException.convertIOException(e, null);
        }
    }",True,True,"This method creates a temporary BLOB value from an input stream. It takes the input stream, the number of characters to read, and a data handler as parameters. It reads the input stream, compresses the data if necessary, and returns the BLOB value.",True,"This code is a method that creates a temporary BLOB value from an input stream. It reads the stream, determines the length of the data, compresses it if necessary, and returns a ValueLob object representing the BLOB value."
53,"getBufferSize(DataHandler,boolean,long)",get buffer size handler compress remaining ,Method,"ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long) createTempClob(Reader,long,DataHandler) createTempBlob(InputStream,long,DataHandler)",,"org.h2.store.DataHandler+getMaxLengthInplaceLob() org.h2.store.DataHandler+getMaxLengthInplaceLob() java.lang.Math+min(long,long) java.lang.Math+min(long,long) org.h2.util.MathUtils+roundUpLong(long,long) org.h2.util.MathUtils+roundUpLong(long,long) java.lang.Math+min(long,long) java.lang.Math+min(long,long) org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long)",java.lang.Integer+MAX_VALUE java.lang.Integer+MAX_VALUE org.h2.engine.Constants+IO_BUFFER_SIZE_COMPRESS org.h2.engine.Constants+IO_BUFFER_SIZE org.h2.engine.Constants+IO_BUFFER_SIZE java.lang.Integer+MAX_VALUE,980,23,10,,"private static int getBufferSize(DataHandler handler, boolean compress,
            long remaining) {
        if (remaining < 0 || remaining > Integer.MAX_VALUE) {
            remaining = Integer.MAX_VALUE;
        }
        int inplace = handler.getMaxLengthInplaceLob();
        long m = compress ? Constants.IO_BUFFER_SIZE_COMPRESS
                : Constants.IO_BUFFER_SIZE;
        if (m < remaining && m <= inplace) {
            // using ""1L"" to force long arithmetic because
            // inplace could be Integer.MAX_VALUE
            m = Math.min(remaining, inplace + 1L);
            // the buffer size must be bigger than the inplace lob, otherwise we
            // can't know if it must be stored in-place or not
            m = MathUtils.roundUpLong(m, Constants.IO_BUFFER_SIZE);
        }
        m = Math.min(remaining, m);
        m = MathUtils.convertLongToInt(m);
        if (m < 0) {
            m = Integer.MAX_VALUE;
        }
        return (int) m;
    }",False,False,"This method calculates the buffer size for data handling. It checks if the remaining size is within the valid range, determines the maximum length for in-place LOB, and calculates the buffer size based on compression and other conditions. The final buffer size is returned as an integer.",True,"This code defines a method called ""getBufferSize"" that calculates the buffer size based on the given parameters. It checks if the remaining size is within a valid range, determines the appropriate buffer size based on compression and maximum length of in-place LOBs, and returns the buffer size as an integer."
54,convertPrecision(long),convert precision precision convert the precision to the requested value param precision the new precision return the truncated or this value ,Method,,"org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToClob(TypeInfo,int,Object)","org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.IOUtils+readStringAndClose(Reader,int) org.h2.util.IOUtils+readStringAndClose(Reader,int) org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getReader() java.lang.String+getBytes(Charset) java.lang.String+getBytes(Charset) org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.value.ValueLob+createSmallLob(int,byte[],long) java.lang.String+length() java.lang.String+length() org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+createTempClob(Reader,long,DataHandler) org.h2.value.ValueLob+createTempClob(Reader,long,DataHandler) org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getReader() org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+createTempBlob(InputStream,long,DataHandler) org.h2.value.ValueLob+createTempBlob(InputStream,long,DataHandler) org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream()",org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+valueType org.h2.value.Value+CLOB org.h2.value.ValueLob+handler java.nio.charset.StandardCharsets+UTF_8 org.h2.value.ValueLob+valueType org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler org.h2.value.ValueLob+valueType org.h2.value.ValueLob+handler,1515,39,0,"/** 
 * Convert the precision to the requested value.
 * @param precision the new precision
 * @return the truncated or this value
 */
","/**
     * Convert the precision to the requested value.
     *
     * @param precision the new precision
     * @return the truncated or this value
     */
    ValueLob convertPrecision(long precision) {
        if (this.precision <= precision) {
            return this;
        }
        ValueLob lob;
        if (valueType == CLOB) {
            if (handler == null) {
                try {
                    int p = MathUtils.convertLongToInt(precision);
                    String s = IOUtils.readStringAndClose(getReader(), p);
                    byte[] data = s.getBytes(StandardCharsets.UTF_8);
                    lob = ValueLob.createSmallLob(valueType, data, s.length());
                } catch (IOException e) {
                    throw DbException.convertIOException(e, null);
                }
            } else {
                lob = ValueLob.createTempClob(getReader(), precision, handler);
            }
        } else {
            if (handler == null) {
                try {
                    int p = MathUtils.convertLongToInt(precision);
                    byte[] data = IOUtils.readBytesAndClose(getInputStream(), p);
                    lob = ValueLob.createSmallLob(valueType, data, data.length);
                } catch (IOException e) {
                    throw DbException.convertIOException(e, null);
                }
            } else {
                lob = ValueLob.createTempBlob(getInputStream(), precision, handler);
            }
        }
        return lob;
    }",False,False,"The function of this method is to convert the precision of a lob value to the requested value. It checks if the current precision is less than or equal to the requested precision, and if so, returns the current value. Otherwise, it creates a new lob value with the requested precision.",True,"The `convertPrecision` method is used to convert the precision of a lob value. It checks if the current precision is less than or equal to the requested precision and returns the value as is. If the precision needs to be reduced, it creates a new lob value with the requested precision by either truncating the data or creating a temporary lob with the specified precision."
55,"createSmallLob(int,byte[])",create small lob type small create a lob object that fits in memory param type the type value blob or clob param small the byte array return the lo b ,Method,,"org.h2.mvstore.db.LobStorageMap+createBlob(InputStream,long) org.h2.mvstore.db.LobStorageMap+createClob(Reader,long) org.h2.value.DataType+readValue(SessionInterface,ResultSet,int,int) org.h2.value.DataType+readValue(SessionInterface,ResultSet,int,int) org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToClob(TypeInfo,int,Object) org.h2.value.Value+convertToClob(TypeInfo,int,Object) org.h2.test.unit.TestValue+createLob(DataHandler,int,byte[])","java.lang.String+length() java.lang.String+String(byte[],Charset) java.lang.String+length() org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.value.ValueLob+createSmallLob(int,byte[],long)",org.h2.value.Value+CLOB java.nio.charset.StandardCharsets+UTF_8,500,16,9,"/** 
 * Create a LOB object that fits in memory.
 * @param type the type (Value.BLOB or CLOB)
 * @param small the byte array
 * @return the LOB
 */
","/**
     * Create a LOB object that fits in memory.
     *
     * @param type the type (Value.BLOB or CLOB)
     * @param small the byte array
     * @return the LOB
     */
    public static ValueLob createSmallLob(int type, byte[] small) {
        int precision;
        if (type == Value.CLOB) {
            precision = new String(small, StandardCharsets.UTF_8).length();
        } else {
            precision = small.length;
        }
        return createSmallLob(type, small, precision);
    }",True,True,"This method creates a LOB (Large Object) object that can fit in memory. It takes a type (BLOB or CLOB) and a byte array as parameters, and returns the LOB object. The method calculates the precision based on the type and the size of the byte array.",True,"This code defines a method called ""createSmallLob"" that creates a LOB (Large Object) object that can fit in memory. It takes in the type of LOB (BLOB or CLOB) and a byte array as parameters, and returns the created LOB object. The method calculates the precision of the LOB based on the type and size of the byte array."
56,"createSmallLob(int,byte[],long)",create small lob type small precision create a lob object that fits in memory param type the type value blob or clob param small the byte array param precision the precision return the lo b ,Method,"createTempClob(Reader,long,DataHandler) createTempBlob(InputStream,long,DataHandler) convertPrecision(long) convertPrecision(long) createSmallLob(int,byte[])","org.h2.pagestore.db.LobStorageBackend+addLob(InputStream,long,int,CountingReaderInputStream) org.h2.test.unit.TestValue+testCastTrim() org.h2.test.unit.TestValue+testCastTrim()","org.h2.value.ValueLob+ValueLob(int,byte[],long)",,366,12,9,"/** 
 * Create a LOB object that fits in memory.
 * @param type the type (Value.BLOB or CLOB)
 * @param small the byte array
 * @param precision the precision
 * @return the LOB
 */
","/**
     * Create a LOB object that fits in memory.
     *
     * @param type the type (Value.BLOB or CLOB)
     * @param small the byte array
     * @param precision the precision
     * @return the LOB
     */
    public static ValueLob createSmallLob(int type, byte[] small,
            long precision) {
        return new ValueLob(type, small, precision);
    }",True,True,"This method creates a LOB (Large Object) object that can fit in memory. It takes the type (BLOB or CLOB), a byte array, and the precision as parameters, and returns the created LOB object.",True,"This code defines a method called ""createSmallLob"" that creates a LOB (Large Object) object that can fit in memory. It takes the type (BLOB or CLOB), a byte array, and the precision as parameters, and returns the created LOB object."
57,setRecoveryReference(boolean),set recovery reference is recovery reference ,Method,,"org.h2.tools.Recover+readBlobDb(Connection,long,long) org.h2.tools.Recover+readClobDb(Connection,long,long)",,org.h2.value.ValueLob+isRecoveryReference org.h2.value.ValueLob+isRecoveryReference,125,3,1,,"public void setRecoveryReference(boolean isRecoveryReference) {
        this.isRecoveryReference = isRecoveryReference;
    }",True,True,"This method sets the value of the boolean variable ""isRecoveryReference"" in the class.",False,"The given code defines a method named ""setRecoveryReference"" that takes a boolean parameter ""isRecoveryReference"". This method is used to set the value of the ""isRecoveryReference"" variable in the current object to the provided boolean value."
58,isRecoveryReference(),is recovery reference ,Method,,"org.h2.pagestore.db.LobStorageBackend+copyLob(ValueLob,int,long)",,org.h2.value.ValueLob+isRecoveryReference,80,3,1,,"public boolean isRecoveryReference() {
        return isRecoveryReference;
    }",True,True,"This method serves to check if the object is a recovery reference by returning the value of the boolean variable ""isRecoveryReference"".",False,"The code contains a method named ""isRecoveryReference"" which returns a boolean value. It checks whether the variable ""isRecoveryReference"" is true or false and returns the result."
