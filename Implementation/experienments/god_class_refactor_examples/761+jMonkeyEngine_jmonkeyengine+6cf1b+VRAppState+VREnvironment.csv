index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,logger,logger ,Field,,,,,82,1,26,,private static final Logger logger = Logger.getLogger(VRAppState.class.getName());,False,False,,False,
2,vrBinding,vr binding the underlying system vr api by default set to link vr constants setting vrapi openvr value ,Field,,,,,184,4,1,"/** 
 * The underlying system VR API. By default set to  {@link VRConstants#SETTING_VRAPI_OPENVR_VALUE}.
 */
","/**
     * The underlying system VR API. By default set to {@link VRConstants#SETTING_VRAPI_OPENVR_VALUE}.
     */
    public int vrBinding = VRConstants.SETTING_VRAPI_OPENVR_VALUE;",True,True,"/** 
 * The underlying system VR API. By default set to  {@link VRConstants#SETTING_VRAPI_OPENVR_VALUE}.
 */
",False,"/** 
 * The underlying system VR API. By default set to  {@link VRConstants#SETTING_VRAPI_OPENVR_VALUE}.
 */
"
3,DISABLE_VR,disable vr is the application has not to start within vr mode default is false ,Field,,,,,144,4,1,"/** 
 * Is the application has not to start within VR mode (default is <code>false</code>).
 */
","/**
     * Is the application has not to start within VR mode (default is <code>false</code>).
     */
    public boolean DISABLE_VR = false;",False,False,"/** 
 * Is the application has not to start within VR mode (default is <code>false</code>).
 */
",False,"/** 
 * Is the application has not to start within VR mode (default is <code>false</code>).
 */
"
4,VRhardware,v rhardware ,Field,,,,,43,1,2,,private VRAPI VRhardware            = null;,False,False,,False,
5,guiManager,gui manager ,Field,,,,,43,1,2,,private VRGuiManager guiManager     = null;,True,True,,False,
6,mouseManager,mouse manager ,Field,,,,,43,1,2,,private VRMouseManager mouseManager = null;,True,True,,False,
7,viewmanager,viewmanager ,Field,,,,,43,1,2,,private VRViewManager viewmanager   = null;,True,True,,False,
8,OS,os ,Field,,,,,18,1,2,,private String OS;,False,True,,False,
9,dummyCam,dummy cam ,Field,,,,,24,1,2,,private Camera dummyCam;,True,True,,False,
10,observer,observer ,Field,,,,,32,1,2,,private Spatial observer = null;,True,True,,False,
11,VRSupportedOS,vr supported os ,Field,,,,,30,1,2,,private boolean VRSupportedOS;,False,True,,False,
12,forceVR,force vr ,Field,,,,,43,1,2,,private boolean forceVR            = false;,True,True,,False,
13,disableSwapBuffers,disable swap buffers ,Field,,,,,42,1,2,,private boolean disableSwapBuffers = true;,True,True,,False,
14,disableVR,disable vr ,Field,,,,,43,1,2,,private boolean disableVR          = false;,False,True,,False,
15,seated,seated ,Field,,,,,23,1,2,,private boolean seated;,True,True,,False,
16,nogui,nogui ,Field,,,,,22,1,2,,private boolean nogui;,True,True,,False,
17,instanceVR,instance vr ,Field,,,,,43,1,2,,private boolean instanceVR         = false;,False,True,,False,
18,defaultFOV,default fov ,Field,,,,,42,1,2,,private float defaultFOV           = 108f;,True,True,,False,
19,defaultAspect,default aspect ,Field,,,,,40,1,2,,private float defaultAspect        = 1f;,True,True,,False,
20,fFar,f far ,Field,,,,,28,1,2,,private float fFar  = 1000f;,False,False,,False,
21,fNear,f near ,Field,,,,,27,1,2,,private float fNear = 0.1f;,False,False,,False,
22,xWin,x win ,Field,,,,,27,1,2,,private int xWin    = 1920;,False,False,,False,
23,yWin,y win ,Field,,,,,27,1,2,,private int yWin    = 1080;,False,False,,False,
24,resMult,res mult ,Field,,,,,27,1,2,,private float resMult = 1f;,False,False,,False,
25,useCompositor,use compositor ,Field,,,,,37,1,2,,private boolean useCompositor = true;,True,True,,False,
26,compositorOS,compositor os ,Field,,,,,29,1,2,,private boolean compositorOS;,True,True,,False,
27,tempq,tempq ,Field,,,,,44,1,2,,private Quaternion tempq = new Quaternion();,False,False,,False,
28,application,application ,Field,,,,,44,1,2,,private Application application      = null;,False,False,,False,
29,stateManager,state manager ,Field,,,,,44,1,2,,private AppStateManager stateManager = null;,False,False,,False,
30,settings,settings ,Field,,,,,44,1,2,,private AppSettings settings         = null;,False,False,,False,
31,VRAppState(),vr app state create a new default vr app state ,Method,,,com.jme3.renderer.Camera+Camera() jmevr.util.VRGuiManager+VRGuiManager() jmevr.util.VRViewManager+VRViewManager() jmevr.util.VRMouseManager+VRMouseManager(),com.jme3.app.VRAppState+dummyCam com.jme3.app.VRAppState+guiManager com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+mouseManager,421,18,1,"/** 
 * Create a new default VR app state.
 */
","/**
     * Create a new default VR app state.
     */
    public VRAppState() {
        super();

        dummyCam = new Camera();
        
        // Create the GUI manager.
        guiManager = new VRGuiManager();
        
        // Create a new view manager.
        viewmanager = new VRViewManager();

        // Create a new mouse manager.
        mouseManager = new VRMouseManager();
      
     }",False,False,"The function of this method is to create a new default VR app state by initializing various components such as a dummy camera, a GUI manager, a view manager, and a mouse manager.",False,"The code defines a class called VRAppState that extends a superclass. It initializes several objects including a dummy camera, a GUI manager, a view manager, and a mouse manager. The purpose of this class is to create a default VR app state."
32,VRAppState(AppSettings),vr app state settings create a new vr app state with given settings param settings the settings to use ,Method,,,com.jme3.app.VRAppState+processSettings(AppSettings) com.jme3.app.VRAppState+processSettings(AppSettings),com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings,248,9,1,"/** 
 * Create a new VR app state with given settings. 
 * @param settings the settings to use.
 */
","/**
     * Create a new VR app state with given settings. 
     * @param settings the settings to use.
     */
    public VRAppState(AppSettings settings){
      this();
      this.settings = settings;
      processSettings(settings);
    }",False,False,This method creates a new VR app state with the given settings. It takes in an AppSettings object as a parameter and assigns it to the settings variable. It then processes the settings.,False,"This code defines a constructor for the VRAppState class that takes an AppSettings object as a parameter. It initializes the VRAppState object, assigns the settings parameter to the settings variable, and processes the settings."
33,simpleUpdate(float),simple update tpf simple update of the app state this method should contains any spatial updates this method is called by the link update float update method and should not be called manually param tpf the application time ,Method,,,,,317,8,1,"/** 
 * Simple update of the app state, this method should contains any spatial updates. This method is called by the  {@link #update(float) update()} method and should not be called manually.
 * @param tpf the application time.
 */
","/**
     * Simple update of the app state, this method should contains any spatial updates.
     * This method is called by the {@link #update(float) update()} method and should not be called manually.
     * @param tpf the application time.
     */
    public void simpleUpdate(float tpf) {
    	return;
    }",False,False,"The function of the method is to update the app state with any spatial updates. It is called by the ""update()"" method and should not be called manually.",False,"The code contains a method called ""simpleUpdate"" which is responsible for updating the spatial state of the application. It is called automatically by another method and does not perform any specific actions, as it simply returns without executing any code."
34,simpleRender(RenderManager),simple render render manager rendering callback of the app state this method is called by the link update float update method and should not be called manually param render manager the link render manager render manager ,Method,,,com.jme3.post.PreNormalCaching+resetCache(boolean) com.jme3.post.PreNormalCaching+resetCache(boolean) com.jme3.app.VRAppState+isInVR() com.jme3.app.VRAppState+isInVR(),,347,7,1,"/** 
 * Rendering callback of the app state. This method is called by the  {@link #update(float) update()} method and should not be called manually.
 * @param renderManager the {@link RenderManager render manager}.
 */
","/**
     * Rendering callback of the app state. This method is called by the {@link #update(float) update()} method and should not be called manually.
     * @param renderManager the {@link RenderManager render manager}.
     */
    public void simpleRender(RenderManager renderManager) {
        PreNormalCaching.resetCache(isInVR());
    }",False,False,"The method ""simpleRender"" is a rendering callback for the app state. It is called by the ""update"" method and should not be called manually. It resets the cache for pre-normal caching based on whether the app is in virtual reality or not.",False,"The method ""simpleRender"" is a rendering callback for the app state. It is called by the ""update"" method and takes a RenderManager as a parameter. It resets the cache for PreNormalCaching if the app state is in virtual reality mode."
35,"setFrustrumNearFar(float,float)",set frustrum near far near far set the frustrum values for the application param near the frustrum near value param far the frustrum far value ,Method,,,,com.jme3.app.VRAppState+fNear com.jme3.app.VRAppState+fFar,265,9,1,"/** 
 * Set the frustrum values for the application.
 * @param near the frustrum near value.
 * @param far the frustrum far value.
 */
","/**
     * Set the frustrum values for the application.
     * @param near the frustrum near value.
     * @param far the frustrum far value.
     */
    public void setFrustrumNearFar(float near, float far) {
        fNear = near;
        fFar = far;
    }",False,False,This method sets the near and far values of the frustrum for the application.,True,"This code defines a method called ""setFrustrumNearFar"" that takes in two parameters, ""near"" and ""far"", and sets the values of the ""fNear"" and ""fFar"" variables to these parameters. It is used to set the frustrum values for the application."
36,"setMirrorWindowSize(int,int)",set mirror window size width height set the mirror window size in pixel param width the width of the mirror window in pixel param height the height of the mirror window in pixel ,Method,,,,com.jme3.app.VRAppState+xWin com.jme3.app.VRAppState+yWin,299,9,1,"/** 
 * Set the mirror window size in pixel.
 * @param width the width of the mirror window in pixel.
 * @param height the height of the mirror window in pixel.
 */
","/**
     * Set the mirror window size in pixel.
     * @param width the width of the mirror window in pixel.
     * @param height the height of the mirror window in pixel.
     */
    public void setMirrorWindowSize(int width, int height) {
        xWin = width;
        yWin = height;
    }",False,False,This method sets the size of a mirror window in pixels. It takes the width and height as parameters and assigns them to the xWin and yWin variables.,True,"This code defines a method called ""setMirrorWindowSize"" that takes in two parameters, width and height, and sets the values of xWin and yWin variables to the corresponding parameter values. This method is used to set the size of a mirror window in pixels."
37,setResolutionMultiplier(float),set resolution multiplier val set the resolution multiplier param val the resolution multiplier ,Method,,,jmevr.util.VRViewManager+setResolutionMultiplier(float) jmevr.util.VRViewManager+setResolutionMultiplier(float),com.jme3.app.VRAppState+resMult com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+resMult,285,10,1,"/** 
 * Set the resolution multiplier.
 * @param val the resolution multiplier.
 */
","/**
     * Set the resolution multiplier.
     * @param val the resolution multiplier.
     */
    public void setResolutionMultiplier(float val) {
        resMult = val;
        if( viewmanager != null ){
        	viewmanager.setResolutionMultiplier(resMult);
        }
    }",False,False,"This method sets the resolution multiplier for a view manager. If the view manager is not null, it also sets the resolution multiplier for the view manager.",True,"This code defines a method called ""setResolutionMultiplier"" that takes a float value as a parameter. It sets the value of a variable called ""resMult"" to the input value and then checks if a variable called ""viewmanager"" is not null. If it is not null, it calls a method called ""setResolutionMultiplier"" on the ""viewmanager"" object, passing in the ""resMult"" value."
38,compositorAllowed(),compositor allowed is the vr compositor is active return true if the vr compositor is active and false otherwise ,Method,,,,com.jme3.app.VRAppState+useCompositor com.jme3.app.VRAppState+compositorOS,247,7,1,"/** 
 * Is the VR compositor is active.
 * @return <code>true</code> if the VR compositor is active and <code>false</code> otherwise.
 */
","/**
     * Is the VR compositor is active.
     * @return <code>true</code> if the VR compositor is active and <code>false</code> otherwise.
     */
    public boolean compositorAllowed() {
        return useCompositor && compositorOS;
    }",False,True,"This method checks if the VR compositor is active by returning true if both useCompositor and compositorOS are true, and false otherwise.",True,"The given code defines a method named ""compositorAllowed"" which returns a boolean value. It checks if the VR compositor is active by evaluating the conditions of ""useCompositor"" and ""compositorOS"" variables, and returns true if both conditions are met, otherwise false."
39,isVRSupported(),is vr supported get if the system currently support vr return true if the system currently support vr and false otherwise ,Method,,,,com.jme3.app.VRAppState+VRSupportedOS,239,7,1,"/** 
 * Get if the system currently support VR.
 * @return <code>true</code> if the system currently support VR and <code>false</Code> otherwise.
 */
","/**
     * Get if the system currently support VR.
     * @return <code>true</code> if the system currently support VR and <code>false</Code> otherwise.
     */
    public boolean isVRSupported() {
        return VRSupportedOS;
    }",True,True,"This method serves to check if the system currently supports VR. It returns true if the system supports VR, and false otherwise.",True,"This code defines a method called ""isVRSupported"" that returns a boolean value indicating whether the system currently supports virtual reality (VR). The method relies on a variable called ""VRSupportedOS"" to determine the support status."
40,getCamera(),get camera get the link camera camera attached to this application state if the vr mode is link is in vr active this method return a dummy camera otherwise this method return the camera of the attached application return the camera attached to this application state ,Method,,,com.jme3.app.VRAppState+isInVR() com.jme3.app.VRAppState+isInVR() jmevr.util.VRViewManager+getLeftCamera() jmevr.util.VRViewManager+getLeftCamera() com.jme3.app.Application+getCamera() com.jme3.app.Application+getCamera(),com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+dummyCam com.jme3.app.VRAppState+application,536,13,1,"/** 
 * Get the  {@link Camera camera} attached to this application state. If the VR mode is  {@link #isInVR() active}, this method return a dummy camera, otherwise,  this method return the camera of the attached application.
 * @return the camera attached to this application state.
 */
","/**
     * Get the {@link Camera camera} attached to this application state. 
     * If the VR mode is {@link #isInVR() active}, this method return a dummy camera, otherwise, 
     * this method return the camera of the attached application.
     * @return the camera attached to this application state.
     */
    public Camera getCamera() {
        if( isInVR() && viewmanager != null && viewmanager.getLeftCamera() != null ) {
            return dummyCam;
        }
        
        return application.getCamera();
    }",True,True,"This method returns the camera attached to the application state. If VR mode is active, it returns a dummy camera. Otherwise, it returns the camera of the attached application.",True,"This code defines a method called ""getCamera()"" that returns the camera attached to the application state. If the VR mode is active, it returns a dummy camera, otherwise it returns the camera of the attached application."
41,setSeatedExperience(boolean),set seated experience is seated can be used to change seated experience during runtime param is seated true if designed for sitting false for standing roomscale see is seated experience ,Method,,,com.jme3.input.vr.VRAPI+getCompositor() com.jme3.input.vr.VRAPI+getCompositor() com.jme3.system.jopenvr.VR_IVRCompositor_FnTable.SetTrackingSpace_callback+apply(int) com.jme3.input.vr.OpenVR+getCompositor() com.jme3.input.vr.OpenVR+getCompositor() com.jme3.system.jopenvr.VR_IVRCompositor_FnTable.SetTrackingSpace_callback+apply(int) com.jme3.system.jopenvr.VR_IVRCompositor_FnTable.SetTrackingSpace_callback+apply(int) com.jme3.input.vr.OpenVR+getCompositor() com.jme3.input.vr.OpenVR+getCompositor() com.jme3.system.jopenvr.VR_IVRCompositor_FnTable.SetTrackingSpace_callback+apply(int),com.jme3.app.VRAppState+seated com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+seated com.jme3.system.jopenvr.VR_IVRCompositor_FnTable+SetTrackingSpace com.jme3.app.VRAppState+VRhardware com.jme3.system.jopenvr.VR_IVRCompositor_FnTable+SetTrackingSpace com.jme3.system.jopenvr.JOpenVRLibrary.ETrackingUniverseOrigin+ETrackingUniverseOrigin_TrackingUniverseSeated com.jme3.system.jopenvr.VR_IVRCompositor_FnTable+SetTrackingSpace com.jme3.app.VRAppState+VRhardware com.jme3.system.jopenvr.VR_IVRCompositor_FnTable+SetTrackingSpace com.jme3.system.jopenvr.JOpenVRLibrary.ETrackingUniverseOrigin+ETrackingUniverseOrigin_TrackingUniverseStanding,852,16,1,"/** 
 * Can be used to change seated experience during runtime.
 * @param isSeated <code>true</code> if designed for sitting, <code>false</code> for standing/roomscale
 * @see #isSeatedExperience()
 */
","/**
     * Can be used to change seated experience during runtime.
     * @param isSeated <code>true</code> if designed for sitting, <code>false</code> for standing/roomscale
     * @see #isSeatedExperience()
     */
    public void setSeatedExperience(boolean isSeated) {
        seated = isSeated;
        if( VRhardware instanceof OpenVR ) {
            if( VRhardware.getCompositor() == null ) return;
            if( seated ) {
                ((OpenVR)VRhardware).getCompositor().SetTrackingSpace.apply(JOpenVRLibrary.ETrackingUniverseOrigin.ETrackingUniverseOrigin_TrackingUniverseSeated);
            } else {
                ((OpenVR)VRhardware).getCompositor().SetTrackingSpace.apply(JOpenVRLibrary.ETrackingUniverseOrigin.ETrackingUniverseOrigin_TrackingUniverseStanding);                
            }        
        }
    }",True,True,"The function of this method is to change the seated experience during runtime. It takes a boolean parameter ""isSeated"" which determines whether the experience is designed for sitting or standing/roomscale. If the VR hardware is an instance of OpenVR, it sets the tracking space accordingly.",False,"This code defines a method called ""setSeatedExperience"" that can be used to change the seated experience during runtime. It takes a boolean parameter ""isSeated"" to determine whether the experience is designed for sitting or standing/roomscale. If the VR hardware is an instance of OpenVR, it sets the tracking space accordingly based on the value of ""isSeated""."
42,isSeatedExperience(),is seated experience check if the application is configured as a seated experience return true if the application is configured as a seated experience and false otherwise see set seated experience boolean ,Method,,,,com.jme3.app.VRAppState+seated,324,8,1,"/** 
 * Check if the application is configured as a seated experience.
 * @return <code>true</code> if the application is configured as a seated experience and <code>false</code> otherwise.
 * @see #setSeatedExperience(boolean)
 */
","/**
     * Check if the application is configured as a seated experience.
     * @return <code>true</code> if the application is configured as a seated experience and <code>false</code> otherwise.
     * @see #setSeatedExperience(boolean)
     */
    public boolean isSeatedExperience() {
        return seated;
    }",True,True,"This method checks if the application is configured as a seated experience and returns true if it is, and false otherwise.",True,"The code contains a method called ""isSeatedExperience"" which checks if the application is configured as a seated experience. It returns a boolean value indicating whether the application is configured as a seated experience or not. The method can be used to determine the seating configuration of the application."
43,resetSeatedPose(),reset seated pose reset headset pose if seating experience ,Method,,,com.jme3.app.VRAppState+isSeatedExperience() com.jme3.app.VRAppState+isSeatedExperience() com.jme3.input.vr.VRAPI+reset() com.jme3.input.vr.VRAPI+reset(),com.jme3.app.VRAppState+VRSupportedOS com.jme3.app.VRAppState+VRhardware,213,7,1,"/** 
 * Reset headset pose if seating experience.
 */
","/**
     * Reset headset pose if seating experience.
     */
    public void resetSeatedPose(){
        if( VRSupportedOS == false || isSeatedExperience() == false ) return;
        VRhardware.reset();
    }",True,True,The function of the method is to reset the headset pose if the VR supported operating system is false or if it is not a seated experience. It does this by calling the reset method of the VR hardware.,True,"The code defines a method called ""resetSeatedPose"" which is used to reset the pose of a headset if the experience is a seated one. It checks if the operating system supports VR and if the experience is seated before calling the ""reset"" method of the VR hardware."
44,isInstanceVRRendering(),is instance vr rendering check if the rendering is instanced see a href https en wikipedia org wiki geometry instancing geometry instancing return true if the rendering is instanced and false otherwise ,Method,,,com.jme3.app.VRAppState+isInVR() com.jme3.app.VRAppState+isInVR(),com.jme3.app.VRAppState+instanceVR,338,7,1,"/** 
 * Check if the rendering is instanced (see <a href=""https://en.wikipedia.org/wiki/Geometry_instancing"">Geometry instancing</a>).
 * @return <code>true</code> if the rendering is instanced and <code>false</code> otherwise.
 */
","/**
     * Check if the rendering is instanced (see <a href=""https://en.wikipedia.org/wiki/Geometry_instancing"">Geometry instancing</a>).
     * @return <code>true</code> if the rendering is instanced and <code>false</code> otherwise.
     */
    public boolean isInstanceVRRendering() {
        return instanceVR && isInVR();
    }",False,True,"The function checks if the rendering is instanced for virtual reality (VR) by returning true if both instanceVR and isInVR are true, and false otherwise.",True,"The code defines a method called ""isInstanceVRRendering"" which checks if the rendering is using geometry instancing in a virtual reality (VR) environment. It returns true if both the instanceVR flag is set to true and the isInVR method returns true, indicating that the rendering is indeed instanced in VR."
45,isInVR(),is in vr check if the vr mode is enabled return true if the vr mode is enabled and false otherwise ,Method,,,com.jme3.input.vr.VRAPI+isInitialized() com.jme3.input.vr.VRAPI+isInitialized(),com.jme3.app.VRAppState+DISABLE_VR com.jme3.app.VRAppState+forceVR com.jme3.app.VRAppState+VRSupportedOS com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+VRhardware,304,7,1,"/** 
 * Check if the VR mode is enabled.
 * @return <code>true</code> if the VR mode is enabled and <code>false</code> otherwise.
 */
","/**
     * Check if the VR mode is enabled.
     * @return <code>true</code> if the VR mode is enabled and <code>false</code> otherwise.
     */
    public boolean isInVR() {
        return DISABLE_VR == false && (forceVR || VRSupportedOS && VRhardware != null && VRhardware.isInitialized());
    }",False,True,This method checks if the VR mode is enabled by returning true if the VR mode is enabled and false otherwise. It checks if DISABLE_VR is false and if forceVR is true or if VRSupportedOS is true and VRhardware is not null and is initialized.,True,"The code defines a method called ""isInVR"" which checks if the VR mode is enabled. It returns true if the VR mode is enabled and false otherwise, based on certain conditions such as the VR support in the operating system and the initialization status of the VR hardware."
46,getDefaultFOV(),get default fov get the default field of view fov value return the default field of view fov value see set default fov float ,Method,,,,com.jme3.app.VRAppState+defaultFOV,215,8,1,"/** 
 * Get the default Field Of View (FOV) value.
 * @return the default Field Of View (FOV) value.
 * @see #setDefaultFOV(float)
 */
","/**
     * Get the default Field Of View (FOV) value.
     * @return the default Field Of View (FOV) value.
     * @see #setDefaultFOV(float)
     */
    public float getDefaultFOV() {
		return defaultFOV;
	}",True,True,This method returns the default Field Of View (FOV) value.,True,This code defines a method called getDefaultFOV() that returns the default Field Of View (FOV) value. It is used to retrieve the default FOV value and is associated with a method called setDefaultFOV() which can be used to set the default FOV value.
47,setDefaultFOV(float),set default fov default fov set the default field of view fov value param default fov the default field of view fov value see get default fov ,Method,,,,com.jme3.app.VRAppState+defaultFOV com.jme3.app.VRAppState+defaultFOV,243,8,1,"/** 
 * Set the default Field Of View (FOV) value.
 * @param defaultFOV the default Field Of View (FOV) value.
 * @see #getDefaultFOV()
 */
","/**
     * Set the default Field Of View (FOV) value.
     * @param defaultFOV the default Field Of View (FOV) value.
     * @see #getDefaultFOV()
     */
	public void setDefaultFOV(float defaultFOV) {
		this.defaultFOV = defaultFOV;
	}",True,True,This method sets the default Field Of View (FOV) value for an object. It takes a float value as a parameter and assigns it to the defaultFOV variable.,True,"This code defines a method called ""setDefaultFOV"" that sets the default Field Of View (FOV) value. The method takes a float parameter called ""defaultFOV"" and assigns it to the instance variable ""this.defaultFOV"". The method also has a reference to another method called ""getDefaultFOV"" for further information."
48,getDefaultAspect(),get default aspect get the default aspect ratio return the default aspect ratio see set default aspect float ,Method,,,,com.jme3.app.VRAppState+defaultAspect,183,8,1,"/** 
 * Get the default aspect ratio.
 * @return the default aspect ratio.
 * @see #setDefaultAspect(float)
 */
","/**
	 * Get the default aspect ratio.
	 * @return the default aspect ratio.
	 * @see #setDefaultAspect(float)
	 */
	public float getDefaultAspect() {
		return defaultAspect;
	}",True,True,This method returns the default aspect ratio.,True,"This code defines a method called ""getDefaultAspect"" that returns the default aspect ratio. The method has a summary description stating that it retrieves the default aspect ratio and provides a reference to the method that sets the default aspect ratio."
49,setDefaultAspect(float),set default aspect default aspect set the default aspect ratio param default aspect the default aspect ratio see get default aspect ,Method,,,,com.jme3.app.VRAppState+defaultAspect com.jme3.app.VRAppState+defaultAspect,223,8,1,"/** 
 * Set the default aspect ratio.
 * @param defaultAspect the default aspect ratio.
 * @see #getDefaultAspect()
 */
","/**
	 * Set the default aspect ratio.
	 * @param defaultAspect the default aspect ratio.
	 * @see #getDefaultAspect()
	 */
	public void setDefaultAspect(float defaultAspect) {
		this.defaultAspect = defaultAspect;
	}",True,True,This method sets the default aspect ratio for a certain function or feature.,True,"This code defines a method called ""setDefaultAspect"" which takes a float value as a parameter and sets it as the default aspect ratio. The method is used to update the default aspect ratio for an unspecified purpose."
50,moveScreenProcessingToVR(),move screen processing to vr move filters from the main scene into the eye s this removes filters from the main scene ,Method,,,com.jme3.app.VRAppState+isInVR() com.jme3.app.VRAppState+isInVR() jmevr.util.VRViewManager+moveScreenProcessingToEyes() jmevr.util.VRViewManager+moveScreenProcessingToEyes(),com.jme3.app.VRAppState+viewmanager,261,9,1,"/** 
 * Move filters from the main scene into the eye's. This removes filters from the main scene.
 */
","/**
     * Move filters from the main scene into the eye's.
     * This removes filters from the main scene.
     */
    public void moveScreenProcessingToVR() {
        if( isInVR() ) {
        	viewmanager.moveScreenProcessingToEyes();
        }
    }",False,False,"The function of the method is to move filters from the main scene into the eye's scene, removing them from the main scene, but only if the application is currently in virtual reality mode.",True,"The method ""moveScreenProcessingToVR"" moves filters from the main scene to the eye's scene, effectively removing them from the main scene. This action is only performed if the application is currently in virtual reality mode."
51,hasTraditionalGUIOverlay(),has traditional gui overlay check if the application has a gui overlay attached return true if the application has a gui overlay attached and false otherwise ,Method,,,,com.jme3.app.VRAppState+nogui,267,7,1,"/** 
 * Check if the application has a GUI overlay attached.
 * @return <code>true</code> if the application has a GUI overlay attached and <code>false</code> otherwise.
 */
","/**
     * Check if the application has a GUI overlay attached.
     * @return <code>true</code> if the application has a GUI overlay attached and <code>false</code> otherwise.
     */
    public boolean hasTraditionalGUIOverlay() {
        return !nogui;
    }",True,True,"This method checks if the application has a traditional GUI overlay attached. It returns true if it does, and false otherwise.",True,"The code defines a method called ""hasTraditionalGUIOverlay"" which checks if the application has a GUI overlay attached. It returns true if there is a GUI overlay attached, and false otherwise."
52,getObserver(),get observer get the scene observer if no observer has been set this method return the application link get camera camera return the scene observer see set observer spatial ,Method,,,com.jme3.app.VRAppState+getCamera() com.jme3.app.VRAppState+getCamera(),com.jme3.app.VRAppState+observer com.jme3.app.VRAppState+observer,355,11,1,"/** 
 * Get the scene observer. If no observer has been set, this method return the application  {@link #getCamera() camera}.
 * @return the scene observer. 
 * @see #setObserver(Spatial)
 */
","/**
     * Get the scene observer. If no observer has been set, this method return the application {@link #getCamera() camera}.
     * @return the scene observer. 
     * @see #setObserver(Spatial)
     */
    public Object getObserver() {
        if( observer == null ) {
            return getCamera();
        }
        return observer;
    }",False,True,"This method returns the scene observer. If no observer has been set, it returns the application camera.",True,"This code defines a method called ""getObserver"" that returns the scene observer. If no observer has been set, it returns the application camera. The method is used to retrieve the observer object for the scene."
53,setObserver(Spatial),set observer observer set the scene observer the vr headset will be linked to it if no observer is set the vr headset is linked to the the application link get camera camera param observer the scene observer ,Method,,,,com.jme3.app.VRAppState+observer com.jme3.app.VRAppState+observer,315,7,1,"/** 
 * Set the scene observer. The VR headset will be linked to it. If no observer is set, the VR headset is linked to the the application  {@link #getCamera() camera}.
 * @param observer the scene observer.
 */
","/**
     * Set the scene observer. The VR headset will be linked to it. If no observer is set, the VR headset is linked to the the application {@link #getCamera() camera}.
     * @param observer the scene observer.
     */
    public void setObserver(Spatial observer) {
       this.observer = observer;
    }",False,True,"This method sets the scene observer for the VR headset. If no observer is set, the VR headset will be linked to the application's camera.",True,"This code defines a method called ""setObserver"" which takes a parameter of type ""Spatial"" and sets it as the observer for the VR headset. If no observer is set, the method defaults to linking the VR headset to the application's camera."
54,getFinalObserverRotation(),get final observer rotation get the observer final rotation within the scene return the observer final rotation within the scene see get final observer position ,Method,,,com.jme3.renderer.Camera+getRotation() com.jme3.app.VRAppState+getCamera() com.jme3.app.VRAppState+getCamera() com.jme3.renderer.Camera+getRotation() com.jme3.scene.Spatial+getWorldRotation() com.jme3.scene.Spatial+getWorldRotation() com.jme3.math.Quaternion+set(Quaternion) com.jme3.math.Quaternion+set(Quaternion) com.jme3.renderer.Camera+getRotation() com.jme3.renderer.Camera+getRotation() com.jme3.math.Quaternion+set(Quaternion) com.jme3.math.Quaternion+set(Quaternion) com.jme3.scene.Spatial+getWorldRotation() com.jme3.scene.Spatial+getWorldRotation() com.jme3.math.Quaternion+multLocal(Quaternion) com.jme3.math.Quaternion+multLocal(Quaternion) com.jme3.input.vr.VRAPI+getOrientation() com.jme3.input.vr.VRAPI+getOrientation(),com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+observer com.jme3.app.VRAppState+observer com.jme3.app.VRAppState+observer com.jme3.app.VRAppState+tempq com.jme3.app.VRAppState+dummyCam com.jme3.app.VRAppState+tempq com.jme3.app.VRAppState+observer com.jme3.app.VRAppState+tempq com.jme3.app.VRAppState+VRhardware,659,18,1,"/** 
 * Get the observer final rotation within the scene.
 * @return the observer final rotation within the scene.
 * @see #getFinalObserverPosition()
 */
","/**
     * Get the observer final rotation within the scene.
     * @return the observer final rotation within the scene.
     * @see #getFinalObserverPosition()
     */
    public Quaternion getFinalObserverRotation() {
        if( viewmanager == null ) {
            if( observer == null ) {
                return getCamera().getRotation();
            } else return observer.getWorldRotation();
        }        
        if( observer == null ) {
            tempq.set(dummyCam.getRotation());
        } else {
            tempq.set(observer.getWorldRotation());
        }
        return tempq.multLocal(VRhardware.getOrientation());
    }",False,False,"This method returns the final rotation of the observer within the scene. If the view manager or observer is null, it returns the rotation of the camera. Otherwise, it returns the rotation of the observer multiplied by the orientation of the VR hardware.",True,"This code defines a method called ""getFinalObserverRotation"" that returns the final rotation of the observer within the scene. It first checks if there is a view manager and if there is an observer, and then calculates the final rotation based on the observer's world rotation and the orientation of the VR hardware."
55,getFinalObserverPosition(),get final observer position get the observer final position within the scene return the observer position see get final observer rotation ,Method,,,"com.jme3.renderer.Camera+getLocation() com.jme3.app.VRAppState+getCamera() com.jme3.app.VRAppState+getCamera() com.jme3.renderer.Camera+getLocation() com.jme3.scene.Spatial+getWorldTranslation() com.jme3.scene.Spatial+getWorldTranslation() com.jme3.input.vr.VRAPI+getPosition() com.jme3.input.vr.VRAPI+getPosition() com.jme3.math.Quaternion+mult(Vector3f,Vector3f) com.jme3.renderer.Camera+getRotation() com.jme3.renderer.Camera+getRotation() com.jme3.math.Quaternion+mult(Vector3f,Vector3f) com.jme3.math.Vector3f+addLocal(Vector3f) com.jme3.math.Vector3f+addLocal(Vector3f) com.jme3.renderer.Camera+getLocation() com.jme3.renderer.Camera+getLocation() com.jme3.math.Quaternion+mult(Vector3f,Vector3f) com.jme3.scene.Spatial+getWorldRotation() com.jme3.scene.Spatial+getWorldRotation() com.jme3.math.Quaternion+mult(Vector3f,Vector3f) com.jme3.math.Vector3f+addLocal(Vector3f) com.jme3.math.Vector3f+addLocal(Vector3f) com.jme3.scene.Spatial+getWorldTranslation() com.jme3.scene.Spatial+getWorldTranslation()",com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+observer com.jme3.app.VRAppState+observer com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+observer com.jme3.app.VRAppState+dummyCam com.jme3.app.VRAppState+dummyCam com.jme3.app.VRAppState+observer com.jme3.app.VRAppState+observer,761,20,1,"/** 
 * Get the observer final position within the scene.
 * @return the observer position.
 * @see #getFinalObserverRotation()
 */
","/**
     * Get the observer final position within the scene.
     * @return the observer position.
     * @see #getFinalObserverRotation()
     */
    public Vector3f getFinalObserverPosition() {
        if( viewmanager == null ) {
            if( observer == null ) {
                return getCamera().getLocation();
            } else return observer.getWorldTranslation();            
        }
        Vector3f pos = VRhardware.getPosition();
        if( observer == null ) {
            dummyCam.getRotation().mult(pos, pos);
            return pos.addLocal(dummyCam.getLocation());
        } else {
            observer.getWorldRotation().mult(pos, pos);
            return pos.addLocal(observer.getWorldTranslation());
        }
    }",False,False,"This method serves to get the final position of the observer within the scene. It checks if the view manager and observer are null, and returns the camera location if they are. Otherwise, it calculates the position based on the observer's world translation and rotation.",True,"This code defines a method called ""getFinalObserverPosition"" that returns the final position of an observer within a scene. The method first checks if a view manager and observer exist, and if not, it returns the location of the camera. If a view manager and observer exist, it calculates the final position based on the observer's rotation and translation."
56,setVRHeightAdjustment(float),set vr height adjustment amount set the vr headset height from the ground param amount the vr headset height from the ground see get vr height adjustment ,Method,,,jmevr.util.VRViewManager+setHeightAdjustment(float) jmevr.util.VRViewManager+setHeightAdjustment(float),com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+viewmanager,300,8,1,"/** 
 * Set the VR headset height from the ground.
 * @param amount the VR headset height from the ground.
 * @see #getVRHeightAdjustment()
 */
","/**
     * Set the VR headset height from the ground.
     * @param amount the VR headset height from the ground.
     * @see #getVRHeightAdjustment()
     */
    public void setVRHeightAdjustment(float amount) {
        if( viewmanager != null ) viewmanager.setHeightAdjustment(amount);
    }",True,True,This method sets the height adjustment of the VR headset from the ground. It takes in a float value as the amount of adjustment and calls the setHeightAdjustment method of the viewmanager object if it is not null.,True,This code defines a method called setVRHeightAdjustment that takes a float parameter representing the height of a VR headset from the ground. It sets the height adjustment value in the view manager if it is not null. The method is documented with a summary description and a reference to the getVRHeightAdjustment method.
57,getVRHeightAdjustment(),get vr height adjustment get the vr headset height from the ground return the vr headset height from the ground see set vr height adjustment float ,Method,,,jmevr.util.VRViewManager+getHeightAdjustment() jmevr.util.VRViewManager+getHeightAdjustment(),com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+viewmanager,331,11,1,"/** 
 * Get the VR headset height from the ground.
 * @return the VR headset height from the ground.
 * @see #setVRHeightAdjustment(float)
 */
","/**
     * Get the VR headset height from the ground.
     * @return the VR headset height from the ground.
     * @see #setVRHeightAdjustment(float)
     */
    public float getVRHeightAdjustment() {
        if( viewmanager != null ){
        	return viewmanager.getHeightAdjustment();
        }
        return 0f;
    }",True,True,"This method returns the height adjustment of the VR headset from the ground. It checks if the view manager is not null and returns the height adjustment from the view manager. If the view manager is null, it returns 0.",True,"This code defines a method called ""getVRHeightAdjustment"" that returns the height adjustment of a VR headset from the ground. It checks if the ""viewmanager"" object is not null and if so, it calls the ""getHeightAdjustment"" method of the ""viewmanager"" object to retrieve the height adjustment value. If the ""viewmanager"" object is null, it returns 0."
58,getLeftViewPort(),get left view port get the vr headset left viewport return the vr headset left viewport see get right view port ,Method,,,com.jme3.app.Application+getViewPort() com.jme3.app.Application+getViewPort() jmevr.util.VRViewManager+getLeftViewport() jmevr.util.VRViewManager+getLeftViewport(),com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+application com.jme3.app.VRAppState+viewmanager,297,9,1,"/** 
 * Get the VR headset left viewport.
 * @return the VR headset left viewport.
 * @see #getRightViewPort()
 */
","/**
     * Get the VR headset left viewport.
     * @return the VR headset left viewport.
     * @see #getRightViewPort()
     */
    public ViewPort getLeftViewPort() {
        if( viewmanager == null ) return application.getViewPort();
        return viewmanager.getLeftViewport();
    }",False,False,"This method returns the left viewport of a VR headset. If the view manager is not set, it returns the application's viewport.",True,"This code defines a method called ""getLeftViewPort()"" that returns the left viewport of a VR headset. If the view manager is null, it returns the application's default viewport. Otherwise, it returns the left viewport obtained from the view manager."
59,getRightViewPort(),get right view port get the vr headset right viewport return the vr headset right viewport see get left view port ,Method,,,com.jme3.app.Application+getViewPort() com.jme3.app.Application+getViewPort() jmevr.util.VRViewManager+getRightViewport() jmevr.util.VRViewManager+getRightViewport(),com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+application com.jme3.app.VRAppState+viewmanager,300,9,1,"/** 
 * Get the VR headset right viewport.
 * @return the VR headset right viewport.
 * @see #getLeftViewPort()
 */
","/**
     * Get the VR headset right viewport.
     * @return the VR headset right viewport.
     * @see #getLeftViewPort()
     */
    public ViewPort getRightViewPort() {
        if( viewmanager == null ) return application.getViewPort();
        return viewmanager.getRightViewport();
    }",False,False,"This method returns the right viewport of a VR headset. If the view manager is null, it returns the application's viewport. Otherwise, it returns the right viewport of the view manager.",True,"This code defines a method called ""getRightViewPort()"" that returns the right viewport of a VR headset. If the view manager is null, it returns the application's default viewport. Otherwise, it returns the right viewport obtained from the view manager."
60,setBackgroundColors(ColorRGBA),set background colors clr set the background color for both left and right view ports param clr the background color ,Method,,,com.jme3.renderer.ViewPort+setBackgroundColor(ColorRGBA) com.jme3.app.Application+getViewPort() com.jme3.app.Application+getViewPort() com.jme3.renderer.ViewPort+setBackgroundColor(ColorRGBA) jmevr.util.VRViewManager+getLeftViewport() jmevr.util.VRViewManager+getLeftViewport() com.jme3.renderer.ViewPort+setBackgroundColor(ColorRGBA) jmevr.util.VRViewManager+getLeftViewport() jmevr.util.VRViewManager+getLeftViewport() com.jme3.renderer.ViewPort+setBackgroundColor(ColorRGBA) jmevr.util.VRViewManager+getRightViewport() jmevr.util.VRViewManager+getRightViewport() com.jme3.renderer.ViewPort+setBackgroundColor(ColorRGBA) jmevr.util.VRViewManager+getRightViewport() jmevr.util.VRViewManager+getRightViewport() com.jme3.renderer.ViewPort+setBackgroundColor(ColorRGBA),com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+application com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+viewmanager,536,12,1,"/** 
 * Set the background color for both left and right view ports.
 * @param clr the background color.
 */
","/**
     * Set the background color for both left and right view ports.
     * @param clr the background color.
     */
    public void setBackgroundColors(ColorRGBA clr) {
        if( viewmanager == null ) {
            application.getViewPort().setBackgroundColor(clr);
        } else if( viewmanager.getLeftViewport() != null ) {
        	viewmanager.getLeftViewport().setBackgroundColor(clr);
            if( viewmanager.getRightViewport() != null ) viewmanager.getRightViewport().setBackgroundColor(clr);
        }
    }",False,False,"This method sets the background color for both the left and right viewports. If there is no view manager, it sets the background color for the application's viewport. If there is a view manager, it sets the background color for the left viewport and, if it exists, the right viewport.",True,"This method sets the background color for both the left and right viewports. If the view manager is not null, it sets the background color for the left viewport and if the right viewport is not null, it also sets the background color for the right viewport. If the view manager is null, it sets the background color for the application's view port."
61,getApplication(),get application get the link application to which this app state is attached return the link application to which this app state is attached see get state manager ,Method,,,,com.jme3.app.VRAppState+application,269,8,1,"/** 
 * Get the  {@link Application} to which this app state is attached.
 * @return the {@link Application} to which this app state is attached.
 * @see #getStateManager()
 */
","/**
     * Get the {@link Application} to which this app state is attached.
     * @return the {@link Application} to which this app state is attached.
     * @see #getStateManager()
     */
    public Application getApplication(){
    	return application;
    }",False,False,This method returns the Application object to which the app state is attached.,True,"This code defines a method called ""getApplication()"" that returns the Application object to which the current app state is attached. It is a getter method that provides access to the application instance. The method is part of a larger codebase and is intended to be used in conjunction with the getStateManager() method."
62,getStateManager(),get state manager get the link app state manager state manager to which this app state is attached return the link app state manager state manager to which this app state is attached see get application ,Method,,,,com.jme3.app.VRAppState+stateManager,310,8,1,"/** 
 * Get the  {@link AppStateManager state manager} to which this app state is attached.
 * @return the {@link AppStateManager state manager} to which this app state is attached.
 * @see #getApplication()
 */
","/**
     * Get the {@link AppStateManager state manager} to which this app state is attached.
     * @return the {@link AppStateManager state manager} to which this app state is attached.
     * @see #getApplication()
     */
    public AppStateManager getStateManager(){
    	return stateManager;
    }",False,False,This method returns the state manager to which this app state is attached.,True,"This code defines a method called ""getStateManager"" that returns the state manager to which the app state is attached. It is a getter method that allows access to the state manager object. The method is part of a larger codebase and is related to the application's state management functionality."
63,getVRHardware(),get vr hardware get the vr underlying hardware return the vr underlying hardware ,Method,,,,com.jme3.app.VRAppState+VRhardware,149,7,1,"/** 
 * Get the VR underlying hardware.
 * @return the VR underlying hardware.
 */
","/**
	 * Get the VR underlying hardware.
	 * @return the VR underlying hardware.
	 */
	public VRAPI getVRHardware() {
	    return VRhardware;
	}",False,False,This method serves to retrieve the VR underlying hardware. It returns the VR hardware object.,True,"This code defines a method named ""getVRHardware"" that returns the VR underlying hardware. It is expected to return an object of type VRAPI. The method does not take any parameters."
64,getVRinput(),get v rinput get the vr dedicated input return the vr dedicated input ,Method,,,com.jme3.input.vr.VRAPI+getVRinput() com.jme3.input.vr.VRAPI+getVRinput(),com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+VRhardware,223,11,1,"/** 
 * Get the VR dedicated input.
 * @return the VR dedicated input.
 */
","/**
	 * Get the VR dedicated input.
	 * @return the VR dedicated input.
	 */
	public VRInputAPI getVRinput() {
	    if( VRhardware == null ){
	    	return null;
	    }
	    
	    return VRhardware.getVRinput();
	}",False,False,"This method returns the VR dedicated input. If the VR hardware is not available, it returns null. Otherwise, it retrieves the VR input from the VR hardware and returns it.",True,"This code defines a method called ""getVRinput()"" which returns the VR dedicated input. It first checks if the VR hardware is null, and if so, it returns null. Otherwise, it calls the ""getVRinput()"" method on the VR hardware object and returns the result."
65,getVRViewManager(),get vr view manager get the vr view manager return the vr view manager ,Method,,,,com.jme3.app.VRAppState+viewmanager,147,7,1,"/** 
 * Get the VR view manager.
 * @return the VR view manager.
 */
","/**
	 * Get the VR view manager.
	 * @return the VR view manager.
	 */
	public VRViewManager getVRViewManager() {
	    return viewmanager;
	}",False,False,This method returns the VR view manager.,True,"This code defines a method named ""getVRViewManager"" that returns an instance of the VRViewManager class. The method does not take any parameters and is used to retrieve the VR view manager object."
66,getVRGUIManager(),get vrgui manager get the gui manager attached to this application return the gui manager attached to this application ,Method,,,,com.jme3.app.VRAppState+guiManager,190,7,1,"/** 
 * Get the GUI manager attached to this application.
 * @return the GUI manager attached to this application.
 */
","/**
	 * Get the GUI manager attached to this application.
	 * @return the GUI manager attached to this application.
	 */
	public VRGuiManager getVRGUIManager(){
		return guiManager;
	}",False,False,This method returns the GUI manager attached to the application.,True,"This code defines a method named ""getVRGUIManager"" that returns the GUI manager object associated with the application. The method is expected to return an instance of the ""VRGuiManager"" class."
67,getVRMouseManager(),get vr mouse manager get the vr mouse manager attached to this application return the vr mouse manager attached to this application ,Method,,,,com.jme3.app.VRAppState+mouseManager,206,7,1,"/** 
 * Get the VR mouse manager attached to this application.
 * @return the VR mouse manager attached to this application.
 */
","/**
	 * Get the VR mouse manager attached to this application.
	 * @return the VR mouse manager attached to this application.
	 */
	public VRMouseManager getVRMouseManager(){
		return mouseManager;
	}",False,False,This method returns the VR mouse manager attached to the application.,True,"This code defines a method called ""getVRMouseManager"" that returns the VR mouse manager attached to the application. The method does not take any parameters and simply returns the mouse manager object."
68,getSettings(),get settings get the link app settings settings attached to this app state return the link app settings settings attached to this app state see set settings app settings ,Method,,,,com.jme3.app.VRAppState+settings,249,8,1,"/** 
 * Get the  {@link AppSettings settings} attached to this app state.
 * @return the {@link AppSettings settings} attached to this app state.
 * @see #setSettings(AppSettings)
 */
","/**
	 * Get the {@link AppSettings settings} attached to this app state.
	 * @return the {@link AppSettings settings} attached to this app state.
	 * @see #setSettings(AppSettings)
	 */
	public AppSettings getSettings(){
		return settings;
	}",False,False,This method serves to retrieve the AppSettings object attached to the app state. It returns the AppSettings object.,True,"This code defines a method called ""getSettings"" that returns the AppSettings object attached to the app state. The method has a summary description stating that it retrieves the settings and provides a link to the corresponding method for setting the settings."
69,setSettings(AppSettings),set settings settings set the link app settings settings attached to this app state param settings the link app settings settings attached to this app state see get settings ,Method,,,com.jme3.app.VRAppState+processSettings(AppSettings) com.jme3.app.VRAppState+processSettings(AppSettings),com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings,298,9,1,"/** 
 * Set the  {@link AppSettings settings} attached to this app state.
 * @param settings the {@link AppSettings settings} attached to this app state.
 * @see #getSettings()
 */
","/**
	 * Set the {@link AppSettings settings} attached to this app state.
	 * @param settings the {@link AppSettings settings} attached to this app state.
	 * @see #getSettings()
	 */
	public void setSettings(AppSettings settings){
		this.settings = settings;
		processSettings(settings);
	}",False,False,This method sets the AppSettings for the app state and processes the settings.,True,"This code defines a method called ""setSettings"" that sets the AppSettings for an app state. It takes an AppSettings object as a parameter and assigns it to the ""settings"" variable. Additionally, it calls a method called ""processSettings"" to perform some operations on the settings."
70,update(float),update tpf ,Method,,,"jmevr.util.VRViewManager+update(float) jmevr.util.VRViewManager+update(float) com.jme3.renderer.Camera+setFrame(Vector3f,Quaternion) com.jme3.app.VRAppState+getCamera() com.jme3.app.VRAppState+getCamera() com.jme3.renderer.Camera+setFrame(Vector3f,Quaternion) com.jme3.scene.Spatial+getWorldTranslation() com.jme3.scene.Spatial+getWorldTranslation() com.jme3.scene.Spatial+getWorldRotation() com.jme3.scene.Spatial+getWorldRotation() com.jme3.util.SafeArrayList+iterator() com.jme3.renderer.ViewPort+getScenes() com.jme3.app.Application+getViewPort() com.jme3.app.Application+getViewPort() com.jme3.renderer.ViewPort+getScenes() com.jme3.util.SafeArrayList+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() com.jme3.scene.Spatial+updateLogicalState(float) com.jme3.scene.Spatial+updateLogicalState(float) com.jme3.scene.Spatial+updateGeometricState() com.jme3.scene.Spatial+updateGeometricState() com.jme3.app.VRAppState+isInVR() com.jme3.app.VRAppState+isInVR() jmevr.util.VRGuiManager+getPositioningMode() jmevr.util.VRGuiManager+getPositioningMode() com.jme3.util.SafeArrayList+iterator() com.jme3.renderer.ViewPort+getScenes() com.jme3.app.Application+getGuiViewPort() com.jme3.app.Application+getGuiViewPort() com.jme3.renderer.ViewPort+getScenes() com.jme3.util.SafeArrayList+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() com.jme3.scene.Spatial+updateGeometricState() com.jme3.scene.Spatial+updateGeometricState() jmevr.util.VRMouseManager+updateAnalogAsMouse(int,AnalogListener,String,String,float) com.jme3.app.VRAppState+getVRMouseManager() com.jme3.app.VRAppState+getVRMouseManager() jmevr.util.VRMouseManager+updateAnalogAsMouse(int,AnalogListener,String,String,float)",com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+observer com.jme3.app.VRAppState+observer com.jme3.app.VRAppState+observer com.jme3.app.VRAppState+application com.jme3.app.VRAppState+guiManager com.jme3.app.VRAppState+application,1476,35,1,,"@Override
    public void update(float tpf) {    
        
        // update VR pose & cameras
        if( viewmanager != null ) {
        	viewmanager.update(tpf);    
        } else if( observer != null ) {
            getCamera().setFrame(observer.getWorldTranslation(), observer.getWorldRotation());
        }
        
        //FIXME: check if this code is necessary.
        // Updates scene and gui states.
        Iterator<Spatial> spatialIter = application.getViewPort().getScenes().iterator();
        Spatial spatial = null;
        while(spatialIter.hasNext()){
        	spatial = spatialIter.next();
        	spatial.updateLogicalState(tpf);
        	spatial.updateGeometricState();
        }        
        
        if( isInVR() == false || guiManager.getPositioningMode() == POSITIONING_MODE.MANUAL ) {
            // only update geometric state here if GUI is in manual mode, or not in VR
            // it will get updated automatically in the viewmanager update otherwise
        	spatialIter = application.getGuiViewPort().getScenes().iterator();
            spatial = null;
            while(spatialIter.hasNext()){
            	spatial = spatialIter.next();
            	spatial.updateGeometricState();
            }    
        }
        
        
        // use the analog control on the first tracked controller to push around the mouse
        getVRMouseManager().updateAnalogAsMouse(0, null, null, null, tpf);
    }",False,False,"This method updates the VR pose and cameras, updates the scene and GUI states, and uses the analog control on the first tracked controller to simulate mouse movement.",True,"This code is an update method that is called every frame. It updates the VR pose and cameras, updates the scene and GUI states, and uses the analog control on the first tracked controller to simulate mouse movement."
71,postRender(),post render ,Method,,,com.jme3.app.state.AbstractAppState+postRender() jmevr.util.VRViewManager+sendTextures() jmevr.util.VRViewManager+sendTextures(),com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+viewmanager,194,8,1,,"@Override
    public void postRender() {
        super.postRender();
        // update compositor?
        if( viewmanager != null ) {
        	viewmanager.sendTextures();
        }
    }",False,False,This method is used to perform post-rendering tasks. It calls the superclass's postRender method and then updates the compositor by sending textures if the view manager is not null.,True,The `postRender()` method is called after rendering is complete and it updates the compositor by sending textures to the view manager if it is not null. It overrides the superclass's `postRender()` method.
72,"initialize(AppStateManager,Application)",initialize state manager app ,Method,,,"com.jme3.app.state.AbstractAppState+initialize(AppStateManager,Application) java.util.logging.Logger+setLevel(Level) java.util.logging.Logger+getLogger(String) java.util.logging.Logger+getLogger(String) java.util.logging.Logger+setLevel(Level) jmevr.util.VRGuiManager+attach(VRAppState,Application) jmevr.util.VRGuiManager+attach(VRAppState,Application) jmevr.util.VRViewManager+attach(VRAppState,Application) jmevr.util.VRViewManager+attach(VRAppState,Application) jmevr.util.VRMouseManager+attach(VRAppState,Application) jmevr.util.VRMouseManager+attach(VRAppState,Application) com.jme3.renderer.Camera+setFrustumFar(float) com.jme3.app.Application+getCamera() com.jme3.app.Application+getCamera() com.jme3.renderer.Camera+setFrustumFar(float) com.jme3.renderer.Camera+setFrustumNear(float) com.jme3.app.Application+getCamera() com.jme3.app.Application+getCamera() com.jme3.renderer.Camera+setFrustumNear(float) com.jme3.renderer.Camera+clone() com.jme3.app.Application+getCamera() com.jme3.app.Application+getCamera() com.jme3.renderer.Camera+clone() com.jme3.app.VRAppState+isInVR() com.jme3.app.VRAppState+isInVR() java.util.logging.Logger+config(String) java.util.logging.Logger+config(String) com.jme3.input.vr.VRAPI+initVRCompositor(boolean) com.jme3.input.vr.VRAPI+initVRCompositor(boolean) com.jme3.app.VRAppState+compositorAllowed() com.jme3.app.VRAppState+compositorAllowed() java.util.logging.Logger+warning(String) java.util.logging.Logger+warning(String) jmevr.util.VRViewManager+setResolutionMultiplier(float) jmevr.util.VRViewManager+setResolutionMultiplier(float) java.util.logging.Logger+config(String) java.util.logging.Logger+config(String) jmevr.util.VRViewManager+initialize() jmevr.util.VRViewManager+initialize()",com.jme3.app.VRAppState+application com.jme3.app.VRAppState+application com.jme3.app.VRAppState+stateManager com.jme3.app.VRAppState+stateManager java.util.logging.Level+SEVERE com.jme3.app.VRAppState+guiManager com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+mouseManager com.jme3.app.VRAppState+fFar com.jme3.app.VRAppState+fNear com.jme3.app.VRAppState+dummyCam com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+resMult com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+viewmanager com.jme3.app.VRAppState+viewmanager,1557,44,1,,"@Override
    public void initialize(AppStateManager stateManager, Application app) {
        super.initialize(stateManager, app);
        
        this.application  = app;
        this.stateManager = stateManager;
        
        // disable annoying warnings about GUI stuff being updated, which is normal behavior
        // for late GUI placement for VR purposes
        Logger.getLogger(""com.jme3"").setLevel(Level.SEVERE);     
        
        // VR module attch
        guiManager.attach(this, app);
        viewmanager.attach(this, app);
        mouseManager.attach(this,  app);
        
        app.getCamera().setFrustumFar(fFar);
        app.getCamera().setFrustumNear(fNear);
        dummyCam = app.getCamera().clone();
        
        if( isInVR() ) {
        	
        	logger.config(""VR mode enabled."");
        	
            if( VRhardware != null ) {
                VRhardware.initVRCompositor(compositorAllowed());
            } else {
            	logger.warning(""No VR system found."");
            }
            
            
            viewmanager.setResolutionMultiplier(resMult);
            //inputManager.addMapping(RESET_HMD, new KeyTrigger(KeyInput.KEY_F9));
            //setLostFocusBehavior(LostFocusBehavior.Disabled);
        } else {
        	logger.config(""VR mode disabled."");
            //viewPort.attachScene(rootNode);
            //guiViewPort.attachScene(guiNode);
        }
        
        if( viewmanager != null ) {
        	viewmanager.initialize();
        }
    }",False,False,This method is used to initialize the application state manager and the application itself. It also sets up the necessary components for VR mode if it is enabled.,True,"This code is the initialization method for a VR application. It sets up the necessary components for VR functionality, such as attaching the GUI manager, view manager, and mouse manager. It also checks if VR mode is enabled and initializes the VR hardware if available."
73,stateAttached(AppStateManager),state attached state manager ,Method,,,"com.jme3.app.state.AbstractAppState+stateAttached(AppStateManager) com.jme3.system.AppSettings+AppSettings(boolean) java.util.logging.Logger+config(String) java.util.logging.Logger+config(String) java.util.logging.Logger+config(String) java.util.logging.Logger+config(String) java.lang.String+toLowerCase(Locale) java.lang.System+getProperty(String,String) java.lang.System+getProperty(String,String) java.lang.String+toLowerCase(Locale) java.lang.String+contains(CharSequence) java.lang.String+contains(CharSequence) java.lang.String+equalsIgnoreCase(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+contains(CharSequence) java.lang.String+contains(CharSequence) com.jme3.input.vr.OSVR+OSVR(VRAppState) java.util.logging.Logger+config(String) java.util.logging.Logger+config(String) com.jme3.input.vr.OpenVR+OpenVR(VRAppState) java.util.logging.Logger+config(String) java.util.logging.Logger+config(String) java.util.logging.Logger+config(String) java.util.logging.Logger+config(String) com.jme3.input.vr.VRAPI+initialize() com.jme3.input.vr.VRAPI+initialize() java.util.logging.Logger+config(String) java.util.logging.Logger+config(String) java.util.logging.Logger+warning(String) java.util.logging.Logger+warning(String) java.awt.GraphicsEnvironment+getDefaultScreenDevice() java.awt.GraphicsEnvironment+getLocalGraphicsEnvironment() java.awt.GraphicsEnvironment+getLocalGraphicsEnvironment() java.awt.GraphicsEnvironment+getDefaultScreenDevice() com.jme3.app.VRAppState+isInVR() com.jme3.app.VRAppState+isInVR() com.jme3.app.VRAppState+compositorAllowed() com.jme3.app.VRAppState+compositorAllowed() java.awt.GraphicsEnvironment+getScreenDevices() java.awt.GraphicsEnvironment+getLocalGraphicsEnvironment() java.awt.GraphicsEnvironment+getLocalGraphicsEnvironment() java.awt.GraphicsEnvironment+getScreenDevices() java.awt.GraphicsDevice+getDisplayModes() java.awt.GraphicsDevice+getDisplayModes() java.awt.DisplayMode+getHeight() java.awt.DisplayMode+getHeight() java.awt.DisplayMode+getWidth() java.awt.DisplayMode+getWidth() java.awt.DisplayMode+getRefreshRate() java.awt.DisplayMode+getRefreshRate() java.awt.DisplayMode+getBitDepth() java.awt.DisplayMode+getBitDepth() com.jme3.system.AppSettings+setWidth(int) com.jme3.system.AppSettings+setWidth(int) java.awt.DisplayMode+getWidth() java.awt.DisplayMode+getWidth() com.jme3.system.AppSettings+setHeight(int) com.jme3.system.AppSettings+setHeight(int) java.awt.DisplayMode+getHeight() java.awt.DisplayMode+getHeight() com.jme3.system.AppSettings+setBitsPerPixel(int) com.jme3.system.AppSettings+setBitsPerPixel(int) java.awt.DisplayMode+getBitDepth() java.awt.DisplayMode+getBitDepth() com.jme3.system.AppSettings+setFrequency(int) com.jme3.system.AppSettings+setFrequency(int) java.awt.DisplayMode+getRefreshRate() java.awt.DisplayMode+getRefreshRate() com.jme3.system.AppSettings+setSwapBuffers(boolean) com.jme3.system.AppSettings+setSwapBuffers(boolean) com.jme3.system.AppSettings+setVSync(boolean) com.jme3.system.AppSettings+setVSync(boolean) com.jme3.app.Application+setSettings(AppSettings) com.jme3.app.state.AppStateManager+getApplication() com.jme3.app.state.AppStateManager+getApplication() com.jme3.app.Application+setSettings(AppSettings) java.util.logging.Logger+config(String) java.util.logging.Logger+config(String) java.awt.DisplayMode+equals(DisplayMode) java.awt.GraphicsDevice+getDisplayMode() java.awt.GraphicsDevice+getDisplayMode() java.awt.DisplayMode+equals(DisplayMode) java.awt.GraphicsDevice+setDisplayMode(DisplayMode) java.awt.GraphicsDevice+setDisplayMode(DisplayMode) java.util.logging.Logger+log(Level,String,Throwable) java.util.logging.Logger+log(Level,String,Throwable) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage() java.util.logging.Logger+config(String) java.util.logging.Logger+config(String) com.jme3.app.VRAppState+isInVR() com.jme3.app.VRAppState+isInVR() java.util.logging.Logger+config(String) java.util.logging.Logger+config(String) com.jme3.app.VRAppState+compositorAllowed() com.jme3.app.VRAppState+compositorAllowed() java.util.logging.Logger+warning(String) java.util.logging.Logger+warning(String) com.jme3.app.VRAppState+isInVR() com.jme3.app.VRAppState+isInVR() com.jme3.system.AppSettings+setFrequency(int) com.jme3.system.AppSettings+setFrequency(int) java.awt.DisplayMode+getRefreshRate() java.awt.GraphicsDevice+getDisplayMode() java.awt.GraphicsDevice+getDisplayMode() java.awt.DisplayMode+getRefreshRate() com.jme3.system.AppSettings+setDepthBits(int) com.jme3.system.AppSettings+setDepthBits(int) com.jme3.system.AppSettings+setVSync(boolean) com.jme3.system.AppSettings+setVSync(boolean) java.io.File+File(String) java.io.File+exists() java.io.File+exists() java.io.BufferedReader+BufferedReader(Reader) java.io.FileReader+FileReader(File) com.jme3.system.AppSettings+setWidth(int) com.jme3.system.AppSettings+setWidth(int) java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String) java.io.BufferedReader+readLine() java.io.BufferedReader+readLine() com.jme3.system.AppSettings+setHeight(int) com.jme3.system.AppSettings+setHeight(int) java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String) java.io.BufferedReader+readLine() java.io.BufferedReader+readLine() com.jme3.system.AppSettings+setFullscreen(boolean) com.jme3.system.AppSettings+setFullscreen(boolean) java.lang.String+contains(CharSequence) java.lang.String+toLowerCase(Locale) java.io.BufferedReader+readLine() java.io.BufferedReader+readLine() java.lang.String+toLowerCase(Locale) java.lang.String+contains(CharSequence) com.jme3.system.AppSettings+setFullscreen(boolean) com.jme3.system.AppSettings+setFullscreen(boolean) java.io.BufferedReader+close() java.io.BufferedReader+close() com.jme3.system.AppSettings+setWidth(int) com.jme3.system.AppSettings+setWidth(int) com.jme3.system.AppSettings+setHeight(int) com.jme3.system.AppSettings+setHeight(int) com.jme3.system.AppSettings+setWidth(int) com.jme3.system.AppSettings+setWidth(int) com.jme3.system.AppSettings+setHeight(int) com.jme3.system.AppSettings+setHeight(int) com.jme3.system.AppSettings+setFullscreen(boolean) com.jme3.system.AppSettings+setFullscreen(boolean) com.jme3.system.AppSettings+setResizable(boolean) com.jme3.system.AppSettings+setResizable(boolean) com.jme3.system.AppSettings+setSwapBuffers(boolean) com.jme3.system.AppSettings+setSwapBuffers(boolean) com.jme3.system.AppSettings+setSamples(int) com.jme3.system.AppSettings+setSamples(int) com.jme3.system.AppSettings+setWidth(int) com.jme3.system.AppSettings+setWidth(int) com.jme3.system.AppSettings+setHeight(int) com.jme3.system.AppSettings+setHeight(int) com.jme3.system.AppSettings+setBitsPerPixel(int) com.jme3.system.AppSettings+setBitsPerPixel(int) com.jme3.system.AppSettings+setFrameRate(int) com.jme3.system.AppSettings+setFrameRate(int) com.jme3.system.AppSettings+setFrequency(int) com.jme3.system.AppSettings+setFrequency(int) com.jme3.input.vr.VRAPI+getDisplayFrequency() com.jme3.input.vr.VRAPI+getDisplayFrequency() com.jme3.system.AppSettings+setFullscreen(boolean) com.jme3.system.AppSettings+setFullscreen(boolean) com.jme3.system.AppSettings+setVSync(boolean) com.jme3.system.AppSettings+setVSync(boolean) com.jme3.system.AppSettings+setSwapBuffers(boolean) com.jme3.system.AppSettings+setSwapBuffers(boolean) com.jme3.app.Application+setSettings(AppSettings) com.jme3.app.state.AppStateManager+getApplication() com.jme3.app.state.AppStateManager+getApplication() com.jme3.app.Application+setSettings(AppSettings) java.util.logging.Logger+config(String) java.util.logging.Logger+config(String)",com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+OS java.util.Locale+ENGLISH com.jme3.app.VRAppState+VRSupportedOS com.jme3.app.VRAppState+OS com.jme3.app.VRAppState+compositorOS com.jme3.app.VRAppState+OS com.jme3.app.VRAppState+VRSupportedOS com.jme3.app.VRAppState+disableVR com.jme3.app.VRAppState+vrBinding com.jme3.app.VRConstants+SETTING_VRAPI_OSVR_VALUE com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+vrBinding com.jme3.app.VRConstants+SETTING_VRAPI_OPENVR_VALUE com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+vrBinding com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+logger java.util.logging.Level+SEVERE com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+logger com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings java.util.Locale+ENGLISH com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+xWin com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+yWin com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+disableSwapBuffers com.jme3.app.VRAppState+settings com.jme3.app.VRAppState+logger,6783,148,1,,"@Override
    public void stateAttached(AppStateManager stateManager) {
        super.stateAttached(stateManager); //To change body of generated methods, choose Tools | Templates.
        
        if (settings == null) {
            settings = new AppSettings(true);
            logger.config(""Using default settings."");
        } else {
        	logger.config(""Using given settings."");
        }
        
        // we are going to use OpenVR now, not the Oculus Rift
        // OpenVR does support the Rift
        OS            = System.getProperty(""os.name"", ""generic"").toLowerCase(Locale.ENGLISH);
        VRSupportedOS = !OS.contains(""nux"") && System.getProperty(""sun.arch.data.model"").equalsIgnoreCase(""64""); //for the moment, linux/unix causes crashes, 64-bit only
        compositorOS  = OS.contains(""indows"");
        
        if( VRSupportedOS && disableVR == false ) {
        	if( vrBinding == VRConstants.SETTING_VRAPI_OSVR_VALUE ) {
                VRhardware = new OSVR(this);
                logger.config(""Creating OSVR wrapper [SUCCESS]"");
            } else if( vrBinding == VRConstants.SETTING_VRAPI_OPENVR_VALUE ) {
                VRhardware = new OpenVR(this);
                logger.config(""Creating OpenVR wrapper [SUCCESS]"");
            } else {
            	logger.config(""Cannot create VR binding: ""+vrBinding+"" [FAILED]"");
            }
        	
            if( VRhardware.initialize() ) {
            	logger.config(""VR native wrapper initialized [SUCCESS]"");
            } else {
            	logger.warning(""VR native wrapper initialized [FAILED]"");
            }
            }
        
        GraphicsDevice defDev = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
                                    
        if( isInVR() && !compositorAllowed() ) {
            // ""easy extended"" mode
            // setup experimental JFrame on external device
            // first, find the VR device
            GraphicsDevice VRdev = null;
            GraphicsDevice[] devs = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();
            // pick the display that isn't the default one
            for(GraphicsDevice gd : devs) {
                if( gd != defDev ) {
                    VRdev = gd;
                    break;
                }
            }

            // did we get the VR device?
            if( VRdev != null ) {
                // set properties for VR acceleration
                try {   
                    java.awt.DisplayMode useDM = null;
                    int max = 0;
                    for(java.awt.DisplayMode dm : VRdev.getDisplayModes()) {
                        int check = dm.getHeight() + dm.getWidth() + dm.getRefreshRate() + dm.getBitDepth();
                        if( check > max ) {
                            max = check;
                            useDM = dm;
                        }
                    }
                    
                    // create a window for the VR device
                    settings.setWidth(useDM.getWidth());
                    settings.setHeight(useDM.getHeight());
                    settings.setBitsPerPixel(useDM.getBitDepth());
                    settings.setFrequency(useDM.getRefreshRate());
                    settings.setSwapBuffers(true);
                    settings.setVSync(true); // allow vsync on this display
                    stateManager.getApplication().setSettings(settings);
                    logger.config(""Updated underlying application settings."");
                    
                    //VRdev.setFullScreenWindow(VRwindow);
                    // make sure we are in the right display mode
                    if( VRdev.getDisplayMode().equals(useDM) == false ) {
                        VRdev.setDisplayMode(useDM);
                    }
                    
                    return;
                } catch(Exception e) { 
                    logger.log(Level.SEVERE, e.getMessage(), e);
                }
            } else {
            	logger.config(""Cannot access to external screen."");
            }
        } else {
        	if (!isInVR()){
        	  logger.config(""Cannot switch to VR mode (VR disabled by user)."");
        	} else if (!compositorAllowed()){
        	  logger.warning(""Cannot switch to VR mode (VR not supported)."");
        	}
        }
        
        if( !isInVR() ) {
        	
        	//FIXME: Handling GLFW workaround on MacOS
        	boolean macOs = false;
            if (macOs) {
                // GLFW workaround on macs
                settings.setFrequency(defDev.getDisplayMode().getRefreshRate());
                settings.setDepthBits(24);
                settings.setVSync(true);
                // try and read resolution from file in local dir
                File resfile = new File(""resolution.txt"");
                if( resfile.exists() ) {
                    try {
                        BufferedReader br = new BufferedReader(new FileReader(resfile));
                        settings.setWidth(Integer.parseInt(br.readLine()));
                        settings.setHeight(Integer.parseInt(br.readLine()));
                        try {
                            settings.setFullscreen(br.readLine().toLowerCase(Locale.ENGLISH).contains(""full""));
                        } catch(Exception e) {
                            settings.setFullscreen(false);
                        }
                        br.close();
                    } catch(Exception e) {
                        settings.setWidth(1280);
                        settings.setHeight(720);
                    }
                } else {
                    settings.setWidth(1280);
                    settings.setHeight(720);
                    settings.setFullscreen(false);
                }
                settings.setResizable(false);
            }
            settings.setSwapBuffers(true);
        } else {
            // use basic mirroring window, skip settings window
            settings.setSamples(1);
            settings.setWidth(xWin);
            settings.setHeight(yWin);
            settings.setBitsPerPixel(32);     
            settings.setFrameRate(0);
            settings.setFrequency(VRhardware.getDisplayFrequency());
            settings.setFullscreen(false);
            settings.setVSync(false); // stop vsyncing on primary monitor!
            settings.setSwapBuffers(disableSwapBuffers);
        }

        // Updating application settings
        stateManager.getApplication().setSettings(settings);
        logger.config(""Updated underlying application settings."");
        
    }",False,False,"This method serves to initialize the state of the application. It checks the settings, determines the operating system and VR support, creates the appropriate VR hardware wrapper, sets up the graphics device for VR mode if applicable, and updates the application settings.",True,"The code is a method called ""stateAttached"" that is part of a larger class. It initializes and configures settings for a virtual reality (VR) application, including determining the operating system, checking VR support, creating a VR hardware wrapper, and setting up the display mode for VR or non-VR mode."
74,cleanup(),cleanup ,Method,,,com.jme3.input.vr.VRAPI+destroy() com.jme3.input.vr.VRAPI+destroy(),com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+disableVR com.jme3.app.VRAppState+application com.jme3.app.VRAppState+application com.jme3.app.VRAppState+stateManager com.jme3.app.VRAppState+stateManager,274,11,1,,"@Override
    public void cleanup() {
        if( VRhardware != null ) {
            VRhardware.destroy();
            VRhardware = null;
        }        
        disableVR = true;
        
        this.application  = null;
        this.stateManager = null;
    }",False,False,"This method is used to clean up resources and disable virtual reality functionality. It destroys the VR hardware, sets it to null, and disables VR. It also sets the application and state manager to null.",True,"The `cleanup()` method is used to clean up resources and disable virtual reality functionality. It destroys the VR hardware, sets it to null, and sets the `disableVR` flag to true. It also sets the `application` and `stateManager` variables to null."
75,stateDetached(AppStateManager),state detached state manager ,Method,,,com.jme3.app.state.AbstractAppState+stateDetached(AppStateManager),,121,4,1,,"@Override
    public void stateDetached(AppStateManager stateManager) {
      super.stateDetached(stateManager);
    }",False,False,This method overrides the stateDetached method from the superclass and does not have any additional functionality.,True,"The code snippet is an overridden method called ""stateDetached"" that belongs to a class implementing the AppStateListener interface. This method is called when the state of the application is detached from the AppStateManager. It performs the default behavior of the superclass and does not have any additional functionality."
76,processSettings(AppSettings),process settings settings process the attached settings and apply changes to this app state param settings the app settings to process ,Method,,,java.util.HashMap+get(Object) java.util.HashMap+get(Object) com.jme3.system.AppSettings+getBoolean(String) com.jme3.system.AppSettings+getBoolean(String) java.util.HashMap+get(Object) java.util.HashMap+get(Object) com.jme3.system.AppSettings+getBoolean(String) com.jme3.system.AppSettings+getBoolean(String) java.util.HashMap+get(Object) java.util.HashMap+get(Object) com.jme3.input.vr.VRAPI+_setFlipEyes(boolean) com.jme3.input.vr.VRAPI+_setFlipEyes(boolean) com.jme3.system.AppSettings+getBoolean(String) com.jme3.system.AppSettings+getBoolean(String) java.util.HashMap+get(Object) java.util.HashMap+get(Object) jmevr.util.VRGuiManager+_enableGuiOverdraw(boolean) jmevr.util.VRGuiManager+_enableGuiOverdraw(boolean) com.jme3.system.AppSettings+getBoolean(String) com.jme3.system.AppSettings+getBoolean(String) java.util.HashMap+get(Object) java.util.HashMap+get(Object) jmevr.util.VRGuiManager+_enableCurvedSuface(boolean) jmevr.util.VRGuiManager+_enableCurvedSuface(boolean) com.jme3.system.AppSettings+getBoolean(String) com.jme3.system.AppSettings+getBoolean(String) java.util.HashMap+get(Object) java.util.HashMap+get(Object) com.jme3.system.AppSettings+getBoolean(String) com.jme3.system.AppSettings+getBoolean(String) java.util.HashMap+get(Object) java.util.HashMap+get(Object) com.jme3.system.AppSettings+getBoolean(String) com.jme3.system.AppSettings+getBoolean(String) java.util.HashMap+get(Object) java.util.HashMap+get(Object) com.jme3.system.AppSettings+getBoolean(String) com.jme3.system.AppSettings+getBoolean(String) java.util.HashMap+get(Object) java.util.HashMap+get(Object) com.jme3.system.AppSettings+getBoolean(String) com.jme3.system.AppSettings+getBoolean(String) java.util.HashMap+get(Object) java.util.HashMap+get(Object) com.jme3.system.AppSettings+getBoolean(String) com.jme3.system.AppSettings+getBoolean(String) java.util.HashMap+get(Object) java.util.HashMap+get(Object) com.jme3.system.AppSettings+getFloat(String) com.jme3.system.AppSettings+getFloat(String) java.util.HashMap+get(Object) java.util.HashMap+get(Object) com.jme3.system.AppSettings+getFloat(String) com.jme3.system.AppSettings+getFloat(String) java.util.HashMap+get(Object) java.util.HashMap+get(Object) com.jme3.system.AppSettings+getInteger(String) com.jme3.system.AppSettings+getInteger(String),com.jme3.app.VRConstants+SETTING_USE_COMPOSITOR com.jme3.app.VRAppState+useCompositor com.jme3.app.VRConstants+SETTING_USE_COMPOSITOR com.jme3.app.VRAppState+useCompositor com.jme3.app.VRAppState+disableSwapBuffers com.jme3.app.VRConstants+SETTING_VR_FORCE com.jme3.app.VRAppState+forceVR com.jme3.app.VRConstants+SETTING_VR_FORCE com.jme3.app.VRConstants+SETTING_FLIP_EYES com.jme3.app.VRAppState+VRhardware com.jme3.app.VRAppState+VRhardware com.jme3.app.VRConstants+SETTING_FLIP_EYES com.jme3.app.VRConstants+SETTING_GUI_OVERDRAW com.jme3.app.VRAppState+guiManager com.jme3.app.VRConstants+SETTING_GUI_OVERDRAW com.jme3.app.VRConstants+SETTING_GUI_CURVED_SURFACE com.jme3.app.VRAppState+guiManager com.jme3.app.VRConstants+SETTING_GUI_CURVED_SURFACE com.jme3.app.VRConstants+SETTING_ENABLE_MIRROR_WINDOW com.jme3.app.VRAppState+useCompositor com.jme3.app.VRAppState+disableSwapBuffers com.jme3.app.VRAppState+disableSwapBuffers com.jme3.app.VRConstants+SETTING_ENABLE_MIRROR_WINDOW com.jme3.app.VRConstants+SETTING_DISABLE_VR com.jme3.app.VRAppState+DISABLE_VR com.jme3.app.VRConstants+SETTING_DISABLE_VR com.jme3.app.VRConstants+SETTING_SEATED_EXPERIENCE com.jme3.app.VRAppState+seated com.jme3.app.VRConstants+SETTING_SEATED_EXPERIENCE com.jme3.app.VRConstants+SETTING_NO_GUI com.jme3.app.VRAppState+nogui com.jme3.app.VRConstants+SETTING_NO_GUI com.jme3.app.VRConstants+SETTING_INSTANCE_RENDERING com.jme3.app.VRAppState+instanceVR com.jme3.app.VRConstants+SETTING_INSTANCE_RENDERING com.jme3.app.VRConstants+SETTING_DEFAULT_FOV com.jme3.app.VRAppState+defaultFOV com.jme3.app.VRConstants+SETTING_DEFAULT_FOV com.jme3.app.VRConstants+SETTING_DEFAULT_ASPECT_RATIO com.jme3.app.VRAppState+defaultAspect com.jme3.app.VRConstants+SETTING_DEFAULT_ASPECT_RATIO com.jme3.app.VRConstants+SETTING_VRAPI com.jme3.app.VRAppState+vrBinding com.jme3.app.VRConstants+SETTING_VRAPI,2906,69,4,"/** 
 * Process the attached settings and apply changes to this app state.
 * @param settings the app settings to process.
 */
","/**
     * Process the attached settings and apply changes to this app state.
     * @param settings the app settings to process.
     */
    protected void processSettings(AppSettings settings){
    	if (settings != null){
    		if (settings.get(VRConstants.SETTING_USE_COMPOSITOR) != null){
    			useCompositor = settings.getBoolean(VRConstants.SETTING_USE_COMPOSITOR);
                if( useCompositor == false ){
                	disableSwapBuffers = false;
                }
    		}

            if (settings.get(VRConstants.SETTING_VR_FORCE) != null){
            	forceVR = settings.getBoolean(VRConstants.SETTING_VR_FORCE);
    		}
    		
            if (settings.get(VRConstants.SETTING_FLIP_EYES) != null){
                if( VRhardware != null ){
                	VRhardware._setFlipEyes(settings.getBoolean(VRConstants.SETTING_FLIP_EYES));
                } 
    		}
    	    
            if (settings.get(VRConstants.SETTING_GUI_OVERDRAW) != null){
            	guiManager._enableGuiOverdraw(settings.getBoolean(VRConstants.SETTING_GUI_OVERDRAW));
    		}
    	    
            if (settings.get(VRConstants.SETTING_GUI_CURVED_SURFACE) != null){
            	guiManager._enableCurvedSuface(settings.getBoolean(VRConstants.SETTING_GUI_CURVED_SURFACE));
    		}
    	    
            if (settings.get(VRConstants.SETTING_ENABLE_MIRROR_WINDOW) != null){
                if( useCompositor == false ) {
                    disableSwapBuffers = false;
                } else {
                	disableSwapBuffers = !settings.getBoolean(VRConstants.SETTING_ENABLE_MIRROR_WINDOW);
                }
    		}
    	    
            if (settings.get(VRConstants.SETTING_DISABLE_VR) != null){
                DISABLE_VR = settings.getBoolean(VRConstants.SETTING_DISABLE_VR);
    		}
    	    
            if (settings.get(VRConstants.SETTING_SEATED_EXPERIENCE) != null){
            	seated = settings.getBoolean(VRConstants.SETTING_SEATED_EXPERIENCE);
    		}
    	    
            if (settings.get(VRConstants.SETTING_NO_GUI) != null){
            	nogui = settings.getBoolean(VRConstants.SETTING_NO_GUI);
    		}
    	    
            if (settings.get(VRConstants.SETTING_INSTANCE_RENDERING) != null){
            	instanceVR = settings.getBoolean(VRConstants.SETTING_INSTANCE_RENDERING);
    		}

            if (settings.get(VRConstants.SETTING_DEFAULT_FOV) != null){
            	defaultFOV = settings.getFloat(VRConstants.SETTING_DEFAULT_FOV);
    		}
            
            if (settings.get(VRConstants.SETTING_DEFAULT_ASPECT_RATIO) != null){
            	defaultAspect = settings.getFloat(VRConstants.SETTING_DEFAULT_ASPECT_RATIO);
    		}
            
            if (settings.get(VRConstants.SETTING_VRAPI) != null){
            	vrBinding = settings.getInteger(VRConstants.SETTING_VRAPI);
    		}
            
    	}
    }",False,False,The function of this method is to process the app settings and apply changes to the app state. It checks for specific settings and updates corresponding variables or calls other methods to update the state accordingly.,True,"This code defines a method called ""processSettings"" that takes in an AppSettings object as a parameter. It processes the settings and applies changes to the app state based on the values of the settings. The method handles various settings related to virtual reality (VR) such as enabling/disabling the use of a compositor, flipping eyes, enabling GUI overdraw, enabling a curved surface for GUI, enabling/disabling a mirror window, disabling VR, setting a seated experience, disabling GUI, enabling instance rendering, and setting default field of view (FOV), aspect ratio, and VR API binding."
