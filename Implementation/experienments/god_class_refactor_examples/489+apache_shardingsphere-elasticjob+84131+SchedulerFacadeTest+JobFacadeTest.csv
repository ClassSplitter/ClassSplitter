index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,configService,config service ,Field,,,,,53,2,2,,"@Mock
    private ConfigurationService configService;",False,False,,False,
2,leaderElectionService,leader election service ,Field,,,,,62,2,2,,"@Mock
    private LeaderElectionService leaderElectionService;",False,False,,False,
3,serverService,server service ,Field,,,,,46,2,2,,"@Mock
    private ServerService serverService;",False,False,,False,
4,shardingService,sharding service ,Field,,,,,50,2,2,,"@Mock
    private ShardingService shardingService;",False,False,,False,
5,executionContextService,execution context service ,Field,,,,,66,2,2,,"@Mock
    private ExecutionContextService executionContextService;",False,False,,False,
6,executionService,execution service ,Field,,,,,52,2,2,,"@Mock
    private ExecutionService executionService;",False,False,,False,
7,failoverService,failover service ,Field,,,,,50,2,2,,"@Mock
    private FailoverService failoverService;",False,False,,False,
8,statisticsService,statistics service ,Field,,,,,54,2,2,,"@Mock
    private StatisticsService statisticsService;",False,False,,False,
9,offsetService,offset service ,Field,,,,,46,2,2,,"@Mock
    private OffsetService offsetService;",False,False,,False,
10,monitorService,monitor service ,Field,,,,,48,2,2,,"@Mock
    private MonitorService monitorService;",False,False,,False,
11,listenerManager,listener manager ,Field,,,,,50,2,2,,"@Mock
    private ListenerManager listenerManager;",False,False,,False,
12,caller,caller ,Field,,,,,32,2,2,,"@Mock
    private Caller caller;",False,True,,False,
13,jobConfig,job config ,Field,,,,,104,1,2,,"private JobConfiguration jobConfig = new JobConfiguration(""testJob"", TestJob.class, 3, ""0/1 * * * * ?"");",False,False,,False,
14,schedulerFacade,scheduler facade ,Field,,,,,40,1,2,,private SchedulerFacade schedulerFacade;,False,False,,False,
15,setUp(),set up ,Method,,,"com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+SchedulerFacade(CoordinatorRegistryCenter,JobConfiguration,List<ElasticJobListener>) com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.TestElasticJobListener+TestElasticJobListener()",com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+jobConfig com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+caller com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+configService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+leaderElectionService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+serverService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+shardingService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+executionContextService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+executionService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+failoverService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+statisticsService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+offsetService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+monitorService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+listenerManager,1300,17,1,,"@Before
    public void setUp() throws NoSuchFieldException {
        MockitoAnnotations.initMocks(this);
        schedulerFacade = new SchedulerFacade(null, jobConfig, Collections.<ElasticJobListener> singletonList(new TestElasticJobListener(caller)));
        ReflectionUtils.setFieldValue(schedulerFacade, ""configService"", configService);
        ReflectionUtils.setFieldValue(schedulerFacade, ""leaderElectionService"", leaderElectionService);
        ReflectionUtils.setFieldValue(schedulerFacade, ""serverService"", serverService);
        ReflectionUtils.setFieldValue(schedulerFacade, ""shardingService"", shardingService);
        ReflectionUtils.setFieldValue(schedulerFacade, ""executionContextService"", executionContextService);
        ReflectionUtils.setFieldValue(schedulerFacade, ""executionService"", executionService);
        ReflectionUtils.setFieldValue(schedulerFacade, ""failoverService"", failoverService);
        ReflectionUtils.setFieldValue(schedulerFacade, ""statisticsService"", statisticsService);
        ReflectionUtils.setFieldValue(schedulerFacade, ""offsetService"", offsetService);
        ReflectionUtils.setFieldValue(schedulerFacade, ""monitorService"", monitorService);
        ReflectionUtils.setFieldValue(schedulerFacade, ""listenerManager"", listenerManager);
        
    }",False,False,The function of the method is to set up the necessary dependencies and initialize the objects used in the SchedulerFacade class.,False,The code is a setup method that initializes the schedulerFacade object and sets its various dependencies using reflection. It also initializes the MockitoAnnotations and creates a TestElasticJobListener object.
16,testNew(),test new ,Method,,,"com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+SchedulerFacade(CoordinatorRegistryCenter,JobConfiguration,List<ElasticJobListener>) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.TestElasticJobListener+TestElasticJobListener() com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.TestDistributeOnceElasticJobListener+TestDistributeOnceElasticJobListener() java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) java.util.List+get(int) java.util.List+get(int) java.util.List+get(int) java.util.List+get(int) java.lang.Class+getDeclaredField(String) java.lang.Class+getDeclaredField(String)",com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+jobConfig com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+caller,783,9,1,,"@Test
    public void testNew() throws NoSuchFieldException {
        SchedulerFacade schedulerFacade = new SchedulerFacade(null, jobConfig, Arrays.asList(new TestElasticJobListener(caller), new TestDistributeOnceElasticJobListener()));
        List<ElasticJobListener> actual = ReflectionUtils.getFieldValue(schedulerFacade, ReflectionUtils.getFieldWithName(SchedulerFacade.class, ""elasticJobListeners"", false));
        assertThat(actual.size(), is(2));
        assertThat(actual.get(0), instanceOf(TestElasticJobListener.class));
        assertThat(actual.get(1), instanceOf(TestDistributeOnceElasticJobListener.class));
        assertNotNull(ReflectionUtils.getFieldValue(actual.get(1), AbstractDistributeOnceElasticJobListener.class.getDeclaredField(""guaranteeService"")));
    }",False,True,The function of this method is to test the creation of a new SchedulerFacade object and verify that it contains the expected ElasticJobListeners.,False,"The code is a unit test that verifies the behavior of the `testNew` method. It creates a `SchedulerFacade` object with a null parameter, a `jobConfig` object, and two `ElasticJobListener` objects. It then checks that the `elasticJobListeners` field of the `SchedulerFacade` object contains the expected listeners and that the second listener has a non-null `guaranteeService` field."
17,testRegisterStartUpInfo(),test register start up info ,Method,,,com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+registerStartUpInfo() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+registerStartUpInfo(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+listenerManager com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+leaderElectionService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+configService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+serverService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+serverService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+statisticsService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+shardingService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+monitorService,528,12,1,,"@Test
    public void testRegisterStartUpInfo() {
        schedulerFacade.registerStartUpInfo();
        verify(listenerManager).startAllListeners();
        verify(leaderElectionService).leaderElection();
        verify(configService).persistJobConfiguration();
        verify(serverService).persistServerOnline();
        verify(serverService).clearJobStoppedStatus();
        verify(statisticsService).startProcessCountJob();
        verify(shardingService).setReshardingFlag();
        verify(monitorService).listen();
    }",False,False,"The function of the method is to test the registration of startup information. It verifies that various services and configurations are correctly executed, such as starting listeners, performing leader election, persisting job configuration, persisting server online status, clearing job stopped status, starting process count job, setting resharding flag, and listening for monitoring.",False,"The code is a test method that verifies the behavior of the `registerStartUpInfo()` method. It checks if various services and managers are called with the expected methods, such as starting listeners, performing leader election, persisting job configuration, and starting various services like statistics, sharding, and monitoring."
18,testReleaseJobResource(),test release job resource ,Method,,,com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+releaseJobResource() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+releaseJobResource(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+monitorService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+statisticsService,197,6,1,,"@Test
    public void testReleaseJobResource() {
        schedulerFacade.releaseJobResource();
        verify(monitorService).close();
        verify(statisticsService).stopProcessCountJob();
    }",False,False,"This method is a unit test that verifies if the ""releaseJobResource"" method correctly releases job resources. It also verifies if the ""close"" method of the monitor service and the ""stopProcessCountJob"" method of the statistics service are called.",False,The code is a unit test for the `releaseJobResource()` method. It verifies that the method calls the `close()` method on the `monitorService` and the `stopProcessCountJob()` method on the `statisticsService`.
19,testResumeCrashedJobInfo(),test resume crashed job info ,Method,,,com.dangdang.ddframe.job.internal.sharding.ShardingService+getLocalHostShardingItems() com.dangdang.ddframe.job.internal.sharding.ShardingService+getLocalHostShardingItems() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+resumeCrashedJobInfo() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+resumeCrashedJobInfo(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+shardingService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+serverService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+shardingService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+executionService,407,8,1,,"@Test
    public void testResumeCrashedJobInfo() {
        when(shardingService.getLocalHostShardingItems()).thenReturn(Collections.<Integer>emptyList());
        schedulerFacade.resumeCrashedJobInfo();
        verify(serverService).persistServerOnline();
        verify(shardingService).getLocalHostShardingItems();
        verify(executionService).clearRunningInfo(Collections.<Integer>emptyList());
    }",False,False,"The function of the method is to test the functionality of the ""resumeCrashedJobInfo"" method. It mocks the behavior of certain methods, calls the ""resumeCrashedJobInfo"" method, and verifies that other methods are called with the expected parameters.",False,"The code is a unit test for the method `resumeCrashedJobInfo()` in a scheduler facade class. It mocks the behavior of other services and verifies that the method correctly calls the `persistServerOnline()` method of the server service, retrieves local host sharding items from the sharding service, and clears running information for the retrieved sharding items from the execution service."
20,testClearJobStoppedStatus(),test clear job stopped status ,Method,,,com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+clearJobStoppedStatus() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+clearJobStoppedStatus(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+serverService,161,5,1,,"@Test
    public void testClearJobStoppedStatus() {
        schedulerFacade.clearJobStoppedStatus();
        verify(serverService).clearJobStoppedStatus();
    }",False,False,"This method is a test case that verifies if the ""clearJobStoppedStatus"" method of the ""schedulerFacade"" object is called and if it calls the ""clearJobStoppedStatus"" method of the ""serverService"" object.",False,The code is a test method that verifies the behavior of the `clearJobStoppedStatus()` method. It calls the method on the `schedulerFacade` object and then verifies that the `clearJobStoppedStatus()` method is called on the `serverService` object using the `verify()` method.
21,testIsJobStoppedManually(),test is job stopped manually ,Method,,,com.dangdang.ddframe.job.internal.server.ServerService+isJobStoppedManually() com.dangdang.ddframe.job.internal.server.ServerService+isJobStoppedManually() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+isJobStoppedManually() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+isJobStoppedManually(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+serverService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade,185,5,1,,"@Test
    public void testIsJobStoppedManually() {
        when(serverService.isJobStoppedManually()).thenReturn(true);
        assertTrue(schedulerFacade.isJobStoppedManually());
    }",False,False,"The function of the method is to test whether the job has been stopped manually. It does this by mocking the server service to return true when the method is called, and then asserting that the scheduler facade also returns true.",False,"The code is a unit test for the method `isJobStoppedManually()` in the `schedulerFacade` class. It mocks the behavior of the `serverService` dependency to return `true` when `isJobStoppedManually()` is called, and then asserts that the method in `schedulerFacade` also returns `true`."
22,testGetJobName(),test get job name ,Method,,,com.dangdang.ddframe.job.internal.config.ConfigurationService+getJobName() com.dangdang.ddframe.job.internal.config.ConfigurationService+getJobName() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+getJobName() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+getJobName(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+configService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade,175,5,1,,"@Test
    public void testGetJobName() {
        when(configService.getJobName()).thenReturn(""testJob"");
        assertThat(schedulerFacade.getJobName(), is(""testJob""));
    }",True,True,"This method is a unit test that verifies the functionality of the ""getJobName"" method in the ""schedulerFacade"" class. It uses a mock object to simulate the behavior of the ""configService"" and asserts that the returned job name is ""testJob"".",False,"The code is a unit test for the `getJobName()` method. It mocks the `getJobName()` method of the `configService` object to return ""testJob"" and asserts that the `schedulerFacade` object's `getJobName()` method returns the same value."
23,testGetCron(),test get cron ,Method,,,com.dangdang.ddframe.job.internal.config.ConfigurationService+getCron() com.dangdang.ddframe.job.internal.config.ConfigurationService+getCron() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+getCron() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+getCron(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+configService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade,174,5,1,,"@Test
    public void testGetCron() {
        when(configService.getCron()).thenReturn(""0 * * * * *"");
        assertThat(schedulerFacade.getCron(), is(""0 * * * * *""));
    }",False,False,"This method is a unit test that verifies the functionality of the ""getCron"" method in the ""schedulerFacade"" class. It mocks the ""getCron"" method from the ""configService"" class and asserts that the returned value is ""0 * * * * *"".",False,The code is a unit test for the `getCron()` method. It mocks the `getCron()` method of the `configService` object to return a specific cron expression and then asserts that the `getCron()` method of the `schedulerFacade` object returns the same cron expression.
24,testIsMisfire(),test is misfire ,Method,,,com.dangdang.ddframe.job.internal.config.ConfigurationService+isMisfire() com.dangdang.ddframe.job.internal.config.ConfigurationService+isMisfire() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+isMisfire() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+isMisfire(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+configService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade,152,5,1,,"@Test
    public void testIsMisfire() {
        when(configService.isMisfire()).thenReturn(true);
        assertTrue(schedulerFacade.isMisfire());
    }",False,False,"This method is a unit test that verifies the functionality of the ""isMisfire"" method in the ""schedulerFacade"" class. It sets the ""isMisfire"" value in the ""configService"" to true and asserts that the ""isMisfire"" method in the ""schedulerFacade"" returns true.",False,"The code is a unit test for the `isMisfire()` method. It sets up a mock object to return `true` when `isMisfire()` is called on the `configService` object, and then asserts that the `isMisfire()` method of the `schedulerFacade` object also returns `true`."
25,testCheckMaxTimeDiffSecondsTolerable(),test check max time diff seconds tolerable ,Method,,,com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+checkMaxTimeDiffSecondsTolerable() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+checkMaxTimeDiffSecondsTolerable(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+configService,194,5,1,,"@Test
    public void testCheckMaxTimeDiffSecondsTolerable() {
        schedulerFacade.checkMaxTimeDiffSecondsTolerable();
        verify(configService).checkMaxTimeDiffSecondsTolerable();
    }",True,True,"The function of the method is to test the ""checkMaxTimeDiffSecondsTolerable"" method of the ""schedulerFacade"" object and verify that it calls the ""checkMaxTimeDiffSecondsTolerable"" method of the ""configService"" object.",False,The code is a unit test for the method `checkMaxTimeDiffSecondsTolerable()` in the `schedulerFacade` class. It verifies that the method calls the `checkMaxTimeDiffSecondsTolerable()` method in the `configService` class.
26,testNewJobTriggerListener(),test new job trigger listener ,Method,,,com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+newJobTriggerListener() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+newJobTriggerListener(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade,156,4,1,,"@Test
    public void testNewJobTriggerListener() {
        assertThat(schedulerFacade.newJobTriggerListener(), instanceOf(JobTriggerListener.class));
    }",False,False,The function of the method is to test if the newJobTriggerListener() method of the schedulerFacade object returns an instance of the JobTriggerListener class.,False,The code is a unit test that verifies if the `newJobTriggerListener()` method of the `schedulerFacade` object returns an instance of the `JobTriggerListener` class.
27,testFailoverIfUnnecessary(),test failover if unnecessary ,Method,,,com.dangdang.ddframe.job.internal.config.ConfigurationService+isFailover() com.dangdang.ddframe.job.internal.config.ConfigurationService+isFailover() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+failoverIfNecessary(boolean) com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+failoverIfNecessary(boolean),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+configService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+failoverService,234,6,1,,"@Test
    public void testFailoverIfUnnecessary() {
        when(configService.isFailover()).thenReturn(false);
        schedulerFacade.failoverIfNecessary(false);
        verify(failoverService, times(0)).failoverIfNecessary();
    }",True,True,"The function of the given method is to test the behavior of the ""failoverIfNecessary"" method in the ""schedulerFacade"" class when the ""isFailover"" method in the ""configService"" class returns false.",False,"The code is a unit test for a method called `testFailoverIfUnnecessary()`. It sets up a mock object to return `false` when a certain method is called, then calls the `failoverIfNecessary()` method of a `schedulerFacade` object with a `false` parameter. Finally, it verifies that the `failoverIfNecessary()` method of a `failoverService` object is not called."
28,testFailoverIfNecessaryButIsStopped(),test failover if necessary but is stopped ,Method,,,com.dangdang.ddframe.job.internal.config.ConfigurationService+isFailover() com.dangdang.ddframe.job.internal.config.ConfigurationService+isFailover() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+failoverIfNecessary(boolean) com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+failoverIfNecessary(boolean),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+configService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+failoverService,242,6,1,,"@Test
    public void testFailoverIfNecessaryButIsStopped() {
        when(configService.isFailover()).thenReturn(true);
        schedulerFacade.failoverIfNecessary(true);
        verify(failoverService, times(0)).failoverIfNecessary();
    }",True,True,"The function of the method is to test the behavior of the ""failoverIfNecessary"" method when the ""isFailover"" method returns true and the scheduler is stopped. It verifies that the ""failoverIfNecessary"" method is not called on the ""failoverService"".",False,"The code is a unit test for a method called `testFailoverIfNecessaryButIsStopped()`. It sets up a mock object to return `true` when `isFailover()` is called on a `configService` object. Then, it calls the `failoverIfNecessary()` method on a `schedulerFacade` object with a `true` parameter. Finally, it verifies that the `failoverIfNecessary()` method on a `failoverService` object is not called."
29,testFailoverIfNecessary(),test failover if necessary ,Method,,,com.dangdang.ddframe.job.internal.config.ConfigurationService+isFailover() com.dangdang.ddframe.job.internal.config.ConfigurationService+isFailover() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+failoverIfNecessary(boolean) com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+failoverIfNecessary(boolean),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+configService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+failoverService,221,6,1,,"@Test
    public void testFailoverIfNecessary() {
        when(configService.isFailover()).thenReturn(true);
        schedulerFacade.failoverIfNecessary(false);
        verify(failoverService).failoverIfNecessary();
    }",True,True,"This method is a unit test that verifies if the ""failoverIfNecessary"" method in the ""schedulerFacade"" class correctly calls the ""failoverIfNecessary"" method in the ""failoverService"" class when the ""isFailover"" method in the ""configService"" class returns true.",False,"The code is a unit test for the `failoverIfNecessary` method. It sets up a mock object to return `true` for the `isFailover` method, calls the `failoverIfNecessary` method with a `false` parameter, and verifies that the `failoverService` object's `failoverIfNecessary` method is called."
30,testRegisterJobBegin(),test register job begin ,Method,,,com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext+JobExecutionMultipleShardingContext() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+registerJobBegin(JobExecutionMultipleShardingContext) com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+registerJobBegin(JobExecutionMultipleShardingContext),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+executionService,284,6,1,,"@Test
    public void testRegisterJobBegin() {
        JobExecutionMultipleShardingContext shardingContext = new JobExecutionMultipleShardingContext();
        schedulerFacade.registerJobBegin(shardingContext);
        verify(executionService).registerJobBegin(shardingContext);
    }",True,True,"This method is a unit test that verifies if the `registerJobBegin` method of the `schedulerFacade` object is called with the `shardingContext` object as a parameter, and if the `registerJobBegin` method of the `executionService` object is also called with the `shardingContext` object as a parameter.",False,"The code is a unit test for the `registerJobBegin` method. It creates a `JobExecutionMultipleShardingContext` object, calls the `registerJobBegin` method of the `schedulerFacade` object with the `shardingContext` as a parameter, and verifies that the `registerJobBegin` method of the `executionService` object is called with the `shardingContext` as a parameter."
31,testRegisterJobCompletedWhenFailoverDisabled(),test register job completed when failover disabled ,Method,,,com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext+JobExecutionMultipleShardingContext() com.dangdang.ddframe.job.internal.config.ConfigurationService+isFailover() com.dangdang.ddframe.job.internal.config.ConfigurationService+isFailover() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+registerJobCompleted(JobExecutionMultipleShardingContext) com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+registerJobCompleted(JobExecutionMultipleShardingContext),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+configService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+executionService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+failoverService,478,8,1,,"@Test
    public void testRegisterJobCompletedWhenFailoverDisabled() {
        JobExecutionMultipleShardingContext shardingContext = new JobExecutionMultipleShardingContext();
        when(configService.isFailover()).thenReturn(false);
        schedulerFacade.registerJobCompleted(shardingContext);
        verify(executionService).registerJobCompleted(shardingContext);
        verify(failoverService, times(0)).updateFailoverComplete(shardingContext.getShardingItems());
    }",True,True,"This method is a unit test that verifies the behavior of the ""registerJobCompleted"" method when failover is disabled. It creates a mock object, sets the failover flag to false, calls the ""registerJobCompleted"" method, and verifies that certain methods are called with the expected arguments.",False,"The code is testing the behavior of the `registerJobCompleted` method when failover is disabled. It creates a `JobExecutionMultipleShardingContext` object, sets the failover to false using the `configService`, and then verifies that the `executionService` registers the job completion and the `failoverService` does not update the failover completion."
32,testRegisterJobCompletedWhenFailoverEnabled(),test register job completed when failover enabled ,Method,,,com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext+JobExecutionMultipleShardingContext() com.dangdang.ddframe.job.internal.config.ConfigurationService+isFailover() com.dangdang.ddframe.job.internal.config.ConfigurationService+isFailover() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+registerJobCompleted(JobExecutionMultipleShardingContext) com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+registerJobCompleted(JobExecutionMultipleShardingContext),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+configService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+executionService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+failoverService,466,8,1,,"@Test
    public void testRegisterJobCompletedWhenFailoverEnabled() {
        JobExecutionMultipleShardingContext shardingContext = new JobExecutionMultipleShardingContext();
        when(configService.isFailover()).thenReturn(true);
        schedulerFacade.registerJobCompleted(shardingContext);
        verify(executionService).registerJobCompleted(shardingContext);
        verify(failoverService).updateFailoverComplete(shardingContext.getShardingItems());
    }",True,True,"The function of the method is to test the registration of a completed job when failover is enabled. It creates a sharding context, sets failover to true, registers the job completion, and updates failover completion for the sharding items.",False,"The code is a unit test for the method `registerJobCompleted()` in the `schedulerFacade` class. It verifies that when failover is enabled, the method correctly calls `executionService.registerJobCompleted()` and `failoverService.updateFailoverComplete()` with the appropriate parameters from the `shardingContext`."
33,testGetShardingContext(),test get sharding context ,Method,,,com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext+JobExecutionMultipleShardingContext() com.dangdang.ddframe.job.internal.execution.ExecutionContextService+getJobExecutionShardingContext() com.dangdang.ddframe.job.internal.execution.ExecutionContextService+getJobExecutionShardingContext() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+getShardingContext() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+getShardingContext(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+executionContextService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+shardingService,393,7,1,,"@Test
    public void testGetShardingContext() {
        JobExecutionMultipleShardingContext shardingContext = new JobExecutionMultipleShardingContext();
        when(executionContextService.getJobExecutionShardingContext()).thenReturn(shardingContext);
        assertThat(schedulerFacade.getShardingContext(), is(shardingContext));
        verify(shardingService).shardingIfNecessary();
    }",True,True,"This method is a unit test that verifies the functionality of the ""getShardingContext"" method. It creates a mock object of ""JobExecutionMultipleShardingContext"" and sets it as the return value of ""getJobExecutionShardingContext"" method. It then asserts that the returned value of ""getShardingContext"" method is equal to the created mock object. Finally, it verifies that the ""shardingIfNecessary"" method of ""shardingService"" is called.",False,The code is a unit test for the `getShardingContext()` method. It creates a `JobExecutionMultipleShardingContext` object and mocks the `getJobExecutionShardingContext()` method of the `executionContextService` to return the created object. It then asserts that the returned sharding context is equal to the created object and verifies that the `shardingService` is called to perform sharding if necessary.
34,testMisfireIfNecessary(),test misfire if necessary ,Method,,,com.dangdang.ddframe.job.internal.execution.ExecutionService+misfireIfNecessary(List<Integer>) com.dangdang.ddframe.job.internal.execution.ExecutionService+misfireIfNecessary(List<Integer>) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+misfireIfNecessary(List<Integer>) com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+misfireIfNecessary(List<Integer>) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+executionService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade,230,5,1,,"@Test
    public void testMisfireIfNecessary() {
        when(executionService.misfireIfNecessary(Arrays.asList(0, 1))).thenReturn(true);
        assertThat(schedulerFacade.misfireIfNecessary(Arrays.asList(0, 1)), is(true));
    }",True,True,"This method is a unit test that verifies the behavior of the ""misfireIfNecessary"" method in the ""schedulerFacade"" class. It mocks the ""misfireIfNecessary"" method in the ""executionService"" class to return true when called with a list of integers (0 and 1). It then asserts that calling the ""misfireIfNecessary"" method in the ""schedulerFacade"" class with the same list of integers also returns true.",False,The code is testing the `misfireIfNecessary` method of the `schedulerFacade` object. It sets up a mock behavior for the `executionService` object and asserts that the returned value from `schedulerFacade.misfireIfNecessary` is equal to the expected value from the mock.
35,testClearMisfire(),test clear misfire ,Method,,,com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+clearMisfire(List<Integer>) com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+clearMisfire(List<Integer>) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+executionService,175,5,1,,"@Test
    public void testClearMisfire() {
        schedulerFacade.clearMisfire(Arrays.asList(0, 1));
        verify(executionService).clearMisfire(Arrays.asList(0, 1));
    }",True,True,"The function of the method is to test the ""clearMisfire"" method of the ""schedulerFacade"" object. It passes a list of integers (0 and 1) to the ""clearMisfire"" method and verifies that the ""executionService"" object's ""clearMisfire"" method is called with the same list.",False,The code is a unit test for the `clearMisfire` method. It verifies that the method correctly calls the `clearMisfire` method of the `executionService` object with a list of integers as an argument. The purpose of this test is to ensure that the `clearMisfire` method behaves as expected.
36,testIsNeedSharding(),test is need sharding ,Method,,,com.dangdang.ddframe.job.internal.sharding.ShardingService+isNeedSharding() com.dangdang.ddframe.job.internal.sharding.ShardingService+isNeedSharding() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+isNeedSharding() com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+isNeedSharding(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+shardingService com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade,179,5,1,,"@Test
    public void testIsNeedSharding() {
        when(shardingService.isNeedSharding()).thenReturn(true);
        assertThat(schedulerFacade.isNeedSharding(), is(true));
    }",True,True,"This method is a unit test that verifies if the ""isNeedSharding"" method of the ""schedulerFacade"" object returns true when the ""isNeedSharding"" method of the ""shardingService"" object is mocked to return true.",False,The code is a unit test for the method `isNeedSharding()` in the `schedulerFacade` class. It mocks the behavior of the `shardingService.isNeedSharding()` method to always return `true` and asserts that the `schedulerFacade.isNeedSharding()` method also returns `true`.
37,testUpdateOffset(),test update offset ,Method,,,"com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+updateOffset(int,String) com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+updateOffset(int,String)",com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+offsetService,158,5,1,,"@Test
    public void testUpdateOffset() {
        schedulerFacade.updateOffset(0, ""offset0"");
        verify(offsetService).updateOffset(0, ""offset0"");
    }",True,True,This method is a unit test that verifies if the `updateOffset` method of the `schedulerFacade` object is called with the correct parameters.,False,"The code is a unit test for the `updateOffset` method. It verifies that the `updateOffset` method of the `schedulerFacade` object is called with the arguments 0 and ""offset0"" by using the `verify` method on the `offsetService` object."
38,testBeforeJobExecuted(),test before job executed ,Method,,,com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+beforeJobExecuted(JobExecutionMultipleShardingContext) com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+beforeJobExecuted(JobExecutionMultipleShardingContext) com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext+JobExecutionMultipleShardingContext(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+caller,172,5,1,,"@Test
    public void testBeforeJobExecuted() {
        schedulerFacade.beforeJobExecuted(new JobExecutionMultipleShardingContext());
        verify(caller).before();
    }",True,True,"This method is a unit test that verifies if the ""beforeJobExecuted"" method of the ""schedulerFacade"" class is correctly called with a new instance of ""JobExecutionMultipleShardingContext"", and if the ""before"" method of the ""caller"" object is correctly called.",False,The code is a unit test for the method `beforeJobExecuted()` in the `schedulerFacade` class. It verifies that the `before()` method of the `caller` object is called when the `beforeJobExecuted()` method is executed with a new instance of `JobExecutionMultipleShardingContext`.
39,testAfterJobExecuted(),test after job executed ,Method,,,com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+afterJobExecuted(JobExecutionMultipleShardingContext) com.dangdang.ddframe.job.internal.schedule.SchedulerFacade+afterJobExecuted(JobExecutionMultipleShardingContext) com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext+JobExecutionMultipleShardingContext(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+schedulerFacade com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest+caller,169,5,1,,"@Test
    public void testAfterJobExecuted() {
        schedulerFacade.afterJobExecuted(new JobExecutionMultipleShardingContext());
        verify(caller).after();
    }",True,True,"This method is a unit test that verifies if the ""afterJobExecuted"" method of the ""schedulerFacade"" is called with a new instance of ""JobExecutionMultipleShardingContext"", and if the ""after"" method of the ""caller"" object is called.",False,The code is a unit test for the `afterJobExecuted` method of the `schedulerFacade` class. It verifies that the `after` method of the `caller` object is called after the `afterJobExecuted` method is executed with a `JobExecutionMultipleShardingContext` object as a parameter.
40,TestElasticJobListener,test elastic job listener ,MemberClass,,,com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.TestElasticJobListener+beforeJobExecuted(JobExecutionMultipleShardingContext) com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.Caller+before() com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.Caller+before() com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.TestElasticJobListener+afterJobExecuted(JobExecutionMultipleShardingContext) com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.Caller+after() com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.Caller+after(),com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.TestElasticJobListener+caller com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.TestElasticJobListener+caller com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.TestElasticJobListener+caller,476,15,8,,"@RequiredArgsConstructor
    static class TestElasticJobListener implements ElasticJobListener {
        
        private final Caller caller;
        
        @Override
        public void beforeJobExecuted(final JobExecutionMultipleShardingContext shardingContext) {
            caller.before();
        }
        
        @Override
        public void afterJobExecuted(final JobExecutionMultipleShardingContext shardingContext) {
            caller.after();
        }
    }",False,True,,False,
41,TestDistributeOnceElasticJobListener,test distribute once elastic job listener ,MemberClass,,,com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.TestDistributeOnceElasticJobListener+TestDistributeOnceElasticJobListener() com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.TestDistributeOnceElasticJobListener+doBeforeJobExecutedAtLastStarted(JobExecutionMultipleShardingContext) com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.TestDistributeOnceElasticJobListener+doAfterJobExecutedAtLastCompleted(JobExecutionMultipleShardingContext),,514,14,8,,"static class TestDistributeOnceElasticJobListener extends AbstractDistributeOnceElasticJobListener {
        
        TestDistributeOnceElasticJobListener() {
            super(500000L, 500000L);
        }
        
        @Override
        public void doBeforeJobExecutedAtLastStarted(final JobExecutionMultipleShardingContext shardingContext) {
        }
        
        @Override
        public void doAfterJobExecutedAtLastCompleted(final JobExecutionMultipleShardingContext shardingContext) {
        }
    }",False,True,,False,
42,Caller,caller ,MemberClass,,,com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.Caller+before() com.dangdang.ddframe.job.internal.schedule.SchedulerFacadeTest.Caller+after(),,87,6,0,,"interface Caller {
        
        void before();
        
        void after();
    }",False,True,,False,
