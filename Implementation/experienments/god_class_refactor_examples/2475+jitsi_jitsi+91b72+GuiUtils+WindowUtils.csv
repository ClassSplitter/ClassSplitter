index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,WINDOW_LIST,window list the list of all window s owned by this application ,Field,,,,,129,4,26,"/** 
 * The list of all <tt>Window</tt>s owned by this application.
 */
","/**
     * The list of all <tt>Window</tt>s owned by this application.
     */
    private static final List<Window> WINDOW_LIST;",True,True,"/** 
 * The list of all <tt>Window</tt>s owned by this application.
 */
",False,"/** 
 * The list of all <tt>Window</tt>s owned by this application.
 */
"
2,c1,c1 ,Field,,,,,58,1,26,,private static final Calendar c1 = Calendar.getInstance();,False,False,,False,
3,c2,c2 ,Field,,,,,58,1,26,,private static final Calendar c2 = Calendar.getInstance();,False,False,,False,
4,MILLIS_PER_SECOND,millis per second number of milliseconds in a second ,Field,,,,,109,4,25,"/** 
 * Number of milliseconds in a second.
 */
","/**
     * Number of milliseconds in a second.
     */
    public static final long MILLIS_PER_SECOND = 1000;",False,False,"/** 
 * Number of milliseconds in a second.
 */
",False,"/** 
 * Number of milliseconds in a second.
 */
"
5,MILLIS_PER_MINUTE,millis per minute number of milliseconds in a standard minute ,Field,,,,,136,4,25,"/** 
 * Number of milliseconds in a standard minute.
 */
","/**
     * Number of milliseconds in a standard minute.
     */
    public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;",False,False,"/** 
 * Number of milliseconds in a standard minute.
 */
",False,"/** 
 * Number of milliseconds in a standard minute.
 */
"
6,MILLIS_PER_HOUR,millis per hour number of milliseconds in a standard hour ,Field,,,,,132,4,25,"/** 
 * Number of milliseconds in a standard hour.
 */
","/**
     * Number of milliseconds in a standard hour.
     */
    public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;",False,False,"/** 
 * Number of milliseconds in a standard hour.
 */
",False,"/** 
 * Number of milliseconds in a standard hour.
 */
"
7,MILLIS_PER_DAY,millis per day number of milliseconds in a standard day ,Field,,,,,128,4,25,"/** 
 * Number of milliseconds in a standard day.
 */
","/**
     * Number of milliseconds in a standard day.
     */
    public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;",False,False,"/** 
 * Number of milliseconds in a standard day.
 */
",False,"/** 
 * Number of milliseconds in a standard day.
 */
"
8,DIGIT_MAPPINGS,digit mappings ,Field,,,,,62,1,26,,"private static final Map<Character, Character> DIGIT_MAPPINGS;",False,False,,False,
9,ESCAPE_SEQUENCES,escape sequences characters and their replacement in created folder names ,Field,,,,,485,16,26,"/** 
 * Characters and their replacement in created folder names
 */
","/**
     *  Characters and their replacement in created folder names
     */
    private final static String[][] ESCAPE_SEQUENCES = new String[][]
    {
        {""&"", ""&_amp""},
        {""/"", ""&_sl""},
        {""\\\\"", ""&_bs""},   // the char \
        {"":"", ""&_co""},
        {""\\*"", ""&_as""},    // the char *
        {""\\?"", ""&_qm""},    // the char ?
        {""\"""", ""&_pa""},     // the char ""
        {""<"", ""&_lt""},
        {"">"", ""&_gt""},
        {""\\|"", ""&_pp""}     // the char |
    };",False,False,"/** 
 * Characters and their replacement in created folder names
 */
",False,"/** 
 * Characters and their replacement in created folder names
 */
"
10,replaceSpecialRegExpChars(String),replace special reg exp chars text replaces some chars that are special in a regular expression param text the initial text return the formatted text ,Method,,net.java.sip.communicator.impl.replacement.smiley.ReplacementServiceSmileyImpl+getSmileyPattern(Collection<Smiley>),"java.lang.String+replaceAll(String,String) java.lang.String+replaceAll(String,String)",,285,9,9,"/** 
 * Replaces some chars that are special in a regular expression.
 * @param text The initial text.
 * @return the formatted text
 */
","/**
     * Replaces some chars that are special in a regular expression.
     * @param text The initial text.
     * @return the formatted text
     */
    public static String replaceSpecialRegExpChars(String text)
    {
        return text.replaceAll(""([.()^&$*|])"", ""\\\\$1"");
    }",False,False,"This method replaces special characters in a given text that have special meaning in regular expressions, such as ""."", ""("", "")"", ""^"", ""&"", ""$"", ""*"", and ""|"". It adds a backslash before each special character.",False,This code defines a method called replaceSpecialRegExpChars that takes a string as input and replaces certain characters that have special meaning in regular expressions with their escaped versions. The method returns the formatted text.
11,"getStringWidth(Component,String)",get string width c text returns the width in pixels of a text param c the component where the text is contained param text the text to measure return the width in pixels of a text ,Method,,"net.java.sip.communicator.impl.gui.main.chat.StatusPanel+setStatusMessage(String) net.java.sip.communicator.impl.gui.main.chat.StatusPanel+setStatusMessage(String) net.java.sip.communicator.impl.gui.main.chat.StatusPanel+setStatusMessage(String) net.java.sip.communicator.impl.gui.main.presence.GlobalStatusSelectorBox+fitSizeToText() net.java.sip.communicator.impl.swingnotification.PopupMessageHandlerSwingImpl+getPopupMessageAreaHeight(Component,String) net.java.sip.communicator.util.swing.ExtendedTooltip+calculateLabelSize(JLabel)","javax.swing.SwingUtilities+computeStringWidth(FontMetrics,String) javax.swing.SwingUtilities+computeStringWidth(FontMetrics,String) java.awt.Component+getFontMetrics(Font) java.awt.Component+getFontMetrics(Font) java.awt.Component+getFont() java.awt.Component+getFont()",,379,11,9,"/** 
 * Returns the width in pixels of a text.
 * @param c the component where the text is contained
 * @param text the text to measure
 * @return the width in pixels of a text.
 */
","/**
     * Returns the width in pixels of a text.
     * @param c the component where the text is contained
     * @param text the text to measure
     * @return the width in pixels of a text.
     */
    public static int getStringWidth(Component c, String text)
    {
        return SwingUtilities.computeStringWidth(c
                .getFontMetrics(c.getFont()), text);
    }",True,True,This method calculates the width in pixels of a given text by using the font metrics of a specified component. It returns the calculated width as an integer value.,False,"This code defines a method called ""getStringWidth"" that calculates the width in pixels of a given text when displayed on a component. It takes a component and a text string as input and uses the SwingUtilities class to compute the width using the font metrics of the component's font."
12,"getStringSize(Component,String)",get string size c text returns the size of the given text computed towards to the given component param c the component where the text is contained param text the text to measure return the dimensions of the text ,Method,,"net.java.sip.communicator.impl.gui.main.contactlist.ContactListTreeCellRenderer+addButton(SIPCommButton,int,int,boolean) net.java.sip.communicator.impl.gui.main.contactlist.ContactListTreeCellRenderer+addButton(SIPCommButton,int,int,boolean) net.java.sip.communicator.util.swing.ExtendedTooltip+setTitle(String) net.java.sip.communicator.util.swing.ExtendedTooltip+calculateLabelSize(JLabel)","java.awt.Component+getFontMetrics(Font) java.awt.Component+getFontMetrics(Font) java.awt.Component+getFont() java.awt.Component+getFont() java.awt.FontMetrics+getHeight() java.awt.FontMetrics+getHeight() java.awt.FontMetrics+stringWidth(String) java.awt.FontMetrics+stringWidth(String) java.awt.Dimension+Dimension(int,int)",,771,18,9,"/** 
 * Returns the size of the given text computed towards to the given component.
 * @param c the component where the text is contained
 * @param text the text to measure
 * @return the dimensions of the text
 */
","/**
     * Returns the size of the given text computed towards to the given
     * component.
     * @param c the component where the text is contained
     * @param text the text to measure
     * @return the dimensions of the text
     */
    public static Dimension getStringSize(Component c, String text)
    {
        // get metrics from the graphics
        FontMetrics metrics = c.getFontMetrics(c.getFont());
        // get the height of a line of text in this font and render context
        int hgt = metrics.getHeight();
        // get the advance of my text in this font and render context
        int adv = metrics.stringWidth(text);
        // calculate the size of a box to hold the text with some padding.
        return new Dimension(adv+2, hgt+2);
    }",True,True,"This method calculates and returns the dimensions of a given text when rendered on a specified component. It takes the component and the text as input, and returns the dimensions of the text as a Dimension object.",False,"This code defines a method called ""getStringSize"" that takes a component and a text as input and returns the dimensions of the text. It calculates the height and width of the text using the component's font metrics and returns a dimension object with the calculated values."
13,getDefaultStringSize(String),get default string size text returns the bounds of the given string param text the string to measure return the bounds of the given string ,Method,,net.java.sip.communicator.util.swing.ExtendedTransferHandler+getVisualRepresentation(Transferable),"javax.swing.UIManager+getFont(Object) javax.swing.UIManager+getFont(Object) java.awt.font.FontRenderContext+FontRenderContext(AffineTransform,boolean,boolean) java.awt.font.TextLayout+TextLayout(String,Font,FontRenderContext) java.awt.font.TextLayout+getBounds() java.awt.font.TextLayout+getBounds()",,445,13,9,"/** 
 * Returns the bounds of the given string.
 * @param text the string to measure
 * @return the bounds of the given string
 */
","/**
     * Returns the bounds of the given string.
     * @param text the string to measure
     * @return the bounds of the given string
     */
    public static Rectangle2D getDefaultStringSize(String text)
    {
        Font font = UIManager.getFont(""Label.font"");
        FontRenderContext frc = new FontRenderContext(null, true, false);
        TextLayout layout = new TextLayout(text, font, frc);

        return layout.getBounds();
    }",True,True,"This method returns the bounds of a given string by using the default font and font render context. It creates a text layout with the given string, font, and font render context, and then returns the bounds of the layout.",False,This code defines a method called getDefaultStringSize that takes a string as input and returns the bounds of the string. It uses the default font and font render context to calculate the bounds using the TextLayout class.
14,"countOccurrences(String,char)",count occurrences text needle counts occurrences of the needle character in the given text param text the text in which we search param needle the character we re looking for return the count of occurrences of the needle chat in thegiven text ,Method,,,java.lang.String+toCharArray() java.lang.String+toCharArray(),,545,19,9,"/** 
 * Counts occurrences of the <tt>needle</tt> character in the given <tt>text</tt>.
 * @param text the text in which we search
 * @param needle the character we're looking for
 * @return the count of occurrences of the <tt>needle</tt> chat in thegiven <tt>text</tt>
 */
","/**
     * Counts occurrences of the <tt>needle</tt> character in the given
     * <tt>text</tt>.
     * @param text the text in which we search
     * @param needle the character we're looking for
     * @return the count of occurrences of the <tt>needle</tt> chat in the
     * given <tt>text</tt>
     */
    public static int countOccurrences(String text, char needle)
    {
        int count = 0;

        for (char c : text.toCharArray())
        {
            if (c == needle)
               ++count;
        }
        return count;
    }",False,False,This method counts the number of occurrences of a specific character in a given text.,False,"This code defines a method called ""countOccurrences"" that takes a string and a character as input and returns the count of occurrences of that character in the string. It iterates through each character in the string and increments a counter if the character matches the given character."
15,"compareDates(Date,Date)",compare dates date1 date2 compares the two dates the comparison is based only on the day month and year values returns 0 if the two dates are equals a value 0 if the first date is before the second one and 0 if the first date is after the second one param date1 the first date to compare param date2 the second date to compare with return returns 0 if the two dates are equals a value 0 ifthe first date is before the second one and 0 if the first date is after the second one ,Method,,,java.util.Date+compareTo(Date) java.util.Date+compareTo(Date),,653,15,9,"/** 
 * Compares the two dates. The comparison is based only on the day, month and year values. Returns 0 if the two dates are equals, a value < 0 if the first date is before the second one and > 0 if the first date is after the second one.
 * @param date1 the first date to compare
 * @param date2 the second date to compare with
 * @return Returns 0 if the two dates are equals, a value < 0 ifthe first date is before the second one and > 0 if the first date is after the second one
 */
","/**
     * Compares the two dates. The comparison is based only on the day, month
     * and year values. Returns 0 if the two dates are equals, a value < 0 if
     * the first date is before the second one and > 0 if the first date is after
     * the second one.
     * @param date1 the first date to compare
     * @param date2 the second date to compare with
     * @return Returns 0 if the two dates are equals, a value < 0 if
     * the first date is before the second one and > 0 if the first date is after
     * the second one
     */
    public static int compareDates(Date date1, Date date2)
    {
        return date1.compareTo(date2);
    }",False,False,"The function compares two dates based on their day, month, and year values. It returns 0 if the dates are equal, a negative value if the first date is before the second date, and a positive value if the first date is after the second date.",False,"This code defines a method called ""compareDates"" that takes two Date objects as parameters and compares them based on their day, month, and year values. It returns 0 if the dates are equal, a negative value if the first date is before the second, and a positive value if the first date is after the second."
16,"compareDates(long,long)",compare dates date1 date2 compares the two dates the comparison is based only on the day month and year values returns 0 if the two dates are equals a value 0 if the first date is before the second one and 0 if the first date is after the second one param date1 the first date to compare param date2 the second date to compare with return returns 0 if the two dates are equals a value 0 ifthe first date is before the second one and 0 if the first date is after the second one ,Method,,,,,678,15,9,"/** 
 * Compares the two dates. The comparison is based only on the day, month and year values. Returns 0 if the two dates are equals, a value < 0 if the first date is before the second one and > 0 if the first date is after the second one.
 * @param date1 the first date to compare
 * @param date2 the second date to compare with
 * @return Returns 0 if the two dates are equals, a value < 0 ifthe first date is before the second one and > 0 if the first date is after the second one
 */
","/**
     * Compares the two dates. The comparison is based only on the day, month
     * and year values. Returns 0 if the two dates are equals, a value < 0 if
     * the first date is before the second one and > 0 if the first date is after
     * the second one.
     * @param date1 the first date to compare
     * @param date2 the second date to compare with
     * @return Returns 0 if the two dates are equals, a value < 0 if
     * the first date is before the second one and > 0 if the first date is after
     * the second one
     */
    public static int compareDates(long date1, long date2)
    {
        return (date1 < date2 ? -1 : (date1 == date2 ? 0 : 1));
    }",False,False,"The function compares two dates based on their day, month, and year values. It returns 0 if the dates are equal, a negative value if the first date is before the second, and a positive value if the first date is after the second.",False,"The code contains a method called `compareDates` that compares two dates based on their day, month, and year values. It returns 0 if the dates are equal, a negative value if the first date is before the second one, and a positive value if the first date is after the second one."
17,"compareDatesOnly(long,long)",compare dates only date1 date2 compares the two dates the comparison is based only on the day month and year values returns 0 if the two dates are equals a value 0 if the first date is before the second one and 0 if the first date is after the second one param date1 the first date to compare param date2 the second date to compare with return returns 0 if the two dates are equals a value 0 ifthe first date is before the second one and 0 if the first date is after the second one ,Method,,"net.java.sip.communicator.impl.callhistory.CallHistorySourceContact+getDateString(long) net.java.sip.communicator.impl.gui.main.chat.ChatHtmlUtils+getDateString(long) net.java.sip.communicator.impl.gui.main.chat.history.HistoryWindow+DatesLoader.run() net.java.sip.communicator.impl.gui.main.chat.history.HistoryWindow+processMessage(Contact,long,String,String,String) net.java.sip.communicator.impl.gui.main.chat.history.HistoryWindow+processMessage(Contact,long,String,String,String)",java.util.Calendar+setTimeInMillis(long) java.util.Calendar+setTimeInMillis(long) java.util.Calendar+setTimeInMillis(long) java.util.Calendar+setTimeInMillis(long) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int),net.java.sip.communicator.util.GuiUtils+c1 net.java.sip.communicator.util.GuiUtils+c2 net.java.sip.communicator.util.GuiUtils+c1 java.util.Calendar+DAY_OF_MONTH net.java.sip.communicator.util.GuiUtils+c1 java.util.Calendar+MONTH net.java.sip.communicator.util.GuiUtils+c1 java.util.Calendar+YEAR net.java.sip.communicator.util.GuiUtils+c2 java.util.Calendar+DAY_OF_MONTH net.java.sip.communicator.util.GuiUtils+c2 java.util.Calendar+MONTH net.java.sip.communicator.util.GuiUtils+c2 java.util.Calendar+YEAR,1499,49,9,"/** 
 * Compares the two dates. The comparison is based only on the day, month and year values. Returns 0 if the two dates are equals, a value < 0 if the first date is before the second one and > 0 if the first date is after the second one.
 * @param date1 the first date to compare
 * @param date2 the second date to compare with
 * @return Returns 0 if the two dates are equals, a value < 0 ifthe first date is before the second one and > 0 if the first date is after the second one
 */
","/**
     * Compares the two dates. The comparison is based only on the day, month
     * and year values. Returns 0 if the two dates are equals, a value < 0 if
     * the first date is before the second one and > 0 if the first date is
     * after the second one.
     * @param date1 the first date to compare
     * @param date2 the second date to compare with
     * @return Returns 0 if the two dates are equals, a value < 0 if
     * the first date is before the second one and > 0 if the first date is
     * after the second one
     */
    public static int compareDatesOnly(long date1, long date2)
    {
        c1.setTimeInMillis(date1);
        c2.setTimeInMillis(date2);

        int day1 = c1.get(Calendar.DAY_OF_MONTH);
        int month1 = c1.get(Calendar.MONTH);
        int year1 = c1.get(Calendar.YEAR);

        int day2 = c2.get(Calendar.DAY_OF_MONTH);
        int month2 = c2.get(Calendar.MONTH);
        int year2 = c2.get(Calendar.YEAR);

        if (year1 < year2)
        {
            return -1;
        }
        else if (year1 == year2)
        {
            if (month1 < month2)
                return -1;
            else if (month1 == month2)
            {
                if (day1 < day2)
                    return -1;
                else if (day1 == day2)
                    return 0;
                else
                    return 1;
            }
            else
                return 1;
        }
        else
        {
            return 1;
        }
    }",False,False,"The function compares two dates based on their day, month, and year values. It returns 0 if the dates are equal, a negative value if the first date is before the second date, and a positive value if the first date is after the second date.",False,"This code defines a method called `compareDatesOnly` that compares two dates based on their day, month, and year values. It returns 0 if the dates are equal, a negative value if the first date is before the second, and a positive value if the first date is after the second."
18,formatDate(Date),format date date formats the given date the result format is the following month day year for example dec 24 2000 param date the date to format return the formatted date string ,Method,,,net.java.sip.communicator.util.GuiUtils+formatDate(long) net.java.sip.communicator.util.GuiUtils+formatDate(long) java.util.Date+getTime() java.util.Date+getTime(),,316,10,9,"/** 
 * Formats the given date. The result format is the following: [Month] [Day], [Year]. For example: Dec 24, 2000.
 * @param date the date to format
 * @return the formatted date string
 */
","/**
     * Formats the given date. The result format is the following:
     * [Month] [Day], [Year]. For example: Dec 24, 2000.
     * @param date the date to format
     * @return the formatted date string
     */
    public static String formatDate(Date date)
    {
        return formatDate(date.getTime());
    }",False,False,"The function formatDate takes a Date object as input and returns a formatted date string in the format [Month] [Day], [Year]. It calls another method formatDate with the time value of the input date.",False,"The code contains a method called ""formatDate"" that takes a Date object as input and returns a formatted date string. The method internally calls another overloaded version of ""formatDate"" that takes a long value representing the time in milliseconds. The formatted date string follows the format: [Month] [Day], [Year]."
19,formatDate(long),format date date formats the given date the result format is the following month day year for example dec 24 2000 param date the date to format return the formatted date string ,Method,formatDate(Date),,"java.lang.StringBuffer+StringBuffer() net.java.sip.communicator.util.GuiUtils+formatDate(long,StringBuffer) net.java.sip.communicator.util.GuiUtils+formatDate(long,StringBuffer) java.lang.StringBuffer+toString() java.lang.StringBuffer+toString()",,398,13,9,"/** 
 * Formats the given date. The result format is the following: [Month] [Day], [Year]. For example: Dec 24, 2000.
 * @param date the date to format
 * @return the formatted date string
 */
","/**
     * Formats the given date. The result format is the following:
     * [Month] [Day], [Year]. For example: Dec 24, 2000.
     * @param date the date to format
     * @return the formatted date string
     */
    public static String formatDate(final long date)
    {
        StringBuffer strBuf = new StringBuffer();

        formatDate(date, strBuf);
        return strBuf.toString();
    }",False,False,"The function formatDate formats a given date into a string with the format [Month] [Day], [Year]. It takes a long value representing the date and returns the formatted date string.",False,"The code contains a method called `formatDate` that takes a long value representing a date and returns a formatted date string in the format of [Month] [Day], [Year]. The method uses a StringBuffer to build the formatted string and returns it as a result."
20,"formatDate(long,StringBuffer)",format date date date str buf formats the given date as month dd yyyy and appends it to the given date str buf string buffer param date the date to format param date str buf the string buffer where to append theformatted date ,Method,formatDate(long),"net.java.sip.communicator.impl.callhistory.CallHistorySourceContact+getDateString(long) net.java.sip.communicator.impl.gui.main.chat.ChatHtmlUtils+getDateString(long) net.java.sip.communicator.impl.gui.main.chat.history.DatesListRenderer+getListCellRendererComponent(JList,Object,int,boolean,boolean)","java.util.Calendar+setTimeInMillis(long) java.util.Calendar+setTimeInMillis(long) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) net.java.sip.communicator.util.GuiUtils+processMonth(int) net.java.sip.communicator.util.GuiUtils+processMonth(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.lang.StringBuffer+append(char) java.lang.StringBuffer+append(char) net.java.sip.communicator.util.GuiUtils+formatTime(int,StringBuffer) net.java.sip.communicator.util.GuiUtils+formatTime(int,StringBuffer) java.util.Calendar+get(int) java.util.Calendar+get(int) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) net.java.sip.communicator.util.GuiUtils+formatTime(int,StringBuffer) net.java.sip.communicator.util.GuiUtils+formatTime(int,StringBuffer) java.util.Calendar+get(int) java.util.Calendar+get(int)",net.java.sip.communicator.util.GuiUtils+c1 net.java.sip.communicator.util.GuiUtils+c1 java.util.Calendar+MONTH net.java.sip.communicator.util.GuiUtils+c1 java.util.Calendar+DAY_OF_MONTH net.java.sip.communicator.util.GuiUtils+c1 java.util.Calendar+YEAR,654,17,9,"/** 
 * Formats the given date as: Month DD, YYYY and appends it to the given <tt>dateStrBuf</tt> string buffer.
 * @param date the date to format
 * @param dateStrBuf the <tt>StringBuffer</tt>, where to append theformatted date
 */
","/**
     * Formats the given date as: Month DD, YYYY and appends it to the given
     * <tt>dateStrBuf</tt> string buffer.
     * @param date the date to format
     * @param dateStrBuf the <tt>StringBuffer</tt>, where to append the
     * formatted date
     */
    public static void formatDate(long date, StringBuffer dateStrBuf)
    {
        c1.setTimeInMillis(date);

        dateStrBuf.append(GuiUtils.processMonth(c1.get(Calendar.MONTH)));
        dateStrBuf.append(' ');
        GuiUtils.formatTime(c1.get(Calendar.DAY_OF_MONTH), dateStrBuf);
        dateStrBuf.append("", "");
        GuiUtils.formatTime(c1.get(Calendar.YEAR), dateStrBuf);
    }",False,False,"The function formats a given date and appends it to a given StringBuffer in the format: Month DD, YYYY.",False,"This code defines a method called ""formatDate"" that takes a date and a StringBuffer as parameters. It formats the given date in the format ""Month DD, YYYY"" and appends it to the StringBuffer. The method uses the GuiUtils class to process the month and format the day and year."
21,formatTime(Date),format time date formats the time for the given date the result format is the following hour minute second for example 12 25 30 param date the date to format return the formatted hour string ,Method,,net.java.sip.communicator.impl.gui.main.chat.ChatConversationComponent+getDateString(Date),net.java.sip.communicator.util.GuiUtils+formatTime(long) net.java.sip.communicator.util.GuiUtils+formatTime(long) java.util.Date+getTime() java.util.Date+getTime(),,328,10,9,"/** 
 * Formats the time for the given date. The result format is the following: [Hour]:[Minute]:[Second]. For example: 12:25:30.
 * @param date the date to format
 * @return the formatted hour string
 */
","/**
     * Formats the time for the given date. The result format is the following:
     * [Hour]:[Minute]:[Second]. For example: 12:25:30.
     * @param date the date to format
     * @return the formatted hour string
     */
    public static String formatTime(Date date)
    {
        return formatTime(date.getTime());
    }",False,False,The function formatTime takes a Date object as input and returns a formatted string representing the time in the format [Hour]:[Minute]:[Second].,False,"The code contains a method called ""formatTime"" that takes a Date object as input and returns a formatted string representing the time in the format [Hour]:[Minute]:[Second]. It internally calls another method with the same name, passing the time in milliseconds as an argument."
22,formatTime(long),format time time formats the time for the given date the result format is the following hour minute second for example 12 25 30 param time the date to format return the formatted hour string ,Method,formatTime(Date),"net.java.sip.communicator.impl.callhistory.CallHistorySourceContact+getDateString(long) net.java.sip.communicator.impl.gui.main.call.CallHistoryButton+setNotificationView(Collection<UINotificationGroup>) net.java.sip.communicator.impl.gui.main.chat.ChatConversationPanel+processMessage(ChatMessage,String,ProtocolProviderService,String) net.java.sip.communicator.impl.gui.main.chat.ChatConversationPanel+processMessage(ChatMessage,String,ProtocolProviderService,String) net.java.sip.communicator.impl.gui.main.chat.ChatHtmlUtils+createSimpleIncomingMessageTag(String,String,String,String,long,String,String,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatHtmlUtils+createSimpleOutgoingMessageTag(String,String,String,String,long,String,String,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatHtmlUtils+createAdvancedMessageHeaderTag(String,long) net.java.sip.communicator.impl.gui.main.chat.ChatHtmlUtils+createEditedAtTag(String,long) net.java.sip.communicator.impl.gui.main.chat.ChatHtmlUtils+createEditedAt(long)","java.util.Calendar+setTimeInMillis(long) java.util.Calendar+setTimeInMillis(long) java.lang.StringBuffer+StringBuffer() net.java.sip.communicator.util.GuiUtils+formatTime(int,StringBuffer) net.java.sip.communicator.util.GuiUtils+formatTime(int,StringBuffer) java.util.Calendar+get(int) java.util.Calendar+get(int) java.lang.StringBuffer+append(char) java.lang.StringBuffer+append(char) net.java.sip.communicator.util.GuiUtils+formatTime(int,StringBuffer) net.java.sip.communicator.util.GuiUtils+formatTime(int,StringBuffer) java.util.Calendar+get(int) java.util.Calendar+get(int) java.lang.StringBuffer+append(char) java.lang.StringBuffer+append(char) net.java.sip.communicator.util.GuiUtils+formatTime(int,StringBuffer) net.java.sip.communicator.util.GuiUtils+formatTime(int,StringBuffer) java.util.Calendar+get(int) java.util.Calendar+get(int) java.lang.StringBuffer+toString() java.lang.StringBuffer+toString()",net.java.sip.communicator.util.GuiUtils+c1 net.java.sip.communicator.util.GuiUtils+c1 java.util.Calendar+HOUR_OF_DAY net.java.sip.communicator.util.GuiUtils+c1 java.util.Calendar+MINUTE net.java.sip.communicator.util.GuiUtils+c1 java.util.Calendar+SECOND,680,19,9,"/** 
 * Formats the time for the given date. The result format is the following: [Hour]:[Minute]:[Second]. For example: 12:25:30.
 * @param time the date to format
 * @return the formatted hour string
 */
","/**
     * Formats the time for the given date. The result format is the following:
     * [Hour]:[Minute]:[Second]. For example: 12:25:30.
     * @param time the date to format
     * @return the formatted hour string
     */
    public static String formatTime(long time)
    {
        c1.setTimeInMillis(time);

        StringBuffer timeStrBuf = new StringBuffer();

        GuiUtils.formatTime(c1.get(Calendar.HOUR_OF_DAY), timeStrBuf);
        timeStrBuf.append(':');
        GuiUtils.formatTime(c1.get(Calendar.MINUTE), timeStrBuf);
        timeStrBuf.append(':');
        GuiUtils.formatTime(c1.get(Calendar.SECOND), timeStrBuf);
        return timeStrBuf.toString();
    }",False,False,"The function formats a given time (in milliseconds) into a string representation of the hour, minute, and second in the format [Hour]:[Minute]:[Second].",False,"This code defines a method called ""formatTime"" that takes a long value representing a date and formats it into a string in the format ""Hour:Minute:Second"". It uses the Calendar class to extract the hour, minute, and second values from the given date and appends them to a StringBuffer before returning the formatted string."
23,"formatTime(Date,Date)",format time start date end date formats the time period duration for the given start date and end date the result format is the following hour minute second for example 12 25 30 param start date the start date param end date the end date return the formatted hour string ,Method,,"net.java.sip.communicator.impl.callhistory.CallHistorySourceContact+CallHistorySourceContact(CallHistoryContactSource,CallRecord)","net.java.sip.communicator.util.GuiUtils+formatTime(long,long) net.java.sip.communicator.util.GuiUtils+formatTime(long,long) java.util.Date+getTime() java.util.Date+getTime() java.util.Date+getTime() java.util.Date+getTime()",,450,12,9,"/** 
 * Formats the time period duration for the given start date and end date. The result format is the following: [Hour]:[Minute]:[Second]. For example: 12:25:30. 
 * @param startDate the start date
 * @param endDate the end date
 * @return the formatted hour string
 */
","/**
     * Formats the time period duration for the given start date and end date.
     * The result format is the following:
     * [Hour]:[Minute]:[Second]. For example: 12:25:30. 
     * @param startDate the start date
     * @param endDate the end date
     * @return the formatted hour string
     */
    public static String formatTime(Date startDate, Date endDate)
    {
        return formatTime(startDate.getTime(), endDate.getTime());
    }",False,False,The function formats the duration between a start date and an end date into a string in the format [Hour]:[Minute]:[Second].,False,"This code defines a method called ""formatTime"" that takes in two Date objects representing a start and end date. It returns a formatted string representing the duration between the two dates in the format [Hour]:[Minute]:[Second]."
24,"formatTime(long,long)",format time start end formats the time period duration for the given start date and end date the result format is the following hour minute second for example 12 25 30 param start the start date in milliseconds param end the end date in milliseconds return the formatted hour string ,Method,"formatTime(Date,Date)","net.java.sip.communicator.impl.gui.main.call.CallInfoFrame+constructPeerInfo(CallPeer,StringBuffer) net.java.sip.communicator.impl.gui.main.call.CallPanel+setCallTitle(long)","java.lang.String+format(String,Object[]) java.lang.String+format(String,Object[])",,864,25,9,"/** 
 * Formats the time period duration for the given start date and end date. The result format is the following: [Hour]:[Minute]:[Second]. For example: 12:25:30.
 * @param start the start date in milliseconds
 * @param end the end date in milliseconds
 * @return the formatted hour string
 */
","/**
     * Formats the time period duration for the given start date and end date.
     * The result format is the following:
     * [Hour]:[Minute]:[Second]. For example: 12:25:30.
     * @param start the start date in milliseconds
     * @param end the end date in milliseconds
     * @return the formatted hour string
     */
    public static String formatTime(long start, long end)
    {
        long duration = end - start;

        long milPerSec = 1000;
        long milPerMin = milPerSec*60;
        long milPerHour = milPerMin*60;

        long hours = duration / milPerHour;
        long minutes
            = ( duration - hours*milPerHour ) / milPerMin;
        long seconds
            = ( duration - hours*milPerHour - minutes*milPerMin)
                    / milPerSec;

        return String.format(""%02d:%02d:%02d"", hours, minutes, seconds);
    }",False,False,"The function formats the duration between two given dates into a string in the format [Hour]:[Minute]:[Second]. It calculates the hours, minutes, and seconds based on the difference between the start and end dates in milliseconds.",False,"This code defines a method called `formatTime` that takes two parameters, start and end dates in milliseconds, and returns a formatted string representing the duration between the two dates in the format [Hour]:[Minute]:[Second]. The method calculates the duration in hours, minutes, and seconds and uses `String.format` to format the result."
25,processMonth(int),process month month gets the display human readable string representation of the month with the specified zero based month number param month the zero based month number return the corresponding month abbreviation ,Method,"formatDate(long,StringBuffer)",,org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.util.UtilActivator+getResources() net.java.sip.communicator.util.UtilActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String),,1232,30,10,"/** 
 * Gets the display/human-readable string representation of the month with the specified zero-based month number.
 * @param month the zero-based month number
 * @return the corresponding month abbreviation
 */
","/**
     * Gets the display/human-readable string representation of the month with
     * the specified zero-based month number.
     *
     * @param month the zero-based month number
     * @return the corresponding month abbreviation
     */
    private static String processMonth(int month)
    {
        String monthStringKey;

        switch (month)
        {
        case 0: monthStringKey = ""service.gui.JANUARY""; break;
        case 1: monthStringKey = ""service.gui.FEBRUARY""; break;
        case 2: monthStringKey = ""service.gui.MARCH""; break;
        case 3: monthStringKey = ""service.gui.APRIL""; break;
        case 4: monthStringKey = ""service.gui.MAY""; break;
        case 5: monthStringKey = ""service.gui.JUNE""; break;
        case 6: monthStringKey = ""service.gui.JULY""; break;
        case 7: monthStringKey = ""service.gui.AUGUST""; break;
        case 8: monthStringKey = ""service.gui.SEPTEMBER""; break;
        case 9: monthStringKey = ""service.gui.OCTOBER""; break;
        case 10: monthStringKey = ""service.gui.NOVEMBER""; break;
        case 11: monthStringKey = ""service.gui.DECEMBER""; break;
        default: return """";
        }

        return UtilActivator.getResources().getI18NString(monthStringKey);
    }",False,False,This method takes a zero-based month number as input and returns the corresponding month abbreviation as a display/human-readable string.,False,This code defines a private static method called processMonth that takes a zero-based month number as input and returns the corresponding month abbreviation as a string. It uses a switch statement to map the month number to the corresponding string key and then retrieves the localized month abbreviation using the key.
26,"formatTime(int,StringBuffer)",format time time time str buf adds a 0 in the beginning of one digit numbers param time the time parameter could be hours minutes or seconds param time str buf the string buffer to which the formattedminutes string is to be appended ,Method,"formatDate(long,StringBuffer) formatDate(long,StringBuffer) formatTime(long) formatTime(long) formatTime(long)",,java.lang.Integer+toString(int) java.lang.Integer+toString(int) java.lang.String+length() java.lang.String+length() java.lang.StringBuffer+append(char) java.lang.StringBuffer+append(char) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String),,508,15,10,"/** 
 * Adds a 0 in the beginning of one digit numbers.
 * @param time The time parameter could be hours, minutes or seconds.
 * @param timeStrBuf the <tt>StringBuffer</tt> to which the formattedminutes string is to be appended
 */
","/**
     * Adds a 0 in the beginning of one digit numbers.
     *
     * @param time The time parameter could be hours, minutes or seconds.
     * @param timeStrBuf the <tt>StringBuffer</tt> to which the formatted
     * minutes string is to be appended
     */
    private static void formatTime(int time, StringBuffer timeStrBuf)
    {
        String timeString = Integer.toString(time);

        if (timeString.length() < 2)
            timeStrBuf.append('0');
        timeStrBuf.append(timeString);
    }",False,False,This method adds a leading zero to one-digit numbers and appends the formatted time string to a StringBuffer.,False,"This code defines a method called ""formatTime"" that takes an integer parameter representing time and a StringBuffer to which the formatted time string will be appended. The method adds a leading zero to one-digit numbers before appending them to the StringBuffer."
27,formatSeconds(long),format seconds millis formats the given long to x hour y min z sec param millis the time in milliseconds to format return the formatted seconds ,Method,,net.java.sip.communicator.impl.gui.main.chat.filetransfer.FileTransferConversationComponent+progressChanged(FileTransferProgressEvent),java.lang.StringBuffer+StringBuffer(int) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(char) java.lang.StringBuffer+append(char) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(long) java.lang.StringBuffer+append(long) java.lang.StringBuffer+append(String) java.lang.String+trim() java.lang.StringBuffer+toString() java.lang.StringBuffer+toString() java.lang.String+trim(),net.java.sip.communicator.util.GuiUtils+MILLIS_PER_DAY net.java.sip.communicator.util.GuiUtils+MILLIS_PER_HOUR net.java.sip.communicator.util.GuiUtils+MILLIS_PER_MINUTE net.java.sip.communicator.util.GuiUtils+MILLIS_PER_SECOND,1028,36,9,"/** 
 * Formats the given long to X hour, Y min, Z sec.
 * @param millis the time in milliseconds to format
 * @return the formatted seconds
 */
","/**
     * Formats the given long to X hour, Y min, Z sec.
     * @param millis the time in milliseconds to format
     * @return the formatted seconds
     */
    public static String formatSeconds(long millis)
    {
        long[] values = new long[4];
        values[0] = millis / MILLIS_PER_DAY;
        values[1] = (millis / MILLIS_PER_HOUR) % 24;
        values[2] = (millis / MILLIS_PER_MINUTE) % 60;
        values[3] = (millis / MILLIS_PER_SECOND) % 60;

        String[] fields = { "" d "", "" h "", "" min "", "" sec"" };

        StringBuffer buf = new StringBuffer(64);
        boolean valueOutput = false;

        for (int i = 0; i < 4; i++)
        {
            long value = values[i];

            if (value == 0)
            {
                if (valueOutput)
                    buf.append('0').append(fields[i]);
            }
            else
            {
                valueOutput = true;
                buf.append(value).append(fields[i]);
            }
        }

        return buf.toString().trim();
    }",False,False,"This method formats a given time in milliseconds into hours, minutes, and seconds. It returns a string in the format ""X hour, Y min, Z sec"".",True,"This code defines a method called ""formatSeconds"" that takes a long value representing time in milliseconds and returns a formatted string representing the time in hours, minutes, and seconds. The method calculates the values for each unit of time (days, hours, minutes, and seconds) and appends them to a StringBuffer, which is then converted to a string and returned."
28,getWindows(),get windows returns an array of all code window s both owned and ownerless created by this application if called from an applet the array includes only the code window s accessible by that applet warning this method may return system created windows such as a print dialog applications should not assume the existence of these dialogs nor should an application assume anything about these dialogs such as component positions layout manager s or serialization return returns an array of all code window s ,Method,,,"java.lang.Class+getMethod(String,Class[]) java.lang.Class+getMethod(String,Class[]) java.lang.reflect.Method+invoke(Object,Object[]) java.lang.reflect.Method+invoke(Object,Object[]) java.util.List+toArray(T[]) java.util.List+toArray(T[]) java.util.List+size() java.util.List+size()",net.java.sip.communicator.util.GuiUtils+WINDOW_LIST net.java.sip.communicator.util.GuiUtils+WINDOW_LIST net.java.sip.communicator.util.GuiUtils+WINDOW_LIST net.java.sip.communicator.util.GuiUtils+WINDOW_LIST,2189,71,9,"/** 
 * Returns an array of all  {@code Window}s, both owned and ownerless, created by this application. If called from an applet, the array includes only the  {@code Window}s accessible by that applet. <p> <b>Warning:</b> this method may return system created windows, such as a print dialog. Applications should not assume the existence of these dialogs, nor should an application assume anything about these dialogs such as component positions, <code>LayoutManager</code>s or serialization.
 * @return Returns an array of all {@code Window}s.
 */
","/**
     * Returns an array of all {@code Window}s, both owned and ownerless,
     * created by this application.
     * If called from an applet, the array includes only the {@code Window}s
     * accessible by that applet.
     * <p>
     * <b>Warning:</b> this method may return system created windows, such
     * as a print dialog. Applications should not assume the existence of
     * these dialogs, nor should an application assume anything about these
     * dialogs such as component positions, <code>LayoutManager</code>s
     * or serialization.
     *
     * @return Returns an array of all {@code Window}s.
     */
    public static Window[] getWindows()
    {
        if (WINDOW_LIST == null)
        {
            Method Window_getWindows = null;

            try
            {
                Window_getWindows = Window.class.getMethod(""getWindows"");
            }
            catch (NoSuchMethodException nsme)
            {
                /* Ignore it because we cannot really do anything useful. */
            }
            catch (SecurityException se)
            {
            }

            Object windows = null;

            if (Window_getWindows != null)
            {
                try
                {
                    windows = Window_getWindows.invoke(null);
                }
                catch (ExceptionInInitializerError eiie)
                {
                    /* Ignore it because we cannot really do anything useful. */
                }
                catch (IllegalAccessException iae)
                {
                }
                catch (IllegalArgumentException iae)
                {
                }
                catch (InvocationTargetException ite)
                {
                }
                catch (NullPointerException npe)
                {
                }
            }

            return
                (windows instanceof Window[])
                    ? (Window[]) windows
                    : new Window[0];
        }
        else
        {
            synchronized (WINDOW_LIST)
            {
                return WINDOW_LIST.toArray(new Window[WINDOW_LIST.size()]);
            }
        }
    }",True,True,"This method returns an array of all windows created by the application, including both owned and ownerless windows. If called from an applet, it only includes windows accessible by that applet. It may also return system created windows, but applications should not assume anything about these windows.",False,"This code defines a method called ""getWindows"" that returns an array of all windows created by the application. It uses reflection to access the ""getWindows"" method of the Window class, and if successful, invokes it to retrieve the windows. If reflection fails or the method returns null, it returns an empty array."
29,addWindow(Window),add window w adds a link window into window list param w link window to be added ,Method,,net.java.sip.communicator.util.swing.SIPCommDialog+init() net.java.sip.communicator.util.swing.SIPCommFrame+SIPCommFrame(),java.util.List+contains(Object) java.util.List+contains(Object) java.util.List+add(E) java.util.List+add(E),net.java.sip.communicator.util.GuiUtils+WINDOW_LIST net.java.sip.communicator.util.GuiUtils+WINDOW_LIST net.java.sip.communicator.util.GuiUtils+WINDOW_LIST net.java.sip.communicator.util.GuiUtils+WINDOW_LIST,362,15,9,"/** 
 * Adds a  {@link Window} into window list
 * @param w {@link Window} to be added.
 */
","/**
     * Adds a {@link Window} into window list
     * @param w {@link Window} to be added.
     */
    public static void addWindow(Window w)
    {
        if (WINDOW_LIST != null)
        {
            synchronized (WINDOW_LIST)
            {
                if (!WINDOW_LIST.contains(w))
                    WINDOW_LIST.add(w);
            }
        }
    }",True,True,"This method adds a Window object to a window list, ensuring that the list is not null and that the Window object is not already in the list.",False,"This code defines a static method called ""addWindow"" that adds a given Window object to a window list. The method checks if the window list is not null, and if so, synchronizes the addition of the window to the list to ensure thread safety."
30,removeWindow(Window),remove window w removes a link window into window list param w link window to be removed ,Method,,,java.util.List+remove(Object) java.util.List+remove(Object),net.java.sip.communicator.util.GuiUtils+WINDOW_LIST net.java.sip.communicator.util.GuiUtils+WINDOW_LIST net.java.sip.communicator.util.GuiUtils+WINDOW_LIST,323,14,9,"/** 
 * Removes a  {@link Window} into window list
 * @param w {@link Window} to be removed.
 */
","/**
     * Removes a {@link Window} into window list
     * @param w {@link Window} to be removed.
     */
    public static void removeWindow(Window w)
    {
        if (WINDOW_LIST != null)
        {
            synchronized (WINDOW_LIST)
            {
                WINDOW_LIST.remove(w);
            }
        }
    }",False,True,This method serves to remove a Window from a window list. It takes a Window object as a parameter and removes it from the list if it exists.,False,"This code defines a static method called ""removeWindow"" that removes a given Window object from a window list. The method ensures thread safety by synchronizing access to the window list before removing the window."
31,updateComponentTreeUI(Component),update component tree ui c a simple minded look and feel change ask each node in the tree to update ui that is to initialize its ui property with the current look and feel param c ui component ,Method,updateComponentTreeUI0(Component),,net.java.sip.communicator.util.GuiUtils+updateComponentTreeUI0(Component) net.java.sip.communicator.util.GuiUtils+updateComponentTreeUI0(Component) java.awt.Component+invalidate() java.awt.Component+invalidate() java.awt.Component+validate() java.awt.Component+validate() java.awt.Component+repaint() java.awt.Component+repaint(),,406,14,9,"/** 
 * A simple minded look and feel change: ask each node in the tree to <code>updateUI()</code> -- that is, to initialize its UI property with the current look and feel.
 * @param c UI component.
 */
","/**
     * A simple minded look and feel change: ask each node in the tree
     * to <code>updateUI()</code> -- that is, to initialize its UI property
     * with the current look and feel.
     *
     * @param c UI component.
     */
    public static void updateComponentTreeUI(Component c)
    {
        updateComponentTreeUI0(c);
        c.invalidate();
        c.validate();
        c.repaint();
    }",False,True,"This method updates the UI of a given component and its children by calling the updateUI() method on each node in the component tree. It then invalidates, validates, and repaints the component.",False,"The given code is a method called ""updateComponentTreeUI"" that updates the UI property of a given UI component and its children by calling the ""updateUI()"" method on each node in the component tree. After updating the UI, the component is invalidated, validated, and repainted to reflect the changes."
32,"getComponentIndex(Component,Container)",get component index c container returns the index of the given component in the given container param c the component to look for param container the parent container where this component is added return the index of the component in the container or 1 if no suchcomponent is contained in the container ,Method,,,java.awt.Container+getComponentCount() java.awt.Container+getComponentCount() java.lang.Object+equals(Object) java.awt.Container+getComponent(int) java.awt.Container+getComponent(int) java.lang.Object+equals(Object),,614,17,9,"/** 
 * Returns the index of the given component in the given container.
 * @param c the Component to look for
 * @param container the parent container, where this component is added
 * @return the index of the component in the container or -1 if no suchcomponent is contained in the container
 */
","/**
     * Returns the index of the given component in the given container.
     *
     * @param c the Component to look for
     * @param container the parent container, where this component is added
     * @return the index of the component in the container or -1 if no such
     * component is contained in the container
     */
    public static int getComponentIndex(Component c, Container container)
    {
        for (int i = 0, count = container.getComponentCount(); i < count; i++)
        {
            if (container.getComponent(i).equals(c))
                return i;
        }
        return -1;
    }",True,True,"This method returns the index of a given component in a given container. If the component is not found in the container, it returns -1.",False,"This code defines a method called ""getComponentIndex"" that takes a Component and a Container as input parameters. It iterates through the components in the container and returns the index of the given component if it is found, otherwise it returns -1."
33,updateComponentTreeUI0(Component),update component tree u i0 c repaints ui tree recursively param c ui component ,Method,updateComponentTreeUI(Component) updateComponentTreeUI0(Component),,java.awt.Container+invalidate() java.awt.Container+invalidate() java.awt.Container+validate() java.awt.Container+validate() java.awt.Component+repaint() java.awt.Component+repaint() javax.swing.JComponent+getComponentPopupMenu() javax.swing.JComponent+getComponentPopupMenu() javax.swing.JPopupMenu+isVisible() javax.swing.JPopupMenu+isVisible() javax.swing.JPopupMenu+getInvoker() javax.swing.JPopupMenu+getInvoker() net.java.sip.communicator.util.GuiUtils+updateComponentTreeUI(Component) net.java.sip.communicator.util.GuiUtils+updateComponentTreeUI(Component) javax.swing.JMenu+getMenuComponents() javax.swing.JMenu+getMenuComponents() java.awt.Container+getComponents() java.awt.Container+getComponents() net.java.sip.communicator.util.GuiUtils+updateComponentTreeUI0(Component) net.java.sip.communicator.util.GuiUtils+updateComponentTreeUI0(Component),,968,33,10,"/** 
 * Repaints UI tree recursively.
 * @param c UI component.
 */
","/**
     * Repaints UI tree recursively.
     * @param c UI component.
     */
    private static void updateComponentTreeUI0(Component c)
    {
        if (c instanceof JComponent)
        {
            JComponent jc = (JComponent) c;
            jc.invalidate();
            jc.validate();
            jc.repaint();
            JPopupMenu jpm =jc.getComponentPopupMenu();
            if(jpm != null && jpm.isVisible() && jpm.getInvoker() == jc)
            {
                updateComponentTreeUI(jpm);
            }
        }
        Component[] children = null;
        if (c instanceof JMenu)
        {
            children = ((JMenu)c).getMenuComponents();
        }
        else if (c instanceof java.awt.Container)
        {
            children = ((java.awt.Container)c).getComponents();
        }
        if (children != null)
        {
            for(int i = 0; i < children.length; i++)
                updateComponentTreeUI0(children[i]);
        }
    }",True,True,"The function of this method is to recursively repaint the UI tree, starting from a given UI component. It also handles repainting of JPopupMenu components if they are visible and associated with the given UI component.",False,"The code is a private method called ""updateComponentTreeUI0"" that recursively repaints the UI tree. It takes a UI component as a parameter, invalidates, validates, and repaints the component. It also checks if the component has a popup menu and updates its UI if necessary."
34,escapeFileNameSpecialCharacters(String),escape file name special characters string replaces the characters that we must escape used for the created filename param string the string which is to have its characters escaped return a string derived from the specified id byescaping characters ,Method,,,"java.lang.String+replaceAll(String,String) java.lang.String+replaceAll(String,String)",net.java.sip.communicator.util.GuiUtils+ESCAPE_SEQUENCES net.java.sip.communicator.util.GuiUtils+ESCAPE_SEQUENCES net.java.sip.communicator.util.GuiUtils+ESCAPE_SEQUENCES,621,19,9,"/** 
 * Replaces the characters that we must escape used for the created filename.
 * @param string the <tt>String</tt> which is to have its characters escaped
 * @return a <tt>String</tt> derived from the specified <tt>id</tt> byescaping characters
 */
","/**
     * Replaces the characters that we must escape used for the created
     * filename.
     *
     * @param string the <tt>String</tt> which is to have its characters escaped
     * @return a <tt>String</tt> derived from the specified <tt>id</tt> by
     * escaping characters
     */
    public static String escapeFileNameSpecialCharacters(String string)
    {
        String resultId = string;

        for (int j = 0; j < ESCAPE_SEQUENCES.length; j++)
        {
            resultId = resultId.
                replaceAll(ESCAPE_SEQUENCES[j][0], ESCAPE_SEQUENCES[j][1]);
        }
        return resultId;
    }",False,False,This method replaces special characters in a string that are used for creating a filename. It takes a string as input and returns a new string with the special characters escaped.,False,This code defines a method called `escapeFileNameSpecialCharacters` that takes a string as input and replaces certain characters in the string with escape sequences. The method iterates over an array of escape sequences and uses the `replaceAll` method to perform the replacements. The modified string is then returned as the result.
