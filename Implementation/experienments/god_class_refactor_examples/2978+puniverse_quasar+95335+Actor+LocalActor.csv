index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,serialVersionUID,serial version uid ,Field,,,,,48,1,24,,static final long serialVersionUID = 894359345L;,False,False,,False,
2,currentActor,current actor ,Field,,,,,80,1,26,,private static final ThreadLocal<Actor> currentActor = new ThreadLocal<Actor>();,True,False,,False,
3,strand,strand ,Field,setStrand(Strand) setStrand(Strand),,,,22,1,2,,private Strand strand;,False,False,,False,
4,name,name ,Field,"Actor(String,int) setStrand(Strand)",,,,20,1,2,,private String name;,False,False,,False,
5,mailbox,mailbox ,Field,"Actor(String,int)",,,,38,1,18,,private final Mailbox<Object> mailbox;,False,True,,False,
6,lifecycleListeners,lifecycle listeners ,Field,,,,,139,1,18,,"private final Set<LifecycleListener> lifecycleListeners = Collections.newSetFromMap(new ConcurrentHashMapV8<LifecycleListener, Boolean>());",True,True,,False,
7,result,result ,Field,,,,,26,1,66,,private volatile V result;,True,True,,False,
8,exception,exception ,Field,throwIn(RuntimeException),,,,44,1,66,,private volatile RuntimeException exception;,True,True,,False,
9,deathReason,death reason ,Field,notifyDeath(Object),,,,36,1,66,,private volatile Object deathReason;,True,True,,False,
10,monitor,monitor ,Field,register(Object) unregister(Object),,,,29,1,2,,private ActorMonitor monitor;,True,True,,False,
11,flightRecorder,flight recorder ,Field,"Actor(String,int) Actor(String,int)",,,,46,1,20,,protected final FlightRecorder flightRecorder;,False,False,,False,
12,"Actor(String,int)",actor name mailbox size ,Method,,,co.paralleluniverse.strands.channels.Mailbox+create(int) co.paralleluniverse.strands.channels.Mailbox+create(int) co.paralleluniverse.common.util.Debug+isDebug() co.paralleluniverse.common.util.Debug+isDebug() co.paralleluniverse.common.util.Debug+getGlobalFlightRecorder() co.paralleluniverse.common.util.Debug+getGlobalFlightRecorder(),"co.paralleluniverse.actors.Actor<Message,V>+name co.paralleluniverse.actors.Actor+name co.paralleluniverse.actors.Actor<Message,V>+mailbox co.paralleluniverse.actors.Actor+mailbox co.paralleluniverse.actors.Actor<Message,V>+flightRecorder co.paralleluniverse.actors.Actor+flightRecorder co.paralleluniverse.actors.Actor<Message,V>+flightRecorder co.paralleluniverse.actors.Actor+flightRecorder",278,9,1,,"public Actor(String name, int mailboxSize) {
        this.name = name;
        this.mailbox = Mailbox.create(mailboxSize);

        if (Debug.isDebug())
            this.flightRecorder = Debug.getGlobalFlightRecorder();
        else
            this.flightRecorder = null;
    }",False,True,The function of this method is to create an instance of the Actor class with a specified name and mailbox size. It also initializes the flightRecorder variable based on the Debug mode.,False,"The code defines a constructor for the Actor class that takes a name and mailbox size as parameters. It creates a mailbox object with the specified size and assigns it to the instance variable. It also checks if debugging is enabled and assigns the global flight recorder to the instance variable if true, otherwise assigns null."
13,"Actor(Strand,String,int)",actor strand name mailbox size ,Method,,,co.paralleluniverse.actors.Actor+setStrand(Strand) co.paralleluniverse.actors.Actor+setStrand(Strand),,125,4,1,,"public Actor(Strand strand, String name, int mailboxSize) {
        this(name, mailboxSize);
        setStrand(strand);
    }",True,True,,False,"The code defines a constructor for the Actor class that takes a Strand object, a name, and a mailbox size as parameters. It initializes the name and mailbox size using another constructor and then sets the strand for the actor."
14,currentActor(),current actor ,Method,,,co.paralleluniverse.fibers.Fiber+currentFiber() co.paralleluniverse.fibers.Fiber+currentFiber() java.lang.ThreadLocal+get() java.lang.ThreadLocal+get() co.paralleluniverse.fibers.Fiber+getTarget() co.paralleluniverse.fibers.Fiber+getTarget(),co.paralleluniverse.actors.Actor+currentActor,355,9,9,,"public static Actor currentActor() {
        final Fiber currentFiber = Fiber.currentFiber();
        if (currentFiber == null)
            return currentActor.get();
        final SuspendableCallable target = currentFiber.getTarget();
        if (target == null || !(target instanceof Actor))
            return null;
        return (Actor) target;
    }",True,True,"This method returns the current actor associated with the current fiber. It checks if the current fiber exists and if it is an instance of an actor, and then returns the actor.",False,"The code defines a static method called `currentActor()` that returns the current actor. It first checks if the current fiber is null, and if so, it returns the current actor. If the current fiber is not null, it checks if the target is an instance of `Actor` and returns it if true, otherwise it returns null."
15,setStrand(Strand),set strand strand ,Method,"Actor(Strand,String,int) run()",,java.lang.IllegalStateException+IllegalStateException(String) co.paralleluniverse.strands.Strand+getName() co.paralleluniverse.strands.Strand+getName() co.paralleluniverse.strands.channels.Channel+setStrand(Strand) co.paralleluniverse.strands.channels.Channel+setStrand(Strand),"co.paralleluniverse.actors.Actor<Message,V>+strand co.paralleluniverse.actors.Actor+strand co.paralleluniverse.actors.Actor<Message,V>+strand co.paralleluniverse.actors.Actor+strand co.paralleluniverse.actors.Actor<Message,V>+name co.paralleluniverse.actors.Actor+name co.paralleluniverse.actors.Actor+name co.paralleluniverse.actors.Actor+name co.paralleluniverse.actors.Actor+mailbox",304,8,17,,"@Override
    public final void setStrand(Strand strand) {
        if (this.strand != null)
            throw new IllegalStateException(""Strand already set to "" + strand);
        this.strand = strand;
        this.name = (name != null ? name : strand.getName());
        mailbox.setStrand(strand);
    }",True,True,"This method sets the strand of an object. If the strand is already set, it throws an exception. It also sets the name of the object based on the strand's name and updates the mailbox's strand.",False,"This code defines a method called `setStrand` which sets the `strand` property of an object. It throws an exception if the `strand` property is already set, and then sets the `name` property based on the `strand` object. Finally, it calls the `setStrand` method of a `mailbox` object, passing in the `strand` object."
16,getStrand(),get strand ,Method,,,,co.paralleluniverse.actors.Actor+strand,70,4,1,,"@Override
    public Strand getStrand() {
        return strand;
    }",True,True,"This method serves to return the value of the ""strand"" variable.",False,"The code snippet defines a method named ""getStrand"" that returns a value of type ""Strand"". It overrides an existing method, indicating that it provides a specific implementation for the method in a superclass or interface."
17,toString(),to string ,Method,,,java.lang.Integer+toHexString(int) java.lang.Integer+toHexString(int) java.lang.System+identityHashCode(Object) java.lang.System+identityHashCode(Object),co.paralleluniverse.actors.Actor+name co.paralleluniverse.actors.Actor+name co.paralleluniverse.actors.Actor+strand,176,4,1,,"@Override
    public String toString() {
        return ""Actor@"" + (name != null ? name : Integer.toHexString(System.identityHashCode(this))) + ""[owner: "" + strand + ']';
    }",False,False,This method overrides the default toString() method and returns a string representation of an Actor object. It includes the actor's name and owner strand.,False,"The code overrides the `toString()` method to provide a summary description of an `Actor` object. It returns a string that includes the object's name (if not null) or its unique identifier, along with the owner strand of the actor."
18,getQueueLength(),get queue length ,Method,,co.paralleluniverse.actors.JMXActorMonitor+getQueueLength(),co.paralleluniverse.strands.channels.Channel+getQueueLength() co.paralleluniverse.strands.channels.Channel+getQueueLength(),co.paralleluniverse.actors.Actor+mailbox,76,3,1,,"public int getQueueLength() {
        return mailbox.getQueueLength();
    }",True,True,This method returns the length of the queue in the mailbox.,True,"The code defines a method named ""getQueueLength"" that returns an integer value. This method retrieves the length of a queue stored in a mailbox object and returns it as the result."
19,newActorMonitor(String),new actor monitor name ,Method,,"co.paralleluniverse.actors.ActorRegistry+register(Object,Actor)",co.paralleluniverse.actors.JMXActorMonitor+JMXActorMonitor(String),,98,3,8,,"static ActorMonitor newActorMonitor(String name) {
        return new JMXActorMonitor(name);
    }",True,True,"This method creates a new instance of the ActorMonitor interface, using the JMXActorMonitor implementation, and returns it.",False,"The code defines a static method named ""newActorMonitor"" that takes a string parameter ""name"" and returns an instance of the ""ActorMonitor"" interface. The implementation of the interface is provided by the ""JMXActorMonitor"" class."
20,randtag(),randtag ,Method,,,"java.math.BigInteger+BigInteger(int,Random) java.util.concurrent.ThreadLocalRandom+current() java.util.concurrent.ThreadLocalRandom+current()",,102,3,9,,"public static Object randtag() {
        return new BigInteger(80, ThreadLocalRandom.current());
    }",False,True,The function generates a random tag by creating a new BigInteger object with a specified bit length and using the current thread's random number generator.,False,"The code defines a method named ""randtag"" that generates a random BigInteger object with a bit length of 80 using the ThreadLocalRandom class. The method returns the generated BigInteger object."
21,mailbox(),mailbox ,Method,,"co.paralleluniverse.actors.BasicActor+receive(long,TimeUnit,MessageProcessor<Message>)",,co.paralleluniverse.actors.Actor+mailbox,57,3,0,,"Mailbox<Object> mailbox() {
        return mailbox;
    }",False,False,The function of the given method is to return the mailbox object.,False,"The code defines a method named ""mailbox"" that returns an object of type ""Mailbox"" containing objects of any type. The method does not take any parameters and simply returns the ""mailbox"" object."
22,getMailbox(),get mailbox ,Method,,,,co.paralleluniverse.actors.Actor+mailbox,91,3,1,,"public SendChannel<Message> getMailbox() {
        return (Channel<Message>) mailbox;
    }",False,False,"The method ""getMailbox"" returns the mailbox as a SendChannel of type Message.",False,"The code defines a method named ""getMailbox"" that returns a SendChannel object. It casts the ""mailbox"" object to a Channel of type Message and returns it."
23,receive(),receive ,Method,"receive(long,TimeUnit)",co.paralleluniverse.actors.ActorTest+doRun() co.paralleluniverse.actors.ActorTest+doRun() co.paralleluniverse.actors.ActorTest+doRun() co.paralleluniverse.actors.ActorTest+doRun() co.paralleluniverse.actors.ActorTest+doRun() co.paralleluniverse.actors.ActorTest+doRun() co.paralleluniverse.actors.ActorTest+doRun() co.paralleluniverse.actors.RingBenchmark+doRun() co.paralleluniverse.actors.RingBenchmark+doRun(),"co.paralleluniverse.actors.Actor+checkThrownIn() co.paralleluniverse.actors.Actor+checkThrownIn() co.paralleluniverse.actors.Actor+record(int,String,String,String,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object) co.paralleluniverse.strands.channels.Channel+receive() co.paralleluniverse.strands.channels.Channel+receive() co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+monitorAddMessage() co.paralleluniverse.actors.Actor+monitorAddMessage() co.paralleluniverse.actors.Actor+handleLifecycleMessage(LifecycleMessage) co.paralleluniverse.actors.Actor+handleLifecycleMessage(LifecycleMessage)",co.paralleluniverse.actors.Actor+mailbox,526,13,4,,"protected Message receive() throws SuspendExecution, InterruptedException {
        for (;;) {
            checkThrownIn();
            record(1, ""Actor"", ""receive"", ""%s waiting for a message"", this);
            Object m = mailbox.receive();
            record(1, ""Actor"", ""receive"", ""Received %s <- %s"", this, m);
            monitorAddMessage();
            if (m instanceof LifecycleMessage)
                handleLifecycleMessage((LifecycleMessage) m);
            else
                return (Message) m;
        }
    }",True,True,The function of this method is to receive messages in a loop until a non-LifecycleMessage is received. It also handles any thrown exceptions and records the received messages.,True,"The `receive()` method is a protected method that waits for a message to be received from the mailbox. It checks for any thrown exceptions, records the waiting and receiving of messages, and handles lifecycle messages differently from regular messages."
24,"receive(long,TimeUnit)",receive timeout unit ,Method,,co.paralleluniverse.actors.ActorTest+doRun() co.paralleluniverse.actors.ActorTest+doRun() co.paralleluniverse.actors.ActorTest+doRun() co.paralleluniverse.actors.ActorTest+doRun(),"co.paralleluniverse.actors.Actor+receive() co.paralleluniverse.actors.Actor+receive() java.lang.System+nanoTime() java.lang.System+nanoTime() java.util.concurrent.TimeUnit+toNanos(long) java.util.concurrent.TimeUnit+toNanos(long) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) java.util.concurrent.TimeUnit+convert(long,TimeUnit) java.util.concurrent.TimeUnit+convert(long,TimeUnit) co.paralleluniverse.actors.Actor+checkThrownIn() co.paralleluniverse.actors.Actor+checkThrownIn() co.paralleluniverse.strands.channels.Channel+receive(long,TimeUnit) co.paralleluniverse.strands.channels.Channel+receive(long,TimeUnit) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+monitorAddMessage() co.paralleluniverse.actors.Actor+monitorAddMessage() co.paralleluniverse.actors.Actor+handleLifecycleMessage(LifecycleMessage) co.paralleluniverse.actors.Actor+handleLifecycleMessage(LifecycleMessage) java.lang.System+nanoTime() java.lang.System+nanoTime() java.util.concurrent.TimeUnit+toNanos(long) java.util.concurrent.TimeUnit+toNanos(long) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object)",co.paralleluniverse.actors.Actor+flightRecorder java.util.concurrent.TimeUnit+MILLISECONDS java.util.concurrent.TimeUnit+NANOSECONDS co.paralleluniverse.actors.Actor+mailbox java.util.concurrent.TimeUnit+NANOSECONDS,1177,31,4,,"protected Message receive(long timeout, TimeUnit unit) throws SuspendExecution, InterruptedException {
        if (timeout <= 0 || unit == null)
            return receive();

        final long start = System.nanoTime();
        long now;
        long left = unit.toNanos(timeout);

        for (;;) {
            if (flightRecorder != null)
                record(1, ""Actor"", ""receive"", ""%s waiting for a message. millis left: "", this, TimeUnit.MILLISECONDS.convert(left, TimeUnit.NANOSECONDS));
            checkThrownIn();
            Object m = mailbox.receive(left, TimeUnit.NANOSECONDS);
            if(m != null) {
                record(1, ""Actor"", ""receive"", ""Received %s <- %s"", this, m);
                monitorAddMessage();
            }
            
            if (m instanceof LifecycleMessage)
                handleLifecycleMessage((LifecycleMessage) m);
            else
                return (Message) m;

            now = System.nanoTime();
            left = start + unit.toNanos(timeout) - now;
            if (left <= 0) {
                record(1, ""Actor"", ""receive"", ""%s timed out."", this);
                return null;
            }
        }
    }",True,True,"This method is used to receive a message from a mailbox with a specified timeout. If the timeout is reached, it returns null. If a message is received, it checks if it is a LifecycleMessage and handles it accordingly. Otherwise, it returns the received message.",True,"The `receive` method is used to receive messages in an actor. It waits for a message to arrive within a specified timeout period, and if a message is received, it handles any lifecycle messages and returns the received message. If the timeout period expires, it returns null."
25,tryReceive(),try receive ,Method,,,"co.paralleluniverse.actors.Actor+checkThrownIn() co.paralleluniverse.actors.Actor+checkThrownIn() co.paralleluniverse.strands.channels.Channel+tryReceive() co.paralleluniverse.strands.channels.Channel+tryReceive() co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+monitorAddMessage() co.paralleluniverse.actors.Actor+monitorAddMessage() co.paralleluniverse.actors.Actor+handleLifecycleMessage(LifecycleMessage) co.paralleluniverse.actors.Actor+handleLifecycleMessage(LifecycleMessage)",co.paralleluniverse.actors.Actor+mailbox,468,14,4,,"protected Message tryReceive() {
        for (;;) {
            checkThrownIn();
            Object m = mailbox.tryReceive();
            if (m == null)
                return null;
            record(1, ""Actor"", ""tryReceive"", ""Received %s <- %s"", this, m);
            monitorAddMessage();
            if (m instanceof LifecycleMessage)
                handleLifecycleMessage((LifecycleMessage) m);
            else
                return (Message) m;
        }
    }",True,True,"The function of the tryReceive() method is to continuously check for incoming messages in the mailbox. It returns the received message if it is not a LifecycleMessage, otherwise it handles the LifecycleMessage.",True,"The `tryReceive()` method is a protected method that continuously checks for messages in the mailbox. If a message is found, it is returned. If the message is a `LifecycleMessage`, it is handled accordingly. The method also includes logging and monitoring functionality."
26,send(Message),send message ,Method,,co.paralleluniverse.actors.ActorTest+doRun() co.paralleluniverse.actors.ActorTest+doRun() co.paralleluniverse.actors.RingBenchmark+doRun() co.paralleluniverse.actors.RingBenchmark+doRun() co.paralleluniverse.actors.RingBenchmark+doRun(),"co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.strands.channels.Channel+isOwnerAlive() co.paralleluniverse.strands.channels.Channel+isOwnerAlive() co.paralleluniverse.strands.channels.Channel+send(Message) co.paralleluniverse.strands.channels.Channel+send(Message) co.paralleluniverse.actors.Actor+record(int,String,String,String) co.paralleluniverse.actors.Actor+record(int,String,String,String) co.paralleluniverse.actors.Actor+throwIn(RuntimeException) co.paralleluniverse.actors.Actor+throwIn(RuntimeException)",co.paralleluniverse.actors.Actor+mailbox co.paralleluniverse.actors.Actor+mailbox,394,11,1,,"public void send(Message message) {
        try {
            record(1, ""Actor"", ""send"", ""Sending %s -> %s"", message, this);
            if (mailbox.isOwnerAlive())
                mailbox.send(message);
            else
                record(1, ""Actor"", ""send"", ""Message dropped. Owner not alive."");
        } catch (QueueCapacityExceededException e) {
            throwIn(e);
        }
    }",False,False,"The function of this method is to send a message to a mailbox. It first records the sending of the message, then checks if the mailbox's owner is alive. If the owner is alive, it sends the message to the mailbox. If the owner is not alive, it records that the message was dropped. If the mailbox's queue capacity is exceeded, it throws a QueueCapacityExceededException.",True,"The code defines a method called ""send"" that takes a ""Message"" object as a parameter. It tries to record the action of sending the message, checks if the mailbox owner is alive, and sends the message through the mailbox. If the mailbox owner is not alive, it records that the message was dropped. If a QueueCapacityExceededException is caught, it throws the exception."
27,sendSync(Message),send sync message ,Method,,co.paralleluniverse.actors.ActorTest+doRun(),"co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.strands.channels.Channel+isOwnerAlive() co.paralleluniverse.strands.channels.Channel+isOwnerAlive() co.paralleluniverse.strands.channels.Channel+sendSync(Message) co.paralleluniverse.strands.channels.Channel+sendSync(Message) co.paralleluniverse.actors.Actor+record(int,String,String,String) co.paralleluniverse.actors.Actor+record(int,String,String,String) co.paralleluniverse.actors.Actor+throwIn(RuntimeException) co.paralleluniverse.actors.Actor+throwIn(RuntimeException)",co.paralleluniverse.actors.Actor+mailbox co.paralleluniverse.actors.Actor+mailbox,415,11,1,,"public void sendSync(Message message) {
        try {
            record(1, ""Actor"", ""sendSync"", ""Sending sync %s -> %s"", message, this);
            if (mailbox.isOwnerAlive())
                mailbox.sendSync(message);
            else
                record(1, ""Actor"", ""sendSync"", ""Message dropped. Owner not alive."");
        } catch (QueueCapacityExceededException e) {
            throwIn(e);
        }
    }",False,False,"The function of the method is to send a synchronous message. It records the action of sending the message and checks if the mailbox owner is alive. If the owner is alive, it sends the message through the mailbox. If the owner is not alive, it records that the message is dropped.",True,"The `sendSync` method is responsible for sending a message synchronously to an actor. It first checks if the owner of the mailbox is alive, and if so, it sends the message. If the owner is not alive, the method records that the message was dropped. If a `QueueCapacityExceededException` is caught, it is rethrown."
28,writeReplace(),write replace ,Method,,,java.lang.UnsupportedOperationException+UnsupportedOperationException(),,171,4,4,,"protected Object writeReplace() throws java.io.ObjectStreamException {
        //return new SerializedActor(this);
        throw new UnsupportedOperationException();
    }",False,True,The function of this method is to provide a replacement object for serialization. It throws an exception to indicate that serialization is not supported.,False,"The code contains a method named ""writeReplace"" that is protected and returns an Object. It throws an UnsupportedOperationException and is used for serialization purposes, possibly to replace the current object with a serialized version."
29,SerializedActor,serialized actor ,MemberClass,,,co.paralleluniverse.actors.Actor.SerializedActor+SerializedActor(Actor) co.paralleluniverse.actors.Actor.SerializedActor+SerializedActor() co.paralleluniverse.actors.Actor.SerializedActor+readResolve() java.lang.UnsupportedOperationException+UnsupportedOperationException(),co.paralleluniverse.actors.Actor.SerializedActor+serialVersionUID co.paralleluniverse.actors.Actor.SerializedActor+actor co.paralleluniverse.actors.Actor.SerializedActor+actor,481,16,12,,"protected static class SerializedActor implements java.io.Serializable {
        static final long serialVersionUID = 894359345L;
        private Actor actor;

        public SerializedActor(Actor actor) {
            this.actor = actor;
        }

        public SerializedActor() {
        }

        protected Object readResolve() throws java.io.ObjectStreamException {
            // return new Actor(...);
            throw new UnsupportedOperationException();
        }
    }",False,True,,False,
30,start(),start ,Method,,,"co.paralleluniverse.actors.Actor+record(int,String,String,String,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object) co.paralleluniverse.strands.Strand+start() co.paralleluniverse.strands.Strand+start()",co.paralleluniverse.actors.Actor+strand,142,5,0,,"Actor<Message, V> start() {
        record(1, ""Actor"", ""start"", ""Starting actor %s"", this);
        strand.start();
        return this;
    }",False,True,"The function of the ""start"" method is to start the actor by recording a message, starting the strand, and returning the actor itself.",False,"The `start()` method is a function that starts an actor by recording a log message, starting a strand (a unit of execution), and returning the actor itself."
31,get(),get ,Method,,,co.paralleluniverse.fibers.Fiber+get() co.paralleluniverse.fibers.Fiber+get() co.paralleluniverse.strands.Strand+join() co.paralleluniverse.strands.Strand+join(),co.paralleluniverse.actors.Actor+strand co.paralleluniverse.actors.Actor+strand co.paralleluniverse.actors.Actor+strand co.paralleluniverse.actors.Actor+result,246,9,1,,"@Override
    public V get() throws InterruptedException, ExecutionException {
        if (strand instanceof Fiber)
            return ((Fiber<V>) strand).get();
        else {
            strand.join();
            return result;
        }
    }",True,True,"This method returns the result of a computation. If the strand is a Fiber, it returns the result of the Fiber's computation. Otherwise, it waits for the strand to complete and returns the result.",False,"This code is a method that returns the result of a computation. If the strand is a Fiber, it calls the get() method on the strand and returns the result. Otherwise, it waits for the strand to complete and then returns the result."
32,"get(long,TimeUnit)",get timeout unit ,Method,,,"co.paralleluniverse.fibers.Fiber+get(long,TimeUnit) co.paralleluniverse.fibers.Fiber+get(long,TimeUnit) co.paralleluniverse.strands.Strand+join(long,TimeUnit) co.paralleluniverse.strands.Strand+join(long,TimeUnit)",co.paralleluniverse.actors.Actor+strand co.paralleluniverse.actors.Actor+strand co.paralleluniverse.actors.Actor+strand co.paralleluniverse.actors.Actor+result,317,9,1,,"@Override
    public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
        if (strand instanceof Fiber)
            return ((Fiber<V>) strand).get(timeout, unit);
        else {
            strand.join(timeout, unit);
            return result;
        }
    }",True,True,"This method is used to retrieve the result of a computation, with an optional timeout. If the computation is a Fiber, it calls the get method on the Fiber. Otherwise, it waits for the computation to complete and returns the result.",False,"This code is a method that retrieves the result of a computation. If the strand is a Fiber, it calls the get method on the Fiber with a specified timeout. Otherwise, it waits for the strand to complete within the given timeout and returns the result."
33,join(),join ,Method,,,co.paralleluniverse.strands.Strand+join() co.paralleluniverse.strands.Strand+join(),co.paralleluniverse.actors.Actor+strand,111,4,1,,"@Override
    public void join() throws ExecutionException, InterruptedException {
        strand.join();
    }",True,True,"This method overrides the ""join"" method from the superclass. It waits for the completion of the ""strand"" object and throws exceptions if there are any errors.",False,"The given code snippet is a method named ""join"" that overrides a method from a superclass or interface. It throws two exceptions, ExecutionException and InterruptedException. The method calls the ""join"" method on a variable named ""strand""."
34,"join(long,TimeUnit)",join timeout unit ,Method,,,"co.paralleluniverse.strands.Strand+join(long,TimeUnit) co.paralleluniverse.strands.Strand+join(long,TimeUnit)",co.paralleluniverse.actors.Actor+strand,169,4,1,,"@Override
    public void join(long timeout, TimeUnit unit) throws ExecutionException, InterruptedException, TimeoutException {
        strand.join(timeout, unit);
    }",True,True,"This method is used to join the current thread with the specified strand, waiting for a maximum amount of time specified by the timeout and unit parameters. It throws exceptions if there are any execution, interruption, or timeout issues.",False,"The given code snippet is a method that overrides the ""join"" method from a superclass. It takes a timeout value and a time unit as parameters and calls the ""join"" method on a ""strand"" object, which can potentially throw ExecutionException, InterruptedException, or TimeoutException."
35,isDone(),is done ,Method,link(Actor) link(Actor) link(Actor) link(Actor),"co.paralleluniverse.actors.ActorRegistry+register(Object,Actor)",co.paralleluniverse.strands.Strand+isAlive() co.paralleluniverse.strands.Strand+isAlive(),co.paralleluniverse.actors.Actor+strand,79,4,1,,"@Override
    public boolean isDone() {
        return !strand.isAlive();
    }",True,True,"The function of the method isDone() is to check if the strand is alive or not, and return a boolean value indicating whether the strand is done or not.",False,"The code snippet defines an overridden method named ""isDone()"" that returns a boolean value. It checks if the ""strand"" object, which is likely a thread, is no longer alive and returns the opposite value. This method can be used to determine if the thread has completed its execution."
36,run(),run ,Method,,,co.paralleluniverse.actors.Actor+setStrand(Strand) co.paralleluniverse.actors.Actor+setStrand(Strand) co.paralleluniverse.strands.Strand+currentStrand() co.paralleluniverse.strands.Strand+currentStrand() java.lang.ThreadLocal+set(T) java.lang.ThreadLocal+set(T) co.paralleluniverse.actors.Actor+doRun() co.paralleluniverse.actors.Actor+doRun() co.paralleluniverse.actors.Actor+notifyDeath(Object) co.paralleluniverse.actors.Actor+notifyDeath(Object) co.paralleluniverse.actors.Actor+checkThrownIn() co.paralleluniverse.actors.Actor+checkThrownIn() co.paralleluniverse.actors.Actor+notifyDeath(Object) co.paralleluniverse.actors.Actor+notifyDeath(Object) co.paralleluniverse.actors.Actor+notifyDeath(Object) co.paralleluniverse.actors.Actor+notifyDeath(Object) java.lang.ThreadLocal+set(T) java.lang.ThreadLocal+set(T),co.paralleluniverse.actors.Actor+strand co.paralleluniverse.actors.Actor+strand co.paralleluniverse.actors.Actor+currentActor co.paralleluniverse.actors.Actor+result co.paralleluniverse.actors.Actor+result co.paralleluniverse.actors.Actor+strand co.paralleluniverse.actors.Actor+currentActor,657,22,17,,"@Override
    public final V run() throws InterruptedException, SuspendExecution {
        if (strand == null)
            setStrand(Strand.currentStrand());
        if (!(strand instanceof Fiber))
            currentActor.set(this);
        try {
            result = doRun();
            notifyDeath(null);
            return result;
        } catch (InterruptedException e) {
            checkThrownIn();
            notifyDeath(e);
            throw e;
        } catch (Throwable t) {
            notifyDeath(t);
            throw t;
        } finally {
            if (!(strand instanceof Fiber))
                currentActor.set(this);
        }
    }",True,True,"This method is a run() method that is overridden from a superclass. It sets the strand, checks if it is a Fiber, sets the current actor, executes the doRun() method, handles exceptions, notifies death, and returns the result.",False,"This code defines a method called ""run"" that is used to execute a task. It sets the current strand (a type of execution context) and then executes the task using the ""doRun"" method. It handles exceptions and notifies the appropriate parties before returning the result."
37,doRun(),do run ,Method,run(),,,,75,1,1028,,"protected abstract V doRun() throws InterruptedException, SuspendExecution;",False,False,This method serves as an abstract implementation of a task that returns a value of type V. It is expected to be overridden and must handle InterruptedException and SuspendExecution.,False,"The code contains an abstract method named ""doRun()"" that returns a value of type V. It is protected and can throw InterruptedException and SuspendExecution. The method's implementation is not provided in the code and needs to be defined in a subclass."
38,handleLifecycleMessage(LifecycleMessage),handle lifecycle message m ,Method,"receive() receive(long,TimeUnit) tryReceive()","co.paralleluniverse.actors.BasicActor+receive(long,TimeUnit,MessageProcessor<Message>)","co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.ExitMessage+getMonitor() co.paralleluniverse.actors.ExitMessage+getMonitor() co.paralleluniverse.actors.LifecycleException+LifecycleException(LifecycleMessage)",,283,5,4,,"protected void handleLifecycleMessage(LifecycleMessage m) {
        record(1, ""Actor"", ""handleLifecycleMessage"", ""%s got LifecycleMessage %s"", this, m);
        if (m instanceof ExitMessage && ((ExitMessage) m).getMonitor() == null)
            throw new LifecycleException(m);
    }",True,True,This method handles a lifecycle message by recording it and throwing a lifecycle exception if the message is an exit message without a monitor.,False,"The code defines a protected method called ""handleLifecycleMessage"" that takes a LifecycleMessage as a parameter. It records a log message with the details of the message and throws a LifecycleException if the message is an ExitMessage without a monitor."
39,getName(),get name ,Method,register(),,,co.paralleluniverse.actors.Actor+name,52,3,1,,"public String getName() {
        return name;
    }",False,False,"This method returns the value of the variable ""name"" as a string.",False,"The code contains a method called ""getName"" which returns a string value. It is assumed that there is a variable called ""name"" which holds the desired string value to be returned by this method."
40,throwIn(RuntimeException),throw in e ,Method,send(Message) sendSync(Message),,"co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.strands.Strand+interrupt() co.paralleluniverse.strands.Strand+interrupt()","co.paralleluniverse.actors.Actor<Message,V>+exception co.paralleluniverse.actors.Actor+exception co.paralleluniverse.actors.Actor+strand",221,5,1,,"public void throwIn(RuntimeException e) {
        record(1, ""Actor"", ""throwIn"", ""Exception %s thrown into actor %s"", e, this);
        this.exception = e; // last exception thrown in wins
        strand.interrupt();
    }",True,True,"This method throws a runtime exception into an actor, records the exception, and interrupts the actor's strand.",False,"The given code defines a method named ""throwIn"" that takes a RuntimeException as a parameter. It records the exception and interrupts the execution of the current thread. The method is used to throw an exception into an actor and handle it accordingly."
41,checkThrownIn(),check thrown in ,Method,"receive() receive(long,TimeUnit) tryReceive() run()","co.paralleluniverse.actors.BasicActor+receive(long,TimeUnit,MessageProcessor<Message>)","co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) java.lang.Throwable+setStackTrace(StackTraceElement[]) java.lang.Throwable+setStackTrace(StackTraceElement[]) java.lang.Throwable+getStackTrace() java.lang.Throwable+Throwable() java.lang.Throwable+getStackTrace()",co.paralleluniverse.actors.Actor+exception co.paralleluniverse.actors.Actor+exception co.paralleluniverse.actors.Actor+exception co.paralleluniverse.actors.Actor+exception,274,7,0,,"void checkThrownIn() {
        if (exception != null) {
            record(1, ""Actor"", ""checkThrownIn"", ""%s detected thrown in exception %s"", this, exception);
            exception.setStackTrace(new Throwable().getStackTrace());
            throw exception;
        }
    }",True,True,"This method checks if an exception has been thrown. If an exception is detected, it records the details and throws the exception again with updated stack trace.",False,"The given code is a method named ""checkThrownIn"" that checks if an exception is present. If an exception is found, it records the details, sets the stack trace, and throws the exception."
42,register(Object),register name ,Method,register(),,"co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.ActorRegistry+register(Object,Actor) co.paralleluniverse.actors.ActorRegistry+register(Object,Actor) co.paralleluniverse.actors.Actor+monitorAddRestart() co.paralleluniverse.actors.Actor+monitorAddRestart()","co.paralleluniverse.actors.Actor<Message,V>+monitor co.paralleluniverse.actors.Actor+monitor",233,6,1,,"public Actor register(Object name) {
        record(1, ""Actor"", ""register"", ""Registering actor %s as %s"", this, name);
        this.monitor = ActorRegistry.register(name, this);
        monitorAddRestart();
        return this;
    }",True,True,"The function of the method is to register an actor with a given name, record the registration, set the actor as the monitor, add a restart to the monitor, and return the actor.",True,"The given code defines a method named ""register"" in the ""Actor"" class. This method registers an actor with a given name and returns the actor object. It also performs some additional operations like recording the registration, setting up a monitor, and adding a restart."
43,register(),register ,Method,,,co.paralleluniverse.actors.Actor+register(Object) co.paralleluniverse.actors.Actor+register(Object) co.paralleluniverse.actors.Actor+getName() co.paralleluniverse.actors.Actor+getName(),,67,3,1,,"public Actor register() {
        return register(getName());
    }",True,True,The function of the given method is to register an actor by calling the register method with the actor's name as a parameter and returning the result.,True,"The code defines a method named ""register"" that returns an Actor object. It calls another method with the same name, passing the result of the getName() method as an argument, and returns the result of that method call."
44,unregister(),unregister ,Method,,,"co.paralleluniverse.actors.Actor+record(int,String,String,String,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object) java.lang.IllegalArgumentException+IllegalArgumentException(String) co.paralleluniverse.actors.Actor+unregister(Object) co.paralleluniverse.actors.Actor+unregister(Object)",co.paralleluniverse.actors.Actor+name co.paralleluniverse.actors.Actor+name co.paralleluniverse.actors.Actor+name,255,7,1,,"public Actor unregister() {
        record(1, ""Actor"", ""unregister"", ""Unregistering actor %s (name: %s)"", name);
        if (name == null)
            throw new IllegalArgumentException(""name is null"");
        unregister(name);
        return this;
    }",True,True,"The function of the method is to unregister an actor by calling the unregister method with the actor's name as a parameter, and then returning the actor itself. It also records the action of unregistering the actor.",True,"The given code snippet represents a method named ""unregister"" in a class called ""Actor"". This method is responsible for unregistering an actor by throwing an exception if the actor's name is null, and then calling the ""unregister"" method with the actor's name as a parameter. Finally, it returns the instance of the actor."
45,unregister(Object),unregister name ,Method,unregister(),,co.paralleluniverse.actors.ActorRegistry+unregister(Object) co.paralleluniverse.actors.ActorRegistry+unregister(Object),"co.paralleluniverse.actors.Actor<Message,V>+monitor co.paralleluniverse.actors.Actor+monitor",134,5,1,,"public Actor unregister(Object name) {
        ActorRegistry.unregister(name);
        this.monitor = null;
        return this;
    }",False,False,"This method unregisters an actor by calling the unregister method of the ActorRegistry class, sets the monitor variable to null, and returns the current instance of the Actor class.",True,"The given code defines a method named ""unregister"" which takes an object as a parameter. This method is used to unregister an actor by calling the ""unregister"" method of the ActorRegistry class, setting the monitor to null, and returning the current instance of the Actor class."
46,getActor(Object),get actor name ,Method,,,co.paralleluniverse.actors.ActorRegistry+getActor(Object) co.paralleluniverse.actors.ActorRegistry+getActor(Object),,94,3,9,,"public static Actor getActor(Object name) {
        return ActorRegistry.getActor(name);
    }",False,False,This method serves to retrieve an actor object from the actor registry based on the given name.,True,"The code defines a static method named ""getActor"" that takes an object parameter called ""name"". It returns an Actor object by calling the ""getActor"" method from the ActorRegistry class, passing the ""name"" parameter."
47,link(Actor),link other ,Method,,,"co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+isDone() co.paralleluniverse.actors.Actor+isDone() co.paralleluniverse.actors.Actor+isDone() co.paralleluniverse.actors.Actor+isDone() co.paralleluniverse.actors.Actor+isDone() co.paralleluniverse.actors.Actor+isDone() co.paralleluniverse.actors.LifecycleListener+dead(Actor,Object) co.paralleluniverse.actors.LifecycleListener+dead(Actor,Object) co.paralleluniverse.actors.Actor+isDone() co.paralleluniverse.actors.Actor+isDone() co.paralleluniverse.actors.LifecycleListener+dead(Actor,Object) co.paralleluniverse.actors.LifecycleListener+dead(Actor,Object) java.util.Set+add(E) java.util.Set+add(E) java.util.Set+add(E) java.util.Set+add(E)","co.paralleluniverse.actors.Actor+lifecycleListener co.paralleluniverse.actors.Actor+deathReason co.paralleluniverse.actors.Actor<Message,V>+lifecycleListener co.paralleluniverse.actors.Actor+lifecycleListener co.paralleluniverse.actors.Actor+deathReason co.paralleluniverse.actors.Actor+lifecycleListeners co.paralleluniverse.actors.Actor+lifecycleListener co.paralleluniverse.actors.Actor+lifecycleListeners co.paralleluniverse.actors.Actor+lifecycleListener",559,14,1,,"public Actor link(Actor other) {
        record(1, ""Actor"", ""link"", ""Linking actors %s, %s"", this, other);
        if (!this.isDone() || !other.isDone()) {
            if (this.isDone())
                other.lifecycleListener.dead(this, deathReason);
            else if (other.isDone())
                this.lifecycleListener.dead(other, other.deathReason);
            else {
                lifecycleListeners.add(other.lifecycleListener);
                other.lifecycleListeners.add(lifecycleListener);
            }
        }
        return this;
    }",False,False,"The function of the method is to link two actors together. It checks if either actor is done, and if so, notifies the other actor's lifecycle listener. If both actors are not done, it adds each other's lifecycle listeners to their respective lists. Finally, it returns the current actor.",True,"The `link` method in this code is used to connect two actors together. It checks if either actor is already done, and if so, notifies the other actor's lifecycle listener. If both actors are not done, it adds each other's lifecycle listeners to their respective lists. Finally, it returns the current actor."
48,unlink(Actor),unlink other ,Method,,,"co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object) java.util.Set+remove(Object) java.util.Set+remove(Object) java.util.Set+remove(Object) java.util.Set+remove(Object)",co.paralleluniverse.actors.Actor+lifecycleListeners co.paralleluniverse.actors.Actor+lifecycleListener co.paralleluniverse.actors.Actor+lifecycleListeners co.paralleluniverse.actors.Actor+lifecycleListener,258,6,1,,"public Actor unlink(Actor other) {
        record(1, ""Actor"", ""unlink"", ""Uninking actors %s, %s"", this, other);
        lifecycleListeners.remove(other.lifecycleListener);
        other.lifecycleListeners.remove(lifecycleListener);
        return this;
    }",False,False,"The function of the method is to unlink two actors by removing their lifecycle listeners from each other, and then returning the first actor.",True,"The `unlink` method is used to remove the link between two actors. It removes the lifecycle listener of the `other` actor from the `lifecycleListeners` list of the current actor, and vice versa. The method returns the current actor after unlinking."
49,monitor(Actor),monitor other ,Method,,,"+() +dead(Actor,Object)",,554,15,1,,"public Object monitor(Actor other) {
        LifecycleListener listener = new LifecycleListener() {
            @Override
            public void dead(Actor actor, Object reason) {
                mailbox.send(new ExitMessage(actor, reason, this));
            }
        };
        record(1, ""Actor"", ""monitor"", ""Actor %s to monitor %s (listener: %s)"", this, other, listener);

        if (other.isDone())
            listener.dead(other, other.deathReason);
        else
            other.lifecycleListeners.add(listener);
        return listener;
    }",False,False,"The function of the method is to create a LifecycleListener object that monitors the given Actor. If the Actor is already done, it sends an ExitMessage. Otherwise, it adds the listener to the Actor's lifecycleListeners list. The method returns the created listener object.",True,"The `monitor` method takes an `Actor` object as a parameter and creates a `LifecycleListener` object. If the `other` actor is already done, it sends an `ExitMessage` to the mailbox. Otherwise, it adds the `listener` to the `other` actor's `lifecycleListeners` list. The method returns the `listener` object."
50,"demonitor(Actor,Object)",demonitor other listener ,Method,,,"co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object,Object) co.paralleluniverse.actors.Actor+record(int,String,String,String,Object,Object,Object) java.util.Set+remove(Object) java.util.Set+remove(Object)",co.paralleluniverse.actors.Actor+lifecycleListeners,223,4,1,,"public void demonitor(Actor other, Object listener) {
        record(1, ""Actor"", ""demonitor"", ""Actor %s to stop monitoring %s (listener: %s)"", this, other, listener);
        other.lifecycleListeners.remove(listener);
    }",False,False,This method is used to stop monitoring an actor by removing a listener from its lifecycleListeners list. It also records this action with specific details.,True,The `demonitor` method is used to stop monitoring an `Actor` object by removing a specified `listener` from its `lifecycleListeners` list. It records the action and the relevant objects involved.
51,notifyDeath(Object),notify death reason ,Method,run() run() run(),,"co.paralleluniverse.actors.Actor+monitorAddDeath(Object) co.paralleluniverse.actors.Actor+monitorAddDeath(Object) co.paralleluniverse.actors.LifecycleListener+dead(Actor,Object) co.paralleluniverse.actors.LifecycleListener+dead(Actor,Object)","co.paralleluniverse.actors.Actor<Message,V>+deathReason co.paralleluniverse.actors.Actor+deathReason co.paralleluniverse.actors.Actor+lifecycleListeners",218,6,2,,"private void notifyDeath(Object reason) {
        this.deathReason = reason;
        monitorAddDeath(reason);
        for (LifecycleListener listener : lifecycleListeners)
            listener.dead(this, reason);
    }",True,True,"This method notifies the death of an object by setting the death reason, adding the reason to a monitor, and notifying all lifecycle listeners that the object is dead with the given reason.",False,"The `notifyDeath` method is a private method that sets the `deathReason` variable to the given reason. It then calls the `monitorAddDeath` method and notifies all the `lifecycleListeners` by invoking the `dead` method on each listener, passing the current object and the reason as parameters."
52,lifecycleListener,lifecycle listener ,Field,link(Actor),,,,225,6,18,,"private final LifecycleListener lifecycleListener = new LifecycleListener() {
        @Override
        public void dead(Actor actor, Object reason) {
            mailbox.send(new ExitMessage(actor, reason));
        }
    };",True,True,,False,
53,monitorAddDeath(Object),monitor add death reason ,Method,notifyDeath(Object),,co.paralleluniverse.actors.ActorMonitor+addDeath(Object) co.paralleluniverse.actors.ActorMonitor+addDeath(Object),co.paralleluniverse.actors.Actor+monitor co.paralleluniverse.actors.Actor+monitor,126,4,20,,"protected final void monitorAddDeath(Object reason) {
        if (monitor != null)
            monitor.addDeath(reason);
    }",True,True,"This method serves to monitor and record the reason for an object's death, if a monitor is present.",True,"The code defines a protected method called ""monitorAddDeath"" that takes an object as a parameter. If a monitor object is not null, it calls the ""addDeath"" method of the monitor object, passing the reason object as an argument."
54,monitorAddRestart(),monitor add restart ,Method,register(Object),,co.paralleluniverse.actors.ActorMonitor+addRestart() co.paralleluniverse.actors.ActorMonitor+addRestart(),co.paralleluniverse.actors.Actor+monitor co.paralleluniverse.actors.Actor+monitor,112,4,20,,"protected final  void monitorAddRestart() {
        if (monitor != null)
            monitor.addRestart();
    }",True,True,"This method serves to monitor and add a restart to the monitor object, if it is not null.",True,"The code defines a protected method called ""monitorAddRestart"" that checks if a monitor object is not null and then calls its ""addRestart"" method. This method is likely used to monitor and track restarts in the code."
55,monitorAddMessage(),monitor add message ,Method,"receive() receive(long,TimeUnit) tryReceive()","co.paralleluniverse.actors.BasicActor+receive(long,TimeUnit,MessageProcessor<Message>)",co.paralleluniverse.actors.ActorMonitor+addMessage() co.paralleluniverse.actors.ActorMonitor+addMessage(),co.paralleluniverse.actors.Actor+monitor co.paralleluniverse.actors.Actor+monitor,112,4,20,,"protected final  void monitorAddMessage() {
        if (monitor != null)
            monitor.addMessage();
    }",True,True,"This method serves to monitor and add a message to the monitor, if it is not null.",True,The code defines a protected method called `monitorAddMessage()` that checks if a monitor object is not null and then calls its `addMessage()` method. This method is likely used to add a message to the monitor for tracking or logging purposes.
56,monitorSkippedMessage(),monitor skipped message ,Method,,"co.paralleluniverse.actors.BasicActor+receive(long,TimeUnit,MessageProcessor<Message>)",co.paralleluniverse.actors.ActorMonitor+skippedMessage() co.paralleluniverse.actors.ActorMonitor+skippedMessage(),co.paralleluniverse.actors.Actor+monitor co.paralleluniverse.actors.Actor+monitor,119,4,20,,"protected final void monitorSkippedMessage() {
        if (monitor != null)
            monitor.skippedMessage();
    }",True,True,"This method serves to monitor and handle skipped messages. If a monitor object is not null, it calls the skippedMessage() method on the monitor object.",True,"The method ""monitorSkippedMessage"" is a protected and final method that checks if a monitor object is not null and then calls its ""skippedMessage"" method. It is used to monitor and handle skipped messages in the code."
57,monitorResetSkippedMessages(),monitor reset skipped messages ,Method,,"co.paralleluniverse.actors.BasicActor+receive(long,TimeUnit,MessageProcessor<Message>)",co.paralleluniverse.actors.ActorMonitor+resetSkippedMessages() co.paralleluniverse.actors.ActorMonitor+resetSkippedMessages(),co.paralleluniverse.actors.Actor+monitor co.paralleluniverse.actors.Actor+monitor,131,4,20,,"protected final void monitorResetSkippedMessages() {
        if (monitor != null)
            monitor.resetSkippedMessages();
    }",True,True,"This method serves to monitor and reset skipped messages in a protected and final manner. It checks if a monitor object is not null, and if so, it calls the resetSkippedMessages() method on the monitor object.",True,"The code defines a protected method called ""monitorResetSkippedMessages"" that checks if a monitor object is not null and then calls its ""resetSkippedMessages"" method. This method is used to reset any skipped messages in the monitor object."
58,"record(int,String,String,String)",record level clazz method format ,Method,send(Message) sendSync(Message),,"co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String) co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String) co.paralleluniverse.common.monitoring.FlightRecorder+get() co.paralleluniverse.common.monitoring.FlightRecorder+get()",co.paralleluniverse.actors.Actor+flightRecorder co.paralleluniverse.actors.Actor+flightRecorder,198,4,20,,"protected final void record(int level, String clazz, String method, String format) {
        if (flightRecorder != null)
            record(flightRecorder.get(), level, clazz, method, format);
    }",False,False,"This method is used to record information in a flight recorder. It takes in parameters such as the level of the record, the class and method names, and a format string. If a flight recorder is available, it calls another method to actually record the information.",True,"The code defines a protected method called ""record"" that takes in four parameters: level, clazz, method, and format. It checks if the flightRecorder is not null and if so, it calls another overloaded version of the ""record"" method with the flightRecorder object and the other parameters."
59,"record(int,String,String,String,Object)",record level clazz method format arg1 ,Method,"receive() receive(long,TimeUnit) start() unregister()","co.paralleluniverse.actors.BasicActor+receive(long,TimeUnit,MessageProcessor<Message>)","co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String,Object) co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String,Object) co.paralleluniverse.common.monitoring.FlightRecorder+get() co.paralleluniverse.common.monitoring.FlightRecorder+get() co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String,Object[]) co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String,Object[]) co.paralleluniverse.common.monitoring.FlightRecorder+get() co.paralleluniverse.common.monitoring.FlightRecorder+get()",co.paralleluniverse.actors.Actor+flightRecorder co.paralleluniverse.actors.Actor+flightRecorder co.paralleluniverse.actors.Actor+flightRecorder co.paralleluniverse.actors.Actor+flightRecorder,217,4,20,,"protected final void record(int level, String clazz, String method, String format, Object arg1) {
        if (flightRecorder != null)
            record(flightRecorder.get(), level, clazz, method, format, arg1);
    }",False,False,"This method is used to record information in a flight recorder, if it is available. It takes in parameters such as the level of the record, the class and method names, a format string, and an argument.",True,"The code defines a protected method called ""record"" that takes in five parameters: level, clazz, method, format, and arg1. It checks if the flightRecorder is not null and if so, it calls another overloaded version of the ""record"" method with an additional flightRecorder parameter."
60,"record(int,String,String,String,Object,Object)",record level clazz method format arg1 arg2 ,Method,"receive() receive(long,TimeUnit) receive(long,TimeUnit) tryReceive() send(Message) sendSync(Message) handleLifecycleMessage(LifecycleMessage) throwIn(RuntimeException) checkThrownIn() register(Object) link(Actor) unlink(Actor)","co.paralleluniverse.actors.BasicActor+receive(long,TimeUnit,MessageProcessor<Message>) co.paralleluniverse.actors.BasicActor+receive(long,TimeUnit,MessageProcessor<Message>)","co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String,Object,Object) co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String,Object,Object) co.paralleluniverse.common.monitoring.FlightRecorder+get() co.paralleluniverse.common.monitoring.FlightRecorder+get()",co.paralleluniverse.actors.Actor+flightRecorder co.paralleluniverse.actors.Actor+flightRecorder,236,4,20,,"protected final void record(int level, String clazz, String method, String format, Object arg1, Object arg2) {
        if (flightRecorder != null)
            record(flightRecorder.get(), level, clazz, method, format, arg1, arg2);
    }",False,False,"This method records information in a flight recorder if it is not null. It takes in parameters such as level, class, method, format, and arguments to be recorded.",True,"The code defines a protected method called ""record"" that takes in several parameters. It checks if a flightRecorder object is not null and then calls another overloaded version of the ""record"" method with the flightRecorder object and the provided parameters."
61,"record(int,String,String,String,Object,Object,Object)",record level clazz method format arg1 arg2 arg3 ,Method,"demonitor(Actor,Object)",,"co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String,Object,Object,Object) co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String,Object,Object,Object) co.paralleluniverse.common.monitoring.FlightRecorder+get() co.paralleluniverse.common.monitoring.FlightRecorder+get()",co.paralleluniverse.actors.Actor+flightRecorder co.paralleluniverse.actors.Actor+flightRecorder,255,4,20,,"protected final void record(int level, String clazz, String method, String format, Object arg1, Object arg2, Object arg3) {
        if (flightRecorder != null)
            record(flightRecorder.get(), level, clazz, method, format, arg1, arg2, arg3);
    }",False,False,"This method is used to record information in a flight recorder, if it is available. It takes in parameters such as the level of the record, the class and method names, a format string, and up to three arguments.",True,"The code defines a protected method called ""record"" that takes in several parameters. It checks if a flightRecorder object is not null and then calls another overloaded version of the ""record"" method with the flightRecorder object and the provided parameters."
62,"record(int,String,String,String,Object,Object,Object,Object)",record level clazz method format arg1 arg2 arg3 arg4 ,Method,,,"co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String,Object,Object,Object,Object) co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String,Object,Object,Object,Object) co.paralleluniverse.common.monitoring.FlightRecorder+get() co.paralleluniverse.common.monitoring.FlightRecorder+get()",co.paralleluniverse.actors.Actor+flightRecorder co.paralleluniverse.actors.Actor+flightRecorder,274,4,20,,"protected final void record(int level, String clazz, String method, String format, Object arg1, Object arg2, Object arg3, Object arg4) {
        if (flightRecorder != null)
            record(flightRecorder.get(), level, clazz, method, format, arg1, arg2, arg3, arg4);
    }",False,False,"This method is used to record information in a flight recorder, if it is available. It takes in parameters such as the level of the record, the class and method names, a format string, and up to four arguments.",True,"The code defines a protected method called ""record"" that takes in several parameters including a level, class name, method name, format, and four additional arguments. If a flight recorder is available, it calls another ""record"" method with the flight recorder instance and all the provided parameters."
63,"record(int,String,String,String,Object,Object,Object,Object,Object)",record level clazz method format arg1 arg2 arg3 arg4 arg5 ,Method,,,"co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String,Object,Object,Object,Object,Object) co.paralleluniverse.actors.Actor+record(ThreadRecorder,int,String,String,String,Object,Object,Object,Object,Object) co.paralleluniverse.common.monitoring.FlightRecorder+get() co.paralleluniverse.common.monitoring.FlightRecorder+get()",co.paralleluniverse.actors.Actor+flightRecorder co.paralleluniverse.actors.Actor+flightRecorder,293,4,20,,"protected final void record(int level, String clazz, String method, String format, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) {
        if (flightRecorder != null)
            record(flightRecorder.get(), level, clazz, method, format, arg1, arg2, arg3, arg4, arg5);
    }",False,False,"This method is used to record information in a flight recorder, if it is available. It takes in various parameters such as the level of the record, the class and method names, a format string, and up to five additional arguments.",True,"The code defines a protected method called ""record"" that takes in various parameters including a level, class name, method name, format, and multiple arguments. It checks if a flight recorder is available and if so, it calls another ""record"" method with the flight recorder and all the parameters."
64,"record(int,String,String,String,Object)",record level clazz method format args ,Method,"receive() receive(long,TimeUnit) start() unregister()","co.paralleluniverse.actors.BasicActor+receive(long,TimeUnit,MessageProcessor<Message>)",,,220,4,20,,"protected final void record(int level, String clazz, String method, String format, Object... args) {
        if (flightRecorder != null)
            record(flightRecorder.get(), level, clazz, method, format, args);
    }",False,False,"This method is used to record information in a flight recorder. It takes in parameters such as the level of the record, the class and method names, a format string, and any additional arguments. If a flight recorder is available, it records the information using the flight recorder.",True,"The code defines a protected method called ""record"" that takes in parameters such as level, class name, method name, format, and arguments. It checks if a flight recorder is available and if so, it calls another overloaded version of the ""record"" method with the flight recorder and the provided parameters."
65,"record(FlightRecorder.ThreadRecorder,int,String,String,String)",record recorder level clazz method format ,Method,,,"co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[]) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[])",,261,4,10,,"private static void record(FlightRecorder.ThreadRecorder recorder, int level, String clazz, String method, String format) {
        if (recorder != null)
            recorder.record(level, makeFlightRecorderMessage(recorder, clazz, method, format, null));
    }",False,False,"This method records flight recorder messages with the given level, class, method, and format. It uses the provided thread recorder to record the message if it is not null.",True,"The code defines a private static method called ""record"" that takes in a FlightRecorder.ThreadRecorder object, an integer level, and three strings (clazz, method, and format) as parameters. If the recorder object is not null, it calls the ""record"" method on the recorder object with the specified level and a flight recorder message created using the provided parameters."
66,"record(FlightRecorder.ThreadRecorder,int,String,String,String,Object)",record recorder level clazz method format arg1 ,Method,,,"co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[]) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[]) co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[]) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[])",,288,4,10,,"private static void record(FlightRecorder.ThreadRecorder recorder, int level, String clazz, String method, String format, Object arg1) {
        if (recorder != null)
            recorder.record(level, makeFlightRecorderMessage(recorder, clazz, method, format, new Object[]{arg1}));
    }",False,False,"This method records flight data using a FlightRecorder.ThreadRecorder object. It takes in parameters such as the level of the record, the class and method names, a format string, and an argument.",True,"The code defines a private static method called ""record"" that takes in a FlightRecorder.ThreadRecorder object, an integer level, class name, method name, format string, and an argument. If the recorder object is not null, it calls the ""record"" method on the recorder object with the specified level and a flight recorder message created using the provided arguments."
67,"record(FlightRecorder.ThreadRecorder,int,String,String,String,Object,Object)",record recorder level clazz method format arg1 arg2 ,Method,,,"co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[]) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[])",,307,4,10,,"private static void record(FlightRecorder.ThreadRecorder recorder, int level, String clazz, String method, String format, Object arg1, Object arg2) {
        if (recorder != null)
            recorder.record(level, makeFlightRecorderMessage(recorder, clazz, method, format, new Object[]{arg1, arg2}));
    }",False,False,"This method records flight data using a FlightRecorder.ThreadRecorder object. It takes in parameters such as the level of the record, the class and method names, a format string, and two arguments.",True,"The code defines a private static method called ""record"" that takes in a FlightRecorder.ThreadRecorder object, an integer level, class name, method name, format string, and two arguments. If the recorder object is not null, it calls the ""record"" method on the recorder object with the level and a flight recorder message created using the provided arguments."
68,"record(FlightRecorder.ThreadRecorder,int,String,String,String,Object,Object,Object)",record recorder level clazz method format arg1 arg2 arg3 ,Method,,,"co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[]) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[])",,326,4,10,,"private static void record(FlightRecorder.ThreadRecorder recorder, int level, String clazz, String method, String format, Object arg1, Object arg2, Object arg3) {
        if (recorder != null)
            recorder.record(level, makeFlightRecorderMessage(recorder, clazz, method, format, new Object[]{arg1, arg2, arg3}));
    }",False,False,"This method records flight data using a FlightRecorder.ThreadRecorder object. It takes in parameters such as the level of the record, the class and method names, a format string, and up to three arguments.",True,"The code defines a private static method called ""record"" that takes in a FlightRecorder.ThreadRecorder object, an integer level, class name, method name, format string, and three object arguments. If the recorder object is not null, it calls the ""record"" method on the recorder object with the specified level and a flight recorder message created using the provided arguments."
69,"record(FlightRecorder.ThreadRecorder,int,String,String,String,Object,Object,Object,Object)",record recorder level clazz method format arg1 arg2 arg3 arg4 ,Method,,,"co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[]) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[])",,345,4,10,,"private static void record(FlightRecorder.ThreadRecorder recorder, int level, String clazz, String method, String format, Object arg1, Object arg2, Object arg3, Object arg4) {
        if (recorder != null)
            recorder.record(level, makeFlightRecorderMessage(recorder, clazz, method, format, new Object[]{arg1, arg2, arg3, arg4}));
    }",False,False,"The function of this method is to record flight information using a FlightRecorder.ThreadRecorder object. It takes in various parameters such as the level of the record, the class and method names, a format string, and up to four arguments.",True,"The code defines a private static method called ""record"" that takes in a FlightRecorder.ThreadRecorder object, an integer level, class name, method name, format string, and four object arguments. If the recorder object is not null, it calls the ""record"" method on the recorder object with the level and a flight recorder message created using the provided arguments."
70,"record(FlightRecorder.ThreadRecorder,int,String,String,String,Object,Object,Object,Object,Object)",record recorder level clazz method format arg1 arg2 arg3 arg4 arg5 ,Method,,,"co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.common.monitoring.FlightRecorder.ThreadRecorder+record(int,Object) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[]) co.paralleluniverse.actors.Actor+makeFlightRecorderMessage(ThreadRecorder,String,String,String,Object[])",,364,4,10,,"private static void record(FlightRecorder.ThreadRecorder recorder, int level, String clazz, String method, String format, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) {
        if (recorder != null)
            recorder.record(level, makeFlightRecorderMessage(recorder, clazz, method, format, new Object[]{arg1, arg2, arg3, arg4, arg5}));
    }",False,False,"The function of the method is to record flight information using a FlightRecorder.ThreadRecorder object. It takes in various parameters such as the level of the record, the class and method names, a format string, and up to five arguments.",True,"The code defines a private static method called ""record"" that takes in various parameters including a FlightRecorder.ThreadRecorder object, level, class name, method name, format, and multiple arguments. It checks if the recorder object is not null and then calls the ""record"" method on the recorder object with the specified level and a flight recorder message created using the given parameters."
71,"record(FlightRecorder.ThreadRecorder,int,String,String,String,Object)",record recorder level clazz method format args ,Method,,,,,277,4,10,,"private static void record(FlightRecorder.ThreadRecorder recorder, int level, String clazz, String method, String format, Object... args) {
        if (recorder != null)
            recorder.record(level, makeFlightRecorderMessage(recorder, clazz, method, format, args));
    }",False,False,"This method records flight data using a FlightRecorder.ThreadRecorder object. It takes in parameters such as the level of the record, the class and method names, a format string, and optional arguments. If the recorder is not null, it records the data using the provided parameters.",True,"The code defines a private static method called ""record"" that takes in a FlightRecorder.ThreadRecorder object, an integer level, class name, method name, format string, and variable number of arguments. If the FlightRecorder.ThreadRecorder object is not null, it calls the ""record"" method on it with the specified level and a flight recorder message generated using the provided arguments."
72,"makeFlightRecorderMessage(FlightRecorder.ThreadRecorder,String,String,String,Object[])",make flight recorder message recorder clazz method format args ,Method,,,"co.paralleluniverse.common.monitoring.FlightRecorderMessage+FlightRecorderMessage(String,String,String,Object[])",,364,4,10,,"private static FlightRecorderMessage makeFlightRecorderMessage(FlightRecorder.ThreadRecorder recorder, String clazz, String method, String format, Object[] args) {
        return new FlightRecorderMessage(clazz, method, format, args);
        //return ((FlightRecorderMessageFactory) recorder.getAux()).makeFlightRecorderMessage(clazz, method, format, args);
    }",False,False,This method creates a new FlightRecorderMessage object with the given parameters.,False,"The code defines a private static method called ""makeFlightRecorderMessage"" that takes in a FlightRecorder.ThreadRecorder object, class name, method name, format string, and an array of arguments. It creates and returns a new FlightRecorderMessage object with the provided parameters."
