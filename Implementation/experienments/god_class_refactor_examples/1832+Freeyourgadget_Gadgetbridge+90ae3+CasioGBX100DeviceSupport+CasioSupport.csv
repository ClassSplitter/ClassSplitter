index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,LOG,log ,Field,,,,,90,1,26,,private static final Logger LOG = LoggerFactory.getLogger(CasioGBX100DeviceSupport.class);,False,False,,False,
2,mFirstConnect,m first connect ,Field,,,,,38,1,2,,private boolean mFirstConnect = false;,True,True,,False,
3,mGetConfigurationPending,m get configuration pending ,Field,,,,,49,1,2,,private boolean mGetConfigurationPending = false;,False,False,,False,
4,mRingNotificationPending,m ring notification pending ,Field,,,,,49,1,2,,private boolean mRingNotificationPending = false;,False,False,,False,
5,mSyncedNotificationIDs,m synced notification i ds ,Field,,,,,76,1,18,,private final ArrayList<Integer> mSyncedNotificationIDs = new ArrayList<>();,False,False,,False,
6,mLastCallId,m last call id ,Field,,,,,103,1,2,,private int mLastCallId = new AtomicInteger((int) (System.currentTimeMillis()/1000)).incrementAndGet();,False,False,,False,
7,mFakeRingDurationCounter,m fake ring duration counter ,Field,,,,,41,1,2,,private int mFakeRingDurationCounter = 0;,False,False,,False,
8,mFindPhoneHandler,m find phone handler ,Field,onReverseFindDevice(boolean),,,,56,1,18,,private final Handler mFindPhoneHandler = new Handler();,False,False,,False,
9,mFakeRingDurationHandler,m fake ring duration handler ,Field,,,,,63,1,18,,private final Handler mFakeRingDurationHandler = new Handler();,False,False,,False,
10,mAutoRemoveMessageHandler,m auto remove message handler ,Field,,,,,64,1,18,,private final Handler mAutoRemoveMessageHandler = new Handler();,False,False,,False,
11,CasioGBX100DeviceSupport(),casio gb x100 device support ,Method,,,nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+addSupportedService(UUID) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+addSupportedService(UUID),nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+WATCH_FEATURES_SERVICE_UUID,135,5,1,,"public CasioGBX100DeviceSupport() {
        super(LOG);

        addSupportedService(CasioConstants.WATCH_FEATURES_SERVICE_UUID);
    }",False,False,"The function of the method is to create an instance of the CasioGBX100DeviceSupport class. It calls the constructor of the superclass with a parameter LOG, and adds a supported service with the UUID CasioConstants.WATCH_FEATURES_SERVICE_UUID.",False,The code defines a constructor for the CasioGBX100DeviceSupport class. It calls the superclass constructor with a LOG parameter and adds a supported service with a specific UUID to the instance of the class.
12,connectFirstTime(),connect first time ,Method,,,nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+connect() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+connect(),nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mFirstConnect,111,5,1,,"@Override
    public boolean connectFirstTime() {
        mFirstConnect = true;
        return connect();
    }",True,True,"The function of the method ""connectFirstTime"" is to set the variable ""mFirstConnect"" to true and then call the ""connect"" method, returning its boolean result.",True,"The method ""connectFirstTime"" sets a boolean variable ""mFirstConnect"" to true and then calls the ""connect"" method. It returns the result of the ""connect"" method, indicating whether the connection was successful or not."
13,setInitialized(),set initialized ,Method,,"nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.InitOperationGBX100+onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.InitOperationGBX100+onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic)",nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+setState(State) nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+setState(State) nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+sendDeviceUpdateIntent(Context) nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+sendDeviceUpdateIntent(Context) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext(),nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mFirstConnect nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+gbDevice nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+gbDevice,177,5,1,,"public void setInitialized() {
        mFirstConnect = false;
        gbDevice.setState(GBDevice.State.INITIALIZED);
        gbDevice.sendDeviceUpdateIntent(getContext());
    }",False,True,"This method sets the state of the gbDevice to ""INITIALIZED"" and sends a device update intent.",True,"The `setInitialized()` method is used to update the state of a device to ""initialized"" and send an update intent. It sets a boolean variable `mFirstConnect` to false, updates the state of `gbDevice` to ""initialized"", and sends a device update intent using the current context."
14,initializeDevice(TransactionBuilder),initialize device builder ,Method,,,"nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.InitOperationGBX100+InitOperationGBX100(CasioGBX100DeviceSupport,TransactionBuilder,boolean) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.util.GB+toast(Context,String,int,int,Throwable) nodomain.freeyourgadget.gadgetbridge.util.GB+toast(Context,String,int,int,Throwable) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+setFirmwareVersion(String) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+setFirmwareVersion(String) nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+setFirmwareVersion2(String) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+setFirmwareVersion2(String) nodomain.freeyourgadget.gadgetbridge.util.Prefs+getPreferences() nodomain.freeyourgadget.gadgetbridge.GBApplication+getPrefs() nodomain.freeyourgadget.gadgetbridge.GBApplication+getPrefs() nodomain.freeyourgadget.gadgetbridge.util.Prefs+getPreferences() nodomain.freeyourgadget.gadgetbridge.GBApplication+getDeviceSpecificSharedPrefs(String) nodomain.freeyourgadget.gadgetbridge.GBApplication+getDeviceSpecificSharedPrefs(String) nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+getAddress() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+getAddress()",nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mFirstConnect nodomain.freeyourgadget.gadgetbridge.util.GB+ERROR nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mFirstConnect,1001,28,4,,"@Override
    protected TransactionBuilder initializeDevice(TransactionBuilder builder) {

        try {
            new InitOperationGBX100(this, builder, mFirstConnect).perform();
        } catch (IOException e) {
            GB.toast(getContext(), ""Initializing Casio watch failed"", Toast.LENGTH_SHORT, GB.ERROR, e);
        }

        getDevice().setFirmwareVersion(""N/A"");
        getDevice().setFirmwareVersion2(""N/A"");


        //preferences.registerOnSharedPreferenceChangeListener(this);

        SharedPreferences prefs = GBApplication.getPrefs().getPreferences();
        prefs.registerOnSharedPreferenceChangeListener(this);

        if(mFirstConnect) {
            SharedPreferences preferences = GBApplication.getDeviceSpecificSharedPrefs(this.getDevice().getAddress());
            SharedPreferences.Editor editor = preferences.edit();

            editor.putString(""charts_tabs"", ""activity,activitylist,stepsweek"");
            editor.apply();
        }

        return builder;
    }",False,False,"This method initializes a device by performing an initialization operation. It also sets the firmware version of the device to ""N/A"" and registers a shared preference change listener. If it is the first connection, it sets some specific shared preferences for the device. Finally, it returns the transaction builder.",True,"This code is an overridden method that initializes a device. It performs an initialization operation for a specific device, sets firmware versions, registers a shared preference change listener, and updates preferences if it is the first connection. The method returns a TransactionBuilder object."
15,"onCharacteristicRead(BluetoothGatt,BluetoothGattCharacteristic,int)",on characteristic read gatt characteristic status ,Method,,,"nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+onCharacteristicRead(BluetoothGatt,BluetoothGattCharacteristic,int)",,412,12,1,,"@Override
    public boolean onCharacteristicRead(BluetoothGatt gatt,
                                        BluetoothGattCharacteristic characteristic, int status) {

        UUID characteristicUUID = characteristic.getUuid();
        byte[] data = characteristic.getValue();

        if(data.length == 0)
            return true;

        return super.onCharacteristicRead(gatt, characteristic, status);
    }",False,False,"This method is used to read a characteristic value from a Bluetooth device. It checks if the data length is zero and returns true if it is, otherwise it calls the superclass method to handle the characteristic read.",True,"This code is an implementation of the `onCharacteristicRead` method in a BluetoothGattCallback. It retrieves the UUID and value of the characteristic being read, checks if the data is empty, and returns true if it is. Otherwise, it calls the superclass implementation of the method."
16,"getSumWithinRange(int,int)",get sum within range timestamp from timestamp to ,Method,,"nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.FetchStepCountDataOperation+onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic)","nodomain.freeyourgadget.gadgetbridge.GBApplication+acquireDB() nodomain.freeyourgadget.gadgetbridge.GBApplication+acquireDB() nodomain.freeyourgadget.gadgetbridge.database.DBHelper+getUser(DaoSession) nodomain.freeyourgadget.gadgetbridge.database.DBHelper+getUser(DaoSession) nodomain.freeyourgadget.gadgetbridge.database.DBHandler+getDaoSession() nodomain.freeyourgadget.gadgetbridge.database.DBHandler+getDaoSession() nodomain.freeyourgadget.gadgetbridge.database.DBHelper+getDevice(GBDevice,DaoSession) nodomain.freeyourgadget.gadgetbridge.database.DBHelper+getDevice(GBDevice,DaoSession) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.database.DBHandler+getDaoSession() nodomain.freeyourgadget.gadgetbridge.database.DBHandler+getDaoSession() nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioGBX100SampleProvider+CasioGBX100SampleProvider(GBDevice,DaoSession) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.database.DBHandler+getDaoSession() nodomain.freeyourgadget.gadgetbridge.database.DBHandler+getDaoSession() nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioGBX100SampleProvider+getActivitySamples(int,int) nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioGBX100SampleProvider+getActivitySamples(int,int) org.slf4j.Logger+error(String) org.slf4j.Logger+error(String) org.slf4j.Logger+debug(String) org.slf4j.Logger+debug(String)",nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG,1264,27,1,,"public CasioGBX100ActivitySample getSumWithinRange(int timestamp_from, int timestamp_to) {
        int steps = 0;
        int calories = 0;
        try (DBHandler dbHandler = GBApplication.acquireDB()) {

            User user = DBHelper.getUser(dbHandler.getDaoSession());
            Device device = DBHelper.getDevice(this.getDevice(), dbHandler.getDaoSession());

            CasioGBX100SampleProvider provider = new CasioGBX100SampleProvider(this.getDevice(), dbHandler.getDaoSession());
            List<CasioGBX100ActivitySample> samples = provider.getActivitySamples(timestamp_from, timestamp_to);
            for(CasioGBX100ActivitySample sample : samples) {
                if(sample.getDevice().equals(device) &&
                        sample.getUser().equals(user)) {
                    steps += sample.getSteps();
                    calories += sample.getCalories();
                }
            }
        } catch (Exception e) {
            LOG.error(""Error fetching activity data."");
        }

        CasioGBX100ActivitySample ret = new CasioGBX100ActivitySample();
        ret.setCalories(calories);
        ret.setSteps(steps);
        LOG.debug(""Fetched for today: "" + calories + "" cals and "" + steps + "" steps."");
        return ret;
    }",False,False,This method retrieves activity samples within a specified timestamp range from a database. It calculates the sum of steps and calories for the samples that match the specified device and user. It returns a CasioGBX100ActivitySample object with the calculated sum.,True,"This code retrieves activity samples within a specified timestamp range from a database, filters them based on the device and user, and calculates the sum of steps and calories for the filtered samples. The calculated sum is then returned as a CasioGBX100ActivitySample object."
17,addGBActivitySamples(ArrayList<CasioGBX100ActivitySample>),add gb activity samples samples ,Method,"stepCountDataFetched(int,int,ArrayList<CasioGBX100ActivitySample>)",,"nodomain.freeyourgadget.gadgetbridge.GBApplication+acquireDB() nodomain.freeyourgadget.gadgetbridge.GBApplication+acquireDB() nodomain.freeyourgadget.gadgetbridge.database.DBHelper+getUser(DaoSession) nodomain.freeyourgadget.gadgetbridge.database.DBHelper+getUser(DaoSession) nodomain.freeyourgadget.gadgetbridge.database.DBHandler+getDaoSession() nodomain.freeyourgadget.gadgetbridge.database.DBHandler+getDaoSession() nodomain.freeyourgadget.gadgetbridge.database.DBHelper+getDevice(GBDevice,DaoSession) nodomain.freeyourgadget.gadgetbridge.database.DBHelper+getDevice(GBDevice,DaoSession) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.database.DBHandler+getDaoSession() nodomain.freeyourgadget.gadgetbridge.database.DBHandler+getDaoSession() nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioGBX100SampleProvider+CasioGBX100SampleProvider(GBDevice,DaoSession) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.database.DBHandler+getDaoSession() nodomain.freeyourgadget.gadgetbridge.database.DBHandler+getDaoSession() nodomain.freeyourgadget.gadgetbridge.devices.AbstractSampleProvider+addGBActivitySample(T) nodomain.freeyourgadget.gadgetbridge.devices.AbstractSampleProvider+addGBActivitySample(T) nodomain.freeyourgadget.gadgetbridge.util.GB+toast(String,int,int,Throwable) nodomain.freeyourgadget.gadgetbridge.util.GB+toast(String,int,int,Throwable) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() java.lang.Throwable+getLocalizedMessage() java.lang.Throwable+getLocalizedMessage() nodomain.freeyourgadget.gadgetbridge.util.GB+updateTransferNotification(String,String,boolean,int,Context) nodomain.freeyourgadget.gadgetbridge.util.GB+updateTransferNotification(String,String,boolean,int,Context) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() org.slf4j.Logger+error(String) org.slf4j.Logger+error(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage()",nodomain.freeyourgadget.gadgetbridge.util.GB+ERROR nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG,1074,24,2,,"private void addGBActivitySamples(ArrayList<CasioGBX100ActivitySample> samples) {
        try (DBHandler dbHandler = GBApplication.acquireDB()) {

            User user = DBHelper.getUser(dbHandler.getDaoSession());
            Device device = DBHelper.getDevice(this.getDevice(), dbHandler.getDaoSession());

            CasioGBX100SampleProvider provider = new CasioGBX100SampleProvider(this.getDevice(), dbHandler.getDaoSession());

            for (CasioGBX100ActivitySample sample : samples) {
                sample.setDevice(device);
                sample.setUser(user);
                sample.setProvider(provider);

                provider.addGBActivitySample(sample);
            }

        } catch (Exception ex) {
            // Why is this a toast? The user doesn't care about the error.
            GB.toast(getContext(), ""Error saving samples: "" + ex.getLocalizedMessage(), Toast.LENGTH_LONG, GB.ERROR);
            GB.updateTransferNotification(null, ""Data transfer failed"", false, 0, getContext());

            LOG.error(ex.getMessage());
        }
    }",False,False,"This method adds activity samples to the database. It retrieves the user and device information, creates a sample provider, and sets the device, user, and provider for each sample. It then adds each sample to the provider. If an exception occurs, it displays an error message and logs the error.",True,"The code is a private method that adds activity samples to a database using a DBHandler. It retrieves the user and device information, creates a sample provider, and then iterates through the given samples to set the device, user, and provider before adding each sample to the provider. If an exception occurs, it displays an error toast message and logs the error."
18,"stepCountDataFetched(int,int,ArrayList<CasioGBX100ActivitySample>)",step count data fetched total count total calories data ,Method,,"nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.FetchStepCountDataOperation+onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic)",org.slf4j.Logger+info(String) org.slf4j.Logger+info(String) org.slf4j.Logger+info(String) org.slf4j.Logger+info(String) org.slf4j.Logger+info(String) org.slf4j.Logger+info(String) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+addGBActivitySamples(ArrayList<CasioGBX100ActivitySample>) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+addGBActivitySamples(ArrayList<CasioGBX100ActivitySample>),nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG,314,7,1,,"public void stepCountDataFetched(int totalCount, int totalCalories, ArrayList<CasioGBX100ActivitySample> data) {
        LOG.info(""Got the following step count data: "");
        LOG.info(""Total Count: "" + totalCount);
        LOG.info(""Total Calories: "" + totalCalories);

        addGBActivitySamples(data);
    }",False,False,"This method logs the total count and total calories of step count data, and then calls the addGBActivitySamples method to add the provided data to the activity samples.",True,"The given code is a method named ""stepCountDataFetched"" that takes in three parameters: totalCount (an integer), totalCalories (an integer), and data (an ArrayList of CasioGBX100ActivitySample objects). It logs the total count and total calories, and then calls another method ""addGBActivitySamples"" to add the data to the activity samples."
19,"onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic)",on characteristic changed gatt characteristic ,Method,,,"java.util.UUID+equals(Object) java.util.UUID+equals(Object) java.util.Map+get(Object) java.util.Map+get(Object) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+onReverseFindDevice(boolean) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+onReverseFindDevice(boolean) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+onReverseFindDevice(boolean) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+onReverseFindDevice(boolean) java.util.Map+get(Object) java.util.Map+get(Object) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+performInitialized(String) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+performInitialized(String) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+writeCurrentTime(TransactionBuilder) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+writeCurrentTime(TransactionBuilder) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+queue(BtLEQueue) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+queue(BtLEQueue) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getQueue() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getQueue() org.slf4j.Logger+warn(String) org.slf4j.Logger+warn(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage() org.slf4j.Logger+info(String) org.slf4j.Logger+info(String) java.lang.String+format(String,Object[]) java.lang.String+format(String,Object[]) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic)",nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+CASIO_ALL_FEATURES_CHARACTERISTIC_UUID nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+characteristicToByte nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+characteristicToByte nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG,1472,33,1,,"@Override
    public boolean onCharacteristicChanged(BluetoothGatt gatt,
                                           BluetoothGattCharacteristic characteristic) {
        UUID characteristicUUID = characteristic.getUuid();
        byte[] data = characteristic.getValue();
        if (data.length == 0)
            return true;

        if (characteristicUUID.equals(CasioConstants.CASIO_ALL_FEATURES_CHARACTERISTIC_UUID)) {
            if(data[0] == CasioConstants.characteristicToByte.get(""ALERT_LEVEL"")) {
                if(data[1] == 0x02) {
                    onReverseFindDevice(true);
                } else {
                    onReverseFindDevice(false);
                }
                return true;
            } else if(data[0] == CasioConstants.characteristicToByte.get(""CASIO_CURRENT_TIME_MANAGER"")) {
                if(data[1] == 0x00) {
                    try {
                        TransactionBuilder builder = performInitialized(""writeCurrentTime"");
                        writeCurrentTime(builder);
                        builder.queue(getQueue());
                    } catch (IOException e) {
                        LOG.warn(""writing current time failed: "" + e.getMessage());
                    }
                }
            }

        }

        LOG.info(""Unhandled characteristic change: "" + characteristicUUID + "" code: "" + String.format(""0x%1x ..."", data[0]));
        return super.onCharacteristicChanged(gatt, characteristic);
    }",False,False,"This method is an override of the onCharacteristicChanged method in the BluetoothGattCallback class. It is used to handle changes in BluetoothGattCharacteristic values. It checks the characteristic UUID and performs different actions based on the data received. If the data length is 0, it returns true. If the characteristic UUID matches a specific value, it performs certain actions. If the data matches specific values, it calls the onReverseFindDevice method or performs other operations. If the characteristic UUID does not match any specific value, it logs an info message and calls the super method.",True,This code is an implementation of the `onCharacteristicChanged` method in a BluetoothGattCallback. It handles characteristic changes received from a Bluetooth device. It checks the UUID of the characteristic and performs different actions based on the received data.
20,useAutoConnect(),use auto connect ,Method,,,,,74,4,1,,"@Override
    public boolean useAutoConnect() {
        return true;
    }",True,True,"This method serves to determine whether auto-connect should be used. It returns a boolean value of true, indicating that auto-connect should be used.",True,"The code snippet defines a method named ""useAutoConnect()"" that returns a boolean value. The method is overridden from a superclass or interface and always returns true, indicating that auto-connect functionality should be used."
21,syncProfile(),sync profile ,Method,,"nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.GetConfigurationOperation+onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.InitOperationGBX100+onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic)","nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+AbstractBTLEOperation(T) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.util.GB+toast(Context,String,int,int,Throwable) nodomain.freeyourgadget.gadgetbridge.util.GB+toast(Context,String,int,int,Throwable) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext()",nodomain.freeyourgadget.gadgetbridge.util.GB+ERROR,304,7,1,,"public void syncProfile() {
        try {
            new SetConfigurationOperation(this, CasioConstants.ConfigurationOption.OPTION_ALL).perform();
        } catch (IOException e) {
            GB.toast(getContext(), ""Sending Casio configuration failed"", Toast.LENGTH_SHORT, GB.ERROR, e);
        }
    }",False,False,"The function of the method is to synchronize the profile by performing a set configuration operation with all options. If an IOException occurs, it displays a toast message indicating that the Casio configuration failed to send.",True,"The `syncProfile()` method attempts to perform a configuration operation by calling the `SetConfigurationOperation` class with the specified option. If an `IOException` occurs during the operation, it displays a toast message indicating the failure and includes the exception details."
22,"showNotification(byte,String,String,String,int,boolean)",show notification icon sender title message id delete ,Method,onNotification(NotificationSpec) onDeleteNotification(int) onSetCallState(CallSpec),,"java.lang.String+getBytes(Charset) java.lang.String+getBytes(Charset) java.lang.String+getBytes(Charset) java.lang.String+getBytes(Charset) java.lang.String+getBytes(Charset) java.lang.String+getBytes(Charset) java.util.Arrays+copyOf(byte[],int) java.util.Arrays+copyOf(byte[],int) java.util.Arrays+copyOf(byte[],int) java.util.Arrays+copyOf(byte[],int) java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) java.util.Arrays+copyOf(byte[],int) java.util.Arrays+copyOf(byte[],int) java.util.Arrays+copyOf(byte[],int) java.util.Arrays+copyOf(byte[],int) java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) java.util.Arrays+copyOf(byte[],int) java.util.Arrays+copyOf(byte[],int) java.util.Arrays+copyOf(byte[],int) java.util.Arrays+copyOf(byte[],int) java.util.Arrays+copyOf(byte[],int) java.util.Arrays+copyOf(byte[],int) java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+performInitialized(String) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+performInitialized(String) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+write(BluetoothGattCharacteristic,byte[]) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+write(BluetoothGattCharacteristic,byte[]) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getCharacteristic(UUID) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getCharacteristic(UUID) org.slf4j.Logger+info(String) org.slf4j.Logger+info(String) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+queue(BtLEQueue) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+queue(BtLEQueue) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getQueue() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getQueue() org.slf4j.Logger+warn(String) org.slf4j.Logger+warn(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage()",java.nio.charset.StandardCharsets+UTF_8 java.nio.charset.StandardCharsets+UTF_8 java.nio.charset.StandardCharsets+UTF_8 nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+CASIO_NOTIFICATION_CHARACTERISTIC_UUID nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG,3852,82,2,,"private void showNotification(byte icon, String sender, String title, String message, int id, boolean delete) {
        byte[] titleBytes = new byte[0];
        if(title != null)
            titleBytes = title.getBytes(StandardCharsets.UTF_8);

        byte[] messageBytes = new byte[0];
        if(message != null)
            messageBytes = message.getBytes(StandardCharsets.UTF_8);

        byte[] senderBytes = new byte[0];
        if(sender != null)
            senderBytes = sender.getBytes(StandardCharsets.UTF_8);

        byte[] arr = new byte[22];
        arr[0] = (byte)(id & 0xff);
        arr[1] = (byte) ((id >> 8) & 0xff);
        arr[2] = (byte) ((id >> 16) & 0xff);
        arr[3] = (byte) ((id >> 24) & 0xff);
        arr[4] = delete ? (byte) 0x02 : (byte) 0x00;
        arr[5] = (byte) 0x01; // Set to 0x00 to not vibrate/ring for this notification
        arr[6] = icon;
        // These bytes contain a timestamp, not yet decoded / implemented
        // ASCII Codes:
        /*arr[7] = (byte) 0x32; // 2
        arr[8] = (byte) 0x30;   // 0
        arr[9] = (byte) 0x32;   // 2
        arr[10] = (byte) 0x30;  // 0
        arr[11] = (byte) 0x31;  // 1
        arr[12] = (byte) 0x31;  // 1
        arr[13] = (byte) 0x31;  // 1
        arr[14] = (byte) 0x33;  // 3
        arr[15] = (byte) 0x54;  // T
        arr[16] = (byte) 0x30;  // 0
        arr[17] = (byte) 0x39;  // 9
        arr[18] = (byte) 0x33;  // 3
        arr[19] = (byte) 0x31;  // 1
        arr[20] = (byte) 0x35;  // 5
        arr[21] = (byte) 0x33;*/// 3
        byte[] copy = Arrays.copyOf(arr, arr.length + 2);
        copy[copy.length-2] = 0;
        copy[copy.length-1] = 0;
        if(senderBytes.length > 0) {
            copy = Arrays.copyOf(copy, copy.length + senderBytes.length);
            copy[copy.length-2-senderBytes.length] = (byte)(senderBytes.length & 0xff);
            copy[copy.length-1-senderBytes.length] = (byte)((senderBytes.length >> 8) & 0xff);
            System.arraycopy(senderBytes, 0, copy, copy.length - senderBytes.length, senderBytes.length);
        }
        copy = Arrays.copyOf(copy, copy.length + 2);
        copy[copy.length-2] = 0;
        copy[copy.length-1] = 0;
        if(titleBytes.length > 0) {
            copy = Arrays.copyOf(copy, copy.length + titleBytes.length);
            copy[copy.length-2-titleBytes.length] = (byte)(titleBytes.length & 0xff);
            copy[copy.length-1-titleBytes.length] = (byte)((titleBytes.length >> 8) & 0xff);
            System.arraycopy(titleBytes, 0, copy, copy.length - titleBytes.length, titleBytes.length);
        }
        copy = Arrays.copyOf(copy, copy.length + 2);
        copy[copy.length-2] = 0;
        copy[copy.length-1] = 0;
        //subtitle is currently not supported
        copy = Arrays.copyOf(copy, copy.length + 2);
        copy[copy.length-2] = 0;
        copy[copy.length-1] = 0;
        if(messageBytes.length > 0) {
            copy = Arrays.copyOf(copy, copy.length + messageBytes.length);
            copy[copy.length-2-messageBytes.length] = (byte)(messageBytes.length & 0xff);
            copy[copy.length-1-messageBytes.length] = (byte)((messageBytes.length >> 8) & 0xff);
            System.arraycopy(messageBytes, 0, copy, copy.length - messageBytes.length, messageBytes.length);
        }
        for(int i=0; i<copy.length; i++) {
            copy[i] = (byte)(~copy[i]);
        }

        try {
            TransactionBuilder builder = performInitialized(""showNotification"");
            builder.write(getCharacteristic(CasioConstants.CASIO_NOTIFICATION_CHARACTERISTIC_UUID), copy);
            LOG.info(""Showing notification, title: "" + title + "" message (not sent): "" + message);
            builder.queue(getQueue());
        } catch (IOException e) {
            LOG.warn(""showNotification failed: "" + e.getMessage());
        }
    }",False,False,"The function ""showNotification"" is a private method that takes in several parameters (icon, sender, title, message, id, delete) and performs operations to create and display a notification on a device. It converts the title, message, and sender strings into byte arrays, sets values in a byte array, and then sends the byte array to a specified characteristic using a TransactionBuilder.",False,"The code defines a private method called ""showNotification"" that takes in various parameters such as icon, sender, title, message, id, and delete. It creates byte arrays for the title, message, and sender, and then constructs a byte array ""arr"" with specific values. It then copies the values from the byte arrays into a new byte array ""copy"", performs bitwise negation on each element of ""copy"", and finally writes ""copy"" to a characteristic using a TransactionBuilder."
23,onNotification(NotificationSpec),on notification notification spec ,Method,,,"nodomain.freeyourgadget.gadgetbridge.GBApplication+getDeviceSpecificSharedPrefs(String) nodomain.freeyourgadget.gadgetbridge.GBApplication+getDeviceSpecificSharedPrefs(String) nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+getAddress() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+getAddress() org.slf4j.Logger+info(String) org.slf4j.Logger+info(String) nodomain.freeyourgadget.gadgetbridge.model.NotificationSpec+getId() nodomain.freeyourgadget.gadgetbridge.model.NotificationSpec+getId() nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+showNotification(byte,String,String,String,int,boolean) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+showNotification(byte,String,String,String,int,boolean) nodomain.freeyourgadget.gadgetbridge.model.NotificationSpec+getId() nodomain.freeyourgadget.gadgetbridge.model.NotificationSpec+getId() java.util.ArrayList+add(int,E) java.util.ArrayList+add(int,E) nodomain.freeyourgadget.gadgetbridge.model.NotificationSpec+getId() nodomain.freeyourgadget.gadgetbridge.model.NotificationSpec+getId() +() +run()",nodomain.freeyourgadget.gadgetbridge.model.NotificationSpec+type nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+CATEGORY_SCHEDULE_AND_ALARM nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+CATEGORY_EMAIL nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+CATEGORY_SNS nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+CATEGORY_SNS nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.model.NotificationSpec+sender nodomain.freeyourgadget.gadgetbridge.model.NotificationSpec+title nodomain.freeyourgadget.gadgetbridge.model.NotificationSpec+body nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mSyncedNotificationIDs nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mAutoRemoveMessageHandler,1734,37,1,,"@Override
    public void onNotification(final NotificationSpec notificationSpec) {
        byte icon;
        boolean autoremove = false;
        switch (notificationSpec.type.getGenericType()) {
            case ""generic_calendar"":
                icon = CasioConstants.CATEGORY_SCHEDULE_AND_ALARM;
                break;
            case ""generic_email"":
                icon = CasioConstants.CATEGORY_EMAIL;
                break;
            case ""generic_sms"":
                icon = CasioConstants.CATEGORY_SNS;
                SharedPreferences sharedPreferences = GBApplication.getDeviceSpecificSharedPrefs(getDevice().getAddress());
                autoremove = sharedPreferences.getBoolean(PREF_AUTOREMOVE_MESSAGE, false);
                break;
            default:
                icon = CasioConstants.CATEGORY_SNS;
                break;
        }
        LOG.info(""onNotification id="" + notificationSpec.getId());
        showNotification(icon, notificationSpec.sender, notificationSpec.title, notificationSpec.body, notificationSpec.getId(), false);
        mSyncedNotificationIDs.add(notificationSpec.getId());
        if(autoremove) {
            mAutoRemoveMessageHandler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    onDeleteNotification(notificationSpec.getId());
                }
            }, CasioConstants.CASIO_AUTOREMOVE_MESSAGE_DELAY);
        }
        // The watch only holds up to 10 notifications. However, the user might have deleted
        // some notifications in the meantime, so to be sure, we keep the last 100 IDs.
        if(mSyncedNotificationIDs.size() > 100) {
            mSyncedNotificationIDs.remove(0);
        }
    }",False,False,"This method is an event handler that is called when a notification is received. It determines the icon to display based on the type of notification, shows the notification on the device, adds the notification ID to a list, and optionally schedules the notification to be automatically removed after a delay.",True,"This code is an implementation of the `onNotification` method, which handles incoming notifications. It determines the appropriate icon for the notification based on its type, shows the notification on the device, adds the notification ID to a list, and optionally schedules automatic removal of the notification. Additionally, it ensures that the list of notification IDs does not exceed 100 entries."
24,onDeleteNotification(int),on delete notification id ,Method,,,"org.slf4j.Logger+info(String) org.slf4j.Logger+info(String) java.util.ArrayList+contains(Object) java.util.ArrayList+contains(Object) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+showNotification(byte,String,String,String,int,boolean) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+showNotification(byte,String,String,String,int,boolean) java.util.ArrayList+remove(Object) java.util.ArrayList+remove(Object)",nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mSyncedNotificationIDs nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+CATEGORY_OTHER nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mSyncedNotificationIDs,341,9,1,,"@Override
    public void onDeleteNotification(int id) {
        LOG.info(""onDeleteNofication id="" + id);
        Integer idInt = id;
        if(mSyncedNotificationIDs.contains(idInt)) {
            showNotification(CasioConstants.CATEGORY_OTHER, null, null, null, id, true);
            mSyncedNotificationIDs.remove(idInt);
        }
    }",False,False,"This method is used to handle the deletion of a notification. It logs the deletion, checks if the notification ID is in a set of synced notification IDs, and if so, shows the notification and removes the ID from the set.",True,"This code is an implementation of the `onDeleteNotification` method. It logs the ID of the notification being deleted, converts it to an Integer, and checks if it exists in a set of synced notification IDs. If it does, it shows a notification with certain parameters and removes the ID from the set."
25,onReverseFindDevice(boolean),on reverse find device start ,Method,"onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic) onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic)",,nodomain.freeyourgadget.gadgetbridge.GBApplication+getDeviceSpecificSharedPrefs(String) nodomain.freeyourgadget.gadgetbridge.GBApplication+getDeviceSpecificSharedPrefs(String) nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+getAddress() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+getAddress() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() java.lang.String+equals(Object) java.lang.String+equals(Object) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() nodomain.freeyourgadget.gadgetbridge.deviceevents.GBDeviceEventFindPhone+GBDeviceEventFindPhone() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+evaluateGBDeviceEvent(GBDeviceEvent) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+evaluateGBDeviceEvent(GBDeviceEvent) java.lang.String+equals(Object) java.lang.String+equals(Object) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String) org.slf4j.Logger+warn(String) org.slf4j.Logger+warn(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage() +() +run(),nodomain.freeyourgadget.gadgetbridge.deviceevents.GBDeviceEventFindPhone+event nodomain.freeyourgadget.gadgetbridge.devices.makibeshr3.MakibesHR3Constants+PREF_FIND_PHONE_DURATION nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mFindPhoneHandler nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mFindPhoneHandler,1941,44,2,,"private void onReverseFindDevice(boolean start) {
        if (start) {
            SharedPreferences sharedPreferences = GBApplication.getDeviceSpecificSharedPrefs(getDevice().getAddress());

            String findPhone = sharedPreferences.getString(PREF_FIND_PHONE_ENABLED, getContext().getString(R.string.p_off));

            if(findPhone.equals(getContext().getString(R.string.p_off)))
                return;

            GBDeviceEventFindPhone findPhoneEvent = new GBDeviceEventFindPhone();
            findPhoneEvent.event = GBDeviceEventFindPhone.Event.START;
            evaluateGBDeviceEvent(findPhoneEvent);

            if(!findPhone.equals(getContext().getString(R.string.p_on))) {
                String duration = sharedPreferences.getString(MakibesHR3Constants.PREF_FIND_PHONE_DURATION, ""0"");

                try {
                    int iDuration;

                    try {
                        iDuration = Integer.parseInt(duration);
                    } catch (Exception ex) {
                        LOG.warn(ex.getMessage());
                        iDuration = 60;
                    }
                    if(iDuration > 0) {
                        this.mFindPhoneHandler.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                onReverseFindDevice(false);
                            }
                        }, iDuration * 1000);
                    }
                } catch (Exception e) {
                    LOG.error(""Unexpected exception in MiBand2Coordinator.getTime: "" + e.getMessage());
                }
            }
        } else {
            // Always send stop, ignore preferences.
            GBDeviceEventFindPhone findPhoneEvent = new GBDeviceEventFindPhone();
            findPhoneEvent.event = GBDeviceEventFindPhone.Event.STOP;
            evaluateGBDeviceEvent(findPhoneEvent);
        }
    }",False,False,"The function of the method is to start or stop the ""Find Phone"" feature on a device. If the parameter ""start"" is true, it retrieves the preference for enabling the feature and starts it if enabled. It also checks the duration for the feature and schedules a delayed call to stop it after the specified duration. If the parameter ""start"" is false, it stops the feature regardless of the preferences.",False,"This code defines a private method called ""onReverseFindDevice"" that is used to start or stop a find phone event for a specific device. It checks the shared preferences to determine if the find phone feature is enabled and if a duration is specified, it schedules a delayed task to stop the find phone event after the specified duration."
26,writeCurrentTime(TransactionBuilder),write current time builder ,Method,"onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic) onSetTime()","nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.InitOperationGBX100+onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic)","java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.concurrent.TimeUnit+toSeconds(long) java.util.concurrent.TimeUnit+toSeconds(long) java.util.Calendar+get(int) java.util.Calendar+get(int) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+writeAllFeatures(TransactionBuilder,byte[]) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+writeAllFeatures(TransactionBuilder,byte[])",java.util.Calendar+YEAR nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+characteristicToByte java.util.Calendar+MONTH java.util.Calendar+DAY_OF_MONTH java.util.Calendar+HOUR_OF_DAY java.util.Calendar+MINUTE java.util.Calendar+SECOND java.util.Calendar+DAY_OF_WEEK java.util.concurrent.TimeUnit+MILLISECONDS java.util.Calendar+MILLISECOND,933,22,1,,"public void writeCurrentTime(TransactionBuilder builder) {
        byte[] arr = new byte[11];
        Calendar cal = Calendar.getInstance();

        int year = cal.get(Calendar.YEAR);
        arr[0] = CasioConstants.characteristicToByte.get(""CASIO_CURRENT_TIME"");
        arr[1] = (byte)(year & 0xff);
        arr[2] = (byte)((year >>> 8) & 0xff);
        arr[3] = (byte)(1 + cal.get(Calendar.MONTH));
        arr[4] = (byte)cal.get(Calendar.DAY_OF_MONTH);
        arr[5] = (byte)cal.get(Calendar.HOUR_OF_DAY);
        arr[6] = (byte)cal.get(Calendar.MINUTE);
        arr[7] = (byte)(1 + cal.get(Calendar.SECOND));
        byte dayOfWk = (byte)(cal.get(Calendar.DAY_OF_WEEK) - 1);
        if(dayOfWk == 0)
            dayOfWk = 7;
        arr[8] = dayOfWk;
        arr[9] = (byte)(int) TimeUnit.MILLISECONDS.toSeconds(256 * cal.get(Calendar.MILLISECOND));
        arr[10] = 1; // or 0?

        writeAllFeatures(builder, arr);
    }",False,False,"The function writes the current time to a byte array in a specific format, using the Calendar class to get the year, month, day, hour, minute, second, and day of the week. It then converts the milliseconds to seconds and writes all the features to a TransactionBuilder object.",False,"The `writeCurrentTime` method writes the current time to a `TransactionBuilder` object by converting the various components of the current time (year, month, day, hour, minute, second, day of week, and millisecond) into bytes and storing them in an array. The array is then passed to the `writeAllFeatures` method to complete the writing process."
27,"writeAllFeatures(TransactionBuilder,byte[])",write all features builder arr ,Method,writeCurrentTime(TransactionBuilder) onSetAlarms(ArrayList<? extends Alarm>) onSetAlarms(ArrayList<? extends Alarm>),"nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.InitOperationGBX100+writeAllFeatures(byte[]) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.InitOperationGBX100+writeAllFeaturesInit(TransactionBuilder) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.SetConfigurationOperation+onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.SetConfigurationOperation+onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.SetConfigurationOperation+onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic)","nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+write(BluetoothGattCharacteristic,byte[]) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+write(BluetoothGattCharacteristic,byte[]) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getCharacteristic(UUID) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getCharacteristic(UUID)",nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+CASIO_ALL_FEATURES_CHARACTERISTIC_UUID,178,3,1,,"public void writeAllFeatures(TransactionBuilder builder, byte[] arr) {
        builder.write(getCharacteristic(CasioConstants.CASIO_ALL_FEATURES_CHARACTERISTIC_UUID), arr);
    }",False,False,The function of the method is to write all features of a transaction builder using a given byte array.,False,"The given code defines a method named ""writeAllFeatures"" that takes a TransactionBuilder object and a byte array as parameters. It writes the byte array to a specific characteristic identified by the UUID ""CASIO_ALL_FEATURES_CHARACTERISTIC_UUID"" using the TransactionBuilder's write method."
28,"writeAllFeaturesRequest(TransactionBuilder,byte[])",write all features request builder arr ,Method,onTestNewFunction(),nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.GetConfigurationOperation+doPerform() nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.GetConfigurationOperation+requestBasicSettings() nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.InitOperationGBX100+writeAllFeaturesRequest(byte[]) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.InitOperationGBX100+requestWatchName(TransactionBuilder) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.SetConfigurationOperation+doPerform() nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.SetConfigurationOperation+requestBasicSettings() nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.SetConfigurationOperation+requestTargetSettings(),"nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+write(BluetoothGattCharacteristic,byte[]) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+write(BluetoothGattCharacteristic,byte[]) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getCharacteristic(UUID) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getCharacteristic(UUID)",nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+CASIO_READ_REQUEST_FOR_ALL_FEATURES_CHARACTERISTIC_UUID,202,3,1,,"public void writeAllFeaturesRequest(TransactionBuilder builder, byte[] arr) {
        builder.write(getCharacteristic(CasioConstants.CASIO_READ_REQUEST_FOR_ALL_FEATURES_CHARACTERISTIC_UUID), arr);
    }",False,False,This method writes a request for all features to a transaction builder by calling the write method with a characteristic and a byte array as parameters.,False,"The given code defines a method named ""writeAllFeaturesRequest"" that takes a TransactionBuilder object and a byte array as parameters. This method writes the byte array to a specific characteristic using the TransactionBuilder's write method."
29,onSetAlarms(ArrayList<? extends Alarm>),on set alarms alarms ,Method,,,"nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+isConnected() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+isConnected() java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) nodomain.freeyourgadget.gadgetbridge.model.Alarm+getEnabled() nodomain.freeyourgadget.gadgetbridge.model.Alarm+getEnabled() nodomain.freeyourgadget.gadgetbridge.model.Alarm+getRepetition(int) nodomain.freeyourgadget.gadgetbridge.model.Alarm+getRepetition(int) nodomain.freeyourgadget.gadgetbridge.model.Alarm+getHour() nodomain.freeyourgadget.gadgetbridge.model.Alarm+getHour() nodomain.freeyourgadget.gadgetbridge.model.Alarm+getMinute() nodomain.freeyourgadget.gadgetbridge.model.Alarm+getMinute() java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+performInitialized(String) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+performInitialized(String) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+writeAllFeatures(TransactionBuilder,byte[]) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+writeAllFeatures(TransactionBuilder,byte[]) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+writeAllFeatures(TransactionBuilder,byte[]) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+writeAllFeatures(TransactionBuilder,byte[]) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+queue(BtLEQueue) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+queue(BtLEQueue) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getQueue() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getQueue() org.slf4j.Logger+error(String) org.slf4j.Logger+error(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage()",nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+characteristicToByte nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+characteristicToByte nodomain.freeyourgadget.gadgetbridge.model.Alarm+ALARM_ONCE nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG,1478,42,1,,"@Override
    public void onSetAlarms(ArrayList<? extends Alarm> alarms) {
        int alarmOffset = 4;
        byte[] data1 = new byte[5];
        byte[] data2 = new byte[17];

        if(!isConnected())
            return;

        data1[0] = CasioConstants.characteristicToByte.get(""CASIO_SETTING_FOR_ALM"");
        data2[0] = CasioConstants.characteristicToByte.get(""CASIO_SETTING_FOR_ALM2"");

        for(int i=0; i<alarms.size(); i++)
        {
            byte[] settings = new byte[4];
            Alarm alm = alarms.get(i);
            if(alm.getEnabled()) {
                settings[0] = 0x40;
            } else {
                settings[0] = 0;
            }
            if(alm.getRepetition(Alarm.ALARM_ONCE)) {
                settings[i * alarmOffset] |= 0x20;
            }
            settings[1] = 0x40;
            settings[2] = (byte)alm.getHour();
            settings[3] = (byte)alm.getMinute();
            if(i == 0) {
                System.arraycopy(settings, 0, data1, 1, settings.length);
            } else {
                System.arraycopy(settings, 0, data2, 1 + (i-1)*4, settings.length);
            }
        }
        try {
            TransactionBuilder builder = performInitialized(""setAlarm"");
            writeAllFeatures(builder, data1);
            writeAllFeatures(builder, data2);
            builder.queue(getQueue());
        } catch(IOException e) {
            LOG.error(""Error setting alarm: "" + e.getMessage());
        }
    }",False,False,"The function of this method is to set alarms on a device. It takes an ArrayList of Alarm objects as input, and for each alarm, it sets the corresponding settings in byte arrays data1 and data2. It then performs a transaction to write the alarm settings to the device.",True,"This code is a method that sets alarms on a device. It takes in a list of alarms, converts their settings into byte arrays, and writes those arrays to the device using a transaction builder. If there is an error during the process, it logs an error message."
30,onSetTime(),on set time ,Method,,,org.slf4j.Logger+debug(String) org.slf4j.Logger+debug(String) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+performInitialized(String) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+performInitialized(String) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+writeCurrentTime(TransactionBuilder) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+writeCurrentTime(TransactionBuilder) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+queue(BtLEQueue) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+queue(BtLEQueue) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getQueue() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getQueue() org.slf4j.Logger+warn(String) org.slf4j.Logger+warn(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage(),nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG,355,11,1,,"@Override
    public void onSetTime() {
        LOG.debug(""onSetTime called"");
        try {
            TransactionBuilder builder = performInitialized(""onSetTime"");
            writeCurrentTime(builder);
            builder.queue(getQueue());
        } catch (IOException e) {
            LOG.warn(""onSetTime failed: "" + e.getMessage());
        }
    }",False,False,"This method is an overridden function that is called when the time is set. It logs a debug message, performs some operations related to setting the time, and handles any IOException that may occur.",True,"The `onSetTime` method is called when a time is set. It creates a `TransactionBuilder` object, writes the current time using the builder, and adds the builder to a queue. If an `IOException` occurs during this process, a warning message is logged."
31,onSetCallState(CallSpec),on set call state call spec ,Method,,,"nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+showNotification(byte,String,String,String,int,boolean) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+showNotification(byte,String,String,String,int,boolean) nodomain.freeyourgadget.gadgetbridge.GBApplication+getDeviceSpecificSharedPrefs(String) nodomain.freeyourgadget.gadgetbridge.GBApplication+getDeviceSpecificSharedPrefs(String) nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+getAddress() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getDevice() nodomain.freeyourgadget.gadgetbridge.impl.GBDevice+getAddress() +() +run()",nodomain.freeyourgadget.gadgetbridge.model.CallSpec+command nodomain.freeyourgadget.gadgetbridge.model.CallSpec+CALL_INCOMING nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+CATEGORY_INCOMING_CALL nodomain.freeyourgadget.gadgetbridge.model.CallSpec+name nodomain.freeyourgadget.gadgetbridge.model.CallSpec+number nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mLastCallId nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mFakeRingDurationCounter nodomain.freeyourgadget.gadgetbridge.devices.casio.CasioConstants+CASIO_FAKE_RING_RETRIES nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mFakeRingDurationCounter nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mFakeRingDurationHandler,1712,30,1,,"@Override
    public void onSetCallState(final CallSpec callSpec) {
        switch (callSpec.command) {
            case CallSpec.CALL_INCOMING:
                showNotification(CasioConstants.CATEGORY_INCOMING_CALL, ""Phone"", callSpec.name, callSpec.number, mLastCallId, false);
                SharedPreferences sharedPreferences = GBApplication.getDeviceSpecificSharedPrefs(getDevice().getAddress());
                boolean fakeRingDuration = sharedPreferences.getBoolean(PREF_FAKE_RING_DURATION, false);
                if(fakeRingDuration && mFakeRingDurationCounter < CasioConstants.CASIO_FAKE_RING_RETRIES) {
                    mFakeRingDurationCounter++;
                    mFakeRingDurationHandler.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            showNotification(CasioConstants.CATEGORY_INCOMING_CALL, null, null, null, mLastCallId, true);
                            onSetCallState(callSpec);
                        }
                    }, CasioConstants.CASIO_FAKE_RING_SLEEP_DURATION);
                } else {
                    mFakeRingDurationCounter = 0;
                }
                mRingNotificationPending = true;
                break;
            default:
                if(mRingNotificationPending) {
                    mFakeRingDurationHandler.removeCallbacksAndMessages(null);
                    mFakeRingDurationCounter = 0;
                    showNotification(CasioConstants.CATEGORY_INCOMING_CALL, null, null, null, mLastCallId, true);
                    mLastCallId = new AtomicInteger((int) (System.currentTimeMillis() / 1000)).incrementAndGet();
                }
        }
    }",False,False,"This method is called when the call state changes. If the call is incoming, it shows a notification and handles fake ring duration. If the call is not incoming, it cancels the fake ring duration and shows a notification.",True,"This code is an implementation of the `onSetCallState` method, which is called when the call state changes. It handles incoming calls by showing a notification and optionally simulating a fake ring duration. If the call state is not incoming, it cancels any pending fake ring duration and shows a notification for the previous call."
32,onSetCannedMessages(CannedMessagesSpec),on set canned messages canned messages spec ,Method,,,,,93,4,1,,"@Override
    public void onSetCannedMessages(CannedMessagesSpec cannedMessagesSpec) {

    }",True,True,This method is used to handle the event of setting canned messages. It takes a CannedMessagesSpec object as a parameter and does not return anything.,True,"The code snippet defines an overridden method called ""onSetCannedMessages"" that takes a parameter of type ""CannedMessagesSpec"". The purpose or functionality of this method is not provided in the given code."
33,onSetMusicState(MusicStateSpec),on set music state state spec ,Method,,,,,76,4,1,,"@Override
    public void onSetMusicState(MusicStateSpec stateSpec) {

    }",True,True,This method is used to override the onSetMusicState function. It takes a MusicStateSpec object as a parameter and does not return anything.,True,"The code snippet defines an overridden method called ""onSetMusicState"" that takes a parameter of type ""MusicStateSpec"". The purpose or functionality of this method is not provided in the given code."
34,onSetMusicInfo(MusicSpec),on set music info music spec ,Method,,,,,70,4,1,,"@Override
    public void onSetMusicInfo(MusicSpec musicSpec) {

    }",True,True,This method is used to override the onSetMusicInfo function. It takes a MusicSpec object as a parameter and does not return anything.,True,"The code snippet defines an overridden method called ""onSetMusicInfo"" that takes a parameter of type ""MusicSpec"". The purpose or functionality of this method is not specified in the given code."
35,onEnableRealtimeSteps(boolean),on enable realtime steps enable ,Method,,,,,71,3,1,,"@Override
    public void onEnableRealtimeSteps(boolean enable) {
    }",False,True,This method is used to enable or disable the tracking of real-time steps.,True,"The code snippet defines a method called ""onEnableRealtimeSteps"" which takes a boolean parameter. However, the method does not contain any implementation or functionality."
36,onInstallApp(Uri),on install app uri ,Method,,,,,56,4,1,,"@Override
    public void onInstallApp(Uri uri) {

    }",True,True,"This method is used to handle the event of installing an app. It takes a Uri parameter, which represents the location of the app to be installed.",True,"The code snippet defines an overridden method called ""onInstallApp"" that takes a Uri parameter. However, the method does not contain any implementation or logic, as the method body is empty."
37,onAppInfoReq(),on app info req ,Method,,,,,49,4,1,,"@Override
    public void onAppInfoReq() {

    }",True,True,"This method serves as an override for the onAppInfoReq function, which does not return any value and does not take any parameters.",True,"The code snippet represents a method called ""onAppInfoReq"" that does not have any implementation. It is likely a callback method that is intended to be overridden in a subclass to handle a request for application information."
38,"onAppStart(UUID,boolean)",on app start uuid start ,Method,,,,,71,4,1,,"@Override
    public void onAppStart(UUID uuid, boolean start) {

    }",True,True,"This method is an overridden function that is called when the app starts. It takes a UUID and a boolean parameter, but it does not return any value.",True,"The code snippet defines an overridden method called ""onAppStart"" that takes a UUID and a boolean parameter. It does not have any implementation logic inside the method body."
39,onAppDelete(UUID),on app delete uuid ,Method,,,,,57,4,1,,"@Override
    public void onAppDelete(UUID uuid) {

    }",True,True,"This method serves as an override for the onAppDelete function, which takes a UUID parameter and does not return any value.",True,"The code snippet defines an overridden method called ""onAppDelete"" that takes a UUID parameter. However, the method body is empty, indicating that it does not perform any specific actions or operations."
40,"onAppConfiguration(UUID,String,Integer)",on app configuration app uuid config id ,Method,,,,,94,4,1,,"@Override
    public void onAppConfiguration(UUID appUuid, String config, Integer id) {

    }",True,True,"This method serves as an override for the onAppConfiguration function. It takes in three parameters: appUuid (of type UUID), config (of type String), and id (of type Integer). The function does not return any value (void).",True,"The code snippet defines an overridden method called ""onAppConfiguration"" that takes three parameters: an app UUID, a configuration string, and an ID. The purpose or functionality of this method is not specified in the given code."
41,onAppReorder(UUID[]),on app reorder uuids ,Method,,,,,61,4,1,,"@Override
    public void onAppReorder(UUID[] uuids) {

    }",True,True,"This method serves as an override for the onAppReorder function, which takes an array of UUIDs as a parameter and does not return any value.",True,"The code snippet defines an overridden method called ""onAppReorder"" that takes an array of UUIDs as a parameter. The purpose or functionality of this method is not specified in the given code."
42,onFetchRecordedData(int),on fetch recorded data data types ,Method,,,"nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.FetchStepCountDataOperation+FetchStepCountDataOperation(CasioGBX100DeviceSupport) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.util.GB+toast(Context,String,int,int,Throwable) nodomain.freeyourgadget.gadgetbridge.util.GB+toast(Context,String,int,int,Throwable) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext()",nodomain.freeyourgadget.gadgetbridge.util.GB+ERROR,278,8,1,,"@Override
    public void onFetchRecordedData(int dataTypes) {
        try {
            new FetchStepCountDataOperation(this).perform();
        } catch(IOException e) {
            GB.toast(getContext(), ""Error fetching data"", Toast.LENGTH_SHORT, GB.ERROR, e);
        }
    }",False,False,"This method is an override of the onFetchRecordedData method. It tries to perform a FetchStepCountDataOperation and catches any IOException, displaying an error toast message with the exception.",True,"The code is an overridden method that is called when recorded data is fetched. It creates a new instance of the FetchStepCountDataOperation class and performs the fetch operation. If an IOException occurs, it displays an error toast message with the exception details."
43,onReset(int),on reset flags ,Method,,,,,53,4,1,,"@Override
    public void onReset(int flags) {

    }",True,True,"This method serves as an override for the onReset() function, which takes an integer parameter called flags and does not return any value.",True,"The code snippet represents a method named ""onReset"" that takes an integer parameter ""flags"" and has a void return type. However, without the implementation details, it is not possible to provide a more specific summary of the function's purpose or functionality."
44,onHeartRateTest(),on heart rate test ,Method,,,,,52,4,1,,"@Override
    public void onHeartRateTest() {

    }",True,True,This method is an overridden function that serves to handle or perform a specific action when a heart rate test is triggered or called.,True,"The code snippet represents an overridden method called ""onHeartRateTest"" which does not contain any implementation. It is likely a placeholder method that needs to be filled with the desired functionality related to heart rate testing."
45,onEnableRealtimeHeartRateMeasurement(boolean),on enable realtime heart rate measurement enable ,Method,,,,,87,4,1,,"@Override
    public void onEnableRealtimeHeartRateMeasurement(boolean enable) {

    }",True,True,This method is used to enable or disable real-time heart rate measurement.,True,"The code snippet defines a method called ""onEnableRealtimeHeartRateMeasurement"" which takes a boolean parameter ""enable"". The purpose of this method is not specified in the given code, so a summary description cannot be provided without further context or information."
46,onFindDevice(boolean),on find device start ,Method,,,,,62,4,1,,"@Override
    public void onFindDevice(boolean start) {

    }",True,True,"This method serves as an override for the onFindDevice function. It takes a boolean parameter ""start"" and does not return anything.",True,"The code snippet defines an overridden method called ""onFindDevice"" which takes a boolean parameter. The purpose or functionality of this method is not specified in the given code."
47,onSetConstantVibration(int),on set constant vibration integer ,Method,,,,,70,4,1,,"@Override
    public void onSetConstantVibration(int integer) {

    }",True,True,"This method serves as an override for the onSetConstantVibration function, which takes an integer parameter and does not return any value.",True,"The code snippet defines a method named ""onSetConstantVibration"" that takes an integer parameter. However, the method does not contain any implementation or logic, as the method body is empty."
48,onScreenshotReq(),on screenshot req ,Method,,,,,52,4,1,,"@Override
    public void onScreenshotReq() {

    }",True,True,This method serves as an override for the onScreenshotReq() function.,True,"The code snippet represents a method called ""onScreenshotReq()"" that does not have any implementation. It is likely intended to handle a screenshot request event, but the specific functionality is not provided in the given code."
49,onEnableHeartRateSleepSupport(boolean),on enable heart rate sleep support enable ,Method,,,,,80,4,1,,"@Override
    public void onEnableHeartRateSleepSupport(boolean enable) {

    }",True,True,This method is used to enable or disable support for heart rate sleep in a program or system.,True,"This code defines a method called ""onEnableHeartRateSleepSupport"" which takes a boolean parameter. The purpose of this method is not specified in the given code snippet."
50,onSetHeartRateMeasurementInterval(int),on set heart rate measurement interval seconds ,Method,,,,,81,4,1,,"@Override
    public void onSetHeartRateMeasurementInterval(int seconds) {

    }",True,True,This method is used to set the measurement interval for heart rate in seconds.,True,"The code snippet represents a method called ""onSetHeartRateMeasurementInterval"" which takes an integer parameter representing the interval in seconds. However, the method does not contain any implementation or logic, as the method body is empty."
51,onAddCalendarEvent(CalendarEventSpec),on add calendar event calendar event spec ,Method,,,,,90,4,1,,"@Override
    public void onAddCalendarEvent(CalendarEventSpec calendarEventSpec) {

    }",True,True,This method serves as an override for the onAddCalendarEvent function. It takes a CalendarEventSpec parameter and does not return anything.,True,"The code contains an overridden method called ""onAddCalendarEvent"" that takes a parameter of type ""CalendarEventSpec"". The purpose or functionality of this method is not specified in the given code snippet."
52,"onDeleteCalendarEvent(byte,long)",on delete calendar event type id ,Method,,,,,76,4,1,,"@Override
    public void onDeleteCalendarEvent(byte type, long id) {

    }",True,True,"This method serves as an override for the onDeleteCalendarEvent function. It takes in a byte type and a long id as parameters, but does not have any implementation code.",True,The code snippet defines a method called `onDeleteCalendarEvent` which takes two parameters: a byte type and a long id. The method does not have any implementation and is intended to be overridden by subclasses to handle the deletion of a calendar event.
53,onSendConfiguration(String),on send configuration config ,Method,,,"org.slf4j.Logger+info(String) org.slf4j.Logger+info(String) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+onSharedPreferenceChanged(SharedPreferences,String) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+onSharedPreferenceChanged(SharedPreferences,String)",nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG,167,5,1,,"@Override
    public void onSendConfiguration(String config) {
        LOG.info(""onSendConfiguration"" + config);
        onSharedPreferenceChanged(null, config);
    }",False,False,"This method is an overridden function that logs the ""onSendConfiguration"" message with the given configuration and then calls the onSharedPreferenceChanged method with null and the configuration as parameters.",True,"The code snippet represents an overridden method called ""onSendConfiguration"" that takes a string parameter. It logs a message with the provided configuration and then calls another method ""onSharedPreferenceChanged"" with null and the same configuration as arguments."
54,onGetConfigurationFinished(),on get configuration finished ,Method,,nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.GetConfigurationOperation+operationFinished(),,nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mGetConfigurationPending,90,3,1,,"public void onGetConfigurationFinished() {
        mGetConfigurationPending = false;
    }",False,False,"This method sets the value of the variable ""mGetConfigurationPending"" to false.",False,"The method ""onGetConfigurationFinished()"" sets the boolean variable ""mGetConfigurationPending"" to false, indicating that the configuration retrieval process has completed. This function is likely used to handle the completion of the configuration retrieval task and perform any necessary actions afterwards."
55,onReadConfiguration(String),on read configuration config ,Method,,"nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.InitOperationGBX100+onCharacteristicChanged(BluetoothGatt,BluetoothGattCharacteristic)","org.slf4j.Logger+info(String) org.slf4j.Logger+info(String) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.devices.casio.operations.GetConfigurationOperation+GetConfigurationOperation(CasioGBX100DeviceSupport,boolean) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.util.GB+toast(Context,String,int,int,Throwable) nodomain.freeyourgadget.gadgetbridge.util.GB+toast(Context,String,int,int,Throwable) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+getContext()",nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mGetConfigurationPending nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mGetConfigurationPending nodomain.freeyourgadget.gadgetbridge.util.GB+ERROR,592,14,1,,"@Override
    public void onReadConfiguration(String config) {
        LOG.info(""onReadConfiguration"" + config);
        // This is called upon pairing to retrieve the current watch settings, if any
        if(config == null) {
            try {
                mGetConfigurationPending = true;
                new GetConfigurationOperation(this, true).perform();
            } catch (IOException e) {
                mGetConfigurationPending = false;
                GB.toast(getContext(), ""Reading Casio configuration failed"", Toast.LENGTH_SHORT, GB.ERROR, e);
            }
        }
    }",False,False,"This method is called when reading a configuration. It logs the event, and if the configuration is null, it sets a flag to indicate that a configuration is pending and performs a GetConfigurationOperation. If an IOException occurs, it sets the flag to false and displays an error toast.",True,"This code is an implementation of the `onReadConfiguration` method, which is called upon pairing to retrieve the current watch settings. If the `config` parameter is null, it sets a flag to indicate that a configuration retrieval operation is pending and initiates the operation. If an `IOException` occurs, it displays an error message."
56,onTestNewFunction(),on test new function ,Method,,,"nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+performInitialized(String) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+performInitialized(String) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+writeAllFeaturesRequest(TransactionBuilder,byte[]) nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+writeAllFeaturesRequest(TransactionBuilder,byte[]) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+queue(BtLEQueue) nodomain.freeyourgadget.gadgetbridge.service.btle.TransactionBuilder+queue(BtLEQueue) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getQueue() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEDeviceSupport+getQueue() org.slf4j.Logger+error(String) org.slf4j.Logger+error(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage()",nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG,443,13,1,,"@Override
    public void onTestNewFunction() {
        byte[] data = new byte[2];
        data[0] = (byte)0x2e;
        data[1] = (byte)0x03;
        try {
            TransactionBuilder builder = performInitialized(""onTestNewFunction"");
            writeAllFeaturesRequest(builder, data);
            builder.queue(getQueue());
        } catch(IOException e) {
            LOG.error(""Error setting alarm: "" + e.getMessage());
        }
    }",False,False,"This method is used to perform a new function test. It initializes a byte array with two elements, sets the values of the elements, and then performs a series of actions using a TransactionBuilder object. If an IOException occurs, it logs an error message.",True,"The code defines a method called ""onTestNewFunction"" which initializes a byte array with two elements and assigns specific values to them. It then tries to perform a transaction using a TransactionBuilder object, passing the byte array as a parameter to a writeAllFeaturesRequest method, and adds the transaction to a queue. If an IOException occurs, it logs an error message."
57,onSendWeather(WeatherSpec),on send weather weather spec ,Method,,,,,73,4,1,,"@Override
    public void onSendWeather(WeatherSpec weatherSpec) {

    }",True,True,This method serves as an override for the onSendWeather function. It takes a WeatherSpec object as a parameter and does not return anything.,True,"The code contains an overridden method called ""onSendWeather"" that takes a parameter of type ""WeatherSpec"". The purpose or functionality of this method is not specified in the given code snippet."
58,"onSharedPreferenceChanged(SharedPreferences,String)",on shared preference changed shared preferences key ,Method,onSendConfiguration(String),,org.slf4j.Logger+debug(String) org.slf4j.Logger+debug(String) nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+isConnected() nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport+isConnected() org.slf4j.Logger+debug(String) org.slf4j.Logger+debug(String) org.slf4j.Logger+debug(String) org.slf4j.Logger+debug(String) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+AbstractBTLEOperation(T) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+AbstractBTLEOperation(T) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+AbstractBTLEOperation(T) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+AbstractBTLEOperation(T) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+AbstractBTLEOperation(T) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+AbstractBTLEOperation(T) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+AbstractBTLEOperation(T) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+AbstractBTLEOperation(T) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+AbstractBTLEOperation(T) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+AbstractBTLEOperation(T) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+AbstractBTLEOperation(T) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+AbstractBTLEOperation(T) nodomain.freeyourgadget.gadgetbridge.service.btle.AbstractBTLEOperation+perform() org.slf4j.Logger+info(String) org.slf4j.Logger+info(String),nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+mGetConfigurationPending nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG nodomain.freeyourgadget.gadgetbridge.activities.devicesettings.DeviceSettingsPreferenceConst+PREF_WEARLOCATION nodomain.freeyourgadget.gadgetbridge.devices.makibeshr3.MakibesHR3Constants+PREF_FIND_PHONE_DURATION nodomain.freeyourgadget.gadgetbridge.service.devices.casio.CasioGBX100DeviceSupport+LOG,3192,61,1,,"public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
        LOG.debug(key + "" changed"");

        if (!this.isConnected()) {
            LOG.debug(""ignoring change, we're disconnected"");
            return;
        }

        if(mGetConfigurationPending) {
            LOG.debug(""Preferences are being fetched right now"");
            return;
        }
        try {
            switch (key) {
                case DeviceSettingsPreferenceConst.PREF_WEARLOCATION:
                    new SetConfigurationOperation(this, CasioConstants.ConfigurationOption.OPTION_WRIST).perform();
                    break;
                case PREF_USER_STEPS_GOAL:
                    new SetConfigurationOperation(this, CasioConstants.ConfigurationOption.OPTION_STEP_GOAL).perform();
                    break;
                case PREF_USER_ACTIVETIME_MINUTES:
                    new SetConfigurationOperation(this, CasioConstants.ConfigurationOption.OPTION_ACTIVITY_GOAL).perform();
                    break;
                case PREF_USER_DISTANCE_METERS:
                    new SetConfigurationOperation(this, CasioConstants.ConfigurationOption.OPTION_DISTANCE_GOAL).perform();
                    break;
                case PREF_USER_GENDER:
                    new SetConfigurationOperation(this, CasioConstants.ConfigurationOption.OPTION_GENDER).perform();
                    break;
                case PREF_USER_HEIGHT_CM:
                    new SetConfigurationOperation(this, CasioConstants.ConfigurationOption.OPTION_HEIGHT).perform();
                    break;
                case PREF_USER_WEIGHT_KG:
                    new SetConfigurationOperation(this, CasioConstants.ConfigurationOption.OPTION_WEIGHT).perform();
                    break;
                case PREF_USER_YEAR_OF_BIRTH:
                    new SetConfigurationOperation(this, CasioConstants.ConfigurationOption.OPTION_BIRTHDAY).perform();
                    break;
                case PREF_TIMEFORMAT:
                    new SetConfigurationOperation(this, CasioConstants.ConfigurationOption.OPTION_TIMEFORMAT).perform();
                    break;
                case PREF_KEY_VIBRATION:
                    new SetConfigurationOperation(this, CasioConstants.ConfigurationOption.OPTION_KEY_VIBRATION).perform();
                    break;
                case PREF_AUTOLIGHT:
                    new SetConfigurationOperation(this, CasioConstants.ConfigurationOption.OPTION_AUTOLIGHT).perform();
                    break;
                case PREF_OPERATING_SOUNDS:
                    new SetConfigurationOperation(this, CasioConstants.ConfigurationOption.OPTION_OPERATING_SOUNDS).perform();
                    break;
                case PREF_FAKE_RING_DURATION:
                case PREF_FIND_PHONE_ENABLED:
                case MakibesHR3Constants.PREF_FIND_PHONE_DURATION:
                    // No action, we check the shared preferences when the device tries to ring the phone.
                    break;
                default:
            }
        } catch (IOException e) {
            LOG.info(""Error sending configuration change to watch"");
        }
    }",False,False,"This method is an event handler for when a shared preference is changed. It checks if the device is connected and if the preferences are being fetched. Then, based on the key of the changed preference, it performs a specific configuration operation on the device.",True,"The code is a method that handles changes in shared preferences. It checks if the device is connected and if preferences are currently being fetched. It then performs different operations based on the key of the changed preference, such as setting configuration options for a Casio watch."
