index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,executorDriver,executor driver ,Field,,,,,48,2,2,,"@Mock
    private ExecutorDriver executorDriver;",False,False,,False,
2,executorInfo,executor info ,Field,,,,,34,1,2,,private ExecutorInfo executorInfo;,False,False,,False,
3,slaveInfo,slave info ,Field,,,,,61,1,2,,private SlaveInfo slaveInfo = SlaveInfo.getDefaultInstance();,False,False,,False,
4,frameworkInfo,framework info ,Field,,,,,73,1,2,,private FrameworkInfo frameworkInfo = FrameworkInfo.getDefaultInstance();,False,False,,False,
5,taskExecutor,task executor ,Field,,,,,34,1,2,,private TaskExecutor taskExecutor;,False,False,,False,
6,setUp(),set up ,Method,,,com.dangdang.ddframe.job.cloud.executor.TaskExecutor+TaskExecutor(),com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorInfo,221,6,1,,"@Before
    public void setUp() throws NoSuchFieldException {
        executorDriver = mock(ExecutorDriver.class);
        taskExecutor = new TaskExecutor();
        executorInfo = ExecutorInfo.getDefaultInstance();
    }",False,False,"This method is a setup method that is executed before each test case. It initializes the executorDriver, taskExecutor, and executorInfo objects for testing purposes.",False,"The code snippet is a setup method annotated with `@Before`, which is executed before each test case. It initializes the `executorDriver` with a mocked instance of `ExecutorDriver`, creates a new instance of `TaskExecutor`, and sets the `executorInfo` to the default instance of `ExecutorInfo`."
7,assertKillTask(),assert kill task ,Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutor+killTask(ExecutorDriver,TaskID) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+killTask(ExecutorDriver,TaskID)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,327,6,1,,"@Test
    public void assertKillTask() {
        TaskID taskID = Protos.TaskID.newBuilder().setValue(""task_id"").build();
        taskExecutor.killTask(executorDriver, taskID);
        verify(executorDriver).sendStatusUpdate(Protos.TaskStatus.newBuilder().setTaskId(taskID).setState(Protos.TaskState.TASK_KILLED).build());
    }",False,False,"This method is a unit test that asserts the functionality of killing a task. It creates a task ID, calls the killTask method with the executor driver and task ID, and verifies that the status update for the killed task is sent.",True,"The code is a unit test for a method called `assertKillTask()`. It creates a `TaskID` object, calls the `killTask()` method of `taskExecutor` with the `executorDriver` and `taskID` as arguments, and then verifies that the `sendStatusUpdate()` method of `executorDriver` is called with a `TaskStatus` object representing a killed task."
8,assertLaunchTaskWithDaemonTaskAndJavaSimpleJob(),assert launch task with daemon task and java simple job ,Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTransientTaskInfo() com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTransientTaskInfo() com.dangdang.ddframe.job.cloud.executor.TaskExecutor+launchTask(ExecutorDriver,TaskInfo) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+launchTask(ExecutorDriver,TaskInfo)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,191,5,1,,"@Test
    public void assertLaunchTaskWithDaemonTaskAndJavaSimpleJob() {
        TaskInfo taskInfo = buildTransientTaskInfo();
        taskExecutor.launchTask(executorDriver, taskInfo);
    }",True,True,This method is a unit test that asserts the launch of a task with a daemon task and a Java simple job. It creates a transient task info and launches the task using the task executor and executor driver.,True,The code is a test method that asserts the launch of a task using a task executor. It creates a task info object and then calls the launchTask method with the executor driver and task info as parameters.
9,assertLaunchTaskWithTransientTaskAndSpringSimpleJob(),assert launch task with transient task and spring simple job ,Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildDaemonTaskInfo() com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildDaemonTaskInfo() com.dangdang.ddframe.job.cloud.executor.TaskExecutor+launchTask(ExecutorDriver,TaskInfo) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+launchTask(ExecutorDriver,TaskInfo)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,193,5,1,,"@Test
    public void assertLaunchTaskWithTransientTaskAndSpringSimpleJob() {
        TaskInfo taskInfo = buildDaemonTaskInfo();
        taskExecutor.launchTask(executorDriver, taskInfo);
    }",True,True,The function of the method is to test the launch of a task with a transient task and a Spring simple job by asserting the launch using the task executor and the executor driver.,True,The code is a test method that asserts the launch of a task using a task executor. It builds a daemon task info and then launches the task using the executor driver.
10,assertLaunchTaskWithTransientTaskAndJavaScriptJob(),assert launch task with transient task and java script job ,Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildScriptDaemonTaskInfo() com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildScriptDaemonTaskInfo() com.dangdang.ddframe.job.cloud.executor.TaskExecutor+launchTask(ExecutorDriver,TaskInfo) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+launchTask(ExecutorDriver,TaskInfo)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,197,5,1,,"@Test
    public void assertLaunchTaskWithTransientTaskAndJavaScriptJob() {
        TaskInfo taskInfo = buildScriptDaemonTaskInfo();
        taskExecutor.launchTask(executorDriver, taskInfo);
    }",False,True,This method is a unit test that asserts the launch of a task with a transient task and a JavaScript job. It creates a task info object and launches the task using a task executor and an executor driver.,True,The code is a test method that asserts the launch of a task with a transient task and a JavaScript job. It builds a task info object and then calls the `launchTask` method of the `taskExecutor` object with the executor driver and the task info as parameters.
11,assertRegisteredWithoutData(),assert registered without data ,Method,,,"java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) com.google.protobuf.ByteString+copyFrom(byte[]) com.google.protobuf.ByteString+copyFrom(byte[]) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+registered(ExecutorDriver,ExecutorInfo,FrameworkInfo,SlaveInfo) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+registered(ExecutorDriver,ExecutorInfo,FrameworkInfo,SlaveInfo)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+frameworkInfo com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+slaveInfo,769,13,1,,"@Test
    public void assertRegisteredWithoutData() {
        // CHECKSTYLE:OFF
        HashMap<String, String> data = new HashMap<>(4, 1);
        // CHECKSTYLE:ON
        data.put(""event_trace_rdb_driver"", ""org.h2.Driver"");
        data.put(""event_trace_rdb_url"", ""jdbc:h2:mem:test_executor"");
        data.put(""event_trace_rdb_username"", ""sa"");
        data.put(""event_trace_rdb_password"", """");
        ExecutorInfo executorInfo = ExecutorInfo.newBuilder().setExecutorId(Protos.ExecutorID.newBuilder().setValue(""test_executor"")).setCommand(Protos.CommandInfo.getDefaultInstance())
                .setData(ByteString.copyFrom(SerializationUtils.serialize(data))).build();
        taskExecutor.registered(executorDriver, executorInfo, frameworkInfo, slaveInfo);
    }",False,False,The function of the given method is to test the registration of an executor without any data.,True,"The code is a unit test method that asserts the registration of a task executor. It creates a HashMap with specific data, serializes it, and builds an ExecutorInfo object with the serialized data. The registered method of the taskExecutor is then called with the executorDriver, executorInfo, frameworkInfo, and slaveInfo parameters."
12,assertRegisteredWithData(),assert registered with data ,Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutor+registered(ExecutorDriver,ExecutorInfo,FrameworkInfo,SlaveInfo) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+registered(ExecutorDriver,ExecutorInfo,FrameworkInfo,SlaveInfo)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorInfo com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+frameworkInfo com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+slaveInfo,145,4,1,,"@Test
    public void assertRegisteredWithData() {
        taskExecutor.registered(executorDriver, executorInfo, frameworkInfo, slaveInfo);
    }",False,False,"The function of the method is to test the registration of data by calling the ""registered"" method of the ""taskExecutor"" object with the specified parameters.",True,The code snippet is a test method that calls the `registered` method of the `taskExecutor` object. It is used to assert that the `registered` method is functioning correctly with the provided parameters.
13,assertReregistered(),assert reregistered ,Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutor+reregistered(ExecutorDriver,SlaveInfo) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+reregistered(ExecutorDriver,SlaveInfo)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+slaveInfo,112,4,1,,"@Test
    public void assertReregistered() {
        taskExecutor.reregistered(executorDriver, slaveInfo);
    }",False,False,"The function of the method is to test and assert that the ""reregistered"" method of the ""taskExecutor"" object is called with the ""executorDriver"" and ""slaveInfo"" parameters.",True,The code snippet is a test method that calls the `reregistered` method of the `taskExecutor` object. It is used to assert that the `reregistered` method is functioning correctly by passing the `executorDriver` and `slaveInfo` parameters.
14,assertDisconnected(),assert disconnected ,Method,,,com.dangdang.ddframe.job.cloud.executor.TaskExecutor+disconnected(ExecutorDriver) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+disconnected(ExecutorDriver),com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,101,4,1,,"@Test
    public void assertDisconnected() {
        taskExecutor.disconnected(executorDriver);
    }",False,False,"The function of the given method is to test and assert that the ""disconnected"" method of the ""taskExecutor"" object is called with the ""executorDriver"" parameter.",True,"The code snippet is a JUnit test method named ""assertDisconnected"". It calls the ""disconnected"" method of the ""taskExecutor"" object, passing the ""executorDriver"" as a parameter. The purpose of this test is to assert that the ""disconnected"" method behaves as expected."
15,assertFrameworkMessage(),assert framework message ,Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutor+frameworkMessage(ExecutorDriver,byte[]) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+frameworkMessage(ExecutorDriver,byte[])",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,115,4,1,,"@Test
    public void assertFrameworkMessage() {
        taskExecutor.frameworkMessage(executorDriver, null);
    }",False,False,This method is a test case that asserts the framework message by calling the frameworkMessage method of the taskExecutor with the executorDriver and null as parameters.,True,The code snippet is a JUnit test method that calls the `frameworkMessage` method of the `taskExecutor` object. It is used to assert that the `frameworkMessage` method is called with the `executorDriver` and `null` parameters.
16,assertShutdown(),assert shutdown ,Method,,,com.dangdang.ddframe.job.cloud.executor.TaskExecutor+shutdown(ExecutorDriver) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+shutdown(ExecutorDriver),com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,93,4,1,,"@Test
    public void assertShutdown() {
        taskExecutor.shutdown(executorDriver);
    }",False,False,The function of the method is to test the shutdown of a task executor by calling the shutdown method with the executor driver as a parameter.,True,"The code snippet is a JUnit test method named ""assertShutdown"". It calls the ""shutdown"" method of a ""taskExecutor"" object, passing an ""executorDriver"" parameter. The purpose of this test is to verify the behavior of the ""shutdown"" method."
17,assertError(),assert error ,Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutor+error(ExecutorDriver,String) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+error(ExecutorDriver,String)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,91,4,1,,"@Test
    public void assertError() {
        taskExecutor.error(executorDriver, """");
    }",False,False,"The function of the given method is to test and assert an error by calling the ""error"" method of the ""taskExecutor"" object with the ""executorDriver"" and an empty string as parameters.",True,"The code snippet is a JUnit test method named ""assertError"". It calls a method named ""error"" from a ""taskExecutor"" object, passing an ""executorDriver"" and an empty string as arguments. The purpose of this test is to assert that the ""error"" method is functioning correctly."
18,buildTransientTaskInfo(),build transient task info ,Method,assertLaunchTaskWithDaemonTaskAndJavaSimpleJob(),,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTaskInfo(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTaskInfo(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildSpringJobConfigurationContextMap() com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildSpringJobConfigurationContextMap()",,128,3,2,,"private TaskInfo buildTransientTaskInfo() {
        return buildTaskInfo(buildSpringJobConfigurationContextMap()).build();
    }",True,True,"The function of the method ""buildTransientTaskInfo"" is to create and return a TaskInfo object by calling the ""buildTaskInfo"" method with the result of calling the ""buildSpringJobConfigurationContextMap"" method as an argument.",False,"The code defines a private method called `buildTransientTaskInfo()` that returns a `TaskInfo` object. It calls another method `buildTaskInfo()` with the result of `buildSpringJobConfigurationContextMap()` as an argument, and then calls the `build()` method on the returned object to finalize the `TaskInfo` creation."
19,buildDaemonTaskInfo(),build daemon task info ,Method,assertLaunchTaskWithTransientTaskAndSpringSimpleJob(),,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTaskInfo(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTaskInfo(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMapWithJobClassAndCron(String,String) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMapWithJobClassAndCron(String,String) java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName()",,189,3,2,,"private TaskInfo buildDaemonTaskInfo() {
        return buildTaskInfo(buildBaseJobConfigurationContextMapWithJobClassAndCron(TestJob.class.getCanonicalName(), ""ignoredCron"")).build();
    }",True,True,The function of the given method is to build and return a TaskInfo object by using the buildTaskInfo method with a specific configuration map and a TestJob class.,False,"The code defines a private method called `buildDaemonTaskInfo()` that returns a `TaskInfo` object. It builds the task information by calling another method `buildTaskInfo()` with a map containing the job class name and a cron expression, and then builds and returns the task."
20,buildScriptDaemonTaskInfo(),build script daemon task info ,Method,assertLaunchTaskWithTransientTaskAndJavaScriptJob(),,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTaskInfo(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTaskInfo(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMap(String,String,JobType) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMap(String,String,JobType) java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName()",,192,3,2,,"private TaskInfo buildScriptDaemonTaskInfo() {
        return buildTaskInfo(buildBaseJobConfigurationContextMap(TestJob.class.getCanonicalName(), ""ignoredCron"", JobType.SCRIPT)).build();
    }",True,True,The function of the method is to build and return a TaskInfo object by calling the buildTaskInfo method with specific parameters and then calling the build method on the returned object.,False,The code defines a private method named `buildScriptDaemonTaskInfo()` that returns a `TaskInfo` object. It builds and returns the `TaskInfo` object by calling another method `buildTaskInfo()` with specific parameters obtained from `TestJob` class and other arguments.
21,"buildTaskInfo(Map<String,String>)",build task info job configuration context ,Method,buildTransientTaskInfo() buildDaemonTaskInfo() buildScriptDaemonTaskInfo(),,"com.google.protobuf.ByteString+copyFrom(byte[]) com.google.protobuf.ByteString+copyFrom(byte[]) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+serialize(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+serialize(Map<String,String>)",,356,4,2,,"private TaskInfo.Builder buildTaskInfo(final Map<String, String> jobConfigurationContext) {
        return TaskInfo.newBuilder().setData(ByteString.copyFrom(serialize(jobConfigurationContext)))
                .setName(""test_job"").setTaskId(Protos.TaskID.newBuilder().setValue(""task_id"")).setSlaveId(Protos.SlaveID.newBuilder().setValue(""slave-S0""));
    }",True,True,"This method builds and returns a TaskInfo.Builder object. It sets the data, name, taskId, and slaveId properties of the TaskInfo object using the provided jobConfigurationContext map.",False,"This code defines a private method called `buildTaskInfo` that takes a map of job configuration context as input. It creates and returns a new `TaskInfo.Builder` object with the serialized data from the input map, along with a predefined name, task ID, and slave ID."
22,"serialize(Map<String,String>)",serialize job configuration context ,Method,"buildTaskInfo(Map<String,String>)",,"com.dangdang.ddframe.job.executor.ShardingContexts+ShardingContexts() java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V)",,518,9,2,,"private byte[] serialize(final Map<String, String> jobConfigurationContext) {
        // CHECKSTYLE:OFF
        LinkedHashMap<String, Object> result = new LinkedHashMap<>(2, 1);
        // CHECKSTYLE:ON
        ShardingContexts shardingContexts = new ShardingContexts(""fake_task_id"", ""test_job"", 1, """", Collections.singletonMap(1, ""a""));
        result.put(""shardingContext"", shardingContexts);
        result.put(""jobConfigContext"", jobConfigurationContext);
        return SerializationUtils.serialize(result);
    }",True,True,This method serializes a map of job configuration context and sharding contexts into a byte array using the SerializationUtils class.,False,This code serializes a map of job configuration context and a ShardingContexts object into a byte array using the SerializationUtils class. The serialized data is then returned as the result of the method.
23,buildSpringJobConfigurationContextMap(),build spring job configuration context map ,Method,buildTransientTaskInfo(),,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMapWithJobClass(String) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMapWithJobClass(String) java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName() java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V)",,333,6,2,,"private Map<String, String> buildSpringJobConfigurationContextMap() {
        Map<String, String> context = buildBaseJobConfigurationContextMapWithJobClass(TestJob.class.getCanonicalName());
        context.put(""beanName"", ""testJob"");
        context.put(""applicationContext"", ""applicationContext.xml"");
        return context;
    }",True,True,"This method builds a map that contains the configuration context for a Spring job. It includes the job class name, bean name, and the application context file name.",False,"The code builds a map containing configuration information for a Spring job. It includes the job class name, bean name, and the name of the application context file. The map is then returned as the result of the method."
24,buildBaseJobConfigurationContextMapWithJobClass(String),build base job configuration context map with job class job class ,Method,buildSpringJobConfigurationContextMap(),,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMapWithJobClassAndCron(String,String) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMapWithJobClassAndCron(String,String)",,204,3,2,,"private Map<String, String> buildBaseJobConfigurationContextMapWithJobClass(final String jobClass) {
        return buildBaseJobConfigurationContextMapWithJobClassAndCron(jobClass, ""0/1 * * * * ?"");
    }",False,True,"This method builds a base job configuration context map with a specified job class and a default cron expression of ""0/1 * * * * ?"".",False,The code defines a private method named `buildBaseJobConfigurationContextMapWithJobClass` that takes a `jobClass` parameter. It returns a `Map` object containing key-value pairs. The method internally calls another method `buildBaseJobConfigurationContextMapWithJobClassAndCron` with the `jobClass` parameter and a default cron expression.
25,"buildBaseJobConfigurationContextMapWithJobClassAndCron(String,String)",build base job configuration context map with job class and cron job class cron ,Method,buildDaemonTaskInfo() buildBaseJobConfigurationContextMapWithJobClass(String),,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMap(String,String,JobType) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMap(String,String,JobType)",,216,3,2,,"private Map<String, String> buildBaseJobConfigurationContextMapWithJobClassAndCron(final String jobClass, final String cron) {
        return buildBaseJobConfigurationContextMap(jobClass, cron, JobType.SIMPLE);
    }",False,True,"The function of this method is to build a map with a job class and cron expression as input parameters, and return the map with additional job type information (JobType.SIMPLE).",False,"The given code is a private method that builds a map of key-value pairs. It takes two parameters, jobClass and cron, and returns a map with these parameters along with a fixed value for the job type. The method is a helper function that simplifies the process of creating a job configuration context map."
26,"buildBaseJobConfigurationContextMap(String,String,JobType)",build base job configuration context map job class cron job type ,Method,"buildScriptDaemonTaskInfo() buildBaseJobConfigurationContextMapWithJobClassAndCron(String,String)",,"java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V)",,433,9,2,,"private Map<String, String> buildBaseJobConfigurationContextMap(final String jobClass, final String cron, final JobType jobType) {
        Map<String, String> result = new HashMap<>();
        result.put(""jobName"", ""test_job"");
        result.put(""cron"", cron);
        result.put(""jobClass"", jobClass);
        result.put(""jobType"", jobType.name());
        result.put(""scriptCommandLine"", ""echo \""\"""");
        return result;
    }",True,True,"This method builds a map with key-value pairs representing the base job configuration context. The keys are ""jobName"", ""cron"", ""jobClass"", ""jobType"", and ""scriptCommandLine"". The values are provided as parameters or hardcoded.",False,"This code defines a private method called `buildBaseJobConfigurationContextMap` that takes in three parameters: `jobClass`, `cron`, and `jobType`. It creates a new `HashMap` and populates it with key-value pairs representing various job configuration properties. The method then returns the resulting map."
