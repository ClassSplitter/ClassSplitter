index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,TAG,tag ,Field,,,,,93,1,26,,"private static final String TAG = ""com.beardedhen.androidbootstrap.BootstrapCircleThumbnail"";",False,False,,False,
2,bootstrapBrand,bootstrap brand ,Field,onRestoreInstanceState(Parcelable) initialise(AttributeSet) initialise(AttributeSet) setBootstrapBrand(BootstrapBrand),,,,38,1,2,,private BootstrapBrand bootstrapBrand;,True,True,,False,
3,borderWidth,border width ,Field,onRestoreInstanceState(Parcelable) initialise(AttributeSet) initialise(AttributeSet) initialise(AttributeSet) setBorderWidth(float),,,,26,1,2,,private float borderWidth;,False,True,,False,
4,borderColor,border color ,Field,onRestoreInstanceState(Parcelable) initialise(AttributeSet) setBootstrapBrand(BootstrapBrand) setBorderColor(int),,,,24,1,2,,private int borderColor;,True,True,,False,
5,imageRectF,image rect f ,Field,,,,,45,1,18,,private final RectF imageRectF = new RectF();,False,False,,False,
6,matrix,matrix ,Field,,,,,43,1,18,,private final Matrix matrix = new Matrix();,False,False,,False,
7,imagePaint,image paint ,Field,,,,,45,1,18,,private final Paint imagePaint = new Paint();,False,False,,False,
8,placeholderPaint,placeholder paint ,Field,,,,,51,1,18,,private final Paint placeholderPaint = new Paint();,False,False,,False,
9,borderPaint,border paint ,Field,,,,,46,1,18,,private final Paint borderPaint = new Paint();,False,False,,False,
10,sourceBitmap,source bitmap ,Field,,,,,28,1,2,,private Bitmap sourceBitmap;,True,True,,False,
11,BootstrapCircleThumbnail(Context),bootstrap circle thumbnail context ,Method,,,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+initialise(AttributeSet) com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+initialise(AttributeSet),,106,4,1,,"public BootstrapCircleThumbnail(Context context) {
        super(context);
        initialise(null);
    }",False,False,The function of the method is to create a new instance of the BootstrapCircleThumbnail class and initialize it with a given context.,True,The code defines a constructor method for a class called BootstrapCircleThumbnail. It takes a Context object as a parameter and calls the superclass constructor. It then calls the initialise method with a null argument.
12,"BootstrapCircleThumbnail(Context,AttributeSet)",bootstrap circle thumbnail context attrs ,Method,,,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+initialise(AttributeSet) com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+initialise(AttributeSet),,134,4,1,,"public BootstrapCircleThumbnail(Context context, AttributeSet attrs) {
        super(context, attrs);
        initialise(attrs);
    }",False,False,The function of this method is to create a BootstrapCircleThumbnail object by initializing its attributes with the provided context and attribute set.,True,"The code defines a constructor method for a class called BootstrapCircleThumbnail. It takes a Context and AttributeSet as parameters, and calls the initialise method with the given AttributeSet."
13,"BootstrapCircleThumbnail(Context,AttributeSet,int)",bootstrap circle thumbnail context attrs def style ,Method,,,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+initialise(AttributeSet) com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+initialise(AttributeSet),,158,4,1,,"public BootstrapCircleThumbnail(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        initialise(attrs);
    }",False,False,"The function of this method is to create a BootstrapCircleThumbnail object with the specified context, attributes, and default style, and then initialize it with the given attributes.",True,"The code defines a constructor method for a class called BootstrapCircleThumbnail. It takes three parameters: a Context object, an AttributeSet object, and an integer value for the default style. The method calls another method called initialise() to perform some initialization tasks."
14,onSaveInstanceState(),on save instance state ,Method,,,,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+TAG com.beardedhen.androidbootstrap.api.view.BootstrapBrandView+KEY com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+bootstrapBrand com.beardedhen.androidbootstrap.api.view.BorderView+KEY_WIDTH com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.api.view.BorderView+KEY_COLOR com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderColor,374,10,1,,"@Override public Parcelable onSaveInstanceState() {
        Bundle bundle = new Bundle();
        bundle.putParcelable(TAG, super.onSaveInstanceState());

        bundle.putSerializable(BootstrapBrandView.KEY, bootstrapBrand);
        bundle.putFloat(BorderView.KEY_WIDTH, borderWidth);
        bundle.putInt(BorderView.KEY_COLOR, borderColor);

        return bundle;
    }",True,True,"This method is used to save the current state of an object by creating a Bundle and storing relevant data such as the object's state, bootstrapBrand, borderWidth, and borderColor. The method returns the Bundle.",False,"The code is overriding the `onSaveInstanceState()` method to save the state of the object. It creates a `Bundle` object and puts the super class's saved instance state, along with some additional data such as a `Serializable` object, a float value, and an integer value. Finally, it returns the `Bundle` object."
15,onRestoreInstanceState(Parcelable),on restore instance state state ,Method,,,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+updateImageState() com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+updateImageState(),com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.api.view.BorderView+KEY_WIDTH com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderColor com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderColor com.beardedhen.androidbootstrap.api.view.BorderView+KEY_COLOR com.beardedhen.androidbootstrap.api.view.BootstrapBrandView+KEY com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+bootstrapBrand com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+bootstrapBrand com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+TAG,632,17,1,,"@Override public void onRestoreInstanceState(Parcelable state) {
        if (state instanceof Bundle) {
            Bundle bundle = (Bundle) state;

            this.borderWidth = bundle.getFloat(BorderView.KEY_WIDTH);
            this.borderColor = bundle.getInt(BorderView.KEY_COLOR);

            Serializable brand = bundle.getSerializable(BootstrapBrandView.KEY);

            if (brand instanceof BootstrapBrand) {
                this.bootstrapBrand = (BootstrapBrand) brand;
            }
            state = bundle.getParcelable(TAG);
        }
        super.onRestoreInstanceState(state);
        updateImageState();
    }",True,True,"This method is used to restore the state of an object after it has been saved. It retrieves the saved state from a Parcelable object, extracts specific values from a Bundle, and updates the object's properties accordingly. Finally, it calls the superclass's onRestoreInstanceState method and updates the image state.",False,"This code is an implementation of the `onRestoreInstanceState` method in a Java class. It checks if the passed `Parcelable` state is an instance of `Bundle`, and if so, it retrieves and assigns values for `borderWidth`, `borderColor`, and `bootstrapBrand` from the bundle. It then calls the superclass's `onRestoreInstanceState` method and updates the image state."
16,initialise(AttributeSet),initialise attrs ,Method,"BootstrapCircleThumbnail(Context) BootstrapCircleThumbnail(Context,AttributeSet) BootstrapCircleThumbnail(Context,AttributeSet,int)",,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+updateImageState() com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+updateImageState(),com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderColor com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderColor com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+bootstrapBrand com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+bootstrapBrand com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+bootstrapBrand com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+bootstrapBrand,1072,25,2,,"private void initialise(AttributeSet attrs) {
        TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.BootstrapCircleThumbnail);

        try {
            int typeOrdinal = a.getInt(R.styleable.BootstrapCircleThumbnail_bootstrapBrand, -1);
            this.borderColor = a.getColor(R.styleable.BootstrapCircleThumbnail_borderColor, -1);
            this.borderWidth = a.getDimension(R.styleable.BootstrapCircleThumbnail_borderWidth, -1);

            if (this.borderWidth <= 0) {
                this.borderWidth = getContext()
                        .getResources().getDimensionPixelSize(R.dimen.bootstrap_circle_default_border);
            }

            if (typeOrdinal == -1) { // override to use Primary for default border (looks nicer)
                this.bootstrapBrand = DefaultBootstrapBrand.PRIMARY;
            }
            else {
                this.bootstrapBrand = DefaultBootstrapBrand.fromAttributeValue(typeOrdinal);
            }
        }
        finally {
            a.recycle();
        }
        updateImageState();
    }",False,False,"This method initializes the attributes of a BootstrapCircleThumbnail view by obtaining and setting values from a TypedArray. It also sets default values for border width and bootstrap brand if necessary, and recycles the TypedArray. Finally, it updates the image state.",True,"This code initializes the attributes of a BootstrapCircleThumbnail view by retrieving values from the provided AttributeSet. It sets the border color, width, and brand based on the attribute values, and if no brand is specified, it defaults to the Primary brand. Finally, it recycles the TypedArray and updates the image state."
17,updateImageState(),update image state this method is called when the circle image needs to be recreated due to changes in size etc a paint object uses a bitmap shader to draw a center cropped circular image onto the view canvas a matrix on the bitmap shader scales the original bitmap to match the current view bounds avoiding any inefficiencies in duplicating bitmaps a href http www curious creature com 2012 12 11 android recipe 1 image with rounded corners further reading ,Method,"onRestoreInstanceState(Parcelable) initialise(AttributeSet) onSizeChanged(int,int,int,int) onSourceBitmapUpdate(Bitmap) setBorderWidth(float)",,java.lang.Object+Object(),com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+sourceBitmap com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+sourceBitmap com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+imagePaint com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+sourceBitmap com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+sourceBitmap com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+matrix com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+matrix com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+matrix com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+matrix com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+imageRectF,2023,50,2,"/** 
 * This method is called when the Circle Image needs to be recreated due to changes in size etc. <p/> A Paint object uses a BitmapShader to draw a center-cropped, circular image onto the View Canvas. A Matrix on the BitmapShader scales the original Bitmap to match the current view bounds, avoiding any inefficiencies in duplicating Bitmaps. <p/> <a href=""http://www.curious-creature.com/2012/12/11/android-recipe-1-image-with-rounded-corners""> Further reading</a>
 */
","/**
     * This method is called when the Circle Image needs to be recreated due to changes in size etc.
     * <p/>
     * A Paint object uses a BitmapShader to draw a center-cropped, circular image onto the View
     * Canvas. A Matrix on the BitmapShader scales the original Bitmap to match the current view
     * bounds, avoiding any inefficiencies in duplicating Bitmaps.
     * <p/>
     * <a href=""http://www.curious-creature.com/2012/12/11/android-recipe-1-image-with-rounded-corners"">
     * Further reading</a>
     */
    private void updateImageState() {
        float viewWidth = getWidth();
        float viewHeight = getHeight();

        if ((int) viewWidth <= 0 || (int) viewHeight <= 0) {
            return;
        }

        if (sourceBitmap != null) {
            BitmapShader imageShader = new BitmapShader(sourceBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
            imagePaint.setShader(imageShader);

            // Scale the bitmap using a matrix, ensuring that it always matches the view bounds.
            float bitmapWidth = sourceBitmap.getWidth();
            float bitmapHeight = sourceBitmap.getHeight();

            float scaleFactor = (bitmapWidth < bitmapHeight) ? bitmapWidth : bitmapHeight;
            float xScale = viewWidth / scaleFactor;
            float yScale = viewHeight / scaleFactor;

            // Translate image to center crop (if it is not a perfect square bitmap)
            float dx = 0;
            float dy = 0;

            if (bitmapWidth > bitmapHeight) {
                dx = (viewWidth - bitmapWidth * xScale) * 0.5f;
            }
            else if (bitmapHeight > bitmapWidth) {
                dy = (viewHeight - bitmapHeight * yScale) * 0.5f;
            }

            matrix.set(null);
            matrix.setScale(xScale, yScale);
            matrix.postTranslate((dx + 0.5f), (dy + 0.5f));

            imageShader.setLocalMatrix(matrix);
            imageRectF.set(0, 0, viewWidth, viewHeight);
        }
        invalidate();
    }",False,False,"The function of this method is to update the state of the Circle Image by creating a new BitmapShader and scaling the original Bitmap to match the current view bounds. It also translates the image to center crop if it is not a perfect square bitmap. Finally, it invalidates the view to trigger a redraw.",True,This method is responsible for updating the state of a Circle Image by creating a circular image using a BitmapShader and a Matrix. It scales the original Bitmap to match the current view bounds and applies a center-cropped effect. The updated image state is then invalidated to trigger a redraw.
18,onDraw(Canvas),on draw canvas ,Method,,,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+setupPaints() com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+setupPaints(),com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+sourceBitmap com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+placeholderPaint com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+imagePaint com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderPaint,887,28,4,,"@Override protected void onDraw(@NonNull Canvas canvas) {
        float viewWidth = getWidth();
        float viewHeight = getHeight();

        if ((int) viewWidth <= 0 || (int) viewHeight <= 0) {
            return;
        }

        boolean isPlaceholder = sourceBitmap == null;

        // draw the image paint first, then draw a border as a Stroke paint (if needed)
        boolean hasBorder = borderWidth > 0 || isPlaceholder;
        float center = viewWidth / 2;
        float imageRadius = center;

        if (hasBorder) {
            imageRadius -= borderWidth;
        }

        setupPaints();

        Paint paint = (isPlaceholder) ? placeholderPaint : imagePaint;
        canvas.drawCircle(center, center, imageRadius, paint);

        if (hasBorder) {
            canvas.drawCircle(center, center, center - (borderWidth / 2), borderPaint); // draw border
        }
    }",False,False,"This method is used to draw a circle on a canvas. It calculates the dimensions of the circle based on the view's width and height, and checks if the dimensions are valid. It then sets up the paints for drawing the circle and draws it on the canvas. If a border is needed, it also draws a border around the circle.",True,"This code is an overridden method that is responsible for drawing a circle on a canvas. It checks if the view dimensions are valid, determines if the circle should have a border, sets up the necessary paints, and then draws the circle and border on the canvas."
19,setupPaints(),setup paints ,Method,onDraw(Canvas),,com.beardedhen.androidbootstrap.api.attributes.BootstrapBrand+defaultEdge(Context) com.beardedhen.androidbootstrap.api.attributes.BootstrapBrand+defaultEdge(Context),com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderColor com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderColor com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+bootstrapBrand com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderPaint com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderPaint com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderPaint com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderPaint com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+imagePaint com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+placeholderPaint com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+placeholderPaint com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+placeholderPaint,596,14,2,,"private void setupPaints() {
        int strokeColor = (borderColor != -1) ? borderColor : bootstrapBrand.defaultEdge(getContext());
        int placeholderColor = getContext().getResources().getColor(R.color.white);

        borderPaint.setColor(strokeColor);
        borderPaint.setAntiAlias(true);
        borderPaint.setStrokeWidth(borderWidth);
        borderPaint.setStyle(Paint.Style.STROKE);
        imagePaint.setAntiAlias(true);

        placeholderPaint.setColor(placeholderColor);
        placeholderPaint.setAntiAlias(true);
        placeholderPaint.setStyle(Paint.Style.FILL);
    }",False,False,"The function of the method ""setupPaints"" is to set up the paints used for drawing borders and placeholders. It sets the color, anti-aliasing, stroke width, and style for the border paint, and the color, anti-aliasing, and style for the placeholder paint.",True,"The `setupPaints()` method initializes and sets up various paint objects used for drawing borders, images, and placeholders. It assigns colors, anti-aliasing, stroke width, and styles to the paint objects."
20,"onMeasure(int,int)",on measure width measure spec height measure spec ,Method,,,,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+sourceBitmap com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+sourceBitmap com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+sourceBitmap,793,24,4,,"@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);

        int w = MeasureSpec.getSize(widthMeasureSpec); // AT_MOST/EXACTLY are used by default
        int h = MeasureSpec.getSize(heightMeasureSpec);

        if (sourceBitmap != null) {
            if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED) {
                w = sourceBitmap.getWidth();
            }
            if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.UNSPECIFIED) {

                h = sourceBitmap.getHeight();
            }
        }

        if (w > h) { // no ovals allowed
            w = h;
        }
        if (h > w) {
            h = w;
        }
        setMeasuredDimension(w, h);
    }",False,False,"This method is used to measure the width and height of a view. It sets the dimensions based on the specified width and height measurements, and adjusts them if necessary to ensure that the view is square.",True,"This code is an overridden method that is used to measure the dimensions of a custom view. It checks if the source bitmap is available and adjusts the width and height based on the bitmap's dimensions. If the width is greater than the height, it sets the width and height to be equal, ensuring that the view is always square."
21,"onSizeChanged(int,int,int,int)",on size changed w h oldw oldh ,Method,,,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+updateImageState() com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+updateImageState(),,155,4,4,,"@Override protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        updateImageState();
    }",True,True,This method is called when the size of the view changes. It updates the state of the image displayed in the view.,True,"The code snippet is an overridden method called ""onSizeChanged"" that is called when the size of the view changes. It calls the ""updateImageState"" method to update the state of the image."
22,setScaleType(ScaleType),set scale type scale type ,Method,,,java.lang.IllegalArgumentException+IllegalArgumentException(String),,284,8,1,,"@Override public void setScaleType(ScaleType scaleType) {
        if (scaleType != CENTER_CROP) {
            throw new IllegalArgumentException(""Only CenterCrop is currently supported by this view"");
        }
        else {
            super.setScaleType(scaleType);
        }
    }",True,True,"The function of this method is to set the scale type of a view. It throws an exception if the scale type is not CENTER_CROP, otherwise it sets the scale type using the superclass method.",True,"This code is overriding the setScaleType method in a class. It checks if the given scaleType is not CENTER_CROP and throws an exception if it is not. Otherwise, it calls the super method to set the scaleType."
23,getScaleType(),get scale type ,Method,,,,,77,3,1,,"@Override public ScaleType getScaleType() {
        return CENTER_CROP;
    }",True,True,The function of the method is to return the ScaleType value CENTER_CROP.,False,"The code is implementing the `getScaleType()` method, which is expected to return a `ScaleType` value. In this case, the method is overriding the superclass's implementation and always returning `CENTER_CROP` as the scale type."
24,getBitmapForView(),get bitmap for view return the original bitmap source that will be drawn as a circular image ,Method,setImageDrawable(Drawable) setImageResource(int) setImageURI(Uri),,java.lang.Object+Object(),,649,22,2,"/** 
 * @return the original Bitmap source that will be drawn as a circular image
 */
","/**
     * @return the original Bitmap source that will be drawn as a circular image
     */
    @Nullable private Bitmap getBitmapForView() {
        Drawable drawable = getDrawable();

        if (drawable == null) {
            return null;
        }

        if (drawable instanceof BitmapDrawable) {
            return ((BitmapDrawable) drawable).getBitmap();
        }
        else {
            int w = drawable.getIntrinsicWidth();
            int h = drawable.getIntrinsicHeight();

            Bitmap bm = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
            drawable.draw(new Canvas(bm));
            return bm;
        }
    }",False,True,"This method serves to retrieve the original Bitmap source that will be drawn as a circular image. It checks if the Drawable is a BitmapDrawable and returns the Bitmap if it is, otherwise it creates a new Bitmap and draws the Drawable onto it before returning it.",True,"This code defines a private method called ""getBitmapForView"" that returns a Bitmap object. It checks if the Drawable object associated with the view is a BitmapDrawable, and if so, it returns the underlying Bitmap. Otherwise, it creates a new Bitmap and draws the Drawable onto it before returning it."
25,setImageBitmap(Bitmap),set image bitmap bm ,Method,,com.example.sample.BootstrapCircleThumbnailExample+onCreate(Bundle),com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+onSourceBitmapUpdate(Bitmap) com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+onSourceBitmapUpdate(Bitmap),,123,4,1,,"@Override public void setImageBitmap(Bitmap bm) {
        super.setImageBitmap(bm);
        onSourceBitmapUpdate(bm);
    }",True,True,This method overrides the setImageBitmap method from the superclass. It sets the image bitmap and calls the onSourceBitmapUpdate method with the updated bitmap as a parameter.,False,This code overrides the setImageBitmap method in a class and calls the superclass implementation. It then calls the onSourceBitmapUpdate method with the provided Bitmap as a parameter.
26,setImageDrawable(Drawable),set image drawable drawable ,Method,,com.example.sample.BootstrapCircleThumbnailExample+onCreate(Bundle),com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+onSourceBitmapUpdate(Bitmap) com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+onSourceBitmapUpdate(Bitmap) com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+getBitmapForView() com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+getBitmapForView(),,157,4,1,,"@Override public void setImageDrawable(Drawable drawable) {
        super.setImageDrawable(drawable);
        onSourceBitmapUpdate(getBitmapForView());
    }",True,True,This method sets the image drawable for a view and updates the source bitmap for the view.,False,The code overrides the `setImageDrawable` method and calls the parent method to set the drawable. It then calls the `onSourceBitmapUpdate` method with the bitmap obtained from the view.
27,setImageResource(int),set image resource res id ,Method,,com.example.sample.BootstrapCircleThumbnailExample+onCreate(Bundle) com.example.sample.BootstrapCircleThumbnailExample+onImageChangeExampleClicked(),com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+onSourceBitmapUpdate(Bitmap) com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+onSourceBitmapUpdate(Bitmap) com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+getBitmapForView() com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+getBitmapForView(),,146,4,1,,"@Override public void setImageResource(int resId) {
        super.setImageResource(resId);
        onSourceBitmapUpdate(getBitmapForView());
    }",True,True,This method overrides the setImageResource method from the parent class. It sets the image resource using the given resource ID and then calls the onSourceBitmapUpdate method with the bitmap obtained from the view.,False,The code overrides the setImageResource method in a class and calls the superclass implementation. It then calls the onSourceBitmapUpdate method with the bitmap obtained from the view.
28,setImageURI(Uri),set image uri uri ,Method,,,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+onSourceBitmapUpdate(Bitmap) com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+onSourceBitmapUpdate(Bitmap) com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+getBitmapForView() com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+getBitmapForView(),,132,4,1,,"@Override public void setImageURI(Uri uri) {
        super.setImageURI(uri);
        onSourceBitmapUpdate(getBitmapForView());
    }",True,True,"The method ""setImageURI"" sets the image URI for a view, then calls the ""onSourceBitmapUpdate"" method with the bitmap of the view as a parameter.",False,The code overrides the setImageURI method in a class and calls the superclass implementation. It then calls the onSourceBitmapUpdate method with the bitmap obtained from the view.
29,onSourceBitmapUpdate(Bitmap),on source bitmap update bitmap ,Method,setImageBitmap(Bitmap) setImageDrawable(Drawable) setImageResource(int) setImageURI(Uri),,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+updateImageState() com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+updateImageState(),com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+sourceBitmap,115,4,2,,"private void onSourceBitmapUpdate(Bitmap bitmap) {
        sourceBitmap = bitmap;
        updateImageState();
    }",False,True,This method updates the sourceBitmap variable with the provided bitmap and then calls the updateImageState() method.,True,"The method ""onSourceBitmapUpdate"" takes a Bitmap object as a parameter and assigns it to the ""sourceBitmap"" variable. It then calls the ""updateImageState"" method, which likely performs some actions or updates related to the image state."
30,setBootstrapBrand(BootstrapBrand),set bootstrap brand bootstrap brand ,Method,,com.example.sample.BootstrapCircleThumbnailExample+onThemeChangeExampleClicked() com.example.sample.BootstrapCircleThumbnailExample+onThemeChangeExampleClicked() com.example.sample.BootstrapCircleThumbnailExample+onThemeChangeExampleClicked() com.example.sample.BootstrapCircleThumbnailExample+onThemeChangeExampleClicked() com.example.sample.BootstrapCircleThumbnailExample+onThemeChangeExampleClicked() com.example.sample.BootstrapCircleThumbnailExample+onThemeChangeExampleClicked() com.example.sample.BootstrapCircleThumbnailExample+onThemeChangeExampleClicked(),,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+bootstrapBrand com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+bootstrapBrand com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderColor com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderColor,186,5,1,,"@Override public void setBootstrapBrand(@NonNull BootstrapBrand bootstrapBrand) {
        this.bootstrapBrand = bootstrapBrand;
        this.borderColor = -1;
        invalidate();
    }",True,True,This method sets the bootstrap brand and invalidates the view. It also sets the border color to -1.,False,"This code defines a method called ""setBootstrapBrand"" that takes a parameter of type ""BootstrapBrand"". It sets the value of the ""bootstrapBrand"" variable to the passed parameter, sets the ""borderColor"" variable to -1, and then calls the ""invalidate"" method."
31,getBootstrapBrand(),get bootstrap brand ,Method,,com.example.sample.BootstrapCircleThumbnailExample+onThemeChangeExampleClicked(),,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+bootstrapBrand,99,3,1,,"@NonNull @Override public BootstrapBrand getBootstrapBrand() {
        return bootstrapBrand;
    }",True,True,This method serves to return the BootstrapBrand object.,False,"The code snippet defines a method named ""getBootstrapBrand"" that returns an object of type ""BootstrapBrand"". The method is annotated with ""@NonNull"" to indicate that it will not return null. The method overrides a superclass method and simply returns the value of the ""bootstrapBrand"" variable."
32,getBorderColor(),get border color ,Method,,,,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderColor,83,3,1,,"@Override @ColorInt public int getBorderColor() {
        return borderColor;
    }",True,True,This method serves to override the getBorderColor() function and return the value of the borderColor variable as an integer.,False,"The code snippet defines a method named ""getBorderColor"" that returns an integer value representing the color of the border. The method is annotated with ""@ColorInt"" to indicate that the returned value is expected to be a valid color."
33,setBorderColor(int),set border color border color ,Method,,com.example.sample.BootstrapCircleThumbnailExample+onColorChangeExampleClicked(),,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderColor com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderColor,133,4,1,,"@Override public void setBorderColor(@ColorInt int borderColor) {
        this.borderColor = borderColor;
        invalidate();
    }",True,True,This method is used to set the border color of an object. It takes an integer value representing the color and assigns it to the borderColor variable. It then calls the invalidate() method to update the object's appearance.,False,
34,getBorderWidth(),get border width ,Method,,,,com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth,75,3,1,,"@Override public float getBorderWidth() {
        return borderWidth;
    }",True,True,"This method serves to retrieve the value of the borderWidth variable, and returns it as a float.",False,"This code defines a method named ""getBorderWidth"" that returns a float value. The method is marked with the ""@Override"" annotation, indicating that it overrides a method from a superclass or interface. The method simply returns the value of a variable named ""borderWidth""."
35,setBorderWidth(float),set border width border width ,Method,,com.example.sample.BootstrapCircleThumbnailExample+onBorderChangeExampleClicked(),com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+updateImageState() com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+updateImageState(),com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth com.beardedhen.androidbootstrap.BootstrapCircleThumbnail+borderWidth,131,4,1,,"@Override public void setBorderWidth(float borderWidth) {
        this.borderWidth = borderWidth;
        updateImageState();
    }",True,True,This method sets the border width of an object and updates the image state.,False,"This code defines a method called ""setBorderWidth"" that takes a float value as a parameter. It sets the value of the ""borderWidth"" variable to the given parameter and then calls the ""updateImageState"" method."
