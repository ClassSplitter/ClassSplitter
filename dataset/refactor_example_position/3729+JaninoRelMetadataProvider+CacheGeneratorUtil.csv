index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,commit,full text,moved,removed
1,provider,Field,"JaninoRelMetadataProvider(RelMetadataProvider) equals(Object)""","""","""","""",43,1,2463,59,18,,private final RelMetadataProvider provider;,False,False
2,DEFAULT,Field,"""","""","""","""",128,2,2544,63,25,,"public static final JaninoRelMetadataProvider DEFAULT =
      JaninoRelMetadataProvider.of(DefaultRelMetadataProvider.INSTANCE);",False,False
3,HANDLERS,Field,"""","""","""","""",538,10,2677,70,26,"/** 
 * Cache of pre-generated handlers by provider and kind of metadata. For the cache to be effective, providers should implement identity correctly. 
 */
","/** Cache of pre-generated handlers by provider and kind of metadata.
   * For the cache to be effective, providers should implement identity
   * correctly. */
  private static final LoadingCache<Key, MetadataHandler<?>> HANDLERS =
      maxSize(CacheBuilder.newBuilder(),
          CalciteSystemProperty.METADATA_HANDLER_CACHE_MAXIMUM_SIZE.value())
          .build(
              CacheLoader.from(key ->
                  generateCompileAndInstantiate(key.handlerClass,
                      key.provider.handlers(key.handlerClass))));",False,False
4,JaninoRelMetadataProvider(RelMetadataProvider),Method,"""","""","""","org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+provider org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+provider""",146,4,3219,78,2,"/** 
 * Private constructor; use  {@link #of}. 
 */
","/** Private constructor; use {@link #of}. */
  private JaninoRelMetadataProvider(RelMetadataProvider provider) {
    this.provider = provider;
  }",False,False
5,of(RelMetadataProvider),Method,"""","org.apache.calcite.plan.RelOptCluster+setMetadataProvider(RelMetadataProvider)""","org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+JaninoRelMetadataProvider(RelMetadataProvider)""","""",339,10,3369,87,9,"/** 
 * Creates a JaninoRelMetadataProvider.
 * @param provider Underlying provider
 */
","/** Creates a JaninoRelMetadataProvider.
   *
   * @param provider Underlying provider
   */
  public static JaninoRelMetadataProvider of(RelMetadataProvider provider) {
    if (provider instanceof JaninoRelMetadataProvider) {
      return (JaninoRelMetadataProvider) provider;
    }
    return new JaninoRelMetadataProvider(provider);
  }",False,False
6,"maxSize(CacheBuilder<K,V>,int)",Method,"""","""","""","""",178,7,3743,95,10,,"private static <K, V> CacheBuilder<K, V> maxSize(CacheBuilder<K, V> builder,
      int size) {
    if (size >= 0) {
      builder.maximumSize(size);
    }
    return builder;
  }",False,False
7,equals(Object),Method,"""","""","java.lang.Object+equals(Object) java.lang.Object+equals(Object)""","org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+provider org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+provider org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+provider""",206,5,3925,103,1,,"@Override public boolean equals(@Nullable Object obj) {
    return obj == this
        || obj instanceof JaninoRelMetadataProvider
        && ((JaninoRelMetadataProvider) obj).provider.equals(provider);
  }",False,False
8,hashCode(),Method,"""","""","java.lang.Object+hashCode() java.lang.Object+hashCode()""","org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+provider""",75,3,4135,109,1,,"@Override public int hashCode() {
    return 109 + provider.hashCode();
  }",False,False
9,"apply(Class<? extends RelNode>,Class<? extends M>)",Method,"""","""","java.lang.UnsupportedOperationException+UnsupportedOperationException()""","""",253,5,4214,114,1,,"@Deprecated // to be removed before 2.0
  @Override public <@Nullable M extends @Nullable Metadata> UnboundMetadata<M> apply(
      Class<? extends RelNode> relClass, Class<? extends M> metadataClass) {
    throw new UnsupportedOperationException();
  }",False,False
10,handlers(MetadataDef<M>),Method,"""","""","org.apache.calcite.rel.metadata.RelMetadataProvider+handlers(MetadataDef<M>) org.apache.calcite.rel.metadata.RelMetadataProvider+handlers(MetadataDef<M>)""","org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+provider""",192,5,4471,120,1,,"@Deprecated // to be removed before 2.0
  @Override public <M extends Metadata> Multimap<Method, MetadataHandler<M>>
      handlers(MetadataDef<M> def) {
    return provider.handlers(def);
  }",False,False
11,handlers(Class<? extends MetadataHandler<?>>),Method,"""","""","org.apache.calcite.rel.metadata.RelMetadataProvider+handlers(Class<? extends MetadataHandler<?>>) org.apache.calcite.rel.metadata.RelMetadataProvider+handlers(Class<? extends MetadataHandler<?>>)""","org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+provider""",157,4,4667,125,1,,"@Override public List<MetadataHandler<?>> handlers(
      Class<? extends MetadataHandler<?>> handlerClass) {
    return provider.handlers(handlerClass);
  }",False,False
12,"generateCompileAndInstantiate(Class<MH>,List<? extends MetadataHandler<? extends Metadata>>)",Method,"""","""","java.lang.StringBuilder+StringBuilder() org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+simpleNameForHandler(Class<? extends MetadataHandler<?>>) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+simpleNameForHandler(Class<? extends MetadataHandler<?>>) java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+size() java.util.Map+size() java.util.Map+entrySet() java.util.Map+entrySet() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Object+getClass() java.util.Map.Entry+getKey() java.util.Map.Entry+getKey() java.lang.Object+getClass() java.lang.Class+getName() java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(String) java.util.Map.Entry+getValue() java.util.Map.Entry+getValue() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.util.Map+entrySet() java.util.Map+entrySet() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Object+getClass() java.util.Map.Entry+getKey() java.util.Map.Entry+getKey() java.lang.Object+getClass() java.lang.Class+getName() java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(String) java.util.Map.Entry+getValue() java.util.Map.Entry+getValue() java.lang.StringBuilder+append(String) java.util.Map+isEmpty() java.util.Map+isEmpty() java.lang.StringBuilder+setLength(int) java.lang.StringBuilder+setLength(int) java.lang.StringBuilder+length() java.lang.StringBuilder+length() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.util.Map+values() java.util.Map+values() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+getDefMethod(StringBuilder,String) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+getDefMethod(StringBuilder,String) java.util.Optional+orElse(T) java.util.stream.Stream+findFirst() java.util.Collection+stream() java.util.Map+values() java.util.Map+values() java.util.Collection+stream() java.util.stream.Stream+findFirst() java.util.Optional+orElse(T) org.apache.calcite.rel.metadata.janino.DispatchGenerator+DispatchGenerator(Map<MetadataHandler<?>,String>) org.apache.calcite.linq4j.Ord+zip(E[]) org.apache.calcite.linq4j.Ord+zip(E[]) java.lang.Class+getDeclaredMethods() java.lang.Class+getDeclaredMethods() org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+cacheProperties(StringBuilder,Method,int) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+cacheProperties(StringBuilder,Method,int) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+generateCachedMethod(StringBuilder,Method,int) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+generateCachedMethod(StringBuilder,Method,int) org.apache.calcite.rel.metadata.janino.DispatchGenerator+dispatchMethod(StringBuilder,Method,Collection<? extends MetadataHandler<?>>) org.apache.calcite.rel.metadata.janino.DispatchGenerator+dispatchMethod(StringBuilder,Method,Collection<? extends MetadataHandler<?>>) java.util.Map+keySet() java.util.Map+keySet() org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+compile(String,String,Class<MH>,List<Object>) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+compile(String,String,Class<MH>,List<Object>) java.lang.StringBuilder+toString() java.lang.StringBuilder+toString() java.lang.RuntimeException+RuntimeException()""","org.apache.calcite.linq4j.Ord+e org.apache.calcite.linq4j.Ord+i org.apache.calcite.linq4j.Ord+e org.apache.calcite.linq4j.Ord+i org.apache.calcite.linq4j.Ord+e""",2434,58,4828,130,10,,"private static <MH extends MetadataHandler<?>> MH generateCompileAndInstantiate(
      Class<MH> handlerClass,
      List<? extends MetadataHandler<? extends Metadata>> handlers) {
    final LinkedHashSet<? extends MetadataHandler<? extends Metadata>> handlerSet =
        new LinkedHashSet<>(handlers);
    final StringBuilder buff = new StringBuilder();
    final String name =
        ""GeneratedMetadata_"" + simpleNameForHandler(handlerClass);

    final Map<MetadataHandler<?>, String> handlerToName = new LinkedHashMap<>();
    for (MetadataHandler<?> provider : handlerSet) {
      if (!handlerToName.containsKey(provider)) {
        handlerToName.put(provider, ""provider"" + handlerToName.size());
      }
    }
    //Properties
    for (Map.Entry<MetadataHandler<?>, String> handlerAndName : handlerToName.entrySet()) {
      buff.append(""  public final "").append(handlerAndName.getKey().getClass().getName())
          .append(' ').append(handlerAndName.getValue()).append("";\n"");
    }
    //Constructor
    buff.append(""  public "").append(name).append(""(\n"");
    for (Map.Entry<MetadataHandler<?>, String> handlerAndName : handlerToName.entrySet()) {
      buff.append(""      "")
          .append(handlerAndName.getKey().getClass().getName())
          .append(' ')
          .append(handlerAndName.getValue())
          .append("",\n"");
    }
    if (!handlerToName.isEmpty()) {
      //Remove trailing comma and new line
      buff.setLength(buff.length() - 2);
    }
    buff.append("") {\n"");
    for (String handlerName : handlerToName.values()) {
      buff.append(""    this."").append(handlerName).append("" = "").append(handlerName)
          .append("";\n"");
    }
    buff.append(""  }\n"");
    getDefMethod(buff, handlerToName.values()
        .stream()
        .findFirst()
        .orElse(null));

    DispatchGenerator dispatchGenerator = new DispatchGenerator(handlerToName);
    for (Ord<Method> method : Ord.zip(handlerClass.getDeclaredMethods())) {
      cacheProperties(buff, method.e, method.i);
      generateCachedMethod(buff, method.e, method.i);
      dispatchGenerator.dispatchMethod(buff, method.e, handlerSet);
    }
    final List<Object> argList = new ArrayList<>(handlerToName.keySet());
    try {
      return compile(name, buff.toString(), handlerClass, argList);
    } catch (CompileException | IOException e) {
      throw new RuntimeException(""Error compiling:\n""
          + buff, e);
    }
  }",False,False
13,"cacheProperties(StringBuilder,Method,int)",Method,"generateCompileAndInstantiate(Class<MH>,List<? extends MetadataHandler<? extends Metadata>>)""","""","java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+appendKeyName(StringBuilder,int) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+appendKeyName(StringBuilder,int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.reflect.Method+toString() java.lang.reflect.Method+toString() java.lang.StringBuilder+append(String)""","""",332,9,7266,189,8,,"static void cacheProperties(StringBuilder buff, Method method, int methodIndex) {
    buff.append(""  private final Object "");
    appendKeyName(buff, methodIndex);
    buff.append("" = new "")
        .append(DescriptiveCacheKey.class.getName())
        .append(""(\"""")
        .append(method.toString())
        .append(""\"");\n"");
  }",True,True
14,"appendKeyName(StringBuilder,int)",Method,"cacheProperties(StringBuilder,Method,int) generateCachedMethod(StringBuilder,Method,int)""","""","java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int)""","""",126,3,7602,199,10,,"private static void appendKeyName(StringBuilder buff, int methodIndex) {
    buff.append(""methodKey"").append(methodIndex);
  }",True,True
15,"getDefMethod(StringBuilder,String)",Method,"generateCompileAndInstantiate(Class<MH>,List<? extends MetadataHandler<? extends Metadata>>)""","""","java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String)""","""",411,14,7732,203,10,,"private static void getDefMethod(StringBuilder buff, @Nullable String handlerName) {
    buff.append(""  public "")
        .append(MetadataDef.class.getName())
        .append("" getDef() {\n"");

    if (handlerName == null) {
      buff.append(""    return null;"");
    } else {
      buff.append(""    return "")
          .append(handlerName)
          .append("".getDef();\n"");
    }
    buff.append(""  }\n"");
  }",False,True
16,"generateCachedMethod(StringBuilder,Method,int)",Method,"generateCompileAndInstantiate(Class<MH>,List<? extends MetadataHandler<? extends Metadata>>)""","""","java.lang.Class+getName() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.reflect.Method+getReturnType() java.lang.reflect.Method+getReturnType() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.reflect.Method+getName() java.lang.reflect.Method+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+paramList(StringBuilder,Method) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+paramList(StringBuilder,Method) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.reflect.Method+getParameterTypes() java.lang.reflect.Method+getParameterTypes() java.lang.Class+getName() java.lang.StringBuilder+append(String) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+appendKeyName(StringBuilder,int) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+appendKeyName(StringBuilder,int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+safeArgList(StringBuilder,Method) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+safeArgList(StringBuilder,Method) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.reflect.Method+getReturnType() java.lang.reflect.Method+getReturnType() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.reflect.Method+getReturnType() java.lang.reflect.Method+getReturnType() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.reflect.Method+getName() java.lang.reflect.Method+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+argList(StringBuilder,Method) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+argList(StringBuilder,Method) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String)""","""",2595,69,8147,218,10,,"private static void generateCachedMethod(StringBuilder buff, Method method, int methodIndex) {
    String delRelClass = DelegatingMetadataRel.class.getName();
    buff.append(""  public "")
        .append(method.getReturnType().getName())
        .append("" "")
        .append(method.getName())
        .append(""(\n"")
        .append(""      "")
        .append(RelNode.class.getName())
        .append("" r,\n"")
        .append(""      "")
        .append(RelMetadataQuery.class.getName())
        .append("" mq"");
    paramList(buff, method)
        .append("") {\n"")
        .append(""    while (r instanceof "").append(delRelClass).append("") {\n"")
        .append(""      r = (("").append(delRelClass).append("") r).getMetadataDelegateRel();\n"")
        .append(""    }\n"")
        .append(""    final java.util.List key = "")
        .append(
            (method.getParameterTypes().length < 4
                ? org.apache.calcite.runtime.FlatLists.class
                : ImmutableList.class).getName())
        .append("".of("");
    appendKeyName(buff, methodIndex);
    safeArgList(buff, method)
        .append("");\n"")
        .append(""    final Object v = mq.map.get(r, key);\n"")
        .append(""    if (v != null) {\n"")
        .append(""      if (v == "")
        .append(NullSentinel.class.getName())
        .append("".ACTIVE) {\n"")
        .append(""        throw new "")
        .append(CyclicMetadataException.class.getName())
        .append(""();\n"")
        .append(""      }\n"")
        .append(""      if (v == "")
        .append(NullSentinel.class.getName())
        .append("".INSTANCE) {\n"")
        .append(""        return null;\n"")
        .append(""      }\n"")
        .append(""      return ("")
        .append(method.getReturnType().getName())
        .append("") v;\n"")
        .append(""    }\n"")
        .append(""    mq.map.put(r, key,"")
        .append(NullSentinel.class.getName())
        .append("".ACTIVE);\n"")
        .append(""    try {\n"")
        .append(""      final "")
        .append(method.getReturnType().getName())
        .append("" x = "")
        .append(method.getName())
        .append(""_(r, mq"");
    argList(buff, method)
        .append("");\n"")
        .append(""      mq.map.put(r, key, "")
        .append(NullSentinel.class.getName())
        .append("".mask(x));\n"")
        .append(""      return x;\n"")
        .append(""    } catch ("")
        .append(Exception.class.getName())
        .append("" e) {\n"")
        .append(""      mq.map.row(r).clear();\n"")
        .append(""      throw e;\n"")
        .append(""    }\n"")
        .append(""  }\n"")
        .append(""\n"");
  }",True,True
17,simpleNameForHandler(Class<? extends MetadataHandler<?>>),Method,"generateCompileAndInstantiate(Class<MH>,List<? extends MetadataHandler<? extends Metadata>>)""","""","java.lang.Class+getSimpleName() java.lang.Class+getSimpleName() java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+split(String) java.lang.Class+getName() java.lang.Class+getName() java.lang.String+split(String)""","""",479,11,10746,288,10,,"private static String simpleNameForHandler(Class<? extends MetadataHandler<?>> clazz) {
    String simpleName = clazz.getSimpleName();
    //Previously the pattern was to have a nested in class named Handler
    //So we need to add the parents class to get a unique name
    if (simpleName.equals(""Handler"")) {
      String[] parts = clazz.getName().split(""\\.|\\$"");
      return parts[parts.length - 2] + parts[parts.length - 1];
    } else {
      return simpleName;
    }
  }",False,False
18,"argList(StringBuilder,Method)",Method,"generateCachedMethod(StringBuilder,Method,int)""","""","java.lang.reflect.Method+getParameterTypes() java.lang.reflect.Method+getParameterTypes() java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int)""","""",285,8,11229,301,10,"/** 
 * Returns e.g. "", ignoreNulls"". 
 */
","/** Returns e.g. "", ignoreNulls"". */
  private static StringBuilder argList(StringBuilder buff, Method method) {
    Class<?>[] paramTypes = method.getParameterTypes();
    for (int i = 2; i < paramTypes.length; i++) {
      buff.append("", a"").append(i - 2);
    }
    return buff;
  }",False,False
19,"safeArgList(StringBuilder,Method)",Method,"generateCachedMethod(StringBuilder,Method,int)""","""","java.lang.reflect.Method+getParameterTypes() java.lang.reflect.Method+getParameterTypes() java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String)""","""",499,14,11518,310,10,"/** 
 * Returns e.g. "", ignoreNulls"". 
 */
","/** Returns e.g. "", ignoreNulls"". */
  private static StringBuilder safeArgList(StringBuilder buff, Method method) {
    Class<?>[] paramTypes = method.getParameterTypes();
    for (int i = 2; i < paramTypes.length; i++) {
      Class<?> t = paramTypes[i];
      if (Primitive.is(t)) {
        buff.append("", a"").append(i - 2);
      } else {
        buff.append("", "") .append(NullSentinel.class.getName())
            .append("".mask(a"").append(i - 2).append("")"");
      }
    }
    return buff;
  }",False,False
20,"paramList(StringBuilder,Method)",Method,"generateCachedMethod(StringBuilder,Method,int)""","""","java.lang.reflect.Method+getParameterTypes() java.lang.reflect.Method+getParameterTypes() java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Class+getName() java.lang.Class+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int)""","""",348,8,12021,325,10,"/** 
 * Returns e.g. "",\n boolean ignoreNulls"". 
 */
","/** Returns e.g. "",\n boolean ignoreNulls"". */
  private static StringBuilder paramList(StringBuilder buff, Method method) {
    Class<?>[] paramTypes = method.getParameterTypes();
    for (int i = 2; i < paramTypes.length; i++) {
      buff.append("",\n      "").append(paramTypes[i].getName()).append("" a"").append(i - 2);
    }
    return buff;
  }",False,False
21,"compile(String,String,Class<MH>,List<Object>)",Method,"generateCompileAndInstantiate(Class<MH>,List<? extends MetadataHandler<? extends Metadata>>)""","""","java.util.Objects+requireNonNull(T,String) java.util.Objects+requireNonNull(T,String) java.lang.Class+getClassLoader() java.lang.Class+getClassLoader() java.lang.IllegalStateException+IllegalStateException(String,Throwable) java.lang.Class+getClassLoader() java.lang.Class+getClassLoader() java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName() org.apache.calcite.config.CalciteSystemProperty+value() org.apache.calcite.config.CalciteSystemProperty+value() java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.reflect.Constructor+newInstance(Object[]) java.lang.reflect.Constructor+newInstance(Object[]) java.util.List+toArray() java.util.List+toArray() java.lang.RuntimeException+RuntimeException(Throwable) java.lang.Class+cast(Object) java.lang.Class+cast(Object)""","org.apache.calcite.config.CalciteSystemProperty+DEBUG java.lang.System+out""",1573,43,12373,333,8,,"static  <MH extends MetadataHandler<?>> MH compile(String className,
      String classBody, Class<MH> handlerClass,
      List<Object> argList) throws CompileException, IOException {
    final ICompilerFactory compilerFactory;
    ClassLoader classLoader =
        Objects.requireNonNull(JaninoRelMetadataProvider.class.getClassLoader(), ""classLoader"");
    try {
      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory(classLoader);
    } catch (Exception e) {
      throw new IllegalStateException(
          ""Unable to instantiate java compiler"", e);
    }

    final ISimpleCompiler compiler = compilerFactory.newSimpleCompiler();
    compiler.setParentClassLoader(JaninoRexCompiler.class.getClassLoader());

    final String s = ""public final class "" + className
        + "" implements "" + handlerClass.getCanonicalName() + "" {\n""
        + classBody
        + ""\n""
        + ""}"";

    if (CalciteSystemProperty.DEBUG.value()) {
      // Add line numbers to the generated janino class
      compiler.setDebuggingInformation(true, true, true);
      System.out.println(s);
    }

    compiler.cook(s);
    final Constructor constructor;
    final Object o;
    try {
      constructor = compiler.getClassLoader().loadClass(className)
          .getDeclaredConstructors()[0];
      o = constructor.newInstance(argList.toArray());
    } catch (InstantiationException
        | IllegalAccessException
        | InvocationTargetException
        | ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
    return handlerClass.cast(o);
  }",False,False
22,revise(Class<H>),Method,"""","org.apache.calcite.rel.metadata.RelMetadataQueryBase+revise(Class<H>)""","org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+Key(Class<? extends MetadataHandler<?>>,RelMetadataProvider) java.lang.Class+cast(Object) java.lang.Class+cast(Object) org.apache.calcite.util.Util+throwAsRuntime(Throwable) org.apache.calcite.util.Util+throwAsRuntime(Throwable) org.apache.calcite.util.Util+causeOrSelf(Throwable) org.apache.calcite.util.Util+causeOrSelf(Throwable)""","org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+provider org.apache.calcite.rel.metadata.JaninoRelMetadataProvider+HANDLERS""",355,9,13950,377,32,,"synchronized <H extends MetadataHandler<?>> H revise(Class<H> handlerClass) {
    try {
      final Key key = new Key(handlerClass, provider);
      //noinspection unchecked
      return handlerClass.cast(HANDLERS.get(key));
    } catch (UncheckedExecutionException | ExecutionException e) {
      throw Util.throwAsRuntime(Util.causeOrSelf(e));
    }
  }",False,False
23,register(Iterable<Class<? extends RelNode>>),Method,"""","""","""","""",316,6,14309,391,1,"/** 
 * Registers some classes. Does not flush the providers, but next time we need to generate a provider, it will handle all of these classes. So, calling this method reduces the number of times we need to re-generate. 
 */
","/** Registers some classes. Does not flush the providers, but next time we
   * need to generate a provider, it will handle all of these classes. So,
   * calling this method reduces the number of times we need to re-generate. */
  @Deprecated
  public void register(Iterable<Class<? extends RelNode>> classes) {
  }",False,False
24,NoHandler,MemberClass,"""","""","org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.NoHandler+NoHandler(Class<? extends RelNode>)""","org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.NoHandler+relClass org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.NoHandler+relClass""",379,10,-1,-1,9,"/** 
 * Exception that indicates there there should be a handler for this class but there is not. The action is probably to re-generate the handler class. 
 */
","/** Exception that indicates there there should be a handler for
   * this class but there is not. The action is probably to
   * re-generate the handler class. */
  public static class NoHandler extends ControlFlowException {
    public final Class<? extends RelNode> relClass;

    public NoHandler(Class<? extends RelNode> relClass) {
      this.relClass = relClass;
    }
  }",False,False
25,Key,MemberClass,"""","""","org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+Key(Class<? extends MetadataHandler<?>>,RelMetadataProvider) org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+hashCode() java.lang.Object+hashCode() java.lang.Object+hashCode() java.lang.Object+hashCode() java.lang.Object+hashCode() org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+equals(Object) java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.lang.Object+equals(Object)""","org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+handlerClass org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+provider org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+handlerClass org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+provider org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+handlerClass org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+provider org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+handlerClass org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+handlerClass org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+provider org.apache.calcite.rel.metadata.JaninoRelMetadataProvider.Key+provider""",722,23,-1,-1,10,"/** 
 * Key for the cache. 
 */
","/** Key for the cache. */
  private static class Key {
    final Class<? extends MetadataHandler<? extends Metadata>> handlerClass;
    final RelMetadataProvider provider;

    private Key(Class<? extends MetadataHandler<?>> handlerClass,
        RelMetadataProvider provider) {
      this.handlerClass = handlerClass;
      this.provider = provider;
    }

    @Override public int hashCode() {
      return (handlerClass.hashCode() * 37
          + provider.hashCode()) * 37;
    }

    @Override public boolean equals(@Nullable Object obj) {
      return this == obj
          || obj instanceof Key
          && ((Key) obj).handlerClass.equals(handlerClass)
          && ((Key) obj).provider.equals(provider);
    }
  }",False,False
