index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,annotation,full text,removed
1,pipeline,Field,,,,,69,1,3525,77,129,,@Rule public transient TestPipeline pipeline = TestPipeline.create();,False
2,thrown,Field,,,,,65,1,3597,78,1,,@Rule public ExpectedException thrown = ExpectedException.none();,False
3,setUp(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+initializeBeamTableProvider() org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+initializeBeamTableProvider() org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+initializeCalciteEnvironment() org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+initializeCalciteEnvironment(),,106,5,3666,81,1,,"@Before
  public void setUp() {
    initializeBeamTableProvider();
    initializeCalciteEnvironment();
  }",False
4,testSimpleSelect(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1033,28,3776,87,1,,"@Test
  public void testSimpleSelect() {
    String sql =
        ""SELECT CAST (1243 as INT64), ""
            + ""CAST ('2018-09-15 12:59:59.000000+00' as TIMESTAMP), ""
            + ""CAST ('string' as STRING);"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema =
        Schema.builder()
            .addInt64Field(""field1"")
            .addDateTimeField(""field2"")
            .addStringField(""field3"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValues(
                    1243L,
                    new DateTime(2018, 9, 15, 12, 59, 59, ISOChronology.getInstanceUTC()),
                    ""string"")
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
5,testWithQueryPlannerClass(),Method,,,"org.apache.beam.sdk.Pipeline+apply(PTransform<? super PBegin,OutputT>) org.apache.beam.sdk.Pipeline+apply(PTransform<? super PBegin,OutputT>) org.apache.beam.sdk.extensions.sql.SqlTransform+withQueryPlannerClass(Class<? extends QueryPlanner>) org.apache.beam.sdk.extensions.sql.SqlTransform+query(String) org.apache.beam.sdk.extensions.sql.SqlTransform+query(String) org.apache.beam.sdk.extensions.sql.SqlTransform+withQueryPlannerClass(Class<? extends QueryPlanner>) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,934,27,4885,117,1,,"@Test
  public void testWithQueryPlannerClass() {
    String sql =
        ""SELECT CAST (1243 as INT64), ""
            + ""CAST ('2018-09-15 12:59:59.000000+00' as TIMESTAMP), ""
            + ""CAST ('string' as STRING);"";

    PCollection<Row> stream =
        pipeline.apply(SqlTransform.query(sql).withQueryPlannerClass(ZetaSQLQueryPlanner.class));
    final Schema schema =
        Schema.builder()
            .addInt64Field(""field1"")
            .addDateTimeField(""field2"")
            .addStringField(""field3"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValues(
                    1243L,
                    new DateTime(2018, 9, 15, 12, 59, 59, ISOChronology.getInstanceUTC()),
                    ""string"")
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
6,testPlannerNamePipelineOption(),Method,,,"org.apache.beam.sdk.options.PipelineOptions+as(Class<T>) org.apache.beam.sdk.testing.TestPipeline+getOptions() org.apache.beam.sdk.testing.TestPipeline+getOptions() org.apache.beam.sdk.options.PipelineOptions+as(Class<T>) org.apache.beam.sdk.Pipeline+apply(PTransform<? super PBegin,OutputT>) org.apache.beam.sdk.Pipeline+apply(PTransform<? super PBegin,OutputT>) org.apache.beam.sdk.extensions.sql.SqlTransform+query(String) org.apache.beam.sdk.extensions.sql.SqlTransform+query(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1050,31,5890,146,1,,"@Test
  public void testPlannerNamePipelineOption() {
    pipeline
        .getOptions()
        .as(BeamSqlPipelineOptions.class)
        .setPlannerName(""org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner"");

    String sql =
        ""SELECT CAST (1243 as INT64), ""
            + ""CAST ('2018-09-15 12:59:59.000000+00' as TIMESTAMP), ""
            + ""CAST ('string' as STRING);"";

    PCollection<Row> stream = pipeline.apply(SqlTransform.query(sql));
    final Schema schema =
        Schema.builder()
            .addInt64Field(""field1"")
            .addDateTimeField(""field2"")
            .addStringField(""field3"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValues(
                    1243L,
                    new DateTime(2018, 9, 15, 12, 59, 59, ISOChronology.getInstanceUTC()),
                    ""string"")
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
7,testByteLiterals(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,663,16,6944,178,1,,"@Test
  public void testByteLiterals() {
    String sql = ""SELECT b'abc'"";

    byte[] byteString = new byte[] {'a', 'b', 'c'};

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""ColA"", FieldType.BYTES).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(byteString).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
8,testByteString(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,838,19,7611,195,1,,"@Test
  public void testByteString() {
    String sql = ""SELECT @p0 IS NULL AS ColA"";

    ByteString byteString = ByteString.copyFrom(new byte[] {0x62});

    ImmutableMap<String, Value> params =
        ImmutableMap.<String, Value>builder().put(""p0"", Value.createBytesValue(byteString)).build();

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""ColA"", FieldType.BOOLEAN).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(false).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
9,testFloat(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,594,14,8453,215,1,,"@Test
  public void testFloat() {
    String sql = ""SELECT 3.0"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""ColA"", FieldType.DOUBLE).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(3.0).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
10,testStringLiterals(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,661,15,9051,230,1,,"@Test
  public void testStringLiterals() {
    String sql = ""SELECT '\""America/Los_Angeles\""\\n'"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""ColA"", FieldType.STRING).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues(""\""America/Los_Angeles\""\n"").build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
11,testParameterString(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,700,15,9716,246,1,,"@Test
  public void testParameterString() {
    String sql = ""SELECT ?"";
    ImmutableList<Value> params = ImmutableList.of(Value.createStringValue(""abc\n""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""ColA"", FieldType.STRING).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""abc\n"").build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
12,testEQ1(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,945,21,10420,263,1,,"@Test
  @Ignore(""[BEAM-9182] NULL parameters do not work in BeamZetaSqlCalcRel"")
  public void testEQ1() {
    String sql = ""SELECT @p0 = @p1 AS ColA"";

    ImmutableMap<String, Value> params =
        ImmutableMap.<String, Value>builder()
            .put(""p0"", Value.createSimpleNullValue(TypeKind.TYPE_BOOL))
            .put(""p1"", Value.createBoolValue(true))
            .build();

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((Boolean) null).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
13,testEQ2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addBooleanField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addBooleanField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",java.lang.Double+POSITIVE_INFINITY org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1001,22,11369,287,1,,"@Test
  @Ignore(
      ""Does not support inf/-inf/nan in double/float literals because double/float literals are""
          + "" converted to BigDecimal in Calcite codegen."")
  public void testEQ2() {
    String sql = ""SELECT @p0 = @p1 AS ColA"";

    ImmutableMap<String, Value> params =
        ImmutableMap.<String, Value>builder()
            .put(""p0"", Value.createDoubleValue(0))
            .put(""p1"", Value.createDoubleValue(Double.POSITIVE_INFINITY))
            .build();

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addBooleanField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(false).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
14,testEQ3(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,949,21,12374,308,1,,"@Test
  @Ignore(""[BEAM-9182] NULL parameters do not work in BeamZetaSqlCalcRel"")
  public void testEQ3() {
    String sql = ""SELECT @p0 = @p1 AS ColA"";

    ImmutableMap<String, Value> params =
        ImmutableMap.<String, Value>builder()
            .put(""p0"", Value.createSimpleNullValue(TypeKind.TYPE_DOUBLE))
            .put(""p1"", Value.createDoubleValue(3.14))
            .build();

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((Boolean) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
15,testEQ4(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,889,19,13327,329,1,,"@Test
  public void testEQ4() {
    String sql = ""SELECT @p0 = @p1 AS ColA"";

    ImmutableMap<String, Value> params =
        ImmutableMap.<String, Value>builder()
            .put(""p0"", Value.createBytesValue(ByteString.copyFromUtf8(""hello"")))
            .put(""p1"", Value.createBytesValue(ByteString.copyFromUtf8(""hello"")))
            .build();

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(true).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
16,testEQ5(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,618,12,14220,349,1,,"@Test
  public void testEQ5() {
    String sql = ""SELECT b'hello' = b'hello' AS ColA"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(true).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
17,testEQ6(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,729,14,14842,362,1,,"@Test
  public void testEQ6() {
    String sql = ""SELECT ? = ? AS ColA"";
    ImmutableList<Value> params =
        ImmutableList.of(Value.createInt64Value(4L), Value.createInt64Value(5L));
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(false).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
18,testIsNotNull1(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,754,15,15575,377,1,,"@Test
  public void testIsNotNull1() {
    String sql = ""SELECT @p0 IS NOT NULL AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(""p0"", Value.createSimpleNullValue(TypeKind.TYPE_STRING));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(false).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
19,testIsNotNull2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,848,18,16333,393,1,,"@Test
  public void testIsNotNull2() {
    String sql = ""SELECT @p0 IS NOT NULL AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createNullValue(
                TypeFactory.createArrayType(TypeFactory.createSimpleType(TypeKind.TYPE_INT64))));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(false).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
20,testIsNotNull3(),Method,,,"java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) java.lang.Object+Object() org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,962,21,17185,412,1,,"@Test
  public void testIsNotNull3() {
    String sql = ""SELECT @p0 IS NOT NULL AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createNullValue(
                TypeFactory.createStructType(
                    Arrays.asList(
                        new StructField(
                            ""a"", TypeFactory.createSimpleType(TypeKind.TYPE_STRING))))));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(false).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
21,testIfBasic(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,865,21,18151,434,1,,"@Test
  public void testIfBasic() {
    String sql = ""SELECT IF(@p0, @p1, @p2) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createBoolValue(true),
            ""p1"",
            Value.createInt64Value(1),
            ""p2"",
            Value.createInt64Value(2));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.INT64).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(1L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
22,testIfPositional(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,781,17,19020,456,1,,"@Test
  public void testIfPositional() {
    String sql = ""SELECT IF(?, ?, ?) AS ColA"";

    ImmutableList<Value> params =
        ImmutableList.of(
            Value.createBoolValue(true), Value.createInt64Value(1), Value.createInt64Value(2));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.INT64).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(1L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
23,testCoalesceBasic(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,913,21,19805,474,1,,"@Test
  public void testCoalesceBasic() {
    String sql = ""SELECT COALESCE(@p0, @p1, @p2) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createSimpleNullValue(TypeKind.TYPE_STRING),
            ""p1"",
            Value.createStringValue(""yay""),
            ""p2"",
            Value.createStringValue(""nay""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.STRING).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""yay"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
24,testCoalesceSingleArgument(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,784,16,20722,496,1,,"@Test
  public void testCoalesceSingleArgument() {
    String sql = ""SELECT COALESCE(@p0) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(""p0"", Value.createSimpleNullValue(TypeKind.TYPE_INT64));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder().addNullableField(""field1"", FieldType.array(FieldType.INT64)).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValue(null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
25,testCoalesceNullArray(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1029,22,21510,513,1,,"@Test
  public void testCoalesceNullArray() {
    String sql = ""SELECT COALESCE(@p0, @p1) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createNullValue(
                TypeFactory.createArrayType(TypeFactory.createSimpleType(TypeKind.TYPE_INT64))),
            ""p1"",
            Value.createNullValue(
                TypeFactory.createArrayType(TypeFactory.createSimpleType(TypeKind.TYPE_INT64))));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder().addNullableField(""field1"", FieldType.array(FieldType.INT64)).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValue(null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
26,testNullIfCoercion(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,913,20,22543,537,1,,"@Test
  @Ignore(""[BEAM-9182] NULL parameters do not work in BeamZetaSqlCalcRel"")
  public void testNullIfCoercion() {
    String sql = ""SELECT NULLIF(@p0, @p1) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createInt64Value(3L),
            ""p1"",
            Value.createSimpleNullValue(TypeKind.TYPE_DOUBLE));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.DOUBLE).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValue(3.0).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
27,testCoalesceNullStruct(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema+of(Field[]) org.apache.beam.sdk.schemas.Schema+of(Field[]) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,891,21,23460,557,1,,"@Test
  public void testCoalesceNullStruct() {
    String sql = ""SELECT COALESCE(NULL, STRUCT(\""a\"" AS s, -33 AS i))"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);

    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);

    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema innerSchema =
        Schema.of(Field.of(""s"", FieldType.STRING), Field.of(""i"", FieldType.INT64));
    final Schema schema =
        Schema.builder().addNullableField(""field1"", FieldType.row(innerSchema)).build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValue(Row.withSchema(innerSchema).addValues(""a"", -33L).build())
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
28,testIfTimestamp(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1030,24,24355,579,1,,"@Test
  public void testIfTimestamp() {
    String sql = ""SELECT IF(@p0, @p1, @p2) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createBoolValue(false),
            ""p1"",
            Value.createTimestampValueFromUnixMicros(0),
            ""p2"",
            Value.createTimestampValueFromUnixMicros(
                DateTime.parse(""2019-01-01T00:00:00Z"").getMillis() * 1000));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", DATETIME).build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(DateTime.parse(""2019-01-01T00:00:00Z"")).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
29,testMakeArray(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,792,18,25389,605,1,,"@Test
  @Ignore(""$make_array is not implemented"")
  public void testMakeArray() {
    String sql = ""SELECT [s3, s1, s2] FROM (SELECT \""foo\"" AS s1, \""bar\"" AS s2, \""baz\"" AS s3);"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);

    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);

    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder().addNullableField(""field1"", FieldType.array(FieldType.STRING)).build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValue(ImmutableList.of(""baz"", ""foo"", ""bar"")).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
30,testNullIfPositive(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,790,16,26185,623,1,,"@Test
  public void testNullIfPositive() {
    String sql = ""SELECT NULLIF(@p0, @p1) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createStringValue(""null""), ""p1"", Value.createStringValue(""null""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.STRING).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValue(null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
31,testNullIfNegative(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,791,16,26979,640,1,,"@Test
  public void testNullIfNegative() {
    String sql = ""SELECT NULLIF(@p0, @p1) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createStringValue(""foo""), ""p1"", Value.createStringValue(""null""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.STRING).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""foo"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
32,testIfNullPositive(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,794,16,27774,657,1,,"@Test
  public void testIfNullPositive() {
    String sql = ""SELECT IFNULL(@p0, @p1) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createStringValue(""foo""), ""p1"", Value.createStringValue(""default""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.STRING).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""foo"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
33,testIfNullNegative(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,845,19,28572,674,1,,"@Test
  public void testIfNullNegative() {
    String sql = ""SELECT IFNULL(@p0, @p1) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createSimpleNullValue(TypeKind.TYPE_STRING),
            ""p1"",
            Value.createStringValue(""yay""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.STRING).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""yay"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
34,testEmptyArrayParameter(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addArrayField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addArrayField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,898,20,29421,694,1,,"@Test
  public void testEmptyArrayParameter() {
    String sql = ""SELECT @p0 AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createArrayValue(
                TypeFactory.createArrayType(TypeFactory.createSimpleType(TypeKind.TYPE_INT64)),
                ImmutableList.of()));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addArrayField(""field1"", FieldType.INT64).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValue(ImmutableList.of()).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
35,testEmptyArrayLiteral(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addArrayField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addArrayField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,639,13,30323,715,1,,"@Test
  public void testEmptyArrayLiteral() {
    String sql = ""SELECT ARRAY<STRING>[];"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addArrayField(""field1"", FieldType.STRING).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValue(ImmutableList.of()).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
36,testLike1(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,780,16,30966,729,1,,"@Test
  public void testLike1() {
    String sql = ""SELECT @p0 LIKE  @p1 AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createStringValue(""ab%""), ""p1"", Value.createStringValue(""ab\\%""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(true).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
37,testLikeNullPattern(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,936,21,31750,747,1,,"@Test
  @Ignore(""[BEAM-9182] NULL parameters do not work in BeamZetaSqlCalcRel"")
  public void testLikeNullPattern() {
    String sql = ""SELECT @p0 LIKE  @p1 AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createStringValue(""ab%""),
            ""p1"",
            Value.createSimpleNullValue(TypeKind.TYPE_STRING));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((Object) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
38,testLikeAllowsEscapingNonSpecialCharacter(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,797,15,32690,768,1,,"@Test
  public void testLikeAllowsEscapingNonSpecialCharacter() {
    String sql = ""SELECT @p0 LIKE  @p1 AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(""p0"", Value.createStringValue(""ab""), ""p1"", Value.createStringValue(""\\ab""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(true).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
39,testLikeAllowsEscapingBackslash(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,804,16,33491,784,1,,"@Test
  public void testLikeAllowsEscapingBackslash() {
    String sql = ""SELECT @p0 LIKE  @p1 AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createStringValue(""a\\c""), ""p1"", Value.createStringValue(""a\\\\c""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(true).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
40,testLikeBytes(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,867,19,34299,801,1,,"@Test
  public void testLikeBytes() {
    String sql = ""SELECT @p0 LIKE  @p1 AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createBytesValue(ByteString.copyFromUtf8(""abcd"")),
            ""p1"",
            Value.createBytesValue(ByteString.copyFromUtf8(""__%"")));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(true).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
41,testMod(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,577,13,35170,821,1,,"@Test
  public void testMod() {
    String sql = ""SELECT MOD(4, 2)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(0L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
42,testSimpleUnionAll(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1460,38,35751,835,1,,"@Test
  public void testSimpleUnionAll() {
    String sql =
        ""SELECT CAST (1243 as INT64), ""
            + ""CAST ('2018-09-15 12:59:59.000000+00' as TIMESTAMP), ""
            + ""CAST ('string' as STRING) ""
            + "" UNION ALL ""
            + "" SELECT CAST (1243 as INT64), ""
            + ""CAST ('2018-09-15 12:59:59.000000+00' as TIMESTAMP), ""
            + ""CAST ('string' as STRING);"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addInt64Field(""field1"")
            .addDateTimeField(""field2"")
            .addStringField(""field3"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValues(
                    1243L,
                    new DateTime(2018, 9, 15, 12, 59, 59, ISOChronology.getInstanceUTC()),
                    ""string"")
                .build(),
            Row.withSchema(schema)
                .addValues(
                    1243L,
                    new DateTime(2018, 9, 15, 12, 59, 59, ISOChronology.getInstanceUTC()),
                    ""string"")
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
43,testThreeWayUnionAll(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,775,16,37215,874,1,,"@Test
  public void testThreeWayUnionAll() {
    String sql = ""SELECT a FROM (SELECT 1 a UNION ALL SELECT 2 UNION ALL SELECT 3)"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(1L).build(),
            Row.withSchema(schema).addValues(2L).build(),
            Row.withSchema(schema).addValues(3L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
44,testSimpleUnionDISTINCT(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1233,32,37994,891,1,,"@Test
  public void testSimpleUnionDISTINCT() {
    String sql =
        ""SELECT CAST (1243 as INT64), ""
            + ""CAST ('2018-09-15 12:59:59.000000+00' as TIMESTAMP), ""
            + ""CAST ('string' as STRING) ""
            + "" UNION DISTINCT ""
            + "" SELECT CAST (1243 as INT64), ""
            + ""CAST ('2018-09-15 12:59:59.000000+00' as TIMESTAMP), ""
            + ""CAST ('string' as STRING);"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addInt64Field(""field1"")
            .addDateTimeField(""field2"")
            .addStringField(""field3"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValues(
                    1243L,
                    new DateTime(2018, 9, 15, 12, 59, 59, ISOChronology.getInstanceUTC()),
                    ""string"")
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
45,testZetaSQLInnerJoin(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,772,20,39231,924,1,,"@Test
  public void testZetaSQLInnerJoin() {
    String sql =
        ""SELECT t1.Key ""
            + ""FROM KeyValue AS t1""
            + "" INNER JOIN BigTable AS t2""
            + "" on ""
            + "" t1.Key = t2.RowKey AND t1.ts = t2.ts"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""field1"").build())
                .addValues(15L)
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
46,testZetaSQLInnerJoinWithUsing(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,752,16,40007,946,1,,"@Test
  // JOIN USING(col) is equivalent to JOIN on left.col = right.col.
  public void testZetaSQLInnerJoinWithUsing() {
    String sql = ""SELECT t1.Key "" + ""FROM KeyValue AS t1"" + "" INNER JOIN BigTable AS t2 USING(ts)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""field1"").build())
                .addValues(15L)
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
47,testZetaSQLInnerJoinTwo(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,824,21,40763,963,1,,"@Test
  // testing ordering of the JOIN conditions.
  public void testZetaSQLInnerJoinTwo() {
    String sql =
        ""SELECT t2.RowKey ""
            + ""FROM KeyValue AS t1""
            + "" INNER JOIN BigTable AS t2""
            + "" on ""
            + "" t2.RowKey = t1.Key AND t2.ts = t1.ts"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""field1"").build())
                .addValues(15L)
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
48,testZetaSQLLeftOuterJoin(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() java.lang.Object+Object() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1990,55,41591,984,1,,"@Test
  public void testZetaSQLLeftOuterJoin() {
    String sql =
        ""SELECT * ""
            + ""FROM KeyValue AS t1""
            + "" LEFT JOIN BigTable AS t2""
            + "" on ""
            + "" t1.Key = t2.RowKey"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schemaOne =
        Schema.builder()
            .addInt64Field(""field1"")
            .addStringField(""field2"")
            .addDateTimeField(""field3"")
            .addNullableField(""field4"", FieldType.INT64)
            .addNullableField(""field5"", FieldType.STRING)
            .addNullableField(""field6"", DATETIME)
            .build();

    final Schema schemaTwo =
        Schema.builder()
            .addInt64Field(""field1"")
            .addStringField(""field2"")
            .addDateTimeField(""field3"")
            .addInt64Field(""field4"")
            .addStringField(""field5"")
            .addDateTimeField(""field6"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schemaOne)
                .addValues(
                    14L,
                    ""KeyValue234"",
                    new DateTime(2018, 7, 1, 21, 26, 6, ISOChronology.getInstanceUTC()),
                    null,
                    null,
                    null)
                .build(),
            Row.withSchema(schemaTwo)
                .addValues(
                    15L,
                    ""KeyValue235"",
                    new DateTime(2018, 7, 1, 21, 26, 7, ISOChronology.getInstanceUTC()),
                    15L,
                    ""BigTable235"",
                    new DateTime(2018, 7, 1, 21, 26, 7, ISOChronology.getInstanceUTC()))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
49,testZetaSQLRightOuterJoin(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() java.lang.Object+Object() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1992,55,43585,1040,1,,"@Test
  public void testZetaSQLRightOuterJoin() {
    String sql =
        ""SELECT * ""
            + ""FROM KeyValue AS t1""
            + "" RIGHT JOIN BigTable AS t2""
            + "" on ""
            + "" t1.Key = t2.RowKey"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schemaOne =
        Schema.builder()
            .addNullableField(""field1"", FieldType.INT64)
            .addNullableField(""field2"", FieldType.STRING)
            .addNullableField(""field3"", DATETIME)
            .addInt64Field(""field4"")
            .addStringField(""field5"")
            .addDateTimeField(""field6"")
            .build();

    final Schema schemaTwo =
        Schema.builder()
            .addInt64Field(""field1"")
            .addStringField(""field2"")
            .addDateTimeField(""field3"")
            .addInt64Field(""field4"")
            .addStringField(""field5"")
            .addDateTimeField(""field6"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schemaOne)
                .addValues(
                    null,
                    null,
                    null,
                    16L,
                    ""BigTable236"",
                    new DateTime(2018, 7, 1, 21, 26, 8, ISOChronology.getInstanceUTC()))
                .build(),
            Row.withSchema(schemaTwo)
                .addValues(
                    15L,
                    ""KeyValue235"",
                    new DateTime(2018, 7, 1, 21, 26, 7, ISOChronology.getInstanceUTC()),
                    15L,
                    ""BigTable235"",
                    new DateTime(2018, 7, 1, 21, 26, 7, ISOChronology.getInstanceUTC()))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
50,testZetaSQLFullOuterJoin(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() java.lang.Object+Object() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,2670,74,45581,1096,1,,"@Test
  public void testZetaSQLFullOuterJoin() {
    String sql =
        ""SELECT * ""
            + ""FROM KeyValue AS t1""
            + "" FULL JOIN BigTable AS t2""
            + "" on ""
            + "" t1.Key = t2.RowKey"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schemaOne =
        Schema.builder()
            .addNullableField(""field1"", FieldType.INT64)
            .addNullableField(""field2"", FieldType.STRING)
            .addNullableField(""field3"", DATETIME)
            .addInt64Field(""field4"")
            .addStringField(""field5"")
            .addDateTimeField(""field6"")
            .build();

    final Schema schemaTwo =
        Schema.builder()
            .addInt64Field(""field1"")
            .addStringField(""field2"")
            .addDateTimeField(""field3"")
            .addInt64Field(""field4"")
            .addStringField(""field5"")
            .addDateTimeField(""field6"")
            .build();

    final Schema schemaThree =
        Schema.builder()
            .addInt64Field(""field1"")
            .addStringField(""field2"")
            .addDateTimeField(""field3"")
            .addNullableField(""field4"", FieldType.INT64)
            .addNullableField(""field5"", FieldType.STRING)
            .addNullableField(""field6"", DATETIME)
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schemaOne)
                .addValues(
                    null,
                    null,
                    null,
                    16L,
                    ""BigTable236"",
                    new DateTime(2018, 7, 1, 21, 26, 8, ISOChronology.getInstanceUTC()))
                .build(),
            Row.withSchema(schemaTwo)
                .addValues(
                    15L,
                    ""KeyValue235"",
                    new DateTime(2018, 7, 1, 21, 26, 7, ISOChronology.getInstanceUTC()),
                    15L,
                    ""BigTable235"",
                    new DateTime(2018, 7, 1, 21, 26, 7, ISOChronology.getInstanceUTC()))
                .build(),
            Row.withSchema(schemaThree)
                .addValues(
                    14L,
                    ""KeyValue234"",
                    new DateTime(2018, 7, 1, 21, 26, 6, ISOChronology.getInstanceUTC()),
                    null,
                    null,
                    null)
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
51,testZetaSQLFullOuterJoinTwo(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,590,16,48255,1172,1,,"@Test
  @Ignore(""BeamSQL only supports equal join"")
  public void testZetaSQLFullOuterJoinTwo() {
    String sql =
        ""SELECT * ""
            + ""FROM KeyValue AS t1""
            + "" FULL JOIN BigTable AS t2""
            + "" on ""
            + "" t1.Key + t2.RowKey = 30"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
52,testZetaSQLFullOuterJoinFalse(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline,407,9,48849,1188,1,,"@Test
  public void testZetaSQLFullOuterJoinFalse() {
    String sql = ""SELECT * FROM KeyValue AS t1 FULL JOIN BigTable AS t2 ON false"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    thrown.expect(UnsupportedOperationException.class);
    BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
  }",False
53,testZetaSQLThreeWayInnerJoin(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1167,28,49260,1198,1,,"@Test
  public void testZetaSQLThreeWayInnerJoin() {
    String sql =
        ""SELECT t3.Value, t2.Value, t1.Value, t1.Key, t3.ColId FROM KeyValue as t1 ""
            + ""JOIN BigTable as t2 ""
            + ""ON (t1.Key = t2.RowKey) ""
            + ""JOIN Spanner as t3 ""
            + ""ON (t3.ColId = t1.Key)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addStringField(""t3.Value"")
                        .addStringField(""t2.Value"")
                        .addStringField(""t1.Value"")
                        .addInt64Field(""t1.Key"")
                        .addInt64Field(""t3.ColId"")
                        .build())
                .addValues(""Spanner235"", ""BigTable235"", ""KeyValue235"", 15L, 15L)
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
54,testZetaSQLTableJoinOnItselfWithFiltering(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1004,25,50431,1227,1,,"@Test
  public void testZetaSQLTableJoinOnItselfWithFiltering() {
    String sql =
        ""SELECT * FROM Spanner as t1 ""
            + ""JOIN Spanner as t2 ""
            + ""ON (t1.ColId = t2.ColId) WHERE t1.ColId = 17"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addInt64Field(""field1"")
                        .addStringField(""field2"")
                        .addInt64Field(""field3"")
                        .addStringField(""field4"")
                        .build())
                .addValues(17L, ""Spanner237"", 17L, ""Spanner237"")
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
55,testZetaSQLSelectFromSelect(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.values.PCollection+getSchema() org.apache.beam.sdk.values.PCollection+getSchema()",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,956,21,51439,1253,1,,"@Test
  public void testZetaSQLSelectFromSelect() {
    String sql = ""SELECT * FROM (SELECT \""apple\"" AS fruit, \""carrot\"" AS vegetable);"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder().addStringField(""field1"").addStringField(""field2"").build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues(""apple"", ""carrot"").build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));

    Schema outputSchema = stream.getSchema();
    Assert.assertEquals(2, outputSchema.getFieldCount());
    Assert.assertEquals(""fruit"", outputSchema.getField(0).getName());
    Assert.assertEquals(""vegetable"", outputSchema.getField(1).getName());
  }",False
56,testZetaSQLSelectFromTable(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,750,17,52399,1275,1,,"@Test
  public void testZetaSQLSelectFromTable() {
    String sql = ""SELECT Key, Value FROM KeyValue;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").addStringField(""field2"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(14L, ""KeyValue234"").build(),
            Row.withSchema(schema).addValues(15L, ""KeyValue235"").build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
57,testZetaSQLSelectFromTableLimit(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,762,16,53153,1293,1,,"@Test
  public void testZetaSQLSelectFromTableLimit() {
    String sql = ""SELECT Key, Value FROM KeyValue LIMIT 2;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").addStringField(""field2"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(14L, ""KeyValue234"").build(),
            Row.withSchema(schema).addValues(15L, ""KeyValue235"").build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
58,testZetaSQLSelectFromTableLimit0(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,503,9,53919,1310,1,,"@Test
  public void testZetaSQLSelectFromTableLimit0() {
    String sql = ""SELECT Key, Value FROM KeyValue LIMIT 0;"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    PAssert.that(stream).containsInAnyOrder();
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
59,testZetaSQLSelectNullLimitParam(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,557,12,54426,1320,1,,"@Test
  public void testZetaSQLSelectNullLimitParam() {
    String sql = ""SELECT Key, Value FROM KeyValue LIMIT @lmt;"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""lmt"", Value.createNullValue(TypeFactory.createSimpleType(TypeKind.TYPE_INT64)));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(RuntimeException.class);
    thrown.expectMessage(""Limit requires non-null count and offset"");
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
  }",False
60,testZetaSQLSelectNullOffsetParam(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,567,12,54987,1333,1,,"@Test
  public void testZetaSQLSelectNullOffsetParam() {
    String sql = ""SELECT Key, Value FROM KeyValue LIMIT 1 OFFSET @lmt;"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""lmt"", Value.createNullValue(TypeFactory.createSimpleType(TypeKind.TYPE_INT64)));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(RuntimeException.class);
    thrown.expectMessage(""Limit requires non-null count and offset"");
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
  }",False
61,testZetaSQLSelectFromTableOrderLimit(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,765,12,55558,1346,1,,"@Test
  public void testZetaSQLSelectFromTableOrderLimit() {
    String sql =
        ""SELECT x, y FROM (SELECT 1 as x, 0 as y UNION ALL SELECT 0, 0 ""
            + ""UNION ALL SELECT 1, 0 UNION ALL SELECT 1, 1) ORDER BY x LIMIT 1"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addInt64Field(""field1"").addInt64Field(""field2"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(0L, 0L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
62,testZetaSQLSelectFromTableLimitOffset(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,720,12,56327,1359,1,,"@Test
  public void testZetaSQLSelectFromTableLimitOffset() {
    String sql =
        ""SELECT COUNT(a) FROM (\n""
            + ""SELECT a FROM (SELECT 1 a UNION ALL SELECT 2 UNION ALL SELECT 3) LIMIT 3 OFFSET 1);"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addInt64Field(""field1"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(2L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
63,testZetaSQLSelectFromTableOrderByLimit(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,786,15,57193,1374,1,,"@Test
  public void testZetaSQLSelectFromTableOrderByLimit() {
    String sql = ""SELECT Key, Value FROM KeyValue ORDER BY Key DESC LIMIT 2;"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").addStringField(""field2"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(14L, ""KeyValue234"").build(),
            Row.withSchema(schema).addValues(15L, ""KeyValue235"").build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
64,testZetaSQLSelectFromTableOrderBy(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,373,8,57983,1390,1,,"@Test
  public void testZetaSQLSelectFromTableOrderBy() {
    String sql = ""SELECT Key, Value FROM KeyValue ORDER BY Key DESC;"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(RuntimeException.class);
    thrown.expectMessage(""ORDER BY without a LIMIT is not supported."");
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
65,testZetaSQLSelectFromTableWithStructType2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,694,12,58360,1399,1,,"@Test
  public void testZetaSQLSelectFromTableWithStructType2() {
    String sql =
        ""SELECT table_with_struct.struct_col.struct_col_str FROM table_with_struct WHERE id = 1;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addStringField(""field"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValue(""row_one"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
66,testZetaSQLStructFieldAccessInFilter(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,724,13,59058,1412,1,,"@Test
  public void testZetaSQLStructFieldAccessInFilter() {
    String sql =
        ""SELECT table_with_struct.id FROM table_with_struct WHERE""
            + "" table_with_struct.struct_col.struct_col_str = 'row_one';"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addInt64Field(""field"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValue(1L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
67,testZetaSQLStructFieldAccessInCast(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,740,13,59786,1426,1,,"@Test
  public void testZetaSQLStructFieldAccessInCast() {
    String sql =
        ""SELECT CAST(table_with_struct.id AS STRING) FROM table_with_struct WHERE""
            + "" table_with_struct.struct_col.struct_col_str = 'row_one';"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addStringField(""field"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValue(""1"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
68,testZetaSQLStructFieldAccessInCast2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,894,18,60530,1441,1,,"@Test
  @Ignore(""[BEAM-9191] CAST operator does not work fully due to bugs in unparsing"")
  public void testZetaSQLStructFieldAccessInCast2() {
    String sql =
        ""SELECT CAST(A.struct_col.struct_col_str AS TIMESTAMP) FROM table_with_struct_ts_string AS""
            + "" A"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addDateTimeField(""field"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValue(parseTimestampWithUTCTimeZone(""2019-01-15 13:21:03""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
69,testAggregateWithAndWithoutColumnRefs(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1489,38,61428,1460,1,,"@Test
  // Used to validate fix for [BEAM-8042].
  public void testAggregateWithAndWithoutColumnRefs() {
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);

    String sql =
        ""SELECT \n""
            + ""  id, \n""
            + ""  SUM(has_f1) as f1_count, \n""
            + ""  SUM(has_f2) as f2_count, \n""
            + ""  SUM(has_f3) as f3_count, \n""
            + ""  SUM(has_f4) as f4_count, \n""
            + ""  SUM(has_f5) as f5_count, \n""
            + ""  COUNT(*) as count, \n""
            + ""  SUM(has_f6) as f6_count  \n""
            + ""FROM (select 0 as id, 1 as has_f1, 2 as has_f2, 3 as has_f3, 4 as has_f4, 5 as has_f5, 6 as has_f6)\n""
            + ""GROUP BY id"";

    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema =
        Schema.builder()
            .addInt64Field(""id"")
            .addInt64Field(""f1_count"")
            .addInt64Field(""f2_count"")
            .addInt64Field(""f3_count"")
            .addInt64Field(""f4_count"")
            .addInt64Field(""f5_count"")
            .addInt64Field(""count"")
            .addInt64Field(""f6_count"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(0L, 1L, 2L, 3L, 4L, 5L, 1L, 6L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
70,testZetaSQLStructFieldAccessInGroupBy(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,843,15,62921,1498,1,,"@Test
  public void testZetaSQLStructFieldAccessInGroupBy() {
    String sql = ""SELECT rowCol.row_id, COUNT(*) FROM table_with_struct_two GROUP BY rowCol.row_id"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addInt64Field(""field1"").addInt64Field(""field2"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(1L, 1L).build(),
            Row.withSchema(schema).addValues(2L, 1L).build(),
            Row.withSchema(schema).addValues(3L, 2L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
71,testZetaSQLAnyValueInGroupBy(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) org.apache.beam.sdk.testing.PAssert.IterableAssert+satisfies(SerializableFunction<Iterable<T>,Void>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+satisfies(SerializableFunction<Iterable<T>,Void>) java.lang.Iterable+iterator() java.lang.Iterable+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.Map+remove(Object) java.util.Map+remove(Object) org.apache.beam.sdk.values.Row+getInt64(String) org.apache.beam.sdk.values.Row+getInt64(String) java.util.List+contains(Object) java.util.List+contains(Object) org.apache.beam.sdk.values.Row+getString(String) org.apache.beam.sdk.values.Row+getString(String) java.util.Map+isEmpty() java.util.Map+isEmpty() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1267,29,63768,1514,1,,"@Test
  public void testZetaSQLAnyValueInGroupBy() {
    String sql =
        ""SELECT rowCol.row_id as key, ANY_VALUE(rowCol.data) as any_value FROM table_with_struct_two GROUP BY rowCol.row_id"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    Map<Long, List<String>> allowedTuples = new HashMap<>();
    allowedTuples.put(1L, Arrays.asList(""data1""));
    allowedTuples.put(2L, Arrays.asList(""data2""));
    allowedTuples.put(3L, Arrays.asList(""data2"", ""data3""));

    PAssert.that(stream)
        .satisfies(
            input -> {
              Iterator<Row> iter = input.iterator();
              while (iter.hasNext()) {
                Row row = iter.next();
                List<String> values = allowedTuples.remove(row.getInt64(""key""));
                assertTrue(values != null);
                assertTrue(values.contains(row.getString(""any_value"")));
              }
              assertTrue(allowedTuples.isEmpty());
              return null;
            });

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
72,testZetaSQLStructFieldAccessInGroupBy2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1007,22,65039,1544,1,,"@Test
  public void testZetaSQLStructFieldAccessInGroupBy2() {
    String sql =
        ""SELECT rowCol.data, MAX(rowCol.row_id), MIN(rowCol.row_id) FROM table_with_struct_two""
            + "" GROUP BY rowCol.data"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema =
        Schema.builder()
            .addStringField(""field1"")
            .addInt64Field(""field2"")
            .addInt64Field(""field3"")
            .build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(""data1"", 1L, 1L).build(),
            Row.withSchema(schema).addValues(""data2"", 3L, 2L).build(),
            Row.withSchema(schema).addValues(""data3"", 3L, 3L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
73,testZetaSQLStructFieldAccessInnerJoin(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,832,17,66050,1567,1,,"@Test
  public void testZetaSQLStructFieldAccessInnerJoin() {
    String sql =
        ""SELECT A.rowCol.data FROM table_with_struct_two AS A INNER JOIN ""
            + ""table_with_struct AS B ""
            + ""ON A.rowCol.row_id = B.id"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addStringField(""field1"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValue(""data1"").build(),
            Row.withSchema(schema).addValue(""data2"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
74,testZetaSQLSelectFromTableWithArrayType(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addArrayField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addArrayField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,770,17,66886,1585,1,,"@Test
  public void testZetaSQLSelectFromTableWithArrayType() {
    String sql = ""SELECT array_col FROM table_with_array;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addArrayField(""field"", FieldType.STRING).build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValue(Arrays.asList(""1"", ""2"", ""3"")).build(),
            Row.withSchema(schema).addValue(ImmutableList.of()).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
75,testZetaSQLSelectStarFromTable(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1160,32,67660,1603,1,,"@Test
  public void testZetaSQLSelectStarFromTable() {
    String sql = ""SELECT * FROM BigTable;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addInt64Field(""field1"")
            .addStringField(""field2"")
            .addDateTimeField(""field3"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValues(
                    15L,
                    ""BigTable235"",
                    new DateTime(2018, 7, 1, 21, 26, 7, ISOChronology.getInstanceUTC()))
                .build(),
            Row.withSchema(schema)
                .addValues(
                    16L,
                    ""BigTable236"",
                    new DateTime(2018, 7, 1, 21, 26, 8, ISOChronology.getInstanceUTC()))
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
76,testZetaSQLBasicFiltering(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,709,16,68824,1636,1,,"@Test
  public void testZetaSQLBasicFiltering() {
    String sql = ""SELECT Key, Value FROM KeyValue WHERE Key = 14;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder().addInt64Field(""field1"").addStringField(""field2"").build())
                .addValues(14L, ""KeyValue234"")
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
77,testZetaSQLBasicFilteringTwo(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,535,11,69537,1653,1,,"@Test
  public void testZetaSQLBasicFilteringTwo() {
    String sql = ""SELECT Key, Value FROM KeyValue WHERE Key = 14 AND Value = 'non-existing';"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    PAssert.that(stream).containsInAnyOrder();

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
78,testZetaSQLBasicFilteringThree(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,781,17,70076,1665,1,,"@Test
  public void testZetaSQLBasicFilteringThree() {
    String sql = ""SELECT Key, Value FROM KeyValue WHERE Key = 14 OR Key = 15;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").addStringField(""field2"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(14L, ""KeyValue234"").build(),
            Row.withSchema(schema).addValues(15L, ""KeyValue235"").build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
79,testZetaSQLCountOnAColumn(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,611,14,70861,1683,1,,"@Test
  public void testZetaSQLCountOnAColumn() {
    String sql = ""SELECT COUNT(Key) FROM KeyValue"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(2L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
80,testZetaSQLAggDistinct(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,361,8,71476,1698,1,,"@Test
  public void testZetaSQLAggDistinct() {
    String sql = ""SELECT Key, COUNT(DISTINCT Value) FROM KeyValue GROUP BY Key"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(RuntimeException.class);
    thrown.expectMessage(""Does not support COUNT DISTINCT"");
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
81,testZetaSQLBasicAgg(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,735,17,71841,1707,1,,"@Test
  public void testZetaSQLBasicAgg() {
    String sql = ""SELECT Key, COUNT(*) FROM KeyValue GROUP BY Key"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").addInt64Field(""field2"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(14L, 1L).build(),
            Row.withSchema(schema).addValues(15L, 1L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
82,testZetaSQLColumnAlias1(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.values.PCollection+getSchema() org.apache.beam.sdk.values.PCollection+getSchema()",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,715,14,72580,1725,1,,"@Test
  public void testZetaSQLColumnAlias1() {
    String sql = ""SELECT Key, COUNT(*) AS count_col FROM KeyValue GROUP BY Key"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));

    Schema outputSchema = stream.getSchema();
    Assert.assertEquals(2, outputSchema.getFieldCount());
    Assert.assertEquals(""Key"", outputSchema.getField(0).getName());
    Assert.assertEquals(""count_col"", outputSchema.getField(1).getName());
  }",False
83,testZetaSQLColumnAlias2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.values.PCollection+getSchema() org.apache.beam.sdk.values.PCollection+getSchema()",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,779,16,73299,1740,1,,"@Test
  public void testZetaSQLColumnAlias2() {
    String sql =
        ""SELECT Key AS k1, (count_col + 1) AS k2 FROM (SELECT Key, COUNT(*) AS count_col FROM""
            + "" KeyValue GROUP BY Key)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));

    Schema outputSchema = stream.getSchema();
    Assert.assertEquals(2, outputSchema.getFieldCount());
    Assert.assertEquals(""k1"", outputSchema.getField(0).getName());
    Assert.assertEquals(""k2"", outputSchema.getField(1).getName());
  }",False
84,testZetaSQLColumnAlias3(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.values.PCollection+getSchema() org.apache.beam.sdk.values.PCollection+getSchema()",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,767,15,74082,1757,1,,"@Test
  public void testZetaSQLColumnAlias3() {
    String sql = ""SELECT Key AS v1, Value AS v2, ts AS v3 FROM KeyValue"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));

    Schema outputSchema = stream.getSchema();
    Assert.assertEquals(3, outputSchema.getFieldCount());
    Assert.assertEquals(""v1"", outputSchema.getField(0).getName());
    Assert.assertEquals(""v2"", outputSchema.getField(1).getName());
    Assert.assertEquals(""v3"", outputSchema.getField(2).getName());
  }",False
85,testZetaSQLColumnAlias4(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.values.PCollection+getSchema() org.apache.beam.sdk.values.PCollection+getSchema()",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,623,13,74853,1773,1,,"@Test
  public void testZetaSQLColumnAlias4() {
    String sql = ""SELECT CAST(123 AS INT64) AS cast_col"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));

    Schema outputSchema = stream.getSchema();
    Assert.assertEquals(1, outputSchema.getFieldCount());
    Assert.assertEquals(""cast_col"", outputSchema.getField(0).getName());
  }",False
86,testZetaSQLAmbiguousAlias(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,430,11,75480,1787,1,,"@Test
  public void testZetaSQLAmbiguousAlias() {
    String sql = ""SELECT row_id as ID, int64_col as ID FROM table_all_types GROUP BY ID;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);

    thrown.expectMessage(
        ""Name ID in GROUP BY clause is ambiguous; it may refer to multiple columns in the""
            + "" SELECT-list [at 1:68]"");
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
87,testZetaSQLAggWithOrdinalReference(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,820,18,75914,1799,1,,"@Test
  public void testZetaSQLAggWithOrdinalReference() {
    String sql = ""SELECT Key, COUNT(*) FROM aggregate_test_table GROUP BY 1"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").addInt64Field(""field2"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(1L, 2L).build(),
            Row.withSchema(schema).addValues(2L, 3L).build(),
            Row.withSchema(schema).addValues(3L, 2L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
88,testZetaSQLAggWithAliasReference(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,823,18,76738,1818,1,,"@Test
  public void testZetaSQLAggWithAliasReference() {
    String sql = ""SELECT Key AS K, COUNT(*) FROM aggregate_test_table GROUP BY K"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").addInt64Field(""field2"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(1L, 2L).build(),
            Row.withSchema(schema).addValues(2L, 3L).build(),
            Row.withSchema(schema).addValues(3L, 2L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
89,testZetaSQLBasicAgg2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,808,18,77565,1837,1,,"@Test
  public void testZetaSQLBasicAgg2() {
    String sql = ""SELECT Key, COUNT(*) FROM aggregate_test_table GROUP BY Key"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").addInt64Field(""field2"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(1L, 2L).build(),
            Row.withSchema(schema).addValues(2L, 3L).build(),
            Row.withSchema(schema).addValues(3L, 2L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
90,testZetaSQLBasicAgg3(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1053,25,78377,1856,1,,"@Test
  public void testZetaSQLBasicAgg3() {
    String sql = ""SELECT Key, Key2, COUNT(*) FROM aggregate_test_table GROUP BY Key2, Key"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addInt64Field(""field1"")
            .addInt64Field(""field3"")
            .addInt64Field(""field2"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(1L, 10L, 1L).build(),
            Row.withSchema(schema).addValues(1L, 11L, 1L).build(),
            Row.withSchema(schema).addValues(2L, 11L, 2L).build(),
            Row.withSchema(schema).addValues(2L, 12L, 1L).build(),
            Row.withSchema(schema).addValues(3L, 13L, 2L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
91,testZetaSQLBasicAgg4(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDoubleField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addDoubleField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1306,30,79434,1882,1,,"@Test
  public void testZetaSQLBasicAgg4() {
    String sql =
        ""SELECT Key, Key2, MAX(f_int_1), MIN(f_int_1), SUM(f_int_1), SUM(f_double_1) ""
            + ""FROM aggregate_test_table GROUP BY Key2, Key"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addInt64Field(""field1"")
            .addInt64Field(""field3"")
            .addInt64Field(""field2"")
            .addInt64Field(""field4"")
            .addInt64Field(""field5"")
            .addDoubleField(""field6"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(1L, 10L, 1L, 1L, 1L, 1.0).build(),
            Row.withSchema(schema).addValues(1L, 11L, 2L, 2L, 2L, 2.0).build(),
            Row.withSchema(schema).addValues(2L, 11L, 4L, 3L, 7L, 7.0).build(),
            Row.withSchema(schema).addValues(2L, 12L, 5L, 5L, 5L, 5.0).build(),
            Row.withSchema(schema).addValues(3L, 13L, 7L, 6L, 13L, 13.0).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
92,testZetaSQLBasicAgg5(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDoubleField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDoubleField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addDoubleField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDoubleField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1185,28,80744,1913,1,,"@Test
  public void testZetaSQLBasicAgg5() {
    String sql =
        ""SELECT Key, Key2, AVG(CAST(f_int_1 AS FLOAT64)), AVG(f_double_1) ""
            + ""FROM aggregate_test_table GROUP BY Key2, Key"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addInt64Field(""field1"")
            .addInt64Field(""field2"")
            .addDoubleField(""field3"")
            .addDoubleField(""field4"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(1L, 10L, 1.0, 1.0).build(),
            Row.withSchema(schema).addValues(1L, 11L, 2.0, 2.0).build(),
            Row.withSchema(schema).addValues(2L, 11L, 3.5, 3.5).build(),
            Row.withSchema(schema).addValues(2L, 12L, 5.0, 5.0).build(),
            Row.withSchema(schema).addValues(3L, 13L, 6.5, 6.5).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
93,testZetaSQLTestAVG(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1061,26,81933,1945,1,,"@Test
  @Ignore(
      ""Calcite infers return type of AVG(int64) as BIGINT while ZetaSQL requires it as either""
          + "" NUMERIC or DOUBLE/FLOAT64"")
  public void testZetaSQLTestAVG() {
    String sql = ""SELECT Key, AVG(f_int_1)"" + ""FROM aggregate_test_table GROUP BY Key"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addInt64Field(""field1"")
            .addInt64Field(""field2"")
            .addInt64Field(""field3"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(1L, 10L, 1L).build(),
            Row.withSchema(schema).addValues(1L, 11L, 6L).build(),
            Row.withSchema(schema).addValues(2L, 11L, 6L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
94,testZetaSQLGroupByExprInSelect(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,901,19,82998,1969,1,,"@Test
  public void testZetaSQLGroupByExprInSelect() {
    String sql = ""SELECT int64_col + 1 FROM table_all_types GROUP BY int64_col + 1;"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValue(0L).build(),
            Row.withSchema(schema).addValue(-1L).build(),
            Row.withSchema(schema).addValue(-2L).build(),
            Row.withSchema(schema).addValue(-3L).build(),
            Row.withSchema(schema).addValue(-4L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
95,testZetaSQLGroupByAndFiltering(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,538,9,83903,1989,1,,"@Test
  public void testZetaSQLGroupByAndFiltering() {
    String sql = ""SELECT int64_col FROM table_all_types WHERE int64_col = 1 GROUP BY int64_col;"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    PAssert.that(stream).containsInAnyOrder();
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
96,testZetaSQLGroupByAndFilteringOnNonGroupByColumn(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,758,13,84445,1999,1,,"@Test
  public void testZetaSQLGroupByAndFilteringOnNonGroupByColumn() {
    String sql = ""SELECT int64_col FROM table_all_types WHERE double_col = 0.5 GROUP BY int64_col;"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addInt64Field(""field"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValue(-5L).build(),
            Row.withSchema(schema).addValue(-4L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
97,testZetaSQLBasicHaving(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,684,14,85207,2013,1,,"@Test
  public void testZetaSQLBasicHaving() {
    String sql = ""SELECT Key, COUNT(*) FROM aggregate_test_table GROUP BY Key HAVING COUNT(*) > 2"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").addInt64Field(""field2"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(2L, 3L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
98,testZetaSQLHavingNull(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+empty() org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+empty() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,593,14,85895,2028,1,,"@Test
  public void testZetaSQLHavingNull() {
    String sql = ""SELECT SUM(int64_val) FROM all_null_table GROUP BY primary_key HAVING false"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field"").build();

    PAssert.that(stream).empty();

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
99,testZetaSQLBasicFixedWindowing(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() java.lang.Object+Object() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() java.lang.Object+Object() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1531,36,86492,2043,1,,"@Test
  public void testZetaSQLBasicFixedWindowing() {
    String sql =
        ""SELECT ""
            + ""COUNT(*) as field_count, ""
            + ""TUMBLE_START(\""INTERVAL 1 SECOND\"") as window_start, ""
            + ""TUMBLE_END(\""INTERVAL 1 SECOND\"") as window_end ""
            + ""FROM KeyValue ""
            + ""GROUP BY TUMBLE(ts, \""INTERVAL 1 SECOND\"");"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);

    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addInt64Field(""count_start"")
            .addDateTimeField(""field1"")
            .addDateTimeField(""field2"")
            .build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValues(
                    1L,
                    new DateTime(2018, 7, 1, 21, 26, 7, ISOChronology.getInstanceUTC()),
                    new DateTime(2018, 7, 1, 21, 26, 8, ISOChronology.getInstanceUTC()))
                .build(),
            Row.withSchema(schema)
                .addValues(
                    1L,
                    new DateTime(2018, 7, 1, 21, 26, 6, ISOChronology.getInstanceUTC()),
                    new DateTime(2018, 7, 1, 21, 26, 7, ISOChronology.getInstanceUTC()))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
100,testZetaSQLNestedQueryOne(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,835,19,88054,2081,1,,"@Test
  public void testZetaSQLNestedQueryOne() {
    String sql =
        ""SELECT a.Value, a.Key FROM (SELECT Key, Value FROM KeyValue WHERE Key = 14 OR Key = 15)""
            + "" as a;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field2"").addInt64Field(""field1"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(""KeyValue234"", 14L).build(),
            Row.withSchema(schema).addValues(""KeyValue235"", 15L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
101,testZetaSQLNestedQueryTwo(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1147,28,88956,2102,1,,"@Test
  public void testZetaSQLNestedQueryTwo() {
    String sql =
        ""SELECT a.Key, a.Key2, COUNT(*) FROM ""
            + "" (SELECT * FROM aggregate_test_table WHERE Key != 10) as a ""
            + "" GROUP BY a.Key2, a.Key"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addInt64Field(""field1"")
            .addInt64Field(""field3"")
            .addInt64Field(""field2"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(1L, 10L, 1L).build(),
            Row.withSchema(schema).addValues(1L, 11L, 1L).build(),
            Row.withSchema(schema).addValues(2L, 11L, 2L).build(),
            Row.withSchema(schema).addValues(2L, 12L, 1L).build(),
            Row.withSchema(schema).addValues(3L, 13L, 2L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
102,testZetaSQLNestedQueryThree(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() java.lang.Object+Object() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1343,31,90151,2132,1,,"@Test
  public void testZetaSQLNestedQueryThree() {
    String sql =
        ""SELECT * FROM (SELECT * FROM KeyValue) AS t1 INNER JOIN (SELECT * FROM BigTable) AS t2 on""
            + "" t1.Key = t2.RowKey"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addInt64Field(""Key"")
                        .addStringField(""Value"")
                        .addDateTimeField(""ts"")
                        .addInt64Field(""RowKey"")
                        .addStringField(""Value2"")
                        .addDateTimeField(""ts2"")
                        .build())
                .addValues(
                    15L,
                    ""KeyValue235"",
                    new DateTime(2018, 7, 1, 21, 26, 7, ISOChronology.getInstanceUTC()),
                    15L,
                    ""BigTable235"",
                    new DateTime(2018, 7, 1, 21, 26, 7, ISOChronology.getInstanceUTC()))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
103,testZetaSQLNestedQueryFive(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,836,19,91549,2165,1,,"@Test
  public void testZetaSQLNestedQueryFive() {
    String sql =
        ""SELECT a.Value, a.Key FROM (SELECT Value, Key FROM KeyValue WHERE Key = 14 OR Key = 15)""
            + "" as a;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field2"").addInt64Field(""field1"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(""KeyValue234"", 14L).build(),
            Row.withSchema(schema).addValues(""KeyValue235"", 15L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
104,testDateLiteral(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,657,15,92571,2189,1,,"@Test
  public void testDateLiteral() {
    String sql = ""SELECT DATE '2020-3-30'"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addLogicalTypeField(""f_date"", SqlTypes.DATE).build())
                .addValues(LocalDate.of(2020, 3, 30))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
105,testDateColumn(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,818,18,93232,2205,1,,"@Test
  public void testDateColumn() {
    String sql = ""SELECT FORMAT_DATE('%b-%d-%Y', date_field) FROM table_with_date"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addStringField(""f_date_str"").build())
                .addValues(""Dec-25-2008"")
                .build(),
            Row.withSchema(Schema.builder().addStringField(""f_date_str"").build())
                .addValues(""Apr-07-2020"")
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
106,testGroupByDate(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,865,19,94054,2224,1,,"@Test
  public void testGroupByDate() {
    String sql = ""SELECT date_field, COUNT(*) FROM table_with_date GROUP BY date_field"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addLogicalTypeField(""date_field"", SqlTypes.DATE)
            .addInt64Field(""count"")
            .build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(LocalDate.of(2008, 12, 25), 1L).build(),
            Row.withSchema(schema).addValues(LocalDate.of(2020, 4, 7), 1L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
107,testAggregateOnDate(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,724,16,94923,2244,1,,"@Test
  public void testAggregateOnDate() {
    String sql = ""SELECT MAX(date_field) FROM table_with_date GROUP BY str_field"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder().addLogicalTypeField(""date_field"", SqlTypes.DATE).build())
                .addValues(LocalDate.of(2020, 4, 7))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
108,testExtractDate(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1586,36,95737,2263,1,,"@Test
  public void testExtractDate() {
    String sql =
        ""WITH Dates AS (\n""
            + ""  SELECT DATE '2015-12-31' AS date UNION ALL\n""
            + ""  SELECT DATE '2016-01-01'\n""
            + "")\n""
            + ""SELECT\n""
            + ""  EXTRACT(ISOYEAR FROM date) AS isoyear,\n""
            + ""  EXTRACT(YEAR FROM date) AS year,\n""
            + ""  EXTRACT(ISOWEEK FROM date) AS isoweek,\n""
            // TODO[BEAM-9178]: Add tests for DATE_TRUNC and EXTRACT with ""week with weekday"" date
            //  parts once they are supported
            // + ""  EXTRACT(WEEK FROM date) AS week,\n""
            + ""  EXTRACT(MONTH FROM date) AS month\n""
            + ""FROM Dates\n"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addField(""isoyear"", FieldType.INT64)
            .addField(""year"", FieldType.INT64)
            .addField(""isoweek"", FieldType.INT64)
            // .addField(""week"", FieldType.INT64)
            .addField(""month"", FieldType.INT64)
            .build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(2015L, 2015L, 53L /* , 52L */, 12L).build(),
            Row.withSchema(schema).addValues(2015L, 2016L, 53L /* , 0L */, 1L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
109,testDateFromYearMonthDay(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,669,15,97327,2300,1,,"@Test
  public void testDateFromYearMonthDay() {
    String sql = ""SELECT DATE(2008, 12, 25)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addLogicalTypeField(""f_date"", SqlTypes.DATE).build())
                .addValues(LocalDate.of(2008, 12, 25))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
110,testDateFromTimestamp(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,711,15,98000,2316,1,,"@Test
  public void testDateFromTimestamp() {
    String sql = ""SELECT DATE(TIMESTAMP '2016-12-25 05:30:00+07', 'America/Los_Angeles')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addLogicalTypeField(""f_date"", SqlTypes.DATE).build())
                .addValues(LocalDate.of(2016, 12, 24))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
111,testDateAdd(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1165,27,98715,2332,1,,"@Test
  public void testDateAdd() {
    String sql =
        ""SELECT ""
            + ""DATE_ADD(DATE '2008-12-25', INTERVAL 5 DAY), ""
            + ""DATE_ADD(DATE '2008-12-25', INTERVAL 1 MONTH), ""
            + ""DATE_ADD(DATE '2008-12-25', INTERVAL 1 YEAR), "";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addLogicalTypeField(""f_date1"", SqlTypes.DATE)
                        .addLogicalTypeField(""f_date2"", SqlTypes.DATE)
                        .addLogicalTypeField(""f_date3"", SqlTypes.DATE)
                        .build())
                .addValues(
                    LocalDate.of(2008, 12, 30),
                    LocalDate.of(2009, 1, 25),
                    LocalDate.of(2009, 12, 25))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
112,testDateSub(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1166,27,99884,2360,1,,"@Test
  public void testDateSub() {
    String sql =
        ""SELECT ""
            + ""DATE_SUB(DATE '2008-12-25', INTERVAL 5 DAY), ""
            + ""DATE_SUB(DATE '2008-12-25', INTERVAL 1 MONTH), ""
            + ""DATE_SUB(DATE '2008-12-25', INTERVAL 1 YEAR), "";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addLogicalTypeField(""f_date1"", SqlTypes.DATE)
                        .addLogicalTypeField(""f_date2"", SqlTypes.DATE)
                        .addLogicalTypeField(""f_date3"", SqlTypes.DATE)
                        .build())
                .addValues(
                    LocalDate.of(2008, 12, 20),
                    LocalDate.of(2008, 11, 25),
                    LocalDate.of(2007, 12, 25))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
113,testDateDiff(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,653,15,101054,2388,1,,"@Test
  public void testDateDiff() {
    String sql = ""SELECT DATE_DIFF(DATE '2010-07-07', DATE '2008-12-25', DAY)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""f_date_diff"").build())
                .addValues(559L)
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
114,testDateDiffNegativeResult(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,670,15,101711,2404,1,,"@Test
  public void testDateDiffNegativeResult() {
    String sql = ""SELECT DATE_DIFF(DATE '2017-12-17', DATE '2017-12-18', ISOWEEK)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""f_date_diff"").build())
                .addValues(-1L)
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
115,testDateTrunc(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,705,16,102385,2420,1,,"@Test
  public void testDateTrunc() {
    String sql = ""SELECT DATE_TRUNC(DATE '2015-06-15', ISOYEAR)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder().addLogicalTypeField(""f_date_trunc"", SqlTypes.DATE).build())
                .addValues(LocalDate.of(2014, 12, 29))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
116,testFormatDate(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,654,15,103094,2437,1,,"@Test
  public void testFormatDate() {
    String sql = ""SELECT FORMAT_DATE('%b-%d-%Y', DATE '2008-12-25')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addStringField(""f_date_str"").build())
                .addValues(""Dec-25-2008"")
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
117,testParseDate(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,674,15,103752,2453,1,,"@Test
  public void testParseDate() {
    String sql = ""SELECT PARSE_DATE('%m %d %y', '10 14 18')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addLogicalTypeField(""f_date"", SqlTypes.DATE).build())
                .addValues(LocalDate.of(2018, 10, 14))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
118,testDateToUnixInt64(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,638,15,104430,2469,1,,"@Test
  public void testDateToUnixInt64() {
    String sql = ""SELECT UNIX_DATE(DATE '2008-12-25')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""f_unix_date"").build())
                .addValues(14238L)
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
119,testDateFromUnixInt64(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalDate+of(int,int,int) java.time.LocalDate+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,674,15,105072,2485,1,,"@Test
  public void testDateFromUnixInt64() {
    String sql = ""SELECT DATE_FROM_UNIX_DATE(14238)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addLogicalTypeField(""f_date"", SqlTypes.DATE).build())
                .addValues(LocalDate.of(2008, 12, 25))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
120,testTimeLiteral(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalTime+of(int,int,int) java.time.LocalTime+of(int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,885,20,105932,2505,1,,"@Test
  public void testTimeLiteral() {
    String sql = ""SELECT TIME '15:30:00', TIME '15:30:00.135246' "";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addLogicalTypeField(""f_time1"", SqlTypes.TIME)
                        .addLogicalTypeField(""f_time2"", SqlTypes.TIME)
                        .build())
                .addValues(LocalTime.of(15, 30, 0))
                .addValues(LocalTime.of(15, 30, 0, 135246000))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
121,testTimeColumn(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,806,18,106821,2526,1,,"@Test
  public void testTimeColumn() {
    String sql = ""SELECT FORMAT_TIME('%T', time_field) FROM table_with_time"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addStringField(""f_time_str"").build())
                .addValues(""15:30:00"")
                .build(),
            Row.withSchema(Schema.builder().addStringField(""f_time_str"").build())
                .addValues(""23:35:59"")
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
122,testGroupByTime(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.time.LocalTime+of(int,int,int) java.time.LocalTime+of(int,int,int) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.time.LocalTime+of(int,int,int) java.time.LocalTime+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,862,19,107631,2545,1,,"@Test
  public void testGroupByTime() {
    String sql = ""SELECT time_field, COUNT(*) FROM table_with_time GROUP BY time_field"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addLogicalTypeField(""time_field"", SqlTypes.TIME)
            .addInt64Field(""count"")
            .build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(LocalTime.of(15, 30, 0), 1L).build(),
            Row.withSchema(schema).addValues(LocalTime.of(23, 35, 59), 1L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
123,testAggregateOnTime(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalTime+of(int,int,int) java.time.LocalTime+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,724,16,108497,2565,1,,"@Test
  public void testAggregateOnTime() {
    String sql = ""SELECT MAX(time_field) FROM table_with_time GROUP BY str_field"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder().addLogicalTypeField(""time_field"", SqlTypes.TIME).build())
                .addValues(LocalTime.of(23, 35, 59))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
124,testExtractTime(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1244,27,109311,2584,1,,"@Test
  public void testExtractTime() {
    String sql =
        ""SELECT ""
            + ""EXTRACT(HOUR FROM TIME '15:30:35.123456') as hour, ""
            + ""EXTRACT(MINUTE FROM TIME '15:30:35.123456') as minute, ""
            + ""EXTRACT(SECOND FROM TIME '15:30:35.123456') as second, ""
            + ""EXTRACT(MILLISECOND FROM TIME '15:30:35.123456') as millisecond, ""
            + ""EXTRACT(MICROSECOND FROM TIME '15:30:35.123456') as microsecond "";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addField(""hour"", FieldType.INT64)
            .addField(""minute"", FieldType.INT64)
            .addField(""second"", FieldType.INT64)
            .addField(""millisecond"", FieldType.INT64)
            .addField(""microsecond"", FieldType.INT64)
            .build();
    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues(15L, 30L, 35L, 123L, 123456L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
125,testTimeFromHourMinuteSecond(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalTime+of(int,int,int) java.time.LocalTime+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,667,15,110559,2612,1,,"@Test
  public void testTimeFromHourMinuteSecond() {
    String sql = ""SELECT TIME(15, 30, 0)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addLogicalTypeField(""f_time"", SqlTypes.TIME).build())
                .addValues(LocalTime.of(15, 30, 0))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
126,testTimeFromTimestamp(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalTime+of(int,int,int) java.time.LocalTime+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,708,15,111230,2628,1,,"@Test
  public void testTimeFromTimestamp() {
    String sql = ""SELECT TIME(TIMESTAMP '2008-12-25 15:30:00+08', 'America/Los_Angeles')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addLogicalTypeField(""f_time"", SqlTypes.TIME).build())
                .addValues(LocalTime.of(23, 30, 0))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
127,testTimeAdd(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1553,33,111942,2644,1,,"@Test
  public void testTimeAdd() {
    String sql =
        ""SELECT ""
            + ""TIME_ADD(TIME '15:30:00', INTERVAL 10 MICROSECOND), ""
            + ""TIME_ADD(TIME '15:30:00', INTERVAL 10 MILLISECOND), ""
            + ""TIME_ADD(TIME '15:30:00', INTERVAL 10 SECOND), ""
            + ""TIME_ADD(TIME '15:30:00', INTERVAL 10 MINUTE), ""
            + ""TIME_ADD(TIME '15:30:00', INTERVAL 10 HOUR) "";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addLogicalTypeField(""f_time1"", SqlTypes.TIME)
                        .addLogicalTypeField(""f_time2"", SqlTypes.TIME)
                        .addLogicalTypeField(""f_time3"", SqlTypes.TIME)
                        .addLogicalTypeField(""f_time4"", SqlTypes.TIME)
                        .addLogicalTypeField(""f_time5"", SqlTypes.TIME)
                        .build())
                .addValues(
                    LocalTime.of(15, 30, 0, 10000),
                    LocalTime.of(15, 30, 0, 10000000),
                    LocalTime.of(15, 30, 10, 0),
                    LocalTime.of(15, 40, 0, 0),
                    LocalTime.of(1, 30, 0, 0))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
128,testTimeSub(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1560,33,113499,2678,1,,"@Test
  public void testTimeSub() {
    String sql =
        ""SELECT ""
            + ""TIME_SUB(TIME '15:30:00', INTERVAL 10 MICROSECOND), ""
            + ""TIME_SUB(TIME '15:30:00', INTERVAL 10 MILLISECOND), ""
            + ""TIME_SUB(TIME '15:30:00', INTERVAL 10 SECOND), ""
            + ""TIME_SUB(TIME '15:30:00', INTERVAL 10 MINUTE), ""
            + ""TIME_SUB(TIME '15:30:00', INTERVAL 10 HOUR) "";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addLogicalTypeField(""f_time1"", SqlTypes.TIME)
                        .addLogicalTypeField(""f_time2"", SqlTypes.TIME)
                        .addLogicalTypeField(""f_time3"", SqlTypes.TIME)
                        .addLogicalTypeField(""f_time4"", SqlTypes.TIME)
                        .addLogicalTypeField(""f_time5"", SqlTypes.TIME)
                        .build())
                .addValues(
                    LocalTime.of(15, 29, 59, 999990000),
                    LocalTime.of(15, 29, 59, 990000000),
                    LocalTime.of(15, 29, 50, 0),
                    LocalTime.of(15, 20, 0, 0),
                    LocalTime.of(5, 30, 0, 0))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
129,testTimeDiff(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,651,15,115063,2712,1,,"@Test
  public void testTimeDiff() {
    String sql = ""SELECT TIME_DIFF(TIME '15:30:00', TIME '14:35:00', MINUTE)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""f_time_diff"").build())
                .addValues(55L)
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
130,testTimeDiffNegativeResult(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,666,15,115718,2728,1,,"@Test
  public void testTimeDiffNegativeResult() {
    String sql = ""SELECT TIME_DIFF(TIME '14:35:00', TIME '15:30:00', MINUTE)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""f_time_diff"").build())
                .addValues(-55L)
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
131,testTimeTrunc(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalTime+of(int,int,int) java.time.LocalTime+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,696,16,116388,2744,1,,"@Test
  public void testTimeTrunc() {
    String sql = ""SELECT TIME_TRUNC(TIME '15:30:35', HOUR)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder().addLogicalTypeField(""f_time_trunc"", SqlTypes.TIME).build())
                .addValues(LocalTime.of(15, 0, 0))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
132,testFormatTime(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,640,15,117088,2761,1,,"@Test
  public void testFormatTime() {
    String sql = ""SELECT FORMAT_TIME('%R', TIME '15:30:00')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addStringField(""f_time_str"").build())
                .addValues(""15:30"")
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
133,testParseTime(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalTime+of(int,int,int) java.time.LocalTime+of(int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,658,15,117732,2777,1,,"@Test
  public void testParseTime() {
    String sql = ""SELECT PARSE_TIME('%H', '15')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addLogicalTypeField(""f_time"", SqlTypes.TIME).build())
                .addValues(LocalTime.of(15, 0, 0))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
134,testCastBetweenTimeAndString(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addLogicalTypeField(String,LogicalType<InputT,BaseT>) java.time.LocalTime+of(int,int,int,int) java.time.LocalTime+of(int,int,int,int) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+TIME org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,997,22,118394,2794,1,,"@Test
  @Ignore(""https://jira.apache.org/jira/browse/BEAM-10340"")
  public void testCastBetweenTimeAndString() {
    String sql =
        ""SELECT CAST(s1 as TIME) as t2, CAST(t1 as STRING) as s2 FROM ""
            + ""(SELECT '12:34:56.123456' as s1, TIME '12:34:56.123456' as t1)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addLogicalTypeField(""t2"", SqlTypes.TIME)
                        .addStringField(""s2"")
                        .build())
                .addValues(LocalTime.of(12, 34, 56, 123456000), ""12:34:56.123456"")
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
135,testTimestampMicrosecondUnsupported(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,733,18,119582,2820,1,,"@Test
  public void testTimestampMicrosecondUnsupported() {
    String sql =
        ""WITH Timestamps AS (\n""
            + ""  SELECT TIMESTAMP '2000-01-01 00:11:22.345678+00' as timestamp\n""
            + "")\n""
            + ""SELECT\n""
            + ""  timestamp,\n""
            + ""  EXTRACT(ISOYEAR FROM timestamp) AS isoyear,\n""
            + ""  EXTRACT(YEAR FROM timestamp) AS year,\n""
            + ""  EXTRACT(ISOWEEK FROM timestamp) AS week,\n""
            + ""  EXTRACT(MINUTE FROM timestamp) AS minute\n""
            + ""FROM Timestamps\n"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(UnsupportedOperationException.class);
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",True
136,testTimestampLiteralWithoutTimeZone(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,701,15,120319,2839,1,,"@Test
  public void testTimestampLiteralWithoutTimeZone() {
    String sql = ""SELECT TIMESTAMP '2016-12-25 05:30:00'"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addDateTimeField(""field1"").build())
                .addValues(parseTimestampWithUTCTimeZone(""2016-12-25 05:30:00""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
137,testTimestampLiteralWithUTCTimeZone(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,704,15,121024,2855,1,,"@Test
  public void testTimestampLiteralWithUTCTimeZone() {
    String sql = ""SELECT TIMESTAMP '2016-12-25 05:30:00+00'"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addDateTimeField(""field1"").build())
                .addValues(parseTimestampWithUTCTimeZone(""2016-12-25 05:30:00""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
138,testMultipleSelectStatementsThrowsException(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,385,8,121732,2871,1,,"@Test
  public void testMultipleSelectStatementsThrowsException() {
    String sql = ""SELECT 1; SELECT 2;"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(UnsupportedOperationException.class);
    thrown.expectMessage(""No additional statements are allowed after a SELECT statement."");
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
139,testAlreadyDefinedUDFThrowsException(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,384,8,122121,2880,1,,"@Test
  public void testAlreadyDefinedUDFThrowsException() {
    String sql = ""CREATE FUNCTION foo() AS (0); CREATE FUNCTION foo() AS (1); SELECT foo();"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(ParseException.class);
    thrown.expectMessage(""Failed to define function foo"");
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
140,testCreateFunctionNoSelectThrowsException(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,415,8,122509,2889,1,,"@Test
  public void testCreateFunctionNoSelectThrowsException() {
    String sql = ""CREATE FUNCTION plusOne(x INT64) AS (x + 1);"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(UnsupportedOperationException.class);
    thrown.expectMessage(""Statement list must end in a SELECT statement, not CreateFunctionStmt"");
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
141,testNullaryUdf(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,594,13,122928,2898,1,,"@Test
  public void testNullaryUdf() {
    String sql = ""CREATE FUNCTION zero() AS (0); SELECT zero();"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""x"").build()).addValue(0L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
142,testQualifiedNameUdfUnqualifiedCall(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,631,13,123526,2912,1,,"@Test
  public void testQualifiedNameUdfUnqualifiedCall() {
    String sql = ""CREATE FUNCTION foo.bar.baz() AS (\""uwu\""); SELECT baz();"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addStringField(""x"").build()).addValue(""uwu"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
143,testQualifiedNameUdfQualifiedCallThrowsException(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,790,16,124161,2929,1,,"@Test
  @Ignore(
      ""Qualified paths can't be resolved due to a bug in ZetaSQL: ""
          + ""https://github.com/google/zetasql/issues/42"")
  public void testQualifiedNameUdfQualifiedCallThrowsException() {
    String sql = ""CREATE FUNCTION foo.bar.baz() AS (\""uwu\""); SELECT foo.bar.baz();"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addStringField(""x"").build()).addValue(""uwu"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
144,testUnaryUdf(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,616,13,124955,2943,1,,"@Test
  public void testUnaryUdf() {
    String sql = ""CREATE FUNCTION triple(x INT64) AS (3 * x); SELECT triple(triple(1));"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""x"").build()).addValue(9L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
145,testUdfWithinUdf(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,712,16,125575,2957,1,,"@Test
  public void testUdfWithinUdf() {
    String sql =
        ""CREATE FUNCTION triple(x INT64) AS (3 * x);""
            + "" CREATE FUNCTION nonuple(x INT64) as (triple(triple(x)));""
            + "" SELECT nonuple(1);"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""x"").build()).addValue(9L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
146,testUndefinedUdfThrowsException(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,421,11,126291,2974,1,,"@Test
  public void testUndefinedUdfThrowsException() {
    String sql =
        ""CREATE FUNCTION foo() AS (bar()); ""
            + ""CREATE FUNCTION bar() AS (foo()); ""
            + ""SELECT foo();"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(SqlException.class);
    thrown.expectMessage(""Function not found: bar"");
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
147,testRecursiveUdfThrowsException(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,353,8,126716,2986,1,,"@Test
  public void testRecursiveUdfThrowsException() {
    String sql = ""CREATE FUNCTION omega() AS (omega()); SELECT omega();"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(SqlException.class);
    thrown.expectMessage(""Function not found: omega"");
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
148,testUDTVF(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,843,18,127073,2995,1,,"@Test
  public void testUDTVF() {
    String sql =
        ""CREATE TABLE FUNCTION CustomerRange(MinID INT64, MaxID INT64)\n""
            + ""  AS\n""
            + ""    SELECT *\n""
            + ""    FROM KeyValue\n""
            + ""    WHERE key >= MinId AND key <= MaxId; \n""
            + "" SELECT key FROM CustomerRange(10, 14)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    Schema singleField = Schema.builder().addInt64Field(""field1"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(singleField).addValues(14L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
149,testUDTVFTableNotFound(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,621,15,127920,3014,1,,"@Test
  public void testUDTVFTableNotFound() {
    String sql =
        ""CREATE TABLE FUNCTION CustomerRange(MinID INT64, MaxID INT64)\n""
            + ""  AS\n""
            + ""    SELECT *\n""
            + ""    FROM TableNotExist\n""
            + ""    WHERE key >= MinId AND key <= MaxId; \n""
            + "" SELECT key FROM CustomerRange(10, 14)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(SqlConversionException.class);
    thrown.expectMessage(""Wasn't able to resolve the path [TableNotExist] in schema: beam"");
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
150,testUDTVFFunctionNotFound(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,598,15,128545,3030,1,,"@Test
  public void testUDTVFFunctionNotFound() {
    String sql =
        ""CREATE TABLE FUNCTION CustomerRange(MinID INT64, MaxID INT64)\n""
            + ""  AS\n""
            + ""    SELECT *\n""
            + ""    FROM KeyValue\n""
            + ""    WHERE key >= MinId AND key <= MaxId; \n""
            + "" SELECT key FROM FunctionNotFound(10, 14)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(SqlException.class);
    thrown.expectMessage(""Table-valued function not found: FunctionNotFound"");
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
151,testTimestampLiteralWithNonUTCTimeZone(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,732,15,129147,3046,1,,"@Test
  public void testTimestampLiteralWithNonUTCTimeZone() {
    String sql = ""SELECT TIMESTAMP '2018-12-10 10:38:59-10:00'"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addDateTimeField(""f_timestamp_with_time_zone"").build())
                .addValues(parseTimestampWithTimeZone(""2018-12-10 10:38:59-1000""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
152,testExtractTimestamp(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1658,36,129979,3064,1,,"@Test
  public void testExtractTimestamp() {
    String sql =
        ""WITH Timestamps AS (\n""
            + ""  SELECT TIMESTAMP '2007-12-31 12:34:56' AS timestamp UNION ALL\n""
            + ""  SELECT TIMESTAMP '2009-12-31'\n""
            + "")\n""
            + ""SELECT\n""
            + ""  EXTRACT(ISOYEAR FROM timestamp) AS isoyear,\n""
            + ""  EXTRACT(YEAR FROM timestamp) AS year,\n""
            + ""  EXTRACT(ISOWEEK FROM timestamp) AS isoweek,\n""
            // TODO[BEAM-9178]: Add tests for TIMESTAMP_TRUNC and EXTRACT with ""week with weekday""
            //  date parts once they are supported
            // + ""  EXTRACT(WEEK FROM timestamp) AS week,\n""
            + ""  EXTRACT(MINUTE FROM timestamp) AS minute\n""
            + ""FROM Timestamps\n"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addField(""isoyear"", FieldType.INT64)
            .addField(""year"", FieldType.INT64)
            .addField(""isoweek"", FieldType.INT64)
            // .addField(""week"", FieldType.INT64)
            .addField(""minute"", FieldType.INT64)
            .build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(2008L, 2007L, 1L /* , 53L */, 34L).build(),
            Row.withSchema(schema).addValues(2009L, 2009L, 53L /* , 52L */, 0L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
153,testExtractTimestampAtTimeZoneUnsupported(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,655,16,131641,3101,1,,"@Test
  public void testExtractTimestampAtTimeZoneUnsupported() {
    String sql =
        ""WITH Timestamps AS (\n""
            + ""  SELECT TIMESTAMP '2017-05-26' AS timestamp\n""
            + "")\n""
            + ""SELECT\n""
            + ""  timestamp,\n""
            + ""  EXTRACT(HOUR FROM timestamp AT TIME ZONE 'America/Vancouver') AS hour,\n""
            + ""  EXTRACT(DAY FROM timestamp AT TIME ZONE 'America/Vancouver') AS day\n""
            + ""FROM Timestamps\n"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(UnsupportedOperationException.class);
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",True
154,testExtractDateFromTimestampUnsupported(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,491,15,132300,3118,1,,"@Test
  public void testExtractDateFromTimestampUnsupported() {
    String sql =
        ""WITH Timestamps AS (\n""
            + ""  SELECT TIMESTAMP '2017-05-26' AS ts\n""
            + "")\n""
            + ""SELECT\n""
            + ""  ts,\n""
            + ""  EXTRACT(DATE FROM ts) AS dt\n""
            + ""FROM Timestamps\n"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(SqlException.class);
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",True
155,testStringFromTimestamp(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,702,15,132795,3134,1,,"@Test
  public void testStringFromTimestamp() {
    String sql = ""SELECT STRING(TIMESTAMP '2008-12-25 15:30:00', 'America/Los_Angeles')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addStringField(""f_timestamp_string"").build())
                .addValues(""2008-12-25 07:30:00-08"")
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
156,testTimestampFromString(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,718,15,133501,3150,1,,"@Test
  public void testTimestampFromString() {
    String sql = ""SELECT TIMESTAMP('2008-12-25 15:30:00', 'America/Los_Angeles')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addDateTimeField(""f_timestamp"").build())
                .addValues(parseTimestampWithTimeZone(""2008-12-25 15:30:00-08""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
157,testTimestampFromDate(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,689,15,134223,3166,1,,"@Test
  public void testTimestampFromDate() {
    String sql = ""SELECT TIMESTAMP(DATE '2014-01-31')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addDateTimeField(""f_timestamp"").build())
                .addValues(parseTimestampWithTimeZone(""2014-01-31 00:00:00+00""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
158,testTimestampFromDateWithDefaultTimezoneSet(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+setDefaultTimezone(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+setDefaultTimezone(String) org.apache.beam.sdk.options.PipelineOptions+as(Class<T>) org.apache.beam.sdk.testing.TestPipeline+getOptions() org.apache.beam.sdk.testing.TestPipeline+getOptions() org.apache.beam.sdk.options.PipelineOptions+as(Class<T>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,970,22,134916,3183,1,,"@Test
  // test default timezone works properly in query execution stage
  public void testTimestampFromDateWithDefaultTimezoneSet() {
    String sql = ""SELECT TIMESTAMP(DATE '2014-01-31')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    zetaSQLQueryPlanner.setDefaultTimezone(""Asia/Shanghai"");
    pipeline
        .getOptions()
        .as(BeamSqlPipelineOptions.class)
        .setZetaSqlDefaultTimezone(""Asia/Shanghai"");

    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addDateTimeField(""f_timestamp"").build())
                .addValues(parseTimestampWithTimeZone(""2014-01-31 00:00:00+08""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
159,testTimestampAdd(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1105,24,135890,3205,1,,"@Test
  public void testTimestampAdd() {
    String sql =
        ""SELECT ""
            + ""TIMESTAMP_ADD(TIMESTAMP '2008-12-25 15:30:00 UTC', INTERVAL 5+5 MINUTE), ""
            + ""TIMESTAMP_ADD(TIMESTAMP '2008-12-25 15:30:00+07:30', INTERVAL 10 MINUTE)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addDateTimeField(""f_timestamp_add"")
                        .addDateTimeField(""f_timestamp_with_time_zone_add"")
                        .build())
                .addValues(
                    DateTimeUtils.parseTimestampWithUTCTimeZone(""2008-12-25 15:40:00""),
                    parseTimestampWithTimeZone(""2008-12-25 15:40:00+0730""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
160,testTimestampSub(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1105,24,136999,3230,1,,"@Test
  public void testTimestampSub() {
    String sql =
        ""SELECT ""
            + ""TIMESTAMP_SUB(TIMESTAMP '2008-12-25 15:30:00 UTC', INTERVAL 5+5 MINUTE), ""
            + ""TIMESTAMP_SUB(TIMESTAMP '2008-12-25 15:30:00+07:30', INTERVAL 10 MINUTE)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addDateTimeField(""f_timestamp_sub"")
                        .addDateTimeField(""f_timestamp_with_time_zone_sub"")
                        .build())
                .addValues(
                    DateTimeUtils.parseTimestampWithUTCTimeZone(""2008-12-25 15:20:00""),
                    parseTimestampWithTimeZone(""2008-12-25 15:20:00+0730""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
161,testTimestampDiff(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,811,19,138108,3255,1,,"@Test
  public void testTimestampDiff() {
    String sql =
        ""SELECT TIMESTAMP_DIFF(""
            + ""TIMESTAMP '2018-10-14 15:30:00.000 UTC', ""
            + ""TIMESTAMP '2018-08-14 15:05:00.001 UTC', ""
            + ""MILLISECOND)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""f_timestamp_diff"").build())
                .addValues((61L * 24 * 60 + 25) * 60 * 1000 - 1)
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
162,testTimestampDiffNegativeResult(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,692,15,138923,3275,1,,"@Test
  public void testTimestampDiffNegativeResult() {
    String sql = ""SELECT TIMESTAMP_DIFF(TIMESTAMP '2018-08-14', TIMESTAMP '2018-10-14', DAY)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""f_timestamp_diff"").build())
                .addValues(-61L)
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
163,testTimestampTrunc(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,745,15,139619,3291,1,,"@Test
  public void testTimestampTrunc() {
    String sql = ""SELECT TIMESTAMP_TRUNC(TIMESTAMP '2017-11-06 00:00:00+12', ISOWEEK, 'UTC')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addDateTimeField(""f_timestamp_trunc"").build())
                .addValues(DateTimeUtils.parseTimestampWithUTCTimeZone(""2017-10-30 00:00:00""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
164,testFormatTimestamp(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,700,15,140368,3307,1,,"@Test
  public void testFormatTimestamp() {
    String sql = ""SELECT FORMAT_TIMESTAMP('%D %T', TIMESTAMP '2018-10-14 15:30:00.123+00', 'UTC')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addStringField(""f_timestamp_str"").build())
                .addValues(""10/14/18 15:30:00"")
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
165,testParseTimestamp(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,730,15,141072,3323,1,,"@Test
  public void testParseTimestamp() {
    String sql = ""SELECT PARSE_TIMESTAMP('%m-%d-%y %T', '10-14-18 15:30:00', 'UTC')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addDateTimeField(""f_timestamp"").build())
                .addValues(DateTimeUtils.parseTimestampWithUTCTimeZone(""2018-10-14 15:30:00""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
166,testTimestampFromInt64(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,995,21,141806,3339,1,,"@Test
  public void testTimestampFromInt64() {
    String sql = ""SELECT TIMESTAMP_SECONDS(1230219000), TIMESTAMP_MILLIS(1230219000123) "";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addDateTimeField(""f_timestamp_seconds"")
                        .addDateTimeField(""f_timestamp_millis"")
                        .build())
                .addValues(
                    DateTimeUtils.parseTimestampWithUTCTimeZone(""2008-12-25 15:30:00""),
                    DateTimeUtils.parseTimestampWithUTCTimeZone(""2008-12-25 15:30:00.123""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
167,testTimestampToUnixInt64(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,911,22,142805,3361,1,,"@Test
  public void testTimestampToUnixInt64() {
    String sql =
        ""SELECT ""
            + ""UNIX_SECONDS(TIMESTAMP '2008-12-25 15:30:00 UTC'), ""
            + ""UNIX_MILLIS(TIMESTAMP '2008-12-25 15:30:00.123 UTC')"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addInt64Field(""f_unix_seconds"")
                        .addInt64Field(""f_unix_millis"")
                        .build())
                .addValues(1230219000L, 1230219000123L)
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
168,testTimestampFromUnixInt64(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1061,24,143720,3384,1,,"@Test
  public void testTimestampFromUnixInt64() {
    String sql =
        ""SELECT ""
            + ""TIMESTAMP_FROM_UNIX_SECONDS(1230219000), ""
            + ""TIMESTAMP_FROM_UNIX_MILLIS(1230219000123) "";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(
                    Schema.builder()
                        .addDateTimeField(""f_timestamp_seconds"")
                        .addDateTimeField(""f_timestamp_millis"")
                        .build())
                .addValues(
                    DateTimeUtils.parseTimestampWithUTCTimeZone(""2008-12-25 15:30:00""),
                    DateTimeUtils.parseTimestampWithUTCTimeZone(""2008-12-25 15:30:00.123""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
169,testDistinct(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,802,16,144785,3409,1,,"@Test
  public void testDistinct() {
    String sql = ""SELECT DISTINCT Key2 FROM aggregate_test_table"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    Schema schema = Schema.builder().addInt64Field(""Key2"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(10L).build(),
            Row.withSchema(schema).addValues(11L).build(),
            Row.withSchema(schema).addValues(12L).build(),
            Row.withSchema(schema).addValues(13L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
170,testDistinctOnNull(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,649,12,145591,3426,1,,"@Test
  public void testDistinctOnNull() {
    String sql = ""SELECT DISTINCT str_val FROM all_null_table"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    Schema schema = Schema.builder().addNullableField(""str_val"", FieldType.DOUBLE).build();
    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((Object) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
171,testAnyValue(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,651,12,146244,3439,1,,"@Test
  public void testAnyValue() {
    String sql = ""SELECT ANY_VALUE(double_val) FROM all_null_table"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    Schema schema = Schema.builder().addNullableField(""double_val"", FieldType.DOUBLE).build();
    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((Object) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
172,testSelectNULL(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,613,12,146899,3452,1,,"@Test
  public void testSelectNULL() {
    String sql = ""SELECT NULL"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    Schema schema = Schema.builder().addNullableField(""long_val"", FieldType.INT64).build();
    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((Object) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
173,testWithQueryOne(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,744,15,147516,3465,1,,"@Test
  public void testWithQueryOne() {
    String sql =
        ""With T1 AS (SELECT * FROM KeyValue), T2 AS (SELECT * FROM BigTable) SELECT T2.RowKey FROM""
            + "" T1 INNER JOIN T2 on T1.Key = T2.RowKey;"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addInt64Field(""field1"").build())
                .addValues(15L)
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
174,testWithQueryTwo(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,811,19,148264,3481,1,,"@Test
  public void testWithQueryTwo() {
    String sql =
        ""WITH T1 AS (SELECT Key, COUNT(*) as value FROM KeyValue GROUP BY Key) SELECT T1.Key,""
            + "" T1.value FROM T1"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").addInt64Field(""field2"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(14L, 1L).build(),
            Row.withSchema(schema).addValues(15L, 1L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
175,testWithQueryThree(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,839,19,149079,3501,1,,"@Test
  public void testWithQueryThree() {
    String sql =
        ""WITH T1 as (SELECT Value, Key FROM KeyValue WHERE Key = 14 OR Key = 15) SELECT T1.Value,""
            + "" T1.Key FROM T1;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").addInt64Field(""field2"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(""KeyValue234"", 14L).build(),
            Row.withSchema(schema).addValues(""KeyValue235"", 15L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
176,testWithQueryFour(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,844,19,149922,3521,1,,"@Test
  public void testWithQueryFour() {
    String sql =
        ""WITH T1 as (SELECT Value, Key FROM KeyValue) SELECT T1.Value, T1.Key FROM T1 WHERE T1.Key""
            + "" = 14 OR T1.Key = 15;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field2"").addInt64Field(""field1"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(""KeyValue234"", 14L).build(),
            Row.withSchema(schema).addValues(""KeyValue235"", 15L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
177,testWithQueryFive(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,777,18,150770,3541,1,,"@Test
  public void testWithQueryFive() {
    String sql =
        ""WITH T1 AS (SELECT * FROM KeyValue) SELECT T1.Key, COUNT(*) FROM T1 GROUP BY T1.Key"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").addInt64Field(""field2"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(14L, 1L).build(),
            Row.withSchema(schema).addValues(15L, 1L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
178,testWithQuerySix(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() java.lang.Object+Object() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.Object+Object() java.lang.Object+Object() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1564,36,151551,3560,1,,"@Test
  public void testWithQuerySix() {
    String sql =
        ""WITH T1 AS (SELECT * FROM window_test_table_two) SELECT ""
            + ""COUNT(*) as field_count, ""
            + ""SESSION_START(\""INTERVAL 3 SECOND\"") as window_start, ""
            + ""SESSION_END(\""INTERVAL 3 SECOND\"") as window_end ""
            + ""FROM T1 ""
            + ""GROUP BY SESSION(ts, \""INTERVAL 3 SECOND\"");"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);

    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addInt64Field(""count_star"")
            .addDateTimeField(""field1"")
            .addDateTimeField(""field2"")
            .build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValues(
                    2L,
                    new DateTime(2018, 7, 1, 21, 26, 12, ISOChronology.getInstanceUTC()),
                    new DateTime(2018, 7, 1, 21, 26, 12, ISOChronology.getInstanceUTC()))
                .build(),
            Row.withSchema(schema)
                .addValues(
                    2L,
                    new DateTime(2018, 7, 1, 21, 26, 6, ISOChronology.getInstanceUTC()),
                    new DateTime(2018, 7, 1, 21, 26, 6, ISOChronology.getInstanceUTC()))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
179,testUNNESTLiteral(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,703,14,153119,3597,1,,"@Test
  public void testUNNESTLiteral() {
    String sql = ""SELECT * FROM UNNEST(ARRAY<STRING>['foo', 'bar']);"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);

    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    Schema schema = Schema.builder().addStringField(""str_field"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(""foo"").build(),
            Row.withSchema(schema).addValues(""bar"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
180,testUNNESTParameters(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1008,21,153826,3612,1,,"@Test
  public void testUNNESTParameters() {
    String sql = ""SELECT * FROM UNNEST(@p0);"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createArrayValue(
                TypeFactory.createArrayType(TypeFactory.createSimpleType(TypeKind.TYPE_STRING)),
                ImmutableList.of(Value.createStringValue(""foo""), Value.createStringValue(""bar""))));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);

    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    Schema schema = Schema.builder().addStringField(""str_field"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(""foo"").build(),
            Row.withSchema(schema).addValues(""bar"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
181,testUNNESTExpression(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,751,15,154838,3635,1,,"@Test
  @Ignore(""BEAM-9515"")
  public void testUNNESTExpression() {
    String sql = ""SELECT * FROM UNNEST(ARRAY(SELECT Value FROM KeyValue));"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);

    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    Schema schema = Schema.builder().addStringField(""str_field"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(""KeyValue234"").build(),
            Row.withSchema(schema).addValues(""KeyValue235"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
182,testNamedUNNESTLiteral(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,768,15,155593,3650,1,,"@Test
  public void testNamedUNNESTLiteral() {
    String sql = ""SELECT *, T1 FROM UNNEST(ARRAY<STRING>['foo', 'bar']) AS T1"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);

    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    Schema schema =
        Schema.builder().addStringField(""str_field"").addStringField(""str2_field"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(""foo"", ""foo"").build(),
            Row.withSchema(schema).addValues(""bar"", ""bar"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
183,testNamedUNNESTLiteralOffset(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline,420,9,156365,3666,1,,"@Test
  public void testNamedUNNESTLiteralOffset() {
    String sql = ""SELECT x, p FROM UNNEST([3, 4]) AS x WITH OFFSET p"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);

    thrown.expect(UnsupportedOperationException.class);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
  }",False
184,testUnnestArrayColumn(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,873,19,156789,3676,1,,"@Test
  public void testUnnestArrayColumn() {
    String sql =
        ""SELECT p FROM table_with_array_for_unnest, UNNEST(table_with_array_for_unnest.int_array_col) as p"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    Schema schema = Schema.builder().addInt64Field(""int_field"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValue(14L).build(),
            Row.withSchema(schema).addValue(18L).build(),
            Row.withSchema(schema).addValue(22L).build(),
            Row.withSchema(schema).addValue(24L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
185,testStringAggregation(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,734,15,157666,3696,1,,"@Test
  public void testStringAggregation() {
    String sql =
        ""SELECT STRING_AGG(fruit) AS string_agg""
            + "" FROM UNNEST([\""apple\"", \""pear\"", \""banana\"", \""pear\""]) AS fruit"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    Schema schema = Schema.builder().addStringField(""string_field"").build();
    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValue(""apple,pear,banana,pear"").build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
186,testNamedUNNESTJoin(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,738,18,158404,3713,1,,"@Test
  @Ignore(""Seeing exception in Beam, need further investigation on the cause of this failed query."")
  public void testNamedUNNESTJoin() {
    String sql =
        ""SELECT * ""
            + ""FROM table_with_array_for_unnest AS t1""
            + "" LEFT JOIN UNNEST(t1.int_array_col) AS t2""
            + "" on ""
            + "" t1.int_col = t2"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream).containsInAnyOrder();

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
187,testUnnestJoinStruct(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,447,11,159146,3731,1,,"@Test
  public void testUnnestJoinStruct() {
    String sql =
        ""SELECT b, x FROM UNNEST(""
            + ""[STRUCT(true AS b, [3, 5] AS arr), STRUCT(false AS b, [7, 9] AS arr)]) t ""
            + ""LEFT JOIN UNNEST(t.arr) x ON b"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(UnsupportedOperationException.class);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
188,testUnnestJoinLiteral(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,447,12,159597,3743,1,,"@Test
  public void testUnnestJoinLiteral() {
    String sql =
        ""SELECT a, b ""
            + ""FROM UNNEST([1, 1, 2, 3, 5, 8, 13, NULL]) a ""
            + ""JOIN UNNEST([1, 2, 3, 5, 7, 11, 13, NULL]) b ""
            + ""ON a = b"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(UnsupportedOperationException.class);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
189,testUnnestJoinSubquery(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,414,12,160048,3756,1,,"@Test
  public void testUnnestJoinSubquery() {
    String sql =
        ""SELECT a, b ""
            + ""FROM UNNEST([1, 2, 3]) a ""
            + ""JOIN UNNEST(ARRAY(SELECT b FROM UNNEST([3, 2, 1]) b)) b ""
            + ""ON a = b"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(UnsupportedOperationException.class);
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
190,testCaseNoValue(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,670,16,160466,3769,1,,"@Test
  public void testCaseNoValue() {
    String sql = ""SELECT CASE WHEN 1 > 2 THEN 'not possible' ELSE 'seems right' END"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addStringField(""str_field"").build())
                .addValue(""seems right"")
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
191,testCaseWithValue(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,670,16,161140,3786,1,,"@Test
  public void testCaseWithValue() {
    String sql = ""SELECT CASE 1 WHEN 2 THEN 'not possible' ELSE 'seems right' END"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addStringField(""str_field"").build())
                .addValue(""seems right"")
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
192,testCaseWithValueMultipleCases(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,740,18,161814,3803,1,,"@Test
  public void testCaseWithValueMultipleCases() {
    String sql =
        ""SELECT CASE 2 WHEN 1 THEN 'not possible' WHEN 2 THEN 'seems right' ELSE 'also not""
            + "" possible' END"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addStringField(""str_field"").build())
                .addValue(""seems right"")
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
193,testCaseWithValueNoElse(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,683,16,162558,3822,1,,"@Test
  public void testCaseWithValueNoElse() {
    String sql = ""SELECT CASE 2 WHEN 1 THEN 'not possible' WHEN 2 THEN 'seems right' END"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addStringField(""str_field"").build())
                .addValue(""seems right"")
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
194,testCaseNoValueNoElseNoMatch(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,683,16,163245,3839,1,,"@Test
  public void testCaseNoValueNoElseNoMatch() {
    String sql = ""SELECT CASE WHEN 'abc' = '123' THEN 'not possible' END"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addNullableField(""str_field"", FieldType.STRING).build())
                .addValue(null)
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
195,testCaseWithValueNoElseNoMatch(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,675,16,163932,3856,1,,"@Test
  public void testCaseWithValueNoElseNoMatch() {
    String sql = ""SELECT CASE 2 WHEN 1 THEN 'not possible' END"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addNullableField(""str_field"", FieldType.STRING).build())
                .addValue(null)
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
196,testCastToDateWithCase(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.time.LocalDate+parse(CharSequence) java.time.LocalDate+parse(CharSequence) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.schemas.logicaltypes.SqlTypes+DATE org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1211,30,164611,3873,1,,"@Test
  public void testCastToDateWithCase() {
    String sql =
        ""SELECT f_int, \n""
            + ""CASE WHEN CHAR_LENGTH(TRIM(f_string)) = 8 \n""
            + ""    THEN CAST (CONCAT(\n""
            + ""       SUBSTR(TRIM(f_string), 1, 4) \n""
            + ""        , '-' \n""
            + ""        , SUBSTR(TRIM(f_string), 5, 2) \n""
            + ""        , '-' \n""
            + ""        , SUBSTR(TRIM(f_string), 7, 2)) AS DATE)\n""
            + ""    ELSE NULL\n""
            + ""END \n""
            + ""FROM table_for_case_when"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    Schema resultType =
        Schema.builder()
            .addInt64Field(""f_long"")
            .addNullableField(""f_date"", FieldType.logicalType(SqlTypes.DATE))
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(resultType).addValues(1L, LocalDate.parse(""2018-10-18"")).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
197,testIntersectAll(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,974,22,165826,3904,1,,"@Test
  public void testIntersectAll() {
    String sql =
        ""SELECT Key FROM aggregate_test_table ""
            + ""INTERSECT ALL ""
            + ""SELECT Key FROM aggregate_test_table_two"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    Schema resultType = Schema.builder().addInt64Field(""field"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(resultType).addValues(1L).build(),
            Row.withSchema(resultType).addValues(2L).build(),
            Row.withSchema(resultType).addValues(2L).build(),
            Row.withSchema(resultType).addValues(2L).build(),
            Row.withSchema(resultType).addValues(3L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
198,testIntersectDistinct(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,860,20,166804,3927,1,,"@Test
  public void testIntersectDistinct() {
    String sql =
        ""SELECT Key FROM aggregate_test_table ""
            + ""INTERSECT DISTINCT ""
            + ""SELECT Key FROM aggregate_test_table_two"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    Schema resultType = Schema.builder().addInt64Field(""field"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(resultType).addValues(1L).build(),
            Row.withSchema(resultType).addValues(2L).build(),
            Row.withSchema(resultType).addValues(3L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
199,testExceptAll(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,782,19,167668,3948,1,,"@Test
  public void testExceptAll() {
    String sql =
        ""SELECT Key FROM aggregate_test_table ""
            + ""EXCEPT ALL ""
            + ""SELECT Key FROM aggregate_test_table_two"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    Schema resultType = Schema.builder().addInt64Field(""field"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(resultType).addValues(1L).build(),
            Row.withSchema(resultType).addValues(3L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
200,testSelectNullIntersectDistinct(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) java.io.PrintStream+println(String) java.io.PrintStream+println(String) org.apache.beam.sdk.values.PCollection+getSchema() org.apache.beam.sdk.values.PCollection+getSchema() org.apache.beam.sdk.testing.PAssert.IterableAssert+empty() org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+empty() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline java.lang.System+err org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,546,12,168454,3968,1,,"@Test
  public void testSelectNullIntersectDistinct() {
    String sql = ""SELECT NULL INTERSECT DISTINCT SELECT 2"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    System.err.println(""SCHEMA "" + stream.getSchema());

    PAssert.that(stream).empty();
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
201,testSelectNullIntersectAll(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) java.io.PrintStream+println(String) java.io.PrintStream+println(String) org.apache.beam.sdk.values.PCollection+getSchema() org.apache.beam.sdk.values.PCollection+getSchema() org.apache.beam.sdk.testing.PAssert.IterableAssert+empty() org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+empty() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline java.lang.System+err org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,536,12,169004,3981,1,,"@Test
  public void testSelectNullIntersectAll() {
    String sql = ""SELECT NULL INTERSECT ALL SELECT 2"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    System.err.println(""SCHEMA "" + stream.getSchema());

    PAssert.that(stream).empty();
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
202,testSelectNullExceptDistinct(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+nullRow(Schema) org.apache.beam.sdk.values.Row+nullRow(Schema) org.apache.beam.sdk.values.PCollection+getSchema() org.apache.beam.sdk.values.PCollection+getSchema() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,528,11,169544,3994,1,,"@Test
  public void testSelectNullExceptDistinct() {
    String sql = ""SELECT NULL EXCEPT DISTINCT SELECT 2"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream).containsInAnyOrder(Row.nullRow(stream.getSchema()));
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
203,testSelectNullExceptAll(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row+nullRow(Schema) org.apache.beam.sdk.values.Row+nullRow(Schema) org.apache.beam.sdk.values.PCollection+getSchema() org.apache.beam.sdk.values.PCollection+getSchema() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,518,11,170076,4006,1,,"@Test
  public void testSelectNullExceptAll() {
    String sql = ""SELECT NULL EXCEPT ALL SELECT 2"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream).containsInAnyOrder(Row.nullRow(stream.getSchema()));
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
204,testSelectFromEmptyTable(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,481,9,170598,4018,1,,"@Test
  public void testSelectFromEmptyTable() {
    String sql = ""SELECT * FROM table_empty;"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    PAssert.that(stream).containsInAnyOrder();
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
205,testStartsWithString(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,633,11,171083,4028,1,,"@Test
  public void testStartsWithString() {
    String sql = ""SELECT STARTS_WITH('string1', 'stri')"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(true).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
206,testStartsWithString2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,889,19,171720,4040,1,,"@Test
  public void testStartsWithString2() {
    String sql = ""SELECT STARTS_WITH(@p0, @p1)"";

    ImmutableMap<String, Value> params =
        ImmutableMap.<String, Value>builder()
            .put(""p0"", Value.createSimpleNullValue(TypeKind.TYPE_STRING))
            .put(""p1"", Value.createStringValue(""""))
            .build();

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((Boolean) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
207,testStartsWithString3(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,911,19,172613,4060,1,,"@Test
  public void testStartsWithString3() {
    String sql = ""SELECT STARTS_WITH(@p0, @p1)"";

    ImmutableMap<String, Value> params =
        ImmutableMap.<String, Value>builder()
            .put(""p0"", Value.createSimpleNullValue(TypeKind.TYPE_STRING))
            .put(""p1"", Value.createSimpleNullValue(TypeKind.TYPE_STRING))
            .build();

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((Boolean) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
208,testEndsWithString(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,631,11,173528,4080,1,,"@Test
  public void testEndsWithString() {
    String sql = ""SELECT STARTS_WITH('string1', 'ng0')"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(false).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
209,testEndsWithString2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,887,19,174163,4092,1,,"@Test
  public void testEndsWithString2() {
    String sql = ""SELECT STARTS_WITH(@p0, @p1)"";

    ImmutableMap<String, Value> params =
        ImmutableMap.<String, Value>builder()
            .put(""p0"", Value.createSimpleNullValue(TypeKind.TYPE_STRING))
            .put(""p1"", Value.createStringValue(""""))
            .build();

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((Boolean) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
210,testEndsWithString3(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,909,19,175054,4112,1,,"@Test
  public void testEndsWithString3() {
    String sql = ""SELECT STARTS_WITH(@p0, @p1)"";

    ImmutableMap<String, Value> params =
        ImmutableMap.<String, Value>builder()
            .put(""p0"", Value.createSimpleNullValue(TypeKind.TYPE_STRING))
            .put(""p1"", Value.createSimpleNullValue(TypeKind.TYPE_STRING))
            .build();

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.BOOLEAN).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((Boolean) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
211,testDateTimeLiteral(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,398,9,175967,4133,1,,"@Test
  @Ignore(""Does not support DateTime literal."")
  public void testDateTimeLiteral() {
    String sql = ""SELECT DATETIME '2018-01-01 05:30:00.334'"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(RuntimeException.class);
    thrown.expectMessage(""Unsupported ResolvedLiteral type: DATETIME"");
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",True
212,testConcatWithOneParameters(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,602,10,176369,4142,1,,"@Test
  public void testConcatWithOneParameters() {
    String sql = ""SELECT concat('abc')"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addStringField(""field1"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""abc"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
213,testConcatWithTwoParameters(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,612,10,176975,4153,1,,"@Test
  public void testConcatWithTwoParameters() {
    String sql = ""SELECT concat('abc', 'def')"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addStringField(""field1"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""abcdef"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
214,testConcatWithThreeParameters(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,624,10,177591,4164,1,,"@Test
  public void testConcatWithThreeParameters() {
    String sql = ""SELECT concat('abc', 'def', 'xyz')"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addStringField(""field1"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""abcdefxyz"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
215,testConcatWithFourParameters(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,640,11,178219,4175,1,,"@Test
  public void testConcatWithFourParameters() {
    String sql = ""SELECT concat('abc', 'def', '  ', 'xyz')"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addStringField(""field1"").build();
    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues(""abcdef  xyz"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
216,testConcatWithFiveParameters(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,650,11,178863,4187,1,,"@Test
  public void testConcatWithFiveParameters() {
    String sql = ""SELECT concat('abc', 'def', '  ', 'xyz', 'kkk')"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addStringField(""field1"").build();
    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues(""abcdef  xyzkkk"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
217,testConcatWithSixParameters(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,659,11,179517,4199,1,,"@Test
  public void testConcatWithSixParameters() {
    String sql = ""SELECT concat('abc', 'def', '  ', 'xyz', 'kkk', 'ttt')"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addStringField(""field1"").build();
    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues(""abcdef  xyzkkkttt"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
218,testConcatWithNull1(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,857,17,180180,4211,1,,"@Test
  public void testConcatWithNull1() {
    String sql = ""SELECT CONCAT(@p0, @p1) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createStringValue(""""),
            ""p1"",
            Value.createSimpleNullValue(TypeKind.TYPE_STRING));
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.STRING).build();
    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((String) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
219,testConcatWithNull2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,879,17,181041,4229,1,,"@Test
  public void testConcatWithNull2() {
    String sql = ""SELECT CONCAT(@p0, @p1) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"",
            Value.createSimpleNullValue(TypeKind.TYPE_STRING),
            ""p1"",
            Value.createSimpleNullValue(TypeKind.TYPE_STRING));
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.STRING).build();
    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((String) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
220,testNamedParameterQuery(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,696,12,181924,4247,1,,"@Test
  public void testNamedParameterQuery() {
    String sql = ""SELECT @ColA AS ColA"";
    ImmutableMap<String, Value> params = ImmutableMap.of(""ColA"", Value.createInt64Value(5));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addInt64Field(""field1"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(5L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
221,testArrayStructLiteral(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema+of(Field[]) org.apache.beam.sdk.schemas.Schema+of(Field[]) org.apache.beam.sdk.schemas.Schema+of(Field[]) org.apache.beam.sdk.schemas.Schema+of(Field[]) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,895,20,182624,4260,1,,"@Test
  public void testArrayStructLiteral() {
    String sql = ""SELECT ARRAY<STRUCT<INT64, INT64>>[(11, 12)];"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);

    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema innerSchema =
        Schema.of(Field.of(""s"", FieldType.INT64), Field.of(""i"", FieldType.INT64));
    final Schema schema =
        Schema.of(Field.of(""field1"", FieldType.array(FieldType.row(innerSchema))));

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValue(ImmutableList.of(Row.withSchema(innerSchema).addValues(11L, 12L).build()))
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
222,testParameterStruct(),Method,,,"java.lang.Object+Object() java.lang.Object+Object() org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema+of(Field[]) org.apache.beam.sdk.schemas.Schema+of(Field[]) org.apache.beam.sdk.schemas.Schema+of(Field[]) org.apache.beam.sdk.schemas.Schema+of(Field[]) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1409,31,183523,4281,1,,"@Test
  public void testParameterStruct() {
    String sql = ""SELECT @p as ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p"",
            Value.createStructValue(
                TypeFactory.createStructType(
                    ImmutableList.of(
                        new StructType.StructField(
                            ""s"", TypeFactory.createSimpleType(TypeKind.TYPE_STRING)),
                        new StructType.StructField(
                            ""i"", TypeFactory.createSimpleType(TypeKind.TYPE_INT64)))),
                ImmutableList.of(Value.createStringValue(""foo""), Value.createInt64Value(1L))));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema innerSchema =
        Schema.of(Field.of(""s"", FieldType.STRING), Field.of(""i"", FieldType.INT64));
    final Schema schema = Schema.of(Field.of(""field1"", FieldType.row(innerSchema)));

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValue(Row.withSchema(innerSchema).addValues(""foo"", 1L).build())
                .build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
223,testParameterStructNested(),Method,,,"java.lang.Object+Object() java.lang.Object+Object() org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+build() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1310,28,184936,4313,1,,"@Test
  public void testParameterStructNested() {
    String sql = ""SELECT @outer_struct.inner_struct.s as ColA"";
    StructType innerStructType =
        TypeFactory.createStructType(
            ImmutableList.of(
                new StructType.StructField(
                    ""s"", TypeFactory.createSimpleType(TypeKind.TYPE_STRING))));
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""outer_struct"",
            Value.createStructValue(
                TypeFactory.createStructType(
                    ImmutableList.of(new StructType.StructField(""inner_struct"", innerStructType))),
                ImmutableList.of(
                    Value.createStructValue(
                        innerStructType, ImmutableList.of(Value.createStringValue(""foo""))))));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValue(""foo"").build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
224,testConcatNamedParameterQuery(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,759,13,186250,4342,1,,"@Test
  public void testConcatNamedParameterQuery() {
    String sql = ""SELECT CONCAT(@p0, @p1) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(""p0"", Value.createStringValue(""""), ""p1"", Value.createStringValue(""A""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addStringField(""field1"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""A"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
225,testConcatPositionalParameterQuery(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,815,16,187013,4356,1,,"@Test
  public void testConcatPositionalParameterQuery() {
    String sql = ""SELECT CONCAT(?, ?, ?) AS ColA"";
    ImmutableList<Value> params =
        ImmutableList.of(
            Value.createStringValue(""a""),
            Value.createStringValue(""b""),
            Value.createStringValue(""c""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    final Schema schema = Schema.builder().addStringField(""field1"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""abc"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
226,testReplace1(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,821,18,187832,4373,1,,"@Test
  public void testReplace1() {
    String sql = ""SELECT REPLACE(@p0, @p1, @p2) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createStringValue(""""),
            ""p1"", Value.createStringValue(""""),
            ""p2"", Value.createStringValue(""a""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues("""").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
227,testReplace2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,829,18,188657,4392,1,,"@Test
  public void testReplace2() {
    String sql = ""SELECT REPLACE(@p0, @p1, @p2) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createStringValue(""abc""),
            ""p1"", Value.createStringValue(""""),
            ""p2"", Value.createStringValue(""xyz""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""abc"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
228,testReplace3(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,882,19,189490,4411,1,,"@Test
  public void testReplace3() {
    String sql = ""SELECT REPLACE(@p0, @p1, @p2) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createStringValue(""""),
            ""p1"", Value.createStringValue(""""),
            ""p2"", Value.createSimpleNullValue(TypeKind.TYPE_STRING));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.STRING).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((String) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
229,testReplace4(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,904,19,190376,4431,1,,"@Test
  public void testReplace4() {
    String sql = ""SELECT REPLACE(@p0, @p1, @p2) AS ColA"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createSimpleNullValue(TypeKind.TYPE_STRING),
            ""p1"", Value.createSimpleNullValue(TypeKind.TYPE_STRING),
            ""p2"", Value.createStringValue(""""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.STRING).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((String) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
230,testTrim1(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,705,15,191284,4451,1,,"@Test
  public void testTrim1() {
    String sql = ""SELECT trim(@p0)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(""p0"", Value.createStringValue(""   a b c   ""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""a b c"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
231,testTrim2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,754,16,191993,4467,1,,"@Test
  public void testTrim2() {
    String sql = ""SELECT trim(@p0, @p1)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createStringValue(""abxyzab""), ""p1"", Value.createStringValue(""ab""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""xyz"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
232,testTrim3(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,838,18,192751,4484,1,,"@Test
  public void testTrim3() {
    String sql = ""SELECT trim(@p0, @p1)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createSimpleNullValue(TypeKind.TYPE_STRING),
            ""p1"", Value.createSimpleNullValue(TypeKind.TYPE_STRING));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.STRING).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((String) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
233,testLTrim1(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,710,15,193593,4503,1,,"@Test
  public void testLTrim1() {
    String sql = ""SELECT ltrim(@p0)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(""p0"", Value.createStringValue(""   a b c   ""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""a b c   "").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
234,testLTrim2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,758,16,194307,4519,1,,"@Test
  public void testLTrim2() {
    String sql = ""SELECT ltrim(@p0, @p1)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createStringValue(""abxyzab""), ""p1"", Value.createStringValue(""ab""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""xyzab"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
235,testLTrim3(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,840,18,195069,4536,1,,"@Test
  public void testLTrim3() {
    String sql = ""SELECT ltrim(@p0, @p1)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createSimpleNullValue(TypeKind.TYPE_STRING),
            ""p1"", Value.createSimpleNullValue(TypeKind.TYPE_STRING));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.STRING).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((String) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
236,testRTrim1(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,710,15,195913,4555,1,,"@Test
  public void testRTrim1() {
    String sql = ""SELECT rtrim(@p0)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(""p0"", Value.createStringValue(""   a b c   ""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""   a b c"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
237,testRTrim2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,758,16,196627,4571,1,,"@Test
  public void testRTrim2() {
    String sql = ""SELECT rtrim(@p0, @p1)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createStringValue(""abxyzab""), ""p1"", Value.createStringValue(""ab""));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""abxyz"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
238,testRTrim3(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,840,18,197389,4588,1,,"@Test
  public void testRTrim3() {
    String sql = ""SELECT rtrim(@p0, @p1)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createSimpleNullValue(TypeKind.TYPE_STRING),
            ""p1"", Value.createSimpleNullValue(TypeKind.TYPE_STRING));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field1"", FieldType.STRING).build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((String) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
239,testCastBytesToString1(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,796,15,198233,4608,1,,"@Test
  @Ignore(""https://jira.apache.org/jira/browse/BEAM-9191"")
  public void testCastBytesToString1() {
    String sql = ""SELECT CAST(@p0 AS STRING)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(""p0"", Value.createBytesValue(ByteString.copyFromUtf8(""`"")));
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""`"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
240,testCastBytesToString2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,604,12,199033,4623,1,,"@Test
  public void testCastBytesToString2() {
    String sql = ""SELECT CAST(b'b' AS STRING)"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""b"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
241,testCastBytesToStringFromTable(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,955,19,199641,4637,1,,"@Test
  @Ignore(""https://jira.apache.org/jira/browse/BEAM-9191"")
  public void testCastBytesToStringFromTable() {
    String sql = ""SELECT CAST(bytes_col AS STRING) FROM table_all_types"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(""1"").build(),
            Row.withSchema(schema).addValues(""2"").build(),
            Row.withSchema(schema).addValues(""3"").build(),
            Row.withSchema(schema).addValues(""4"").build(),
            Row.withSchema(schema).addValues(""5"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
242,testCastStringToTimestamp(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,735,16,200600,4656,1,,"@Test
  public void testCastStringToTimestamp() {
    String sql = ""SELECT CAST('2019-01-15 13:21:03' AS TIMESTAMP)"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addDateTimeField(""field_1"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValues(parseTimestampWithUTCTimeZone(""2019-01-15 13:21:03""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
243,testCastStringToTimestampWithDefaultTimezoneSet(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+setDefaultTimezone(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+setDefaultTimezone(String) org.apache.beam.sdk.options.PipelineOptions+as(Class<T>) org.apache.beam.sdk.testing.TestPipeline+getOptions() org.apache.beam.sdk.testing.TestPipeline+getOptions() org.apache.beam.sdk.options.PipelineOptions+as(Class<T>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,991,22,201339,4674,1,,"@Test
  // test default timezone works properly in query analysis stage
  public void testCastStringToTimestampWithDefaultTimezoneSet() {
    String sql = ""SELECT CAST('2014-12-01 12:34:56+07:30' AS TIMESTAMP)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    zetaSQLQueryPlanner.setDefaultTimezone(""Pacific/Chatham"");
    pipeline
        .getOptions()
        .as(BeamSqlPipelineOptions.class)
        .setZetaSqlDefaultTimezone(""Pacific/Chatham"");

    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addDateTimeField(""field_1"").build())
                .addValues(parseTimestampWithUTCTimeZone(""2014-12-01 05:04:56""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
244,testCastStringToString(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,703,13,202334,4696,1,,"@Test
  public void testCastStringToString() {
    String sql = ""SELECT CAST(@p0 AS STRING)"";
    ImmutableMap<String, Value> params = ImmutableMap.of(""p0"", Value.createStringValue(""""));
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues("""").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
245,testCastStringToInt64(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,705,13,203041,4710,1,,"@Test
  public void testCastStringToInt64() {
    String sql = ""SELECT CAST(@p0 AS INT64)"";
    ImmutableMap<String, Value> params = ImmutableMap.of(""p0"", Value.createStringValue(""123""));
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(123L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
246,testSelectConstant(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,585,12,203750,4724,1,,"@Test
  public void testSelectConstant() {
    String sql = ""SELECT 'hi'"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""hi"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
247,testDateAddWithParameter(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,2038,49,204339,4738,1,,"@Test
  @Ignore(""Does not support DATE_ADD."")
  public void testDateAddWithParameter() {
    String sql =
        ""SELECT ""
            + ""DATE_ADD(@p0, INTERVAL @p1 DAY), ""
            + ""DATE_ADD(@p2, INTERVAL @p3 DAY), ""
            + ""DATE_ADD(@p4, INTERVAL @p5 YEAR), ""
            + ""DATE_ADD(@p6, INTERVAL @p7 DAY), ""
            + ""DATE_ADD(@p8, INTERVAL @p9 MONTH)"";
    // Value
    ImmutableMap<String, Value> params =
        ImmutableMap.<String, Value>builder()
            .put(""p0"", Value.createDateValue(0)) // 1970-01-01
            .put(""p1"", Value.createInt64Value(2L))
            .put(""p2"", parseDateToValue(""2019-01-01""))
            .put(""p3"", Value.createInt64Value(2L))
            .put(""p4"", Value.createSimpleNullValue(TypeKind.TYPE_DATE))
            .put(""p5"", Value.createInt64Value(1L))
            .put(""p6"", parseDateToValue(""2000-02-29""))
            .put(""p7"", Value.createInt64Value(-365L))
            .put(""p8"", parseDateToValue(""1999-03-31""))
            .put(""p9"", Value.createInt64Value(-1L))
            .build();

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addDateTimeField(""field1"")
            .addDateTimeField(""field2"")
            .addNullableField(""field3"", DATETIME)
            .addDateTimeField(""field4"")
            .addDateTimeField(""field5"")
            .build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValues(
                    parseDate(""1970-01-03""),
                    parseDate(""2019-01-03""),
                    null,
                    parseDate(""1999-03-01""),
                    parseDate(""1999-02-28""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
248,testTimeAddWithParameter(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,866,18,206381,4788,1,,"@Test
  @Ignore(""Does not support TIME_ADD."")
  public void testTimeAddWithParameter() {
    String sql = ""SELECT TIME_ADD(@p0, INTERVAL @p1 SECOND)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", parseTimeToValue(""12:13:14.123""),
            ""p1"", Value.createInt64Value(1L));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addDateTimeField(""field1"").build();
    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues(parseTime(""12:13:15.123"")).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
249,testTimestampAddWithParameter1(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,941,20,207251,4806,1,,"@Test
  public void testTimestampAddWithParameter1() {
    String sql = ""SELECT TIMESTAMP_ADD(@p0, INTERVAL @p1 MILLISECOND)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", parseTimestampWithTZToValue(""2001-01-01 00:00:00+00""),
            ""p1"", Value.createInt64Value(1L));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addDateTimeField(""field1"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValues(parseTimestampWithTimeZone(""2001-01-01 00:00:00.001+00""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
250,testTimestampAddWithParameter2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,939,20,208196,4827,1,,"@Test
  public void testTimestampAddWithParameter2() {
    String sql = ""SELECT TIMESTAMP_ADD(@p0, INTERVAL @p1 MINUTE)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", parseTimestampWithTZToValue(""2008-12-25 15:30:00+07:30""),
            ""p1"", Value.createInt64Value(10L));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addDateTimeField(""field1"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValues(parseTimestampWithTimeZone(""2008-12-25 15:40:00+07:30""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",True
251,testSelectFromTableWithMap(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addRowField(String,Schema) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addRowField(String,Schema) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,856,15,209139,4849,1,,"@Test
  @Ignore(""[BEAM-8593] ZetaSQL does not support Map type"")
  public void testSelectFromTableWithMap() {
    String sql = ""SELECT row_field FROM table_with_map"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    Schema rowSchema = Schema.builder().addInt64Field(""row_id"").addStringField(""data"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(Schema.builder().addRowField(""row_field"", rowSchema).build())
                .addValues(Row.withSchema(rowSchema).addValues(1L, ""data1"").build())
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
252,testSubQuery(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,359,9,209999,4864,1,,"@Test
  public void testSubQuery() {
    String sql = ""select sum(Key) from KeyValue\n"" + ""group by (select Key)"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(UnsupportedOperationException.class);
    thrown.expectMessage(""Does not support sub-queries"");
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
253,testSubstr(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,811,17,210362,4874,1,,"@Test
  public void testSubstr() {
    String sql = ""SELECT substr(@p0, @p1, @p2)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createStringValue(""abc""),
            ""p1"", Value.createInt64Value(-2L),
            ""p2"", Value.createInt64Value(1L));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field1"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""b"").build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
254,testSubstrWithLargeValueExpectException(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",java.lang.Integer+MAX_VALUE java.lang.Integer+MIN_VALUE org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,726,15,211177,4892,1,,"@Test
  public void testSubstrWithLargeValueExpectException() {
    String sql = ""SELECT substr(@p0, @p1, @p2)"";
    ImmutableMap<String, Value> params =
        ImmutableMap.of(
            ""p0"", Value.createStringValue(""abc""),
            ""p1"", Value.createInt64Value(Integer.MAX_VALUE + 1L),
            ""p2"", Value.createInt64Value(Integer.MIN_VALUE - 1L));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);
    thrown.expect(RuntimeException.class);
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
255,testSelectAll(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,741,17,211907,4908,1,,"@Test
  public void testSelectAll() {
    String sql = ""SELECT ALL Key, Value FROM KeyValue;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").addStringField(""field2"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(14L, ""KeyValue234"").build(),
            Row.withSchema(schema).addValues(15L, ""KeyValue235"").build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
256,testSelectDistinct(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,757,18,212652,4926,1,,"@Test
  public void testSelectDistinct() {
    String sql = ""SELECT DISTINCT Key FROM aggregate_test_table;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(1L).build(),
            Row.withSchema(schema).addValues(2L).build(),
            Row.withSchema(schema).addValues(3L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
257,testSelectDistinct2(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addByteArrayField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addByteArrayField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.String+getBytes(Charset) java.lang.String+getBytes(Charset) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.String+getBytes(Charset) java.lang.String+getBytes(Charset) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.String+getBytes(Charset) java.lang.String+getBytes(Charset) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline java.nio.charset.StandardCharsets+UTF_8 java.nio.charset.StandardCharsets+UTF_8 java.nio.charset.StandardCharsets+UTF_8 org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1020,22,213413,4945,1,,"@Test
  public void testSelectDistinct2() {
    String sql =
        ""SELECT DISTINCT val.BYTES\n""
            + ""from (select b\""BYTES\"" BYTES union all\n""
            + ""      select b\""bytes\"" union all\n""
            + ""      select b\""ByTeS\"") val"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addByteArrayField(""field1"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(""BYTES"".getBytes(StandardCharsets.UTF_8)).build(),
            Row.withSchema(schema).addValues(""ByTeS"".getBytes(StandardCharsets.UTF_8)).build(),
            Row.withSchema(schema).addValues(""bytes"".getBytes(StandardCharsets.UTF_8)).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
258,testSelectBytes(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addByteArrayField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addByteArrayField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) java.lang.String+getBytes(Charset) java.lang.String+getBytes(Charset) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline java.nio.charset.StandardCharsets+UTF_8 org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,650,15,214437,4968,1,,"@Test
  public void testSelectBytes() {
    String sql = ""SELECT b\""ByTes\"""";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addByteArrayField(""field1"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(""ByTes"".getBytes(StandardCharsets.UTF_8)).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
259,testSelectExcept(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,714,17,215091,4984,1,,"@Test
  public void testSelectExcept() {
    String sql = ""SELECT * EXCEPT (Key, ts) FROM KeyValue;"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field2"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(""KeyValue234"").build(),
            Row.withSchema(schema).addValues(""KeyValue235"").build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
260,testSelectReplace(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,946,26,215809,5002,1,,"@Test
  public void testSelectReplace() {
    String sql =
        ""WITH orders AS\n""
            + ""  (SELECT 5 as order_id,\n""
            + ""  \""sprocket\"" as item_name,\n""
            + ""  200 as quantity)\n""
            + ""SELECT * REPLACE (\""widget\"" AS item_name)\n""
            + ""FROM orders"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addInt64Field(""field1"")
            .addStringField(""field2"")
            .addInt64Field(""field3"")
            .build();

    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues(5L, ""widget"", 200L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
261,testUnionAllBasic(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1196,26,216759,5029,1,,"@Test
  public void testUnionAllBasic() {
    String sql =
        ""SELECT row_id FROM table_all_types UNION ALL SELECT row_id FROM table_all_types_2"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").build();

    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValue(1L).build(),
            Row.withSchema(schema).addValue(2L).build(),
            Row.withSchema(schema).addValue(3L).build(),
            Row.withSchema(schema).addValue(4L).build(),
            Row.withSchema(schema).addValue(5L).build(),
            Row.withSchema(schema).addValue(6L).build(),
            Row.withSchema(schema).addValue(7L).build(),
            Row.withSchema(schema).addValue(8L).build(),
            Row.withSchema(schema).addValue(9L).build(),
            Row.withSchema(schema).addValue(10L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
262,testAVGWithLongInput(),Method,,,org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String),org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+thrown,404,9,217959,5056,1,,"@Test
  public void testAVGWithLongInput() {
    String sql = ""SELECT AVG(f_int_1) FROM aggregate_test_table;"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    thrown.expect(RuntimeException.class);
    thrown.expectMessage(
        ""AVG(LONG) is not supported. You might want to use AVG(CAST(expression AS DOUBLE)."");
    zetaSQLQueryPlanner.convertToBeamRel(sql);
  }",False
263,testReverseString(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,598,14,218367,5066,1,,"@Test
  public void testReverseString() {
    String sql = ""SELECT REVERSE('abc');"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addStringField(""field2"").build();

    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(""cba"").build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
264,testCharLength(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,592,12,218969,5081,1,,"@Test
  public void testCharLength() {
    String sql = ""SELECT CHAR_LENGTH('abc');"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field"").build();
    PAssert.that(stream).containsInAnyOrder(Row.withSchema(schema).addValues(3L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
265,testCharLengthNull(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addNullableField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,766,16,219565,5094,1,,"@Test
  public void testCharLengthNull() {
    String sql = ""SELECT CHAR_LENGTH(@p0);"";

    ImmutableMap<String, Value> params =
        ImmutableMap.of(""p0"", Value.createSimpleNullValue(TypeKind.TYPE_STRING));

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addNullableField(""field"", FieldType.INT64).build();
    PAssert.that(stream)
        .containsInAnyOrder(Row.withSchema(schema).addValues((Object) null).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
266,testTumbleAsTVF(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+addStringField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+addDateTimeField(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils+parseTimestampWithUTCTimeZone(String) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1767,39,220335,5111,1,,"@Test
  public void testTumbleAsTVF() {
    String sql =
        ""select Key, Value, ts, window_start, window_end from ""
            + ""TUMBLE((select * from KeyValue), descriptor(ts), 'INTERVAL 1 SECOND')"";
    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    ImmutableMap<String, Value> params = ImmutableMap.of();
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);

    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addInt64Field(""Key"")
            .addStringField(""Value"")
            .addDateTimeField(""ts"")
            .addDateTimeField(""window_start"")
            .addDateTimeField(""window_end"")
            .build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema)
                .addValues(
                    14L,
                    ""KeyValue234"",
                    DateTimeUtils.parseTimestampWithUTCTimeZone(""2018-07-01 21:26:06""),
                    DateTimeUtils.parseTimestampWithUTCTimeZone(""2018-07-01 21:26:06""),
                    DateTimeUtils.parseTimestampWithUTCTimeZone(""2018-07-01 21:26:07""))
                .build(),
            Row.withSchema(schema)
                .addValues(
                    15L,
                    ""KeyValue235"",
                    DateTimeUtils.parseTimestampWithUTCTimeZone(""2018-07-01 21:26:07""),
                    DateTimeUtils.parseTimestampWithUTCTimeZone(""2018-07-01 21:26:07""),
                    DateTimeUtils.parseTimestampWithUTCTimeZone(""2018-07-01T21:26:08""))
                .build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
267,testIsNullTrueFalse(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String,Map<String,Value>) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+addField(String,FieldType) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addField(String,FieldType) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,1706,39,222106,5151,1,,"@Test
  public void testIsNullTrueFalse() {
    String sql =
        ""WITH Src AS (\n""
            + ""  SELECT NULL as data UNION ALL\n""
            + ""  SELECT TRUE UNION ALL\n""
            + ""  SELECT FALSE\n""
            + "")\n""
            + ""SELECT\n""
            + ""  data IS NULL as isnull,\n""
            + ""  data IS NOT NULL as isnotnull,\n""
            + ""  data IS TRUE as istrue,\n""
            + ""  data IS NOT TRUE as isnottrue,\n""
            + ""  data IS FALSE as isfalse,\n""
            + ""  data IS NOT FALSE as isnotfalse\n""
            + ""FROM Src\n"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    ImmutableMap<String, Value> params = ImmutableMap.of();
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql, params);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema =
        Schema.builder()
            .addField(""isnull"", FieldType.BOOLEAN)
            .addField(""isnotnull"", FieldType.BOOLEAN)
            .addField(""istrue"", FieldType.BOOLEAN)
            .addField(""isnottrue"", FieldType.BOOLEAN)
            .addField(""isfalse"", FieldType.BOOLEAN)
            .addField(""isnotfalse"", FieldType.BOOLEAN)
            .build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(true, false, false, true, false, true).build(),
            Row.withSchema(schema).addValues(false, true, true, false, false, true).build(),
            Row.withSchema(schema).addValues(false, true, false, true, true, false).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
268,testZetaSQLBitOr(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,709,16,223816,5191,1,,"@Test
  public void testZetaSQLBitOr() {
    String sql = ""SELECT BIT_OR(row_id) FROM table_all_types GROUP BY bool_col"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValues(3L).build(),
            Row.withSchema(schema).addValue(7L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
269,testZetaSQLBitAnd(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValue(Object) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,808,17,224529,5209,1,,"@Test
  @Ignore(""NULL values don't work correctly. (https://issues.apache.org/jira/browse/BEAM-10379)"")
  public void testZetaSQLBitAnd() {
    String sql = ""SELECT BIT_AND(row_id) FROM table_all_types GROUP BY bool_col"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    final Schema schema = Schema.builder().addInt64Field(""field1"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(schema).addValue(1L).build(),
            Row.withSchema(schema).addValue(0L).build());

    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
270,testSimpleTableName(),Method,,,"org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+ZetaSQLQueryPlanner(FrameworkConfig) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLQueryPlanner+convertToBeamRel(String) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils+toPCollection(Pipeline,BeamRelNode) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema+builder() org.apache.beam.sdk.schemas.Schema.Builder+addInt64Field(String) org.apache.beam.sdk.schemas.Schema.Builder+build() org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert+that(PCollection<T>) org.apache.beam.sdk.testing.PAssert.IterableAssert+containsInAnyOrder(T[]) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row+withSchema(Schema) org.apache.beam.sdk.values.Row.Builder+addValues(List<Object>) org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration) org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.testing.TestPipeline+run() org.apache.beam.sdk.PipelineResult+waitUntilFinish(Duration)",org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+config org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLDialectSpecTest+pipeline org.apache.beam.sdk.extensions.sql.zetasql.ZetaSQLTestBase+PIPELINE_EXECUTION_WAITTIME_MINUTES,687,15,225341,5226,1,,"@Test
  public void testSimpleTableName() {
    String sql = ""SELECT Key FROM KeyValue"";

    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);
    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);
    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);

    Schema singleField = Schema.builder().addInt64Field(""field1"").build();
    PAssert.that(stream)
        .containsInAnyOrder(
            Row.withSchema(singleField).addValues(14L).build(),
            Row.withSchema(singleField).addValues(15L).build());
    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));
  }",False
