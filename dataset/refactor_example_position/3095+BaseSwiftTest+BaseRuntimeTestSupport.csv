index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,commit,full text,moved,removed
1,USE_ARCH_ARM64,Field,"""","""","""","""",52,1,1085,33,26,,private static final boolean USE_ARCH_ARM64 = false;,False,False
2,VERBOSE,Field,"""","""","""","""",45,1,1139,34,26,,private static final boolean VERBOSE = false;,False,False
3,ANTLR_RUNTIME_PATH,Field,"""","""","""","""",88,4,1187,39,26,"/** 
 * Path of the ANTLR runtime.
 */
","/**
	 * Path of the ANTLR runtime.
	 */
	private static final String ANTLR_RUNTIME_PATH;",False,False
4,SWIFT_CMD,Field,"""","""","""","""",84,4,1278,44,26,"/** 
 * Absolute path to swift command.
 */
","/**
	 * Absolute path to swift command.
	 */
	private static final String SWIFT_CMD;",False,False
5,SWIFT_HOME_ENV_KEY,Field,"""","""","""","""",118,4,1365,49,26,"/** 
 * Environment variable name for swift home.
 */
","/**
	 * Environment variable name for swift home.
	 */
	private static final String SWIFT_HOME_ENV_KEY = ""SWIFT_HOME"";",False,False
6,tmpdir,Field,"""","""","""","""",28,1,2434,84,1,,public String tmpdir = null;,False,False
7,stderrDuringParse,Field,"""","""","""","""",182,5,2465,90,2,"/** 
 * If error during parser execution, store stderr here; can't return stdout and stderr.  This doesn't trap errors from running antlr.
 */
","/**
	 * If error during parser execution, store stderr here; can't return
	 * stdout and stderr.  This doesn't trap errors from running antlr.
	 */
	private String stderrDuringParse;",False,False
8,antlrToolErrors,Field,"""","""","""","""",85,4,2650,95,2,"/** 
 * Errors found while running antlr
 */
","/**
	 * Errors found while running antlr
	 */
	private StringBuilder antlrToolErrors;",True,True
9,sourceFiles,Field,"addSourceFiles(String)""","""","""","""",117,4,2738,100,18,"/** 
 * Source files used in each small swift project.
 */
","/**
	 * Source files used in each small swift project.
	 */
	private final Set<String> sourceFiles = new HashSet<>();",False,False
10,testWatcher,Field,"""","""","""","""",200,10,2858,103,17,,"@org.junit.Rule
	public final TestRule testWatcher = new TestWatcher() {

		@Override
		protected void succeeded(Description description) {
			// remove tmpdir if no error.
			eraseTempDir();
		}

	};",True,True
11,testSetUp(),Method,"""","""","java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.String+length() java.lang.String+length() java.lang.Class+getSimpleName() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getSimpleName() java.lang.Thread+getName() java.lang.Thread+currentThread() java.lang.Thread+currentThread() java.lang.Thread+getName() java.lang.String+format(Locale,String,Object[]) java.lang.String+format(Locale,String,Object[]) java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() java.io.File+getAbsolutePath() java.io.File+File(String,String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.io.File+getAbsolutePath() java.lang.StringBuilder+StringBuilder()""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+tmpdir org.antlr.v4.test.runtime.swift.BaseSwiftTest+tmpdir org.antlr.v4.test.runtime.swift.BaseSwiftTest+antlrToolErrors""",607,16,3061,114,1,,"@Override
	public void testSetUp() throws Exception {
		// new output dir for each test
		String propName = ""antlr-swift-test-dir"";
		String prop = System.getProperty(propName);
		if (prop != null && prop.length() > 0) {
			tmpdir = prop;
		}
		else {
			String classSimpleName = getClass().getSimpleName();
			String threadName = Thread.currentThread().getName();
			String childPath = String.format(""%s-%s-%s"", classSimpleName, threadName, System.currentTimeMillis());
			tmpdir = new File(System.getProperty(""java.io.tmpdir""), childPath).getAbsolutePath();
		}
		antlrToolErrors = new StringBuilder();
	}",True,True
12,testTearDown(),Method,"""","""","""","""",59,3,3671,131,1,,"@Override
	public void testTearDown() throws Exception {
	}",True,True
13,beforeTest(RuntimeTestDescriptor),Method,"""","""","java.io.PrintStream+println(String) java.io.PrintStream+println(String) org.antlr.v4.test.runtime.RuntimeTestDescriptor+getTestName() org.antlr.v4.test.runtime.RuntimeTestDescriptor+getTestName()""","java.lang.System+out""",120,4,3733,135,1,,"@Override
	public void beforeTest(RuntimeTestDescriptor descriptor) {
		System.out.println(descriptor.getTestName());
	}",True,True
14,afterTest(RuntimeTestDescriptor),Method,"""","""","""","""",71,3,3856,140,1,,"@Override
	public void afterTest(RuntimeTestDescriptor descriptor) {
	}",True,True
15,eraseTempDir(),Method,"""","""","""","""",42,3,3930,144,1,,"@Override
	public void eraseTempDir() {
	}",True,True
16,getTmpDir(),Method,"execLexer(String,String,String,String,boolean) execParser(String,String,String,String,String,String,String,String,boolean) buildProject(String,String) buildProject(String,String) buildProject(String,String) execParser(String,String,String,boolean,boolean) generateParser(String,String,String,String,String)""","""","""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+tmpdir""",58,4,3975,148,1,,"@Override
	public String getTmpDir() {
		return tmpdir;
	}",True,True
17,getStdout(),Method,"""","""","""","""",56,4,4036,153,1,,"@Override
	public String getStdout() {
		return null;
	}",False,False
18,getParseErrors(),Method,"""","""","""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+stderrDuringParse""",74,4,4095,158,1,,"@Override
	public String getParseErrors() {
		return stderrDuringParse;
	}",True,True
19,getANTLRToolErrors(),Method,"""","""","java.lang.StringBuilder+length() java.lang.StringBuilder+length() java.lang.StringBuilder+toString() java.lang.StringBuilder+toString()""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+antlrToolErrors org.antlr.v4.test.runtime.swift.BaseSwiftTest+antlrToolErrors""",146,7,4172,163,1,,"@Override
	public String getANTLRToolErrors() {
		if (antlrToolErrors.length() == 0) {
			return null;
		}
		return antlrToolErrors.toString();
	}",True,True
20,"execLexer(String,String,String,String,boolean)",Method,"""","""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+generateParser(String,String,String,String,String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+generateParser(String,String,String,String,String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+writeLexerTestFile(String,boolean) org.antlr.v4.test.runtime.swift.BaseSwiftTest+writeLexerTestFile(String,boolean) org.antlr.v4.test.runtime.swift.BaseSwiftTest+addSourceFiles(String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+addSourceFiles(String[]) java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() org.antlr.v4.test.runtime.swift.BaseSwiftTest+buildProject(String,String) org.antlr.v4.test.runtime.swift.BaseSwiftTest+buildProject(String,String) org.antlr.v4.test.runtime.swift.BaseSwiftTest+execTest(String,String) org.antlr.v4.test.runtime.swift.BaseSwiftTest+execTest(String,String) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+tmpdir""",631,21,4321,171,1,,"@Override
	public String execLexer(String grammarFileName, String grammarStr, String lexerName, String input, boolean showDFA) {
		generateParser(grammarFileName,
				grammarStr,
				null,
				lexerName);
		writeFile(tmpdir, ""input"", input);
		writeLexerTestFile(lexerName, showDFA);
		addSourceFiles(""main.swift"");

		String projectName = ""testcase-"" + System.currentTimeMillis();
		String projectDir = getTmpDir() + ""/"" + projectName;
		try {
			buildProject(projectDir, projectName);
			return execTest(projectDir, projectName);
		}
		catch (IOException | InterruptedException e) {
			e.printStackTrace();
			return null;
		}
	}",False,False
21,"execParser(String,String,String,String,String,String,String,String,boolean)",Method,"""","""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+generateParser(String,String,String,String,String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+generateParser(String,String,String,String,String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() org.antlr.v4.test.runtime.swift.BaseSwiftTest+execParser(String,String,String,boolean,boolean) org.antlr.v4.test.runtime.swift.BaseSwiftTest+execParser(String,String,String,boolean,boolean)""","""",466,13,4955,193,1,,"@Override
	public String execParser(String grammarFileName, String grammarStr, String parserName, String lexerName, String listenerName, String visitorName, String startRuleName, String input, boolean showDiagnosticErrors) {
		generateParser(grammarFileName,
				grammarStr,
				parserName,
				lexerName,
				""-visitor"");
		writeFile(getTmpDir(), ""input"", input);
		return execParser(parserName,
				lexerName,
				startRuleName,
				showDiagnosticErrors,false);
	}",False,False
22,"execTest(String,String)",Method,"execLexer(String,String,String,String,boolean) execParser(String,String,String,boolean,boolean)""","""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+runProcess(String,String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+runProcess(String,String[]) java.lang.String+length() java.lang.String+length() java.lang.String+length() java.lang.String+length() java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+printStackTrace(PrintStream) java.lang.Throwable+printStackTrace(PrintStream)""","org.antlr.v4.runtime.misc.Pair+b org.antlr.v4.test.runtime.swift.BaseSwiftTest+stderrDuringParse org.antlr.v4.runtime.misc.Pair+b org.antlr.v4.runtime.misc.Pair+a java.lang.System+err java.lang.System+err""",458,15,5424,206,2,,"private String execTest(String projectDir, String projectName) {
		try {
			Pair<String, String> output = runProcess(projectDir, ""./.build/debug/"" + projectName, ""input"");
			if (output.b.length() > 0) {
				stderrDuringParse = output.b;
			}
			String stdout = output.a;
			return stdout.length() > 0 ? stdout : null;
		}
		catch (Exception e) {
			System.err.println(""Execution of testcase failed."");
			e.printStackTrace(System.err);
		}
		return null;
	}",False,False
23,addSourceFiles(String),Method,"""","""","java.util.Collections+addAll(Collection,T[]) java.util.Collections+addAll(Collection,T[])""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+sourceFiles org.antlr.v4.test.runtime.swift.BaseSwiftTest+sourceFiles""",96,3,5885,222,2,,"private void addSourceFiles(String... files) {
		Collections.addAll(this.sourceFiles, files);
	}",False,False
24,"buildProject(String,String)",Method,"execLexer(String,String,String,String,boolean) execParser(String,String,String,boolean,boolean)""","""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+fastFailRunProcess(String,String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+fastFailRunProcess(String,String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() org.antlr.v4.test.runtime.swift.BaseSwiftTest+fastFailRunProcess(String,String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+fastFailRunProcess(String,String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() org.antlr.v4.test.runtime.swift.BaseSwiftTest+fastFailRunProcess(String,String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+fastFailRunProcess(String,String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() org.antlr.v4.test.runtime.swift.BaseSwiftTest+runProcess(String,String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+runProcess(String,String[]) java.lang.String+length() java.lang.String+length() java.io.IOException+IOException(String)""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+SWIFT_CMD org.antlr.v4.test.runtime.swift.BaseSwiftTest+sourceFiles org.antlr.v4.test.runtime.swift.BaseSwiftTest+ANTLR_RUNTIME_PATH org.antlr.v4.test.runtime.swift.BaseSwiftTest+SWIFT_CMD org.antlr.v4.runtime.misc.Pair+b org.antlr.v4.runtime.misc.Pair+a org.antlr.v4.runtime.misc.Pair+b""",935,20,5984,226,2,,"private void buildProject(String projectDir, String projectName) throws IOException, InterruptedException {
		mkdir(projectDir);
		fastFailRunProcess(projectDir, SWIFT_CMD, ""package"", ""init"", ""--type"", ""executable"");
		for (String sourceFile: sourceFiles) {
			String absPath = getTmpDir() + ""/"" + sourceFile;
			fastFailRunProcess(getTmpDir(), ""mv"", ""-f"", absPath, projectDir + ""/Sources/"" + projectName);
		}
		fastFailRunProcess(getTmpDir(), ""mv"", ""-f"", ""input"", projectDir);
		String dylibPath = ANTLR_RUNTIME_PATH + ""/.build/debug/"";
//		System.err.println(dylibPath);
		Pair<String, String> buildResult = runProcess(projectDir, SWIFT_CMD, ""build"",
				""-Xswiftc"", ""-I""+dylibPath,
				""-Xlinker"", ""-L""+dylibPath,
				""-Xlinker"", ""-lAntlr4"",
				""-Xlinker"", ""-rpath"",
				""-Xlinker"", dylibPath);
		if (buildResult.b.length() > 0) {
			throw new IOException(""unit test build failed: "" + buildResult.a + ""\n"" + buildResult.b);
		}
	}",False,False
25,IS_MAC_ARM_64,Field,"""","""","""","""",36,1,6922,247,8,,static Boolean IS_MAC_ARM_64 = null;,False,False
26,isMacOSArm64(),Method,"""","""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+computeIsMacOSArm64() org.antlr.v4.test.runtime.swift.BaseSwiftTest+computeIsMacOSArm64() java.io.PrintStream+println(String) java.io.PrintStream+println(String)""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+IS_MAC_ARM_64 org.antlr.v4.test.runtime.swift.BaseSwiftTest+IS_MAC_ARM_64 java.lang.System+err org.antlr.v4.test.runtime.swift.BaseSwiftTest+IS_MAC_ARM_64 org.antlr.v4.test.runtime.swift.BaseSwiftTest+IS_MAC_ARM_64""",202,7,6961,249,10,,"private static boolean isMacOSArm64() {
		if (IS_MAC_ARM_64 == null) {
			IS_MAC_ARM_64 = computeIsMacOSArm64();
			System.err.println(""IS_MAC_ARM_64 = "" + IS_MAC_ARM_64);
		}
		return IS_MAC_ARM_64;
	}",False,False
27,computeIsMacOSArm64(),Method,"isMacOSArm64()""","""","java.lang.System+getenv(String) java.lang.System+getenv(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.Runtime+exec(String) java.lang.Runtime+getRuntime() java.lang.Runtime+getRuntime() java.lang.Runtime+exec(String) java.io.BufferedReader+BufferedReader(Reader) java.io.InputStreamReader+InputStreamReader(InputStream) java.lang.Process+getInputStream() java.lang.Process+getInputStream() java.io.BufferedReader+readLine() java.io.BufferedReader+readLine() java.lang.String+contains(CharSequence) java.lang.String+contains(CharSequence) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()""","""",447,14,7166,257,10,,"private static boolean computeIsMacOSArm64() {
		String os = System.getenv(""RUNNER_OS"");
		if(os==null || !os.equalsIgnoreCase(""macos""))
			return false;
		try {
			Process p = Runtime.getRuntime().exec(""uname -a"");
			BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
			String uname = in.readLine();
			return uname.contains(""_ARM64_"");
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	}",False,False
28,"runProcess(String,String)",Method,"""","""","""","""",1431,35,7616,272,10,,"private static Pair<String,String> runProcess(String execPath, String... args) throws IOException, InterruptedException {
		List<String> argsWithArch = new ArrayList<>();
		if(USE_ARCH_ARM64 && isMacOSArm64())
			argsWithArch.addAll(Arrays.asList(""arch"", ""-arm64""));
		argsWithArch.addAll(Arrays.asList(args));
		if(VERBOSE)
			System.err.println(""Executing "" + argsWithArch.toString() + "" "" + execPath);
		final Process process = Runtime.getRuntime().exec(argsWithArch.toArray(new String[0]), null, new File(execPath));
		StreamVacuum stdoutVacuum = new StreamVacuum(process.getInputStream());
		StreamVacuum stderrVacuum = new StreamVacuum(process.getErrorStream());
		stdoutVacuum.start();
		stderrVacuum.start();
		Timer timer = new Timer();
		timer.schedule(new TimerTask() {
			@Override
			public void run() {
				try {
					process.destroy();
				} catch(Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}, 120_000);
		int status = process.waitFor();
		timer.cancel();
		stdoutVacuum.join();
		stderrVacuum.join();
		if(VERBOSE)
			System.err.println(""Done executing "" + argsWithArch.toString() + "" "" + execPath);
		if (status != 0) {
			System.err.println(""Process exited with status "" + status);
			throw new IOException(""Process exited with status "" + status + "":\n"" + stdoutVacuum.toString() + ""\n"" + stderrVacuum.toString());
		}
		return new Pair<>(stdoutVacuum.toString(), stderrVacuum.toString());
	}",False,False
29,"fastFailRunProcess(String,String)",Method,"""","""","""","""",1110,30,9050,308,10,,"private static void fastFailRunProcess(String workingDir, String... command) throws IOException, InterruptedException {
		List<String> argsWithArch = new ArrayList<>();
		if(USE_ARCH_ARM64 && isMacOSArm64())
			argsWithArch.addAll(Arrays.asList(""arch"", ""-arm64""));
		argsWithArch.addAll(Arrays.asList(command));
		if(VERBOSE)
			System.err.println(""Executing "" + argsWithArch.toString() + "" "" + workingDir);
		ProcessBuilder builder = new ProcessBuilder(argsWithArch.toArray(new String[0]));
		builder.directory(new File(workingDir));
		final Process process = builder.start();
		Timer timer = new Timer();
		timer.schedule(new TimerTask() {
			@Override
			public void run() {
				try {
					process.destroy();
				} catch(Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}, 120_000);
		int status = process.waitFor();
		timer.cancel();
		if(VERBOSE)
			System.err.println(""Done executing "" + argsWithArch.toString() + "" "" + workingDir);
		if (status != 0) {
			System.err.println(""Process exited with status "" + status);
			throw new IOException(""Process exited with status "" + status);
		}
	}",False,False
30,"execParser(String,String,String,boolean,boolean)",Method,"execParser(String,String,String,String,String,String,String,String,boolean)""","""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+writeLexerTestFile(String,boolean) org.antlr.v4.test.runtime.swift.BaseSwiftTest+writeLexerTestFile(String,boolean) org.antlr.v4.test.runtime.swift.BaseSwiftTest+writeParserTestFile(String,String,String,boolean,boolean) org.antlr.v4.test.runtime.swift.BaseSwiftTest+writeParserTestFile(String,String,String,boolean,boolean) org.antlr.v4.test.runtime.swift.BaseSwiftTest+addSourceFiles(String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+addSourceFiles(String[]) java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() org.antlr.v4.test.runtime.swift.BaseSwiftTest+buildProject(String,String) org.antlr.v4.test.runtime.swift.BaseSwiftTest+buildProject(String,String) org.antlr.v4.test.runtime.swift.BaseSwiftTest+execTest(String,String) org.antlr.v4.test.runtime.swift.BaseSwiftTest+execTest(String,String) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()""","""",740,30,10163,340,2,,"@SuppressWarnings(""SameParameterValue"")
	private String execParser(String parserName,
							  String lexerName,
							  String parserStartRuleName,
							  boolean debug,
							  boolean profile)
	{
		if ( parserName==null ) {
			writeLexerTestFile(lexerName, false);
		}
		else {
			writeParserTestFile(parserName,
					lexerName,
					parserStartRuleName,
					debug,
					profile);
		}

		addSourceFiles(""main.swift"");
		String projectName = ""testcase-"" + System.currentTimeMillis();
		String projectDir = getTmpDir() + ""/"" + projectName;
		try {
			buildProject(projectDir, projectName);
			return execTest(projectDir, projectName);
		}
		catch (IOException | InterruptedException e) {
			e.printStackTrace();
			return null;
		}
	}",False,False
31,"writeParserTestFile(String,String,String,boolean,boolean)",Method,"execParser(String,String,String,boolean,boolean)""","""","""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+tmpdir""",2263,56,10906,370,2,,"private void writeParserTestFile(String parserName,
									 String lexerName,
									 String parserStartRuleName,
									 boolean debug,
									 boolean profile) {

		ST outputFileST = new ST(
				""import Antlr4\n"" +
						""import Foundation\n"" +
						""setbuf(stdout, nil)\n"" +
						""class TreeShapeListener: ParseTreeListener{\n"" +
						""    func visitTerminal(_ node: TerminalNode){ }\n"" +
						""    func visitErrorNode(_ node: ErrorNode){ }\n"" +
						""    func enterEveryRule(_ ctx: ParserRuleContext) throws { }\n"" +
						""    func exitEveryRule(_ ctx: ParserRuleContext) throws {\n"" +
						""        for i in 0..\\<ctx.getChildCount() {\n"" +
						""            let parent = ctx.getChild(i)?.getParent()\n"" +
						""            if (!(parent is RuleNode) || (parent as! RuleNode ).getRuleContext() !== ctx) {\n"" +
						""                throw ANTLRError.illegalState(msg: \""Invalid parse tree shape detected.\"")\n"" +
						""            }\n"" +
						""        }\n"" +
						""    }\n"" +
						""}\n"" +
						""\n"" +
						""let args = CommandLine.arguments\n"" +
						""let input = try ANTLRFileStream(args[1])\n"" +
						""let lex = <lexerName>(input)\n"" +
						""let tokens = CommonTokenStream(lex)\n"" +
						""<createParser>\n"" +
						""parser.setBuildParseTree(true)\n"" +
						""<profile>\n"" +
						""let tree = try parser.<parserStartRuleName>()\n"" +
						""<if(profile)>print(profiler.getDecisionInfo().description)<endif>\n"" +
						""try ParseTreeWalker.DEFAULT.walk(TreeShapeListener(), tree)\n""
		);
		ST createParserST = new ST(""       let parser = try <parserName>(tokens)\n"");
		if (debug) {
			createParserST =
					new ST(
							""        let parser = try <parserName>(tokens)\n"" +
									""        parser.addErrorListener(DiagnosticErrorListener())\n"");
		}
		if (profile) {
			outputFileST.add(""profile"",
					""let profiler = ProfilingATNSimulator(parser)\n"" +
							""parser.setInterpreter(profiler)"");
		}
		else {
			outputFileST.add(""profile"", new ArrayList<>());
		}
		outputFileST.add(""createParser"", createParserST);
		outputFileST.add(""parserName"", parserName);
		outputFileST.add(""lexerName"", lexerName);
		outputFileST.add(""parserStartRuleName"", parserStartRuleName);
		writeFile(tmpdir, ""main.swift"", outputFileST.render());
	}",False,False
32,"writeLexerTestFile(String,boolean)",Method,"execLexer(String,String,String,String,boolean) execParser(String,String,String,boolean,boolean)""","""","""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+tmpdir""",705,21,13172,427,2,,"private void writeLexerTestFile(String lexerName, boolean showDFA) {
		ST outputFileST = new ST(
				""import Antlr4\n"" +
						""import Foundation\n"" +

						""setbuf(stdout, nil)\n"" +
						""let args = CommandLine.arguments\n"" +
						""let input = try ANTLRFileStream(args[1])\n"" +
						""let lex = <lexerName>(input)\n"" +
						""let tokens = CommonTokenStream(lex)\n"" +

						""try tokens.fill()\n"" +

						""for t in tokens.getTokens() {\n"" +
						""	print(t)\n"" +
						""}\n"" +
						(showDFA ? ""print(lex.getInterpreter().getDFA(Lexer.DEFAULT_MODE).toLexerString(), terminator: \""\"" )\n"" : """"));

		outputFileST.add(""lexerName"", lexerName);
		writeFile(tmpdir, ""main.swift"", outputFileST.render());
	}",False,False
33,"generateParser(String,String,String,String,String)",Method,"""","""","org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() org.antlr.v4.test.runtime.swift.BaseSwiftTest+getTmpDir() java.util.List+isEmpty() java.util.List+isEmpty() java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+lastIndexOf(int) java.lang.String+lastIndexOf(int) java.util.Set+contains(Object) java.util.Set+contains(Object) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.Set+contains(Object) java.util.Set+contains(Object) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) org.antlr.v4.test.runtime.swift.BaseSwiftTest+addSourceFiles(String[]) org.antlr.v4.test.runtime.swift.BaseSwiftTest+addSourceFiles(String[]) java.util.List+toArray(T[]) java.util.List+toArray(T[])""","org.antlr.v4.test.runtime.ErrorQueue+errors""",1167,34,13880,452,2,"/** 
 * Generates the parser for one test case.
 */
","/**
	 * Generates the parser for one test case.
	 */
	private void generateParser(String grammarFileName,
								String grammarStr,
								String parserName,
								String lexerName,
								String... extraOptions) {
		ErrorQueue equeue = antlrOnString(getTmpDir(), ""Swift"", grammarFileName, grammarStr, false, extraOptions);
		assertTrue(equeue.errors.isEmpty());
//		System.out.println(getTmpDir());

		List<String> files = new ArrayList<>();
		if (lexerName != null) {
			files.add(lexerName + "".swift"");
			files.add(lexerName + ""ATN.swift"");
		}

		if (parserName != null) {
			files.add(parserName + "".swift"");
			files.add(parserName + ""ATN.swift"");
			Set<String> optionsSet = new HashSet<>(Arrays.asList(extraOptions));
			String grammarName = grammarFileName.substring(0, grammarFileName.lastIndexOf('.'));
			if (!optionsSet.contains(""-no-listener"")) {
				files.add(grammarName + ""Listener.swift"");
				files.add(grammarName + ""BaseListener.swift"");
			}
			if (optionsSet.contains(""-visitor"")) {
				files.add(grammarName + ""Visitor.swift"");
				files.add(grammarName + ""BaseVisitor.swift"");
			}
		}
		addSourceFiles(files.toArray(new String[0]));
	}",False,False
