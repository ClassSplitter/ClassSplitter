index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,annotation,full text,removed
1,log,Field,,,,,75,1,3346,78,18,,private final Logger log = LoggerFactory.getLogger(ModelServiceImpl.class);,False
2,NAMESPACE,Field,,,,,69,1,3425,80,25,,"public static final String NAMESPACE = ""http://activiti.com/modeler"";",False
3,THUMBNAIL_WIDTH,Field,,,,,44,1,3498,82,10,,private static float THUMBNAIL_WIDTH = 300f;,True
4,deploymentService,Field,,,,,59,2,3546,85,4,,"@Autowired
  protected DeploymentService deploymentService;",False
5,modelRepository,Field,,,,,55,2,3609,88,4,,"@Autowired
  protected ModelRepository modelRepository;",False
6,modelHistoryRepository,Field,,,,,69,2,3668,91,4,,"@Autowired
  protected ModelHistoryRepository modelHistoryRepository;",False
7,modelRelationRepository,Field,,,,,71,2,3741,94,4,,"@Autowired
  protected ModelRelationRepository modelRelationRepository;",False
8,objectMapper,Field,,,,,49,2,3816,97,4,,"@Autowired
  protected ObjectMapper objectMapper;",False
9,userCache,Field,,,,,43,2,3869,100,4,,"@Autowired
  protected UserCache userCache;",False
10,bpmnJsonConverter,Field,,,,,72,1,3916,102,4,,protected BpmnJsonConverter bpmnJsonConverter = new BpmnJsonConverter();,False
11,bpmnXMLConverter,Field,,,,,69,1,3992,104,4,,protected BpmnXMLConverter bpmnXMLConverter = new BpmnXMLConverter();,False
12,getModel(Long),Method,,,,com.activiti.service.editor.ModelServiceImpl+modelRepository,106,4,4065,107,1,,"@Override
  public AbstractModel getModel(Long modelId) {
    return modelRepository.findOne(modelId);
  }",False
13,"getModelsByModelTypeAndReferenceId(Integer,Long)",Method,,,"java.util.ArrayList+ArrayList(Collection) com.activiti.repository.editor.ModelRepository+findModelsByModelTypeAndReferenceIdOrNullReferenceId(Integer,Long) com.activiti.repository.editor.ModelRepository+findModelsByModelTypeAndReferenceIdOrNullReferenceId(Integer,Long)",com.activiti.service.editor.ModelServiceImpl+modelRepository,251,4,4175,112,1,,"@Override
  public List<AbstractModel> getModelsByModelTypeAndReferenceId(Integer modelType, Long referenceId) {
    return new ArrayList<AbstractModel>(modelRepository.findModelsByModelTypeAndReferenceIdOrNullReferenceId(modelType, referenceId));
  }",False
14,getBpmnXML(AbstractModel),Method,,,"com.activiti.service.editor.ModelServiceImpl+getBpmnModel(AbstractModel,boolean) com.activiti.service.editor.ModelServiceImpl+getBpmnModel(AbstractModel,boolean) com.activiti.service.editor.ModelServiceImpl+getBpmnXML(BpmnModel) com.activiti.service.editor.ModelServiceImpl+getBpmnXML(BpmnModel)",,151,5,4430,117,1,,"@Override
  public byte[] getBpmnXML(AbstractModel model) {
    BpmnModel bpmnModel = getBpmnModel(model, false);
    return getBpmnXML(bpmnModel);
  }",False
15,getBpmnXML(BpmnModel),Method,getBpmnXML(AbstractModel),,org.activiti.bpmn.model.BpmnModel+getProcesses() org.activiti.bpmn.model.BpmnModel+getProcesses() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.lang.String+charAt(int) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.lang.String+charAt(int) java.lang.Character+isDigit(char) java.lang.Character+isDigit(char) org.activiti.bpmn.model.BaseElement+setId(String) org.activiti.bpmn.model.BaseElement+setId(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.converter.BpmnXMLConverter+convertToXML(BpmnModel) org.activiti.bpmn.converter.BpmnXMLConverter+convertToXML(BpmnModel),com.activiti.service.editor.ModelServiceImpl+bpmnXMLConverter,484,14,4585,123,1,,"@Override
  public byte[] getBpmnXML(BpmnModel bpmnModel) {
    for (Process process : bpmnModel.getProcesses()) {
      if (StringUtils.isNotEmpty(process.getId())) {
        char firstCharacter = process.getId().charAt(0);
        // no digit is allowed as first character
        if (Character.isDigit(firstCharacter)) {
          process.setId(""a"" + process.getId());
        }
      }
    }
    byte[] xmlBytes = bpmnXMLConverter.convertToXML(bpmnModel);
    return xmlBytes;
  }",False
16,"createModel(ModelRepresentation,String,User)",Method,,,com.activiti.domain.editor.Model+Model() com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.model.editor.ModelRepresentation+getName() com.activiti.model.editor.ModelRepresentation+getName() com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.model.editor.ModelRepresentation+getKey() com.activiti.model.editor.ModelRepresentation+getKey() com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.model.editor.ModelRepresentation+getModelType() com.activiti.model.editor.ModelRepresentation+getModelType() com.activiti.domain.editor.AbstractModel+setCreated(Date) com.activiti.domain.editor.AbstractModel+setCreated(Date) java.util.Calendar+getTime() java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+getTime() com.activiti.domain.editor.AbstractModel+setCreatedBy(String) com.activiti.domain.editor.AbstractModel+setCreatedBy(String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId() com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.model.editor.ModelRepresentation+getDescription() com.activiti.model.editor.ModelRepresentation+getDescription() com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) java.util.Calendar+getTime() java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+getTime() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId() com.activiti.domain.editor.AbstractModel+setReferenceId(Long) com.activiti.domain.editor.AbstractModel+setReferenceId(Long) com.activiti.model.editor.ModelRepresentation+getReferenceId() com.activiti.model.editor.ModelRepresentation+getReferenceId() com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.service.editor.ModelServiceImpl+persistModel(Model),,727,19,5073,139,1,,"@Override
  @Transactional
  public Model createModel(ModelRepresentation model, String editorJson, User createdBy) {
    Model newModel = new Model();
    newModel.setVersion(1);
    newModel.setName(model.getName());
    newModel.setKey(model.getKey());
    newModel.setModelType(model.getModelType());
    newModel.setCreated(Calendar.getInstance().getTime());
    newModel.setCreatedBy(createdBy.getId());
    newModel.setDescription(model.getDescription());
    newModel.setModelEditorJson(editorJson);
    newModel.setLastUpdated(Calendar.getInstance().getTime());
    newModel.setLastUpdatedBy(createdBy.getId());
    newModel.setReferenceId(model.getReferenceId());

    persistModel(newModel);
    return newModel;
  }",False
17,"createNewModelVersion(Model,String,User)",Method,,,"com.activiti.service.editor.ModelServiceImpl+internalCreateNewModelVersion(Model,String,User,boolean) com.activiti.service.editor.ModelServiceImpl+internalCreateNewModelVersion(Model,String,User,boolean)",,210,5,5804,159,1,,"@Override
  @Transactional
  public Model createNewModelVersion(Model modelObject, String comment, User updatedBy) {
    return (Model) internalCreateNewModelVersion(modelObject, comment, updatedBy, false);
  }",False
18,"createNewModelVersionAndReturnModelHistory(Model,String,User)",Method,,,"com.activiti.service.editor.ModelServiceImpl+internalCreateNewModelVersion(Model,String,User,boolean) com.activiti.service.editor.ModelServiceImpl+internalCreateNewModelVersion(Model,String,User,boolean)",,244,5,6018,165,1,,"@Override
  @Transactional
  public ModelHistory createNewModelVersionAndReturnModelHistory(Model modelObject, String comment, User updatedBy) {
    return (ModelHistory) internalCreateNewModelVersion(modelObject, comment, updatedBy, true);
  }",False
19,"internalCreateNewModelVersion(Model,String,User,boolean)",Method,"createNewModelVersion(Model,String,User) createNewModelVersionAndReturnModelHistory(Model,String,User)",,com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) java.util.Date+Date() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId() com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.service.editor.ModelServiceImpl+persistModel(Model),,531,13,6266,169,4,,"protected AbstractModel internalCreateNewModelVersion(Model modelObject, String comment, User updatedBy, boolean returnModelHistory) {
    modelObject.setLastUpdated(new Date());
    modelObject.setLastUpdatedBy(updatedBy.getId());
    modelObject.setComment(comment);

    ModelHistory historyModel = createNewModelhistory(modelObject);
    persistModelHistory(historyModel);

    modelObject.setVersion(modelObject.getVersion() + 1);
    persistModel(modelObject);

    return returnModelHistory ? historyModel : modelObject;
  }",False
20,saveModel(Model),Method,,,com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.service.editor.ModelServiceImpl+persistModel(Model),,97,4,6801,184,1,,"@Override
  public Model saveModel(Model modelObject) {
    return persistModel(modelObject);
  }",False
21,"saveModel(Model,String,byte[],boolean,String,User)",Method,,,"com.activiti.service.editor.ModelServiceImpl+internalSave(String,String,String,String,boolean,String,byte[],User,Model) com.activiti.service.editor.ModelServiceImpl+internalSave(String,String,String,String,boolean,String,byte[],User,Model) com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+getDescription()",,365,7,6902,190,1,,"@Override
  @Transactional
  public Model saveModel(Model modelObject, String editorJson, byte[] imageBytes, boolean newVersion, String newVersionComment, User updatedBy) {

    return internalSave(modelObject.getName(), modelObject.getKey(), modelObject.getDescription(), editorJson, newVersion, 
        newVersionComment, imageBytes, updatedBy, modelObject);
  }",False
22,"saveModel(long,String,String,String,String,boolean,String,User)",Method,,,"com.activiti.service.editor.ModelServiceImpl+internalSave(String,String,String,String,boolean,String,byte[],User,Model) com.activiti.service.editor.ModelServiceImpl+internalSave(String,String,String,String,boolean,String,byte[],User,Model)",com.activiti.service.editor.ModelServiceImpl+modelRepository,385,8,7271,198,1,,"@Override
  @Transactional
  public Model saveModel(long modelId, String name, String key, String description, String editorJson, 
      boolean newVersion, String newVersionComment, User updatedBy) {

    Model modelObject = modelRepository.findOne(modelId);
    return internalSave(name, key, description, editorJson, newVersion, newVersionComment, null, updatedBy, modelObject);
  }",False
23,"internalSave(String,String,String,String,boolean,String,byte[],User,Model)",Method,"saveModel(Model,String,byte[],boolean,String,User) saveModel(long,String,String,String,String,boolean,String,User)",,com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) java.util.Date+Date() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId() com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.Model+setThumbnail(byte[]) com.activiti.domain.editor.Model+setThumbnail(byte[]) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) java.util.Date+Date() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId() com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.Model+setThumbnail(byte[]) com.activiti.domain.editor.Model+setThumbnail(byte[]) com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.service.editor.ModelServiceImpl+persistModel(Model),,1218,38,7660,205,4,,"protected Model internalSave(String name, String key, String description, String editorJson, boolean newVersion, 
      String newVersionComment, byte[] imageBytes, User updatedBy, Model modelObject) {

    if (newVersion == false) {

      modelObject.setLastUpdated(new Date());
      modelObject.setLastUpdatedBy(updatedBy.getId());
      modelObject.setName(name);
      modelObject.setKey(key);
      modelObject.setDescription(description);
      modelObject.setModelEditorJson(editorJson);

      if (imageBytes != null) {
        modelObject.setThumbnail(imageBytes);
      }

    } else {

      ModelHistory historyModel = createNewModelhistory(modelObject);
      persistModelHistory(historyModel);

      modelObject.setVersion(modelObject.getVersion() + 1);
      modelObject.setLastUpdated(new Date());
      modelObject.setLastUpdatedBy(updatedBy.getId());
      modelObject.setName(name);
      modelObject.setKey(key);
      modelObject.setDescription(description);
      modelObject.setModelEditorJson(editorJson);
      modelObject.setComment(newVersionComment);

      if (imageBytes != null) {
        modelObject.setThumbnail(imageBytes);
      }

    }

    return persistModel(modelObject);
  }",False
24,"deleteModel(long,boolean,boolean)",Method,,,"java.lang.IllegalArgumentException+IllegalArgumentException(String) com.activiti.repository.editor.ModelHistoryRepository+findByModelIdAndRemovalDateIsNullOrderByVersionDesc(Long) com.activiti.repository.editor.ModelHistoryRepository+findByModelIdAndRemovalDateIsNullOrderByVersionDesc(Long) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.domain.editor.ModelHistory+setRemovalDate(Date) com.activiti.domain.editor.ModelHistory+setRemovalDate(Date) java.util.Calendar+getTime() java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+getTime() com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) java.util.List+size() java.util.List+size() com.activiti.service.editor.ModelServiceImpl+deleteModelAndChildren(Model) com.activiti.service.editor.ModelServiceImpl+deleteModelAndChildren(Model) java.util.List+remove(int) java.util.List+remove(int) com.activiti.service.editor.ModelServiceImpl+populateModelBasedOnHistory(Model,ModelHistory) com.activiti.service.editor.ModelServiceImpl+populateModelBasedOnHistory(Model,ModelHistory) com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.service.editor.ModelServiceImpl+persistModel(Model)",com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.service.editor.ModelServiceImpl+modelHistoryRepository com.activiti.domain.editor.AbstractModel+MODEL_TYPE_APP com.activiti.service.editor.ModelServiceImpl+modelHistoryRepository,1487,36,8882,246,1,,"@Override
  @Transactional
  public void deleteModel(long modelId, boolean cascadeHistory, boolean deleteRuntimeApp) {

    Model model = modelRepository.findOne(modelId);
    if (model == null) {
      throw new IllegalArgumentException(""No model found with id: "" + modelId);
    }

    // Fetch current model history list
    List<ModelHistory> history = modelHistoryRepository.findByModelIdAndRemovalDateIsNullOrderByVersionDesc(model.getId());

    // if the model is an app definition and the runtime app needs to be deleted, remove it now
    if (deleteRuntimeApp && model.getModelType() == Model.MODEL_TYPE_APP) {
      /*Long appDefinitionId = runtimeAppDefinitionService.getDefinitionIdForModelAndUser(model.getId(), SecurityUtils.getCurrentUserObject());
      if (appDefinitionId != null) {
        deploymentService.deleteAppDefinition(appDefinitionId);
      }*/

    } else {
      // Move model to history and mark removed
      ModelHistory historyModel = createNewModelhistory(model);
      historyModel.setRemovalDate(Calendar.getInstance().getTime());
      persistModelHistory(historyModel);
    }

    if (cascadeHistory || history.size() == 0) {
      deleteModelAndChildren(model);
    } else {
      // History available and no cascade was requested. Revive latest history entry
      ModelHistory toRevive = history.remove(0);
      populateModelBasedOnHistory(model, toRevive);
      persistModel(model);
      modelHistoryRepository.delete(toRevive);
    }
  }",False
25,deleteModelAndChildren(Model),Method,"deleteModel(long,boolean,boolean)",,"java.util.ArrayList+ArrayList() com.activiti.service.editor.ModelServiceImpl+internalDeleteModelAndChildren(Model,List<Model>) com.activiti.service.editor.ModelServiceImpl+internalDeleteModelAndChildren(Model,List<Model>)",com.activiti.service.editor.ModelServiceImpl+modelRepository,515,13,10373,281,4,,"protected void deleteModelAndChildren(Model model) {

    // Models have relations with each other, in all kind of wicked and funny ways.
    // Hence, we remove first all relations, comments, etc. while collecting all models.
    // Then, once all foreign key problemmakers are removed, we remove the models

    List<Model> allModels = new ArrayList<Model>();
    internalDeleteModelAndChildren(model, allModels);

    for (Model modelToDelete : allModels) {
      modelRepository.delete(modelToDelete);
    }
  }",False
26,"internalDeleteModelAndChildren(Model,List<Model>)",Method,"deleteModelAndChildren(Model) internalDeleteModelAndChildren(Model,List<Model>)",,"com.activiti.repository.editor.ModelRepository+findModelsByReferenceId(Long) com.activiti.repository.editor.ModelRepository+findModelsByReferenceId(Long) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId() com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.domain.editor.ModelHistory+setRemovalDate(Date) com.activiti.domain.editor.ModelHistory+setRemovalDate(Date) java.util.Calendar+getTime() java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+getTime() com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.service.editor.ModelServiceImpl+internalDeleteModelAndChildren(Model,List<Model>) com.activiti.service.editor.ModelServiceImpl+internalDeleteModelAndChildren(Model,List<Model>) com.activiti.repository.editor.ModelRelationRepository+deleteModelRelationsForParentModel(Long) com.activiti.repository.editor.ModelRelationRepository+deleteModelRelationsForParentModel(Long) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId() java.util.List+add(E) java.util.List+add(E)",com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.service.editor.ModelServiceImpl+modelRelationRepository,800,18,10892,295,4,,"protected void internalDeleteModelAndChildren(Model model, List<Model> allModels) {

    // Embedded models should be stored in the history such that they can be revived if needed one day
    List<Model> embeddedModels = modelRepository.findModelsByReferenceId(model.getId());
    for (Model embeddedModel : embeddedModels) {
      ModelHistory embeddedHistoryModel = createNewModelhistory(embeddedModel);
      embeddedHistoryModel.setRemovalDate(Calendar.getInstance().getTime());
      persistModelHistory(embeddedHistoryModel);

      // Delete all embedded models, and their children
      internalDeleteModelAndChildren(embeddedModel, allModels);
    }

    // Delete all related data
    modelRelationRepository.deleteModelRelationsForParentModel(model.getId());

    allModels.add(model);
  }",False
27,"reviveProcessModelHistory(ModelHistory,User,String)",Method,,,"com.activiti.domain.editor.ModelHistory+getModelId() com.activiti.domain.editor.ModelHistory+getModelId() java.lang.IllegalArgumentException+IllegalArgumentException(String) com.activiti.domain.editor.ModelHistory+getModelId() com.activiti.domain.editor.ModelHistory+getModelId() com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) java.util.Date+Date() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId() com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.model.editor.ReviveModelResultRepresentation+ReviveModelResultRepresentation() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AppDefinition+getModels() com.activiti.domain.editor.AppDefinition+getModels() com.activiti.domain.editor.AppModelDefinition+getId() com.activiti.domain.editor.AppModelDefinition+getId() java.util.List+add(E) com.activiti.model.editor.ReviveModelResultRepresentation+getUnresolvedModels() com.activiti.model.editor.ReviveModelResultRepresentation+getUnresolvedModels() java.util.List+add(E) com.activiti.model.editor.ReviveModelResultRepresentation.UnresolveModelRepresentation+UnresolveModelRepresentation(Long,String,String) com.activiti.domain.editor.AppModelDefinition+getId() com.activiti.domain.editor.AppModelDefinition+getId() com.activiti.domain.editor.AppModelDefinition+getName() com.activiti.domain.editor.AppModelDefinition+getName() com.activiti.domain.editor.AppModelDefinition+getLastUpdatedBy() com.activiti.domain.editor.AppModelDefinition+getLastUpdatedBy() com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId()",com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.domain.editor.AbstractModel+MODEL_TYPE_APP com.activiti.service.editor.ModelServiceImpl+objectMapper com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.service.editor.ModelServiceImpl+log,2250,46,11696,316,1,,"@Override
  @Transactional
  public ReviveModelResultRepresentation reviveProcessModelHistory(ModelHistory modelHistory, User user, String newVersionComment) {
    Model latestModel = modelRepository.findOne(modelHistory.getModelId());
    if (latestModel == null) {
      throw new IllegalArgumentException(""No process model found with id: "" + modelHistory.getModelId());
    }

    // Store the current model in history
    ModelHistory latestModelHistory = createNewModelhistory(latestModel);
    persistModelHistory(latestModelHistory);

    // Populate the actual latest version with the properties in the historic model
    latestModel.setVersion(latestModel.getVersion() + 1);
    latestModel.setLastUpdated(new Date());
    latestModel.setLastUpdatedBy(user.getId());
    latestModel.setName(modelHistory.getName());
    latestModel.setKey(modelHistory.getKey());
    latestModel.setDescription(modelHistory.getDescription());
    latestModel.setModelEditorJson(modelHistory.getModelEditorJson());
    latestModel.setModelType(modelHistory.getModelType());
    latestModel.setComment(newVersionComment);
    persistModel(latestModel);

    ReviveModelResultRepresentation result = new ReviveModelResultRepresentation();

    // For apps, we need to make sure the referenced processes exist as models.
    // It could be the user has deleted the process model in the meantime. We give back that info to the user.
    if (latestModel.getModelType() == AbstractModel.MODEL_TYPE_APP) {
      if (StringUtils.isNotEmpty(latestModel.getModelEditorJson())) {
        try {
          AppDefinition appDefinition = objectMapper.readValue(latestModel.getModelEditorJson(), AppDefinition.class);
          for (AppModelDefinition appModelDefinition : appDefinition.getModels()) {
            if (!modelRepository.exists(appModelDefinition.getId())) {
              result.getUnresolvedModels().add(new UnresolveModelRepresentation(appModelDefinition.getId(), 
                  appModelDefinition.getName(), appModelDefinition.getLastUpdatedBy()));
            }
          }
        } catch (Exception e) {
          log.error(""Could not deserialize app model json (id = "" + latestModel.getId() + "")"", e);
        }
      }
    }

    return result;
  }",False
28,"getBpmnModel(AbstractModel,boolean)",Method,getBpmnXML(AbstractModel),,"com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.service.editor.ModelServiceImpl+createDecisionTableMap(JsonNode) com.activiti.service.editor.ModelServiceImpl+createDecisionTableMap(JsonNode) org.activiti.editor.language.json.converter.BpmnJsonConverter+convertToBpmnModel(JsonNode,Map<Long,JsonNode>) org.activiti.editor.language.json.converter.BpmnJsonConverter+convertToBpmnModel(JsonNode,Map<Long,JsonNode>) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId() com.activiti.service.exception.InternalServerErrorException+InternalServerErrorException(String)",com.activiti.service.editor.ModelServiceImpl+objectMapper com.activiti.service.editor.ModelServiceImpl+bpmnJsonConverter com.activiti.service.editor.ModelServiceImpl+log,690,18,13950,362,1,,"@Override
  public BpmnModel getBpmnModel(AbstractModel model, boolean refreshReferences) {
    BpmnModel bpmnModel = null;
    try {
      ObjectNode editorJsonNode = (ObjectNode) objectMapper.readTree(model.getModelEditorJson());
      Map<Long, JsonNode> decisionTableMap = createDecisionTableMap(editorJsonNode);
      bpmnModel = bpmnJsonConverter.convertToBpmnModel(editorJsonNode, decisionTableMap);

    } catch (BaseModelerRestException e) {
      throw e;

    } catch (Exception e) {
      log.error(""Could not generate BPMN 2.0 XML for model "" + model.getId(), e);
      throw new InternalServerErrorException(""Could not generate BPMN 2.0 xml"");
    }

    return bpmnModel;
  }",False
29,"addOrUpdateExtensionElement(String,String,UserTask)",Method,,,java.util.Map+get(Object) org.activiti.bpmn.model.BaseElement+getExtensionElements() org.activiti.bpmn.model.BaseElement+getExtensionElements() java.util.Map+get(Object) org.activiti.editor.language.json.converter.util.CollectionUtils+isNotEmpty(Collection) org.activiti.editor.language.json.converter.util.CollectionUtils+isNotEmpty(Collection) java.util.List+get(int) java.util.List+get(int) org.activiti.bpmn.model.ExtensionElement+ExtensionElement() org.activiti.bpmn.model.ExtensionElement+setNamespace(String) org.activiti.bpmn.model.ExtensionElement+setNamespace(String) org.activiti.bpmn.model.ExtensionElement+setNamespacePrefix(String) org.activiti.bpmn.model.ExtensionElement+setNamespacePrefix(String) org.activiti.bpmn.model.ExtensionElement+setName(String) org.activiti.bpmn.model.ExtensionElement+setName(String) org.activiti.bpmn.model.ExtensionElement+setElementText(String) org.activiti.bpmn.model.ExtensionElement+setElementText(String) org.activiti.editor.language.json.converter.util.CollectionUtils+isEmpty(Collection) org.activiti.editor.language.json.converter.util.CollectionUtils+isEmpty(Collection) org.activiti.bpmn.model.BaseElement+addExtensionElement(ExtensionElement) org.activiti.bpmn.model.BaseElement+addExtensionElement(ExtensionElement),com.activiti.service.editor.ModelServiceImpl+NAMESPACE,694,19,14644,380,4,,"protected void addOrUpdateExtensionElement(String name, String value, UserTask userTask) {
    List<ExtensionElement> extensionElements = userTask.getExtensionElements().get(name);

    ExtensionElement extensionElement;

    if (CollectionUtils.isNotEmpty(extensionElements)) {
      extensionElement = extensionElements.get(0);
    } else {
      extensionElement = new ExtensionElement();
    }
    extensionElement.setNamespace(NAMESPACE);
    extensionElement.setNamespacePrefix(""modeler"");
    extensionElement.setName(name);
    extensionElement.setElementText(value);

    if (CollectionUtils.isEmpty(extensionElements)) {
      userTask.addExtensionElement(extensionElement);
    }
  }",False
30,"getModelCountForUser(User,int)",Method,,,"com.activiti.repository.editor.ModelRepository+countByModelTypeAndUser(int,String) com.activiti.repository.editor.ModelRepository+countByModelTypeAndUser(int,String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId()",com.activiti.service.editor.ModelServiceImpl+modelRepository,141,3,15342,400,1,,"public Long getModelCountForUser(User user, int modelType) {
    return modelRepository.countByModelTypeAndUser(modelType, user.getId());
  }",False
31,persistModel(Model),Method,"createModel(ModelRepresentation,String,User) internalCreateNewModelVersion(Model,String,User,boolean) saveModel(Model) internalSave(String,String,String,String,boolean,String,byte[],User,Model) deleteModel(long,boolean,boolean) reviveProcessModelHistory(ModelHistory,User,String)",,"com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() java.lang.Integer+intValue() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() java.lang.Integer+intValue() com.activiti.service.editor.ModelServiceImpl+generateThumbnailImage(Model,ObjectNode) com.activiti.service.editor.ModelServiceImpl+generateThumbnailImage(Model,ObjectNode) com.activiti.service.editor.ModelServiceImpl+handleBpmnProcessFormModelRelations(AbstractModel,ObjectNode) com.activiti.service.editor.ModelServiceImpl+handleBpmnProcessFormModelRelations(AbstractModel,ObjectNode) java.lang.Integer+intValue() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() java.lang.Integer+intValue() com.activiti.service.editor.ModelServiceImpl+handleAppModelProcessRelations(AbstractModel,ObjectNode) com.activiti.service.editor.ModelServiceImpl+handleAppModelProcessRelations(AbstractModel,ObjectNode)",com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.service.editor.ModelServiceImpl+objectMapper com.activiti.service.editor.ModelServiceImpl+log com.activiti.service.editor.ModelServiceImpl+log com.activiti.domain.editor.AbstractModel+MODEL_TYPE_BPMN com.activiti.domain.editor.AbstractModel+MODEL_TYPE_APP,954,32,15487,404,4,,"protected Model persistModel(Model model) {

    model = modelRepository.save((Model) model);

    if (StringUtils.isNotEmpty(model.getModelEditorJson())) {

      // Parse json to java
      ObjectNode jsonNode = null;
      try {
        jsonNode = (ObjectNode) objectMapper.readTree(model.getModelEditorJson());
      } catch (JsonProcessingException e) {
        log.error(""Could not deserialize json model"", e);
      } catch (IOException e) {
        log.error(""Could not deserialize json model"", e);
      }

      if ((model.getModelType() == null || model.getModelType().intValue() == Model.MODEL_TYPE_BPMN)) {

        // Thumbnail
        generateThumbnailImage((Model) model, jsonNode);

        // Relations
        handleBpmnProcessFormModelRelations(model, jsonNode);

      } else if (model.getModelType().intValue() == Model.MODEL_TYPE_APP) {

        handleAppModelProcessRelations(model, jsonNode);
      }
    }

    return model;
  }",False
32,persistModelHistory(ModelHistory),Method,"internalCreateNewModelVersion(Model,String,User,boolean) internalSave(String,String,String,String,boolean,String,byte[],User,Model) deleteModel(long,boolean,boolean) internalDeleteModelAndChildren(Model,List<Model>) reviveProcessModelHistory(ModelHistory,User,String)",,,com.activiti.service.editor.ModelServiceImpl+modelHistoryRepository,129,3,16445,437,4,,"protected ModelHistory persistModelHistory(ModelHistory modelHistory) {
    return modelHistoryRepository.save(modelHistory);
  }",False
33,"generateThumbnailImage(Model,ObjectNode)",Method,persistModel(Model),,"org.activiti.editor.language.json.converter.BpmnJsonConverter+convertToBpmnModel(JsonNode) org.activiti.editor.language.json.converter.BpmnJsonConverter+convertToBpmnModel(JsonNode) com.activiti.service.editor.ModelServiceImpl+calculateDiagramSize(BpmnModel) com.activiti.service.editor.ModelServiceImpl+calculateDiagramSize(BpmnModel) org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() com.activiti.service.editor.ModelServiceImpl+scaleDiagram(BpmnModel,double) com.activiti.service.editor.ModelServiceImpl+scaleDiagram(BpmnModel,double) com.activiti.image.ImageGenerator+createImage(BpmnModel,double) com.activiti.image.ImageGenerator+createImage(BpmnModel,double) com.activiti.image.ImageGenerator+createByteArrayForImage(BufferedImage,String) com.activiti.image.ImageGenerator+createByteArrayForImage(BufferedImage,String) com.activiti.domain.editor.Model+setThumbnail(byte[]) com.activiti.domain.editor.Model+setThumbnail(byte[]) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId()",com.activiti.service.editor.ModelServiceImpl+bpmnJsonConverter com.activiti.service.editor.ModelServiceImpl+THUMBNAIL_WIDTH com.activiti.service.editor.ModelServiceImpl+THUMBNAIL_WIDTH com.activiti.service.editor.ModelServiceImpl+log,812,21,16578,441,4,,"protected void generateThumbnailImage(Model model, ObjectNode editorJsonNode) {
    try {

      BpmnModel bpmnModel = bpmnJsonConverter.convertToBpmnModel(editorJsonNode);

      double scaleFactor = 1.0;
      GraphicInfo diagramInfo = calculateDiagramSize(bpmnModel);
      if (diagramInfo.getWidth() > THUMBNAIL_WIDTH) {
        scaleFactor = diagramInfo.getWidth() / THUMBNAIL_WIDTH;
        scaleDiagram(bpmnModel, scaleFactor);
      }

      BufferedImage modelImage = ImageGenerator.createImage(bpmnModel, scaleFactor);
      if (modelImage != null) {
        byte[] thumbnailBytes = ImageGenerator.createByteArrayForImage(modelImage, ""png"");
        model.setThumbnail(thumbnailBytes);
      }
    } catch (Exception e) {
      log.error(""Error creating thumbnail image "" + model.getId(), e);
    }
  }",True
34,"handleBpmnProcessFormModelRelations(AbstractModel,ObjectNode)",Method,persistModel(Model),,"org.activiti.editor.language.json.converter.util.JsonConverterUtil+filterOutJsonNodes(List<JsonLookupResult>) org.activiti.editor.language.json.converter.util.JsonConverterUtil+filterOutJsonNodes(List<JsonLookupResult>) org.activiti.editor.language.json.converter.util.JsonConverterUtil+getBpmnProcessModelFormReferences(JsonNode) org.activiti.editor.language.json.converter.util.JsonConverterUtil+getBpmnProcessModelFormReferences(JsonNode) org.activiti.editor.language.json.converter.util.JsonConverterUtil+gatherLongPropertyFromJsonNodes(Iterable<JsonNode>,String) org.activiti.editor.language.json.converter.util.JsonConverterUtil+gatherLongPropertyFromJsonNodes(Iterable<JsonNode>,String) com.activiti.service.editor.ModelServiceImpl+handleModelRelations(AbstractModel,Set<Long>,String) com.activiti.service.editor.ModelServiceImpl+handleModelRelations(AbstractModel,Set<Long>,String)",com.activiti.domain.editor.ModelRelationTypes+TYPE_FORM_MODEL_CHILD,459,6,17394,463,4,,"protected void handleBpmnProcessFormModelRelations(AbstractModel bpmnProcessModel, ObjectNode editorJsonNode) {
    List<JsonNode> formReferenceNodes = JsonConverterUtil.filterOutJsonNodes(JsonConverterUtil.getBpmnProcessModelFormReferences(editorJsonNode));
    Set<Long> formIds = JsonConverterUtil.gatherLongPropertyFromJsonNodes(formReferenceNodes, ""id"");

    handleModelRelations(bpmnProcessModel, formIds, ModelRelationTypes.TYPE_FORM_MODEL_CHILD);
  }",False
35,"handleAppModelProcessRelations(AbstractModel,ObjectNode)",Method,persistModel(Model),,"org.activiti.editor.language.json.converter.util.JsonConverterUtil+getAppModelReferencedModelIds(JsonNode) org.activiti.editor.language.json.converter.util.JsonConverterUtil+getAppModelReferencedModelIds(JsonNode) com.activiti.service.editor.ModelServiceImpl+handleModelRelations(AbstractModel,Set<Long>,String) com.activiti.service.editor.ModelServiceImpl+handleModelRelations(AbstractModel,Set<Long>,String)",com.activiti.domain.editor.ModelRelationTypes+TYPE_PROCESS_MODEL,295,4,17857,470,4,,"protected void handleAppModelProcessRelations(AbstractModel appModel, ObjectNode appModelJsonNode) {
    Set<Long> processModelIds = JsonConverterUtil.getAppModelReferencedModelIds(appModelJsonNode);
    handleModelRelations(appModel, processModelIds, ModelRelationTypes.TYPE_PROCESS_MODEL);
  }",False
36,"handleModelRelations(AbstractModel,Set<Long>,String)",Method,"handleBpmnProcessFormModelRelations(AbstractModel,ObjectNode) handleAppModelProcessRelations(AbstractModel,ObjectNode)",,"com.activiti.repository.editor.ModelRelationRepository+findByParentModelIdAndType(Long,String) com.activiti.repository.editor.ModelRelationRepository+findByParentModelIdAndType(Long,String) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId() java.util.Set+size() java.util.Set+size() java.util.HashSet+HashSet(int) java.util.List+size() java.util.List+size() java.util.Set+contains(Object) java.util.Set+contains(Object) com.activiti.domain.editor.ModelRelation+getModelId() com.activiti.domain.editor.ModelRelation+getModelId() java.util.Set+add(E) java.util.Set+add(E) com.activiti.domain.editor.ModelRelation+getModelId() com.activiti.domain.editor.ModelRelation+getModelId() java.util.Set+contains(Object) java.util.Set+contains(Object) com.activiti.domain.editor.ModelRelation+ModelRelation(Long,Long,String) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId()",com.activiti.service.editor.ModelServiceImpl+modelRelationRepository com.activiti.service.editor.ModelServiceImpl+modelRelationRepository com.activiti.service.editor.ModelServiceImpl+modelRelationRepository com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.service.editor.ModelServiceImpl+modelRelationRepository,1726,37,18156,478,4,"/** 
 * Generic handling of model relations: deleting/adding where needed.
 */
","/**
   * Generic handling of model relations: deleting/adding where needed.
   */
  protected void handleModelRelations(AbstractModel bpmnProcessModel, Set<Long> idsReferencedInJson, String relationshipType) {

    // Find existing persisted relations
    List<ModelRelation> persistedModelRelations = modelRelationRepository.findByParentModelIdAndType(bpmnProcessModel.getId(), relationshipType);

    // if no ids referenced now, just delete them all
    if (idsReferencedInJson == null || idsReferencedInJson.size() == 0) {
      modelRelationRepository.delete(persistedModelRelations);
      return;
    }

    Set<Long> alreadyPersistedModelIds = new HashSet<Long>(persistedModelRelations.size());
    for (ModelRelation persistedModelRelation : persistedModelRelations) {
      if (!idsReferencedInJson.contains(persistedModelRelation.getModelId())) {
        // model used to be referenced, but not anymore. Delete it.
        modelRelationRepository.delete((ModelRelation) persistedModelRelation);
      } else {
        alreadyPersistedModelIds.add(persistedModelRelation.getModelId());
      }
    }

    // Loop over all referenced ids and see which one are new
    for (Long idReferencedInJson : idsReferencedInJson) {

      // if model is referenced, but it is not yet persisted = create it
      if (!alreadyPersistedModelIds.contains(idReferencedInJson)) {

        // Check if model actually still exists. Don't create the relationship if it doesn't exist. The client UI will have cope with this too.
        if (modelRepository.exists(idReferencedInJson)) {
          modelRelationRepository.save(new ModelRelation(bpmnProcessModel.getId(), idReferencedInJson, relationshipType));
        }
      }
    }
  }",False
37,createNewModelhistory(Model),Method,"internalCreateNewModelVersion(Model,String,User,boolean) internalSave(String,String,String,String,boolean,String,byte[],User,Model) deleteModel(long,boolean,boolean) internalDeleteModelAndChildren(Model,List<Model>) reviveProcessModelHistory(ModelHistory,User,String)",,com.activiti.domain.editor.ModelHistory+ModelHistory() com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+setCreated(Date) com.activiti.domain.editor.AbstractModel+setCreated(Date) com.activiti.domain.editor.AbstractModel+getCreated() com.activiti.domain.editor.AbstractModel+getCreated() com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+getLastUpdated() com.activiti.domain.editor.AbstractModel+getLastUpdated() com.activiti.domain.editor.AbstractModel+setCreatedBy(String) com.activiti.domain.editor.AbstractModel+setCreatedBy(String) com.activiti.domain.editor.AbstractModel+getCreatedBy() com.activiti.domain.editor.AbstractModel+getCreatedBy() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+getLastUpdatedBy() com.activiti.domain.editor.AbstractModel+getLastUpdatedBy() com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.ModelHistory+setModelId(Long) com.activiti.domain.editor.ModelHistory+setModelId(Long) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+setStencilSetId(Long) com.activiti.domain.editor.AbstractModel+setStencilSetId(Long) com.activiti.domain.editor.AbstractModel+getStencilSetId() com.activiti.domain.editor.AbstractModel+getStencilSetId() com.activiti.domain.editor.AbstractModel+setReferenceId(Long) com.activiti.domain.editor.AbstractModel+setReferenceId(Long) com.activiti.domain.editor.AbstractModel+getReferenceId() com.activiti.domain.editor.AbstractModel+getReferenceId() com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+getComment() com.activiti.domain.editor.AbstractModel+getComment(),,878,19,19886,513,4,,"protected ModelHistory createNewModelhistory(Model model) {
    ModelHistory historyModel = new ModelHistory();
    historyModel.setName(model.getName());
    historyModel.setKey(model.getKey());
    historyModel.setDescription(model.getDescription());
    historyModel.setCreated(model.getCreated());
    historyModel.setLastUpdated(model.getLastUpdated());
    historyModel.setCreatedBy(model.getCreatedBy());
    historyModel.setLastUpdatedBy(model.getLastUpdatedBy());
    historyModel.setModelEditorJson(model.getModelEditorJson());
    historyModel.setModelType(model.getModelType());
    historyModel.setVersion(model.getVersion());
    historyModel.setModelId(model.getId());
    historyModel.setStencilSetId(model.getStencilSetId());
    historyModel.setReferenceId(model.getReferenceId());
    historyModel.setComment(model.getComment());

    return historyModel;
  }",False
38,"populateModelBasedOnHistory(Model,ModelHistory)",Method,"deleteModel(long,boolean,boolean)",,com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+setCreated(Date) com.activiti.domain.editor.AbstractModel+setCreated(Date) com.activiti.domain.editor.AbstractModel+getCreated() com.activiti.domain.editor.AbstractModel+getCreated() com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+getLastUpdated() com.activiti.domain.editor.AbstractModel+getLastUpdated() com.activiti.domain.editor.AbstractModel+setCreatedBy(String) com.activiti.domain.editor.AbstractModel+setCreatedBy(String) com.activiti.domain.editor.AbstractModel+getCreatedBy() com.activiti.domain.editor.AbstractModel+getCreatedBy() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+getLastUpdatedBy() com.activiti.domain.editor.AbstractModel+getLastUpdatedBy() com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+setStencilSetId(Long) com.activiti.domain.editor.AbstractModel+setStencilSetId(Long) com.activiti.domain.editor.AbstractModel+getStencilSetId() com.activiti.domain.editor.AbstractModel+getStencilSetId() com.activiti.domain.editor.AbstractModel+setReferenceId(Long) com.activiti.domain.editor.AbstractModel+setReferenceId(Long) com.activiti.domain.editor.AbstractModel+getReferenceId() com.activiti.domain.editor.AbstractModel+getReferenceId() com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+getComment() com.activiti.domain.editor.AbstractModel+getComment(),,711,15,20768,533,4,,"protected void populateModelBasedOnHistory(Model model, ModelHistory basedOn) {
    model.setName(basedOn.getName());
    model.setKey(basedOn.getKey());
    model.setDescription(basedOn.getDescription());
    model.setCreated(basedOn.getCreated());
    model.setLastUpdated(basedOn.getLastUpdated());
    model.setCreatedBy(basedOn.getCreatedBy());
    model.setLastUpdatedBy(basedOn.getLastUpdatedBy());
    model.setModelEditorJson(basedOn.getModelEditorJson());
    model.setModelType(basedOn.getModelType());
    model.setVersion(basedOn.getVersion());
    model.setStencilSetId(basedOn.getStencilSetId());
    model.setReferenceId(basedOn.getReferenceId());
    model.setComment(basedOn.getComment());
  }",False
39,createDecisionTableMap(JsonNode),Method,"getBpmnModel(AbstractModel,boolean)",,java.util.HashMap+HashMap() org.activiti.editor.language.json.converter.util.JsonConverterUtil+getBpmnProcessModelDecisionTableReferences(JsonNode) org.activiti.editor.language.json.converter.util.JsonConverterUtil+getBpmnProcessModelDecisionTableReferences(JsonNode) org.activiti.editor.language.json.converter.util.JsonConverterUtil.JsonLookupResult+getJsonNode() org.activiti.editor.language.json.converter.util.JsonConverterUtil.JsonLookupResult+getJsonNode() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.service.exception.InternalServerErrorException+InternalServerErrorException(String),com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.service.editor.ModelServiceImpl+objectMapper com.activiti.service.editor.ModelServiceImpl+log,1172,21,21483,549,4,,"protected Map<Long, JsonNode> createDecisionTableMap(JsonNode modelNode) {
    Map<Long, JsonNode> decisionTableMap = new HashMap<Long, JsonNode>();
    for (JsonConverterUtil.JsonLookupResult jsonLookupResult : JsonConverterUtil.getBpmnProcessModelDecisionTableReferences(modelNode)) {
      JsonNode decisionTableReferenceNode = jsonLookupResult.getJsonNode();
      JsonNode decisionTableIdNode = decisionTableReferenceNode.get(""id"");
      if (decisionTableIdNode != null && decisionTableIdNode.isNull() == false) {
        Long decisionTableId = decisionTableIdNode.asLong();
        Model decisionTableModel = modelRepository.findOne(decisionTableId);
        if (decisionTableModel != null) {
          try {
            JsonNode editorJsonNode = objectMapper.readTree(decisionTableModel.getModelEditorJson());
            decisionTableMap.put(decisionTableId, editorJsonNode);
          } catch (Exception e) {
            log.error(""Could not generate editor JSON for decision table "" + decisionTableId, e);
            throw new InternalServerErrorException(""Could not generate BPMN 2.0 xml"");
          }
        }
      }
    }
    return decisionTableMap;
  }",True
40,calculateDiagramSize(BpmnModel),Method,"generateThumbnailImage(Model,ObjectNode)",,"org.activiti.bpmn.model.GraphicInfo+GraphicInfo() org.activiti.bpmn.model.BpmnModel+getPools() org.activiti.bpmn.model.BpmnModel+getPools() org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+setWidth(double) org.activiti.bpmn.model.GraphicInfo+setWidth(double) org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+setHeight(double) org.activiti.bpmn.model.GraphicInfo+setHeight(double) org.activiti.bpmn.model.BpmnModel+getProcesses() org.activiti.bpmn.model.BpmnModel+getProcesses() com.activiti.service.editor.ModelServiceImpl+calculateWidthForFlowElements(Collection<FlowElement>,BpmnModel,GraphicInfo) com.activiti.service.editor.ModelServiceImpl+calculateWidthForFlowElements(Collection<FlowElement>,BpmnModel,GraphicInfo) org.activiti.bpmn.model.Process+getFlowElements() org.activiti.bpmn.model.Process+getFlowElements() com.activiti.service.editor.ModelServiceImpl+calculateWidthForArtifacts(Collection<Artifact>,BpmnModel,GraphicInfo) com.activiti.service.editor.ModelServiceImpl+calculateWidthForArtifacts(Collection<Artifact>,BpmnModel,GraphicInfo) org.activiti.bpmn.model.Process+getArtifacts() org.activiti.bpmn.model.Process+getArtifacts()",,848,22,22659,571,4,,"protected GraphicInfo calculateDiagramSize(BpmnModel bpmnModel) {
    GraphicInfo diagramInfo = new GraphicInfo();

    for (Pool pool : bpmnModel.getPools()) {
      GraphicInfo graphicInfo = bpmnModel.getGraphicInfo(pool.getId());
      double elementMaxX = graphicInfo.getX() + graphicInfo.getWidth();
      double elementMaxY = graphicInfo.getY() + graphicInfo.getHeight();

      if (elementMaxX > diagramInfo.getWidth()) {
        diagramInfo.setWidth(elementMaxX);
      }
      if (elementMaxY > diagramInfo.getHeight()) {
        diagramInfo.setHeight(elementMaxY);
      }
    }

    for (Process process : bpmnModel.getProcesses()) {
      calculateWidthForFlowElements(process.getFlowElements(), bpmnModel, diagramInfo);
      calculateWidthForArtifacts(process.getArtifacts(), bpmnModel, diagramInfo);
    }
    return diagramInfo;
  }",True
41,"scaleDiagram(BpmnModel,double)",Method,"generateThumbnailImage(Model,ObjectNode)",,"org.activiti.bpmn.model.BpmnModel+getPools() org.activiti.bpmn.model.BpmnModel+getPools() org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfo(GraphicInfo,double) com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfo(GraphicInfo,double) org.activiti.bpmn.model.BpmnModel+getProcesses() org.activiti.bpmn.model.BpmnModel+getProcesses() com.activiti.service.editor.ModelServiceImpl+scaleFlowElements(Collection<FlowElement>,BpmnModel,double) com.activiti.service.editor.ModelServiceImpl+scaleFlowElements(Collection<FlowElement>,BpmnModel,double) org.activiti.bpmn.model.Process+getFlowElements() org.activiti.bpmn.model.Process+getFlowElements() com.activiti.service.editor.ModelServiceImpl+scaleArtifacts(Collection<Artifact>,BpmnModel,double) com.activiti.service.editor.ModelServiceImpl+scaleArtifacts(Collection<Artifact>,BpmnModel,double) org.activiti.bpmn.model.Process+getArtifacts() org.activiti.bpmn.model.Process+getArtifacts() org.activiti.bpmn.model.Process+getLanes() org.activiti.bpmn.model.Process+getLanes() com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfo(GraphicInfo,double) com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfo(GraphicInfo,double) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId()",,587,14,23511,594,4,,"protected void scaleDiagram(BpmnModel bpmnModel, double scaleFactor) {
    for (Pool pool : bpmnModel.getPools()) {
      GraphicInfo graphicInfo = bpmnModel.getGraphicInfo(pool.getId());
      scaleGraphicInfo(graphicInfo, scaleFactor);
    }

    for (Process process : bpmnModel.getProcesses()) {
      scaleFlowElements(process.getFlowElements(), bpmnModel, scaleFactor);
      scaleArtifacts(process.getArtifacts(), bpmnModel, scaleFactor);
      for (Lane lane : process.getLanes()) {
        scaleGraphicInfo(bpmnModel.getGraphicInfo(lane.getId()), scaleFactor);
      }
    }
  }",True
42,"calculateWidthForFlowElements(Collection<FlowElement>,BpmnModel,GraphicInfo)",Method,calculateDiagramSize(BpmnModel),,"java.util.ArrayList+ArrayList() org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.util.List+size() java.util.List+size() java.util.List+addAll(Collection) java.util.List+addAll(Collection) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.util.List+add(E) java.util.List+add(E) com.activiti.service.editor.ModelServiceImpl+processGraphicInfoList(List<GraphicInfo>,GraphicInfo) com.activiti.service.editor.ModelServiceImpl+processGraphicInfoList(List<GraphicInfo>,GraphicInfo)",,785,18,24102,609,4,,"protected void calculateWidthForFlowElements(Collection<FlowElement> elementList, BpmnModel bpmnModel, GraphicInfo diagramInfo) {
    for (FlowElement flowElement : elementList) {
      List<GraphicInfo> graphicInfoList = new ArrayList<GraphicInfo>();
      if (flowElement instanceof SequenceFlow) {
        List<GraphicInfo> flowGraphics = bpmnModel.getFlowLocationGraphicInfo(flowElement.getId());
        if (flowGraphics != null && flowGraphics.size() > 0) {
          graphicInfoList.addAll(flowGraphics);
        }
      } else {
        GraphicInfo graphicInfo = bpmnModel.getGraphicInfo(flowElement.getId());
        if (graphicInfo != null) {
          graphicInfoList.add(graphicInfo);
        }
      }

      processGraphicInfoList(graphicInfoList, diagramInfo);
    }
  }",True
43,"calculateWidthForArtifacts(Collection<Artifact>,BpmnModel,GraphicInfo)",Method,calculateDiagramSize(BpmnModel),,"java.util.ArrayList+ArrayList() java.util.List+addAll(Collection) java.util.List+addAll(Collection) org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.util.List+add(E) java.util.List+add(E) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() com.activiti.service.editor.ModelServiceImpl+processGraphicInfoList(List<GraphicInfo>,GraphicInfo) com.activiti.service.editor.ModelServiceImpl+processGraphicInfoList(List<GraphicInfo>,GraphicInfo)",,541,12,24891,628,4,,"protected void calculateWidthForArtifacts(Collection<Artifact> artifactList, BpmnModel bpmnModel, GraphicInfo diagramInfo) {
    for (Artifact artifact : artifactList) {
      List<GraphicInfo> graphicInfoList = new ArrayList<GraphicInfo>();
      if (artifact instanceof Association) {
        graphicInfoList.addAll(bpmnModel.getFlowLocationGraphicInfo(artifact.getId()));
      } else {
        graphicInfoList.add(bpmnModel.getGraphicInfo(artifact.getId()));
      }

      processGraphicInfoList(graphicInfoList, diagramInfo);
    }
  }",True
44,"processGraphicInfoList(List<GraphicInfo>,GraphicInfo)",Method,"calculateWidthForFlowElements(Collection<FlowElement>,BpmnModel,GraphicInfo) calculateWidthForArtifacts(Collection<Artifact>,BpmnModel,GraphicInfo)",,org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+setWidth(double) org.activiti.bpmn.model.GraphicInfo+setWidth(double) org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+setHeight(double) org.activiti.bpmn.model.GraphicInfo+setHeight(double),,513,13,25436,641,4,,"protected void processGraphicInfoList(List<GraphicInfo> graphicInfoList, GraphicInfo diagramInfo) {
    for (GraphicInfo graphicInfo : graphicInfoList) {
      double elementMaxX = graphicInfo.getX() + graphicInfo.getWidth();
      double elementMaxY = graphicInfo.getY() + graphicInfo.getHeight();

      if (elementMaxX > diagramInfo.getWidth()) {
        diagramInfo.setWidth(elementMaxX);
      }
      if (elementMaxY > diagramInfo.getHeight()) {
        diagramInfo.setHeight(elementMaxY);
      }
    }
  }",True
45,"scaleFlowElements(Collection<FlowElement>,BpmnModel,double)",Method,"scaleDiagram(BpmnModel,double) scaleFlowElements(Collection<FlowElement>,BpmnModel,double)",,"java.util.ArrayList+ArrayList() org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.util.List+addAll(Collection) java.util.List+addAll(Collection) java.util.List+add(E) java.util.List+add(E) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfoList(List<GraphicInfo>,double) com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfoList(List<GraphicInfo>,double) com.activiti.service.editor.ModelServiceImpl+scaleFlowElements(Collection<FlowElement>,BpmnModel,double) com.activiti.service.editor.ModelServiceImpl+scaleFlowElements(Collection<FlowElement>,BpmnModel,double) org.activiti.bpmn.model.SubProcess+getFlowElements() org.activiti.bpmn.model.SubProcess+getFlowElements()",,828,20,25953,655,4,,"protected void scaleFlowElements(Collection<FlowElement> elementList, BpmnModel bpmnModel, double scaleFactor) {
    for (FlowElement flowElement : elementList) {
      List<GraphicInfo> graphicInfoList = new ArrayList<GraphicInfo>();
      if (flowElement instanceof SequenceFlow) {
        List<GraphicInfo> flowList = bpmnModel.getFlowLocationGraphicInfo(flowElement.getId());
        if (flowList != null) {
          graphicInfoList.addAll(flowList);
        }
      } else {
        graphicInfoList.add(bpmnModel.getGraphicInfo(flowElement.getId()));
      }

      scaleGraphicInfoList(graphicInfoList, scaleFactor);

      if (flowElement instanceof SubProcess) {
        SubProcess subProcess = (SubProcess) flowElement;
        scaleFlowElements(subProcess.getFlowElements(), bpmnModel, scaleFactor);
      }
    }
  }",True
46,"scaleArtifacts(Collection<Artifact>,BpmnModel,double)",Method,"scaleDiagram(BpmnModel,double)",,"java.util.ArrayList+ArrayList() org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.util.List+addAll(Collection) java.util.List+addAll(Collection) java.util.List+add(E) java.util.List+add(E) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfoList(List<GraphicInfo>,double) com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfoList(List<GraphicInfo>,double)",,613,15,26785,676,4,,"protected void scaleArtifacts(Collection<Artifact> artifactList, BpmnModel bpmnModel, double scaleFactor) {
    for (Artifact artifact : artifactList) {
      List<GraphicInfo> graphicInfoList = new ArrayList<GraphicInfo>();
      if (artifact instanceof Association) {
        List<GraphicInfo> flowList = bpmnModel.getFlowLocationGraphicInfo(artifact.getId());
        if (flowList != null) {
          graphicInfoList.addAll(flowList);
        }
      } else {
        graphicInfoList.add(bpmnModel.getGraphicInfo(artifact.getId()));
      }

      scaleGraphicInfoList(graphicInfoList, scaleFactor);
    }
  }",True
47,"scaleGraphicInfoList(List<GraphicInfo>,double)",Method,"scaleFlowElements(Collection<FlowElement>,BpmnModel,double) scaleArtifacts(Collection<Artifact>,BpmnModel,double)",,"com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfo(GraphicInfo,double) com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfo(GraphicInfo,double)",,206,5,27402,692,4,,"protected void scaleGraphicInfoList(List<GraphicInfo> graphicInfoList, double scaleFactor) {
    for (GraphicInfo graphicInfo : graphicInfoList) {
      scaleGraphicInfo(graphicInfo, scaleFactor);
    }
  }",True
48,"scaleGraphicInfo(GraphicInfo,double)",Method,"scaleDiagram(BpmnModel,double) scaleDiagram(BpmnModel,double) scaleGraphicInfoList(List<GraphicInfo>,double)",,org.activiti.bpmn.model.GraphicInfo+setX(double) org.activiti.bpmn.model.GraphicInfo+setX(double) org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+setY(double) org.activiti.bpmn.model.GraphicInfo+setY(double) org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+setWidth(double) org.activiti.bpmn.model.GraphicInfo+setWidth(double) org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+setHeight(double) org.activiti.bpmn.model.GraphicInfo+setHeight(double) org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getHeight(),,324,6,27612,698,4,,"protected void scaleGraphicInfo(GraphicInfo graphicInfo, double scaleFactor) {
    graphicInfo.setX(graphicInfo.getX() / scaleFactor);
    graphicInfo.setY(graphicInfo.getY() / scaleFactor);
    graphicInfo.setWidth(graphicInfo.getWidth() / scaleFactor);
    graphicInfo.setHeight(graphicInfo.getHeight() / scaleFactor);
  }",True
