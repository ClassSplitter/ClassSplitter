index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,commit,full text,moved,removed
1,testSimpleModel(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",430,14,523,20,1,,"@Test
  public void testSimpleModel() {
    JavaFileObject model = JavaFileObjects
        .forResource(""BasicModelWithAttribute.java"");

    JavaFileObject generatedModel = JavaFileObjects.forResource(""BasicModelWithAttribute_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
2,testModelWithAllFieldTypes(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",439,14,957,35,1,,"@Test
  public void testModelWithAllFieldTypes() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithAllFieldTypes.java"");

    JavaFileObject generatedModel = JavaFileObjects.forResource(""ModelWithAllFieldTypes_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
3,testModelWithConstructors(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",436,14,1400,50,1,,"@Test
  public void testModelWithConstructors() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithConstructors.java"");

    JavaFileObject generatedModel = JavaFileObjects.forResource(""ModelWithConstructors_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
4,testModelWithSuper(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",415,14,1840,65,1,,"@Test
  public void testModelWithSuper() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithSuper.java"");

    JavaFileObject generatedModel = JavaFileObjects.forResource(""ModelWithSuper_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
5,testModelWithFieldAnnotation(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",445,14,2259,80,1,,"@Test
  public void testModelWithFieldAnnotation() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithFieldAnnotation.java"");

    JavaFileObject generatedModel = JavaFileObjects.forResource(""ModelWithFieldAnnotation_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
6,testModelWithSuperClass(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",607,16,2708,95,1,,"@Test
  public void testModelWithSuperClass() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithSuperAttributes.java"");

    JavaFileObject generatedModel = JavaFileObjects.forResource(""ModelWithSuperAttributes_.java"");
    JavaFileObject generatedSubClassModel =
        JavaFileObjects.forResource(""ModelWithSuperAttributes$SubModelWithSuperAttributes_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel, generatedSubClassModel);
  }",False,False
7,testModelWithType(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",412,14,3319,112,1,,"@Test
  public void testModelWithType() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithType.java"");

    JavaFileObject generatedModel = JavaFileObjects.forResource(""ModelWithType_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
8,testModelWithoutHash(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",421,14,3735,127,1,,"@Test
  public void testModelWithoutHash() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithoutHash.java"");

    JavaFileObject generatedModel = JavaFileObjects.forResource(""ModelWithoutHash_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
9,testModelWithFinalAttribute(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",434,14,4160,142,1,,"@Test
  public void testModelWithFinalAttribute() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithFinalField.java"");

    JavaFileObject generatedModel = JavaFileObjects.forResource(""ModelWithFinalField_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
10,testModelWithPrivateAttributeFails(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",325,11,4598,157,1,,"@Test
  public void testModelWithPrivateAttributeFails() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithPrivateField.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .failsToCompile()
        .withErrorContaining(""private"");
  }",False,False
11,testModelWithStaticAttributeFails(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",322,11,4927,169,1,,"@Test
  public void testModelWithStaticAttributeFails() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithStaticField.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .failsToCompile()
        .withErrorContaining(""static"");
  }",False,False
12,testModelWithPrivateClassFails(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",334,11,5253,181,1,,"@Test
  public void testModelWithPrivateClassFails() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithPrivateInnerClass.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .failsToCompile()
        .withErrorContaining(""private classes"");
  }",False,False
13,testModelWithFinalClassFails(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",277,10,5591,193,1,,"@Test
  public void testModelWithFinalClassFails() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithFinalClass.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .failsToCompile();
  }",False,False
14,testModelThatDoesNotExtendEpoxyModelFails(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",341,11,5872,204,1,,"@Test
  public void testModelThatDoesNotExtendEpoxyModelFails() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithoutEpoxyExtension.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .failsToCompile()
        .withErrorContaining(""must extend"");
  }",False,False
15,testModelAsInnerClassFails(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",320,11,6217,216,1,,"@Test
  public void testModelAsInnerClassFails() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelAsInnerClass.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .failsToCompile()
        .withErrorContaining(""Nested classes"");
  }",False,False
16,testModelWithIntDefAnnotation(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",428,14,6541,228,1,,"@Test
  public void testModelWithIntDefAnnotation() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithIntDef.java"");

    JavaFileObject generatedModel = JavaFileObjects.forResource(""ModelWithIntDef_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
17,testModelWithAnnotatedClass(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",442,14,6973,243,1,,"@Test
  public void testModelWithAnnotatedClass() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithAnnotatedClass.java"");

    JavaFileObject generatedModel = JavaFileObjects.forResource(""ModelWithAnnotatedClass_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
18,testModelWithAbstractClass(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",670,21,7419,258,1,,"@Test
  public void testModelWithAbstractClass() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithAbstractClass.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError();

    // We don't generate subclasses if the model is abstract unless it has a class annotation.
    boolean modelNotGenerated;
    try {
      JavaFileObject generatedModel = JavaFileObjects.forResource(""ModelWithAbstractClass_.java"");
      modelNotGenerated = false;
    } catch (IllegalArgumentException e) {
      modelNotGenerated = true;
    }

    assertTrue(modelNotGenerated);
  }",False,False
19,testModelWithAbstractClassAndAnnotation(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",486,15,8093,280,1,,"@Test
  public void testModelWithAbstractClassAndAnnotation() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithAbstractClassAndAnnotation.java"");

    JavaFileObject generatedModel =
        JavaFileObjects.forResource(""ModelWithAbstractClassAndAnnotation_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
20,testModelWithAnnotatedClassAndSuperClass(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",718,18,8583,296,1,,"@Test
  public void testModelWithAnnotatedClassAndSuperClass() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithAnnotatedClassAndSuperAttributes.java"");

    JavaFileObject generatedModel = JavaFileObjects
        .forResource(""ModelWithAnnotatedClassAndSuperAttributes_.java"");
    JavaFileObject generatedSubClassModel =
        JavaFileObjects.forResource(""ModelWithAnnotatedClassAndSuperAttributes$SubModel""
            + ""WithAnnotatedClassAndSuperAttributes_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel, generatedSubClassModel);
  }",False,False
21,testModelWithoutSetter(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",427,14,9305,315,1,,"@Test
  public void testModelWithoutSetter() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithoutSetter.java"");

    JavaFileObject generatedModel = JavaFileObjects.forResource(""ModelWithoutSetter_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
22,testModelReturningClassType(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",442,14,9736,330,1,,"@Test
  public void testModelReturningClassType() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelReturningClassType.java"");

    JavaFileObject generatedModel = JavaFileObjects.forResource(""ModelReturningClassType_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
23,testModelReturningClassTypeWithVarargs(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",484,15,10182,345,1,,"@Test
  public void testModelReturningClassTypeWithVarargs() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelReturningClassTypeWithVarargs.java"");

    JavaFileObject generatedModel = JavaFileObjects
        .forResource(""ModelReturningClassTypeWithVarargs_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
24,testModelWithVarargsConstructors(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",466,15,10670,361,1,,"@Test
  public void testModelWithVarargsConstructors() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelWithVarargsConstructors.java"");

    JavaFileObject generatedModel = JavaFileObjects
        .forResource(""ModelWithVarargsConstructors_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
25,testModelWithHolderGeneratesNewHolderMethod(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",467,15,11140,377,1,,"@Test
  public void testModelWithHolderGeneratesNewHolderMethod() {
    JavaFileObject model = JavaFileObjects
        .forResource(""AbstractModelWithHolder.java"");

    JavaFileObject generatedModel = JavaFileObjects
        .forResource(""AbstractModelWithHolder_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
26,testGenerateDefaultLayoutMethod(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",463,15,11611,393,1,,"@Test
  public void testGenerateDefaultLayoutMethod() {
    JavaFileObject model = JavaFileObjects
        .forResource(""GenerateDefaultLayoutMethod.java"");

    JavaFileObject generatedModel = JavaFileObjects
        .forResource(""GenerateDefaultLayoutMethod_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedModel);
  }",False,False
27,testGenerateDefaultLayoutMethodFailsIfLayoutNotSpecified(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",396,11,12078,409,1,,"@Test
  public void testGenerateDefaultLayoutMethodFailsIfLayoutNotSpecified() {
    JavaFileObject model = JavaFileObjects
        .forResource(""GenerateDefaultLayoutMethodNoLayout.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .failsToCompile()
        .withErrorContaining(""Model must specify a valid layout resource"");
  }",False,False
28,testGeneratedDefaultMethodWithLayoutSpecifiedInParent(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",703,17,12478,421,1,,"@Test
  public void testGeneratedDefaultMethodWithLayoutSpecifiedInParent() {
    JavaFileObject model = JavaFileObjects
        .forResource(""GenerateDefaultLayoutMethodParentLayout.java"");

    JavaFileObject generatedNoLayoutModel = JavaFileObjects
        .forResource(""GenerateDefaultLayoutMethodParentLayout$NoLayout_.java"");
    JavaFileObject generatedWithLayoutModel =
        JavaFileObjects.forResource(""GenerateDefaultLayoutMethodParentLayout$WithLayout_.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedNoLayoutModel, generatedWithLayoutModel);
  }",False,False
29,testGeneratedDefaultMethodWithLayoutSpecifiedInNextParent(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",911,20,13185,439,1,,"@Test
  public void testGeneratedDefaultMethodWithLayoutSpecifiedInNextParent() {
    JavaFileObject model = JavaFileObjects
        .forResource(""GenerateDefaultLayoutMethodNextParentLayout.java"");

    JavaFileObject generatedNoLayoutModel = JavaFileObjects
        .forResource(""GenerateDefaultLayoutMethodNextParentLayout$NoLayout.java"");
    JavaFileObject generatedStillNoLayoutModel = JavaFileObjects
        .forResource(""GenerateDefaultLayoutMethodNextParentLayout$StillNoLayout.java"");
    JavaFileObject generatedWithLayoutModel =
        JavaFileObjects.forResource(""GenerateDefaultLayoutMethodNextParentLayout$WithLayout.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(generatedNoLayoutModel, generatedStillNoLayoutModel,
            generatedWithLayoutModel);
  }",False,False
30,testGeneratedDefaultMethodWithLayoutFailsIfNotSpecifiedInParent(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",414,11,14100,460,1,,"@Test
  public void testGeneratedDefaultMethodWithLayoutFailsIfNotSpecifiedInParent() {
    JavaFileObject model = JavaFileObjects
        .forResource(""GenerateDefaultLayoutMethodParentStillNoLayout.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .failsToCompile()
        .withErrorContaining(""Model must specify a valid layout resource"");
  }",False,False
31,testConfigDeclaredTwiceFails(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",368,11,14518,472,1,,"@Test
  public void testConfigDeclaredTwiceFails() {
    JavaFileObject configClass = JavaFileObjects
        .forResource(""ClassWithTwoConfigs.java"");

    assert_().about(javaSource())
        .that(configClass)
        .processedWith(new EpoxyProcessor())
        .failsToCompile()
        .withErrorContaining(""Epoxy config can only be used once per project"");
  }",False,False
32,testConfigRequireHashCode(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",362,11,14890,484,1,,"@Test
  public void testConfigRequireHashCode() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelRequiresHashCodeFailsBasicObject.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .failsToCompile()
        .withErrorContaining(""Attribute does not implement hashCode"");
  }",True,True
33,testConfigRequireHashCodeIterableFails(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",379,11,15256,496,1,,"@Test
  public void testConfigRequireHashCodeIterableFails() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelRequiresHashCodeIterableFails.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .failsToCompile()
        .withErrorContaining(""Type in Iterable does not implement hashCode"");
  }",True,True
34,testConfigRequireHashCodeIterablePasses(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",312,10,15639,508,1,,"@Test
  public void testConfigRequireHashCodeIterablePasses() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelRequiresHashCodeIterableSucceeds.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError();
  }",True,True
35,testConfigRequireHashCodeArrayFails(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",370,11,15955,519,1,,"@Test
  public void testConfigRequireHashCodeArrayFails() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelRequiresHashCodeArrayFails.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .failsToCompile()
        .withErrorContaining(""Type in array does not implement hashCode"");
  }",True,True
36,testConfigRequireHashCodeArrayPasses(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",306,10,16329,531,1,,"@Test
  public void testConfigRequireHashCodeArrayPasses() {
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelRequiresHashCodeArraySucceeds.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError();
  }",True,True
37,testConfigRequireHashCodeEnumAttributePasses(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",376,11,16639,542,1,,"@Test
  public void testConfigRequireHashCodeEnumAttributePasses() {
    // Verify that enum attributes pass the hashcode requirement
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelRequiresHashCodeEnumPasses.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError();
  }",True,True
38,testConfigRequireHashCodeAutoValueAttributePasses(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",402,11,17019,554,1,,"@Test
  public void testConfigRequireHashCodeAutoValueAttributePasses() {
    // Verify that AutoValue class attributes pass the hashcode requirement
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelRequiresHashCodeAutoValueClassPasses.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError();
  }",True,True
39,testConfigRequireHashCodeCharSequencePasses(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",399,11,17425,566,1,,"@Test
  public void testConfigRequireHashCodeCharSequencePasses() {
    // Verify that AutoValue class attributes pass the hashcode requirement
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelConfigRequireHashCodeCharSequencePasses.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError();
  }",True,True
40,testConfigRequireHashCodeInterfaceWithHashCodePasses(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",417,11,17828,578,1,,"@Test
  public void testConfigRequireHashCodeInterfaceWithHashCodePasses() {
    // Verify that AutoValue class attributes pass the hashcode requirement
    JavaFileObject model = JavaFileObjects
        .forResource(""ModelConfigRequireHashCodeInterfaceWithHashCodePasses.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError();
  }",True,True
41,testConfigRequireAbstractModelPassesClassWithAttribute(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",410,11,18249,590,1,,"@Test
  public void testConfigRequireAbstractModelPassesClassWithAttribute() {
    // Verify that AutoValue class attributes pass the hashcode requirement
    JavaFileObject model = JavaFileObjects
        .forResource(""RequireAbstractModelPassesClassWithAttribute.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError();
  }",True,True
42,testConfigRequireAbstractModelFailsClassWithAttribute(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",528,13,18663,602,1,,"@Test
  public void testConfigRequireAbstractModelFailsClassWithAttribute() {
    // Verify that AutoValue class attributes pass the hashcode requirement
    JavaFileObject model = JavaFileObjects
        .forResource(""RequireAbstractModelFailsClassWithAttribute.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .failsToCompile()
        .withErrorContaining(
            ""Epoxy model class must be abstract (RequireAbstractModelFailsClassWithAttribute)"");
  }",True,True
43,testConfigRequireAbstractModelPassesEpoxyModelClass(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",404,11,19195,616,1,,"@Test
  public void testConfigRequireAbstractModelPassesEpoxyModelClass() {
    // Verify that AutoValue class attributes pass the hashcode requirement
    JavaFileObject model = JavaFileObjects
        .forResource(""RequireAbstractModelPassesEpoxyModelClass.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .compilesWithoutError();
  }",True,True
44,testConfigRequireAbstractModelFailsEpoxyModelClass(),Method,"""","""","com.airbnb.epoxy.EpoxyProcessor+EpoxyProcessor()""","""",519,13,19603,628,1,,"@Test
  public void testConfigRequireAbstractModelFailsEpoxyModelClass() {
    // Verify that AutoValue class attributes pass the hashcode requirement
    JavaFileObject model = JavaFileObjects
        .forResource(""RequireAbstractModelFailsEpoxyModelClass.java"");

    assert_().about(javaSource())
        .that(model)
        .processedWith(new EpoxyProcessor())
        .failsToCompile()
        .withErrorContaining(
            ""Epoxy model class must be abstract (RequireAbstractModelFailsEpoxyModelClass)"");
  }",True,True
