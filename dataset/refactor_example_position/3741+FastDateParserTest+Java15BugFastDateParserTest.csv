index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,commit,full text,moved,removed
1,Expected1806,Field,"""","""","""","""",25,1,1782,48,2,,private enum Expected1806,False,False
2,"Expected1806(TimeZone,String,String,String,boolean)",Method,"""","""","""","""",312,7,2116,59,0,,"Expected1806(final TimeZone zone, final String one, final String two, final String three, final boolean hasHalfHourOffset) {
            this.zone = zone;
            this.one = one;
            this.two = two;
            this.three = three;
            this.offset = hasHalfHourOffset ?30*60*1000 :0;
        }",False,False
3,SHORT_FORMAT_NOERA,Field,"""","""","""","""",67,1,2439,67,26,,"private static final String SHORT_FORMAT_NOERA = ""y/M/d/h/a/m/s/E"";",False,False
4,LONG_FORMAT_NOERA,Field,"""","""","""","""",88,1,2511,68,26,,"private static final String LONG_FORMAT_NOERA = ""yyyy/MMMM/dddd/hhhh/mmmm/ss/aaaa/EEEE"";",False,False
5,SHORT_FORMAT,Field,"""","""","""","""",69,1,2604,69,26,,"private static final String SHORT_FORMAT = ""G/"" + SHORT_FORMAT_NOERA;",False,False
6,LONG_FORMAT,Field,"""","""","""","""",70,1,2679,71,26,,"private static final String LONG_FORMAT = ""GGGG/"" + LONG_FORMAT_NOERA;",False,False
7,yMdHmsSZ,Field,"""","""","""","""",69,1,2754,72,26,,"private static final String yMdHmsSZ = ""yyyy-MM-dd'T'HH:mm:ss.SSS Z"";",False,False
8,DMY_DOT,Field,"""","""","""","""",51,1,2828,73,26,,"private static final String DMY_DOT = ""dd.MM.yyyy"";",False,False
9,YMD_SLASH,Field,"""","""","""","""",53,1,2884,74,26,,"private static final String YMD_SLASH = ""yyyy/MM/dd"";",False,False
10,MDY_DASH,Field,"""","""","""","""",52,1,2942,75,26,,"private static final String MDY_DASH = ""MM-DD-yyyy"";",False,False
11,MDY_SLASH,Field,"""","""","""","""",53,1,3000,77,26,,"private static final String MDY_SLASH = ""MM/DD/yyyy"";",False,False
12,REYKJAVIK,Field,"""","""","""","""",85,1,3058,78,26,,"private static final TimeZone REYKJAVIK = TimeZone.getTimeZone(""Atlantic/Reykjavik"");",False,False
13,NEW_YORK,Field,"""","""","""","""",82,1,3148,79,26,,"private static final TimeZone NEW_YORK = TimeZone.getTimeZone(""America/New_York"");",False,False
14,GMT,Field,"""","""","""","""",64,1,3235,80,26,,"private static final TimeZone GMT = TimeZone.getTimeZone(""GMT"");",False,False
15,INDIA,Field,"""","""","""","""",76,1,3305,82,26,,"private static final TimeZone INDIA = TimeZone.getTimeZone(""Asia/Calcutta"");",False,False
16,SWEDEN,Field,"""","""","""","""",60,1,3387,84,26,,"private static final Locale SWEDEN = new Locale(""sv"", ""SE"");",False,False
17,initializeCalendar(TimeZone),Method,"test1806()""","""","java.util.Calendar+getInstance(TimeZone) java.util.Calendar+getInstance(TimeZone) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int)""","java.util.Calendar+YEAR java.util.Calendar+MONTH java.util.Calendar+DAY_OF_MONTH java.util.Calendar+HOUR_OF_DAY java.util.Calendar+MINUTE java.util.Calendar+SECOND java.util.Calendar+MILLISECOND""",447,11,3453,86,10,,"private static Calendar initializeCalendar(final TimeZone tz) {
        final Calendar cal = Calendar.getInstance(tz);
        cal.set(Calendar.YEAR, 2001);
        cal.set(Calendar.MONTH, 1); // not daylight savings
        cal.set(Calendar.DAY_OF_MONTH, 4);
        cal.set(Calendar.HOUR_OF_DAY, 12);
        cal.set(Calendar.MINUTE, 8);
        cal.set(Calendar.SECOND, 56);
        cal.set(Calendar.MILLISECOND, 235);
        return cal;
    }",False,False
18,"checkParse(Locale,Calendar,SimpleDateFormat,DateParser)",Method,"testJpLocales() testLocales(String,boolean)""","""","java.text.DateFormat+format(Date) java.text.DateFormat+format(Date) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.FastDateParserTest+checkParse(Locale,SimpleDateFormat,DateParser,String) org.apache.commons.lang3.time.FastDateParserTest+checkParse(Locale,SimpleDateFormat,DateParser,String) org.apache.commons.lang3.time.FastDateParserTest+checkParse(Locale,SimpleDateFormat,DateParser,String) org.apache.commons.lang3.time.FastDateParserTest+checkParse(Locale,SimpleDateFormat,DateParser,String) java.lang.String+toLowerCase(Locale) java.lang.String+toLowerCase(Locale) org.apache.commons.lang3.time.FastDateParserTest+checkParse(Locale,SimpleDateFormat,DateParser,String) org.apache.commons.lang3.time.FastDateParserTest+checkParse(Locale,SimpleDateFormat,DateParser,String) java.lang.String+toUpperCase(Locale) java.lang.String+toUpperCase(Locale)""","""",406,6,3906,98,2,,"private void checkParse(final Locale locale, final Calendar cal, final SimpleDateFormat sdf, final DateParser fdf) throws ParseException {
        final String formattedDate= sdf.format(cal.getTime());
        checkParse(locale, sdf, fdf, formattedDate);
        checkParse(locale, sdf, fdf, formattedDate.toLowerCase(locale));
        checkParse(locale, sdf, fdf, formattedDate.toUpperCase(locale));
    }",False,False
19,"checkParse(Locale,SimpleDateFormat,DateParser,String)",Method,"checkParse(Locale,Calendar,SimpleDateFormat,DateParser) checkParse(Locale,Calendar,SimpleDateFormat,DateParser) checkParse(Locale,Calendar,SimpleDateFormat,DateParser)""","""","java.text.DateFormat+parse(String) java.text.DateFormat+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","""",559,9,4318,105,2,,"private void checkParse(final Locale locale, final SimpleDateFormat sdf, final DateParser fdf, final String formattedDate) throws ParseException {
        try {
            final Date expectedTime = sdf.parse(formattedDate);
            final Date actualTime = fdf.parse(formattedDate);
            assertEquals(expectedTime, actualTime, ""locale : "" + locale + "" formattedDate : "" + formattedDate + ""\n"");
        } catch (Exception e) {
            fail(""locale : "" + locale + "" formattedDate : "" + formattedDate + "" error : "" + e + ""\n"", e);
        }
    }",False,False
20,"getDateInstance(int,Locale)",Method,"testShortDateStyleWithLocales() testShortDateStyleWithLocales()""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FormatCache+getPatternForStyle(Integer,Integer,Locale) org.apache.commons.lang3.time.FormatCache+getPatternForStyle(Integer,Integer,Locale) java.lang.Integer+valueOf(int) java.lang.Integer+valueOf(int) java.util.TimeZone+getDefault() java.util.TimeZone+getDefault() java.util.Locale+getDefault() java.util.Locale+getDefault()""","""",230,3,4883,115,2,,"private DateParser getDateInstance(final int dateStyle, final Locale locale) {
        return getInstance(FormatCache.getPatternForStyle(Integer.valueOf(dateStyle), null, locale), TimeZone.getDefault(), Locale.getDefault());
    }",False,False
21,"getEraStart(int,TimeZone,Locale)",Method,"testParses()""","""","java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Locale+equals(Object) java.util.Locale+equals(Object) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int)""","org.apache.commons.lang3.time.FastDateParser+JAPANESE_IMPERIAL java.util.Calendar+ERA java.util.Calendar+YEAR java.util.Calendar+ERA java.util.GregorianCalendar+BC java.util.Calendar+YEAR""",695,19,5119,119,2,,"private Calendar getEraStart(int year, final TimeZone zone, final Locale locale) {
        final Calendar cal = Calendar.getInstance(zone, locale);
        cal.clear();

        // http://docs.oracle.com/javase/6/docs/technotes/guides/intl/calendar.doc.html
        if (locale.equals(FastDateParser.JAPANESE_IMPERIAL)) {
            if (year < 1868) {
                cal.set(Calendar.ERA, 0);
                cal.set(Calendar.YEAR, 1868-year);
            }
        } else {
            if (year < 0) {
                cal.set(Calendar.ERA, GregorianCalendar.BC);
                year= -year;
            }
            cal.set(Calendar.YEAR, year/100 * 100);
        }
        return cal;
    }",False,False
22,getInstance(String),Method,"testDayNumberOfWeek() testEquals() testEquals() testLang303() testLowYearPadding() testMilleniumBug() testParseOffset() testPatternMatches() testToStringContainsName()""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) java.util.TimeZone+getDefault() java.util.TimeZone+getDefault() java.util.Locale+getDefault() java.util.Locale+getDefault()""","""",131,3,5820,139,0,,"DateParser getInstance(final String format) {
        return getInstance(format, TimeZone.getDefault(), Locale.getDefault());
    }",False,False
23,"getInstance(String,Locale)",Method,"test1806() test1806() test1806() testJpLocales() testLocaleMatches() testLocales(String,boolean)""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) java.util.TimeZone+getDefault() java.util.TimeZone+getDefault()""","""",147,3,5957,143,2,,"private DateParser getInstance(final String format, final Locale locale) {
        return getInstance(format, TimeZone.getDefault(), locale);
    }",False,False
24,"getInstance(String,TimeZone)",Method,"testLang538() testTimeZoneMatches()""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) java.util.Locale+getDefault() java.util.Locale+getDefault()""","""",151,3,6110,147,2,,"private DateParser getInstance(final String format, final TimeZone timeZone) {
        return getInstance(format, timeZone, Locale.getDefault());
    }",False,False
25,"getInstance(String,TimeZone,Locale)",Method,"getDateInstance(int,Locale) getInstance(String) getInstance(String,Locale) getInstance(String,TimeZone) test_Equality_Hash() test_Equality_Hash() test_Equality_Hash() test_Equality_Hash() test_Equality_Hash() test_Equality_Hash() test_Equality_Hash() testAmPm() testAmPm() testAmPm() testAmPm() testDayOf() testLang1121() testLang1380() testLang996() testParseLongShort() testParseLongShort() testParseNumerics() testParseZone() testQuotes() testSdfAndFdp(String,String,boolean)""","""","org.apache.commons.lang3.time.FastDateParser+FastDateParser(String,TimeZone,Locale,Date)""","""",476,12,6267,160,4,"/** 
 * Override this method in derived tests to change the construction of instances
 * @param format the format string to use
 * @param timeZone the time zone to use
 * @param locale the locale to use
 * @return the DateParser instance to use for testing
 */
","/**
     * Override this method in derived tests to change the construction of instances
     *
     * @param format the format string to use
     * @param timeZone the time zone to use
     * @param locale the locale to use
     *
     * @return the DateParser instance to use for testing
     */
    protected DateParser getInstance(final String format, final TimeZone timeZone, final Locale locale) {
        return new FastDateParser(format, timeZone, locale, null);
    }",False,False
26,java15BuggyLocaleTest(),Method,"""","""","java.util.Locale+getAvailableLocales() java.util.Locale+getAvailableLocales() java.lang.String+equals(Object) java.lang.String+equals(Object) java.util.Locale+toString() java.util.Locale+toString() org.apache.commons.lang3.time.FastDateParserTest+testSingleLocale(Locale) org.apache.commons.lang3.time.FastDateParserTest+testSingleLocale(Locale)""","""",481,15,6749,165,1,,"@Test
    public void java15BuggyLocaleTest() throws ParseException {
        final String buggyLocaleName = ""ff_LR_#Adlm"";
        Locale buggyLocale = null;
        for (final Locale locale : Locale.getAvailableLocales()) {
            if (buggyLocaleName.equals(locale.toString())) {
                buggyLocale = locale;
                break;
            }
        }
        if (buggyLocale == null) {
            return;
        }
        testSingleLocale(buggyLocale);
    }",True,True
27,java15BuggyLocaleTestAll(),Method,"""","""","java.util.Locale+getAvailableLocales() java.util.Locale+getAvailableLocales() org.apache.commons.lang3.time.FastDateParserTest+testSingleLocale(Locale) org.apache.commons.lang3.time.FastDateParserTest+testSingleLocale(Locale)""","""",193,6,7236,181,1,,"@Test
    public void java15BuggyLocaleTestAll() throws ParseException {
        for (final Locale locale : Locale.getAvailableLocales()) {
            testSingleLocale(locale);
        }
    }",True,True
28,test_Equality_Hash(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) java.util.Map+put(K,V) java.util.Map+put(K,V) java.lang.Integer+valueOf(int) java.lang.Integer+valueOf(int) java.lang.Integer+intValue() java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Integer+intValue()""","org.apache.commons.lang3.time.FastDateParserTest+yMdHmsSZ org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US org.apache.commons.lang3.time.FastDateParserTest+DMY_DOT org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US org.apache.commons.lang3.time.FastDateParserTest+YMD_SLASH org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US org.apache.commons.lang3.time.FastDateParserTest+MDY_DASH org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US org.apache.commons.lang3.time.FastDateParserTest+MDY_SLASH org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US org.apache.commons.lang3.time.FastDateParserTest+MDY_SLASH org.apache.commons.lang3.time.FastDateParserTest+REYKJAVIK java.util.Locale+US org.apache.commons.lang3.time.FastDateParserTest+MDY_SLASH org.apache.commons.lang3.time.FastDateParserTest+REYKJAVIK org.apache.commons.lang3.time.FastDateParserTest+SWEDEN""",813,23,7435,188,1,,"@Test
    public void test_Equality_Hash() {
        final DateParser[] parsers= {
            getInstance(yMdHmsSZ, NEW_YORK, Locale.US),
            getInstance(DMY_DOT, NEW_YORK, Locale.US),
            getInstance(YMD_SLASH, NEW_YORK, Locale.US),
            getInstance(MDY_DASH, NEW_YORK, Locale.US),
            getInstance(MDY_SLASH, NEW_YORK, Locale.US),
            getInstance(MDY_SLASH, REYKJAVIK, Locale.US),
            getInstance(MDY_SLASH, REYKJAVIK, SWEDEN)
        };

        final Map<DateParser, Integer> map= new HashMap<>();
        int i= 0;
        for (final DateParser parser:parsers) {
            map.put(parser, Integer.valueOf(i++));
        }

        i= 0;
        for (final DateParser parser:parsers) {
            assertEquals(i++, map.get(parser).intValue());
        }
    }",False,False
29,test1806(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+initializeCalendar(TimeZone) org.apache.commons.lang3.time.FastDateParserTest+initializeCalendar(TimeZone) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,Locale) java.util.Date+getTime() java.util.Calendar+getTime() java.util.Calendar+getTime() java.util.Date+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,Locale) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,Locale) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateParserTest+Expected1806""",916,20,8255,213,1,,"@Test
    public void test1806() throws ParseException {
        final String formatStub = ""yyyy-MM-dd'T'HH:mm:ss.SSS"";
        final String dateStub = ""2001-02-04T12:08:56.235"";

        for (final Expected1806 trial : Expected1806.values()) {
            final Calendar cal = initializeCalendar(trial.zone);

            final String message = trial.zone.getDisplayName()+"";"";

            DateParser parser = getInstance(formatStub+""X"", trial.zone);
            assertEquals(cal.getTime().getTime(), parser.parse(dateStub+trial.one).getTime()-trial.offset, message+trial.one);

            parser = getInstance(formatStub+""XX"", trial.zone);
            assertEquals(cal.getTime(), parser.parse(dateStub+trial.two), message+trial.two);

            parser = getInstance(formatStub+""XXX"", trial.zone);
            assertEquals(cal.getTime(), parser.parse(dateStub+trial.three), message+trial.three);
        }
    }",False,False
30,test1806Argument(),Method,"""","""","""","""",129,4,9177,234,1,,"@Test
    public void test1806Argument() {
        assertThrows(IllegalArgumentException.class, () -> getInstance(""XXXX""));
    }",False,False
31,testAmPm(),Method,"""","""","java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+clear() java.util.Calendar+clear() org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US java.util.Calendar+AUGUST java.util.Calendar+AUGUST java.util.Calendar+AUGUST java.util.Calendar+AUGUST""",1847,34,9312,239,1,,"@Test
    public void testAmPm() throws ParseException {
        final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);
        cal.clear();

        final DateParser h = getInstance(""yyyy-MM-dd hh a mm:ss"", NEW_YORK, Locale.US);
        final DateParser K = getInstance(""yyyy-MM-dd KK a mm:ss"", NEW_YORK, Locale.US);
        final DateParser k = getInstance(""yyyy-MM-dd kk:mm:ss"", NEW_YORK, Locale.US);
        final DateParser H = getInstance(""yyyy-MM-dd HH:mm:ss"", NEW_YORK, Locale.US);

        cal.set(2010, Calendar.AUGUST, 1, 0, 33, 20);
        assertEquals(cal.getTime(), h.parse(""2010-08-01 12 AM 33:20""));
        assertEquals(cal.getTime(), K.parse(""2010-08-01 0 AM 33:20""));
        assertEquals(cal.getTime(), k.parse(""2010-08-01 00:33:20""));
        assertEquals(cal.getTime(), H.parse(""2010-08-01 00:33:20""));

        cal.set(2010, Calendar.AUGUST, 1, 3, 33, 20);
        assertEquals(cal.getTime(), h.parse(""2010-08-01 3 AM 33:20""));
        assertEquals(cal.getTime(), K.parse(""2010-08-01 3 AM 33:20""));
        assertEquals(cal.getTime(), k.parse(""2010-08-01 03:33:20""));
        assertEquals(cal.getTime(), H.parse(""2010-08-01 03:33:20""));

        cal.set(2010, Calendar.AUGUST, 1, 15, 33, 20);
        assertEquals(cal.getTime(), h.parse(""2010-08-01 3 PM 33:20""));
        assertEquals(cal.getTime(), K.parse(""2010-08-01 3 PM 33:20""));
        assertEquals(cal.getTime(), k.parse(""2010-08-01 15:33:20""));
        assertEquals(cal.getTime(), H.parse(""2010-08-01 15:33:20""));

        cal.set(2010, Calendar.AUGUST, 1, 12, 33, 20);
        assertEquals(cal.getTime(), h.parse(""2010-08-01 12 PM 33:20""));
        assertEquals(cal.getTime(), K.parse(""2010-08-01 0 PM 33:20""));
        assertEquals(cal.getTime(), k.parse(""2010-08-01 12:33:20""));
        assertEquals(cal.getTime(), H.parse(""2010-08-01 12:33:20""));
    }",False,False
32,testDayNumberOfWeek(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+setTime(Date) java.util.Calendar+setTime(Date) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+setTime(Date) java.util.Calendar+setTime(Date) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+setTime(Date) java.util.Calendar+setTime(Date) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+get(int) java.util.Calendar+get(int)""","java.util.Calendar+MONDAY java.util.Calendar+DAY_OF_WEEK java.util.Calendar+SATURDAY java.util.Calendar+DAY_OF_WEEK java.util.Calendar+SUNDAY java.util.Calendar+DAY_OF_WEEK""",548,14,11165,274,1,,"@Test
    public void testDayNumberOfWeek() throws ParseException {
        final DateParser parser = getInstance(""u"");
        final Calendar calendar = Calendar.getInstance();

        calendar.setTime(parser.parse(""1""));
        assertEquals(Calendar.MONDAY, calendar.get(Calendar.DAY_OF_WEEK));

        calendar.setTime(parser.parse(""6""));
        assertEquals(Calendar.SATURDAY, calendar.get(Calendar.DAY_OF_WEEK));

        calendar.setTime(parser.parse(""7""));
        assertEquals(Calendar.SUNDAY, calendar.get(Calendar.DAY_OF_WEEK));
    }",False,False
33,testDayOf(),Method,"""","""","java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US java.util.Calendar+FEBRUARY org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US""",343,9,11719,289,1,,"@Test
    public void testDayOf() throws ParseException {
        final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);
        cal.clear();
        cal.set(2003, Calendar.FEBRUARY, 10);

        final DateParser fdf = getInstance(""W w F D y"", NEW_YORK, Locale.US);
        assertEquals(cal.getTime(), fdf.parse(""3 7 2 41 03""));
    }",False,False
34,testEquals(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) java.lang.Object+hashCode() java.lang.Object+hashCode() java.lang.Object+hashCode() java.lang.Object+hashCode() java.lang.Object+Object()""","org.apache.commons.lang3.time.FastDateParserTest+YMD_SLASH org.apache.commons.lang3.time.FastDateParserTest+YMD_SLASH""",310,10,12068,299,1,,"@Test
    public void testEquals() {
        final DateParser parser1= getInstance(YMD_SLASH);
        final DateParser parser2= getInstance(YMD_SLASH);

        assertEquals(parser1, parser2);
        assertEquals(parser1.hashCode(), parser2.hashCode());

        assertNotEquals(parser1, new Object());
    }",False,False
35,testJpLocales(),Method,"""","""","java.util.Calendar+getInstance(TimeZone) java.util.Calendar+getInstance(TimeZone) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) org.apache.commons.lang3.LocaleUtils+toLocale(String) org.apache.commons.lang3.LocaleUtils+toLocale(String) java.text.SimpleDateFormat+SimpleDateFormat(String,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,Locale) org.apache.commons.lang3.time.FastDateParserTest+checkParse(Locale,Calendar,SimpleDateFormat,DateParser) org.apache.commons.lang3.time.FastDateParserTest+checkParse(Locale,Calendar,SimpleDateFormat,DateParser)""","org.apache.commons.lang3.time.FastDateParserTest+GMT java.util.Calendar+FEBRUARY java.util.Calendar+ERA java.util.GregorianCalendar+BC org.apache.commons.lang3.time.FastDateParserTest+LONG_FORMAT org.apache.commons.lang3.time.FastDateParserTest+LONG_FORMAT""",637,17,12384,310,1,,"@Test
    public void testJpLocales() throws ParseException {

        final Calendar cal= Calendar.getInstance(GMT);
        cal.clear();
        cal.set(2003, Calendar.FEBRUARY, 10);
        cal.set(Calendar.ERA, GregorianCalendar.BC);

        final Locale locale = LocaleUtils.toLocale(""zh"");
        // ja_JP_JP cannot handle dates before 1868 properly

        final SimpleDateFormat sdf = new SimpleDateFormat(LONG_FORMAT, locale);
        final DateParser fdf = getInstance(LONG_FORMAT, locale);

        // If parsing fails, a ParseException will be thrown and the test will fail
        checkParse(locale, cal, sdf, fdf);
    }",False,False
36,testLANG_831(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean)""","""",107,4,13027,328,1,,"@Test
    public void testLANG_831() throws Exception {
        testSdfAndFdp(""M E"", ""3  Tue"", true);
    }",False,False
37,testLANG_832(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean)""","""",191,5,13140,333,1,,"@Test
    public void testLANG_832() throws Exception {
        testSdfAndFdp(""'d'd"", ""d3"", false); // OK
        testSdfAndFdp(""'d'd'"", ""d3"", true); // should fail (unterminated quote)
    }",False,False
38,testLang1121(),Method,"""","""","java.util.TimeZone+getTimeZone(String) java.util.TimeZone+getTimeZone(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() java.text.SimpleDateFormat+SimpleDateFormat(String,Locale) java.text.DateFormat+setTimeZone(TimeZone) java.text.DateFormat+setTimeZone(TimeZone) java.text.DateFormat+parse(String) java.text.DateFormat+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","java.util.Locale+KOREA java.util.Locale+KOREA java.util.Locale+KOREA""",844,23,13337,339,1,,"@Test
    public void testLang1121() throws ParseException {
        final TimeZone kst = TimeZone.getTimeZone(""KST"");
        final DateParser fdp = getInstance(""yyyyMMdd"", kst, Locale.KOREA);

        assertThrows(ParseException.class, () -> fdp.parse(""2015""));

        // Wed Apr 29 00:00:00 KST 2015
        Date actual = fdp.parse(""20150429"");
        final Calendar cal = Calendar.getInstance(kst, Locale.KOREA);
        cal.clear();
        cal.set(2015, 3, 29);
        Date expected = cal.getTime();
        assertEquals(expected, actual);

        final SimpleDateFormat df = new SimpleDateFormat(""yyyyMMdd"", Locale.KOREA);
        df.setTimeZone(kst);
        expected = df.parse(""20150429113100"");

        // Thu Mar 16 00:00:00 KST 81724
        actual = fdp.parse(""20150429113100"");
        assertEquals(expected, actual);
    }",False,False
39,testLang1380(),Method,"""","""","java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateParserTest+GMT java.util.Locale+FRANCE java.util.Calendar+APRIL org.apache.commons.lang3.time.FastDateParserTest+GMT java.util.Locale+FRANCE""",503,11,14187,363,1,,"@Test
    public void testLang1380() throws ParseException {
        final Calendar expected = Calendar.getInstance(GMT, Locale.FRANCE);
        expected.clear();
        expected.set(2014, Calendar.APRIL, 14);

        final DateParser fdp = getInstance(""dd MMM yyyy"", GMT, Locale.FRANCE);
        assertEquals(expected.getTime(), fdp.parse(""14 avril 2014""));
        assertEquals(expected.getTime(), fdp.parse(""14 avr. 2014""));
        assertEquals(expected.getTime(), fdp.parse(""14 avr 2014""));
    }",False,False
40,testLang303(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.SerializationUtils+deserialize(byte[]) org.apache.commons.lang3.SerializationUtils+deserialize(byte[]) org.apache.commons.lang3.SerializationUtils+serialize(Serializable) org.apache.commons.lang3.SerializationUtils+serialize(Serializable) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateParserTest+YMD_SLASH java.util.Calendar+DECEMBER""",430,11,14696,375,1,,"@Test
    public void testLang303() throws ParseException {
        DateParser parser = getInstance(YMD_SLASH);
        final Calendar cal = Calendar.getInstance();
        cal.set(2004, Calendar.DECEMBER, 31);

        final Date date = parser.parse(""2004/11/31"");

        parser = SerializationUtils.deserialize(SerializationUtils.serialize((Serializable) parser));
        assertEquals(date, parser.parse(""2004/11/31""));
    }",False,False
41,testLang538(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone) java.util.Calendar+getInstance(TimeZone) java.util.Calendar+getInstance(TimeZone) java.util.TimeZone+getTimeZone(String) java.util.TimeZone+getTimeZone(String) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateParserTest+GMT java.util.Calendar+OCTOBER""",389,10,15132,387,1,,"@Test
    public void testLang538() throws ParseException {
        final DateParser parser = getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", GMT);

        final Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""GMT-8""));
        cal.clear();
        cal.set(2009, Calendar.OCTOBER, 16, 8, 42, 16);

        assertEquals(cal.getTime(), parser.parse(""2009-10-16T16:42:16.000Z""));
    }",False,False
42,testLang996(),Method,"""","""","java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US java.util.Calendar+MAY org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US""",491,11,15527,398,1,,"@Test
    public void testLang996() throws ParseException {
        final Calendar expected = Calendar.getInstance(NEW_YORK, Locale.US);
        expected.clear();
        expected.set(2014, Calendar.MAY, 14);

        final DateParser fdp = getInstance(""ddMMMyyyy"", NEW_YORK, Locale.US);
        assertEquals(expected.getTime(), fdp.parse(""14may2014""));
        assertEquals(expected.getTime(), fdp.parse(""14MAY2014""));
        assertEquals(expected.getTime(), fdp.parse(""14May2014""));
    }",False,False
43,testLocaleMatches(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,Locale) org.apache.commons.lang3.time.DateParser+getLocale() org.apache.commons.lang3.time.DateParser+getLocale()""","org.apache.commons.lang3.time.FastDateParserTest+yMdHmsSZ org.apache.commons.lang3.time.FastDateParserTest+SWEDEN org.apache.commons.lang3.time.FastDateParserTest+SWEDEN""",163,5,16024,410,1,,"@Test
    public void testLocaleMatches() {
        final DateParser parser= getInstance(yMdHmsSZ, SWEDEN);
        assertEquals(SWEDEN, parser.getLocale());
    }",False,False
44,"testLocales(String,boolean)",Method,"testLocales_Long_AD() testLocales_Long_BC() testLocales_LongNoEra_AD() testLocales_LongNoEra_BC() testLocales_Short_AD() testLocales_Short_BC() testLocales_ShortNoEra_AD() testLocales_ShortNoEra_BC()""","""","java.util.Calendar+getInstance(TimeZone) java.util.Calendar+getInstance(TimeZone) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Locale+getAvailableLocales() java.util.Locale+getAvailableLocales() java.util.Locale+equals(Object) java.util.Locale+equals(Object) java.text.SimpleDateFormat+SimpleDateFormat(String,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,Locale) org.apache.commons.lang3.time.FastDateParserTest+checkParse(Locale,Calendar,SimpleDateFormat,DateParser) org.apache.commons.lang3.time.FastDateParserTest+checkParse(Locale,Calendar,SimpleDateFormat,DateParser)""","org.apache.commons.lang3.time.FastDateParserTest+GMT java.util.Calendar+FEBRUARY java.util.Calendar+ERA java.util.GregorianCalendar+BC org.apache.commons.lang3.time.FastDateParser+JAPANESE_IMPERIAL""",841,21,16193,415,2,,"private void testLocales(final String format, final boolean eraBC) throws Exception {

        final Calendar cal= Calendar.getInstance(GMT);
        cal.clear();
        cal.set(2003, Calendar.FEBRUARY, 10);
        if (eraBC) {
            cal.set(Calendar.ERA, GregorianCalendar.BC);
        }

        for (final Locale locale : Locale.getAvailableLocales() ) {
            // ja_JP_JP cannot handle dates before 1868 properly
            if (eraBC && locale.equals(FastDateParser.JAPANESE_IMPERIAL)) {
                continue;
            }
            final SimpleDateFormat sdf = new SimpleDateFormat(format, locale);
            final DateParser fdf = getInstance(format, locale);

            // If parsing fails, a ParseException will be thrown and the test will fail
            checkParse(locale, cal, sdf, fdf);
        }
    }",True,True
45,testLocales_Long_AD(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean)""","org.apache.commons.lang3.time.FastDateParserTest+LONG_FORMAT""",109,4,17040,438,1,,"@Test
    public void testLocales_Long_AD() throws Exception {
        testLocales(LONG_FORMAT, false);
    }",True,True
46,testLocales_Long_BC(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean)""","org.apache.commons.lang3.time.FastDateParserTest+LONG_FORMAT""",108,4,17155,443,1,,"@Test
    public void testLocales_Long_BC() throws Exception {
        testLocales(LONG_FORMAT, true);
    }",True,True
47,testLocales_LongNoEra_AD(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean)""","org.apache.commons.lang3.time.FastDateParserTest+LONG_FORMAT_NOERA""",120,4,17269,448,1,,"@Test
    public void testLocales_LongNoEra_AD() throws Exception {
        testLocales(LONG_FORMAT_NOERA, false);
    }",True,True
48,testLocales_LongNoEra_BC(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean)""","org.apache.commons.lang3.time.FastDateParserTest+LONG_FORMAT_NOERA""",119,4,17395,453,1,,"@Test
    public void testLocales_LongNoEra_BC() throws Exception {
        testLocales(LONG_FORMAT_NOERA, true);
    }",True,True
49,testLocales_Short_AD(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean)""","org.apache.commons.lang3.time.FastDateParserTest+SHORT_FORMAT""",111,4,17520,458,1,,"@Test
    public void testLocales_Short_AD() throws Exception {
        testLocales(SHORT_FORMAT, false);
    }",True,True
50,testLocales_Short_BC(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean)""","org.apache.commons.lang3.time.FastDateParserTest+SHORT_FORMAT""",110,4,17637,463,1,,"@Test
    public void testLocales_Short_BC() throws Exception {
        testLocales(SHORT_FORMAT, true);
    }",True,True
51,testLocales_ShortNoEra_AD(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean)""","org.apache.commons.lang3.time.FastDateParserTest+SHORT_FORMAT_NOERA""",122,4,17753,468,1,,"@Test
    public void testLocales_ShortNoEra_AD() throws Exception {
        testLocales(SHORT_FORMAT_NOERA, false);
    }",True,True
52,testLocales_ShortNoEra_BC(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testLocales(String,boolean)""","org.apache.commons.lang3.time.FastDateParserTest+SHORT_FORMAT_NOERA""",121,4,17881,473,1,,"@Test
    public void testLocales_ShortNoEra_BC() throws Exception {
        testLocales(SHORT_FORMAT_NOERA, true);
    }",True,True
53,testLowYearPadding(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateParserTest+YMD_SLASH java.util.Calendar+JANUARY java.util.Calendar+JANUARY java.util.Calendar+JANUARY java.util.Calendar+JANUARY""",765,19,18008,482,1,"/** 
 * Tests that pre-1000AD years get padded with yyyy
 * @throws ParseException so we don't have to catch it
 */
","/**
     * Tests that pre-1000AD years get padded with yyyy
     * @throws ParseException so we don't have to catch it
     */
    @Test
    public void testLowYearPadding() throws ParseException {
        final DateParser parser = getInstance(YMD_SLASH);
        final Calendar cal = Calendar.getInstance();
        cal.clear();

        cal.set(1, Calendar.JANUARY, 1);
        assertEquals(cal.getTime(), parser.parse(""0001/01/01""));
        cal.set(10, Calendar.JANUARY, 1);
        assertEquals(cal.getTime(), parser.parse(""0010/01/01""));
        cal.set(100, Calendar.JANUARY, 1);
        assertEquals(cal.getTime(), parser.parse(""0100/01/01""));
        cal.set(999, Calendar.JANUARY, 1);
        assertEquals(cal.getTime(), parser.parse(""0999/01/01""));
    }",False,False
54,testMilleniumBug(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateParserTest+DMY_DOT java.util.Calendar+JANUARY""",310,9,18779,498,1,,"@Test
    public void testMilleniumBug() throws ParseException {
        final DateParser parser = getInstance(DMY_DOT);
        final Calendar cal = Calendar.getInstance();
        cal.clear();

        cal.set(1000, Calendar.JANUARY, 1);
        assertEquals(cal.getTime(), parser.parse(""01.01.1000""));
    }",False,False
55,testParseLongShort(),Method,"""","""","java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+setTimeZone(TimeZone) java.util.Calendar+setTimeZone(TimeZone) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US java.util.Calendar+FEBRUARY java.util.Calendar+MILLISECOND org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US java.util.Calendar+ERA java.util.GregorianCalendar+BC org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US java.util.Calendar+ERA java.util.GregorianCalendar+AD""",1053,22,19095,508,1,,"@Test
    public void testParseLongShort() throws ParseException {
        final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);
        cal.clear();
        cal.set(2003, Calendar.FEBRUARY, 10, 15, 33, 20);
        cal.set(Calendar.MILLISECOND, 989);
        cal.setTimeZone(NEW_YORK);

        DateParser fdf = getInstance(""yyyy GGGG MMMM dddd aaaa EEEE HHHH mmmm ssss SSSS ZZZZ"", NEW_YORK, Locale.US);

        assertEquals(cal.getTime(), fdf.parse(""2003 AD February 0010 PM Monday 0015 0033 0020 0989 GMT-05:00""));
        cal.set(Calendar.ERA, GregorianCalendar.BC);

        final Date parse = fdf.parse(""2003 BC February 0010 PM Saturday 0015 0033 0020 0989 GMT-05:00"");
                assertEquals(cal.getTime(), parse);

        fdf = getInstance(""y G M d a E H m s S Z"", NEW_YORK, Locale.US);
        assertEquals(cal.getTime(), fdf.parse(""03 BC 2 10 PM Sat 15 33 20 989 -0500""));

        cal.set(Calendar.ERA, GregorianCalendar.AD);
        assertEquals(cal.getTime(), fdf.parse(""03 AD 2 10 PM Saturday 15 33 20 989 -0500""));
    }",False,False
56,testParseNumerics(),Method,"""","""","java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US java.util.Calendar+FEBRUARY java.util.Calendar+MILLISECOND org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US""",421,10,20154,531,1,,"@Test
    public void testParseNumerics() throws ParseException {
        final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);
        cal.clear();
        cal.set(2003, Calendar.FEBRUARY, 10, 15, 33, 20);
        cal.set(Calendar.MILLISECOND, 989);

        final DateParser fdf = getInstance(""yyyyMMddHHmmssSSS"", NEW_YORK, Locale.US);
        assertEquals(cal.getTime(), fdf.parse(""20030210153320989""));
    }",False,False
57,testParseOffset(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) org.apache.commons.lang3.time.DateParser+parse(String,ParsePosition) org.apache.commons.lang3.time.DateParser+parse(String,ParsePosition) java.text.ParsePosition+ParsePosition(int) java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime()""","org.apache.commons.lang3.time.FastDateParserTest+YMD_SLASH java.util.Calendar+JULY""",349,10,20581,542,1,,"@Test
    public void testParseOffset() {
        final DateParser parser = getInstance(YMD_SLASH);
        final Date date = parser.parse(""Today is 2015/07/04"", new ParsePosition(9));

        final Calendar cal = Calendar.getInstance();
        cal.clear();
        cal.set(2015, Calendar.JULY, 4);
        assertEquals(cal.getTime(), date);
    }",False,False
58,testParses(),Method,"""","""","java.util.Locale+getAvailableLocales() java.util.Locale+getAvailableLocales() org.apache.commons.lang3.time.FastDateParserTest+getEraStart(int,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getEraStart(int,TimeZone,Locale) java.util.Calendar+getTime() java.util.Calendar+getTime() java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.FastDateParser+FastDateParser(String,TimeZone,Locale,Date) org.apache.commons.lang3.time.FastDateParserTest+validateSdfFormatFdpParseEquality(String,Locale,TimeZone,DateParser,Date,int,Date) org.apache.commons.lang3.time.FastDateParserTest+validateSdfFormatFdpParseEquality(String,Locale,TimeZone,DateParser,Date,int,Date)""","org.apache.commons.lang3.time.FastDateParserTest+LONG_FORMAT org.apache.commons.lang3.time.FastDateParserTest+SHORT_FORMAT org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK org.apache.commons.lang3.time.FastDateParserTest+REYKJAVIK org.apache.commons.lang3.time.FastDateParserTest+GMT java.util.Calendar+MONTH java.util.Calendar+DAY_OF_MONTH""",1030,21,20936,554,1,,"@Test
    // Check that all Locales can parse the formats we use
    public void testParses() throws Exception {
        for (final String format : new String[]{LONG_FORMAT, SHORT_FORMAT}) {
            for (final Locale locale : Locale.getAvailableLocales()) {
                for (final TimeZone tz :  new TimeZone[]{NEW_YORK, REYKJAVIK, GMT}) {
                     for (final int year : new int[]{2003, 1940, 1868, 1867, 1, -1, -1940}) {
                        final Calendar cal= getEraStart(year, tz, locale);
                        final Date centuryStart= cal.getTime();

                        cal.set(Calendar.MONTH, 1);
                        cal.set(Calendar.DAY_OF_MONTH, 10);
                        final Date in= cal.getTime();

                        final FastDateParser fdp= new FastDateParser(format, tz, locale, centuryStart);
                        validateSdfFormatFdpParseEquality(format, locale, tz, fdp, in, year, centuryStart);
                    }
                }
            }
        }
    }",False,False
59,testParseZone(),Method,"""","""","java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int,int,int,int,int) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+setTimeZone(TimeZone) java.util.Calendar+setTimeZone(TimeZone) java.util.TimeZone+getTimeZone(String) java.util.TimeZone+getTimeZone(String) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Calendar+setTimeZone(TimeZone) java.util.Calendar+setTimeZone(TimeZone) java.util.TimeZone+getTimeZone(String) java.util.TimeZone+getTimeZone(String) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US java.util.Calendar+JULY org.apache.commons.lang3.time.FastDateParserTest+yMdHmsSZ org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US java.util.Calendar+FEBRUARY java.util.Calendar+FEBRUARY""",1021,23,21972,575,1,,"@Test
    public void testParseZone() throws ParseException {
        final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);
        cal.clear();
        cal.set(2003, Calendar.JULY, 10, 16, 33, 20);

        final DateParser fdf = getInstance(yMdHmsSZ, NEW_YORK, Locale.US);

        assertEquals(cal.getTime(), fdf.parse(""2003-07-10T15:33:20.000 -0500""));
        assertEquals(cal.getTime(), fdf.parse(""2003-07-10T15:33:20.000 GMT-05:00""));
        assertEquals(cal.getTime(), fdf.parse(""2003-07-10T16:33:20.000 Eastern Daylight Time""));
        assertEquals(cal.getTime(), fdf.parse(""2003-07-10T16:33:20.000 EDT""));

        cal.setTimeZone(TimeZone.getTimeZone(""GMT-3""));
        cal.set(2003, Calendar.FEBRUARY, 10, 9, 0, 0);

        assertEquals(cal.getTime(), fdf.parse(""2003-02-10T09:00:00.000 -0300""));

        cal.setTimeZone(TimeZone.getTimeZone(""GMT+5""));
        cal.set(2003, Calendar.FEBRUARY, 10, 15, 5, 6);

        assertEquals(cal.getTime(), fdf.parse(""2003-02-10T15:05:06.000 +0500""));
    }",False,False
60,testPatternMatches(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) org.apache.commons.lang3.time.DateParser+getPattern() org.apache.commons.lang3.time.DateParser+getPattern()""","org.apache.commons.lang3.time.FastDateParserTest+yMdHmsSZ org.apache.commons.lang3.time.FastDateParserTest+yMdHmsSZ""",159,5,22999,599,1,,"@Test
    public void testPatternMatches() {
        final DateParser parser= getInstance(yMdHmsSZ);
        assertEquals(yMdHmsSZ, parser.getPattern());
    }",False,False
61,testQuotes(),Method,"""","""","java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US java.util.Calendar+FEBRUARY java.util.Calendar+MILLISECOND org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US""",429,10,23164,605,1,,"@Test
    public void testQuotes() throws ParseException {
        final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);
        cal.clear();
        cal.set(2003, Calendar.FEBRUARY, 10, 15, 33, 20);
        cal.set(Calendar.MILLISECOND, 989);

        final DateParser fdf = getInstance(""''yyyyMMdd'A''B'HHmmssSSS''"", NEW_YORK, Locale.US);
        assertEquals(cal.getTime(), fdf.parse(""'20030210A'B153320989'""));
    }",False,False
62,"testSdfAndFdp(String,String,boolean)",Method,"testLANG_831() testLANG_832() testLANG_832() testSpecialCharacters() testSpecialCharacters() testSpecialCharacters() testSpecialCharacters() testSpecialCharacters() testSpecialCharacters() testSpecialCharacters() testSpecialCharacters() testSpecialCharacters() testSpecialCharacters() testSpecialCharacters()""","""","java.text.SimpleDateFormat+SimpleDateFormat(String,Locale) java.text.DateFormat+setTimeZone(TimeZone) java.text.DateFormat+setTimeZone(TimeZone) java.text.DateFormat+parse(String) java.text.DateFormat+parse(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone,Locale) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","java.util.Locale+US org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK java.util.Locale+US""",1245,33,23599,615,2,,"private void testSdfAndFdp(final String format, final String date, final boolean shouldFail)
            throws Exception {
        Date dfdp = null;
        Date dsdf = null;
        Throwable f = null;
        Throwable s = null;

        try {
            final SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.US);
            sdf.setTimeZone(NEW_YORK);
            dsdf = sdf.parse(date);
            assertFalse(shouldFail, ""Expected SDF failure, but got "" + dsdf + "" for [""+format+"", ""+date+""]"");
        } catch (final Exception e) {
            s = e;
            if (!shouldFail) {
                throw e;
            }
        }

        try {
            final DateParser fdp = getInstance(format, NEW_YORK, Locale.US);
            dfdp = fdp.parse(date);
            assertFalse(shouldFail, ""Expected FDF failure, but got "" + dfdp + "" for [""+format+"", ""+date+""]"");
        } catch (final Exception e) {
            f = e;
            if (!shouldFail) {
                throw e;
            }
        }
        // SDF and FDF should produce equivalent results
        assertEquals((f == null), (s == null), ""Should both or neither throw Exceptions"");
        assertEquals(dsdf, dfdp, ""Parsed dates should be equal"");
    }",False,False
63,testShortDateStyleWithLocales(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+getDateInstance(int,Locale) org.apache.commons.lang3.time.FastDateParserTest+getDateInstance(int,Locale) java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.FastDateParserTest+getDateInstance(int,Locale) org.apache.commons.lang3.time.FastDateParserTest+getDateInstance(int,Locale) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String)""","org.apache.commons.lang3.time.FastDateFormat+SHORT java.util.Locale+US java.util.Calendar+FEBRUARY org.apache.commons.lang3.time.FastDateFormat+SHORT org.apache.commons.lang3.time.FastDateParserTest+SWEDEN""",621,16,24850,654,1,"/** 
 * Test case for  {@link FastDateParser#FastDateParser(String,TimeZone,Locale)}.
 * @throws ParseException so we don't have to catch it
 */
","/**
     * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}.
     * @throws ParseException so we don't have to catch it
     */
    @Test
    public void testShortDateStyleWithLocales() throws ParseException {
        DateParser fdf = getDateInstance(FastDateFormat.SHORT, Locale.US);
        final Calendar cal = Calendar.getInstance();
        cal.clear();

        cal.set(2004, Calendar.FEBRUARY, 3);
        assertEquals(cal.getTime(), fdf.parse(""2/3/04""));

        fdf = getDateInstance(FastDateFormat.SHORT, SWEDEN);
        assertEquals(cal.getTime(), fdf.parse(""2004-02-03""));
    }",False,False
64,testSingleLocale(Locale),Method,"java15BuggyLocaleTest() java15BuggyLocaleTestAll()""","""","java.util.Calendar+getInstance(TimeZone) java.util.Calendar+getInstance(TimeZone) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int,int) java.util.Calendar+set(int,int,int) java.text.SimpleDateFormat+SimpleDateFormat(String,Locale) java.text.DateFormat+format(Date) java.text.DateFormat+format(Date) java.util.Calendar+getTime() java.util.Calendar+getTime() java.text.DateFormat+parse(String) java.text.DateFormat+parse(String) java.text.DateFormat+parse(String) java.text.DateFormat+parse(String) java.lang.String+toUpperCase(Locale) java.lang.String+toUpperCase(Locale) java.text.DateFormat+parse(String) java.text.DateFormat+parse(String) java.lang.String+toLowerCase(Locale) java.lang.String+toLowerCase(Locale)""","org.apache.commons.lang3.time.FastDateParserTest+GMT java.util.Calendar+FEBRUARY org.apache.commons.lang3.time.FastDateParserTest+LONG_FORMAT""",489,10,25477,666,2,,"private void testSingleLocale(final Locale locale) throws ParseException {
        final Calendar cal = Calendar.getInstance(GMT);
        cal.clear();
        cal.set(2003, Calendar.FEBRUARY, 10);
        final SimpleDateFormat sdf = new SimpleDateFormat(LONG_FORMAT, locale);
        final String formattedDate = sdf.format(cal.getTime());
        sdf.parse(formattedDate);
        sdf.parse(formattedDate.toUpperCase(locale));
        sdf.parse(formattedDate.toLowerCase(locale));
    }",True,True
65,testSpecialCharacters(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean) org.apache.commons.lang3.time.FastDateParserTest+testSdfAndFdp(String,String,boolean)""","""",881,17,25972,678,1,,"@Test
    public void testSpecialCharacters() throws Exception {
        testSdfAndFdp(""q"", """", true); // bad pattern character (at present)
        testSdfAndFdp(""Q"", """", true); // bad pattern character
        testSdfAndFdp(""$"", ""$"", false); // OK
        testSdfAndFdp(""?.d"", ""?.12"", false); // OK
        testSdfAndFdp(""''yyyyMMdd'A''B'HHmmssSSS''"", ""'20030210A'B153320989'"", false); // OK
        testSdfAndFdp(""''''yyyyMMdd'A''B'HHmmssSSS''"", ""''20030210A'B153320989'"", false); // OK
        testSdfAndFdp(""'$\\Ed'"", ""$\\Ed"", false); // OK

        // quoted charaters are case sensitive
        testSdfAndFdp(""'QED'"", ""QED"", false);
        testSdfAndFdp(""'QED'"", ""qed"", true);
        // case sensitive after insensitive Month field
        testSdfAndFdp(""yyyy-MM-dd 'QED'"", ""2003-02-10 QED"", false);
        testSdfAndFdp(""yyyy-MM-dd 'QED'"", ""2003-02-10 qed"", true);
    }",False,False
66,testTimeZoneMatches(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String,TimeZone) org.apache.commons.lang3.time.DateParser+getTimeZone() org.apache.commons.lang3.time.DateParser+getTimeZone()""","org.apache.commons.lang3.time.FastDateParserTest+yMdHmsSZ org.apache.commons.lang3.time.FastDateParserTest+REYKJAVIK org.apache.commons.lang3.time.FastDateParserTest+REYKJAVIK""",173,5,26859,696,1,,"@Test
    public void testTimeZoneMatches() {
        final DateParser parser= getInstance(yMdHmsSZ, REYKJAVIK);
        assertEquals(REYKJAVIK, parser.getTimeZone());
    }",False,False
67,testToStringContainsName(),Method,"""","""","org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) org.apache.commons.lang3.time.FastDateParserTest+getInstance(String) java.lang.String+startsWith(String) java.lang.Object+toString() java.lang.Object+toString() java.lang.String+startsWith(String)""","org.apache.commons.lang3.time.FastDateParserTest+YMD_SLASH""",175,5,27038,702,1,,"@Test
    public void testToStringContainsName() {
        final DateParser parser= getInstance(YMD_SLASH);
        assertTrue(parser.toString().startsWith(""FastDate""));
    }",False,False
68,testTzParses(),Method,"""","""","java.util.Locale+getAvailableLocales() java.util.Locale+getAvailableLocales() org.apache.commons.lang3.time.FastDateParser+FastDateParser(String,TimeZone,Locale) java.util.TimeZone+getDefault() java.util.TimeZone+getDefault() java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+getInstance(TimeZone,Locale) java.util.Calendar+clear() java.util.Calendar+clear() java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() org.apache.commons.lang3.time.FastDateParser+parse(String) org.apache.commons.lang3.time.FastDateParser+parse(String) java.util.TimeZone+getDisplayName(Locale) java.util.TimeZone+getDisplayName(Locale) java.util.TimeZone+getID() java.util.TimeZone+getID() java.util.Locale+getDisplayName() java.util.Locale+getDisplayName()""","org.apache.commons.lang3.time.FastDateParserTest+NEW_YORK org.apache.commons.lang3.time.FastDateParserTest+REYKJAVIK org.apache.commons.lang3.time.FastDateParserTest+GMT java.util.Calendar+YEAR java.util.Calendar+MONTH java.util.Calendar+DAY_OF_MONTH""",891,19,27404,710,1,,"@Test
    public void testTzParses() throws Exception {
        // Check that all Locales can parse the time formats we use
        for (final Locale locale : Locale.getAvailableLocales()) {
            final FastDateParser fdp= new FastDateParser(""yyyy/MM/dd z"", TimeZone.getDefault(), locale);

            for (final TimeZone tz :  new TimeZone[]{NEW_YORK, REYKJAVIK, GMT}) {
                final Calendar cal= Calendar.getInstance(tz, locale);
                cal.clear();
                cal.set(Calendar.YEAR, 2000);
                cal.set(Calendar.MONTH, 1);
                cal.set(Calendar.DAY_OF_MONTH, 10);
                final Date expected= cal.getTime();

                final Date actual = fdp.parse(""2000/02/10 ""+tz.getDisplayName(locale));
                assertEquals(expected, actual, ""tz:""+tz.getID()+"" locale:""+locale.getDisplayName());
            }
        }
    }",False,False
69,"validateSdfFormatFdpParseEquality(String,Locale,TimeZone,DateParser,Date,int,Date)",Method,"testParses()""","""","java.text.SimpleDateFormat+SimpleDateFormat(String,Locale) java.text.DateFormat+setTimeZone(TimeZone) java.text.DateFormat+setTimeZone(TimeZone) java.lang.String+equals(Object) java.lang.String+equals(Object) java.text.SimpleDateFormat+set2DigitYearStart(Date) java.text.SimpleDateFormat+set2DigitYearStart(Date) java.text.DateFormat+format(Date) java.text.DateFormat+format(Date) org.apache.commons.lang3.time.DateParser+parse(String) org.apache.commons.lang3.time.DateParser+parse(String) java.util.Locale+toString() java.util.Locale+toString() java.util.TimeZone+getID() java.util.TimeZone+getID() java.lang.String+equals(Object) java.util.Locale+getCountry() java.util.Locale+getCountry() java.lang.String+equals(Object)""","org.apache.commons.lang3.time.FastDateParserTest+SHORT_FORMAT""",769,16,28301,729,2,,"private void validateSdfFormatFdpParseEquality(final String format, final Locale locale, final TimeZone tz, final DateParser fdp, final Date in, final int year, final Date cs) throws ParseException {
        final SimpleDateFormat sdf = new SimpleDateFormat(format, locale);
        sdf.setTimeZone(tz);
        if (format.equals(SHORT_FORMAT)) {
            sdf.set2DigitYearStart( cs );
        }
        final String fmt = sdf.format(in);
        try {
            final Date out = fdp.parse(fmt);
            assertEquals(in, out, locale.toString()+"" ""+in+"" ""+ format+ "" ""+tz.getID());
        } catch (final ParseException pe) {
            if (year >= 1868 || !locale.getCountry().equals(""JP"")) {// LANG-978
                throw pe;
            }
        }
    }",False,False
