index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,commit,full text,moved,removed
1,defaults,Field,"""","""","""","""",76,2,1368,38,1,,"@Rule
    public SystemDefaultsSwitch defaults = new SystemDefaultsSwitch();",False,False
2,BAR,Field,"""","""","""","""",40,1,1450,40,26,,"private static final String BAR = ""bar"";",False,False
3,CharU20000,Field,"""","""","""","""",198,5,1495,45,26,"/** 
 * Supplementary character U+20000 See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * Supplementary character U+20000
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    private static final String CharU20000 = ""\uD840\uDC00"";",False,False
4,CharU20001,Field,"""","""","""","""",198,5,1698,50,26,"/** 
 * Supplementary character U+20001 See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * Supplementary character U+20001
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    private static final String CharU20001 = ""\uD840\uDC01"";",False,False
5,CharUSuppCharHigh,Field,"""","""","""","""",232,5,1901,55,26,"/** 
 * Incomplete supplementary character U+20000, high surrogate only. See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * Incomplete supplementary character U+20000, high surrogate only.
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    private static final String CharUSuppCharHigh = ""\uDC00"";",True,True
6,CharUSuppCharLow,Field,"""","""","""","""",230,5,2139,61,26,"/** 
 * Incomplete supplementary character U+20000, low surrogate only. See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * Incomplete supplementary character U+20000, low surrogate only.
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    private static final String CharUSuppCharLow = ""\uD840"";",True,True
7,FOO,Field,"""","""","""","""",40,1,2375,63,26,,"private static final String FOO = ""foo"";",False,False
8,FOOBAR,Field,"""","""","""","""",46,1,2421,65,26,,"private static final String FOOBAR = ""foobar"";",False,False
9,FOOBAR_SUB_ARRAY,Field,"""","""","""","""",75,1,2473,67,26,,"private static final String[] FOOBAR_SUB_ARRAY = new String[] {""ob"", ""ba""};",False,False
10,testContains_Char(),Method,"""","""","org.apache.commons.lang3.StringUtils+contains(CharSequence,int) org.apache.commons.lang3.StringUtils+contains(CharSequence,int) org.apache.commons.lang3.StringUtils+contains(CharSequence,int) org.apache.commons.lang3.StringUtils+contains(CharSequence,int) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,int) org.apache.commons.lang3.StringUtils+contains(CharSequence,int) org.apache.commons.lang3.StringUtils+contains(CharSequence,int) org.apache.commons.lang3.StringUtils+contains(CharSequence,int) org.apache.commons.lang3.StringUtils+contains(CharSequence,int) org.apache.commons.lang3.StringUtils+contains(CharSequence,int) org.apache.commons.lang3.StringUtils+contains(CharSequence,int) org.apache.commons.lang3.StringUtils+contains(CharSequence,int)""","""",480,11,2554,70,1,,"@Test
    public void testContains_Char() {
        assertFalse(StringUtils.contains(null, ' '));
        assertFalse(StringUtils.contains("""", ' '));
        assertFalse(StringUtils.contains("""", null));
        assertFalse(StringUtils.contains(null, null));
        assertTrue(StringUtils.contains(""abc"", 'a'));
        assertTrue(StringUtils.contains(""abc"", 'b'));
        assertTrue(StringUtils.contains(""abc"", 'c'));
        assertFalse(StringUtils.contains(""abc"", 'z'));
    }",True,True
11,testContains_String(),Method,"""","""","org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence)""","""",641,14,3040,82,1,,"@Test
    public void testContains_String() {
        assertFalse(StringUtils.contains(null, null));
        assertFalse(StringUtils.contains(null, """"));
        assertFalse(StringUtils.contains(null, ""a""));
        assertFalse(StringUtils.contains("""", null));
        assertTrue(StringUtils.contains("""", """"));
        assertFalse(StringUtils.contains("""", ""a""));
        assertTrue(StringUtils.contains(""abc"", ""a""));
        assertTrue(StringUtils.contains(""abc"", ""b""));
        assertTrue(StringUtils.contains(""abc"", ""c""));
        assertTrue(StringUtils.contains(""abc"", ""abc""));
        assertFalse(StringUtils.contains(""abc"", ""z""));
    }",True,True
12,testContains_StringWithBadSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) java.lang.String+indexOf(String) java.lang.String+indexOf(String) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh""",768,14,3687,100,1,"/** 
 * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    @Test
    public void testContains_StringWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertFalse(StringUtils.contains(CharUSuppCharHigh, CharU20001));
        assertFalse(StringUtils.contains(CharUSuppCharLow, CharU20001));
        assertFalse(StringUtils.contains(CharU20001, CharUSuppCharHigh));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertTrue(StringUtils.contains(CharU20001, CharUSuppCharLow));
        assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharLow + ""a"", ""a""));
        assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharHigh + ""a"", ""a""));
    }",True,True
13,testContains_StringWithSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+contains(CharSequence,CharSequence)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001""",467,10,4461,115,1,"/** 
 * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    @Test
    public void testContains_StringWithSupplementaryChars() {
        assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20000));
        assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20001));
        assertTrue(StringUtils.contains(CharU20000, CharU20000));
        assertFalse(StringUtils.contains(CharU20000, CharU20001));
    }",True,True
14,testContainsAny_StringCharArray(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[])""","""",859,17,4934,123,1,,"@Test
    public void testContainsAny_StringCharArray() {
        assertFalse(StringUtils.containsAny(null, (char[]) null));
        assertFalse(StringUtils.containsAny(null, new char[0]));
        assertFalse(StringUtils.containsAny(null, 'a', 'b'));

        assertFalse(StringUtils.containsAny("""", (char[]) null));
        assertFalse(StringUtils.containsAny("""", new char[0]));
        assertFalse(StringUtils.containsAny("""", 'a', 'b'));

        assertFalse(StringUtils.containsAny(""zzabyycdxx"", (char[]) null));
        assertFalse(StringUtils.containsAny(""zzabyycdxx"", new char[0]));
        assertTrue(StringUtils.containsAny(""zzabyycdxx"", 'z', 'a'));
        assertTrue(StringUtils.containsAny(""zzabyycdxx"", 'b', 'y'));
        assertTrue(StringUtils.containsAny(""zzabyycdxx"", 'z', 'y'));
        assertFalse(StringUtils.containsAny(""ab"", 'z'));
    }",True,True
15,testContainsAny_StringCharArrayWithBadSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() java.lang.String+indexOf(String) java.lang.String+indexOf(String) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() java.lang.String+indexOf(String) java.lang.String+indexOf(String) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray()""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow""",850,14,5799,144,1,"/** 
 * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    @Test
    public void testContainsAny_StringCharArrayWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));
        assertFalse(StringUtils.containsAny(""abc"" + CharUSuppCharHigh + ""xyz"", CharU20001.toCharArray()));
        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
        assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));
        assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));
    }",True,True
16,testContainsAny_StringCharArrayWithSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+charAt(int) java.lang.String+charAt(int) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray()""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000""",1151,19,6655,159,1,"/** 
 * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    @Test
    public void testContainsAny_StringCharArrayWithSupplementaryChars() {
        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
        assertTrue(StringUtils.containsAny(""a"" + CharU20000 + CharU20001, ""a"".toCharArray()));
        assertTrue(StringUtils.containsAny(CharU20000 + ""a"" + CharU20001, ""a"".toCharArray()));
        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001 + ""a"", ""a"".toCharArray()));
        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
        assertTrue(StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));
        // Sanity check:
        assertEquals(-1, CharU20000.indexOf(CharU20001));
        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
        // Test:
        assertFalse(StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));
        assertFalse(StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));
    }",True,True
17,testContainsAny_StringString(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence)""","""",809,17,7812,176,1,,"@Test
    public void testContainsAny_StringString() {
        assertFalse(StringUtils.containsAny(null, (String) null));
        assertFalse(StringUtils.containsAny(null, """"));
        assertFalse(StringUtils.containsAny(null, ""ab""));

        assertFalse(StringUtils.containsAny("""", (String) null));
        assertFalse(StringUtils.containsAny("""", """"));
        assertFalse(StringUtils.containsAny("""", ""ab""));

        assertFalse(StringUtils.containsAny(""zzabyycdxx"", (String) null));
        assertFalse(StringUtils.containsAny(""zzabyycdxx"", """"));
        assertTrue(StringUtils.containsAny(""zzabyycdxx"", ""za""));
        assertTrue(StringUtils.containsAny(""zzabyycdxx"", ""by""));
        assertTrue(StringUtils.containsAny(""zzabyycdxx"", ""zy""));
        assertFalse(StringUtils.containsAny(""ab"", ""z""));
    }",True,True
18,testContainsAny_StringWithBadSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) java.lang.String+indexOf(String) java.lang.String+indexOf(String) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) java.lang.String+indexOf(String) java.lang.String+indexOf(String) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow""",678,13,8627,197,1,"/** 
 * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    @Test
    public void testContainsAny_StringWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001));
        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
        assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001));
        assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow));
    }",True,True
19,testContainsAny_StringWithSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+charAt(int) java.lang.String+charAt(int) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000""",787,16,9311,211,1,"/** 
 * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    @Test
    public void testContainsAny_StringWithSupplementaryChars() {
        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));
        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));
        assertTrue(StringUtils.containsAny(CharU20000, CharU20000));
        // Sanity check:
        assertEquals(-1, CharU20000.indexOf(CharU20001));
        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
        // Test:
        assertFalse(StringUtils.containsAny(CharU20000, CharU20001));
        assertFalse(StringUtils.containsAny(CharU20001, CharU20000));
    }",True,True
20,testContainsAny_StringStringArray(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsAny(CharSequence,char[])""","""",1348,20,10108,225,1,,"@Test
    public void testContainsAny_StringStringArray() {
        assertFalse(StringUtils.containsAny(null, (String[]) null));
        assertFalse(StringUtils.containsAny(null, new String[0]));
        assertFalse(StringUtils.containsAny(null, new String[] { ""hello"" }));
        assertFalse(StringUtils.containsAny("""", (String[]) null));
        assertFalse(StringUtils.containsAny("""", new String[0]));
        assertFalse(StringUtils.containsAny("""", new String[] { ""hello"" }));
        assertFalse(StringUtils.containsAny(""hello, goodbye"", (String[]) null));
        assertFalse(StringUtils.containsAny(""hello, goodbye"", new String[0]));
        assertTrue(StringUtils.containsAny(""hello, goodbye"", new String[]{""hello"", ""goodbye""}));
        assertTrue(StringUtils.containsAny(""hello, goodbye"", new String[]{""hello"", ""Goodbye""}));
        assertFalse(StringUtils.containsAny(""hello, goodbye"", new String[]{""Hello"", ""Goodbye""}));
        assertFalse(StringUtils.containsAny(""hello, goodbye"", new String[]{""Hello"", null}));
        assertFalse(StringUtils.containsAny(""hello, null"", new String[] { ""Hello"", null }));
        // Javadoc examples:
        assertTrue(StringUtils.containsAny(""abcd"", ""ab"", null));
        assertTrue(StringUtils.containsAny(""abcd"", ""ab"", ""cd""));
        assertTrue(StringUtils.containsAny(""abc"", ""d"", ""abc""));
    }",True,True
21,testContainsIgnoreCase_LocaleIndependence(),Method,"""","""","java.util.Locale+Locale(String) java.util.Locale+getDefault() java.util.Locale+getDefault() java.util.Locale+setDefault(Locale) java.util.Locale+setDefault(Locale) java.util.Locale+getDefault() java.util.Locale+getDefault() org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) java.util.Locale+getDefault() java.util.Locale+getDefault() org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence)""","java.util.Locale+ENGLISH""",1092,29,11462,247,1,,"@SystemDefaults(locale=""de_DE"")
    @Test
    public void testContainsIgnoreCase_LocaleIndependence() {
        final Locale[] locales = { Locale.ENGLISH, new Locale(""tr""), Locale.getDefault() };

        final String[][] tdata = {
            { ""i"", ""I"" },
            { ""I"", ""i"" },
            { ""\u03C2"", ""\u03C3"" },
            { ""\u03A3"", ""\u03C2"" },
            { ""\u03A3"", ""\u03C3"" },
        };

        final String[][] fdata = {
            { ""\u00DF"", ""SS"" },
        };

        for (final Locale testLocale : locales) {
            Locale.setDefault(testLocale);
            for (int j = 0; j < tdata.length; j++) {
                assertTrue(Locale.getDefault() + "": "" + j + "" "" + tdata[j][0] + "" "" + tdata[j][1], StringUtils
                        .containsIgnoreCase(tdata[j][0], tdata[j][1]));
            }
            for (int j = 0; j < fdata.length; j++) {
                assertFalse(Locale.getDefault() + "": "" + j + "" "" + fdata[j][0] + "" "" + fdata[j][1], StringUtils
                        .containsIgnoreCase(fdata[j][0], fdata[j][1]));
            }
        }
    }",True,True
22,testContainsIgnoreCase_StringString(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+containsIgnoreCase(CharSequence,CharSequence)""","""",1574,34,12560,276,1,,"@Test
    public void testContainsIgnoreCase_StringString() {
        assertFalse(StringUtils.containsIgnoreCase(null, null));

        // Null tests
        assertFalse(StringUtils.containsIgnoreCase(null, """"));
        assertFalse(StringUtils.containsIgnoreCase(null, ""a""));
        assertFalse(StringUtils.containsIgnoreCase(null, ""abc""));

        assertFalse(StringUtils.containsIgnoreCase("""", null));
        assertFalse(StringUtils.containsIgnoreCase(""a"", null));
        assertFalse(StringUtils.containsIgnoreCase(""abc"", null));

        // Match len = 0
        assertTrue(StringUtils.containsIgnoreCase("""", """"));
        assertTrue(StringUtils.containsIgnoreCase(""a"", """"));
        assertTrue(StringUtils.containsIgnoreCase(""abc"", """"));

        // Match len = 1
        assertFalse(StringUtils.containsIgnoreCase("""", ""a""));
        assertTrue(StringUtils.containsIgnoreCase(""a"", ""a""));
        assertTrue(StringUtils.containsIgnoreCase(""abc"", ""a""));
        assertFalse(StringUtils.containsIgnoreCase("""", ""A""));
        assertTrue(StringUtils.containsIgnoreCase(""a"", ""A""));
        assertTrue(StringUtils.containsIgnoreCase(""abc"", ""A""));

        // Match len > 1
        assertFalse(StringUtils.containsIgnoreCase("""", ""abc""));
        assertFalse(StringUtils.containsIgnoreCase(""a"", ""abc""));
        assertTrue(StringUtils.containsIgnoreCase(""xabcz"", ""abc""));
        assertFalse(StringUtils.containsIgnoreCase("""", ""ABC""));
        assertFalse(StringUtils.containsIgnoreCase(""a"", ""ABC""));
        assertTrue(StringUtils.containsIgnoreCase(""xabcz"", ""ABC""));
    }",True,True
23,testContainsNone_CharArray(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[])""","""",1242,25,14140,311,1,,"@Test
    public void testContainsNone_CharArray() {
        final String str1 = ""a"";
        final String str2 = ""b"";
        final String str3 = ""ab."";
        final char[] chars1= {'b'};
        final char[] chars2= {'.'};
        final char[] chars3= {'c', 'd'};
        final char[] emptyChars = new char[0];
        assertTrue(StringUtils.containsNone(null, (char[]) null));
        assertTrue(StringUtils.containsNone("""", (char[]) null));
        assertTrue(StringUtils.containsNone(null, emptyChars));
        assertTrue(StringUtils.containsNone(str1, emptyChars));
        assertTrue(StringUtils.containsNone("""", emptyChars));
        assertTrue(StringUtils.containsNone("""", chars1));
        assertTrue(StringUtils.containsNone(str1, chars1));
        assertTrue(StringUtils.containsNone(str1, chars2));
        assertTrue(StringUtils.containsNone(str1, chars3));
        assertFalse(StringUtils.containsNone(str2, chars1));
        assertTrue(StringUtils.containsNone(str2, chars2));
        assertTrue(StringUtils.containsNone(str2, chars3));
        assertFalse(StringUtils.containsNone(str3, chars1));
        assertFalse(StringUtils.containsNone(str3, chars2));
        assertTrue(StringUtils.containsNone(str3, chars3));
    }",True,True
24,testContainsNone_CharArrayWithBadSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() java.lang.String+indexOf(String) java.lang.String+indexOf(String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() java.lang.String+indexOf(String) java.lang.String+indexOf(String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() java.lang.String+indexOf(String) java.lang.String+indexOf(String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray()""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow""",805,14,15388,340,1,"/** 
 * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    @Test
    public void testContainsNone_CharArrayWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));
        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
        assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));
        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));
        assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));
    }",True,True
25,testContainsNone_CharArrayWithSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+charAt(int) java.lang.String+charAt(int) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray()""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000""",867,16,16199,355,1,"/** 
 * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    @Test
    public void testContainsNone_CharArrayWithSupplementaryChars() {
        assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));
        assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));
        assertFalse(StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));
        // Sanity check:
        assertEquals(-1, CharU20000.indexOf(CharU20001));
        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
        // Test:
        assertTrue(StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));
        assertTrue(StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));
    }",True,True
26,testContainsNone_String(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String)""","""",1158,24,17072,369,1,,"@Test
    public void testContainsNone_String() {
        final String str1 = ""a"";
        final String str2 = ""b"";
        final String str3 = ""ab."";
        final String chars1= ""b"";
        final String chars2= ""."";
        final String chars3= ""cd"";
        assertTrue(StringUtils.containsNone(null, (String) null));
        assertTrue(StringUtils.containsNone("""", (String) null));
        assertTrue(StringUtils.containsNone(null, """"));
        assertTrue(StringUtils.containsNone(str1, """"));
        assertTrue(StringUtils.containsNone("""", """"));
        assertTrue(StringUtils.containsNone("""", chars1));
        assertTrue(StringUtils.containsNone(str1, chars1));
        assertTrue(StringUtils.containsNone(str1, chars2));
        assertTrue(StringUtils.containsNone(str1, chars3));
        assertFalse(StringUtils.containsNone(str2, chars1));
        assertTrue(StringUtils.containsNone(str2, chars2));
        assertTrue(StringUtils.containsNone(str2, chars3));
        assertFalse(StringUtils.containsNone(str3, chars1));
        assertFalse(StringUtils.containsNone(str3, chars2));
        assertTrue(StringUtils.containsNone(str3, chars3));
    }",True,True
27,testContainsNone_StringWithBadSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) java.lang.String+indexOf(String) java.lang.String+indexOf(String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) java.lang.String+indexOf(String) java.lang.String+indexOf(String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) java.lang.String+indexOf(String) java.lang.String+indexOf(String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharHigh org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharUSuppCharLow""",746,14,18236,397,1,"/** 
 * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    @Test
    public void testContainsNone_StringWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001));
        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
        assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001));
        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));
        assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow));
    }",True,True
28,testContainsNone_StringWithSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+charAt(int) java.lang.String+charAt(int) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String) org.apache.commons.lang3.StringUtils+containsNone(CharSequence,String)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000""",794,16,18988,412,1,"/** 
 * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    @Test
    public void testContainsNone_StringWithSupplementaryChars() {
        assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));
        assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));
        assertFalse(StringUtils.containsNone(CharU20000, CharU20000));
        // Sanity check:
        assertEquals(-1, CharU20000.indexOf(CharU20001));
        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
        // Test:
        assertTrue(StringUtils.containsNone(CharU20000, CharU20001));
        assertTrue(StringUtils.containsNone(CharU20001, CharU20000));
    }",True,True
29,testContainsOnly_CharArray(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[]) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,char[])""","""",1246,25,19788,426,1,,"@Test
    public void testContainsOnly_CharArray() {
        final String str1 = ""a"";
        final String str2 = ""b"";
        final String str3 = ""ab"";
        final char[] chars1= {'b'};
        final char[] chars2= {'a'};
        final char[] chars3= {'a', 'b'};
        final char[] emptyChars = new char[0];
        assertFalse(StringUtils.containsOnly(null, (char[]) null));
        assertFalse(StringUtils.containsOnly("""", (char[]) null));
        assertFalse(StringUtils.containsOnly(null, emptyChars));
        assertFalse(StringUtils.containsOnly(str1, emptyChars));
        assertTrue(StringUtils.containsOnly("""", emptyChars));
        assertTrue(StringUtils.containsOnly("""", chars1));
        assertFalse(StringUtils.containsOnly(str1, chars1));
        assertTrue(StringUtils.containsOnly(str1, chars2));
        assertTrue(StringUtils.containsOnly(str1, chars3));
        assertTrue(StringUtils.containsOnly(str2, chars1));
        assertFalse(StringUtils.containsOnly(str2, chars2));
        assertTrue(StringUtils.containsOnly(str2, chars3));
        assertFalse(StringUtils.containsOnly(str3, chars1));
        assertFalse(StringUtils.containsOnly(str3, chars2));
        assertTrue(StringUtils.containsOnly(str3, chars3));
    }",True,True
30,testContainsOnly_String(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String) org.apache.commons.lang3.StringUtils+containsOnly(CharSequence,String)""","""",1162,24,21040,452,1,,"@Test
    public void testContainsOnly_String() {
        final String str1 = ""a"";
        final String str2 = ""b"";
        final String str3 = ""ab"";
        final String chars1= ""b"";
        final String chars2= ""a"";
        final String chars3= ""ab"";
        assertFalse(StringUtils.containsOnly(null, (String) null));
        assertFalse(StringUtils.containsOnly("""", (String) null));
        assertFalse(StringUtils.containsOnly(null, """"));
        assertFalse(StringUtils.containsOnly(str1, """"));
        assertTrue(StringUtils.containsOnly("""", """"));
        assertTrue(StringUtils.containsOnly("""", chars1));
        assertFalse(StringUtils.containsOnly(str1, chars1));
        assertTrue(StringUtils.containsOnly(str1, chars2));
        assertTrue(StringUtils.containsOnly(str1, chars3));
        assertTrue(StringUtils.containsOnly(str2, chars1));
        assertFalse(StringUtils.containsOnly(str2, chars2));
        assertTrue(StringUtils.containsOnly(str2, chars3));
        assertFalse(StringUtils.containsOnly(str3, chars1));
        assertFalse(StringUtils.containsOnly(str3, chars2));
        assertTrue(StringUtils.containsOnly(str3, chars3));
    }",True,True
31,testContainsWhitespace(),Method,"""","""","org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence) org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence) org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence) org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence) org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence) org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence) org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence) org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence) org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence) org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence) org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence) org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence) org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence) org.apache.commons.lang3.StringUtils+containsWhitespace(CharSequence)""","""",473,10,22208,477,1,,"@Test
    public void testContainsWhitespace() {
        assertFalse( StringUtils.containsWhitespace("""") );
        assertTrue( StringUtils.containsWhitespace("" "") );
        assertFalse( StringUtils.containsWhitespace(""a"") );
        assertTrue( StringUtils.containsWhitespace(""a "") );
        assertTrue( StringUtils.containsWhitespace("" a"") );
        assertTrue( StringUtils.containsWhitespace(""a\t"") );
        assertTrue( StringUtils.containsWhitespace(""\n"") );
    }",True,True
32,CustomCharSequence,MemberClass,"""","""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+CustomCharSequence(CharSequence) org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+charAt(int) java.lang.CharSequence+charAt(int) java.lang.CharSequence+charAt(int) org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+length() java.lang.CharSequence+length() java.lang.CharSequence+length() org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+subSequence(int,int) org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+CustomCharSequence(CharSequence) java.lang.CharSequence+subSequence(int,int) java.lang.CharSequence+subSequence(int,int) org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+equals(Object) java.lang.Object+equals(Object) java.lang.Object+equals(Object) org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+hashCode() java.lang.Object+hashCode() java.lang.Object+hashCode() org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+toString() java.lang.CharSequence+toString() java.lang.CharSequence+toString()""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+seq org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+seq org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+seq org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+seq org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+seq org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+seq org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+seq org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+seq org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+seq""",1092,41,-1,-1,10,,"private static class CustomCharSequence implements CharSequence {
        private final CharSequence seq;

        public CustomCharSequence(final CharSequence seq) {
            this.seq = seq;
        }

        @Override
        public char charAt(final int index) {
            return seq.charAt(index);
        }

        @Override
        public int length() {
            return seq.length();
        }

        @Override
        public CharSequence subSequence(final int start, final int end) {
            return new CustomCharSequence(seq.subSequence(start, end));
        }

        @Override
        public boolean equals(final Object obj) {
            if (obj == null || !(obj instanceof CustomCharSequence)) {
                return false;
            }
            final CustomCharSequence other = (CustomCharSequence) obj;
            return seq.equals(other.seq);
        }

        @Override
        public int hashCode() {
            return seq.hashCode();
        }

        @Override
        public String toString() {
            return seq.toString();
        }
    }",False,False
33,testCustomCharSequence(),Method,"""","""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+CustomCharSequence(CharSequence) org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+CustomCharSequence(CharSequence) org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+CustomCharSequence(CharSequence) org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+CustomCharSequence(CharSequence)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO""",292,6,24097,534,1,,"@Test
    public void testCustomCharSequence() {
        assertThat(new CustomCharSequence(FOO), IsNot.<CharSequence>not(FOO));
        assertThat(FOO, IsNot.<CharSequence>not(new CustomCharSequence(FOO)));
        assertEquals(new CustomCharSequence(FOO), new CustomCharSequence(FOO));
    }",False,False
34,testEquals(),Method,"""","""","java.lang.StringBuilder+StringBuilder(String) java.lang.StringBuilder+StringBuilder(String) java.lang.StringBuilder+StringBuilder(String) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) java.lang.StringBuilder+StringBuilder(String) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) java.lang.String+String(char[]) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+CustomCharSequence(CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+CustomCharSequence(CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) java.lang.String+String(char[]) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO""",958,16,24395,541,1,,"@Test
    public void testEquals() {
        final CharSequence fooCs = new StringBuilder(FOO), barCs = new StringBuilder(BAR), foobarCs = new StringBuilder(FOOBAR);
        assertTrue(StringUtils.equals(null, null));
        assertTrue(StringUtils.equals(fooCs, fooCs));
        assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO)));
        assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' })));
        assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO)));
        assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs));
        assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' })));
        assertFalse(StringUtils.equals(fooCs, barCs));
        assertFalse(StringUtils.equals(fooCs, null));
        assertFalse(StringUtils.equals(null, fooCs));
        assertFalse(StringUtils.equals(fooCs, foobarCs));
        assertFalse(StringUtils.equals(foobarCs, fooCs));
    }",False,False
35,testEqualsOnStrings(),Method,"""","""","org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) java.lang.String+String(char[]) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) java.lang.String+String(char[]) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equals(CharSequence,CharSequence)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO""",591,12,25359,558,1,,"@Test
    public void testEqualsOnStrings() {
        assertTrue(StringUtils.equals(null, null));
        assertTrue(StringUtils.equals(FOO, FOO));
        assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));
        assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));
        assertFalse(StringUtils.equals(FOO, BAR));
        assertFalse(StringUtils.equals(FOO, null));
        assertFalse(StringUtils.equals(null, FOO));
        assertFalse(StringUtils.equals(FOO, FOOBAR));
        assertFalse(StringUtils.equals(FOOBAR, FOO));
    }",False,False
36,testEqualsIgnoreCase(),Method,"""","""","org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) java.lang.String+String(char[]) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) java.lang.String+String(char[]) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+equalsIgnoreCase(CharSequence,CharSequence)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO""",677,12,25956,571,1,,"@Test
    public void testEqualsIgnoreCase() {
        assertTrue(StringUtils.equalsIgnoreCase(null, null));
        assertTrue(StringUtils.equalsIgnoreCase(FOO, FOO));
        assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));
        assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));
        assertFalse(StringUtils.equalsIgnoreCase(FOO, BAR));
        assertFalse(StringUtils.equalsIgnoreCase(FOO, null));
        assertFalse(StringUtils.equalsIgnoreCase(null, FOO));
        assertTrue(StringUtils.equalsIgnoreCase("""",""""));
        assertFalse(StringUtils.equalsIgnoreCase(""abcd"",""abcd ""));
    }",False,False
37,testEqualsAny(),Method,"""","""","org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) java.lang.String+String(char[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) java.lang.String+String(char[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) java.lang.String+toUpperCase() java.lang.String+toUpperCase() org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+CustomCharSequence(CharSequence) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) java.lang.StringBuilder+StringBuilder(String) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+CustomCharSequence(CharSequence) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAny(CharSequence,CharSequence[]) java.lang.StringBuilder+StringBuilder(String)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO""",1400,26,26639,584,1,,"@Test
    public void testEqualsAny() {
        assertFalse(StringUtils.equalsAny(FOO));
        assertFalse(StringUtils.equalsAny(FOO, new String[]{}));

        assertTrue(StringUtils.equalsAny(FOO, FOO));
        assertTrue(StringUtils.equalsAny(FOO, BAR, new String(new char[] { 'f', 'o', 'o' })));
        assertFalse(StringUtils.equalsAny(FOO, BAR, new String(new char[] { 'f', 'O', 'O' })));
        assertFalse(StringUtils.equalsAny(FOO, BAR));
        assertFalse(StringUtils.equalsAny(FOO, BAR, null));
        assertFalse(StringUtils.equalsAny(null, FOO));
        assertFalse(StringUtils.equalsAny(FOO, FOOBAR));
        assertFalse(StringUtils.equalsAny(FOOBAR, FOO));

        assertTrue(StringUtils.equalsAny(null, null, null));
        assertFalse(StringUtils.equalsAny(null, FOO, BAR, FOOBAR));
        assertFalse(StringUtils.equalsAny(FOO, null, BAR));
        assertTrue(StringUtils.equalsAny(FOO, BAR, null, """", FOO, BAR));
        assertFalse(StringUtils.equalsAny(FOO, FOO.toUpperCase()));

        assertFalse(StringUtils.equalsAny(null, (CharSequence[]) null));
        assertTrue(StringUtils.equalsAny(FOO, new CustomCharSequence(""foo"")));
        assertTrue(StringUtils.equalsAny(FOO, new StringBuilder(""foo"")));
        assertFalse(StringUtils.equalsAny(FOO, new CustomCharSequence(""fOo"")));
        assertFalse(StringUtils.equalsAny(FOO, new StringBuilder(""fOo"")));
    }",False,False
38,testEqualsAnyIgnoreCase(),Method,"""","""","org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) java.lang.String+toUpperCase() java.lang.String+toUpperCase() org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) java.lang.String+String(char[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) java.lang.String+String(char[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) java.lang.String+toUpperCase() java.lang.String+toUpperCase() org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) java.lang.String+toUpperCase() java.lang.String+toUpperCase() org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence+CustomCharSequence(CharSequence) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+equalsAnyIgnoreCase(CharSequence,CharSequence[]) java.lang.StringBuilder+StringBuilder(String)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+BAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOO""",1518,25,28045,611,1,,"@Test
    public void testEqualsAnyIgnoreCase() {
        assertFalse(StringUtils.equalsAnyIgnoreCase(FOO));
        assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, new String[]{}));

        assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO));
        assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO.toUpperCase()));
        assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO, new String(new char[]{'f', 'o', 'o'})));
        assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, BAR, new String(new char[]{'f', 'O', 'O'})));
        assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, BAR));
        assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, BAR, null));
        assertFalse(StringUtils.equalsAnyIgnoreCase(null, FOO));
        assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, FOOBAR));
        assertFalse(StringUtils.equalsAnyIgnoreCase(FOOBAR, FOO));

        assertTrue(StringUtils.equalsAnyIgnoreCase(null, null, null));
        assertFalse(StringUtils.equalsAnyIgnoreCase(null, FOO, BAR, FOOBAR));
        assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, null, BAR));
        assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, BAR, null, """", FOO.toUpperCase(), BAR));
        assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO.toUpperCase()));

        assertFalse(StringUtils.equalsAnyIgnoreCase(null, (CharSequence[]) null));
        assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, new CustomCharSequence(""fOo"")));
        assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, new StringBuilder(""fOo"")));
    }",False,False
39,testCompare_StringString(),Method,"""","""","org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String) org.apache.commons.lang3.StringUtils+compare(String,String)""","""",685,14,29647,638,1,,"@Test
    public void testCompare_StringString() {
        assertTrue(StringUtils.compare(null, null) == 0);
        assertTrue(StringUtils.compare(null, ""a"") < 0);
        assertTrue(StringUtils.compare(""a"", null) > 0);
        assertTrue(StringUtils.compare(""abc"", ""abc"") == 0);
        assertTrue(StringUtils.compare(""a"", ""b"") < 0);
        assertTrue(StringUtils.compare(""b"", ""a"") > 0);
        assertTrue(StringUtils.compare(""a"", ""B"") > 0);
        assertTrue(StringUtils.compare(""abc"", ""abd"") < 0);
        assertTrue(StringUtils.compare(""ab"", ""abc"") < 0);
        assertTrue(StringUtils.compare(""ab"", ""ab "") < 0);
        assertTrue(StringUtils.compare(""abc"", ""ab "") > 0);
    }",False,False
40,testCompare_StringStringBoolean(),Method,"""","""","org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean) org.apache.commons.lang3.StringUtils+compare(String,String,boolean)""","""",893,16,30338,653,1,,"@Test
    public void testCompare_StringStringBoolean() {
        assertTrue(StringUtils.compare(null, null, false) == 0);
        assertTrue(StringUtils.compare(null, ""a"", true) < 0);
        assertTrue(StringUtils.compare(null, ""a"", false) > 0);
        assertTrue(StringUtils.compare(""a"", null, true) > 0);
        assertTrue(StringUtils.compare(""a"", null, false) < 0);
        assertTrue(StringUtils.compare(""abc"", ""abc"", false) == 0);
        assertTrue(StringUtils.compare(""a"", ""b"", false) < 0);
        assertTrue(StringUtils.compare(""b"", ""a"", false) > 0);
        assertTrue(StringUtils.compare(""a"", ""B"", false) > 0);
        assertTrue(StringUtils.compare(""abc"", ""abd"", false) < 0);
        assertTrue(StringUtils.compare(""ab"", ""abc"", false) < 0);
        assertTrue(StringUtils.compare(""ab"", ""ab "", false) < 0);
        assertTrue(StringUtils.compare(""abc"", ""ab "", false) > 0);
    }",False,False
41,testCompareIgnoreCase_StringString(),Method,"""","""","org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String)""","""",940,16,31237,670,1,,"@Test
    public void testCompareIgnoreCase_StringString() {
        assertTrue(StringUtils.compareIgnoreCase(null, null) == 0);
        assertTrue(StringUtils.compareIgnoreCase(null, ""a"") < 0);
        assertTrue(StringUtils.compareIgnoreCase(""a"", null) > 0);
        assertTrue(StringUtils.compareIgnoreCase(""abc"", ""abc"") == 0);
        assertTrue(StringUtils.compareIgnoreCase(""abc"", ""ABC"") == 0);
        assertTrue(StringUtils.compareIgnoreCase(""a"", ""b"") < 0);
        assertTrue(StringUtils.compareIgnoreCase(""b"", ""a"") > 0);
        assertTrue(StringUtils.compareIgnoreCase(""a"", ""B"") < 0);
        assertTrue(StringUtils.compareIgnoreCase(""A"", ""b"") < 0);
        assertTrue(StringUtils.compareIgnoreCase(""abc"", ""ABD"") < 0);
        assertTrue(StringUtils.compareIgnoreCase(""ab"", ""ABC"") < 0);
        assertTrue(StringUtils.compareIgnoreCase(""ab"", ""AB "") < 0);
        assertTrue(StringUtils.compareIgnoreCase(""abc"", ""AB "") > 0);
    }",False,False
42,testCompareIgnoreCase_StringStringBoolean(),Method,"""","""","org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean) org.apache.commons.lang3.StringUtils+compareIgnoreCase(String,String,boolean)""","""",1182,18,32183,687,1,,"@Test
    public void testCompareIgnoreCase_StringStringBoolean() {
        assertTrue(StringUtils.compareIgnoreCase(null, null, false) == 0);
        assertTrue(StringUtils.compareIgnoreCase(null, ""a"", true) < 0);
        assertTrue(StringUtils.compareIgnoreCase(null, ""a"", false) > 0);
        assertTrue(StringUtils.compareIgnoreCase(""a"", null, true) > 0);
        assertTrue(StringUtils.compareIgnoreCase(""a"", null, false) < 0);
        assertTrue(StringUtils.compareIgnoreCase(""abc"", ""abc"", false) == 0);
        assertTrue(StringUtils.compareIgnoreCase(""abc"", ""ABC"", false) == 0);
        assertTrue(StringUtils.compareIgnoreCase(""a"", ""b"", false) < 0);
        assertTrue(StringUtils.compareIgnoreCase(""b"", ""a"", false) > 0);
        assertTrue(StringUtils.compareIgnoreCase(""a"", ""B"", false) < 0);
        assertTrue(StringUtils.compareIgnoreCase(""A"", ""b"", false) < 0);
        assertTrue(StringUtils.compareIgnoreCase(""abc"", ""ABD"", false) < 0);
        assertTrue(StringUtils.compareIgnoreCase(""ab"", ""ABC"", false) < 0);
        assertTrue(StringUtils.compareIgnoreCase(""ab"", ""AB "", false) < 0);
        assertTrue(StringUtils.compareIgnoreCase(""abc"", ""AB "", false) > 0);
    }",False,False
43,testIndexOf_char(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int) java.lang.StringBuilder+StringBuilder(String)""","""",371,9,33449,707,1,,"@Test
    public void testIndexOf_char() {
        assertEquals(-1, StringUtils.indexOf(null, ' '));
        assertEquals(-1, StringUtils.indexOf("""", ' '));
        assertEquals(0, StringUtils.indexOf(""aabaabaa"", 'a'));
        assertEquals(2, StringUtils.indexOf(""aabaabaa"", 'b'));

        assertEquals(2, StringUtils.indexOf(new StringBuilder(""aabaabaa""), 'b'));
    }",False,False
44,testIndexOf_charInt(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,int,int) java.lang.StringBuilder+StringBuilder(String)""","""",711,14,33826,717,1,,"@Test
    public void testIndexOf_charInt() {
        assertEquals(-1, StringUtils.indexOf(null, ' ', 0));
        assertEquals(-1, StringUtils.indexOf(null, ' ', -1));
        assertEquals(-1, StringUtils.indexOf("""", ' ', 0));
        assertEquals(-1, StringUtils.indexOf("""", ' ', -1));
        assertEquals(0, StringUtils.indexOf(""aabaabaa"", 'a', 0));
        assertEquals(2, StringUtils.indexOf(""aabaabaa"", 'b', 0));
        assertEquals(5, StringUtils.indexOf(""aabaabaa"", 'b', 3));
        assertEquals(-1, StringUtils.indexOf(""aabaabaa"", 'b', 9));
        assertEquals(2, StringUtils.indexOf(""aabaabaa"", 'b', -1));

        assertEquals(5, StringUtils.indexOf(new StringBuilder(""aabaabaa""), 'b', 3));
    }",False,False
45,testIndexOf_String(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence) java.lang.StringBuilder+StringBuilder(String)""","""",555,12,34543,732,1,,"@Test
    public void testIndexOf_String() {
        assertEquals(-1, StringUtils.indexOf(null, null));
        assertEquals(-1, StringUtils.indexOf("""", null));
        assertEquals(0, StringUtils.indexOf("""", """"));
        assertEquals(0, StringUtils.indexOf(""aabaabaa"", ""a""));
        assertEquals(2, StringUtils.indexOf(""aabaabaa"", ""b""));
        assertEquals(1, StringUtils.indexOf(""aabaabaa"", ""ab""));
        assertEquals(0, StringUtils.indexOf(""aabaabaa"", """"));

        assertEquals(2, StringUtils.indexOf(new StringBuilder(""aabaabaa""), ""b""));
    }",False,False
46,testIndexOf_StringInt(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOf(CharSequence,CharSequence,int) java.lang.StringBuilder+StringBuilder(String)""","""",1752,31,35104,745,1,,"@Test
    public void testIndexOf_StringInt() {
        assertEquals(-1, StringUtils.indexOf(null, null, 0));
        assertEquals(-1, StringUtils.indexOf(null, null, -1));
        assertEquals(-1, StringUtils.indexOf(null, """", 0));
        assertEquals(-1, StringUtils.indexOf(null, """", -1));
        assertEquals(-1, StringUtils.indexOf("""", null, 0));
        assertEquals(-1, StringUtils.indexOf("""", null, -1));
        assertEquals(0, StringUtils.indexOf("""", """", 0));
        assertEquals(0, StringUtils.indexOf("""", """", -1));
        assertEquals(0, StringUtils.indexOf("""", """", 9));
        assertEquals(0, StringUtils.indexOf(""abc"", """", 0));
        assertEquals(0, StringUtils.indexOf(""abc"", """", -1));
        assertEquals(3, StringUtils.indexOf(""abc"", """", 9));
        assertEquals(3, StringUtils.indexOf(""abc"", """", 3));
        assertEquals(0, StringUtils.indexOf(""aabaabaa"", ""a"", 0));
        assertEquals(2, StringUtils.indexOf(""aabaabaa"", ""b"", 0));
        assertEquals(1, StringUtils.indexOf(""aabaabaa"", ""ab"", 0));
        assertEquals(5, StringUtils.indexOf(""aabaabaa"", ""b"", 3));
        assertEquals(-1, StringUtils.indexOf(""aabaabaa"", ""b"", 9));
        assertEquals(2, StringUtils.indexOf(""aabaabaa"", ""b"", -1));
        assertEquals(2,StringUtils.indexOf(""aabaabaa"", """", 2));

        // Test that startIndex works correctly, i.e. cannot match before startIndex
        assertEquals(7, StringUtils.indexOf(""12345678"", ""8"", 5));
        assertEquals(7, StringUtils.indexOf(""12345678"", ""8"", 6));
        assertEquals(7, StringUtils.indexOf(""12345678"", ""8"", 7)); // 7 is last index
        assertEquals(-1, StringUtils.indexOf(""12345678"", ""8"", 8));

        assertEquals(5, StringUtils.indexOf(new StringBuilder(""aabaabaa""), ""b"", 3));
    }",False,False
47,testIndexOfAny_StringCharArray(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[])""","""",829,16,36862,777,1,,"@Test
    public void testIndexOfAny_StringCharArray() {
        assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));
        assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));
        assertEquals(-1, StringUtils.indexOfAny(null, 'a','b'));

        assertEquals(-1, StringUtils.indexOfAny("""", (char[]) null));
        assertEquals(-1, StringUtils.indexOfAny("""", new char[0]));
        assertEquals(-1, StringUtils.indexOfAny("""", 'a','b'));

        assertEquals(-1, StringUtils.indexOfAny(""zzabyycdxx"", (char[]) null));
        assertEquals(-1, StringUtils.indexOfAny(""zzabyycdxx"", new char[0]));
        assertEquals(0, StringUtils.indexOfAny(""zzabyycdxx"", 'z','a'));
        assertEquals(3, StringUtils.indexOfAny(""zzabyycdxx"", 'b','y'));
        assertEquals(-1, StringUtils.indexOfAny(""ab"", 'z'));
    }",False,False
48,testIndexOfAny_StringCharArrayWithSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray()""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001""",562,10,37697,797,1,"/** 
 * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    @Test
    public void testIndexOfAny_StringCharArrayWithSupplementaryChars() {
        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));
        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));
    }",False,False
49,testIndexOfAny_StringString(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String)""","""",787,16,38265,805,1,,"@Test
    public void testIndexOfAny_StringString() {
        assertEquals(-1, StringUtils.indexOfAny(null, (String) null));
        assertEquals(-1, StringUtils.indexOfAny(null, """"));
        assertEquals(-1, StringUtils.indexOfAny(null, ""ab""));

        assertEquals(-1, StringUtils.indexOfAny("""", (String) null));
        assertEquals(-1, StringUtils.indexOfAny("""", """"));
        assertEquals(-1, StringUtils.indexOfAny("""", ""ab""));

        assertEquals(-1, StringUtils.indexOfAny(""zzabyycdxx"", (String) null));
        assertEquals(-1, StringUtils.indexOfAny(""zzabyycdxx"", """"));
        assertEquals(0, StringUtils.indexOfAny(""zzabyycdxx"", ""za""));
        assertEquals(3, StringUtils.indexOfAny(""zzabyycdxx"", ""by""));
        assertEquals(-1, StringUtils.indexOfAny(""ab"", ""z""));
    }",False,False
50,testIndexOfAny_StringStringArray(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,CharSequence[])""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR_SUB_ARRAY org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR_SUB_ARRAY org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR""",1108,17,39058,822,1,,"@Test
    public void testIndexOfAny_StringStringArray() {
        assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));
        assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));
        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null));
        assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));
        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));
        assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));
        assertEquals(-1, StringUtils.indexOfAny("""", new String[0]));
        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {""llll""}));
        assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {""""}));
        assertEquals(0, StringUtils.indexOfAny("""", new String[] {""""}));
        assertEquals(-1, StringUtils.indexOfAny("""", new String[] {""a""}));
        assertEquals(-1, StringUtils.indexOfAny("""", new String[] {null}));
        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null}));
        assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null}));
    }",False,False
51,testIndexOfAny_StringStringWithSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String) org.apache.commons.lang3.StringUtils+indexOfAny(CharSequence,String)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001""",503,10,40172,843,1,"/** 
 * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
 */
","/**
     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html
     */
    @Test
    public void testIndexOfAny_StringStringWithSupplementaryChars() {
        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));
        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));
        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));
        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));
    }",False,False
52,testIndexOfAnyBut_StringCharArray(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[])""","""",897,18,40681,851,1,,"@Test
    public void testIndexOfAnyBut_StringCharArray() {
        assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));
        assertEquals(-1, StringUtils.indexOfAnyBut(null));
        assertEquals(-1, StringUtils.indexOfAnyBut(null, 'a','b'));

        assertEquals(-1, StringUtils.indexOfAnyBut("""", (char[]) null));
        assertEquals(-1, StringUtils.indexOfAnyBut(""""));
        assertEquals(-1, StringUtils.indexOfAnyBut("""", 'a','b'));

        assertEquals(-1, StringUtils.indexOfAnyBut(""zzabyycdxx"", (char[]) null));
        assertEquals(-1, StringUtils.indexOfAnyBut(""zzabyycdxx""));
        assertEquals(3, StringUtils.indexOfAnyBut(""zzabyycdxx"", 'z','a'));
        assertEquals(0, StringUtils.indexOfAnyBut(""zzabyycdxx"", 'b','y'));
        assertEquals(-1, StringUtils.indexOfAnyBut(""aba"", 'a', 'b'));
        assertEquals(0, StringUtils.indexOfAnyBut(""aba"", 'z'));

    }",False,False
53,testIndexOfAnyBut_StringCharArrayWithSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray() org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray()""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001""",474,7,41584,870,1,,"@Test
    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() {
        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));
        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));
        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));
        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));
    }",False,False
54,testIndexOfAnyBut_StringString(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence)""","""",822,16,42064,878,1,,"@Test
    public void testIndexOfAnyBut_StringString() {
        assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));
        assertEquals(-1, StringUtils.indexOfAnyBut(null, """"));
        assertEquals(-1, StringUtils.indexOfAnyBut(null, ""ab""));

        assertEquals(-1, StringUtils.indexOfAnyBut("""", (String) null));
        assertEquals(-1, StringUtils.indexOfAnyBut("""", """"));
        assertEquals(-1, StringUtils.indexOfAnyBut("""", ""ab""));

        assertEquals(-1, StringUtils.indexOfAnyBut(""zzabyycdxx"", (String) null));
        assertEquals(-1, StringUtils.indexOfAnyBut(""zzabyycdxx"", """"));
        assertEquals(3, StringUtils.indexOfAnyBut(""zzabyycdxx"", ""za""));
        assertEquals(0, StringUtils.indexOfAnyBut(""zzabyycdxx"", ""by""));
        assertEquals(0, StringUtils.indexOfAnyBut(""ab"", ""z""));
    }",False,False
55,testIndexOfAnyBut_StringStringWithSupplementaryChars(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfAnyBut(CharSequence,CharSequence)""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20000 org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+CharU20001""",415,7,42892,895,1,,"@Test
    public void testIndexOfAnyBut_StringStringWithSupplementaryChars() {
        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));
        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));
        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));
        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));
    }",False,False
56,testIndexOfIgnoreCase_String(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence)""","""",839,14,43313,903,1,,"@Test
    public void testIndexOfIgnoreCase_String() {
        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, """"));
        assertEquals(-1, StringUtils.indexOfIgnoreCase("""", null));
        assertEquals(0, StringUtils.indexOfIgnoreCase("""", """"));
        assertEquals(0, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""a""));
        assertEquals(0, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""A""));
        assertEquals(2, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""b""));
        assertEquals(2, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""B""));
        assertEquals(1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""ab""));
        assertEquals(1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB""));
        assertEquals(0, StringUtils.indexOfIgnoreCase(""aabaabaa"", """"));
    }",False,False
57,testIndexOfIgnoreCase_StringInt(),Method,"""","""","org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+indexOfIgnoreCase(CharSequence,CharSequence,int)""","""",1203,18,44158,918,1,,"@Test
    public void testIndexOfIgnoreCase_StringInt() {
        assertEquals(1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", -1));
        assertEquals(1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 0));
        assertEquals(1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 1));
        assertEquals(4, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 2));
        assertEquals(4, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 3));
        assertEquals(4, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 4));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 5));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 6));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 7));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 8));
        assertEquals(1, StringUtils.indexOfIgnoreCase(""aab"", ""AB"", 1));
        assertEquals(5, StringUtils.indexOfIgnoreCase(""aabaabaa"", """", 5));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(""ab"", ""AAB"", 0));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(""aab"", ""AAB"", 1));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(""abc"", """", 9));
    }",False,False
58,testLastIndexOf_char(),Method,"""","""","org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int) java.lang.StringBuilder+StringBuilder(String)""","""",395,9,45367,937,1,,"@Test
    public void testLastIndexOf_char() {
        assertEquals(-1, StringUtils.lastIndexOf(null, ' '));
        assertEquals(-1, StringUtils.lastIndexOf("""", ' '));
        assertEquals(7, StringUtils.lastIndexOf(""aabaabaa"", 'a'));
        assertEquals(5, StringUtils.lastIndexOf(""aabaabaa"", 'b'));

        assertEquals(5, StringUtils.lastIndexOf(new StringBuilder(""aabaabaa""), 'b'));
    }",False,False
59,testLastIndexOf_charInt(),Method,"""","""","org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,int,int) java.lang.StringBuilder+StringBuilder(String)""","""",825,15,45768,947,1,,"@Test
    public void testLastIndexOf_charInt() {
        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));
        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));
        assertEquals(-1, StringUtils.lastIndexOf("""", ' ', 0));
        assertEquals(-1, StringUtils.lastIndexOf("""", ' ', -1));
        assertEquals(7, StringUtils.lastIndexOf(""aabaabaa"", 'a', 8));
        assertEquals(5, StringUtils.lastIndexOf(""aabaabaa"", 'b', 8));
        assertEquals(2, StringUtils.lastIndexOf(""aabaabaa"", 'b', 3));
        assertEquals(5, StringUtils.lastIndexOf(""aabaabaa"", 'b', 9));
        assertEquals(-1, StringUtils.lastIndexOf(""aabaabaa"", 'b', -1));
        assertEquals(0, StringUtils.lastIndexOf(""aabaabaa"", 'a', 0));

        assertEquals(2, StringUtils.lastIndexOf(new StringBuilder(""aabaabaa""), 'b', 2));
    }",False,False
60,testLastIndexOf_String(),Method,"""","""","org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence) java.lang.StringBuilder+StringBuilder(String)""","""",652,13,46599,963,1,,"@Test
    public void testLastIndexOf_String() {
        assertEquals(-1, StringUtils.lastIndexOf(null, null));
        assertEquals(-1, StringUtils.lastIndexOf("""", null));
        assertEquals(-1, StringUtils.lastIndexOf("""", ""a""));
        assertEquals(0, StringUtils.lastIndexOf("""", """"));
        assertEquals(8, StringUtils.lastIndexOf(""aabaabaa"", """"));
        assertEquals(7, StringUtils.lastIndexOf(""aabaabaa"", ""a""));
        assertEquals(5, StringUtils.lastIndexOf(""aabaabaa"", ""b""));
        assertEquals(4, StringUtils.lastIndexOf(""aabaabaa"", ""ab""));

        assertEquals(4, StringUtils.lastIndexOf(new StringBuilder(""aabaabaa""), ""ab""));
    }",False,False
61,testLastIndexOf_StringInt(),Method,"""","""","org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOf(CharSequence,CharSequence,int) java.lang.StringBuilder+StringBuilder(String)""","""",2220,37,47257,977,1,,"@Test
    public void testLastIndexOf_StringInt() {
        assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));
        assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));
        assertEquals(-1, StringUtils.lastIndexOf(null, """", 0));
        assertEquals(-1, StringUtils.lastIndexOf(null, """", -1));
        assertEquals(-1, StringUtils.lastIndexOf("""", null, 0));
        assertEquals(-1, StringUtils.lastIndexOf("""", null, -1));
        assertEquals(0, StringUtils.lastIndexOf("""", """", 0));
        assertEquals(-1, StringUtils.lastIndexOf("""", """", -1));
        assertEquals(0, StringUtils.lastIndexOf("""", """", 9));
        assertEquals(0, StringUtils.lastIndexOf(""abc"", """", 0));
        assertEquals(-1, StringUtils.lastIndexOf(""abc"", """", -1));
        assertEquals(3, StringUtils.lastIndexOf(""abc"", """", 9));
        assertEquals(7, StringUtils.lastIndexOf(""aabaabaa"", ""a"", 8));
        assertEquals(5, StringUtils.lastIndexOf(""aabaabaa"", ""b"", 8));
        assertEquals(4, StringUtils.lastIndexOf(""aabaabaa"", ""ab"", 8));
        assertEquals(2, StringUtils.lastIndexOf(""aabaabaa"", ""b"", 3));
        assertEquals(5, StringUtils.lastIndexOf(""aabaabaa"", ""b"", 9));
        assertEquals(-1, StringUtils.lastIndexOf(""aabaabaa"", ""b"", -1));
        assertEquals(-1, StringUtils.lastIndexOf(""aabaabaa"", ""b"", 0));
        assertEquals(0, StringUtils.lastIndexOf(""aabaabaa"", ""a"", 0));
        assertEquals(-1, StringUtils.lastIndexOf(""aabaabaa"", ""a"", -1));

        // Test that fromIndex works correctly, i.e. cannot match after fromIndex
        assertEquals(7, StringUtils.lastIndexOf(""12345678"", ""8"", 9));
        assertEquals(7, StringUtils.lastIndexOf(""12345678"", ""8"", 8));
        assertEquals(7, StringUtils.lastIndexOf(""12345678"", ""8"", 7)); // 7 is last index
        assertEquals(-1, StringUtils.lastIndexOf(""12345678"", ""8"", 6));

        assertEquals(-1, StringUtils.lastIndexOf(""aabaabaa"", ""b"", 1));
        assertEquals(2, StringUtils.lastIndexOf(""aabaabaa"", ""b"", 2));
        assertEquals(2, StringUtils.lastIndexOf(""aabaabaa"", ""ba"", 2));
        assertEquals(2, StringUtils.lastIndexOf(""aabaabaa"", ""ba"", 3));

        assertEquals(2, StringUtils.lastIndexOf(new StringBuilder(""aabaabaa""), ""b"", 3));
    }",False,False
62,testLastIndexOfAny_StringStringArray(),Method,"""","""","org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[]) org.apache.commons.lang3.StringUtils+lastIndexOfAny(CharSequence,CharSequence[])""","org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR_SUB_ARRAY org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR_SUB_ARRAY org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR org.apache.commons.lang3.StringUtilsEqualsIndexOfTest+FOOBAR""",1609,21,49483,1015,1,,"@Test
    public void testLastIndexOfAny_StringStringArray() {
        assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ...
        assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation
        assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag
        assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));
        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ...
        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation
        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); // Missing vararg
        assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));
        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));
        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));
        assertEquals(-1, StringUtils.lastIndexOfAny("""", new String[0]));
        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {""llll""}));
        assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {""""}));
        assertEquals(0, StringUtils.lastIndexOfAny("""", new String[] {""""}));
        assertEquals(-1, StringUtils.lastIndexOfAny("""", new String[] {""a""}));
        assertEquals(-1, StringUtils.lastIndexOfAny("""", new String[] {null}));
        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null}));
        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null}));
    }",False,False
63,testLastIndexOfIgnoreCase_String(),Method,"""","""","org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence)""","""",1105,17,51098,1037,1,,"@Test
    public void testLastIndexOfIgnoreCase_String() {
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("""", null));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, """"));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("""", ""a""));
        assertEquals(0, StringUtils.lastIndexOfIgnoreCase("""", """"));
        assertEquals(8, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", """"));
        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""a""));
        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""A""));
        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""b""));
        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""B""));
        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""ab""));
        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""AB""));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(""ab"", ""AAB""));
        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(""aab"", ""AAB""));
    }",False,False
64,testLastIndexOfIgnoreCase_StringInt(),Method,"""","""","org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastIndexOfIgnoreCase(CharSequence,CharSequence,int)""","""",1677,24,52209,1055,1,,"@Test
    public void testLastIndexOfIgnoreCase_StringInt() {
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, """", 0));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, """", -1));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("""", null, 0));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("""", null, -1));
        assertEquals(0, StringUtils.lastIndexOfIgnoreCase("""", """", 0));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("""", """", -1));
        assertEquals(0, StringUtils.lastIndexOfIgnoreCase("""", """", 9));
        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(""abc"", """", 0));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(""abc"", """", -1));
        assertEquals(3, StringUtils.lastIndexOfIgnoreCase(""abc"", """", 9));
        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""A"", 8));
        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""B"", 8));
        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""AB"", 8));
        assertEquals(2, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""B"", 3));
        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""B"", 9));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""B"", -1));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""B"", 0));
        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""A"", 0));
        assertEquals(1, StringUtils.lastIndexOfIgnoreCase(""aab"", ""AB"", 1));
    }",False,False
65,testLastOrdinalIndexOf(),Method,"""","""","org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+lastOrdinalIndexOf(CharSequence,CharSequence,int)""","""",896,14,53892,1080,1,,"@Test
    public void testLastOrdinalIndexOf() {
        assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, ""*"", 42) );
        assertEquals(-1, StringUtils.lastOrdinalIndexOf(""*"", null, 42) );
        assertEquals(0, StringUtils.lastOrdinalIndexOf("""", """", 42) );
        assertEquals(7, StringUtils.lastOrdinalIndexOf(""aabaabaa"", ""a"", 1) );
        assertEquals(6, StringUtils.lastOrdinalIndexOf(""aabaabaa"", ""a"", 2) );
        assertEquals(5, StringUtils.lastOrdinalIndexOf(""aabaabaa"", ""b"", 1) );
        assertEquals(2, StringUtils.lastOrdinalIndexOf(""aabaabaa"", ""b"", 2) );
        assertEquals(4, StringUtils.lastOrdinalIndexOf(""aabaabaa"", ""ab"", 1) );
        assertEquals(1, StringUtils.lastOrdinalIndexOf(""aabaabaa"", ""ab"", 2) );
        assertEquals(8, StringUtils.lastOrdinalIndexOf(""aabaabaa"", """", 1) );
        assertEquals(8, StringUtils.lastOrdinalIndexOf(""aabaabaa"", """", 2) );
    }",False,False
66,testOrdinalIndexOf(),Method,"""","""","org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int)""","java.lang.Integer+MIN_VALUE java.lang.Integer+MIN_VALUE java.lang.Integer+MIN_VALUE java.lang.Integer+MIN_VALUE java.lang.Integer+MIN_VALUE java.lang.Integer+MIN_VALUE java.lang.Integer+MIN_VALUE java.lang.Integer+MAX_VALUE java.lang.Integer+MAX_VALUE java.lang.Integer+MAX_VALUE java.lang.Integer+MAX_VALUE java.lang.Integer+MAX_VALUE java.lang.Integer+MAX_VALUE java.lang.Integer+MAX_VALUE""",5079,80,54794,1095,1,,"@Test
    public void testOrdinalIndexOf() {
        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", null, Integer.MIN_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", """", Integer.MIN_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""a"", Integer.MIN_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""b"", Integer.MIN_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""ab"", Integer.MIN_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", """", Integer.MIN_VALUE));

        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", null, -1));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", """", -1));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""a"", -1));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""b"", -1));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""ab"", -1));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", """", -1));

        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", null, 0));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", """", 0));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""a"", 0));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""b"", 0));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""ab"", 0));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", """", 0));

        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", null, 1));
        assertEquals(0, StringUtils.ordinalIndexOf("""", """", 1));
        assertEquals(0, StringUtils.ordinalIndexOf(""aabaabaa"", ""a"", 1));
        assertEquals(2, StringUtils.ordinalIndexOf(""aabaabaa"", ""b"", 1));
        assertEquals(1, StringUtils.ordinalIndexOf(""aabaabaa"", ""ab"", 1));
        assertEquals(0, StringUtils.ordinalIndexOf(""aabaabaa"", """", 1));

        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", null, 2));
        assertEquals(0, StringUtils.ordinalIndexOf("""", """", 2));
        assertEquals(1, StringUtils.ordinalIndexOf(""aabaabaa"", ""a"", 2));
        assertEquals(5, StringUtils.ordinalIndexOf(""aabaabaa"", ""b"", 2));
        assertEquals(4, StringUtils.ordinalIndexOf(""aabaabaa"", ""ab"", 2));
        assertEquals(0, StringUtils.ordinalIndexOf(""aabaabaa"", """", 2));

        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", null, Integer.MAX_VALUE));
        assertEquals(0, StringUtils.ordinalIndexOf("""", """", Integer.MAX_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""a"", Integer.MAX_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""b"", Integer.MAX_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""ab"", Integer.MAX_VALUE));
        assertEquals(0, StringUtils.ordinalIndexOf(""aabaabaa"", """", Integer.MAX_VALUE));

        assertEquals(-1, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 0));
        assertEquals(0, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 1));
        assertEquals(1, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 2));
        assertEquals(2, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 3));
        assertEquals(3, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 4));
        assertEquals(4, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 5));
        assertEquals(5, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 6));
        assertEquals(6, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 7));
        assertEquals(7, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 8));
        assertEquals(8, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 9));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 10));

        // match at each possible position
        assertEquals(0, StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 1));
        assertEquals(1, StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2));
        assertEquals(2, StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 3));
        assertEquals(3, StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 4));
        assertEquals(4, StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 5));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 6));

        assertEquals(0, StringUtils.ordinalIndexOf(""ababab"", ""aba"", 1));
        assertEquals(2, StringUtils.ordinalIndexOf(""ababab"", ""aba"", 2));
        assertEquals(-1, StringUtils.ordinalIndexOf(""ababab"", ""aba"", 3));

        assertEquals(0, StringUtils.ordinalIndexOf(""abababab"", ""abab"", 1));
        assertEquals(2, StringUtils.ordinalIndexOf(""abababab"", ""abab"", 2));
        assertEquals(4, StringUtils.ordinalIndexOf(""abababab"", ""abab"", 3));
        assertEquals(-1, StringUtils.ordinalIndexOf(""abababab"", ""abab"", 4));

    }",False,False
67,testLANG1193(),Method,"""","""","org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int)""","""",121,4,59883,1176,1,,"@Test
    public void testLANG1193() {
        assertEquals(0, StringUtils.ordinalIndexOf(""abc"", ""ab"", 1));        
    }",False,False
68,testLANG1241_1(),Method,"""","""","org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int)""","""",356,8,60010,1182,1,,"@Test
    // Non-overlapping test
    public void testLANG1241_1() {
        //                                          0  3  6
        assertEquals(0, StringUtils.ordinalIndexOf(""abaabaab"", ""ab"", 1));
        assertEquals(3, StringUtils.ordinalIndexOf(""abaabaab"", ""ab"", 2));
        assertEquals(6, StringUtils.ordinalIndexOf(""abaabaab"", ""ab"", 3));
    }",False,False
69,testLANG1241_2(),Method,"""","""","org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int) org.apache.commons.lang3.StringUtils+ordinalIndexOf(CharSequence,CharSequence,int)""","""",587,11,60372,1191,1,,"@Test
    // Overlapping matching test
    public void testLANG1241_2() {
        //                                          0 2 4
        assertEquals(0, StringUtils.ordinalIndexOf(""abababa"", ""aba"", 1));
        assertEquals(2, StringUtils.ordinalIndexOf(""abababa"", ""aba"", 2));
        assertEquals(4, StringUtils.ordinalIndexOf(""abababa"", ""aba"", 3));
        assertEquals(0, StringUtils.ordinalIndexOf(""abababab"", ""abab"", 1));
        assertEquals(2, StringUtils.ordinalIndexOf(""abababab"", ""abab"", 2));
        assertEquals(4, StringUtils.ordinalIndexOf(""abababab"", ""abab"", 3));
    }",False,False
