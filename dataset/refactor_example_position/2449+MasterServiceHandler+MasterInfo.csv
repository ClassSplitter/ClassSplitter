index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,annotation,full text,removed
1,LOG,Field,,,,,79,1,1236,43,18,,private final Logger LOG = LoggerFactory.getLogger(MasterServiceHandler.class);,False
2,ADDRESS,Field,,,,,40,1,1318,44,18,,private final InetSocketAddress ADDRESS;,False
3,START_TIME_NS_PREFIX,Field,,,,,40,1,1361,45,18,,private final long START_TIME_NS_PREFIX;,True
4,START_TIME_MS,Field,,,,,33,1,1404,46,18,,private final long START_TIME_MS;,True
5,mDatasetCounter,Field,,,,,61,1,1441,48,2,,private AtomicInteger mDatasetCounter = new AtomicInteger(0);,False
6,mUserCounter,Field,,,,,58,1,1505,49,2,,private AtomicInteger mUserCounter = new AtomicInteger(0);,True
7,mWorkerCounter,Field,,,,,60,1,1566,50,2,,private AtomicInteger mWorkerCounter = new AtomicInteger(0);,True
8,mFiles,Field,,,,,67,1,1688,53,2,,"private Map<Integer, INode> mFiles = new HashMap<Integer, INode>();",False
9,mFilePathToId,Field,,,,,76,1,1758,54,2,,"private Map<String, Integer> mFilePathToId = new HashMap<String, Integer>();",False
10,mWorkers,Field,,,,,73,1,2061,60,2,,"private Map<Long, WorkerInfo> mWorkers = new HashMap<Long, WorkerInfo>();",True
11,mWorkerAddressToId,Field,,,,,97,1,2137,61,2,,"private Map<InetSocketAddress, Long> mWorkerAddressToId = new HashMap<InetSocketAddress, Long>();",True
12,mLostWorkers,Field,,,,,88,1,2237,62,2,,private BlockingQueue<WorkerInfo> mLostWorkers = new ArrayBlockingQueue<WorkerInfo>(32);,True
13,mMasterLogWriter,Field,,,,,41,1,2353,65,2,,private MasterLogWriter mMasterLogWriter;,True
14,mHeartbeatThread,Field,,,,,32,1,2398,67,2,,private Thread mHeartbeatThread;,True
15,mWhiteList,Field,,,,,30,1,2434,69,2,,private PrefixList mWhiteList;,True
16,mPinList,Field,,,,,28,1,2467,70,2,,private PrefixList mPinList;,True
17,mIdPinList,Field,,,,,33,1,2498,71,2,,private List<Integer> mIdPinList;,True
18,mWebServer,Field,,,,,29,1,2535,73,2,,private WebServer mWebServer;,True
19,MasterHeartbeatExecutor,MemberClass,,,tachyon.MasterServiceHandler.MasterHeartbeatExecutor+MasterHeartbeatExecutor() tachyon.MasterServiceHandler.MasterHeartbeatExecutor+heartbeat() java.util.HashSet+HashSet() java.util.Map+entrySet() java.util.Map+entrySet() tachyon.CommonUtils+getCurrentMs() tachyon.CommonUtils+getCurrentMs() tachyon.WorkerInfo+getLastUpdatedTimeMs() java.util.Map.Entry+getValue() java.util.Map.Entry+getValue() tachyon.WorkerInfo+getLastUpdatedTimeMs() java.util.Map.Entry+getKey() java.util.Map.Entry+getKey() java.util.Map.Entry+getValue() java.util.Map.Entry+getValue() java.util.concurrent.BlockingQueue+add(E) java.util.concurrent.BlockingQueue+add(E) java.util.Map.Entry+getValue() java.util.Map.Entry+getValue() java.util.Set+add(E) java.util.Set+add(E) java.util.Map.Entry+getKey() java.util.Map.Entry+getKey() java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Collection+size() java.util.Collection+size() java.util.Queue+poll() java.util.Queue+poll() tachyon.WorkerInfo+getFiles() tachyon.WorkerInfo+getFiles() java.util.Map+get(Object) java.util.Map+get(Object) tachyon.WorkerInfo+getId() tachyon.WorkerInfo+getId() tachyon.WorkerInfo+getId() tachyon.WorkerInfo+getId() java.lang.Runtime+exec(String) java.lang.Runtime+getRuntime() java.lang.Runtime+getRuntime() java.lang.Runtime+exec(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage(),tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mWorkers tachyon.Config+WORKER_TIMEOUT_MS tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mLostWorkers tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mLostWorkers tachyon.MasterServiceHandler+mLostWorkers tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFiles tachyon.INode+mLocations tachyon.MasterServiceHandler+LOG tachyon.Config+TACHYON_HOME tachyon.MasterServiceHandler+LOG,1776,61,-1,-1,1,"/** 
 * System periodical status check.
 * @author Haoyuan
 */
","/**
   * System periodical status check.
   * 
   * @author Haoyuan
   */
  public class MasterHeartbeatExecutor implements HeartbeatExecutor {
    public MasterHeartbeatExecutor() {
    }

    @Override
    public void heartbeat() {
      LOG.info(""Periodical system status checking..."");

      Set<Long> lostWorkers = new HashSet<Long>();

      synchronized (mWorkers) {
        for (Entry<Long, WorkerInfo> worker: mWorkers.entrySet()) {
          if (CommonUtils.getCurrentMs() - worker.getValue().getLastUpdatedTimeMs() 
              > Config.WORKER_TIMEOUT_MS) {
            LOG.error(""The worker "" + worker.getKey() + "" ( "" + worker.getValue() + 
                "" ) got timed out!"");
            mLostWorkers.add(worker.getValue());
            lostWorkers.add(worker.getKey());
          }
        }
        for (long workerId: lostWorkers) {
          mWorkers.remove(workerId);
        }
      }

      boolean hadFailedWorker = false;

      while (mLostWorkers.size() != 0) {
        hadFailedWorker = true;
        WorkerInfo worker = mLostWorkers.poll();

        for (int id: worker.getFiles()) {
          synchronized (mFiles) {
            INode tFile = mFiles.get(id);
            if (tFile != null) {
              Map<Long, NetAddress> locations = tFile.mLocations;

              if (locations.containsKey(worker.getId())) {
                locations.remove(worker.getId());
              }
            }
          }
        }
      }

      if (hadFailedWorker) {
        LOG.warn(""Restarting failed workers"");
        try {
          java.lang.Runtime.getRuntime().exec(Config.TACHYON_HOME + 
              ""/bin/restart-failed-tachyon-workers.sh"");
        } catch (IOException e) {
          LOG.error(e.getMessage());
        }
      }
    }
  }",False
20,MasterServiceHandler(InetSocketAddress),Method,,,"java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() tachyon.PrefixList+PrefixList(ArrayList<String>) tachyon.PrefixList+PrefixList(ArrayList<String>) java.util.Collections+synchronizedList(List) java.util.Collections+synchronizedList(List) java.util.ArrayList+ArrayList() tachyon.MasterServiceHandler+recoveryFromLog() tachyon.MasterServiceHandler+recoveryFromLog() tachyon.MasterServiceHandler+writeCheckpoint() tachyon.MasterServiceHandler+writeCheckpoint() tachyon.HdfsClient+HdfsClient(String) tachyon.MasterLogWriter+MasterLogWriter(String) java.lang.Thread+Thread(Runnable) tachyon.HeartbeatThread+HeartbeatThread(HeartbeatExecutor,int) tachyon.MasterServiceHandler.MasterHeartbeatExecutor+MasterHeartbeatExecutor() java.lang.Thread+start() java.lang.Thread+start() tachyon.WebServer+WebServer(String,InetSocketAddress) java.net.InetSocketAddress+InetSocketAddress(String,int) java.net.InetSocketAddress+getHostName() java.net.InetSocketAddress+getHostName() tachyon.WebServer+setHandler(AbstractHandler) tachyon.WebServer+setHandler(AbstractHandler) tachyon.WebServerMasterHandler+WebServerMasterHandler(MasterServiceHandler) tachyon.WebServer+startWebServer() tachyon.WebServer+startWebServer()",tachyon.MasterServiceHandler+START_TIME_MS tachyon.MasterServiceHandler+START_TIME_NS_PREFIX tachyon.MasterServiceHandler+START_TIME_MS tachyon.MasterServiceHandler+START_TIME_MS tachyon.MasterServiceHandler+ADDRESS tachyon.MasterServiceHandler+mWhiteList tachyon.Config+WHITELIST tachyon.MasterServiceHandler+mPinList tachyon.Config+PINLIST tachyon.MasterServiceHandler+mIdPinList tachyon.Config+MASTER_SUBSUME_HDFS tachyon.Config+HDFS_ADDRESS tachyon.MasterServiceHandler+mMasterLogWriter tachyon.Config+MASTER_LOG_FILE tachyon.MasterServiceHandler+mHeartbeatThread tachyon.Config+MASTER_HEARTBEAT_INTERVAL_MS tachyon.MasterServiceHandler+mHeartbeatThread tachyon.MasterServiceHandler+mWebServer tachyon.Config+MASTER_WEB_PORT tachyon.MasterServiceHandler+mWebServer tachyon.MasterServiceHandler+mWebServer,1137,30,4348,137,1,,"public MasterServiceHandler(InetSocketAddress address) {
    START_TIME_MS = System.currentTimeMillis();
    // TODO This name need to be changed.
    START_TIME_NS_PREFIX = START_TIME_MS - (START_TIME_MS % 1000000);
    ADDRESS = address;

    mWhiteList = new PrefixList(Config.WHITELIST);
    mPinList = new PrefixList(Config.PINLIST);
    mIdPinList = Collections.synchronizedList(new ArrayList<Integer>());

    // TODO Fault recovery: need user counter info;
    recoveryFromLog();
    writeCheckpoint();

    if (Config.MASTER_SUBSUME_HDFS) {
      HdfsClient hdfs = new HdfsClient(Config.HDFS_ADDRESS);
      //      subsumeHdfs(hdfs, Config.HDFS_ADDRESS);
    }

    mMasterLogWriter = new MasterLogWriter(Config.MASTER_LOG_FILE);

    mHeartbeatThread = new Thread(new HeartbeatThread(
        new MasterHeartbeatExecutor(), Config.MASTER_HEARTBEAT_INTERVAL_MS));
    mHeartbeatThread.start();

    mWebServer = new WebServer(""Tachyon Master Server"",
        new InetSocketAddress(address.getHostName(), Config.MASTER_WEB_PORT));
    mWebServer.setHandler(new WebServerMasterHandler(this));
    mWebServer.startWebServer();
  }",False
21,cmd_ls(String),Method,,,java.util.ArrayList+ArrayList() java.util.Map+values() java.util.Map+values() java.lang.String+startsWith(String) tachyon.INode+getName() tachyon.INode+getName() java.lang.String+startsWith(String) java.util.ArrayList+add(E) java.util.ArrayList+add(E) tachyon.INode+getName() tachyon.INode+getName(),tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFiles,340,13,5489,169,1,,"@Override
  public List<String> cmd_ls(String folder) throws TException {
    ArrayList<String> ret = new ArrayList<String>();
    synchronized (mFiles) {
      for (INode fileInfo : mFiles.values()) {
        if (fileInfo.getName().startsWith(folder)) {
          ret.add(fileInfo.getName());
        }
      }

      return ret;
    }
  }",False
22,getStarttimeMs(),Method,,,,tachyon.MasterServiceHandler+START_TIME_MS,60,3,5833,182,1,,"public long getStarttimeMs() {
    return START_TIME_MS;
  }",False
23,toHtml(),Method,,"tachyon.WebServerMasterHandler+handle(String,Request,HttpServletRequest,HttpServletResponse)",java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() java.lang.StringBuilder+StringBuilder(String) tachyon.CommonUtils+convertMillis(long) tachyon.CommonUtils+convertMillis(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) tachyon.PrefixList+toHtml(String) tachyon.PrefixList+toHtml(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) tachyon.PrefixList+toHtml(String) tachyon.PrefixList+toHtml(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.util.Map+size() java.util.Map+size() java.util.ArrayList+ArrayList(Collection) java.util.Map+keySet() java.util.Map+keySet() java.util.Collections+sort(List) java.util.Collections+sort(List) java.util.List+size() java.util.List+size() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) tachyon.WorkerInfo+toHtml() java.util.Map+get(Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) tachyon.WorkerInfo+toHtml() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.util.Map+size() java.util.Map+size() java.util.ArrayList+ArrayList(Collection) java.util.Map+keySet() java.util.Map+keySet() java.util.Collections+sort(List) java.util.Collections+sort(List) java.util.List+size() java.util.List+size() java.util.Map+get(Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) tachyon.INode+toString() tachyon.INode+toString() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+toString() java.lang.StringBuilder+toString(),tachyon.MasterServiceHandler+START_TIME_MS tachyon.MasterServiceHandler+ADDRESS tachyon.MasterServiceHandler+mWhiteList tachyon.MasterServiceHandler+mPinList tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFiles tachyon.INode+mId tachyon.INode+mName tachyon.Config+DEBUG,1438,37,5897,186,1,,"public String toHtml() {
    long timeMs = System.currentTimeMillis() - START_TIME_MS;
    StringBuilder sb = new StringBuilder(""<h1> Tachyon has been running @ "" + ADDRESS + 
        "" for "" + CommonUtils.convertMillis(timeMs) + "" </h1> \n"");

    sb.append(mWhiteList.toHtml(""WhiteList""));

    sb.append(mPinList.toHtml(""PinList""));

    synchronized (mWorkers) {
      synchronized (mFiles) {
        sb.append(""<h2>"" + mWorkers.size() + "" worker(s) are running: </h2>"");
        List<Long> workerList = new ArrayList<Long>(mWorkers.keySet());
        Collections.sort(workerList);
        for (int k = 0; k < workerList.size(); k ++) {
          sb.append(""<strong>Worker "" + (k + 1) + "" </strong>: "" + 
              mWorkers.get(workerList.get(k)).toHtml() + ""<br \\>"");
        }

        sb.append(""<h2>"" + mFiles.size() + "" File(s): </h2>"");
        List<Integer> fileIdList = new ArrayList<Integer>(mFiles.keySet());
        Collections.sort(fileIdList);
        for (int k = 0; k < fileIdList.size(); k ++) {
          INode tINode = mFiles.get(fileIdList.get(k));
          sb.append(""<strong>File "" + (k + 1) + "" </strong>: "");
          sb.append(""ID: "").append(tINode.mId).append(""; "");
          sb.append(""Path: "").append(tINode.mName).append(""; "");
          if (Config.DEBUG) {
            sb.append(tINode.toString());
          }
          sb.append(""<br \\>"");
        }
      }
    }

    return sb.toString();
  }",True
24,user_createFile(String),Method,,,"tachyon.MasterServiceHandler+user_createFile(String,boolean,int) tachyon.MasterServiceHandler+user_createFile(String,boolean,int)",,183,5,7339,225,1,,"@Override
  public int user_createFile(String filePath)
      throws FileAlreadyExistException, TException, InvalidPathException {
    return user_createFile(filePath, false, -1);
  }",False
25,"user_createFile(String,boolean,int)",Method,user_createFile(String),,"tachyon.CommonUtils+parametersToString(Object[]) tachyon.CommonUtils+parametersToString(Object[]) java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) tachyon.INodeFile+INodeFile(String,int,int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) tachyon.PrefixList+inList(String) tachyon.PrefixList+inList(String) tachyon.PrefixList+inList(String) tachyon.PrefixList+inList(String) tachyon.MasterLogWriter+appendAndFlush(INode) tachyon.MasterLogWriter+appendAndFlush(INode) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) tachyon.PrefixList+inList(String) tachyon.PrefixList+inList(String) java.util.List+add(int,E) java.util.List+add(int,E)",tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFilePathToId tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mDatasetCounter tachyon.INode+mPin tachyon.MasterServiceHandler+mPinList tachyon.INode+mCache tachyon.MasterServiceHandler+mWhiteList tachyon.MasterServiceHandler+mMasterLogWriter tachyon.MasterServiceHandler+mFilePathToId tachyon.INode+mId tachyon.MasterServiceHandler+mFiles tachyon.INode+mId tachyon.MasterServiceHandler+mPinList tachyon.MasterServiceHandler+mIdPinList tachyon.INode+mId tachyon.MasterServiceHandler+LOG tachyon.INode+mId,1002,31,7526,230,1,,"public int user_createFile(String filePath, boolean isSubDataset, int parentFileId)
      throws FileAlreadyExistException, TException, InvalidPathException {
    String parameters = CommonUtils.parametersToString(filePath);
    LOG.info(""user_createFile"" + parameters);

    INode inode = null;

    synchronized (mFiles) {
      if (mFilePathToId.containsKey(filePath)) {
        LOG.info(filePath + "" already exists."");
        throw new FileAlreadyExistException(""File "" + filePath + "" already exists."");
      }

      inode = new INodeFile(filePath, mDatasetCounter.addAndGet(1), parentFileId);
      inode.mPin = mPinList.inList(filePath);
      inode.mCache = mWhiteList.inList(filePath);

      mMasterLogWriter.appendAndFlush(inode);

      mFilePathToId.put(filePath, inode.mId);
      mFiles.put(inode.mId, inode);

      if (mPinList.inList(filePath)) {
        mIdPinList.add(inode.mId);
      }

      LOG.info(""user_createFile: File Created: "" + inode);
    }

    return inode.mId;
  }",False
26,user_deleteById(int),Method,,,java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.List+remove(int) java.util.List+remove(int) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Map+remove(Object) tachyon.MasterLogWriter+appendAndFlush(INode) tachyon.MasterLogWriter+appendAndFlush(INode),tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mIdPinList tachyon.MasterServiceHandler+mIdPinList tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFilePathToId tachyon.INode+mName tachyon.INode+mId tachyon.INode+mId tachyon.MasterServiceHandler+mMasterLogWriter,737,20,10729,310,1,,"@Override
  public void user_deleteById(int fileId) throws FileDoesNotExistException, TException {
    LOG.info(""user_deleteById("" + fileId + "")"");
    // Only remove meta data from master. The data in workers will be evicted since no further
    // application can read them. (Based on LRU) TODO May change it to be active from V0.2. 
    synchronized (mFiles) {
      if (!mFiles.containsKey(fileId)) {
        throw new FileDoesNotExistException(""Failed to delete "" + fileId);
      }

      synchronized (mIdPinList) {
        mIdPinList.remove(fileId);
      }
      INode inode = mFiles.remove(fileId);
      mFilePathToId.remove(inode.mName);
      inode.mId = - inode.mId;

      mMasterLogWriter.appendAndFlush(inode);
    }
  }",False
27,user_deleteByPath(String),Method,,,java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.List+remove(Object) java.util.List+remove(Object) java.lang.Integer+Integer(int) java.util.Map+remove(Object) java.util.Map+remove(Object) tachyon.MasterLogWriter+appendAndFlush(INode) tachyon.MasterLogWriter+appendAndFlush(INode),tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFilePathToId tachyon.MasterServiceHandler+mFilePathToId tachyon.MasterServiceHandler+mIdPinList tachyon.MasterServiceHandler+mIdPinList tachyon.MasterServiceHandler+mFiles tachyon.INode+mId tachyon.INode+mId tachyon.MasterServiceHandler+mMasterLogWriter,771,21,11470,331,1,,"@Override
  public void user_deleteByPath(String filePath) throws FileDoesNotExistException, TException {
    LOG.info(""user_deleteByPath("" + filePath + "")"");
    // Only remove meta data from master. The data in workers will be evicted since no further
    // application can read them. (Based on LRU) TODO May change it to be active from V0.2. 
    synchronized (mFiles) {
      if (!mFilePathToId.containsKey(filePath)) {
        throw new FileDoesNotExistException(""Failed to delete "" + filePath);
      }

      int id = mFilePathToId.remove(filePath);

      synchronized (mIdPinList) {
        mIdPinList.remove(new Integer(id));
      }
      INode inode = mFiles.remove(id);
      inode.mId = - inode.mId;

      mMasterLogWriter.appendAndFlush(inode);
    }
  }",False
28,user_getLocalWorker(String),Method,,,java.util.Map+keySet() java.util.Map+keySet() java.lang.String+equals(Object) java.net.InetSocketAddress+getHostName() java.net.InetSocketAddress+getHostName() java.lang.String+equals(Object) java.net.InetSocketAddress+getHostName() java.net.InetSocketAddress+getHostName() java.net.InetSocketAddress+getPort() java.net.InetSocketAddress+getPort() java.util.Map+keySet() java.util.Map+keySet(),tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mWorkerAddressToId tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mWorkers,674,15,13366,379,1,,"@Override
  public NetAddress user_getLocalWorker(String host)
      throws NoLocalWorkerException, TException {
    LOG.info(""user_getLocalWorker("" + host + "")"");
    synchronized (mWorkers) {
      for (InetSocketAddress address: mWorkerAddressToId.keySet()) {
        if (address.getHostName().equals(host)) {
          LOG.info(""user_getLocalWorker(return good result: "" + address);
          return new NetAddress(address.getHostName(), address.getPort());
        }
      }
    }
    LOG.info(""user_getLocalWorker: no local worker: "" + host + "" "" + mWorkers.keySet());
    throw new NoLocalWorkerException(""user_getLocalWorker("" + host + "") has no local worker."");
  }",False
29,user_getClientFileInfoById(int),Method,,,java.util.Map+get(Object) java.util.Map+get(Object),tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFiles tachyon.INode+mId tachyon.INode+mName tachyon.INode+mCheckpointPath tachyon.INode+mPin tachyon.INode+mCache tachyon.MasterServiceHandler+LOG,700,19,14044,395,1,,"@Override
  public ClientFileInfo user_getClientFileInfoById(int fileId)
      throws FileDoesNotExistException, TException {
    LOG.info(""user_getClientFileInfoById("" + fileId + "")"");
    synchronized (mFiles) {
      INode inode = mFiles.get(fileId);
      if (inode == null) {
        throw new FileDoesNotExistException(""FileId "" + fileId + "" does not exist."");
      }
      ClientFileInfo ret = new ClientFileInfo();
      ret.id = inode.mId;
      ret.fileName = inode.mName;
      ret.checkpointPath = inode.mCheckpointPath;
      ret.needPin = inode.mPin;
      ret.needCache = inode.mCache;
      LOG.info(""user_getClientFileInfoById("" + fileId + ""): ""  + ret);
      return ret;
    }
  }",False
30,user_getClientFileInfoByPath(String),Method,,,java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object),tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFilePathToId tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFilePathToId tachyon.INode+mId tachyon.INode+mName tachyon.INode+mCheckpointPath tachyon.INode+mPin tachyon.INode+mCache tachyon.MasterServiceHandler+LOG,760,20,14748,415,1,,"@Override
  public ClientFileInfo user_getClientFileInfoByPath(String filePath)
      throws FileDoesNotExistException, TException {
    LOG.info(""user_getClientFileInfoByPath("" + filePath + "")"");
    synchronized (mFiles) {
      if (!mFilePathToId.containsKey(filePath)) {
        throw new FileDoesNotExistException(""File "" + filePath + "" does not exist."");
      }

      INode inode = mFiles.get(mFilePathToId.get(filePath));
      ClientFileInfo ret = new ClientFileInfo();
      ret.id = inode.mId;
      ret.fileName = inode.mName;
      ret.checkpointPath = inode.mCheckpointPath;
      ret.needPin = inode.mPin;
      ret.needCache = inode.mCache;
      LOG.info(""user_getClientFileInfoByPath("" + filePath + "") : "" + ret);
      return ret;
    }
  }",False
31,user_getFileLocationsById(int),Method,,,java.util.Map+get(Object) java.util.Map+get(Object) java.util.ArrayList+ArrayList(Collection),tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+LOG tachyon.INode+mLocations tachyon.INode+mLocations,601,15,15512,436,1,,"@Override
  public List<NetAddress> user_getFileLocationsById(int fileId)
      throws FileDoesNotExistException, TException {
    LOG.info(""user_getFileLocationsById: "" + fileId);
    synchronized (mFiles) {
      INode inode = mFiles.get(fileId);
      if (inode == null) {
        throw new FileDoesNotExistException(""FileId "" + fileId + "" does not exist."");
      }
      LOG.info(""user_getFileLocationsById: "" + fileId + "" good return"");
      ArrayList<NetAddress> ret = new ArrayList<NetAddress>(inode.mLocations.size());
      ret.addAll(inode.mLocations.values());
      return ret;
    }
  }",False
32,user_getFileLocationsByPath(String),Method,,,java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.ArrayList+ArrayList(Collection),tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFilePathToId tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFilePathToId tachyon.INode+mLocations tachyon.INode+mLocations tachyon.MasterServiceHandler+LOG,663,16,16117,452,1,,"@Override
  public List<NetAddress> user_getFileLocationsByPath(String filePath)
      throws FileDoesNotExistException, TException {
    LOG.info(""user_getFileLocationsByPath("" + filePath + "")"");
    synchronized (mFiles) {
      if (!mFilePathToId.containsKey(filePath)) {
        throw new FileDoesNotExistException(""File "" + filePath + "" does not exist."");
      }

      INode inode = mFiles.get(mFilePathToId.get(filePath));
      ArrayList<NetAddress> ret = new ArrayList<NetAddress>(inode.mLocations.size());
      ret.addAll(inode.mLocations.values());
      LOG.info(""user_getFileLocationsByPath("" + filePath + "") : "" + ret);
      return ret;
    }
  }",False
33,user_getFileId(String),Method,"user_renameFile(String,String)",,java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+get(Object) java.util.Map+get(Object),tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFilePathToId tachyon.MasterServiceHandler+mFilePathToId tachyon.MasterServiceHandler+LOG,368,13,16784,469,1,,"@Override
  public int user_getFileId(String filePath) throws TException {
    LOG.info(""user_getFileId("" + filePath + "")"");
    int ret = 0;
    synchronized (mFiles) {
      if (mFilePathToId.containsKey(filePath)) {
        ret = mFilePathToId.get(filePath);
      }
    }

    LOG.info(""user_getFileId("" + filePath + "") returns FileId "" + ret);
    return ret;
  }",False
34,user_getUserId(),Method,,,java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int),tachyon.MasterServiceHandler+mUserCounter,102,4,18960,528,1,,"@Override
  public long user_getUserId() throws TException {
    return mUserCounter.addAndGet(1);
  }",False
35,user_outOfMemoryForPinFile(int),Method,,,,tachyon.MasterServiceHandler+LOG,171,4,19066,533,1,,"@Override
  public void user_outOfMemoryForPinFile(int fileId) throws TException {
    LOG.error(""The user can not allocate enough space for PIN list File "" + fileId);
  }",False
36,"user_renameFile(String,String)",Method,,,"tachyon.MasterServiceHandler+user_getFileId(String) tachyon.MasterServiceHandler+user_getFileId(String) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+get(Object) java.util.Map+get(Object) tachyon.MasterLogWriter+appendAndFlush(INode) tachyon.MasterLogWriter+appendAndFlush(INode)",tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFilePathToId tachyon.MasterServiceHandler+mFilePathToId tachyon.MasterServiceHandler+mFiles tachyon.INode+mName tachyon.MasterServiceHandler+mMasterLogWriter,566,15,19241,538,1,,"@Override
  public void user_renameFile(String srcDatasetPath, String dstDatasetPath)
      throws FileDoesNotExistException, TException {
    synchronized (mFiles) {
      int fileId = user_getFileId(srcDatasetPath);
      if (fileId <= 0) {
        throw new FileDoesNotExistException(""File "" + srcDatasetPath + "" does not exist"");
      }
      mFilePathToId.remove(srcDatasetPath);
      mFilePathToId.put(dstDatasetPath, fileId);
      INode inode = mFiles.get(fileId);
      inode.mName = dstDatasetPath;
      mMasterLogWriter.appendAndFlush(inode);
    }
  }",False
37,user_unpinFile(int),Method,,,java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.List+remove(int) java.util.List+remove(int) java.util.Map+get(Object) java.util.Map+get(Object) tachyon.MasterLogWriter+appendAndFlush(INode) tachyon.MasterLogWriter+appendAndFlush(INode),tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mIdPinList tachyon.MasterServiceHandler+mIdPinList tachyon.MasterServiceHandler+mFiles tachyon.INode+mPin tachyon.MasterServiceHandler+mMasterLogWriter,648,18,21791,599,1,,"@Override
  public void user_unpinFile(int fileId) throws FileDoesNotExistException, TException {
    // TODO Change meta data only. Data will be evicted from worker based on data replacement 
    // policy. TODO May change it to be active from V0.2
    LOG.info(""user_unpinFile("" + fileId + "")"");
    synchronized (mFiles) {
      if (!mFiles.containsKey(fileId)) {
        throw new FileDoesNotExistException(""Failed to unpin "" + fileId);
      }

      synchronized (mIdPinList) {
        mIdPinList.remove(fileId);
      }
      INode inode = mFiles.get(fileId);
      inode.mPin = false;
      mMasterLogWriter.appendAndFlush(inode);
    }
  }",False
38,"worker_addFile(long,long,int,int,boolean,String)",Method,,,"tachyon.CommonUtils+parametersToString(Object[]) tachyon.CommonUtils+parametersToString(Object[]) java.util.Map+get(Object) java.util.Map+get(Object) tachyon.WorkerInfo+updateFile(boolean,int) tachyon.WorkerInfo+updateFile(boolean,int) tachyon.WorkerInfo+updateUsedBytes(long) tachyon.WorkerInfo+updateUsedBytes(long) tachyon.WorkerInfo+updateLastUpdatedTimeMs() tachyon.WorkerInfo+updateLastUpdatedTimeMs() java.util.Map+get(Object) java.util.Map+get(Object) tachyon.INodeFile+getLength() tachyon.INodeFile+getLength() tachyon.INodeFile+getLength() tachyon.INodeFile+getLength() tachyon.INodeFile+getLength() tachyon.INodeFile+getLength() tachyon.INodeFile+setLength(long) tachyon.INodeFile+setLength(long) java.net.InetSocketAddress+getHostName() java.net.InetSocketAddress+getHostName() java.net.InetSocketAddress+getPort() java.net.InetSocketAddress+getPort()",tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFiles tachyon.INode+mIsFolder tachyon.INode+UNINITIAL_VALUE tachyon.INode+mHasCheckpointed tachyon.INode+mCheckpointPath tachyon.WorkerInfo+ADDRESS tachyon.INode+mLocations,1744,49,22443,618,1,,"@Override
  public void worker_addFile(long workerId, long workerUsedBytes, int fileId,
      int partitionSizeBytes, boolean hasCheckpointed, String checkpointPath)
          throws FileDoesNotExistException, SuspectedFileSizeException, TException {
    String parameters = CommonUtils.parametersToString(workerId, workerUsedBytes, fileId,
        partitionSizeBytes);
    LOG.info(""worker_addFile"" + parameters);
    WorkerInfo tWorkerInfo = null;
    synchronized (mWorkers) {
      tWorkerInfo = mWorkers.get(workerId);

      if (tWorkerInfo == null) {
        LOG.error(""No worker: "" + workerId);
        return;
      }
    }

    tWorkerInfo.updateFile(true, fileId);
    tWorkerInfo.updateUsedBytes(workerUsedBytes);
    tWorkerInfo.updateLastUpdatedTimeMs();

    synchronized (mFiles) {
      INode inode = mFiles.get(fileId);

      if (inode == null) {
        throw new FileDoesNotExistException(""File "" + fileId + "" does not exist."");
      }
      if (inode.mIsFolder) {
        throw new FileDoesNotExistException(""File "" + fileId + "" is a folder."");
      }

      INodeFile tFile = (INodeFile) inode;

      if (tFile.getLength() != INode.UNINITIAL_VALUE) {
        if (tFile.getLength() != partitionSizeBytes) {
          throw new SuspectedFileSizeException(fileId + "". Original Size: "" +
              tFile.getLength() + "". New Size: "" + partitionSizeBytes);
        }
      } else {
        tFile.setLength(partitionSizeBytes);
      }
      if (hasCheckpointed) {
        tFile.mHasCheckpointed = true;
        tFile.mCheckpointPath = checkpointPath;
      }
      InetSocketAddress address = tWorkerInfo.ADDRESS;
      tFile.mLocations.put(workerId, new NetAddress(address.getHostName(), address.getPort()));
    }
  }",False
39,worker_getPinList(),Method,,,java.util.HashSet+HashSet() java.util.Set+add(E) java.util.Set+add(E),tachyon.MasterServiceHandler+mIdPinList tachyon.MasterServiceHandler+mIdPinList,239,10,26136,712,1,,"@Override
  public Set<Integer> worker_getPinList() throws TException {
    Set<Integer> ret = new HashSet<Integer>();
    synchronized (mIdPinList) {
      for (int id : mIdPinList) {
        ret.add(id);
      }
    }
    return ret;
  }",False
40,"worker_heartbeat(long,long,List<Integer>)",Method,,,"java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.lang.Object+Object() java.nio.ByteBuffer+allocate(int) java.nio.ByteBuffer+allocate(int) java.util.Map+get(Object) java.util.Map+get(Object) tachyon.WorkerInfo+updateUsedBytes(long) tachyon.WorkerInfo+updateUsedBytes(long) tachyon.WorkerInfo+updateFiles(boolean,Collection<Integer>) tachyon.WorkerInfo+updateFiles(boolean,Collection<Integer>) tachyon.WorkerInfo+updateLastUpdatedTimeMs() tachyon.WorkerInfo+updateLastUpdatedTimeMs() java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+Object() java.nio.ByteBuffer+allocate(int) java.nio.ByteBuffer+allocate(int)",tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+LOG tachyon.INode+mLocations,1110,30,26379,723,1,,"@Override
  public Command worker_heartbeat(long workerId, long usedBytes, List<Integer> removedFiles)
      throws TException {
    LOG.info(""worker_heartbeat(): WorkerId: "" + workerId);
    synchronized (mWorkers) {
      if (!mWorkers.containsKey(workerId)) {
        LOG.info(""worker_heartbeat(): Does not contain worker with ID "" + workerId +
            "" . Send command to let it re-register."");
        return new Command(CommandType.Register, ByteBuffer.allocate(0));
      } else {
        WorkerInfo tWorkerInfo = mWorkers.get(workerId);
        tWorkerInfo.updateUsedBytes(usedBytes);
        tWorkerInfo.updateFiles(false, removedFiles);
        tWorkerInfo.updateLastUpdatedTimeMs();

        synchronized (mFiles) {
          for (int fileId : removedFiles) {
            INode inode = mFiles.get(fileId);
            if (inode == null) {
              LOG.error(""Data "" + fileId + "" does not exist"");
            } else {
              inode.mLocations.remove(workerId);
            }
          }
        }
      }
    }

    return new Command(CommandType.Nothing, ByteBuffer.allocate(0));
  }",False
41,"worker_register(NetAddress,long,long,List<Integer>)",Method,,,"java.net.InetSocketAddress+InetSocketAddress(InetAddress,int) java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.concurrent.BlockingQueue+add(E) java.util.concurrent.BlockingQueue+add(E) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) tachyon.WorkerInfo+WorkerInfo(long,InetSocketAddress,long) tachyon.WorkerInfo+updateUsedBytes(long) tachyon.WorkerInfo+updateUsedBytes(long) tachyon.WorkerInfo+updateFiles(boolean,Collection<Integer>) tachyon.WorkerInfo+updateFiles(boolean,Collection<Integer>) tachyon.WorkerInfo+updateLastUpdatedTimeMs() tachyon.WorkerInfo+updateLastUpdatedTimeMs() java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+get(Object) java.util.Map+get(Object)",tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mWorkerAddressToId tachyon.MasterServiceHandler+mWorkerAddressToId tachyon.MasterServiceHandler+mWorkerAddressToId tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mLostWorkers tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+START_TIME_NS_PREFIX tachyon.MasterServiceHandler+mWorkerCounter tachyon.MasterServiceHandler+mWorkers tachyon.MasterServiceHandler+mWorkerAddressToId tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+mFiles tachyon.INode+mLocations tachyon.MasterServiceHandler+LOG,1634,43,27493,754,1,,"@Override
  public long worker_register(NetAddress workerNetAddress, long totalBytes, long usedBytes,
      List<Integer> currentFiles) throws TException {
    long id = 0;
    InetSocketAddress workerAddress =
        new InetSocketAddress(workerNetAddress.mHost, workerNetAddress.mPort);
    LOG.info(""worker_register(): WorkerNetAddress: "" + workerAddress);

    synchronized (mWorkers) {
      if (mWorkerAddressToId.containsKey(workerAddress)) {
        id = mWorkerAddressToId.get(workerAddress);
        mWorkerAddressToId.remove(id);
        LOG.warn(""The worker "" + workerAddress + "" already exists as id "" + id + ""."");
      }
      if (id != 0 && mWorkers.containsKey(id)) {
        WorkerInfo tWorkerInfo = mWorkers.get(id);
        mWorkers.remove(id);
        mLostWorkers.add(tWorkerInfo);
        LOG.warn(""The worker with id "" + id + "" has been removed."");
      }
      id = START_TIME_NS_PREFIX + mWorkerCounter.addAndGet(1);
      WorkerInfo tWorkerInfo = new WorkerInfo(id, workerAddress, totalBytes);
      tWorkerInfo.updateUsedBytes(usedBytes);
      tWorkerInfo.updateFiles(true, currentFiles);
      tWorkerInfo.updateLastUpdatedTimeMs();
      mWorkers.put(id, tWorkerInfo);
      mWorkerAddressToId.put(workerAddress, id);
      LOG.info(""worker_register(): "" + tWorkerInfo);
    }

    for (long fileId: currentFiles) {
      synchronized (mFiles) {
        INode inode = mFiles.get(fileId);
        if (inode != null) {
          inode.mLocations.put(id, workerNetAddress);
        } else {
          LOG.warn(""worker_register failed to add fileId "" + fileId);
        }
      }
    }

    return id;
  }",False
42,writeCheckpoint(),Method,MasterServiceHandler(InetSocketAddress),,"tachyon.MasterLogWriter+MasterLogWriter(String) java.util.Map+values() java.util.Map+values() tachyon.MasterLogWriter+appendAndFlush(INode) tachyon.MasterLogWriter+appendAndFlush(INode) tachyon.INode+toString() tachyon.INode+toString() java.lang.Math+max(int,int) java.lang.Math+max(int,int) tachyon.PrefixList+inList(String) tachyon.PrefixList+inList(String) java.util.List+add(int,E) java.util.List+add(int,E) tachyon.MasterLogWriter+close() tachyon.MasterLogWriter+close() java.io.File+File(String) java.io.File+File(String) java.io.File+renameTo(File) java.io.File+renameTo(File) tachyon.CommonUtils+runtimeException(String) tachyon.CommonUtils+runtimeException(String) java.io.File+getPath() java.io.File+getPath() java.io.File+getPath() java.io.File+getPath() java.io.File+File(String) java.io.File+exists() java.io.File+exists() java.io.File+delete() java.io.File+delete() java.io.File+toString() java.io.File+toString() tachyon.CommonUtils+sleep(long) tachyon.CommonUtils+sleep(long) java.util.concurrent.atomic.AtomicInteger+get() java.util.concurrent.atomic.AtomicInteger+get()",tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mFiles tachyon.Config+MASTER_CHECKPOINT_FILE tachyon.MasterServiceHandler+mFiles tachyon.MasterServiceHandler+LOG tachyon.INode+mId tachyon.MasterServiceHandler+mPinList tachyon.INode+mName tachyon.MasterServiceHandler+mIdPinList tachyon.INode+mId tachyon.Config+MASTER_CHECKPOINT_FILE tachyon.Config+MASTER_CHECKPOINT_FILE tachyon.Config+MASTER_LOG_FILE tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+LOG tachyon.MasterServiceHandler+mDatasetCounter,1748,43,29131,797,2,,"private void writeCheckpoint() {
    LOG.info(""Files recoveried from logs: "");
    synchronized (mFiles) {
      MasterLogWriter checkpointWriter =
          new MasterLogWriter(Config.MASTER_CHECKPOINT_FILE + "".tmp"");
      int maxDatasetId = 0;
      for (INode inode : mFiles.values()) {
        checkpointWriter.appendAndFlush(inode);
        LOG.info(inode.toString());
        maxDatasetId = Math.max(maxDatasetId, inode.mId);
        if (mPinList.inList(inode.mName)) {
          mIdPinList.add(inode.mId);
        }
      }
      //      for (RawColumnDatasetInfo dataset : mRawColumnDatasets.values()) {
      //        checkpointWriter.appendAndFlush(dataset);
      //        LOG.info(dataset.toString());
      //        maxDatasetId = Math.max(maxDatasetId, dataset.mId);
      //      }
      //      if (maxDatasetId != mDatasetCounter.get() && mDatasetCounter.get() != 0) {
      //        INode tempDataset = new DatasetInfo();
      //        tempDataset.mId = - mDatasetCounter.get();
      //        checkpointWriter.appendAndFlush(tempDataset);
      //      }
      checkpointWriter.close();

      File srcFile = new File(Config.MASTER_CHECKPOINT_FILE + "".tmp"");
      File dstFile = new File(Config.MASTER_CHECKPOINT_FILE);
      if (!srcFile.renameTo(dstFile)) {
        CommonUtils.runtimeException(""Failed to rename file from "" + srcFile.getPath() +
            "" to "" + dstFile.getPath());
      }

      File file = new File(Config.MASTER_LOG_FILE);
      if (file.exists()) {
        while (!file.delete()) {
          LOG.info(""Trying to delete "" + file.toString());
          CommonUtils.sleep(1000);
        }
      }
    }
    LOG.info(""Files recovery done. Current mDatasetCounter: "" + mDatasetCounter.get());
  }",True
43,"recoveryFromFile(String,String)",Method,recoveryFromLog() recoveryFromLog(),,"java.io.File+File(String) java.io.File+exists() java.io.File+exists() tachyon.MasterLogReader+MasterLogReader(String) tachyon.MasterLogReader+hasNext() tachyon.MasterLogReader+hasNext() tachyon.MasterLogReader+getNextDatasetInfo() tachyon.MasterLogReader+getNextDatasetInfo() java.lang.Math+abs(int) java.lang.Math+abs(int) java.util.concurrent.atomic.AtomicInteger+get() java.util.concurrent.atomic.AtomicInteger+get() java.util.concurrent.atomic.AtomicInteger+set(int) java.util.concurrent.atomic.AtomicInteger+set(int) java.lang.Math+abs(int) java.lang.Math+abs(int) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Map+remove(Object) tachyon.CommonUtils+runtimeException(String) tachyon.CommonUtils+runtimeException(String) tachyon.CommonUtils+runtimeException(String) tachyon.CommonUtils+runtimeException(String)",tachyon.MasterServiceHandler+LOG tachyon.INode+mId tachyon.MasterServiceHandler+mDatasetCounter tachyon.MasterServiceHandler+mDatasetCounter tachyon.INode+mId java.lang.System+out tachyon.INode+mId tachyon.MasterServiceHandler+mFiles tachyon.INode+mId tachyon.MasterServiceHandler+mFilePathToId tachyon.INode+mName tachyon.INode+mId tachyon.MasterServiceHandler+mFiles tachyon.INode+mId tachyon.MasterServiceHandler+mFilePathToId tachyon.INode+mName,2114,53,30883,841,2,,"private void recoveryFromFile(String fileName, String msg) {
    MasterLogReader reader;

    File file = new File(fileName);
    if (!file.exists()) {
      LOG.info(msg + fileName + "" does not exist."");
    } else {
      reader = new MasterLogReader(fileName);
      while (reader.hasNext()) {
        Pair<LogEventType, Object> pair = reader.getNextDatasetInfo();
        switch (pair.getFirst()) {
          case INode: {
            INode inode = (INode) pair.getSecond();
            if (Math.abs(inode.mId) > mDatasetCounter.get()) {
              mDatasetCounter.set(Math.abs(inode.mId));
            }

            System.out.println(""Putting "" + inode);
            if (inode.mId > 0) {
              mFiles.put(inode.mId, inode);
              mFilePathToId.put(inode.mName, inode.mId);
            } else {
              mFiles.remove(- inode.mId);
              mFilePathToId.remove(inode.mName);
            }
            break;
          }
          //          case RawColumnDatasetInfo: {
          //            RawColumnDatasetInfo dataset = (RawColumnDatasetInfo) pair.getSecond();
          //            if (Math.abs(dataset.mId) > mDatasetCounter.get()) {
          //              mDatasetCounter.set(Math.abs(dataset.mId));
          //            }
          //
          //            System.out.println(""Putting "" + dataset);
          //            if (dataset.mId > 0) {
          //              mRawColumnDatasets.put(dataset.mId, dataset);
          //              mRawColumnDatasetPathToId.put(dataset.mPath, dataset.mId);
          //            } else {
          //              mRawColumnDatasets.remove(- dataset.mId);
          //              mRawColumnDatasetPathToId.remove(dataset.mPath);
          //            }
          //            break;
          //          }
          case Undefined:
            CommonUtils.runtimeException(""Corruptted info from "" + fileName + 
                "". It has undefined data type."");
            break;
          default:
            CommonUtils.runtimeException(""Corruptted info from "" + fileName);
        }
      }
    }
  }",True
44,recoveryFromLog(),Method,MasterServiceHandler(InetSocketAddress),,"tachyon.MasterServiceHandler+recoveryFromFile(String,String) tachyon.MasterServiceHandler+recoveryFromFile(String,String) tachyon.MasterServiceHandler+recoveryFromFile(String,String) tachyon.MasterServiceHandler+recoveryFromFile(String,String)",tachyon.MasterServiceHandler+mFiles tachyon.Config+MASTER_CHECKPOINT_FILE tachyon.Config+MASTER_LOG_FILE,220,6,33001,895,2,,"private void recoveryFromLog() {
    synchronized (mFiles) {
      recoveryFromFile(Config.MASTER_CHECKPOINT_FILE, ""Master Checkpoint file "");
      recoveryFromFile(Config.MASTER_LOG_FILE, ""Master Log file "");
    }
  }",True
