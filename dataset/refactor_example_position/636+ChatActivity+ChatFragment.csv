index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,annotation,full text,removed
1,EXTRA_CHAT_PEER,Field,,,,,57,1,4628,115,25,,"public static final String EXTRA_CHAT_PEER = ""chat_peer"";",False
2,STATE_FILE_NAME,Field,,,,,65,1,4790,120,25,,"public static final String STATE_FILE_NAME = ""pending_file_name"";",False
3,REQUEST_GALLERY,Field,,,,,45,1,4860,121,26,,private static final int REQUEST_GALLERY = 0;,True
4,REQUEST_PHOTO,Field,,,,,43,1,4910,122,26,,private static final int REQUEST_PHOTO = 1;,True
5,REQUEST_VIDEO,Field,,,,,43,1,4958,123,26,,private static final int REQUEST_VIDEO = 2;,True
6,REQUEST_DOC,Field,,,,,41,1,5006,124,26,,private static final int REQUEST_DOC = 3;,True
7,REQUEST_LOCATION,Field,,,,,46,1,5052,125,26,,private static final int REQUEST_LOCATION = 4;,True
8,REQUEST_CONTACT,Field,,,,,45,1,5103,126,26,,private static final int REQUEST_CONTACT = 5;,True
9,PERMISSIONS_REQUEST_CAMERA,Field,,,,,56,1,5153,127,26,,private static final int PERMISSIONS_REQUEST_CAMERA = 6;,True
10,PERMISSION_REQUEST_RECORD_AUDIO,Field,,,,,61,1,5214,128,26,,private static final int PERMISSION_REQUEST_RECORD_AUDIO = 7;,True
11,PERMISSION_REQ_MEDIA,Field,,,,,51,1,5280,129,26,,private static final int PERMISSION_REQ_MEDIA = 11;,True
12,peer,Field,,,,,18,1,5365,132,2,,private Peer peer;,False
13,isAutocompleteVisible,Field,,,,,46,1,5489,138,2,,private boolean isAutocompleteVisible = false;,False
14,audioContainer,Field,,,,,28,1,5641,143,2,,private View audioContainer;,True
15,recordPoint,Field,,,,,25,1,5674,144,2,,private View recordPoint;,True
16,messageContainer,Field,,,,,30,1,5704,145,2,,private View messageContainer;,False
17,audioSlide,Field,,,,,24,1,5739,146,2,,private View audioSlide;,True
18,slideStart,Field,,,,,23,1,5768,147,2,,private int slideStart;,True
19,audioTimer,Field,,,,,28,1,5796,148,2,,private TextView audioTimer;,True
20,isAudioVisible,Field,,,,,31,1,5829,149,2,,private boolean isAudioVisible;,True
21,isShareVisible,Field,,,,,31,1,5865,150,2,,private boolean isShareVisible;,False
22,SLIDE_LIMIT,Field,,,,,24,1,5901,151,2,,private int SLIDE_LIMIT;,True
23,voiceRecordActor,Field,,,,,26,1,5930,152,0,,ActorRef voiceRecordActor;,True
24,audioFile,Field,,,,,25,1,5961,153,2,,private String audioFile;,True
25,audioButton,Field,,,,,30,1,5991,154,2,,private ImageView audioButton;,True
26,autocompleteAdapter,Field,,,,,42,1,6121,159,2,,private HolderAdapter autocompleteAdapter;,False
27,commandsAdapter,Field,,,,,40,1,6168,160,2,,private CommandsAdapter commandsAdapter;,False
28,autocompleteList,Field,,,,,42,1,6213,161,2,,private RecyclerListView autocompleteList;,False
29,autocompleteString,Field,,,,,39,1,6260,162,2,,"private String autocompleteString = """";",False
30,autocompleteTriggerStart,Field,,,,,37,1,6304,163,2,,private int autocompleteTriggerStart;,False
31,quoteText,Field,,,,,27,1,6438,168,2,,private TextView quoteText;,True
32,quoteContainer,Field,,,,,35,1,6470,169,2,,private FrameLayout quoteContainer;,True
33,currentQuote,Field,,,,,33,1,6510,170,2,,"private String currentQuote = """";",True
34,forwardText,Field,,,,,27,1,6645,175,2,,private String forwardText;,False
35,forwardTextRaw,Field,,,,,30,1,6677,176,2,,private String forwardTextRaw;,False
36,sendText,Field,,,,,24,1,6712,177,2,,private String sendText;,False
37,forwardContent,Field,,,,,34,1,6741,178,2,,private AbsContent forwardContent;,False
38,pending_fileName,Field,,,,,32,1,6817,180,2,,private String pending_fileName;,False
39,shareContainer,Field,,,,,28,1,6950,185,2,,private View shareContainer;,False
40,shareMenuCaontainer,Field,,,,,33,1,6983,186,2,,private View shareMenuCaontainer;,False
41,shareMenuMaxHeight,Field,,,,,35,1,7021,187,2,,private int shareMenuMaxHeight = 0;,False
42,fastShareAdapter,Field,,,,,42,1,7061,188,2,,private FastShareAdapter fastShareAdapter;,False
43,isTypingDisabled,Field,,,,,41,1,7262,195,2,,private boolean isTypingDisabled = false;,True
44,isCompose,Field,,,,,34,1,7347,197,2,,private boolean isCompose = false;,False
45,intent,Field,onNewIntent(Intent),,,,22,1,7386,198,2,,private Intent intent;,False
46,textEditing,Field,,,,,36,1,7413,199,2,,private boolean textEditing = false;,False
47,currentEditRid,Field,,,,,28,1,7454,200,2,,private long currentEditRid;,False
48,animationListener,Field,,,,,54,1,7487,201,2,,private Animation.AnimationListener animationListener;,False
49,isBot,Field,,,,,30,1,7546,202,2,,private boolean isBot = false;,False
50,emptyBotSend,Field,,,,,26,1,7581,203,2,,private View emptyBotSend;,False
51,emptyBotHint,Field,,,,,30,1,7612,204,2,,private TextView emptyBotHint;,False
52,menuIconToChange,Field,,,,,35,1,7647,205,2,,private ImageView menuIconToChange;,True
53,menuTitleToChange,Field,,,,,35,1,7687,206,2,,private TextView menuTitleToChange;,True
54,shareSendOcl,Field,,,,,42,1,7727,207,2,,private View.OnClickListener shareSendOcl;,False
55,defaultSendOcl,Field,,,,,44,1,7774,208,2,,private View.OnClickListener defaultSendOcl;,False
56,"build(Peer,Context)",Method,,,java.lang.Object+Object() im.actor.core.entity.Peer+getUnuqueId() im.actor.core.entity.Peer+getUnuqueId(),im.actor.sdk.controllers.conversation.ChatActivity+EXTRA_CHAT_PEER,218,5,7824,210,9,,"public static Intent build(Peer peer, Context context) {
        final Intent intent = new Intent(context, ChatActivity.class);
        intent.putExtra(EXTRA_CHAT_PEER, peer.getUnuqueId());
        return intent;
    }",False
57,onCreate(Bundle),Method,,,"im.actor.core.entity.Peer+fromUniqueId(long) im.actor.core.entity.Peer+fromUniqueId(long) im.actor.sdk.controllers.conversation.ChatActivity+checkIsBot() im.actor.sdk.controllers.conversation.ChatActivity+checkIsBot() im.actor.sdk.controllers.conversation.ActorEditTextActivity+onCreate(Bundle) im.actor.sdk.controllers.conversation.toolbar.ChatToolbarFragment+create(Peer) im.actor.sdk.controllers.conversation.toolbar.ChatToolbarFragment+create(Peer) im.actor.sdk.controllers.conversation.ChatActivity.TextWatcherImp+TextWatcherImp() +onFocusChange(View,boolean)",im.actor.sdk.controllers.conversation.ChatActivity+intent im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+intent im.actor.sdk.controllers.conversation.ChatActivity+EXTRA_CHAT_PEER im.actor.sdk.controllers.conversation.ChatActivity+pending_fileName im.actor.sdk.controllers.conversation.ChatActivity+STATE_FILE_NAME im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText,14534,308,8048,217,1,,"@Override
    public void onCreate(Bundle saveInstance) {
        // Reading peer of chat
        intent = getIntent();
        peer = Peer.fromUniqueId(intent.getExtras().getLong(EXTRA_CHAT_PEER));
        checkIsBot();
        if (saveInstance != null) {
            // Activity restore
            pending_fileName = saveInstance.getString(STATE_FILE_NAME, null);
        }

        super.onCreate(saveInstance);

        if (saveInstance == null) {
            getSupportFragmentManager().beginTransaction()
                    .add(ChatToolbarFragment.create(peer), ""toolbar"")
                    .commit();
        }

        messageEditText.addTextChangedListener(new TextWatcherImp());
        messageEditText.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    hideShare();
                }
            }
        });

        //Voice record
        SLIDE_LIMIT = (int) (Screen.getDensity() * 180);
        audioContainer = findViewById(R.id.audioContainer);
        audioTimer = (TextView) findViewById(R.id.audioTimer);
        audioSlide = findViewById(R.id.audioSlide);
        recordPoint = findViewById(R.id.record_point);

        audioButton = (ImageView) findViewById(R.id.record_btn);
        audioButton.setVisibility(View.VISIBLE);
        audioButton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_DOWN) {
                    if (!isAudioVisible) {
                        showAudio();
                        slideStart = (int) event.getX();
                    }
                } else if (event.getAction() == MotionEvent.ACTION_UP) {
                    if (isAudioVisible) {
                        hideAudio(false);
                    }
                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
                    if (isAudioVisible) {
                        int slide = slideStart - (int) event.getX();
                        if (slide < 0) {
                            slide = 0;
                        }
                        if (slide > SLIDE_LIMIT) {
                            hideAudio(true);
                        } else {
                            slideAudio(slide);
                        }
                    }
                }
                return true;
            }
        });

        // Mentions
        autocompleteList = (RecyclerListView) findViewById(R.id.mentionsList);
        autocompleteList.setBackgroundColor(ActorSDK.sharedActor().style.getMainBackgroundColor());

        //Quote
        quoteContainer = (FrameLayout) findViewById(R.id.quoteContainer);
        quoteContainer.setBackgroundColor(ActorSDK.sharedActor().style.getMainBackgroundColor());
        quoteText = (TextView) findViewById(R.id.quote_text);
        findViewById(R.id.ib_close_quote).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                goneView(quoteContainer);
                quoteText.setText("""");
                currentQuote = """";
                if (textEditing) {
                    messageEditText.setText("""");
                }
                textEditing = false;
                checkSendButton();

            }
        });

        //share menu
        View shareMenu = findViewById(R.id.share_menu_container);
        shareMenuCaontainer = shareMenu;
        shareMenuCaontainer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        shareContainer = findViewById(R.id.closeMenuLayout);
        shareContainer.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                hideShare();
                return false;
            }
        });


        View.OnClickListener shareMenuOCL = new View.OnClickListener() {
            @Override
            public void onClick(View item) {
                if (item.getId() == R.id.share_gallery) {
                    Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                    intent.setType(""image/* video/*"");
                    startActivityForResult(intent, REQUEST_GALLERY);
                } else if (item.getId() == R.id.share_camera) {
                    File externalFile = Environment.getExternalStorageDirectory();
                    if (externalFile == null) {
                        Toast.makeText(ChatActivity.this, R.string.toast_no_sdcard, Toast.LENGTH_LONG).show();
                    } else {
                        String externalPath = externalFile.getAbsolutePath();
                        String exportPathBase = externalPath + ""/"" + ActorSDK.sharedActor().getAppName() + ""/"" + ActorSDK.sharedActor().getAppName() + "" images"" + ""/"";
                        new File(exportPathBase).mkdirs();

                        pending_fileName = exportPathBase + ""capture_"" + Randoms.randomId() + "".jpg"";
                    }
                    if (ContextCompat.checkSelfPermission(ChatActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
                        Log.d(""Permissions"", ""camera - no permission :c"");
                        ActivityCompat.requestPermissions(ChatActivity.this,
                                new String[]{Manifest.permission.CAMERA},
                                PERMISSIONS_REQUEST_CAMERA);

                    } else {
                        startCamera();
                    }
                } else if (item.getId() == R.id.share_video) {

                    File externalFile = Environment.getExternalStorageDirectory();
                    if (externalFile == null) {
                        Toast.makeText(ChatActivity.this, R.string.toast_no_sdcard, Toast.LENGTH_LONG).show();
                    } else {
                        String externalPath = externalFile.getAbsolutePath();
                        String exportPathBase = externalPath + ""/"" + ActorSDK.sharedActor().getAppName() + ""/"" + ActorSDK.sharedActor().getAppName() + "" video"" + ""/"";
                        new File(exportPathBase).mkdirs();

                        pending_fileName = exportPathBase + ""capture_"" + Randoms.randomId() + "".mp4"";

                        Intent i = new Intent(MediaStore.ACTION_VIDEO_CAPTURE)
                                .putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(new File(pending_fileName)));
                        startActivityForResult(i, REQUEST_VIDEO);
                    }
                } else if (item.getId() == R.id.share_file) {
                    startActivityForResult(Intents.pickFile(ChatActivity.this), REQUEST_DOC);
                } else if (item.getId() == R.id.share_location) {
                    startActivityForResult(Intents.pickLocation(ChatActivity.this), REQUEST_LOCATION);
                } else if (item.getId() == R.id.share_contact) {
                    Intent intent = new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI);
                    startActivityForResult(intent, REQUEST_CONTACT);
                } else if (item.getId() == R.id.share_hide) {
                    //just hide
                }

                //hide it
                hideShare();
            }
        };
        defaultSendOcl = shareMenuOCL;

        ArrayList<ShareMenuField> menuFields = new ArrayList<>();

        menuFields.add(new ShareMenuField(getString(R.string.share_menu_camera), R.id.share_camera, R.drawable.share_camera_selector, shareMenuOCL));
        menuFields.add(new ShareMenuField(getString(R.string.share_menu_file), R.id.share_file, R.drawable.share_file_selector, shareMenuOCL));
        menuFields.add(new ShareMenuField(getString(R.string.share_menu_gallery), R.id.share_gallery, R.drawable.share_gallery_selector, shareMenuOCL));
        try {
            Class.forName(""com.google.android.gms.maps.GoogleMap"");
            menuFields.add(new ShareMenuField(getString(R.string.share_menu_location), R.id.share_location, R.drawable.share_location_selector, shareMenuOCL));
        } catch (ClassNotFoundException e) {
            //ignore
        }
        menuFields.add(new ShareMenuField(getString(R.string.share_menu_video), R.id.share_video, R.drawable.share_video_selector, shareMenuOCL));
        menuFields.add(new ShareMenuField(getString(R.string.share_menu_contact), R.id.share_contact, R.drawable.share_contact_selector, shareMenuOCL));

        ActorSDK.sharedActor().getDelegate().addCustomShareMenuFields(menuFields);

        if (menuFields.size() % 2 != 0) {
            menuFields.add(new ShareMenuField(R.drawable.attach_hide2,
                    ActorSDK.sharedActor().style.getBackyardBackgroundColor(),
                    """",
                    new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {

                        }
                    }));
        }
        FrameLayout row = (FrameLayout) findViewById(R.id.share_row_one);
        shareMenu.setBackgroundDrawable(new InsetDrawable(new ColorDrawable(ActorSDK.sharedActor().style.getMainBackgroundColor()), 0, Screen.dp(2), 0, 0));
        shareMenu.setPadding(0, 0, 0, 0);
        boolean first = true;
        int menuItemSize = Screen.dp(80);
        int screenWidth = getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT ? Screen.getWidth() : Screen.getHeight();
        int distance = screenWidth / (menuFields.size() / 2 + menuFields.size() % 2);
        int initialMargin = distance / 2 - menuItemSize / 2;
        int marginFromStart = initialMargin;
        int secondRowTopMargin = Screen.dp(80);
        int shareIconSize = Screen.dp(60);

        for (int i = 0; i < menuFields.size(); i++) {
            ShareMenuField f = menuFields.get(i);

            LinearLayout shareItem = new LinearLayout(this);
            shareItem.setOrientation(LinearLayout.VERTICAL);
            shareItem.setGravity(Gravity.CENTER_HORIZONTAL);

            TextView title = new TextView(this);
            title.setGravity(Gravity.CENTER);
            title.setTextColor(ActorSDK.sharedActor().style.getTextPrimaryColor());
            title.setText(f.getTitle());

            ImageView icon = new ImageView(this);
            icon.setClickable(true);
            if (f.getSelector() != 0) {
                icon.setBackgroundResource(f.getSelector());
            } else {
                icon.setBackgroundDrawable(ShareMenuButtonFactory.get(f.getColor(), this));
                icon.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
                icon.setImageResource(f.getIcon());
            }

            shareItem.addView(icon, shareIconSize, shareIconSize);
            shareItem.addView(title);

            View.OnClickListener l = v -> {
                hideShare();
                f.getOnClickListener().onClick(icon);
            };
            icon.setId(f.getId());
            icon.setOnClickListener(l);

            FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(menuItemSize, menuItemSize);
            params.setMargins(marginFromStart, first ? 0 : secondRowTopMargin, initialMargin, 0);

            if (i == menuFields.size() - 1) {
                menuIconToChange = icon;
                menuTitleToChange = title;
                defaultSendOcl = l;

                params.setMargins(marginFromStart, first ? 0 : secondRowTopMargin, 0, 0);

            }
            row.addView(shareItem, params);
            if (!first) {
                marginFromStart += distance;
            }
            first = !first;
        }

        menuIconToChange.setTag(R.id.icon, ((ImageView) menuIconToChange).getDrawable());
        menuIconToChange.setTag(R.id.background, menuIconToChange.getBackground());
        menuTitleToChange.setTag(menuTitleToChange.getText().toString());

        handleIntent();

        shareSendOcl = v -> {
            Set<String> strings = fastShareAdapter.getSelectedVM().get();
            for (String s : strings.toArray(new String[strings.size()])) {
                execute(messenger().sendUri(peer, Uri.fromFile(new File(s))));
            }
            fastShareAdapter.clearSelected();
            hideShare();
        };

        RecyclerView fastShare = (RecyclerView) findViewById(R.id.fast_share);
        if (ActorSDK.sharedActor().isFastShareEnabled()) {
            fastShareAdapter = new FastShareAdapter(this);
            LinearLayoutManager layoutManager = new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false);
            fastShare.setAdapter(fastShareAdapter);
            fastShare.setLayoutManager(layoutManager);
            StateListDrawable background = ShareMenuButtonFactory.get(ActorSDK.sharedActor().style.getMainColor(), ChatActivity.this);

            fastShareAdapter.getSelectedVM().subscribe((val, valueModel) -> {
                if (val.size() > 0) {
                    menuIconToChange.setBackgroundDrawable(background);
                    menuIconToChange.setImageResource(R.drawable.conv_send);
                    menuIconToChange.setColorFilter(0xffffffff, PorterDuff.Mode.SRC_IN);
                    menuTitleToChange.setText(getString(R.string.chat_doc_send) + ""("" + val.size() + "")"");
                    menuIconToChange.setOnClickListener(shareSendOcl);
                    menuIconToChange.setPadding(Screen.dp(10), 0, Screen.dp(5), 0);
                } else {

                    menuIconToChange.setBackgroundDrawable((Drawable) menuIconToChange.getTag(R.id.background));
                    menuIconToChange.setImageDrawable((Drawable) menuIconToChange.getTag(R.id.icon));
                    menuIconToChange.setColorFilter(null);
                    menuIconToChange.setOnClickListener(defaultSendOcl);
                    menuTitleToChange.setText((String) menuTitleToChange.getTag());
                    menuIconToChange.setPadding(0, 0, 0, 0);
                }
            });
        } else {
            fastShare.setVisibility(View.GONE);
        }

        emptyBotSend = findViewById(R.id.botEmptyTextBlock);
        emptyBotHint = (TextView) findViewById(R.id.botEmptyHint);

        checkEmptyBot();
    }",False
58,startCamera(),Method,"onRequestPermissionsResult(int,String[],int[])",,java.lang.Object+Object() java.io.File+File(String),im.actor.sdk.controllers.conversation.ChatActivity+pending_fileName im.actor.sdk.controllers.conversation.ChatActivity+REQUEST_PHOTO,260,6,22588,525,2,,"private void startCamera() {
        startActivityForResult(
                new Intent(MediaStore.ACTION_IMAGE_CAPTURE)
                        .putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(new File(pending_fileName))),
                REQUEST_PHOTO);
    }",False
59,handleIntent(),Method,onNewIntent(Intent),,im.actor.core.entity.content.AbsContent+parse(byte[]) im.actor.core.entity.content.AbsContent+parse(byte[]),im.actor.sdk.controllers.conversation.ChatActivity+forwardText im.actor.sdk.controllers.conversation.ChatActivity+intent im.actor.sdk.controllers.conversation.ChatActivity+forwardTextRaw im.actor.sdk.controllers.conversation.ChatActivity+intent im.actor.sdk.controllers.conversation.ChatActivity+sendText im.actor.sdk.controllers.conversation.ChatActivity+intent im.actor.sdk.controllers.conversation.ChatActivity+forwardContent im.actor.sdk.controllers.conversation.ChatActivity+intent,390,12,22854,532,2,,"private void handleIntent() {

        //Forwarding
        forwardText = intent.getStringExtra(""forward_text"");
        forwardTextRaw = intent.getStringExtra(""forward_text_raw"");
        sendText = intent.getStringExtra(""send_text"");
        try {
            forwardContent = AbsContent.parse(intent.getByteArrayExtra(""forward_content""));
        } catch (Exception e) {

        }
    }",False
60,onNewIntent(Intent),Method,,,im.actor.core.entity.Peer+fromUniqueId(long) im.actor.core.entity.Peer+fromUniqueId(long) im.actor.sdk.controllers.conversation.ActorEditTextActivity+setFragment(Bundle) im.actor.sdk.controllers.conversation.ActorEditTextActivity+setFragment(Bundle) im.actor.sdk.controllers.conversation.ChatActivity+onPerformBind() im.actor.sdk.controllers.conversation.ChatActivity+onPerformBind() im.actor.sdk.controllers.conversation.ChatActivity+handleIntent() im.actor.sdk.controllers.conversation.ChatActivity+handleIntent(),im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+EXTRA_CHAT_PEER im.actor.sdk.controllers.conversation.ChatActivity+intent im.actor.sdk.controllers.conversation.ChatActivity+intent,366,13,23250,546,4,,"@Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        //Notify old chat closed
        messenger().onConversationClosed(peer);

        peer = Peer.fromUniqueId(intent.getExtras().getLong(EXTRA_CHAT_PEER));
        setFragment(null);

        onPerformBind();
        this.intent = intent;
        handleIntent();
    }",False
61,onCreateFragment(),Method,,,im.actor.sdk.controllers.settings.BaseActorChatActivity+getChatFragment(Peer) im.actor.sdk.controllers.settings.BaseActorChatActivity+getChatFragment(Peer) im.actor.sdk.controllers.conversation.messages.MessagesDefaultFragment+create(Peer) im.actor.sdk.controllers.conversation.messages.MessagesDefaultFragment+create(Peer) im.actor.sdk.controllers.conversation.messages.MessagesDefaultFragment+create(Peer) im.actor.sdk.controllers.conversation.messages.MessagesDefaultFragment+create(Peer),im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+peer,574,13,23623,561,4,,"@Override
    protected Fragment onCreateFragment() {
        if (ActorSDK.sharedActor().getDelegate().getChatIntent(peer, false) != null) {
            ActorIntent chatIntent = ActorSDK.sharedActor().getDelegate().getChatIntent(peer, false);
            if (chatIntent instanceof BaseActorChatActivity) {
                return ((BaseActorChatActivity) chatIntent).getChatFragment(peer);
            } else {
                return MessagesDefaultFragment.create(peer);
            }
        } else {
            return MessagesDefaultFragment.create(peer);
        }
    }",False
62,onResume(),Method,,,"im.actor.sdk.controllers.conversation.ChatActivity+checkIsBot() im.actor.sdk.controllers.conversation.ChatActivity+checkIsBot() im.actor.sdk.controllers.activity.BaseActivity+onResume() im.actor.sdk.view.emoji.keyboard.emoji.EmojiKeyboard+setPeer(Peer) im.actor.sdk.view.emoji.keyboard.emoji.EmojiKeyboard+setPeer(Peer) im.actor.runtime.actors.ActorSystem+actorOf(Props,String) im.actor.runtime.actors.ActorSystem+system() im.actor.runtime.actors.ActorSystem+system() im.actor.runtime.actors.ActorSystem+actorOf(Props,String) im.actor.runtime.actors.Props+changeDispatcher(String) im.actor.runtime.actors.Props+create(ActorCreator) im.actor.runtime.actors.Props+create(ActorCreator) +() +create()",im.actor.sdk.controllers.conversation.ActorEditTextActivity+emojiKeyboard im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+voiceRecordActor,3706,103,24230,577,1,,"@Override
    public void onResume() {
        checkIsBot();
        super.onResume();

        emojiKeyboard.setPeer(peer);

        voiceRecordActor = ActorSystem.system().actorOf(Props.create(new ActorCreator() {
            @Override
            public VoiceCaptureActor create() {
                return new VoiceCaptureActor(ChatActivity.this, new VoiceCaptureActor.VoiceCaptureCallback() {
                    @Override
                    public void onRecordProgress(final long time) {
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                audioTimer.setText(messenger().getFormatter().formatDuration((int) (time / 1000)));
                            }
                        });
                    }

                    @Override
                    public void onRecordCrash() {
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                hideAudio(true);
                            }
                        });
                    }

                    @Override
                    public void onRecordStop(long progress) {
                        if (progress < 1200) {
                            //Cancel
                        } else {
                            messenger().sendVoice(peer, (int) progress, audioFile);
                        }
                    }
                });
            }


        }).changeDispatcher(""voice_capture_dispatcher""), ""actor/voice_capture"");


        // Force keyboard open if activity started with Compose flag
        if (isCompose) {
            messageEditText.requestFocus();
            keyboardUtils.setImeVisibility(messageEditText, true);
        }
        isCompose = false;

        // Loading drafts
        isTypingDisabled = true;
        String text = messenger().loadDraft(peer);
        if (text != null) {
            // Using only links parsing to avoid non-mentions formatting
            Spannable spantext = AndroidMarkdown.processOnlyLinks(text);
            spantext = emoji().processEmojiCompatMutable(spantext, SmileProcessor.CONFIGURATION_BUBBLES);
            messageEditText.setText(spantext);
        } else {
            messageEditText.setText("""");
        }
        messageEditText.setSelection(messageEditText.getText().length());
        isTypingDisabled = false;

        if (sendText != null && !sendText.isEmpty()) {
            messageEditText.setText(sendText);
            sendText = """";
        }

        if (forwardTextRaw != null && !forwardTextRaw.isEmpty()) {
            addQuote(forwardText, forwardTextRaw);
            forwardText = """";
            forwardTextRaw = """";
        }

        if (forwardContent != null) {
            messenger().forwardContent(peer, forwardContent);
            forwardContent = null;
        }

        if (isBot) {
            emptyBotSend.setBackgroundColor(ActorSDK.sharedActor().style.getMainBackgroundColor());
            TextView emptyBotSendText = (TextView) emptyBotSend.findViewById(R.id.empty_bot_text);
            emptyBotSendText.setTextColor(ActorSDK.sharedActor().style.getMainColor());

            emptyBotSendText.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    messenger().sendMessage(peer, ""/start"");
                }
            });

            checkEmptyBot();
        }

        if (isShareVisible) {
            messenger().getGalleryScannerActor().send(new GalleryScannerActor.Show());
        }

    }",False
63,checkIsBot(),Method,onCreate(Bundle) onResume(),,im.actor.core.entity.Peer+getPeerType() im.actor.core.entity.Peer+getPeerType() im.actor.core.entity.Peer+getPeerId() im.actor.core.entity.Peer+getPeerId(),im.actor.sdk.controllers.conversation.ChatActivity+isBot im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+peer,131,3,27942,680,1,,"public void checkIsBot() {
        isBot = (peer.getPeerType() == PeerType.PRIVATE && users().get(peer.getPeerId()).isBot());
    }",False
64,checkEmptyBot(),Method,,im.actor.sdk.controllers.conversation.messages.MessagesFragment+checkBotEmptyView(),im.actor.core.entity.Peer+getPeerId() im.actor.core.entity.Peer+getPeerId(),im.actor.sdk.controllers.conversation.ChatActivity+isBot im.actor.sdk.controllers.conversation.ChatActivity+peer,483,14,28079,684,1,,"public void checkEmptyBot() {
        if (isBot) {
            messenger().isStarted(peer.getPeerId())
                    .then(empty -> {
                        if (empty) {
                            showView(emptyBotSend);
                            showView(emptyBotHint);
                        } else {
                            hideView(emptyBotSend);
                            hideView(emptyBotHint);
                        }
                    });
        }
    }",False
65,onPerformBind(),Method,onNewIntent(Intent),,"im.actor.sdk.controllers.activity.BaseActivity+onPerformBind() im.actor.core.entity.Peer+getPeerType() im.actor.core.entity.Peer+getPeerType() im.actor.core.entity.Peer+getPeerId() im.actor.core.entity.Peer+getPeerId() im.actor.sdk.controllers.activity.BaseActivity+bind(Value<T>,ValueChangedListener<T>) im.actor.sdk.controllers.activity.BaseActivity+bind(Value<T>,ValueChangedListener<T>) im.actor.core.entity.Peer+getPeerId() im.actor.core.entity.Peer+getPeerId() +onClick(View)",im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ActorEditTextActivity+inputBlockedText im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ActorEditTextActivity+inputBlockedText,1719,49,28569,701,4,,"@Override
    protected void onPerformBind() {
        super.onPerformBind();

        // Performing all required Data Binding here

        if (peer.getPeerType() == PeerType.PRIVATE) {

            // Loading user
            final UserVM user = users().get(peer.getPeerId());
            if (user == null) {
                finish();
                return;
            }

            // Bind user blocked
            inputBlockedText.setText(R.string.profile_settings_unblock);
            bind(users().get(peer.getPeerId()).getIsBlocked(), (val, valueModel) -> {
                inputBlockContainer.setVisibility(val ? View.VISIBLE : View.GONE);
            });
            inputBlockedText.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    execute(messenger().unblockUser(peer.getPeerId()));
                }
            });

            // Bind empty bot about
            if (isBot) {
                bind(users().get(peer.getPeerId()).getAbout(), (about, valueModel) -> {
                    emptyBotHint.setText((about != null && !about.isEmpty()) ? about : getString(R.string.chat_empty_bot_about));
                });
            }

        } else if (peer.getPeerType() == PeerType.GROUP) {

            // Loading group
            GroupVM group = groups().get(peer.getPeerId());
            if (group == null) {
                finish();
                return;
            }

            // Binding membership flag to inputBlockContainer panel
            bind(group.isMember(), (val, Value) -> {
                inputBlockContainer.setVisibility(val ? View.GONE : View.VISIBLE);
            });
        }
    }",False
66,onPause(),Method,,,im.actor.sdk.controllers.conversation.ActorEditTextActivity+onPause() im.actor.runtime.actors.ActorRef+send(Object) im.actor.runtime.actors.ActorRef+send(Object) im.actor.sdk.controllers.conversation.messages.content.AudioHolder+stopPlaying() im.actor.sdk.controllers.conversation.messages.content.AudioHolder+stopPlaying() im.actor.core.utils.GalleryScannerActor.Hide+Hide(),im.actor.sdk.controllers.conversation.ChatActivity+voiceRecordActor im.actor.runtime.actors.messages.PoisonPill+INSTANCE im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText,338,10,30294,751,1,,"@Override
    public void onPause() {
        super.onPause();

        voiceRecordActor.send(PoisonPill.INSTANCE);
        AudioHolder.stopPlaying();
        // Saving draft
        messenger().saveDraft(peer, messageEditText.getText().toString());
        messenger().getGalleryScannerActor().send(new GalleryScannerActor.Hide());
    }",False
67,onSendButtonPressed(),Method,,,"java.lang.String+isEmpty() java.lang.String+isEmpty() java.lang.String+concat(String) java.lang.String+concat(String) java.lang.String+length() java.lang.String+length() im.actor.sdk.util.KeyboardHelper+setImeVisibility(View,boolean) im.actor.sdk.util.KeyboardHelper+setImeVisibility(View,boolean) im.actor.sdk.controllers.activity.BaseActivity+execute(Command<T>,CommandCallback<T>) im.actor.sdk.controllers.activity.BaseActivity+execute(Command<T>,CommandCallback<T>) +() +onResult(Void)",im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ChatActivity+currentQuote im.actor.sdk.controllers.conversation.ChatActivity+currentQuote im.actor.sdk.controllers.conversation.ChatActivity+currentQuote im.actor.sdk.controllers.conversation.ChatActivity+quoteContainer im.actor.sdk.controllers.conversation.ChatActivity+currentQuote im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ChatActivity+autocompleteString im.actor.sdk.controllers.conversation.ActorEditTextActivity+keyboardUtils im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ChatActivity+textEditing im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+currentEditRid,1959,55,30659,764,4,,"@Override
    protected void onSendButtonPressed() {

        String rawText = messageEditText.getText().toString();

        if (currentQuote != null && !currentQuote.isEmpty()) {
            rawText = currentQuote.concat(rawText);
            goneView(quoteContainer);
            currentQuote = """";
        }

        messageEditText.setText("""");
        autocompleteString = """";

        if (rawText.length() == 0) {
            return;
        }

        // Hack for full screen mode
        if (getResources().getDisplayMetrics().heightPixels <=
                getResources().getDisplayMetrics().widthPixels) {
            keyboardUtils.setImeVisibility(messageEditText, false);
            messageEditText.clearFocus();
        }

        if (textEditing) {
            execute(messenger().updateMessage(peer, rawText, currentEditRid), new CommandCallback<Void>() {
                @Override
                public void onResult(Void res) {

                }

                @Override
                public void onError(final Exception e) {
                    runOnUiThread(() -> {
                        RpcException re = (RpcException) e;
                        String error;
                        if (re.getTag().equals(""NOT_IN_TIME_WINDOW"")) {
                            error = getString(R.string.edit_message_error_slowpoke);
                        } else if (re.getTag().equals(""NOT_LAST_MESSAGE"")) {
                            error = getString(R.string.edit_message_error_not_last);
                        } else {
                            error = re.getMessage();
                        }
                        Toast.makeText(ChatActivity.this, error, Toast.LENGTH_LONG).show();
                    });
                }
            });
            goneView(quoteContainer);
            checkSendButton();
            textEditing = false;
        } else {
            messenger().sendMessage(peer, rawText);
        }
    }",True
68,onAttachButtonClicked(),Method,,,"im.actor.sdk.util.Screen+dp(float) im.actor.sdk.util.Screen+dp(float) im.actor.sdk.controllers.conversation.ChatActivity+hideShare() im.actor.sdk.controllers.conversation.ChatActivity+hideShare() im.actor.sdk.controllers.conversation.ChatActivity+showShare() im.actor.sdk.controllers.conversation.ChatActivity+showShare() im.actor.sdk.util.KeyboardHelper+setImeVisibility(View,boolean) im.actor.sdk.util.KeyboardHelper+setImeVisibility(View,boolean)",im.actor.sdk.controllers.conversation.ChatActivity+shareMenuMaxHeight im.actor.sdk.controllers.conversation.ChatActivity+shareMenuMaxHeight im.actor.sdk.controllers.conversation.ChatActivity+shareMenuCaontainer im.actor.sdk.controllers.conversation.ChatActivity+shareContainer im.actor.sdk.controllers.conversation.ActorEditTextActivity+keyboardUtils im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText,787,24,32624,820,4,,"@Override
    protected void onAttachButtonClicked() {

        if (shareMenuMaxHeight == 0) {
            shareMenuMaxHeight = Screen.dp(245);
        }

        // Trying to open custom share menu
        if (ActorSDK.sharedActor().getDelegate().onAttachMenuClicked(this)) {
            return;
        }

        // Opening default share menu
        if (shareMenuCaontainer.getVisibility() == View.VISIBLE) {
            hideShare();
        } else {
            shareContainer.setVisibility(View.VISIBLE);
            showShare();
            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                keyboardUtils.setImeVisibility(messageEditText, false);
                messageEditText.clearFocus();
            }
        }
    }",True
69,"onActivityResult(int,int,Intent)",Method,,,"im.actor.sdk.controllers.activity.BaseActivity+execute(Command<T>,CommandCallback<T>) im.actor.sdk.controllers.activity.BaseActivity+execute(Command<T>,CommandCallback<T>) im.actor.sdk.controllers.activity.BaseActivity+execute(Command<T>,CommandCallback<T>) im.actor.sdk.controllers.activity.BaseActivity+execute(Command<T>,CommandCallback<T>) java.util.ArrayList+ArrayList() java.util.ArrayList+ArrayList() java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.util.ArrayList+add(E) java.util.ArrayList+add(E) java.util.ArrayList+add(E) java.util.ArrayList+add(E) im.actor.sdk.controllers.conversation.ActorEditTextActivity+onActivityResult(int,int,Intent)",im.actor.sdk.controllers.conversation.ChatActivity+REQUEST_GALLERY im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+REQUEST_PHOTO im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+pending_fileName im.actor.sdk.controllers.conversation.ChatActivity+pending_fileName im.actor.sdk.controllers.conversation.ChatActivity+REQUEST_VIDEO im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+pending_fileName im.actor.sdk.controllers.conversation.ChatActivity+pending_fileName im.actor.sdk.controllers.conversation.ChatActivity+REQUEST_DOC im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+REQUEST_CONTACT im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+REQUEST_LOCATION im.actor.sdk.controllers.conversation.ChatActivity+peer,4876,94,33417,845,4,,"@Override
    protected void onActivityResult(int requestCode, int resultCode, final Intent data) {
        if (resultCode == RESULT_OK) {
            if (requestCode == REQUEST_GALLERY) {
                if (data.getData() != null) {
                    execute(messenger().sendUri(peer, data.getData()), R.string.pick_downloading);
                }
            } else if (requestCode == REQUEST_PHOTO) {
                messenger().sendPhoto(peer, pending_fileName);
                MediaScannerConnection.scanFile(this, new String[]{pending_fileName}, new String[]{""image/jpeg""}, null);
            } else if (requestCode == REQUEST_VIDEO) {
                messenger().sendVideo(peer, pending_fileName);
                MediaScannerConnection.scanFile(this, new String[]{pending_fileName}, new String[]{""image/jpeg""}, null);
            } else if (requestCode == REQUEST_DOC) {
                if (data.getData() != null) {
                    execute(messenger().sendUri(peer, data.getData()), R.string.pick_downloading);
                } else if (data.hasExtra(""picked"")) {
                    ArrayList<String> files = data.getStringArrayListExtra(""picked"");
                    if (files != null) {
                        for (String s : files) {
                            messenger().sendDocument(peer, s);
                        }
                    }
                }
            } else if (requestCode == REQUEST_CONTACT) {
                ArrayList<String> phones = new ArrayList<String>();
                ArrayList<String> emails = new ArrayList<String>();
                String name = """";
                byte[] photo = null;

                Uri contactData = data.getData();
                Cursor c = managedQuery(contactData, null, null, null, null);
                if (c.moveToFirst()) {


                    String id = c.getString(c.getColumnIndexOrThrow(ContactsContract.Contacts._ID));

                    String hasPhone = c.getString(c.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER));

                    if (hasPhone.equalsIgnoreCase(""1"")) {
                        Cursor phonesCursor = getContentResolver().query(
                                ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null,
                                ContactsContract.CommonDataKinds.Phone.CONTACT_ID + "" = "" + id,
                                null, null);
                        if (phonesCursor.moveToFirst()) {
                            int phoneColumnIndex = phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DATA);
                            do {
                                phones.add(phonesCursor.getString(phoneColumnIndex));
                            } while (phonesCursor.moveToNext());
                            phonesCursor.close();
                        }

                    }
                    name = c.getString(c.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));


                    Cursor emailCursor = getContentResolver().query(
                            ContactsContract.CommonDataKinds.Email.CONTENT_URI, null,
                            ContactsContract.CommonDataKinds.Email.CONTACT_ID + "" = "" + id,
                            null, null);
                    if (emailCursor != null && emailCursor.moveToFirst()) {
                        int emailColumnIndex = emailCursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA);
                        do {
                            emails.add(emailCursor.getString(emailColumnIndex));
                        } while (emailCursor.moveToNext());
                        emailCursor.close();
                    }

                    Uri photoUri = Uri.withAppendedPath(contactData, ContactsContract.Contacts.Photo.CONTENT_DIRECTORY);
                    Cursor photoCursor = getContentResolver().query(photoUri,
                            new String[]{ContactsContract.Contacts.Photo.PHOTO}, null, null, null);
                    if (photoCursor == null) {

                    } else {
                        try {
                            if (photoCursor.moveToFirst()) {
                                photo = photoCursor.getBlob(0);

                            }
                        } finally {
                            photoCursor.close();
                        }
                    }

                }

                messenger().sendContact(peer, name, phones, emails, photo != null ? (Base64.encodeToString(photo, Base64.NO_WRAP)) : null);

            } else if (requestCode == REQUEST_LOCATION) {
                messenger().sendLocation(peer, data.getDoubleExtra(""longitude"", 0), data.getDoubleExtra(""latitude"", 0), data.getStringExtra(""street""), data.getStringExtra(""place""));
            }
        }
        super.onActivityResult(requestCode, resultCode, data);
    }",True
70,"showAutoComplete(boolean,boolean)",Method,"TextWatcherImp.onTextChanged(CharSequence,int,int,int) TextWatcherImp.onTextChanged(CharSequence,int,int,int)",,"im.actor.sdk.controllers.conversation.botcommands.CommandsAdapter+CommandsAdapter(int,Context,CommandsUpdatedCallback) im.actor.core.entity.Peer+getPeerId() im.actor.core.entity.Peer+getPeerId() +() +onMentionsUpdated(int,int)",im.actor.sdk.controllers.conversation.ChatActivity+isAutocompleteVisible im.actor.sdk.controllers.conversation.ChatActivity+isAutocompleteVisible im.actor.sdk.controllers.conversation.ChatActivity+autocompleteAdapter im.actor.sdk.controllers.conversation.ChatActivity+peer,2731,62,38336,942,2,,"private void showAutoComplete(boolean initEmpty, boolean isMentions) {
        if (isAutocompleteVisible) {
            return;
        }
        isAutocompleteVisible = true;

        if (!isMentions) {
            autocompleteAdapter = new CommandsAdapter(peer.getPeerId(), this, new CommandsAdapter.CommandsUpdatedCallback() {
                @Override
                public void onMentionsUpdated(int oldRowsCount, int newRowsCount) {
                    onMentionsChanged(oldRowsCount, newRowsCount);
                }
            });
        } else {
            GroupVM groupInfo = groups().get(peer.getPeerId());
            autocompleteAdapter = new MentionsAdapter(groupInfo.getId(), this, new MentionsAdapter.MentionsUpdatedCallback() {

                @Override
                public void onMentionsUpdated(int oldRowsCount, int newRowsCount) {
                    onMentionsChanged(oldRowsCount, newRowsCount);
                }
            }, initEmpty);
        }

//        if(autocompleteAdapter.getCount() == 0){
//            isAutocompleteVisible = false;
//            return;
//        }

        autocompleteList.setAdapter(autocompleteAdapter);
        autocompleteList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Object item = parent.getItemAtPosition(position);
                if (item != null && item instanceof MentionFilterResult) {

                    String origMention = ((MentionFilterResult) item).getMentionString();

                    if (autocompleteTriggerStart != -1 && autocompleteTriggerStart + autocompleteString.length() + 1 <= messageEditText.getText().length()) {

                        String mentionString = origMention + (autocompleteTriggerStart == 0 ? "": "" : "" "");

                        Editable text = messageEditText.getText();

                        int cursorPosition = autocompleteTriggerStart + mentionString.length();

                        text.replace(autocompleteTriggerStart, autocompleteTriggerStart + autocompleteString.length() + 1, mentionString);

                        messageEditText.setSelection(cursorPosition, cursorPosition);
                    }
                    hideMentions();
                } else if (item != null && item instanceof BotCommand) {
                    messenger().sendMessage(peer, ""/"".concat(((BotCommand) item).getSlashCommand()));
                    messageEditText.setText("""");
                    hideMentions();
                }
            }
        });
        hideShare();

        expandMentions(autocompleteList, 0, autocompleteList.getCount());
    }",False
71,hideMentions(),Method,"onBackPressed() TextWatcherImp.onTextChanged(CharSequence,int,int,int) TextWatcherImp.onTextChanged(CharSequence,int,int,int)",,im.actor.sdk.view.adapters.RecyclerListView+setAdapter(ListAdapter) im.actor.sdk.view.adapters.RecyclerListView+setAdapter(ListAdapter),im.actor.sdk.controllers.conversation.ChatActivity+isAutocompleteVisible im.actor.sdk.controllers.conversation.ChatActivity+isAutocompleteVisible im.actor.sdk.controllers.conversation.ChatActivity+autocompleteList im.actor.sdk.controllers.conversation.ChatActivity+autocompleteAdapter im.actor.sdk.controllers.conversation.ChatActivity+autocompleteAdapter im.actor.sdk.controllers.conversation.ChatActivity+autocompleteList,299,10,41073,1005,2,,"private void hideMentions() {
        if (!isAutocompleteVisible) {
            return;
        }
        isAutocompleteVisible = false;

        expandMentions(autocompleteList, autocompleteAdapter.getCount(), 0);
        autocompleteAdapter = null;
        autocompleteList.setAdapter(null);
    }",False
72,"onMentionsChanged(int,int)",Method,,,,im.actor.sdk.controllers.conversation.ChatActivity+autocompleteAdapter im.actor.sdk.controllers.conversation.ChatActivity+autocompleteList,201,5,41378,1016,2,,"private void onMentionsChanged(int oldRowsCount, int newRowsCount) {
        if (autocompleteAdapter != null) {
            expandMentions(autocompleteList, oldRowsCount, newRowsCount);
        }
    }",False
73,insertMention(int),Method,,im.actor.sdk.controllers.conversation.messages.MessagesDefaultFragment+onAvatarLongClick(int),"im.actor.core.viewmodel.generics.StringValueModel+get() im.actor.core.viewmodel.UserVM+getName() im.actor.core.viewmodel.UserVM+getName() im.actor.core.viewmodel.generics.StringValueModel+get() im.actor.core.viewmodel.generics.StringValueModel+get() im.actor.core.viewmodel.UserVM+getNick() im.actor.core.viewmodel.UserVM+getNick() im.actor.core.viewmodel.generics.StringValueModel+get() java.lang.String+isEmpty() java.lang.String+isEmpty() im.actor.sdk.util.KeyboardHelper+setImeVisibility(View,boolean) im.actor.sdk.util.KeyboardHelper+setImeVisibility(View,boolean)",im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ActorEditTextActivity+keyboardUtils im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText,596,13,41585,1022,1,,"public void insertMention(int uid) {
        UserVM user = users().get(uid);
        String name = user.getName().get();
        String nick = user.getNick().get();
        Editable text = messageEditText.getText();
        if (text.length() > 0 && text.charAt(text.length() - 1) != ' ') text.append("" "");

        String mentionString = ((nick != null && !nick.isEmpty()) ? ""@"" + nick : name) + (messageEditText.getText().length() > 0 ? "" "" : "": "");

        text.append(mentionString);
        messageEditText.requestFocus();
        keyboardUtils.setImeVisibility(messageEditText, true);
    }",False
74,"addQuote(String,String)",Method,,,java.lang.String+isEmpty() java.lang.String+isEmpty() im.actor.sdk.controllers.conversation.ChatActivity+hideShare() im.actor.sdk.controllers.conversation.ChatActivity+hideShare() im.actor.sdk.controllers.conversation.ChatActivity+checkSendButton() im.actor.sdk.controllers.conversation.ChatActivity+checkSendButton(),im.actor.sdk.controllers.conversation.ChatActivity+textEditing im.actor.sdk.controllers.conversation.ChatActivity+quoteText im.actor.sdk.controllers.conversation.ChatActivity+quoteText im.actor.sdk.controllers.conversation.ChatActivity+currentQuote im.actor.sdk.controllers.conversation.ChatActivity+quoteText im.actor.sdk.controllers.conversation.ChatActivity+quoteContainer,504,14,42203,1039,1,,"public void addQuote(String quote, String rawQuote) {
        textEditing = false;
        if (quote != null && !quote.isEmpty()) {
            quoteText.setText(quote);
        } else {
            quoteText.setText(rawQuote);
        }
        currentQuote = rawQuote;
        hideShare();
        quoteText.setCompoundDrawablesWithIntrinsicBounds(getResources().getDrawable(R.drawable.ic_editor_format_quote_gray), null, null, null);
        showView(quoteContainer);
        checkSendButton();

    }",False
75,onBackPressed(),Method,,,im.actor.sdk.controllers.conversation.ChatActivity+hideMentions() im.actor.sdk.controllers.conversation.ChatActivity+hideMentions() im.actor.sdk.controllers.conversation.ChatActivity+hideShare() im.actor.sdk.controllers.conversation.ChatActivity+hideShare() im.actor.sdk.view.emoji.keyboard.BaseKeyboard+isShowing() im.actor.sdk.view.emoji.keyboard.BaseKeyboard+isShowing() im.actor.sdk.view.emoji.keyboard.BaseKeyboard+dismiss() im.actor.sdk.view.emoji.keyboard.BaseKeyboard+dismiss(),im.actor.sdk.controllers.conversation.ChatActivity+isAutocompleteVisible im.actor.sdk.controllers.conversation.ChatActivity+isShareVisible im.actor.sdk.controllers.conversation.ActorEditTextActivity+emojiKeyboard im.actor.sdk.controllers.conversation.ActorEditTextActivity+emojiKeyboard,323,12,42742,1057,1,,"@Override
    public void onBackPressed() {
        if (isAutocompleteVisible) {
            hideMentions();
        } else if (isShareVisible) {
            hideShare();
        } else if (emojiKeyboard.isShowing()) {
            emojiKeyboard.dismiss();
        } else {
            super.onBackPressed();
        }
    }",False
76,onOptionsItemSelected(MenuItem),Method,,,"im.actor.sdk.util.KeyboardHelper+setImeVisibility(View,boolean) im.actor.sdk.util.KeyboardHelper+setImeVisibility(View,boolean)",im.actor.sdk.controllers.conversation.ActorEditTextActivity+keyboardUtils im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText,252,7,43071,1070,1,,"@Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Small Hack to a
        keyboardUtils.setImeVisibility(messageEditText, false);
        messageEditText.clearFocus();
        return super.onOptionsItemSelected(item);
    }",False
77,startSupportActionMode(ActionMode.Callback),Method,,,,,341,9,43329,1078,1,,"@Override
    public ActionMode startSupportActionMode(final ActionMode.Callback callback) {
        // Fix for bug https://code.google.com/p/android/issues/detail?id=159527
        final ActionMode mode = super.startSupportActionMode(callback);
        if (mode != null) {
            mode.invalidate();
        }
        return mode;
    }",False
78,onSaveInstanceState(Bundle),Method,,,im.actor.sdk.controllers.activity.BaseActivity+onSaveInstanceState(Bundle),im.actor.sdk.controllers.conversation.ChatActivity+pending_fileName im.actor.sdk.controllers.conversation.ChatActivity+STATE_FILE_NAME im.actor.sdk.controllers.conversation.ChatActivity+pending_fileName,236,8,43676,1088,4,,"@Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);

        if (pending_fileName != null) {
            outState.putString(STATE_FILE_NAME, pending_fileName);
        }
    }",True
79,"onEditTextMessage(long,String)",Method,,im.actor.sdk.controllers.conversation.messages.MessagesDefaultFragment+onClick(Message),im.actor.sdk.controllers.conversation.ChatActivity+hideShare() im.actor.sdk.controllers.conversation.ChatActivity+hideShare(),im.actor.sdk.controllers.conversation.ChatActivity+currentQuote im.actor.sdk.controllers.conversation.ChatActivity+forwardText im.actor.sdk.controllers.conversation.ChatActivity+forwardTextRaw im.actor.sdk.controllers.conversation.ChatActivity+textEditing im.actor.sdk.controllers.conversation.ChatActivity+currentEditRid im.actor.sdk.controllers.conversation.ChatActivity+quoteText im.actor.sdk.controllers.conversation.ChatActivity+quoteText im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ChatActivity+quoteContainer,570,13,43918,1096,1,,"public void onEditTextMessage(long rid, String text) {
        currentQuote = null;
        forwardText = null;
        forwardTextRaw = null;
        textEditing = true;
        currentEditRid = rid;
        quoteText.setCompoundDrawablesWithIntrinsicBounds(getResources().getDrawable(R.drawable.ic_content_create), null, null, null);
        quoteText.setText(R.string.edit_message);
        messageEditText.setText(text);
        hideShare();
        showView(quoteContainer);
        //we don't force check send button here, because it forces from text watcher
    }",False
80,TextWatcherImp,MemberClass,,,"im.actor.sdk.controllers.conversation.ChatActivity.TextWatcherImp+beforeTextChanged(CharSequence,int,int,int) im.actor.sdk.controllers.conversation.ChatActivity.TextWatcherImp+onTextChanged(CharSequence,int,int,int) java.lang.CharSequence+toString() java.lang.CharSequence+toString() java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+split(String) java.lang.String+split(String) java.lang.String+length() java.lang.String+length() java.lang.String+isEmpty() java.lang.String+isEmpty() im.actor.core.entity.Peer+getPeerType() im.actor.core.entity.Peer+getPeerType() java.lang.CharSequence+charAt(int) java.lang.CharSequence+charAt(int) java.lang.String+endsWith(String) java.lang.String+endsWith(String) im.actor.sdk.controllers.conversation.ChatActivity+showAutoComplete(boolean,boolean) im.actor.sdk.controllers.conversation.ChatActivity+showAutoComplete(boolean,boolean) java.lang.String+startsWith(String) java.lang.String+startsWith(String) java.lang.String+endsWith(String) java.lang.String+endsWith(String) im.actor.sdk.controllers.conversation.ChatActivity+showAutoComplete(boolean,boolean) im.actor.sdk.controllers.conversation.ChatActivity+showAutoComplete(boolean,boolean) im.actor.sdk.controllers.conversation.ChatActivity+hideMentions() im.actor.sdk.controllers.conversation.ChatActivity+hideMentions() java.lang.String+lastIndexOf(String) java.lang.String+lastIndexOf(String) java.lang.String+startsWith(String) java.lang.String+startsWith(String) java.lang.String+length() java.lang.String+length() java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+length() java.lang.String+length() java.lang.String+equals(Object) java.lang.String+equals(Object) im.actor.sdk.controllers.conversation.ChatActivity+hideMentions() im.actor.sdk.controllers.conversation.ChatActivity+hideMentions() im.actor.sdk.controllers.conversation.mentions.MentionsAdapter+setQuery(String) im.actor.sdk.controllers.conversation.mentions.MentionsAdapter+setQuery(String) java.lang.String+toLowerCase() java.lang.String+toLowerCase() im.actor.sdk.controllers.conversation.botcommands.CommandsAdapter+setQuery(String) im.actor.sdk.controllers.conversation.botcommands.CommandsAdapter+setQuery(String) java.lang.String+toLowerCase() java.lang.String+toLowerCase() im.actor.sdk.controllers.conversation.ChatActivity.TextWatcherImp+afterTextChanged(Editable) im.actor.sdk.controllers.conversation.ChatActivity+checkSendButton(boolean) im.actor.sdk.controllers.conversation.ChatActivity+checkSendButton(boolean)",im.actor.sdk.controllers.conversation.ChatActivity+isTypingDisabled im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ChatActivity+peer im.actor.sdk.controllers.conversation.ChatActivity+isBot im.actor.sdk.controllers.conversation.ChatActivity+isBot im.actor.sdk.controllers.conversation.ChatActivity+isBot im.actor.sdk.controllers.conversation.ChatActivity+autocompleteString im.actor.sdk.controllers.conversation.ChatActivity+isBot im.actor.sdk.controllers.conversation.ChatActivity+autocompleteTriggerStart im.actor.sdk.controllers.conversation.ChatActivity+autocompleteString im.actor.sdk.controllers.conversation.ChatActivity+autocompleteString im.actor.sdk.controllers.conversation.ChatActivity+autocompleteString im.actor.sdk.controllers.conversation.ChatActivity+autocompleteAdapter im.actor.sdk.controllers.conversation.ChatActivity+autocompleteAdapter im.actor.sdk.controllers.conversation.ChatActivity+autocompleteAdapter im.actor.sdk.controllers.conversation.ChatActivity+autocompleteString im.actor.sdk.controllers.conversation.ChatActivity+autocompleteAdapter im.actor.sdk.controllers.conversation.ChatActivity+autocompleteAdapter im.actor.sdk.controllers.conversation.ChatActivity+autocompleteString,3000,78,-1,-1,2,,"private class TextWatcherImp implements TextWatcher {

        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            // Notify about typing only when text is increased
            if (after > count && !isTypingDisabled) {
                messenger().onTyping(peer);
            }

        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            String str = s.toString();
            String firstPeace = str.substring(0, start + count);

            int startSelection = messageEditText.getSelectionStart();

            String currentWord = """";
            int length = 0;

            for (String word : str.split("" "")) {
                length = length + word.length() + 1;
                if (length > startSelection) {
                    currentWord = word;
                    break;
                }
            }

            currentWord = currentWord.isEmpty() ? str : currentWord;

            char autocompleteTriggerChar = '@';
            String autocompleteTriggerString = ""@"";


            if (peer.getPeerType() == PeerType.GROUP || isBot) {

                if (isBot) {
                    autocompleteTriggerChar = '/';
                    autocompleteTriggerString = ""/"";
                }
                //Open mentions
                if (count == 1 && s.charAt(start) == autocompleteTriggerChar && !str.endsWith("" "")) {
                    showAutoComplete(false, !isBot);
                    autocompleteString = """";

                } else if (currentWord.startsWith(autocompleteTriggerString) && !str.endsWith("" "")) {
                    showAutoComplete(true, !isBot);
                } else {
                    hideMentions();
                }

                //Set mentions query
                autocompleteTriggerStart = firstPeace.lastIndexOf(autocompleteTriggerString);
                if (currentWord.startsWith(autocompleteTriggerString) && currentWord.length() > 1) {
                    autocompleteString = currentWord.substring(1, currentWord.length());
                } else {
                    autocompleteString = """";
                }

                if (autocompleteString.equals("" "")) {
                    hideMentions();
                } else if (autocompleteAdapter != null) {
                    //mentionsDisplay.initSearch(autocompleteString, false);
                    if (autocompleteAdapter instanceof MentionsAdapter) {
                        ((MentionsAdapter) autocompleteAdapter).setQuery(autocompleteString.toLowerCase());
                    } else if (autocompleteAdapter instanceof CommandsAdapter) {
                        ((CommandsAdapter) autocompleteAdapter).setQuery(autocompleteString.toLowerCase());
                    }
                }
            }
        }

        @Override
        public void afterTextChanged(Editable s) {
            checkSendButton(s.length() > 0);
        }
    }",False
81,checkSendButton(),Method,"addQuote(String,String)",,im.actor.sdk.controllers.conversation.ChatActivity+checkSendButton(boolean) im.actor.sdk.controllers.conversation.ChatActivity+checkSendButton(boolean),im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText,102,3,47501,1190,1,,"public void checkSendButton() {
        checkSendButton(messageEditText.getText().length() > 0);
    }",True
82,checkSendButton(boolean),Method,TextWatcherImp.afterTextChanged(Editable) checkSendButton(),,java.lang.String+isEmpty() java.lang.String+isEmpty() im.actor.sdk.view.TintImageView+setTint(int) im.actor.sdk.view.TintImageView+setTint(int) im.actor.sdk.view.TintImageView+setTint(int) im.actor.sdk.view.TintImageView+setTint(int),im.actor.sdk.controllers.conversation.ChatActivity+currentQuote im.actor.sdk.controllers.conversation.ChatActivity+currentQuote im.actor.sdk.controllers.conversation.ActorEditTextActivity+sendButton im.actor.sdk.controllers.conversation.ActorEditTextActivity+sendButton im.actor.sdk.controllers.conversation.ActorEditTextActivity+sendButton im.actor.sdk.controllers.conversation.ChatActivity+audioButton im.actor.sdk.controllers.conversation.ActorEditTextActivity+sendButton im.actor.sdk.controllers.conversation.ActorEditTextActivity+sendButton im.actor.sdk.controllers.conversation.ChatActivity+audioButton im.actor.sdk.controllers.conversation.ActorEditTextActivity+sendButton,563,13,47609,1194,1,,"public void checkSendButton(boolean hasText) {
        if (hasText || (currentQuote != null && !currentQuote.isEmpty())) {
            sendButton.setTint(ActorSDK.sharedActor().style.getConvSendEnabledColor());
            sendButton.setEnabled(true);
            zoomInView(sendButton);
            zoomOutView(audioButton);
        } else {
            sendButton.setTint(ActorSDK.sharedActor().style.getConvSendDisabledColor());
            sendButton.setEnabled(false);
            zoomInView(audioButton);
            zoomOutView(sendButton);
        }
    }",True
83,showAudio(),Method,,,"im.actor.runtime.Log+d(String,String) im.actor.runtime.Log+d(String,String) java.util.concurrent.atomic.AtomicInteger+incrementAndGet() java.util.concurrent.atomic.AtomicInteger+incrementAndGet() im.actor.runtime.actors.ActorRef+send(Object) im.actor.runtime.actors.ActorRef+send(Object) im.actor.sdk.core.audio.VoiceCaptureActor.Start+Start(String) im.actor.sdk.controllers.conversation.ChatActivity+slideAudio(int) im.actor.sdk.controllers.conversation.ChatActivity+slideAudio(int) im.actor.sdk.util.Screen+getWidth() im.actor.sdk.util.Screen+getWidth()",im.actor.sdk.controllers.conversation.ChatActivity+PERMISSION_REQUEST_RECORD_AUDIO im.actor.sdk.controllers.conversation.ChatActivity+isAudioVisible im.actor.sdk.controllers.conversation.ChatActivity+isAudioVisible im.actor.sdk.controllers.conversation.ActorEditTextActivity+attachButton im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ActorEditTextActivity+emojiButton im.actor.sdk.controllers.conversation.ActorEditTextActivity+sendContainer im.actor.sdk.controllers.conversation.ChatActivity+audioFile im.actor.sdk.core.audio.VoiceCaptureActor+LAST_ID im.actor.sdk.controllers.conversation.ChatActivity+voiceRecordActor im.actor.sdk.controllers.conversation.ChatActivity+audioFile im.actor.sdk.controllers.conversation.ChatActivity+audioTimer im.actor.sdk.controllers.conversation.ChatActivity+audioContainer im.actor.sdk.controllers.conversation.ChatActivity+audioContainer im.actor.sdk.controllers.conversation.ChatActivity+audioContainer im.actor.sdk.controllers.conversation.ChatActivity+audioContainer im.actor.sdk.controllers.conversation.ChatActivity+recordPoint im.actor.sdk.controllers.conversation.ChatActivity+recordPoint im.actor.sdk.controllers.conversation.ChatActivity+recordPoint,1803,45,48178,1208,2,,"private void showAudio() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this, Manifest.permission.VIBRATE) != PackageManager.PERMISSION_GRANTED) {
            Log.d(""Permissions"", ""recordAudio - no permission :c"");
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.RECORD_AUDIO, Manifest.permission.VIBRATE}, PERMISSION_REQUEST_RECORD_AUDIO);
            return;
        }

        if (isAudioVisible) {
            return;
        }
        isAudioVisible = true;

        hideView(attachButton);
        hideView(messageEditText);
        hideView(emojiButton);
        hideView(sendContainer);

        audioFile = ActorSDK.sharedActor().getMessenger().getInternalTempFile(""voice_msg"", ""opus"");


        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_NOSENSOR);

        long id = VoiceCaptureActor.LAST_ID.incrementAndGet();
        voiceRecordActor.send(new VoiceCaptureActor.Start(audioFile));

        slideAudio(0);
        audioTimer.setText(""00:00"");

        TranslateAnimation animation = new TranslateAnimation(Screen.getWidth(), 0, 0, 0);
        animation.setDuration(160);
        audioContainer.clearAnimation();
        audioContainer.setAnimation(animation);
        audioContainer.animate();
        audioContainer.setVisibility(View.VISIBLE);


        AlphaAnimation alphaAnimation = new AlphaAnimation(1f, 0.2f);
        alphaAnimation.setDuration(800);
        alphaAnimation.setRepeatMode(AlphaAnimation.REVERSE);
        alphaAnimation.setRepeatCount(AlphaAnimation.INFINITE);
        recordPoint.clearAnimation();
        recordPoint.setAnimation(alphaAnimation);
        recordPoint.animate();
    }",True
84,onDestroy(),Method,,,im.actor.sdk.controllers.conversation.ActorEditTextActivity+onDestroy() im.actor.sdk.view.adapters.HolderAdapter+dispose() im.actor.sdk.view.adapters.HolderAdapter+dispose() im.actor.sdk.controllers.conversation.view.FastShareAdapter+release() im.actor.sdk.controllers.conversation.view.FastShareAdapter+release(),im.actor.sdk.controllers.conversation.ChatActivity+autocompleteAdapter im.actor.sdk.controllers.conversation.ChatActivity+autocompleteAdapter im.actor.sdk.controllers.conversation.ChatActivity+fastShareAdapter im.actor.sdk.controllers.conversation.ChatActivity+fastShareAdapter im.actor.sdk.controllers.conversation.ChatActivity+fastShareAdapter,298,11,49987,1255,4,,"@Override
    protected void onDestroy() {
        super.onDestroy();
        if (autocompleteAdapter != null) {
            autocompleteAdapter.dispose();
        }
        if (fastShareAdapter != null) {
            fastShareAdapter.release();
            fastShareAdapter = null;
        }
    }",False
85,hideAudio(boolean),Method,,,im.actor.runtime.actors.ActorRef+send(Object) im.actor.runtime.actors.ActorRef+send(Object) im.actor.sdk.core.audio.VoiceCaptureActor.Stop+Stop(boolean) im.actor.sdk.util.Screen+getWidth() im.actor.sdk.util.Screen+getWidth(),im.actor.sdk.controllers.conversation.ChatActivity+isAudioVisible im.actor.sdk.controllers.conversation.ChatActivity+isAudioVisible im.actor.sdk.controllers.conversation.ActorEditTextActivity+attachButton im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ActorEditTextActivity+emojiButton im.actor.sdk.controllers.conversation.ActorEditTextActivity+sendContainer im.actor.sdk.controllers.conversation.ChatActivity+voiceRecordActor im.actor.sdk.controllers.conversation.ChatActivity+audioContainer im.actor.sdk.controllers.conversation.ChatActivity+audioContainer im.actor.sdk.controllers.conversation.ChatActivity+audioContainer im.actor.sdk.controllers.conversation.ChatActivity+audioContainer im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText,759,24,50291,1266,2,,"private void hideAudio(boolean cancel) {
        if (!isAudioVisible) {
            return;
        }
        isAudioVisible = false;

        showView(attachButton);
        showView(messageEditText);
        showView(emojiButton);
        showView(sendContainer);


        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);

        voiceRecordActor.send(new VoiceCaptureActor.Stop(cancel));
        TranslateAnimation animation = new TranslateAnimation(0, Screen.getWidth(), 0, 0);
        animation.setDuration(160);
        audioContainer.clearAnimation();
        audioContainer.setAnimation(animation);
        audioContainer.animate();
        audioContainer.setVisibility(View.GONE);
        messageEditText.requestFocus();

    }",True
86,animationInProgress,Field,,,,,44,1,51056,1291,2,,private boolean animationInProgress = false;,False
87,showShare(),Method,onAttachButtonClicked(),,"im.actor.sdk.util.KeyboardHelper+setImeVisibility(View,boolean) im.actor.sdk.util.KeyboardHelper+setImeVisibility(View,boolean) im.actor.sdk.controllers.conversation.ChatActivity+showShareChecked() im.actor.sdk.controllers.conversation.ChatActivity+showShareChecked() im.actor.sdk.controllers.conversation.ChatActivity+showShareChecked() im.actor.sdk.controllers.conversation.ChatActivity+showShareChecked()",im.actor.sdk.controllers.conversation.ActorEditTextActivity+keyboardUtils im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ActorEditTextActivity+messageEditText im.actor.sdk.controllers.conversation.ChatActivity+PERMISSION_REQ_MEDIA im.actor.sdk.controllers.conversation.ChatActivity+menuIconToChange im.actor.sdk.controllers.conversation.ChatActivity+menuIconToChange,706,16,51106,1293,2,,"private void showShare() {
        keyboardUtils.setImeVisibility(messageEditText, false);
        messageEditText.clearFocus();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (ContextCompat.checkSelfPermission(ChatActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {

                ActivityCompat.requestPermissions(ChatActivity.this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, PERMISSION_REQ_MEDIA);

            } else {
                showShareChecked();
            }
        } else {
            showShareChecked();
        }
        menuIconToChange.invalidateDrawable(menuIconToChange.getDrawable());
    }",False
88,showShareChecked(),Method,"showShare() showShare() onRequestPermissionsResult(int,String[],int[])",,+onAnimationStart(Animation),im.actor.sdk.controllers.conversation.ChatActivity+animationInProgress im.actor.sdk.controllers.conversation.ChatActivity+animationListener im.actor.sdk.controllers.conversation.ChatActivity+animationListener,1243,35,51818,1310,2,,"private void showShareChecked() {
        if (animationInProgress) {
            return;
        }
        if (animationListener == null) {
            animationListener = new Animation.AnimationListener() {
                @Override
                public void onAnimationStart(Animation animation) {
                    animationInProgress = true;
                }

                @Override
                public void onAnimationEnd(Animation animation) {
                    animationInProgress = false;
                }

                @Override
                public void onAnimationRepeat(Animation animation) {

                }
            };
        }

        TranslateAnimation animation = new TranslateAnimation(0, 0, Screen.getHeight(), 0);
        animation.setDuration(160);
        animation.setAnimationListener(animationListener);
        shareMenuCaontainer.clearAnimation();
        shareMenuCaontainer.setAnimation(animation);
        shareMenuCaontainer.animate();
        shareMenuCaontainer.setVisibility(View.VISIBLE);
        isShareVisible = true;
        if (ActorSDK.sharedActor().isFastShareEnabled()) {
            messenger().getGalleryScannerActor().send(new GalleryScannerActor.Show());
        }
    }",True
89,hideShare(),Method,"onAttachButtonClicked() addQuote(String,String) onBackPressed() onEditTextMessage(long,String)",,im.actor.sdk.util.Screen+getHeight() im.actor.sdk.util.Screen+getHeight() im.actor.core.utils.GalleryScannerActor.Hide+Hide(),im.actor.sdk.controllers.conversation.ChatActivity+isShareVisible im.actor.sdk.controllers.conversation.ChatActivity+animationInProgress im.actor.sdk.controllers.conversation.ChatActivity+isShareVisible im.actor.sdk.controllers.conversation.ChatActivity+animationListener im.actor.sdk.controllers.conversation.ChatActivity+shareMenuCaontainer im.actor.sdk.controllers.conversation.ChatActivity+shareMenuCaontainer im.actor.sdk.controllers.conversation.ChatActivity+shareMenuCaontainer im.actor.sdk.controllers.conversation.ChatActivity+shareMenuCaontainer im.actor.sdk.controllers.conversation.ChatActivity+shareContainer,733,19,53067,1346,1,,"public void hideShare() {
        if (!isShareVisible || animationInProgress) {
            return;
        }
        isShareVisible = false;
        TranslateAnimation animation = new TranslateAnimation(0, 0, 0, Screen.getHeight());
        animation.setDuration(160);

        animation.setAnimationListener(animationListener);
        shareMenuCaontainer.clearAnimation();
        shareMenuCaontainer.setAnimation(animation);
        shareMenuCaontainer.animate();
        shareMenuCaontainer.setVisibility(View.GONE);
        shareContainer.setVisibility(View.GONE);
        if (ActorSDK.sharedActor().isFastShareEnabled()) {
            messenger().getGalleryScannerActor().send(new GalleryScannerActor.Hide());
        }

    }",True
90,slideAudio(int),Method,showAudio(),,,im.actor.sdk.controllers.conversation.ChatActivity+audioSlide im.actor.sdk.controllers.conversation.ChatActivity+audioSlide,196,5,53806,1366,2,,"private void slideAudio(int value) {
        ObjectAnimator oa = ObjectAnimator.ofFloat(audioSlide, ""translationX"", audioSlide.getX(), -value);
        oa.setDuration(0);
        oa.start();
    }",True
91,getPeer(),Method,,im.actor.sdk.view.markdown.AndroidMarkdown+onClick(View),,im.actor.sdk.controllers.conversation.ChatActivity+peer,50,3,54008,1372,1,,"public Peer getPeer() {
        return peer;
    }",True
92,"onRequestPermissionsResult(int,String[],int[])",Method,,,im.actor.sdk.controllers.conversation.ChatActivity+startCamera() im.actor.sdk.controllers.conversation.ChatActivity+startCamera() im.actor.sdk.controllers.conversation.ChatActivity+showShareChecked() im.actor.sdk.controllers.conversation.ChatActivity+showShareChecked(),im.actor.sdk.controllers.conversation.ChatActivity+PERMISSIONS_REQUEST_CAMERA im.actor.sdk.controllers.conversation.ChatActivity+PERMISSION_REQ_MEDIA,577,14,54064,1377,1,,"@Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        if (requestCode == PERMISSIONS_REQUEST_CAMERA) {
            if (grantResults.length > 0
                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                startCamera();
            }
        } else if (requestCode == PERMISSION_REQ_MEDIA) {
            if (grantResults.length > 0
                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                showShareChecked();
            }
        }
    }",True
