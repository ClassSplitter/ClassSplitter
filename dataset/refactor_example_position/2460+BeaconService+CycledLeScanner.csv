index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,annotation,full text,removed
1,TAG,Field,,,,,49,1,2269,69,25,,"public static final String TAG = ""BeaconService"";",False
2,rangedRegionState,Field,,,,,86,1,2324,71,2,,"private Map<Region, RangeState> rangedRegionState = new HashMap<Region, RangeState>();",False
3,monitoredRegionState,Field,,,,,93,1,2415,72,2,,"private Map<Region, MonitorState> monitoredRegionState = new HashMap<Region, MonitorState>();",False
4,bluetoothAdapter,Field,,,,,42,1,2513,73,2,,private BluetoothAdapter bluetoothAdapter;,False
5,scanning,Field,,,,,25,1,2560,74,2,,private boolean scanning;,False
6,scanningPaused,Field,,,,,31,1,2590,75,2,,private boolean scanningPaused;,False
7,lastBeaconDetectionTime,Field,,,,,50,1,2626,76,2,,private Date lastBeaconDetectionTime = new Date();,False
8,trackedBeacons,Field,,,,,39,1,2681,77,2,,private HashSet<Beacon> trackedBeacons;,False
9,trackedBeaconsPacketCount,Field,,,,,30,1,2725,78,0,,int trackedBeaconsPacketCount;,False
10,handler,Field,,,,,40,1,2760,79,2,,private Handler handler = new Handler();,False
11,bindCount,Field,,,,,26,1,2805,80,2,,private int bindCount = 0;,False
12,bluetoothCrashResolver,Field,,,,,54,1,2836,81,2,,private BluetoothCrashResolver bluetoothCrashResolver;,False
13,scanCyclerStarted,Field,,,,,42,1,2895,82,2,,private boolean scanCyclerStarted = false;,False
14,scanningEnabled,Field,,,,,40,1,2942,83,2,,private boolean scanningEnabled = false;,False
15,defaultDistanceCalculator,Field,,,,,60,1,2987,84,2,,private DistanceCalculator defaultDistanceCalculator = null;,False
16,beaconParsers,Field,ScanProcessor.doInBackground(ScanData),,,,41,1,3052,85,2,,private List<BeaconParser> beaconParsers;,False
17,scanPeriod,Field,"setScanPeriods(long,long)",,,,71,1,4342,109,2,,private long scanPeriod = BeaconManager.DEFAULT_FOREGROUND_SCAN_PERIOD;,False
18,betweenScanPeriod,Field,"setScanPeriods(long,long)",,,,86,1,4418,110,2,,private long betweenScanPeriod = BeaconManager.DEFAULT_FOREGROUND_BETWEEN_SCAN_PERIOD;,False
19,simulatedScanData,Field,onCreate(),,,,46,1,4510,112,2,,private List<Beacon> simulatedScanData = null;,False
20,BeaconBinder,MemberClass,,,org.altbeacon.beacon.service.BeaconService.BeaconBinder+getService(),org.altbeacon.beacon.service.BeaconService+TAG,463,11,-1,-1,1,"/** 
 * Class used for the client Binder.  Because we know this service always runs in the same process as its clients, we don't need to deal with IPC.
 */
","/**
     * Class used for the client Binder.  Because we know this service always
     * runs in the same process as its clients, we don't need to deal with IPC.
     */
    public class BeaconBinder extends Binder {
        public BeaconService getService() {
            Log.i(TAG, ""getService of BeaconBinder called"");
            // Return this instance of LocalService so clients can call public methods
            return BeaconService.this;
        }
    }",False
21,MSG_START_RANGING,Field,,,,,113,4,5032,130,25,"/** 
 * Command to the service to display a message
 */
","/**
     * Command to the service to display a message
     */
    public static final int MSG_START_RANGING = 2;",False
22,MSG_STOP_RANGING,Field,,,,,45,1,5150,131,25,,public static final int MSG_STOP_RANGING = 3;,False
23,MSG_START_MONITORING,Field,,,,,49,1,5200,132,25,,public static final int MSG_START_MONITORING = 4;,False
24,MSG_STOP_MONITORING,Field,,,,,48,1,5254,133,25,,public static final int MSG_STOP_MONITORING = 5;,False
25,MSG_SET_SCAN_PERIODS,Field,,,,,49,1,5307,134,25,,public static final int MSG_SET_SCAN_PERIODS = 6;,False
26,IncomingHandler,MemberClass,,,"org.altbeacon.beacon.service.BeaconService.IncomingHandler+IncomingHandler(BeaconService) java.lang.ref.WeakReference+WeakReference(T) org.altbeacon.beacon.service.BeaconService.IncomingHandler+handleMessage(Message) java.lang.ref.Reference+get() java.lang.ref.Reference+get() org.altbeacon.beacon.service.BeaconService+startRangingBeaconsInRegion(Region,Callback) org.altbeacon.beacon.service.BeaconService+startRangingBeaconsInRegion(Region,Callback) org.altbeacon.beacon.service.StartRMData+getRegionData() org.altbeacon.beacon.service.StartRMData+getRegionData() org.altbeacon.beacon.service.Callback+Callback(String) org.altbeacon.beacon.service.StartRMData+getCallbackPackageName() org.altbeacon.beacon.service.StartRMData+getCallbackPackageName() org.altbeacon.beacon.service.BeaconService+setScanPeriods(long,long) org.altbeacon.beacon.service.BeaconService+setScanPeriods(long,long) org.altbeacon.beacon.service.StartRMData+getScanPeriod() org.altbeacon.beacon.service.StartRMData+getScanPeriod() org.altbeacon.beacon.service.StartRMData+getBetweenScanPeriod() org.altbeacon.beacon.service.StartRMData+getBetweenScanPeriod() org.altbeacon.beacon.service.BeaconService+stopRangingBeaconsInRegion(Region) org.altbeacon.beacon.service.BeaconService+stopRangingBeaconsInRegion(Region) org.altbeacon.beacon.service.StartRMData+getRegionData() org.altbeacon.beacon.service.StartRMData+getRegionData() org.altbeacon.beacon.service.BeaconService+setScanPeriods(long,long) org.altbeacon.beacon.service.BeaconService+setScanPeriods(long,long) org.altbeacon.beacon.service.StartRMData+getScanPeriod() org.altbeacon.beacon.service.StartRMData+getScanPeriod() org.altbeacon.beacon.service.StartRMData+getBetweenScanPeriod() org.altbeacon.beacon.service.StartRMData+getBetweenScanPeriod() org.altbeacon.beacon.service.BeaconService+startMonitoringBeaconsInRegion(Region,Callback) org.altbeacon.beacon.service.BeaconService+startMonitoringBeaconsInRegion(Region,Callback) org.altbeacon.beacon.service.StartRMData+getRegionData() org.altbeacon.beacon.service.StartRMData+getRegionData() org.altbeacon.beacon.service.Callback+Callback(String) org.altbeacon.beacon.service.StartRMData+getCallbackPackageName() org.altbeacon.beacon.service.StartRMData+getCallbackPackageName() org.altbeacon.beacon.service.BeaconService+setScanPeriods(long,long) org.altbeacon.beacon.service.BeaconService+setScanPeriods(long,long) org.altbeacon.beacon.service.StartRMData+getScanPeriod() org.altbeacon.beacon.service.StartRMData+getScanPeriod() org.altbeacon.beacon.service.StartRMData+getBetweenScanPeriod() org.altbeacon.beacon.service.StartRMData+getBetweenScanPeriod() org.altbeacon.beacon.service.BeaconService+stopMonitoringBeaconsInRegion(Region) org.altbeacon.beacon.service.BeaconService+stopMonitoringBeaconsInRegion(Region) org.altbeacon.beacon.service.StartRMData+getRegionData() org.altbeacon.beacon.service.StartRMData+getRegionData() org.altbeacon.beacon.service.BeaconService+setScanPeriods(long,long) org.altbeacon.beacon.service.BeaconService+setScanPeriods(long,long) org.altbeacon.beacon.service.StartRMData+getScanPeriod() org.altbeacon.beacon.service.StartRMData+getScanPeriod() org.altbeacon.beacon.service.StartRMData+getBetweenScanPeriod() org.altbeacon.beacon.service.StartRMData+getBetweenScanPeriod() org.altbeacon.beacon.service.BeaconService+setScanPeriods(long,long) org.altbeacon.beacon.service.BeaconService+setScanPeriods(long,long) org.altbeacon.beacon.service.StartRMData+getScanPeriod() org.altbeacon.beacon.service.StartRMData+getScanPeriod() org.altbeacon.beacon.service.StartRMData+getBetweenScanPeriod() org.altbeacon.beacon.service.StartRMData+getBetweenScanPeriod()",org.altbeacon.beacon.service.BeaconService.IncomingHandler+mService org.altbeacon.beacon.service.BeaconService.IncomingHandler+mService org.altbeacon.beacon.service.BeaconService.IncomingHandler+mService org.altbeacon.beacon.service.BeaconService+MSG_START_RANGING org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+MSG_STOP_RANGING org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+MSG_START_MONITORING org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+MSG_STOP_MONITORING org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+MSG_SET_SCAN_PERIODS org.altbeacon.beacon.service.BeaconService+TAG,2405,44,-1,-1,8,,"static class IncomingHandler extends Handler {
        private final WeakReference<BeaconService> mService;

        IncomingHandler(BeaconService service) {
            mService = new WeakReference<BeaconService>(service);
        }

        @Override
        public void handleMessage(Message msg) {
            BeaconService service = mService.get();
            StartRMData startRMData = (StartRMData) msg.obj;

            if (service != null) {
                switch (msg.what) {
                    case MSG_START_RANGING:
                        Log.i(TAG, ""start ranging received"");
                        service.startRangingBeaconsInRegion(startRMData.getRegionData(), new org.altbeacon.beacon.service.Callback(startRMData.getCallbackPackageName()));
                        service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod());
                        break;
                    case MSG_STOP_RANGING:
                        Log.i(TAG, ""stop ranging received"");
                        service.stopRangingBeaconsInRegion(startRMData.getRegionData());
                        service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod());
                        break;
                    case MSG_START_MONITORING:
                        Log.i(TAG, ""start monitoring received"");
                        service.startMonitoringBeaconsInRegion(startRMData.getRegionData(), new org.altbeacon.beacon.service.Callback(startRMData.getCallbackPackageName()));
                        service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod());
                        break;
                    case MSG_STOP_MONITORING:
                        Log.i(TAG, ""stop monitoring received"");
                        service.stopMonitoringBeaconsInRegion(startRMData.getRegionData());
                        service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod());
                        break;
                    case MSG_SET_SCAN_PERIODS:
                        Log.i(TAG, ""set scan intervals received"");
                        service.setScanPeriods(startRMData.getScanPeriod(), startRMData.getBetweenScanPeriod());
                        break;
                    default:
                        super.handleMessage(msg);
                }
            }
        }
    }",False
27,mMessenger,Field,,,,,160,4,7774,185,16,"/** 
 * Target we publish for clients to send messages to IncomingHandler.
 */
","/**
     * Target we publish for clients to send messages to IncomingHandler.
     */
    final Messenger mMessenger = new Messenger(new IncomingHandler(this));",False
28,onBind(Intent),Method,,,,org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+bindCount org.altbeacon.beacon.service.BeaconService+mMessenger,285,10,7940,192,1,"/** 
 * When binding to the service, we return an interface to our messenger for sending messages to the service.
 */
","/**
     * When binding to the service, we return an interface to our messenger
     * for sending messages to the service.
     */
    @Override
    public IBinder onBind(Intent intent) {
        Log.i(TAG, ""binding"");
        bindCount++;
        return mMessenger.getBinder();
    }",False
29,onUnbind(Intent),Method,,,,org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+bindCount,136,6,8231,199,1,,"@Override
    public boolean onUnbind(Intent intent) {
        Log.i(TAG, ""unbinding"");
        bindCount--;
        return false;
    }",False
30,onCreate(),Method,,,"org.altbeacon.beacon.service.BeaconService+getBluetoothAdapter() org.altbeacon.beacon.service.BeaconService+getBluetoothAdapter() org.altbeacon.bluetooth.BluetoothCrashResolver+BluetoothCrashResolver(Context) org.altbeacon.bluetooth.BluetoothCrashResolver+start() org.altbeacon.bluetooth.BluetoothCrashResolver+start() org.altbeacon.beacon.BeaconManager+getInstanceForApplication(Context) org.altbeacon.beacon.BeaconManager+getInstanceForApplication(Context) org.altbeacon.beacon.distance.ModelSpecificDistanceCalculator+ModelSpecificDistanceCalculator(Context,String) org.altbeacon.beacon.BeaconManager+getDistanceModelUpdateUrl() org.altbeacon.beacon.BeaconManager+getDistanceModelUpdateUrl() org.altbeacon.beacon.Beacon+setDistanceCalculator(DistanceCalculator) org.altbeacon.beacon.Beacon+setDistanceCalculator(DistanceCalculator) java.lang.Class+forName(String) java.lang.Class+forName(String) java.lang.Class+getField(String) java.lang.Class+getField(String) java.lang.reflect.Field+get(Object) java.lang.reflect.Field+get(Object) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String)",org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+bluetoothCrashResolver org.altbeacon.beacon.service.BeaconService+bluetoothCrashResolver org.altbeacon.beacon.service.BeaconService+beaconParsers org.altbeacon.beacon.service.BeaconService+defaultDistanceCalculator org.altbeacon.beacon.service.BeaconService+defaultDistanceCalculator org.altbeacon.beacon.service.BeaconService+simulatedScanData org.altbeacon.beacon.service.BeaconService+simulatedScanData org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+TAG,1222,22,8374,207,1,,"@Override
    public void onCreate() {
        Log.i(TAG, ""beaconService version ""+ BuildConfig.VERSION_NAME+"" is starting up"");
        getBluetoothAdapter();
        bluetoothCrashResolver = new BluetoothCrashResolver(this);
        bluetoothCrashResolver.start();

        beaconParsers = BeaconManager.getInstanceForApplication(getApplicationContext()).getBeaconParsers();
        defaultDistanceCalculator =  new ModelSpecificDistanceCalculator(this, BeaconManager.getDistanceModelUpdateUrl());
        Beacon.setDistanceCalculator(defaultDistanceCalculator);

        // Look for simulated scan data
        try {
            Class klass = Class.forName(""org.altbeacon.beacon.SimulatedScanData"");
            java.lang.reflect.Field f = klass.getField(""beacons"");
            this.simulatedScanData = (List<Beacon>) f.get(null);
        } catch (ClassNotFoundException e) {
            BeaconManager.logDebug(TAG, ""No org.altbeacon.beacon.SimulatedScanData class exists."");
        } catch (Exception e) {
            Log.e(TAG, ""Cannot get simulated Scan data.  Make sure your org.altbeacon.beacon.SimulatedScanData class defines a field with the signature 'public static List<Beacon> beacons'"", e);
        }
    }",False
31,onDestroy(),Method,,,org.altbeacon.bluetooth.BluetoothCrashResolver+stop() org.altbeacon.bluetooth.BluetoothCrashResolver+stop() org.altbeacon.beacon.service.BeaconService+scanLeDevice(Boolean) org.altbeacon.beacon.service.BeaconService+scanLeDevice(Boolean) org.altbeacon.beacon.service.BeaconService+getBluetoothAdapter() org.altbeacon.beacon.service.BeaconService+getBluetoothAdapter() org.altbeacon.beacon.service.BeaconService+getLeScanCallback() org.altbeacon.beacon.service.BeaconService+getLeScanCallback() java.util.Date+getTime() java.util.Date+Date() java.util.Date+getTime(),org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+bluetoothCrashResolver org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+handler org.altbeacon.beacon.service.BeaconService+bluetoothAdapter org.altbeacon.beacon.service.BeaconService+lastScanEndTime,749,21,9602,231,1,,"@Override
    @TargetApi(18)
    public void onDestroy() {
        if (android.os.Build.VERSION.SDK_INT < 18) {
            Log.w(TAG, ""Not supported prior to API 18."");
            return;
        }
        bluetoothCrashResolver.stop();
        Log.i(TAG, ""onDestroy called.  stopping scanning"");
        handler.removeCallbacksAndMessages(null);
        scanLeDevice(false);
        if (bluetoothAdapter != null) {
            try {
                getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback) getLeScanCallback());
            }
            catch (Exception e) {
                Log.w(""Internal Android exception scanning for beacons: "", e);
            }
            lastScanEndTime = new Date().getTime();
        }
    }",False
32,ongoing_notification_id,Field,,,,,40,1,10357,251,2,,private int ongoing_notification_id = 1;,False
33,isInBackground(),Method,,,"org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String)",org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+bindCount org.altbeacon.beacon.service.BeaconService+bindCount,143,4,10530,256,2,,"private boolean isInBackground() {
        BeaconManager.logDebug(TAG, ""bound client count:"" + bindCount);
        return bindCount == 0;
    }",False
34,"startRangingBeaconsInRegion(Region,Callback)",Method,IncomingHandler.handleMessage(Message),,"java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Map+put(K,V) java.util.Map+put(K,V) org.altbeacon.beacon.service.RangeState+RangeState(Callback) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) java.util.Map+size() java.util.Map+size() org.altbeacon.beacon.service.BeaconService+enableScanning() org.altbeacon.beacon.service.BeaconService+enableScanning()",org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+scanningEnabled,724,17,10679,265,1,"/** 
 * methods for clients
 */
","/**
     * methods for clients
     */

    public void startRangingBeaconsInRegion(Region region, Callback callback) {
        synchronized (rangedRegionState) {
            if (rangedRegionState.containsKey(region)) {
                Log.i(TAG, ""Already ranging that region -- will replace existing region."");
                rangedRegionState.remove(region); // need to remove it, otherwise the old object will be retained because they are .equal
            }
            rangedRegionState.put(region, new RangeState(callback));
            BeaconManager.logDebug(TAG, ""Currently ranging "" + rangedRegionState.size() + "" regions."");
        }
        if (!scanningEnabled) {
            enableScanning();
        }
    }",False
35,stopRangingBeaconsInRegion(Region),Method,IncomingHandler.handleMessage(Message),,"java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Map+size() java.util.Map+size() org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) java.util.Map+size() java.util.Map+size() java.util.Map+size() java.util.Map+size() org.altbeacon.beacon.service.BeaconService+disableScanning() org.altbeacon.beacon.service.BeaconService+disableScanning()",org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+scanningEnabled org.altbeacon.beacon.service.BeaconService+monitoredRegionState,488,12,11409,279,1,,"public void stopRangingBeaconsInRegion(Region region) {
        int rangedRegionCount;
        synchronized (rangedRegionState) {
            rangedRegionState.remove(region);
            rangedRegionCount = rangedRegionState.size();
            BeaconManager.logDebug(TAG, ""Currently ranging "" + rangedRegionState.size() + "" regions."");
        }

        if (scanningEnabled && rangedRegionCount == 0 && monitoredRegionState.size() == 0) {
            disableScanning();
        }
    }",False
36,"startMonitoringBeaconsInRegion(Region,Callback)",Method,IncomingHandler.handleMessage(Message),,"org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Map+put(K,V) java.util.Map+put(K,V) org.altbeacon.beacon.service.MonitorState+MonitorState(Callback) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) java.util.Map+size() java.util.Map+size() org.altbeacon.beacon.service.BeaconService+enableScanning() org.altbeacon.beacon.service.BeaconService+enableScanning()",org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+scanningEnabled,773,14,11903,292,1,,"public void startMonitoringBeaconsInRegion(Region region, Callback callback) {
        BeaconManager.logDebug(TAG, ""startMonitoring called"");
        synchronized (monitoredRegionState) {
            if (monitoredRegionState.containsKey(region)) {
                Log.i(TAG, ""Already monitoring that region -- will replace existing region monitor."");
                monitoredRegionState.remove(region); // need to remove it, otherwise the old object will be retained because they are .equal
            }
            monitoredRegionState.put(region, new MonitorState(callback));
        }
        BeaconManager.logDebug(TAG, ""Currently monitoring "" + monitoredRegionState.size() + "" regions."");
        if (!scanningEnabled) {
            enableScanning();
        }
    }",False
37,stopMonitoringBeaconsInRegion(Region),Method,IncomingHandler.handleMessage(Message),,"org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Map+size() java.util.Map+size() org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) java.util.Map+size() java.util.Map+size() java.util.Map+size() java.util.Map+size() org.altbeacon.beacon.service.BeaconService+disableScanning() org.altbeacon.beacon.service.BeaconService+disableScanning()",org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+scanningEnabled org.altbeacon.beacon.service.BeaconService+monitoredRegionState,572,12,12682,307,1,,"public void stopMonitoringBeaconsInRegion(Region region) {
        int monitoredRegionCount;
        BeaconManager.logDebug(TAG, ""stopMonitoring called"");
        synchronized (monitoredRegionState) {
            monitoredRegionState.remove(region);
            monitoredRegionCount = monitoredRegionState.size();
        }
        BeaconManager.logDebug(TAG, ""Currently monitoring "" + monitoredRegionState.size() + "" regions."");
        if (scanningEnabled && monitoredRegionCount == 0 && monitoredRegionState.size() == 0) {
            disableScanning();
        }
    }",False
38,"setScanPeriods(long,long)",Method,IncomingHandler.handleMessage(Message) IncomingHandler.handleMessage(Message) IncomingHandler.handleMessage(Message) IncomingHandler.handleMessage(Message) IncomingHandler.handleMessage(Message),,java.util.Date+getTime() java.util.Date+Date() java.util.Date+getTime() java.util.Date+Date(long) java.util.Date+Date(long),org.altbeacon.beacon.service.BeaconService+scanPeriod org.altbeacon.beacon.service.BeaconService+scanPeriod org.altbeacon.beacon.service.BeaconService+betweenScanPeriod org.altbeacon.beacon.service.BeaconService+betweenScanPeriod org.altbeacon.beacon.service.BeaconService+nextScanStartTime org.altbeacon.beacon.service.BeaconService+lastScanEndTime org.altbeacon.beacon.service.BeaconService+nextScanStartTime org.altbeacon.beacon.service.BeaconService+nextScanStartTime org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+nextScanStartTime org.altbeacon.beacon.service.BeaconService+scanStopTime org.altbeacon.beacon.service.BeaconService+lastScanStartTime org.altbeacon.beacon.service.BeaconService+scanStopTime org.altbeacon.beacon.service.BeaconService+scanStopTime org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+scanStopTime,1358,25,13260,320,1,,"public void setScanPeriods(long scanPeriod, long betweenScanPeriod) {
        this.scanPeriod = scanPeriod;
        this.betweenScanPeriod = betweenScanPeriod;
        long now = new Date().getTime();
        if (nextScanStartTime > now) {
            // We are waiting to start scanning.  We may need to adjust the next start time
            // only do an adjustment if we need to make it happen sooner.  Otherwise, it will
            // take effect on the next cycle.
            long proposedNextScanStartTime = (lastScanEndTime + betweenScanPeriod);
            if (proposedNextScanStartTime < nextScanStartTime) {
                nextScanStartTime = proposedNextScanStartTime;
                Log.i(TAG, ""Adjusted nextScanStartTime to be "" + new Date(nextScanStartTime));
            }
        }
        if (scanStopTime > now) {
            // we are waiting to stop scanning.  We may need to adjust the stop time
            // only do an adjustment if we need to make it happen sooner.  Otherwise, it will
            // take effect on the next cycle.
            long proposedScanStopTime = (lastScanStartTime + scanPeriod);
            if (proposedScanStopTime < scanStopTime) {
                scanStopTime = proposedScanStopTime;
                Log.i(TAG, ""Adjusted scanStopTime to be "" + new Date(scanStopTime));
            }
        }
    }",False
39,lastScanStartTime,Field,,,,,36,1,14624,346,2,,private long lastScanStartTime = 0l;,False
40,lastScanEndTime,Field,,,,,34,1,14665,347,2,,private long lastScanEndTime = 0l;,False
41,nextScanStartTime,Field,,,,,36,1,14704,348,2,,private long nextScanStartTime = 0l;,False
42,scanStopTime,Field,,,,,31,1,14745,349,2,,private long scanStopTime = 0l;,False
43,enableScanning(),Method,"startRangingBeaconsInRegion(Region,Callback) startMonitoringBeaconsInRegion(Region,Callback)",,org.altbeacon.beacon.service.BeaconService+scanLeDevice(Boolean) org.altbeacon.beacon.service.BeaconService+scanLeDevice(Boolean),org.altbeacon.beacon.service.BeaconService+scanningEnabled org.altbeacon.beacon.service.BeaconService+scanCyclerStarted,144,6,14782,351,1,,"public void enableScanning() {
        scanningEnabled = true;
        if (!scanCyclerStarted) {
            scanLeDevice(true);
        }
    }",True
44,disableScanning(),Method,stopRangingBeaconsInRegion(Region) stopMonitoringBeaconsInRegion(Region),,,org.altbeacon.beacon.service.BeaconService+scanningEnabled,70,3,14931,357,1,,"public void disableScanning() {
        scanningEnabled = false;
    }",True
45,scanLeDevice(Boolean),Method,onDestroy() enableScanning() finishScanCycle(),,"org.altbeacon.beacon.service.BeaconService+getBluetoothAdapter() org.altbeacon.beacon.service.BeaconService+getBluetoothAdapter() org.altbeacon.beacon.BeaconManager+getBeaconSimulator() org.altbeacon.beacon.BeaconManager+getBeaconSimulator() java.util.Date+getTime() java.util.Date+Date() java.util.Date+getTime() org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) +() +run()",org.altbeacon.beacon.service.BeaconService+scanCyclerStarted org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+simulatedScanData org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+nextScanStartTime org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+handler,4352,89,15007,362,2,,"@TargetApi(18)
    private void scanLeDevice(final Boolean enable) {
        scanCyclerStarted = true;
        if (android.os.Build.VERSION.SDK_INT < 18) {
            Log.w(TAG, ""Not supported prior to API 18."");
            return;
        }
        if (getBluetoothAdapter() == null) {
            Log.e(TAG, ""No bluetooth adapter.  beaconService cannot scan."");
            if ((simulatedScanData == null) && (BeaconManager.getBeaconSimulator() == null)) {
                Log.w(TAG, ""exiting"");
                return;
            } else {
                Log.w(TAG, ""proceeding with simulated scan data"");
            }
        }
        if (enable) {
            long millisecondsUntilStart = nextScanStartTime - (new Date().getTime());
            if (millisecondsUntilStart > 0) {
                BeaconManager.logDebug(TAG, ""Waiting to start next bluetooth scan for another "" + millisecondsUntilStart + "" milliseconds"");
                // Don't actually wait until the next scan time -- only wait up to 1 second.  this
                // allows us to start scanning sooner if a consumer enters the foreground and expects
                // results more quickly
                handler.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        scanLeDevice(true);
                    }
                }, millisecondsUntilStart > 1000 ? 1000 : millisecondsUntilStart);
                return;
            }

            trackedBeacons = new HashSet<Beacon>();
            trackedBeaconsPacketCount = 0;
            if (scanning == false || scanningPaused == true) {
                scanning = true;
                scanningPaused = false;
                try {
                    if (getBluetoothAdapter() != null) {
                        if (getBluetoothAdapter().isEnabled()) {
                            if (bluetoothCrashResolver.isRecoveryInProgress()) {
                                Log.w(TAG, ""Skipping scan because crash recovery is in progress."");
                            }
                            else {
                                if (scanningEnabled) {
                                    try {
                                        List<ScanFilter> filters = new List<ScanFilter>();
                                        ScanSettings settings = new ScanSettings();
                                        //SCAN_MODE_LOW_POWER
                                        //SCAN_MODE_LOW_LATENCY
                                        BluetoothLeScanner.startScan(filters, settings, (BluetoothAdapter.LeScanCallback)getLeScanCallback());
                                    }
                                    catch (Exception e) {
                                        Log.w(""Internal Android exception scanning for beacons: "", e);
                                    }
                                }
                                else {
                                    BeaconManager.logDebug(TAG, ""Scanning unnecessary - no monitoring or ranging active."");
                                }
                            }
                            lastScanStartTime = new Date().getTime();
                        } else {
                            Log.w(TAG, ""Bluetooth is disabled.  Cannot scan for beacons."");
                        }
                    }
                } catch (Exception e) {
                    Log.e(""TAG"", ""Exception starting bluetooth scan.  Perhaps bluetooth is disabled or unavailable?"");
                }
            } else {
                BeaconManager.logDebug(TAG, ""We are already scanning"");
            }
            scanStopTime = (new Date().getTime() + scanPeriod);
            scheduleScanStop();

            BeaconManager.logDebug(TAG, ""Scan started"");
        } else {
            BeaconManager.logDebug(TAG, ""disabling scan"");
            scanning = false;
            if (getBluetoothAdapter() != null) {
                try {
                    getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback) getLeScanCallback());
                }
                catch (Exception e) {
                    Log.w(""Internal Android exception scanning for beacons: "", e);
                }
                lastScanEndTime = new Date().getTime();
            }
        }
    }",True
46,scheduleScanStop(),Method,,,"java.util.Date+getTime() java.util.Date+Date() java.util.Date+getTime() org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) +() +run()",org.altbeacon.beacon.service.BeaconService+scanStopTime org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+handler,641,17,19365,451,2,,"private void scheduleScanStop() {
        // Stops scanning after a pre-defined scan period.
        long millisecondsUntilStop = scanStopTime - (new Date().getTime());
        if (millisecondsUntilStop > 0) {
            BeaconManager.logDebug(TAG, ""Waiting to stop scan for another "" + millisecondsUntilStop + "" milliseconds"");
            handler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    scheduleScanStop();
                }
            }, millisecondsUntilStop > 1000 ? 1000 : millisecondsUntilStop);
        } else {
            finishScanCycle();
        }


    }",True
47,finishScanCycle(),Method,,,"org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.service.BeaconService+processExpiredMonitors() org.altbeacon.beacon.service.BeaconService+processExpiredMonitors() org.altbeacon.beacon.service.BeaconService+processRangeData() org.altbeacon.beacon.service.BeaconService+processRangeData() org.altbeacon.beacon.service.BeaconService+processBeaconFromScan(Beacon) org.altbeacon.beacon.service.BeaconService+processBeaconFromScan(Beacon) org.altbeacon.beacon.BeaconManager+getBeaconSimulator() org.altbeacon.beacon.BeaconManager+getBeaconSimulator() org.altbeacon.beacon.simulator.BeaconSimulator+getBeacons() org.altbeacon.beacon.BeaconManager+getBeaconSimulator() org.altbeacon.beacon.BeaconManager+getBeaconSimulator() org.altbeacon.beacon.simulator.BeaconSimulator+getBeacons() org.altbeacon.beacon.simulator.BeaconSimulator+getBeacons() org.altbeacon.beacon.BeaconManager+getBeaconSimulator() org.altbeacon.beacon.BeaconManager+getBeaconSimulator() org.altbeacon.beacon.simulator.BeaconSimulator+getBeacons() org.altbeacon.beacon.service.BeaconService+processBeaconFromScan(Beacon) org.altbeacon.beacon.service.BeaconService+processBeaconFromScan(Beacon) org.altbeacon.beacon.service.BeaconService+getBluetoothAdapter() org.altbeacon.beacon.service.BeaconService+getBluetoothAdapter() org.altbeacon.beacon.service.BeaconService+getBluetoothAdapter() org.altbeacon.beacon.service.BeaconService+getBluetoothAdapter() org.altbeacon.beacon.service.BeaconService+getBluetoothAdapter() org.altbeacon.beacon.service.BeaconService+getBluetoothAdapter() org.altbeacon.beacon.service.BeaconService+getLeScanCallback() org.altbeacon.beacon.service.BeaconService+getLeScanCallback() java.util.Date+getTime() java.util.Date+Date() java.util.Date+getTime() org.altbeacon.beacon.service.BeaconService+anyRangingOrMonitoringRegionsActive() org.altbeacon.beacon.service.BeaconService+anyRangingOrMonitoringRegionsActive() org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) java.util.HashSet+size() java.util.HashSet+size() java.util.Date+getTime() java.util.Date+Date() java.util.Date+getTime() org.altbeacon.beacon.service.BeaconService+scanLeDevice(Boolean) org.altbeacon.beacon.service.BeaconService+scanLeDevice(Boolean) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String)",org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+scanning org.altbeacon.beacon.service.BeaconService+simulatedScanData org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+simulatedScanData org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+lastScanEndTime org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+scanCyclerStarted org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+trackedBeacons org.altbeacon.beacon.service.BeaconService+trackedBeaconsPacketCount org.altbeacon.beacon.service.BeaconService+scanningPaused org.altbeacon.beacon.service.BeaconService+nextScanStartTime org.altbeacon.beacon.service.BeaconService+betweenScanPeriod org.altbeacon.beacon.service.BeaconService+scanningEnabled org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+scanCyclerStarted,3840,71,20012,470,2,,"@TargetApi(18)
    private void finishScanCycle() {
        if (android.os.Build.VERSION.SDK_INT < 18) {
            Log.w(TAG, ""Not supported prior to API 18."");
            return;
        }
        BeaconManager.logDebug(TAG, ""Done with scan cycle"");
        processExpiredMonitors();
        if (scanning == true) {
            processRangeData();
            // If we want to use simulated scanning data, do it here.  This is used for testing in an emulator
            if (simulatedScanData != null) {
                // if simulatedScanData is provided, it will be seen every scan cycle.  *in addition* to anything actually seen in the air
                // it will not be used if we are not in debug mode
                Log.w(TAG, ""Simulated scan data is deprecated and will be removed in a future release. Please use the new BeaconSimulator interface instead."");

                if (0 != (getApplicationInfo().flags &= ApplicationInfo.FLAG_DEBUGGABLE)) {
                    for (Beacon beacon : simulatedScanData) {
                        processBeaconFromScan(beacon);
                    }
                } else {
                    Log.w(TAG, ""Simulated scan data provided, but ignored because we are not running in debug mode.  Please remove simulated scan data for production."");
                }
            }
            if (BeaconManager.getBeaconSimulator() != null) {
                // if simulatedScanData is provided, it will be seen every scan cycle.  *in addition* to anything actually seen in the air
                // it will not be used if we are not in debug mode
                if (BeaconManager.getBeaconSimulator().getBeacons() != null){
                    if (0 != (getApplicationInfo().flags &= ApplicationInfo.FLAG_DEBUGGABLE)) {
                        for (Beacon beacon : BeaconManager.getBeaconSimulator().getBeacons()) {
                            processBeaconFromScan(beacon);
                        }
                    } else {
                        Log.w(TAG, ""Beacon simulations provided, but ignored because we are not running in debug mode.  Please remove beacon simulations for production."");
                    }
                } else {
                    Log.w(TAG, ""getBeacons is returning null. No simulated beacons to report."");
                }
            }
            if (getBluetoothAdapter() != null) {
                if (getBluetoothAdapter().isEnabled()) {
                    try {
                        getBluetoothAdapter().stopLeScan((BluetoothAdapter.LeScanCallback) getLeScanCallback());
                    }
                    catch (Exception e) {
                        Log.w(""Internal Android exception scanning for beacons: "", e);
                    }
                    lastScanEndTime = new Date().getTime();
                } else {
                    Log.w(TAG, ""Bluetooth is disabled.  Cannot scan for beacons."");
                }
            }

            if (!anyRangingOrMonitoringRegionsActive()) {
                BeaconManager.logDebug(TAG, ""Not starting scan because no monitoring or ranging regions are defined."");
                scanCyclerStarted = false;
            } else {
                BeaconManager.logDebug(TAG, ""Restarting scan.  Unique beacons seen last cycle: "" + trackedBeacons.size()+"" Total beacon advertisement packets seen: ""+trackedBeaconsPacketCount);

                scanningPaused = true;
                nextScanStartTime = (new Date().getTime() + betweenScanPeriod);
                if (scanningEnabled) {
                    scanLeDevice(true);
                }
                else {
                    BeaconManager.logDebug(TAG, ""Scanning disabled.  No ranging or monitoring regions are active."");
                    scanCyclerStarted = false;
                }
            }
        }
    }",True
48,leScanCallback,Field,,,,,30,1,23858,541,2,,private Object leScanCallback;,True
49,getLeScanCallback(),Method,onDestroy() finishScanCycle() ScanProcessor.doInBackground(ScanData),,"+onLeScan(BluetoothDevice,int,byte[])",org.altbeacon.beacon.service.BeaconService+leScanCallback org.altbeacon.beacon.service.BeaconService+leScanCallback,645,17,23893,543,2,,"@TargetApi(18)
    private Object getLeScanCallback() {
        if (leScanCallback == null) {
            leScanCallback =
                    new BluetoothAdapter.LeScanCallback() {

                        @Override
                        public void onLeScan(final BluetoothDevice device, final int rssi,
                                             final byte[] scanRecord) {
                            BeaconManager.logDebug(TAG, ""got record"");
                            new ScanProcessor().execute(new ScanData(device, rssi, scanRecord));

                        }
                    };
        }
        return leScanCallback;
    }",True
50,ScanData,MemberClass,,,"org.altbeacon.beacon.service.BeaconService.ScanData+ScanData(BluetoothDevice,int,byte[])",org.altbeacon.beacon.service.BeaconService.ScanData+device org.altbeacon.beacon.service.BeaconService.ScanData+rssi org.altbeacon.beacon.service.BeaconService.ScanData+scanRecord org.altbeacon.beacon.service.BeaconService.ScanData+device org.altbeacon.beacon.service.BeaconService.ScanData+rssi org.altbeacon.beacon.service.BeaconService.ScanData+scanRecord,360,12,-1,-1,2,,"private class ScanData {
        public ScanData(BluetoothDevice device, int rssi, byte[] scanRecord) {
            this.device = device;
            this.rssi = rssi;
            this.scanRecord = scanRecord;
        }

        @SuppressWarnings(""unused"")
        public BluetoothDevice device;
        public int rssi;
        public byte[] scanRecord;
    }",False
51,processRangeData(),Method,finishScanCycle(),,"java.util.Set+iterator() java.util.Map+keySet() java.util.Map+keySet() java.util.Set+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.Map+get(Object) java.util.Map+get(Object) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.service.Callback+call(Context,String,Parcelable) org.altbeacon.beacon.service.RangeState+getCallback() org.altbeacon.beacon.service.RangeState+getCallback() org.altbeacon.beacon.service.Callback+call(Context,String,Parcelable) org.altbeacon.beacon.service.RangingData+RangingData(Collection<Beacon>,Region) org.altbeacon.beacon.service.RangeState+finalizeBeacons() org.altbeacon.beacon.service.RangeState+finalizeBeacons()",org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+TAG,573,11,24910,573,2,,"private void processRangeData() {
        synchronized(rangedRegionState) {
            Iterator<Region> regionIterator = rangedRegionState.keySet().iterator();
            while (regionIterator.hasNext()) {
                Region region = regionIterator.next();
                RangeState rangeState = rangedRegionState.get(region);
                BeaconManager.logDebug(TAG, ""Calling ranging callback"");
                rangeState.getCallback().call(BeaconService.this, ""rangingData"", new RangingData(rangeState.finalizeBeacons(), region));
            }
        }
    }",False
52,processExpiredMonitors(),Method,finishScanCycle(),,"java.util.Set+iterator() java.util.Map+keySet() java.util.Map+keySet() java.util.Set+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.Map+get(Object) java.util.Map+get(Object) org.altbeacon.beacon.service.MonitorState+isNewlyOutside() org.altbeacon.beacon.service.MonitorState+isNewlyOutside() org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.service.Callback+call(Context,String,Parcelable) org.altbeacon.beacon.service.MonitorState+getCallback() org.altbeacon.beacon.service.MonitorState+getCallback() org.altbeacon.beacon.service.Callback+call(Context,String,Parcelable) org.altbeacon.beacon.service.MonitoringData+MonitoringData(boolean,Region) org.altbeacon.beacon.service.MonitorState+isInside() org.altbeacon.beacon.service.MonitorState+isInside()",org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+TAG,689,13,25489,585,2,,"private void processExpiredMonitors() {
        synchronized (monitoredRegionState) {
            Iterator<Region> monitoredRegionIterator = monitoredRegionState.keySet().iterator();
            while (monitoredRegionIterator.hasNext()) {
                Region region = monitoredRegionIterator.next();
                MonitorState state = monitoredRegionState.get(region);
                if (state.isNewlyOutside()) {
                    BeaconManager.logDebug(TAG, ""found a monitor that expired: "" + region);
                    state.getCallback().call(BeaconService.this, ""monitoringData"", new MonitoringData(state.isInside(), region));
                }
            }
        }
    }",False
53,processBeaconFromScan(Beacon),Method,finishScanCycle() finishScanCycle() ScanProcessor.doInBackground(ScanData),,"java.util.Date+Date() java.util.HashSet+contains(Object) java.util.HashSet+contains(Object) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.Beacon+toString() org.altbeacon.beacon.Beacon+toString() java.util.HashSet+add(E) java.util.HashSet+add(E) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.Beacon+toString() org.altbeacon.beacon.Beacon+toString() org.altbeacon.beacon.service.BeaconService+matchingRegions(Beacon,Collection<Region>) org.altbeacon.beacon.service.BeaconService+matchingRegions(Beacon,Collection<Region>) java.util.Map+keySet() java.util.Map+keySet() java.util.List+iterator() java.util.List+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.Map+get(Object) java.util.Map+get(Object) org.altbeacon.beacon.service.MonitorState+markInside() org.altbeacon.beacon.service.MonitorState+markInside() org.altbeacon.beacon.service.Callback+call(Context,String,Parcelable) org.altbeacon.beacon.service.MonitorState+getCallback() org.altbeacon.beacon.service.MonitorState+getCallback() org.altbeacon.beacon.service.Callback+call(Context,String,Parcelable) org.altbeacon.beacon.service.MonitoringData+MonitoringData(boolean,Region) org.altbeacon.beacon.service.MonitorState+isInside() org.altbeacon.beacon.service.MonitorState+isInside() org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.service.BeaconService+matchingRegions(Beacon,Collection<Region>) org.altbeacon.beacon.service.BeaconService+matchingRegions(Beacon,Collection<Region>) java.util.Map+keySet() java.util.Map+keySet() java.util.List+iterator() java.util.List+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String) java.util.Map+get(Object) java.util.Map+get(Object) org.altbeacon.beacon.service.RangeState+addBeacon(Beacon) org.altbeacon.beacon.service.RangeState+addBeacon(Beacon)",org.altbeacon.beacon.service.BeaconService+lastBeaconDetectionTime org.altbeacon.beacon.service.BeaconService+trackedBeaconsPacketCount org.altbeacon.beacon.service.BeaconService+trackedBeacons org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+trackedBeacons org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+monitoredRegionState org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+rangedRegionState,1745,38,26184,599,2,,"private void processBeaconFromScan(Beacon beacon) {
        lastBeaconDetectionTime = new Date();
        trackedBeaconsPacketCount++;
        if (trackedBeacons.contains(beacon)) {
            BeaconManager.logDebug(TAG,
                    ""beacon detected multiple times in scan cycle :"" + beacon.toString());
        }
        trackedBeacons.add(beacon);
        BeaconManager.logDebug(TAG,
                ""beacon detected :"" + beacon.toString());

        List<Region> matchedRegions = null;
        synchronized(monitoredRegionState) {
            matchedRegions = matchingRegions(beacon,
                    monitoredRegionState.keySet());
        }
        Iterator<Region> matchedRegionIterator = matchedRegions.iterator();
        while (matchedRegionIterator.hasNext()) {
            Region region = matchedRegionIterator.next();
            MonitorState state = monitoredRegionState.get(region);
            if (state.markInside()) {
                state.getCallback().call(BeaconService.this, ""monitoringData"",
                        new MonitoringData(state.isInside(), region));
            }
        }

        BeaconManager.logDebug(TAG, ""looking for ranging region matches for this beacon"");
        synchronized (rangedRegionState) {
            matchedRegions = matchingRegions(beacon, rangedRegionState.keySet());
            matchedRegionIterator = matchedRegions.iterator();
            while (matchedRegionIterator.hasNext()) {
                Region region = matchedRegionIterator.next();
                BeaconManager.logDebug(TAG, ""matches ranging region: "" + region);
                RangeState rangeState = rangedRegionState.get(region);
                rangeState.addBeacon(beacon);
            }
        }
    }",False
54,ScanProcessor,MemberClass,,,"org.altbeacon.beacon.service.BeaconService.ScanProcessor+doInBackground(ScanData[]) org.altbeacon.beacon.BeaconParser+fromScanData(byte[],int,BluetoothDevice) org.altbeacon.beacon.BeaconParser+fromScanData(byte[],int,BluetoothDevice) org.altbeacon.beacon.service.BeaconService+processBeaconFromScan(Beacon) org.altbeacon.beacon.service.BeaconService+processBeaconFromScan(Beacon) org.altbeacon.bluetooth.BluetoothCrashResolver+notifyScannedDevice(BluetoothDevice,LeScanCallback) org.altbeacon.bluetooth.BluetoothCrashResolver+notifyScannedDevice(BluetoothDevice,LeScanCallback) org.altbeacon.beacon.service.BeaconService+getLeScanCallback() org.altbeacon.beacon.service.BeaconService+getLeScanCallback() org.altbeacon.beacon.service.BeaconService.ScanProcessor+onPostExecute(Void) org.altbeacon.beacon.service.BeaconService.ScanProcessor+onPreExecute() org.altbeacon.beacon.service.BeaconService.ScanProcessor+onProgressUpdate(Void[])",org.altbeacon.beacon.service.BeaconService+beaconParsers org.altbeacon.beacon.service.BeaconService.ScanData+scanRecord org.altbeacon.beacon.service.BeaconService.ScanData+rssi org.altbeacon.beacon.service.BeaconService.ScanData+device org.altbeacon.beacon.service.BeaconService+bluetoothCrashResolver org.altbeacon.beacon.service.BeaconService.ScanData+device,1021,33,-1,-1,2,,"private class ScanProcessor extends AsyncTask<ScanData, Void, Void> {

        @Override
        protected Void doInBackground(ScanData... params) {
            ScanData scanData = params[0];
            Beacon beacon = null;

            for (BeaconParser parser : BeaconService.this.beaconParsers) {
                beacon = parser.fromScanData(scanData.scanRecord,
                        scanData.rssi, scanData.device);
                if (beacon != null) {
                    break;
                }
            }
            if (beacon != null) {
                processBeaconFromScan(beacon);
            }
            bluetoothCrashResolver.notifyScannedDevice(scanData.device, (BluetoothAdapter.LeScanCallback)getLeScanCallback());
            return null;
        }

        @Override
        protected void onPostExecute(Void result) {
        }

        @Override
        protected void onPreExecute() {
        }

        @Override
        protected void onProgressUpdate(Void... values) {
        }
    }",False
55,"matchingRegions(Beacon,Collection<Region>)",Method,processBeaconFromScan(Beacon) processBeaconFromScan(Beacon),,"java.util.ArrayList+ArrayList() java.util.Collection+iterator() java.util.Collection+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() org.altbeacon.beacon.Region+matchesBeacon(Beacon) org.altbeacon.beacon.Region+matchesBeacon(Beacon) java.util.List+add(E) java.util.List+add(E) org.altbeacon.beacon.BeaconManager+logDebug(String,String) org.altbeacon.beacon.BeaconManager+logDebug(String,String)",org.altbeacon.beacon.service.BeaconService+TAG,577,15,28962,672,2,,"private List<Region> matchingRegions(Beacon beacon, Collection<Region> regions) {
        List<Region> matched = new ArrayList<Region>();
            Iterator<Region> regionIterator = regions.iterator();
            while (regionIterator.hasNext()) {
                Region region = regionIterator.next();
                if (region.matchesBeacon(beacon)) {
                    matched.add(region);
                } else {
                    BeaconManager.logDebug(TAG, ""This region does not match: "" + region);
                }

            }

        return matched;
    }",False
56,anyRangingOrMonitoringRegionsActive(),Method,finishScanCycle(),,java.util.Map+size() java.util.Map+size() java.util.Map+size() java.util.Map+size(),org.altbeacon.beacon.service.BeaconService+rangedRegionState org.altbeacon.beacon.service.BeaconService+monitoredRegionState,138,3,29694,691,2,,"private boolean anyRangingOrMonitoringRegionsActive() {
        return (rangedRegionState.size() + monitoredRegionState.size()) > 0;
    }",False
57,getBluetoothAdapter(),Method,onCreate() onDestroy() scanLeDevice(Boolean) finishScanCycle() finishScanCycle() finishScanCycle(),,,org.altbeacon.beacon.service.BeaconService+TAG org.altbeacon.beacon.service.BeaconService+bluetoothAdapter org.altbeacon.beacon.service.BeaconService+bluetoothAdapter org.altbeacon.beacon.service.BeaconService+bluetoothAdapter,577,14,29838,696,2,,"@TargetApi(18)
    private BluetoothAdapter getBluetoothAdapter() {
        if (android.os.Build.VERSION.SDK_INT < 18) {
            Log.w(TAG, ""Not supported prior to API 18."");
            return null;
        }
        if (bluetoothAdapter == null) {
            // Initializes Bluetooth adapter.
            final BluetoothManager bluetoothManager =
                    (BluetoothManager) this.getApplicationContext().getSystemService(Context.BLUETOOTH_SERVICE);
            bluetoothAdapter = bluetoothManager.getAdapter();
        }
        return bluetoothAdapter;
    }",True
