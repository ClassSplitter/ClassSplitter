index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,commit,full text,moved,removed
1,dataTimeout,Field,"""","""","""","""",49,1,841,35,26,,private static final float dataTimeout = 60 * 20;,False,False
2,playerSyncTime,Field,"""","""","""","""",46,1,895,36,26,,private static final float playerSyncTime = 5;,False,False
3,dataReads,Field,"""","""","""","""",55,1,946,37,26,,private static final Reads dataReads = new Reads(null);,False,False
4,ping,Field,"""","""","""","""",18,1,1007,39,2,,private long ping;,False,False
5,timer,Field,"""","""","""","""",41,1,1030,40,2,,private Interval timer = new Interval(5);,False,False
6,connecting,Field,"""","""","""","""",90,2,1076,42,2,"/** 
 * Whether the client is currently connecting. 
 */
","/** Whether the client is currently connecting. */
    private boolean connecting = false;",False,False
7,quiet,Field,"""","""","""","""",90,2,1171,44,2,"/** 
 * If true, no message will be shown on disconnect. 
 */
","/** If true, no message will be shown on disconnect. */
    private boolean quiet = false;",False,False
8,quietReset,Field,"""","""","""","""",95,2,1266,46,2,"/** 
 * Whether to suppress disconnect events completely.
 */
","/** Whether to suppress disconnect events completely.*/
    private boolean quietReset = false;",False,False
9,timeoutTime,Field,"""","""","""","""",68,2,1366,48,2,"/** 
 * Counter for data timeout. 
 */
","/** Counter for data timeout. */
    private float timeoutTime = 0f;",False,False
10,lastSent,Field,"""","""","""","""",62,2,1439,50,2,"/** 
 * Last sent client snapshot ID. 
 */
","/** Last sent client snapshot ID. */
    private int lastSent;",False,False
11,removed,Field,"""","""","""","""",122,2,1507,53,2,"/** 
 * List of entities that were removed, and need not be added while syncing. 
 */
","/** List of entities that were removed, and need not be added while syncing. */
    private IntSet removed = new IntSet();",False,False
12,byteStream,Field,"""","""","""","""",118,2,1634,55,2,"/** 
 * Byte stream for reading in snapshots. 
 */
","/** Byte stream for reading in snapshots. */
    private ReusableByteInStream byteStream = new ReusableByteInStream();",False,False
13,dataStream,Field,"""","""","""","""",69,1,1757,56,2,,private DataInputStream dataStream = new DataInputStream(byteStream);,False,False
14,customPacketHandlers,Field,"""","""","""","""",143,2,1831,58,2,"/** 
 * Packet handlers for custom types of messages. 
 */
","/** Packet handlers for custom types of messages. */
    private ObjectMap<String, Seq<Cons<String>>> customPacketHandlers = new ObjectMap<>();",False,False
15,NetClient(),Method,"""","""","""","""",2426,80,1980,60,1,,"public NetClient(){

        net.handleClient(Connect.class, packet -> {
            Log.info(""Connecting to server: @"", packet.addressTCP);

            player.admin = false;

            reset();

            //connection after reset
            if(!net.client()){
                Log.info(""Connection canceled."");
                disconnectQuietly();
                return;
            }

            ui.loadfrag.hide();
            ui.loadfrag.show(""@connecting.data"");

            ui.loadfrag.setButton(() -> {
                ui.loadfrag.hide();
                disconnectQuietly();
            });

            String locale = Core.settings.getString(""locale"");
            if(locale.equals(""default"")){
                locale = Locale.getDefault().toString();
            }

            var c = new ConnectPacket();
            c.name = player.name;
            c.locale = locale;
            c.mods = mods.getModStrings();
            c.mobile = mobile;
            c.versionType = Version.type;
            c.color = player.color.rgba();
            c.usid = getUsid(packet.addressTCP);
            c.uuid = platform.getUUID();

            if(c.uuid == null){
                ui.showErrorMessage(""@invalidid"");
                ui.loadfrag.hide();
                disconnectQuietly();
                return;
            }

            net.send(c, true);
        });

        net.handleClient(Disconnect.class, packet -> {
            if(quietReset) return;

            connecting = false;
            logic.reset();
            platform.updateRPC();
            player.name = Core.settings.getString(""name"");
            player.color.set(Core.settings.getInt(""color-0""));

            if(quiet) return;

            Time.runTask(3f, ui.loadfrag::hide);

            if(packet.reason != null){
                ui.showSmall(switch(packet.reason){
                    case ""closed"" -> ""@disconnect.closed"";
                    case ""timeout"" -> ""@disconnect.timeout"";
                    default -> ""@disconnect.error"";
                }, ""@disconnect.closed"");
            }else{
                ui.showErrorMessage(""@disconnect"");
            }
        });

        net.handleClient(WorldStream.class, data -> {
            Log.info(""Received world data: @ bytes."", data.stream.available());
            NetworkIO.loadWorld(new InflaterInputStream(data.stream));

            finishConnecting();
        });
    }",False,False
16,"addPacketHandler(String,Cons<String>)",Method,"""","""","""","mindustry.core.NetClient+customPacketHandlers""",133,3,4412,141,1,,"public void addPacketHandler(String type, Cons<String> handler){
        customPacketHandlers.get(type, Seq::new).add(handler);
    }",False,False
17,getPacketHandlers(String),Method,"""","""","""","mindustry.core.NetClient+customPacketHandlers""",119,3,4551,145,1,,"public Seq<Cons<String>> getPacketHandlers(String type){
        return customPacketHandlers.get(type, Seq::new);
    }",False,False
18,"clientPacketReliable(String,String)",Method,"clientPacketUnreliable(String,String)""","""","""","""",330,8,4676,150,9,,"@Remote(targets = Loc.server, variants = Variant.both)
    public static void clientPacketReliable(String type, String contents){
        if(netClient.customPacketHandlers.containsKey(type)){
            for(Cons<String> c : netClient.customPacketHandlers.get(type)){
                c.get(contents);
            }
        }
    }",False,False
19,"clientPacketUnreliable(String,String)",Method,"""","""","mindustry.core.NetClient+clientPacketReliable(String,String) mindustry.core.NetClient+clientPacketReliable(String,String)""","""",202,4,5012,159,9,,"@Remote(targets = Loc.server, variants = Variant.both, unreliable = true)
    public static void clientPacketUnreliable(String type, String contents){
        clientPacketReliable(type, contents);
    }",False,False
20,"sendMessage(String,String,Player)",Method,"sendChatMessage(Player,String)""","""","mindustry.ui.fragments.ChatFragment+addMessage(String,String) mindustry.ui.fragments.ChatFragment+addMessage(String,String)""","mindustry.Vars+ui mindustry.Vars+ui mindustry.core.UI+chatfrag""",377,11,5248,165,9,,"@Remote(targets = Loc.server, variants = Variant.both)
    public static void sendMessage(String message, String sender, Player playersender){
        if(Vars.ui != null){
            Vars.ui.chatfrag.addMessage(message, sender);
        }

        if(playersender != null){
            playersender.lastText(message);
            playersender.textFadeTime(1f);
        }
    }",False,False
21,sendMessage(String),Method,"""","""","mindustry.ui.fragments.ChatFragment+addMessage(String,String) mindustry.ui.fragments.ChatFragment+addMessage(String,String)""","mindustry.Vars+ui mindustry.Vars+ui mindustry.core.UI+chatfrag""",203,6,5705,178,9,,"@Remote(called = Loc.server, targets = Loc.server)
    public static void sendMessage(String message){
        if(Vars.ui != null){
            Vars.ui.chatfrag.addMessage(message, null);
        }
    }",False,False
22,"sendChatMessage(Player,String)",Method,"""","""","java.lang.String+length() java.lang.String+length() mindustry.net.ValidateException+ValidateException(Player,String) mindustry.game.EventType.PlayerChatEvent+PlayerChatEvent(Player,String) java.lang.String+startsWith(String) java.lang.String+startsWith(String) mindustry.core.NetClient+sendMessage(String,String,Player) mindustry.core.NetClient+sendMessage(String,String,Player) mindustry.core.NetClient+colorizeName(int,String) mindustry.core.NetClient+colorizeName(int,String) mindustry.core.NetClient+colorizeName(int,String) mindustry.core.NetClient+colorizeName(int,String)""","""",3308,72,5979,186,9,,"@Remote(called = Loc.server, targets = Loc.client)
    public static void sendChatMessage(Player player, String message){

        //do not receive chat messages from clients that are too young or not registered
        if(net.server() && player != null && player.con != null && (Time.timeSinceMillis(player.con.connectTime) < 500 || !player.con.hasConnected || !player.isAdded())) return;

        if(message.length() > maxTextLength){
            throw new ValidateException(player, ""Player has sent a message above the text limit."");
        }

        Events.fire(new PlayerChatEvent(player, message));

        //log commands before they are handled
        if(message.startsWith(netServer.clientCommands.getPrefix())){
            //log with brackets
            Log.info(""<&fi@: @&fr>"", ""&lk"" + player.name, ""&lw"" + message);
        }

        //check if it's a command
        CommandResponse response = netServer.clientCommands.handleMessage(message, player);
        if(response.type == ResponseType.noCommand){ //no command to handle
            message = netServer.admins.filterMessage(player, message);
            //suppress chat message if it's filtered out
            if(message == null){
                return;
            }

            //special case; graphical server needs to see its message
            if(!headless){
                sendMessage(message, colorizeName(player.id, player.name), player);
            }

            //server console logging
            Log.info(""&fi@: @"", ""&lc"" + player.name, ""&lw"" + message);

            //invoke event for all clients but also locally
            //this is required so other clients get the correct name even if they don't know who's sending it yet
            Call.sendMessage(message, colorizeName(player.id(), player.name), player);
        }else{

            //a command was sent, now get the output
            if(response.type != ResponseType.valid){
                String text;

                //send usage
                if(response.type == ResponseType.manyArguments){
                    text = ""[scarlet]Too many arguments. Usage:[lightgray] "" + response.command.text + ""[gray] "" + response.command.paramText;
                }else if(response.type == ResponseType.fewArguments){
                    text = ""[scarlet]Too few arguments. Usage:[lightgray] "" + response.command.text + ""[gray] "" + response.command.paramText;
                }else{ //unknown command
                    int minDst = 0;
                    Command closest = null;

                    for(Command command : netServer.clientCommands.getCommandList()){
                        int dst = Strings.levenshtein(command.text, response.runCommand);
                        if(dst < 3 && (closest == null || dst < minDst)){
                            minDst = dst;
                            closest = command;
                        }
                    }

                    if(closest != null){
                        text = ""[scarlet]Unknown command. Did you mean \""[lightgray]"" + closest.text + ""[]\""?"";
                    }else{
                        text = ""[scarlet]Unknown command. Check [lightgray]/help[scarlet]."";
                    }
                }

                player.sendMessage(text);
            }
        }
    }",False,False
23,"colorizeName(int,String)",Method,"sendChatMessage(Player,String) sendChatMessage(Player,String)""","mindustry.entities.bullet.ShrapnelBulletType+sendMessage(String,Player)""","""","""",244,5,9293,258,9,,"public static String colorizeName(int id, String name){
        Player player = Groups.player.getByID(id);
        if(name == null || player == null) return null;
        return ""[#"" + player.color().toString().toUpperCase() + ""]"" + name;
    }",False,False
24,"connect(String,int)",Method,"""","""","""","""",209,7,9543,265,9,,"@Remote(called = Loc.client, variants = Variant.one)
    public static void connect(String ip, int port){
        netClient.disconnectQuietly();
        logic.reset();

        ui.join.connect(ip, port);
    }",False,False
25,"ping(Player,long)",Method,"""","""","""","""",135,4,9758,273,9,,"@Remote(targets = Loc.client)
    public static void ping(Player player, long time){
        Call.pingResponse(player.con, time);
    }",False,False
26,pingResponse(long),Method,"""","""","""","""",138,4,9899,278,9,,"@Remote(variants = Variant.one)
    public static void pingResponse(long time){
        netClient.ping = Time.timeSinceMillis(time);
    }",False,False
27,"traceInfo(Player,TraceInfo)",Method,"""","mindustry.core.NetServer+adminRequest(Player,Player,AdminAction)""","""","""",182,6,10043,283,9,,"@Remote(variants = Variant.one)
    public static void traceInfo(Player player, TraceInfo info){
        if(player != null){
            ui.traces.show(player, info);
        }
    }",False,False
28,kick(KickReason),Method,"""","""","""","""",568,19,10231,290,9,,"@Remote(variants = Variant.one, priority = PacketPriority.high)
    public static void kick(KickReason reason){
        netClient.disconnectQuietly();
        logic.reset();

        if(reason == KickReason.serverRestarting){
            ui.join.reconnect();
            return;
        }

        if(!reason.quiet){
            if(reason.extraText() != null){
                ui.showText(reason.toString(), reason.extraText());
            }else{
                ui.showText(""@disconnect"", reason.toString());
            }
        }
        ui.loadfrag.hide();
    }",False,False
29,kick(String),Method,"""","""","""","""",259,7,10805,310,9,,"@Remote(variants = Variant.one, priority = PacketPriority.high)
    public static void kick(String reason){
        netClient.disconnectQuietly();
        logic.reset();
        ui.showText(""@disconnect"", reason, Align.left);
        ui.loadfrag.hide();
    }",False,False
30,setHudText(String),Method,"setHudTextReliable(String)""","""","""","""",185,6,11070,318,9,,"@Remote(variants = Variant.both, unreliable = true)
    public static void setHudText(String message){
        if(message == null) return;

        ui.hudfrag.setHudText(message);
    }",True,True
31,hideHudText(),Method,"""","""","""","""",117,4,11261,325,9,,"@Remote(variants = Variant.both)
    public static void hideHudText(){
        ui.hudfrag.toggleHudText(false);
    }",True,True
32,setHudTextReliable(String),Method,"""","""","mindustry.core.NetClient+setHudText(String) mindustry.core.NetClient+setHudText(String)""","""",149,5,11384,331,9,"/** 
 * TCP version 
 */
","/** TCP version */
    @Remote(variants = Variant.both)
    public static void setHudTextReliable(String message){
        setHudText(message);
    }",True,True
33,announce(String),Method,"""","""","""","""",154,6,11539,336,9,,"@Remote(variants = Variant.both)
    public static void announce(String message){
        if(message == null) return;

        ui.announce(message);
    }",True,True
34,infoMessage(String),Method,"""","""","""","""",161,6,11699,343,9,,"@Remote(variants = Variant.both)
    public static void infoMessage(String message){
        if(message == null) return;

        ui.showText("""", message);
    }",True,True
35,"infoPopup(String,float,int,int,int,int,int)",Method,"""","""","""","""",272,6,11866,350,9,,"@Remote(variants = Variant.both)
    public static void infoPopup(String message, float duration, int align, int top, int left, int bottom, int right){
        if(message == null) return;

        ui.showInfoPopup(message, duration, align, top, left, bottom, right);
    }",True,True
36,"label(String,float,float,float)",Method,"""","""","""","""",222,6,12144,357,9,,"@Remote(variants = Variant.both)
    public static void label(String message, float duration, float worldx, float worldy){
        if(message == null) return;

        ui.showLabel(message, duration, worldx, worldy);
    }",True,True
37,"effect(Effect,float,float,float,Color)",Method,"effectReliable(Effect,float,float,float,Color)""","""","mindustry.entities.Effect+at(float,float,float,Color) mindustry.entities.Effect+at(float,float,float,Color)""","""",228,6,12372,364,9,,"@Remote(variants = Variant.both, unreliable = true)
    public static void effect(Effect effect, float x, float y, float rotation, Color color){
        if(effect == null) return;

        effect.at(x, y, rotation, color);
    }",True,True
38,"effectReliable(Effect,float,float,float,Color)",Method,"""","""","mindustry.core.NetClient+effect(Effect,float,float,float,Color) mindustry.core.NetClient+effect(Effect,float,float,float,Color)""","""",186,4,12606,371,9,,"@Remote(variants = Variant.both)
    public static void effectReliable(Effect effect, float x, float y, float rotation, Color color){
        effect(effect, x, y, rotation, color);
    }",True,True
39,"infoToast(String,float)",Method,"""","""","""","""",186,6,12798,376,9,,"@Remote(variants = Variant.both)
    public static void infoToast(String message, float duration){
        if(message == null) return;

        ui.showInfoToast(message, duration);
    }",True,True
40,"warningToast(int,String)",Method,"""","""","mindustry.ui.Fonts+getGlyph(Font,char) mindustry.ui.Fonts+getGlyph(Font,char)""","mindustry.ui.Fonts+icon mindustry.ui.Fonts+icon""",270,6,12990,383,9,,"@Remote(variants = Variant.both)
    public static void warningToast(int unicode, String text){
        if(text == null || Fonts.icon.getData().getGlyph((char)unicode) == null) return;

        ui.hudfrag.showToast(Fonts.getGlyph(Fonts.icon, (char)unicode), text);
    }",True,True
41,setRules(Rules),Method,"""","""","""","""",113,4,13266,390,9,,"@Remote(variants = Variant.both)
    public static void setRules(Rules rules){
        state.rules = rules;
    }",False,False
42,worldDataBegin(),Method,"""","""","""","""",409,17,13385,395,9,,"@Remote(variants = Variant.both)
    public static void worldDataBegin(){
        Groups.clear();
        netClient.removed.clear();
        logic.reset();
        netClient.connecting = true;

        net.setClientLoaded(false);

        ui.loadfrag.show(""@connecting.data"");

        ui.loadfrag.setButton(() -> {
            ui.loadfrag.hide();

            netClient.disconnectQuietly();
        });
    }",False,False
43,"setPosition(float,float)",Method,"""","""","""","""",150,5,13800,413,9,,"@Remote(variants = Variant.one)
    public static void setPosition(float x, float y){
        player.unit().set(x, y);
        player.set(x, y);
    }",False,False
44,playerDisconnect(int),Method,"""","""","""","""",203,7,13956,419,9,,"@Remote
    public static void playerDisconnect(int playerid){
        if(netClient != null){
            netClient.addRemovedEntity(playerid);
        }
        Groups.player.removeByID(playerid);
    }",False,False
45,"entitySnapshot(short,byte[])",Method,"""","""","java.io.DataInputStream+readInt() java.io.DataInputStream+readInt() java.io.DataInputStream+readByte() java.io.DataInputStream+readByte() java.lang.RuntimeException+RuntimeException(Throwable)""","""",1504,45,14165,427,9,,"@Remote(variants = Variant.one, priority = PacketPriority.low, unreliable = true)
    public static void entitySnapshot(short amount, byte[] data){
        try{
            netClient.byteStream.setBytes(data);
            DataInputStream input = netClient.dataStream;

            for(int j = 0; j < amount; j++){
                int id = input.readInt();
                byte typeID = input.readByte();

                Syncc entity = Groups.sync.getByID(id);
                boolean add = false, created = false;

                if(entity == null && id == player.id()){
                    entity = player;
                    add = true;
                }

                //entity must not be added yet, so create it
                if(entity == null){
                    entity = (Syncc)EntityMapping.map(typeID).get();
                    entity.id(id);
                    if(!netClient.isEntityUsed(entity.id())){
                        add = true;
                    }
                    created = true;
                }

                //read the entity
                entity.readSync(Reads.get(input));

                if(created){
                    //snap initial starting position
                    entity.snapSync();
                }

                if(add){
                    entity.add();
                    netClient.addRemovedEntity(entity.id());
                }
            }
        }catch(IOException e){
            throw new RuntimeException(e);
        }
    }",False,False
46,"blockSnapshot(short,byte[])",Method,"""","""","java.io.DataInputStream+readInt() java.io.DataInputStream+readInt() java.io.DataInputStream+readShort() java.io.DataInputStream+readShort()""","mindustry.world.Tile+build mindustry.world.Tile+build mindustry.world.Tile+build mindustry.world.Tile+build mindustry.world.Tile+build""",1014,24,15675,473,9,,"@Remote(variants = Variant.both, priority = PacketPriority.low, unreliable = true)
    public static void blockSnapshot(short amount, byte[] data){
        try{
            netClient.byteStream.setBytes(data);
            DataInputStream input = netClient.dataStream;

            for(int i = 0; i < amount; i++){
                int pos = input.readInt();
                short block = input.readShort();
                Tile tile = world.tile(pos);
                if(tile == null || tile.build == null){
                    Log.warn(""Missing entity at @. Skipping block snapshot."", tile);
                    break;
                }
                if(tile.build.block.id != block){
                    Log.warn(""Block ID mismatch at @: @ != @. Skipping block snapshot."", tile, tile.build.block.id, block);
                    break;
                }
                tile.build.readAll(Reads.get(input), tile.build.version());
            }
        }catch(Exception e){
            Log.err(e);
        }
    }",False,False
47,"stateSnapshot(float,int,int,boolean,boolean,int,byte,byte[])",Method,"""","""","mindustry.game.EventType.WaveEvent+WaveEvent() java.io.DataInputStream+readUnsignedByte() java.io.DataInputStream+readUnsignedByte() java.io.DataInputStream+readUnsignedByte() java.io.DataInputStream+readUnsignedByte() mindustry.world.modules.BlockModule+read(Reads) mindustry.world.modules.ItemModule+ItemModule() mindustry.world.modules.BlockModule+read(Reads) java.lang.RuntimeException+RuntimeException(Throwable)""","mindustry.core.NetClient+dataReads mindustry.game.Team+all mindustry.game.Teams.TeamData+cores mindustry.game.Teams.TeamData+cores mindustry.core.NetClient+dataReads mindustry.core.NetClient+dataReads""",1318,36,16695,498,9,,"@Remote(variants = Variant.one, priority = PacketPriority.low, unreliable = true)
    public static void stateSnapshot(float waveTime, int wave, int enemies, boolean paused, boolean gameOver, int timeData, byte tps, byte[] coreData){
        try{
            if(wave > state.wave){
                state.wave = wave;
                Events.fire(new WaveEvent());
            }

            state.gameOver = gameOver;
            state.wavetime = waveTime;
            state.wave = wave;
            state.enemies = enemies;
            state.serverPaused = paused;
            state.serverTps = tps & 0xff;

            universe.updateNetSeconds(timeData);

            netClient.byteStream.setBytes(coreData);
            DataInputStream input = netClient.dataStream;
            dataReads.input = input;

            int teams = input.readUnsignedByte();
            for(int i = 0; i < teams; i++){
                int team = input.readUnsignedByte();
                TeamData data = state.teams.get(Team.all[team]);
                if(data.cores.any()){
                    data.cores.first().items.read(dataReads);
                }else{
                    new ItemModule().read(dataReads);
                }
            }

        }catch(IOException e){
            throw new RuntimeException(e);
        }
    }",False,False
48,update(),Method,"""","""","mindustry.core.NetClient+sync() mindustry.core.NetClient+sync()""","mindustry.core.NetClient+connecting mindustry.core.NetClient+connecting mindustry.core.NetClient+timeoutTime mindustry.core.NetClient+timeoutTime mindustry.core.NetClient+dataTimeout mindustry.core.NetClient+quiet mindustry.core.NetClient+timeoutTime""",586,20,18019,535,1,,"@Override
    public void update(){
        if(!net.client()) return;

        if(state.isGame()){
            if(!connecting) sync();
        }else if(!connecting){
            net.disconnect();
        }else{ //...must be connecting
            timeoutTime += Time.delta;
            if(timeoutTime > dataTimeout){
                Log.err(""Failed to load data!"");
                ui.loadfrag.hide();
                quiet = true;
                ui.showErrorMessage(""@disconnect.data"");
                net.disconnect();
                timeoutTime = 0f;
            }
        }
    }",False,False
49,isConnecting(),Method,"""","""","""","mindustry.core.NetClient+connecting""",63,3,18611,555,1,,"public boolean isConnecting(){
        return connecting;
    }",False,False
50,getPing(),Method,"""","""","""","mindustry.core.NetClient+ping""",53,3,18680,559,1,,"public int getPing(){
        return (int)ping;
    }",False,False
51,finishConnecting(),Method,"""","""","""","mindustry.core.NetClient+connecting""",294,9,18739,563,2,,"private void finishConnecting(){
        state.set(State.playing);
        connecting = false;
        ui.join.hide();
        net.setClientLoaded(true);
        Core.app.post(Call::connectConfirm);
        Time.runTask(40f, platform::updateRPC);
        Core.app.post(ui.loadfrag::hide);
    }",False,False
52,reset(),Method,"""","""","""","mindustry.core.NetClient+removed mindustry.core.NetClient+timeoutTime mindustry.core.NetClient+connecting mindustry.core.NetClient+quietReset mindustry.core.NetClient+quiet mindustry.core.NetClient+lastSent""",276,12,19039,573,2,,"private void reset(){
        net.setClientLoaded(false);
        removed.clear();
        timeoutTime = 0f;
        connecting = true;
        quietReset = false;
        quiet = false;
        lastSent = 0;

        Groups.clear();
        ui.chatfrag.clearMessages();
    }",False,False
53,beginConnecting(),Method,"""","""","""","mindustry.core.NetClient+connecting""",63,3,19321,586,1,,"public void beginConnecting(){
        connecting = true;
    }",False,False
54,disconnectQuietly(),Method,"""","""","""","mindustry.core.NetClient+quiet mindustry.core.NetClient+connecting""",167,6,19390,591,1,"/** 
 * Disconnects, resetting state to the menu. 
 */
","/** Disconnects, resetting state to the menu. */
    public void disconnectQuietly(){
        quiet = true;
        connecting = false;
        net.disconnect();
    }",False,False
55,disconnectNoReset(),Method,"""","""","""","mindustry.core.NetClient+quiet mindustry.core.NetClient+quietReset""",159,5,19563,598,1,"/** 
 * Disconnects, causing no further changes or reset.
 */
","/** Disconnects, causing no further changes or reset.*/
    public void disconnectNoReset(){
        quiet = quietReset = true;
        net.disconnect();
    }",False,False
56,setQuiet(),Method,"""","""","""","mindustry.core.NetClient+quiet""",134,4,19728,604,1,"/** 
 * When set, any disconnects will be ignored and no dialogs will be shown. 
 */
","/** When set, any disconnects will be ignored and no dialogs will be shown. */
    public void setQuiet(){
        quiet = true;
    }",False,False
57,clearRemovedEntity(int),Method,"""","mindustry.entities.bullet.ShrapnelBulletType+acceptPlayerPayload(Player,Cons<Payload>) mindustry.entities.bullet.ShrapnelBulletType+pickup(Unit) mindustry.entities.bullet.ShrapnelBulletType+tryDropPayload(Payload)""","""","mindustry.core.NetClient+removed""",73,3,19868,608,1,,"public void clearRemovedEntity(int id){
        removed.remove(id);
    }",False,False
58,addRemovedEntity(int),Method,"""","mindustry.entities.comp.PosTeamDef+remove()""","""","mindustry.core.NetClient+removed""",68,3,19947,612,1,,"public void addRemovedEntity(int id){
        removed.add(id);
    }",False,False
59,isEntityUsed(int),Method,"""","""","""","mindustry.core.NetClient+removed""",79,3,20021,616,1,,"public boolean isEntityUsed(int id){
        return removed.contains(id);
    }",False,False
60,sync(),Method,"update()""","""","java.lang.Math+min(int,int) java.lang.Math+min(int,int)""","mindustry.core.NetClient+timer mindustry.core.NetClient+playerSyncTime mindustry.entities.units.BuildPlan+config mindustry.core.NetClient+lastSent mindustry.core.NetClient+timer""",1893,53,20106,620,0,,"void sync(){
        if(timer.get(0, playerSyncTime)){
            BuildPlan[] requests = null;
            if(player.isBuilder()){
                //limit to 10 to prevent buffer overflows
                int usedRequests = Math.min(player.unit().plans().size, 10);

                int totalLength = 0;

                //prevent buffer overflow by checking config length
                for(int i = 0; i < usedRequests; i++){
                    BuildPlan plan = player.unit().plans().get(i);
                    if(plan.config instanceof byte[] b){
                        int length = b.length;
                        totalLength += length;
                    }

                    if(totalLength > 1024){
                        usedRequests = i + 1;
                        break;
                    }
                }

                requests = new BuildPlan[usedRequests];
                for(int i = 0; i < usedRequests; i++){
                    requests[i] = player.unit().plans().get(i);
                }
            }

            Unit unit = player.dead() ? Nulls.unit : player.unit();
            int uid = player.dead() ? -1 : unit.id;

            Call.clientSnapshot(
            lastSent++,
            uid,
            player.dead(),
            player.dead() ? player.x : unit.x, player.dead() ? player.y : unit.y,
            player.unit().aimX(), player.unit().aimY(),
            unit.rotation,
            unit instanceof Mechc m ? m.baseRotation() : 0,
            unit.vel.x, unit.vel.y,
            player.unit().mineTile,
            player.boosting, player.shooting, ui.chatfrag.shown(), control.input.isBuilding,
            requests,
            Core.camera.position.x, Core.camera.position.y,
            Core.camera.width, Core.camera.height
            );
        }

        if(timer.get(1, 60)){
            Call.ping(Time.millis());
        }
    }",False,False
61,getUsid(String),Method,"""","""","java.lang.String+contains(CharSequence) java.lang.String+contains(CharSequence) java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+String(String)""","""",572,16,22005,674,0,,"String getUsid(String ip){
        //consistently use the latter part of an IP, if possible
        if(ip.contains(""/"")){
            ip = ip.substring(ip.indexOf(""/"") + 1);
        }

        if(Core.settings.getString(""usid-"" + ip, null) != null){
            return Core.settings.getString(""usid-"" + ip, null);
        }else{
            byte[] bytes = new byte[8];
            new Rand().nextBytes(bytes);
            String result = new String(Base64Coder.encode(bytes));
            Core.settings.put(""usid-"" + ip, result);
            return result;
        }
    }",False,False
