index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,commit,full text,moved,removed
1,IdentityDialect,Field,"""","""","""","""",63,4,2253,59,1,"/** 
 * IDENTITYÁöÑÂèØÈÄâÂÄº
 */
","/**
     * IDENTITYÁöÑÂèØÈÄâÂÄº
     */
    public enum IdentityDialect",False,False
2,identityRetrievalStatement,Field,"IdentityDialect(String)""","""","""","""",42,1,2780,70,2,,private String identityRetrievalStatement;,False,False
3,IdentityDialect(String),Method,"""","""","""","com.github.abel533.mapper.MapperHelper+identityRetrievalStatement com.github.abel533.mapper.MapperHelper+identityRetrievalStatement""",144,3,2832,72,2,,"private IdentityDialect(String identityRetrievalStatement) {
            this.identityRetrievalStatement = identityRetrievalStatement;
        }",False,False
4,getIdentityRetrievalStatement(),Method,"""","""","""","com.github.abel533.mapper.MapperHelper+identityRetrievalStatement""",104,3,2986,76,1,,"public String getIdentityRetrievalStatement() {
            return identityRetrievalStatement;
        }",False,False
5,getDatabaseDialect(String),Method,"""","""","java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String)""","""",1072,23,3100,80,9,,"public static IdentityDialect getDatabaseDialect(String database) {
            IdentityDialect returnValue = null;
            if (""DB2"".equalsIgnoreCase(database)) {
                returnValue = DB2;
            } else if (""MySQL"".equalsIgnoreCase(database)) {
                returnValue = MYSQL;
            } else if (""SqlServer"".equalsIgnoreCase(database)) {
                returnValue = SQLSERVER;
            } else if (""Cloudscape"".equalsIgnoreCase(database)) {
                returnValue = CLOUDSCAPE;
            } else if (""Derby"".equalsIgnoreCase(database)) {
                returnValue = DERBY;
            } else if (""HSQLDB"".equalsIgnoreCase(database)) {
                returnValue = HSQLDB;
            } else if (""SYBASE"".equalsIgnoreCase(database)) {
                returnValue = SYBASE;
            } else if (""DB2_MF"".equalsIgnoreCase(database)) {
                returnValue = DB2_MF;
            } else if (""Informix"".equalsIgnoreCase(database)) {
                returnValue = INFORMIX;
            }
            return returnValue;
        }",False,False
6,UUID,Field,"""","""","""","""",25,1,4228,107,2,,"private String UUID = """";",False,False
7,IDENTITY,Field,"""","""","""","""",29,1,4262,108,2,,"private String IDENTITY = """";",False,False
8,BEFORE,Field,"""","""","""","""",31,1,4300,109,2,,private boolean BEFORE = false;,False,False
9,cameHumpMap,Field,"""","""","""","""",36,1,4340,110,2,,private boolean cameHumpMap = false;,False,False
10,config,Field,"""","""","""","""",37,1,4388,113,2,,private Config config = new Config();,False,False
11,setUUID(String),Method,"""","""","""","com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+UUID""",68,3,4431,115,1,,"public void setUUID(String UUID) {
        config.UUID = UUID;
    }",False,False
12,setIDENTITY(String),Method,"""","""","""","com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+IDENTITY com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+IDENTITY""",321,8,4505,119,1,,"public void setIDENTITY(String IDENTITY) {
        IdentityDialect identityDialect = IdentityDialect.getDatabaseDialect(IDENTITY);
        if (identityDialect != null) {
            config.IDENTITY = identityDialect.getIdentityRetrievalStatement();
        } else {
            config.IDENTITY = IDENTITY;
        }
    }",False,False
13,setBEFORE(String),Method,"""","""","java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String)""","com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+BEFORE""",103,3,4832,128,1,,"public void setBEFORE(String BEFORE) {
        config.BEFORE = ""BEFORE"".equalsIgnoreCase(BEFORE);
    }",False,False
14,setCameHumpMap(String),Method,"""","""","java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String)""","com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+cameHumpMap""",121,3,4941,132,1,,"public void setCameHumpMap(String cameHumpMap) {
        config.cameHumpMap = ""TRUE"".equalsIgnoreCase(cameHumpMap);
    }",False,False
15,getUUID(),Method,"""","""","java.lang.String+length() java.lang.String+length()""","com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+UUID com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+UUID com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+UUID""",216,6,5068,136,2,,"private String getUUID() {
        if (config.UUID != null && config.UUID.length() > 0) {
            return config.UUID;
        }
        return ""@java.util.UUID@randomUUID().toString().replace(\""-\"", \""\"")"";
    }",False,False
16,getIDENTITY(),Method,"""","""","java.lang.String+length() java.lang.String+length()""","com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+IDENTITY com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+IDENTITY com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+IDENTITY""",245,7,5290,143,2,,"private String getIDENTITY() {
        if (config.IDENTITY != null && config.IDENTITY.length() > 0) {
            return config.IDENTITY;
        }
        //ÈíàÂØπmysqlÁöÑÈªòËÆ§ÂÄº
        return IdentityDialect.MYSQL.getIdentityRetrievalStatement();
    }",False,False
17,getBEFORE(),Method,"""","""","""","com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+BEFORE""",65,3,5541,151,2,,"private boolean getBEFORE() {
        return config.BEFORE;
    }",False,False
18,isCameHumpMap(),Method,"""","""","""","com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+cameHumpMap""",73,3,5612,155,1,,"public boolean isCameHumpMap() {
        return config.cameHumpMap;
    }",False,False
19,DYNAMIC_SQL,Field,"""","""","""","""",54,1,5691,159,25,,"public static final String DYNAMIC_SQL = ""dynamicSQL"";",False,True
20,msIdSkip,Field,"""","""","""","""",109,4,5750,163,18,"/** 
 * ÁºìÂ≠òskipÁªìÊûú
 */
","/**
     * ÁºìÂ≠òskipÁªìÊûú
     */
    private final Map<String, Boolean> msIdSkip = new HashMap<String, Boolean>();",False,True
21,entityType,Field,"""","""","""","""",112,4,5864,167,18,"/** 
 * ÁºìÂ≠òÂÆû‰ΩìÁ±ªÁ±ªÂûã
 */
","/**
     * ÁºìÂ≠òÂÆû‰ΩìÁ±ªÁ±ªÂûã
     */
    private final Map<String, Class<?>> entityType = new HashMap<String, Class<?>>();",False,True
22,METHODS,Field,"""","""","""","""",336,13,5982,172,17,"/** 
 * ÂÆö‰πâË¶ÅÊã¶Êà™ÁöÑÊñπÊ≥ïÂêç
 */
","/**
     * ÂÆö‰πâË¶ÅÊã¶Êà™ÁöÑÊñπÊ≥ïÂêç
     */
    public final String[] METHODS = {
            ""select"",
            ""selectByPrimaryKey"",
            ""selectCount"",
            ""insert"",
            ""insertSelective"",
            ""delete"",
            ""deleteByPrimaryKey"",
            ""updateByPrimaryKey"",
            ""updateByPrimaryKeySelective""};",False,True
23,dynamicSQL(Object),Method,"""","""","""","com.github.abel533.mapper.Config+DYNAMIC_SQL""",75,3,6324,183,1,,"public String dynamicSQL(Object record) {
        return DYNAMIC_SQL;
    }",True,True
24,DEFAULT_OBJECT_FACTORY,Field,"""","""","""","""",87,1,6405,187,26,,private static final ObjectFactory DEFAULT_OBJECT_FACTORY = new DefaultObjectFactory();,True,True
25,DEFAULT_OBJECT_WRAPPER_FACTORY,Field,"""","""","""","""",109,1,6497,188,26,,private static final ObjectWrapperFactory DEFAULT_OBJECT_WRAPPER_FACTORY = new DefaultObjectWrapperFactory();,True,True
26,forObject(Object),Method,"""","""","""","com.github.abel533.mapper.Config+DEFAULT_OBJECT_FACTORY com.github.abel533.mapper.Config+DEFAULT_OBJECT_WRAPPER_FACTORY""",251,9,6612,196,9,"/** 
 * ÂèçÂ∞ÑÂØπË±°ÔºåÂ¢ûÂä†ÂØπ‰ΩéÁâàÊú¨MybatisÁöÑÊîØÊåÅ
 * @param object ÂèçÂ∞ÑÂØπË±°
 * @return
 */
","/**
     * ÂèçÂ∞ÑÂØπË±°ÔºåÂ¢ûÂä†ÂØπ‰ΩéÁâàÊú¨MybatisÁöÑÊîØÊåÅ
     *
     * @param object ÂèçÂ∞ÑÂØπË±°
     * @return
     */
    public static MetaObject forObject(Object object) {
        return MetaObject.forObject(object, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY);
    }",True,True
27,getMapperClass(String),Method,"""","""","java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+lastIndexOf(String) java.lang.String+lastIndexOf(String) java.lang.Class+forName(String) java.lang.Class+forName(String)""","""",315,11,6869,207,1,"/** 
 * Ê†πÊçÆmsIdËé∑ÂèñÊé•Âè£Á±ª
 * @param msId
 * @return
 * @throws ClassNotFoundException
 */
","/**
     * Ê†πÊçÆmsIdËé∑ÂèñÊé•Âè£Á±ª
     *
     * @param msId
     * @return
     * @throws ClassNotFoundException
     */
    public Class<?> getMapperClass(String msId) throws ClassNotFoundException {
        String mapperClassStr = msId.substring(0, msId.lastIndexOf("".""));
        return Class.forName(mapperClassStr);
    }",True,True
28,extendsMapper(Class),Method,"""","""","java.lang.Class+isAssignableFrom(Class) java.lang.Class+isAssignableFrom(Class)""","""",201,9,7190,218,1,"/** 
 * Êé•Âè£Á±ªÊòØÂê¶‰∏∫MapperÂ≠êÊé•Âè£
 * @param mapperClass
 * @return
 */
","/**
     * Êé•Âè£Á±ªÊòØÂê¶‰∏∫MapperÂ≠êÊé•Âè£
     *
     * @param mapperClass
     * @return
     */
    public boolean extendsMapper(Class mapperClass) {
        return Mapper.class.isAssignableFrom(mapperClass);
    }",False,True
29,isMapperMethod(String),Method,"""","""","java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+lastIndexOf(String) java.lang.String+lastIndexOf(String) java.lang.String+equals(Object) java.lang.String+equals(Object) com.github.abel533.mapper.Config+extendsMapper(Class) com.github.abel533.mapper.Config+extendsMapper(Class) com.github.abel533.mapper.Config+getMapperClass(String) com.github.abel533.mapper.Config+getMapperClass(String) java.util.Map+put(K,V) java.util.Map+put(K,V)""","com.github.abel533.mapper.Config+msIdSkip com.github.abel533.mapper.Config+msIdSkip com.github.abel533.mapper.Config+METHODS com.github.abel533.mapper.Config+msIdSkip""",829,29,7397,228,1,"/** 
 * Âà§Êñ≠ÂΩìÂâçÁöÑÊé•Âè£ÊñπÊ≥ïÊòØÂê¶ÈúÄË¶ÅËøõË°åÊã¶Êà™
 * @param msId
 * @return
 */
","/**
     * Âà§Êñ≠ÂΩìÂâçÁöÑÊé•Âè£ÊñπÊ≥ïÊòØÂê¶ÈúÄË¶ÅËøõË°åÊã¶Êà™
     *
     * @param msId
     * @return
     */
    public boolean isMapperMethod(String msId) {
        if (msIdSkip.get(msId) != null) {
            return msIdSkip.get(msId);
        }
        try {
            String methodName = msId.substring(msId.lastIndexOf(""."") + 1);
            boolean rightMethod = false;
            for (String method : METHODS) {
                if (method.equals(methodName)) {
                    rightMethod = true;
                    break;
                }
            }
            if (!rightMethod) {
                return false;
            }
            Boolean skip = extendsMapper(getMapperClass(msId));
            msIdSkip.put(msId, skip);
            return skip;
        } catch (ClassNotFoundException e) {
            return false;
        }
    }",False,True
30,getSelectReturnType(MappedStatement),Method,"""","""","java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) com.github.abel533.mapper.Config+getMapperClass(String) com.github.abel533.mapper.Config+getMapperClass(String) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.lang.RuntimeException+RuntimeException(String) java.lang.Class+getGenericInterfaces() java.lang.Class+getGenericInterfaces() java.lang.reflect.ParameterizedType+getRawType() java.lang.reflect.ParameterizedType+getRawType() java.lang.reflect.ParameterizedType+getActualTypeArguments() java.lang.reflect.ParameterizedType+getActualTypeArguments() java.util.Map+put(K,V) java.util.Map+put(K,V) java.lang.RuntimeException+RuntimeException(String)""","com.github.abel533.mapper.Config+entityType com.github.abel533.mapper.Config+entityType com.github.abel533.mapper.Config+entityType""",1060,31,8232,258,1,"/** 
 * Ëé∑ÂèñËøîÂõûÂÄºÁ±ªÂûã
 * @param ms
 * @return
 */
","/**
     * Ëé∑ÂèñËøîÂõûÂÄºÁ±ªÂûã
     *
     * @param ms
     * @return
     */
    public Class<?> getSelectReturnType(MappedStatement ms) {
        String msId = ms.getId();
        if (entityType.get(msId) != null) {
            return entityType.get(msId);
        }
        Class<?> mapperClass = null;
        try {
            mapperClass = getMapperClass(msId);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            throw new RuntimeException(""Êó†Ê≥ïËé∑ÂèñMapperÊé•Âè£‰ø°ÊÅØ:"" + msId);
        }
        Type[] types = mapperClass.getGenericInterfaces();
        for (Type type : types) {
            if (type instanceof ParameterizedType) {
                ParameterizedType t = (ParameterizedType) type;
                if (t.getRawType() == Mapper.class) {
                    Class<?> returnType = (Class) t.getActualTypeArguments()[0];
                    entityType.put(msId, returnType);
                    return returnType;
                }
            }
        }
        throw new RuntimeException(""Êó†Ê≥ïËé∑ÂèñMapper<T>Ê≥õÂûãÁ±ªÂûã:"" + msId);
    }",False,True
31,getMethodName(MappedStatement),Method,"""","""","java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+lastIndexOf(String) java.lang.String+lastIndexOf(String)""","""",147,4,9298,284,1,,"public String getMethodName(MappedStatement ms) {
        String msId = ms.getId();
        return msId.substring(msId.lastIndexOf(""."") + 1);
    }",True,True
32,"setSqlSource(MappedStatement,SqlSource)",Method,"""","""","com.github.abel533.mapper.Config+forObject(Object) com.github.abel533.mapper.Config+forObject(Object)""","""",255,10,9451,295,2,"/** 
 * ÈáçÊñ∞ËÆæÁΩÆSqlSource
 * @param ms
 * @param sqlSource
 */
","/**
     * ÈáçÊñ∞ËÆæÁΩÆSqlSource
     *
     * @param ms
     * @param sqlSource
     */
    private void setSqlSource(MappedStatement ms, SqlSource sqlSource) {
        MetaObject msObject = forObject(ms);
        msObject.setValue(""sqlSource"", sqlSource);
    }",True,True
33,selectSqlSource(MappedStatement),Method,"""","""","com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.Object+Object() com.github.abel533.mapper.Config+getSelectSqlNode(MappedStatement) com.github.abel533.mapper.Config+getSelectSqlNode(MappedStatement) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) java.lang.String+equals(Object) java.lang.String+equals(Object) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.EntityHelper+getSelectColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getSelectColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getPrimaryKeyWhere(Class<?>) com.github.abel533.mapper.EntityHelper+getPrimaryKeyWhere(Class<?>) java.lang.Object+Object() com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) java.lang.Object+Object() com.github.abel533.mapper.Config+getSelectCountSqlNode(MappedStatement) com.github.abel533.mapper.Config+getSelectCountSqlNode(MappedStatement) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object)""","com.github.abel533.mapper.Config+METHODS com.github.abel533.mapper.Config+METHODS com.github.abel533.mapper.Config+METHODS com.github.abel533.mapper.Config+METHODS""",1428,30,9712,305,1,"/** 
 * ‰øÆÊîπselectÊü•ËØ¢ÁöÑSqlSource
 * @param ms
 */
","/**
     * ‰øÆÊîπselectÊü•ËØ¢ÁöÑSqlSource
     *
     * @param ms
     */
    public void selectSqlSource(MappedStatement ms) {
        String methodName = getMethodName(ms);
        Class<?> entityClass = getSelectReturnType(ms);
        //Âä®ÊÄÅsql
        if (methodName.equals(METHODS[0])) {
            DynamicSqlSource dynamicSqlSource = new DynamicSqlSource(ms.getConfiguration(), getSelectSqlNode(ms));
            setSqlSource(ms, dynamicSqlSource);
        } else if (methodName.equals(METHODS[1])) {//ÈùôÊÄÅsql
            List<ParameterMapping> parameterMappings = getPrimaryKeyParameterMappings(ms);
            BEGIN();
            SELECT(EntityHelper.getSelectColumns(entityClass));
            FROM(EntityHelper.getTableName(entityClass));
            WHERE(EntityHelper.getPrimaryKeyWhere(entityClass));
            StaticSqlSource sqlSource = new StaticSqlSource(ms.getConfiguration(), SQL(), parameterMappings);
            setSqlSource(ms, sqlSource);
        } else {
            DynamicSqlSource dynamicSqlSource = new DynamicSqlSource(ms.getConfiguration(), getSelectCountSqlNode(ms));
            setSqlSource(ms, dynamicSqlSource);
        }
        if (methodName.equals(METHODS[0]) || methodName.equals(METHODS[1])) {
            ResultMap resultMap = ms.getResultMaps().get(0);
            MetaObject metaObject = MapperHelper.forObject(resultMap);
            metaObject.setValue(""type"", entityClass);
        }
    }",False,True
34,insertSqlSource(MappedStatement),Method,"""","""","com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.Object+Object() com.github.abel533.mapper.Config+getInsertSqlNode(MappedStatement) com.github.abel533.mapper.Config+getInsertSqlNode(MappedStatement) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) java.lang.Object+Object() com.github.abel533.mapper.Config+getInsertAllSqlNode(MappedStatement) com.github.abel533.mapper.Config+getInsertAllSqlNode(MappedStatement) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource)""","com.github.abel533.mapper.Config+METHODS""",690,18,11146,336,1,"/** 
 * ‰øÆÊîπinsertÊèíÂÖ•ÁöÑSqlSource
 * @param ms
 */
","/**
     * ‰øÆÊîπinsertÊèíÂÖ•ÁöÑSqlSource
     *
     * @param ms
     */
    public void insertSqlSource(MappedStatement ms) {
        String methodName = getMethodName(ms);
        Class<?> entityClass = getSelectReturnType(ms);
        //Âä®ÊÄÅsql
        if (methodName.equals(METHODS[4])) {
            DynamicSqlSource dynamicSqlSource = new DynamicSqlSource(ms.getConfiguration(), getInsertSqlNode(ms));
            setSqlSource(ms, dynamicSqlSource);
        } else {//ÈùôÊÄÅsql
            //Áî±‰∫éÈúÄË¶ÅselectKeyÔºåËøôÈáå‰πüË¶ÅÊîπ‰∏∫Âä®ÊÄÅsql
            DynamicSqlSource dynamicSqlSource = new DynamicSqlSource(ms.getConfiguration(), getInsertAllSqlNode(ms));
            setSqlSource(ms, dynamicSqlSource);
        }
    }",False,True
35,updateSqlSource(MappedStatement),Method,"""","""","com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.Object+Object() com.github.abel533.mapper.Config+getUpdateSqlNode(MappedStatement) com.github.abel533.mapper.Config+getUpdateSqlNode(MappedStatement) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+getColumnParameterMappings(MappedStatement) com.github.abel533.mapper.Config+getColumnParameterMappings(MappedStatement) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper+getPrimaryKeyWhere(Class<?>) com.github.abel533.mapper.EntityHelper+getPrimaryKeyWhere(Class<?>) java.lang.Object+Object() com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource)""","com.github.abel533.mapper.Config+METHODS""",1221,27,11842,355,1,"/** 
 * ‰øÆÊîπupdateÊõ¥Êñ∞ÁöÑSqlSource
 * @param ms
 */
","/**
     * ‰øÆÊîπupdateÊõ¥Êñ∞ÁöÑSqlSource
     *
     * @param ms
     */
    public void updateSqlSource(MappedStatement ms) {
        String methodName = getMethodName(ms);
        Class<?> entityClass = getSelectReturnType(ms);
        //Âä®ÊÄÅsql
        if (methodName.equals(METHODS[8])) {
            DynamicSqlSource dynamicSqlSource = new DynamicSqlSource(ms.getConfiguration(), getUpdateSqlNode(ms));
            setSqlSource(ms, dynamicSqlSource);
        } else {//ÈùôÊÄÅsql - updateByPrimaryKey
            //Êò†Â∞ÑË¶ÅÂåÖÂê´set=?Âíåwhere=?
            List<ParameterMapping> parameterMappings = getColumnParameterMappings(ms);
            parameterMappings.addAll(getPrimaryKeyParameterMappings(ms));
            BEGIN();
            UPDATE(EntityHelper.getTableName(entityClass));
            List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
            for (EntityHelper.EntityColumn column : columnList) {
                SET(column.getColumn() + "" = ?"");
            }
            WHERE(EntityHelper.getPrimaryKeyWhere(entityClass));
            StaticSqlSource sqlSource = new StaticSqlSource(ms.getConfiguration(), SQL(), parameterMappings);
            setSqlSource(ms, sqlSource);
        }
    }",False,True
36,deleteSqlSource(MappedStatement),Method,"""","""","com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.Object+Object() com.github.abel533.mapper.Config+getDeleteSqlNode(MappedStatement) com.github.abel533.mapper.Config+getDeleteSqlNode(MappedStatement) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getPrimaryKeyWhere(Class<?>) com.github.abel533.mapper.EntityHelper+getPrimaryKeyWhere(Class<?>) java.lang.Object+Object() com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource)""","com.github.abel533.mapper.Config+METHODS""",873,21,13069,383,1,"/** 
 * ‰øÆÊîπdeleteÂà†Èô§ÁöÑSqlSource
 * @param ms
 */
","/**
     * ‰øÆÊîπdeleteÂà†Èô§ÁöÑSqlSource
     *
     * @param ms
     */
    public void deleteSqlSource(MappedStatement ms) {
        String methodName = getMethodName(ms);
        Class<?> entityClass = getSelectReturnType(ms);
        //Â¢ûÂä†delete
        if (methodName.equals(METHODS[5])) {
            DynamicSqlSource dynamicSqlSource = new DynamicSqlSource(ms.getConfiguration(), getDeleteSqlNode(ms));
            setSqlSource(ms, dynamicSqlSource);
        } else {
            List<ParameterMapping> parameterMappings = getPrimaryKeyParameterMappings(ms);
            BEGIN();
            DELETE_FROM(EntityHelper.getTableName(entityClass));
            WHERE(EntityHelper.getPrimaryKeyWhere(entityClass));
            StaticSqlSource sqlSource = new StaticSqlSource(ms.getConfiguration(), SQL(), parameterMappings);
            setSqlSource(ms, sqlSource);
        }
    }",False,True
37,getPrimaryKeyParameterMappings(MappedStatement),Method,"""","""","com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.EntityHelper+getPKColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getPKColumns(Class<?>) java.util.ArrayList+ArrayList() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getJavaType() com.github.abel533.mapper.EntityHelper.EntityColumn+getJavaType()""","""",749,17,13948,406,2,"/** 
 * Ê†πÊçÆÂØπË±°ÁîüÊàê‰∏ªÈîÆÊò†Â∞Ñ
 * @param ms
 * @return
 */
","/**
     * Ê†πÊçÆÂØπË±°ÁîüÊàê‰∏ªÈîÆÊò†Â∞Ñ
     *
     * @param ms
     * @return
     */
    private List<ParameterMapping> getPrimaryKeyParameterMappings(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<EntityHelper.EntityColumn> entityColumns = EntityHelper.getPKColumns(entityClass);
        List<ParameterMapping> parameterMappings = new ArrayList<ParameterMapping>();
        for (EntityHelper.EntityColumn column : entityColumns) {
            ParameterMapping.Builder builder = new ParameterMapping.Builder(ms.getConfiguration(), column.getProperty(), column.getJavaType());
            builder.mode(ParameterMode.IN);
            parameterMappings.add(builder.build());
        }
        return parameterMappings;
    }",True,True
38,getColumnParameterMappings(MappedStatement),Method,"""","""","com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) java.util.ArrayList+ArrayList() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getJavaType() com.github.abel533.mapper.EntityHelper.EntityColumn+getJavaType()""","""",745,17,14703,424,2,"/** 
 * Ê†πÊçÆÂØπË±°ÁîüÊàêÊâÄÊúâÂàóÁöÑÊò†Â∞Ñ
 * @param ms
 * @return
 */
","/**
     * Ê†πÊçÆÂØπË±°ÁîüÊàêÊâÄÊúâÂàóÁöÑÊò†Â∞Ñ
     *
     * @param ms
     * @return
     */
    private List<ParameterMapping> getColumnParameterMappings(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<EntityHelper.EntityColumn> entityColumns = EntityHelper.getColumns(entityClass);
        List<ParameterMapping> parameterMappings = new ArrayList<ParameterMapping>();
        for (EntityHelper.EntityColumn column : entityColumns) {
            ParameterMapping.Builder builder = new ParameterMapping.Builder(ms.getConfiguration(), column.getProperty(), column.getJavaType());
            builder.mode(ParameterMode.IN);
            parameterMappings.add(builder.build());
        }
        return parameterMappings;
    }",True,True
39,getSelectSqlNode(MappedStatement),Method,"""","""","com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper+getSelectColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getSelectColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.lang.Object+Object()""","""",1190,26,15454,442,2,"/** 
 * ÁîüÊàêÂä®ÊÄÅselectËØ≠Âè•
 * @param ms
 * @return
 */
","/**
     * ÁîüÊàêÂä®ÊÄÅselectËØ≠Âè•
     *
     * @param ms
     * @return
     */
    private MixedSqlNode getSelectSqlNode(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
        //select column ... from table
        sqlNodes.add(new StaticTextSqlNode(""SELECT ""
                + EntityHelper.getSelectColumns(entityClass)
                + "" FROM ""
                + EntityHelper.getTableName(entityClass)));
        List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
        List<SqlNode> ifNodes = new ArrayList<SqlNode>();
        boolean first = true;
        for (EntityHelper.EntityColumn column : columnList) {
            StaticTextSqlNode columnNode = new StaticTextSqlNode((first ? """" : "" AND "") + column.getColumn() + "" = #{"" + column.getProperty() + ""} "");
            IfSqlNode ifSqlNode = new IfSqlNode(columnNode, column.getProperty() + "" != null "");
            ifNodes.add(ifSqlNode);
            first = false;
        }
        sqlNodes.add(new WhereSqlNode(ms.getConfiguration(), new MixedSqlNode(ifNodes)));
        return new MixedSqlNode(sqlNodes);
    }",True,True
40,getSelectCountSqlNode(MappedStatement),Method,"""","""","com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.lang.Object+Object()""","""",1121,24,16650,469,2,"/** 
 * ÁîüÊàêÂä®ÊÄÅselectËØ≠Âè•
 * @param ms
 * @return
 */
","/**
     * ÁîüÊàêÂä®ÊÄÅselectËØ≠Âè•
     *
     * @param ms
     * @return
     */
    private MixedSqlNode getSelectCountSqlNode(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
        //select column ... from table
        sqlNodes.add(new StaticTextSqlNode(""SELECT COUNT(*) FROM ""
                + EntityHelper.getTableName(entityClass)));
        List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
        List<SqlNode> ifNodes = new ArrayList<SqlNode>();
        boolean first = true;
        for (EntityHelper.EntityColumn column : columnList) {
            StaticTextSqlNode columnNode = new StaticTextSqlNode((first ? """" : "" AND "") + column.getColumn() + "" = #{"" + column.getProperty() + ""} "");
            IfSqlNode ifSqlNode = new IfSqlNode(columnNode, column.getProperty() + "" != null "");
            ifNodes.add(ifSqlNode);
            first = false;
        }
        sqlNodes.add(new WhereSqlNode(ms.getConfiguration(), new MixedSqlNode(ifNodes)));
        return new MixedSqlNode(sqlNodes);
    }",True,True
41,getInsertSqlNode(MappedStatement),Method,"""","""","com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() java.lang.RuntimeException+RuntimeException(String) java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName() com.github.abel533.mapper.Config+newSelectKeyMappedStatement(MappedStatement,EntityColumn) com.github.abel533.mapper.Config+newSelectKeyMappedStatement(MappedStatement,EntityColumn) com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.Config+getUUID() com.github.abel533.mapper.Config+getUUID() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.lang.Object+Object()""","""",3259,57,17777,494,2,"/** 
 * ÁîüÊàêÂä®ÊÄÅinsertËØ≠Âè•
 * @param ms
 * @return
 */
","/**
     * ÁîüÊàêÂä®ÊÄÅinsertËØ≠Âè•
     *
     * @param ms
     * @return
     */
    private MixedSqlNode getInsertSqlNode(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
        sqlNodes.add(new StaticTextSqlNode(""INSERT INTO "" + EntityHelper.getTableName(entityClass)));

        List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
        List<SqlNode> ifNodes = new ArrayList<SqlNode>();
        Boolean hasIdentityKey = false;
        for (EntityHelper.EntityColumn column : columnList) {
            if (column.getSequenceName() != null && column.getSequenceName().length() > 0) {
                //Áõ¥Êé•Â∫èÂàóÂä†ËøõÂéª
                ifNodes.add(new StaticTextSqlNode(column.getColumn() + "",""));
            } else if (column.isIdentity()) {
                if (hasIdentityKey) {
                    throw new RuntimeException(ms.getId() + ""ÂØπÂ∫îÁöÑÂÆû‰ΩìÁ±ª"" + entityClass.getCanonicalName() + ""‰∏≠ÂåÖÂê´Â§ö‰∏™MySqlÁöÑËá™Âä®Â¢ûÈïøÂàó,ÊúÄÂ§öÂè™ËÉΩÊúâ‰∏Ä‰∏™!"");
                }
                //Êñ∞Â¢û‰∏Ä‰∏™selectKey-MS
                newSelectKeyMappedStatement(ms, column);
                hasIdentityKey = true;
                ifNodes.add(new StaticTextSqlNode(column.getColumn() + "",""));
                //ËøôÁßçÊÉÖÂÜµ‰∏ã,Â¶ÇÊûúÂéüÂÖàÁöÑÂ≠óÊÆµÊúâÂÄº,ÈúÄË¶ÅÂÖàÁºìÂ≠òËµ∑Êù•,Âê¶ÂàôÂ∞±‰∏ÄÂÆö‰ºö‰ΩøÁî®Ëá™Âä®Â¢ûÈïø
                sqlNodes.add(new VarDeclSqlNode(column.getProperty() + ""_cache"", column.getProperty()));
            } else if (column.isUuid()) {
                sqlNodes.add(new VarDeclSqlNode(column.getProperty() + ""_bind"", getUUID()));
                ifNodes.add(new StaticTextSqlNode(column.getColumn() + "",""));
            } else {
                ifNodes.add(new IfSqlNode(new StaticTextSqlNode(column.getColumn() + "",""), column.getProperty() + "" != null ""));
            }
        }
        sqlNodes.add(new TrimSqlNode(ms.getConfiguration(), new MixedSqlNode(ifNodes), ""("", null, "")"", "",""));

        ifNodes = new ArrayList<SqlNode>();
        for (EntityHelper.EntityColumn column : columnList) {
            //ÂΩìÂèÇÊï∞‰∏≠ÁöÑÂ±ûÊÄßÂÄº‰∏ç‰∏∫Á©∫ÁöÑÊó∂ÂÄô,‰ΩøÁî®‰º†ÂÖ•ÁöÑÂÄº
            //Ëá™Â¢ûÁöÑÊÉÖÂÜµ‰∏ã,Â¶ÇÊûúÈªòËÆ§ÊúâÂÄº,Â∞±‰ºöÂ§á‰ªΩÂà∞property_cache‰∏≠
            if (column.isIdentity()) {
                ifNodes.add(new IfSqlNode(new StaticTextSqlNode(""#{"" + column.getProperty() + ""_cache },""), column.getProperty() + ""_cache != null ""));
            } else {
                ifNodes.add(new IfSqlNode(new StaticTextSqlNode(""#{"" + column.getProperty() + ""},""), column.getProperty() + "" != null ""));
            }
            if (column.getSequenceName() != null && column.getSequenceName().length() > 0) {
                ifNodes.add(new IfSqlNode(new StaticTextSqlNode(column.getSequenceName() + "".nextval ,""), column.getProperty() + "" == null ""));
            } else if (column.isIdentity()) {
                ifNodes.add(new IfSqlNode(new StaticTextSqlNode(""#{"" + column.getProperty() + "" },""), column.getProperty() + "" == null ""));
            } else if (column.isUuid()) {
                ifNodes.add(new IfSqlNode(new StaticTextSqlNode(""#{"" + column.getProperty() + ""_bind },""), column.getProperty() + "" == null ""));
            }
        }
        sqlNodes.add(new TrimSqlNode(ms.getConfiguration(), new MixedSqlNode(ifNodes), ""VALUES ("", null, "")"", "",""));
        return new MixedSqlNode(sqlNodes);
    }",False,True
42,getInsertAllSqlNode(MappedStatement),Method,"""","""","com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() java.lang.RuntimeException+RuntimeException(String) java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName() com.github.abel533.mapper.Config+newSelectKeyMappedStatement(MappedStatement,EntityColumn) com.github.abel533.mapper.Config+newSelectKeyMappedStatement(MappedStatement,EntityColumn) com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.Config+getUUID() com.github.abel533.mapper.Config+getUUID() com.github.abel533.mapper.EntityHelper+getAllColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getAllColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.lang.Object+Object()""","""",2954,53,21042,552,2,"/** 
 * ÁîüÊàêÂä®ÊÄÅinsertËØ≠Âè•
 * @param ms
 * @return
 */
","/**
     * ÁîüÊàêÂä®ÊÄÅinsertËØ≠Âè•
     *
     * @param ms
     * @return
     */
    private MixedSqlNode getInsertAllSqlNode(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
        sqlNodes.add(new StaticTextSqlNode(""INSERT INTO "" + EntityHelper.getTableName(entityClass)));

        List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
        Boolean hasIdentityKey = false;
        //Â§ÑÁêÜKey
        for (EntityHelper.EntityColumn column : columnList) {
            if (column.getSequenceName() != null && column.getSequenceName().length() > 0) {
            } else if (column.isIdentity()) {
                //ÂàóÂøÖÊúâ
                if (hasIdentityKey) {
                    throw new RuntimeException(ms.getId() + ""ÂØπÂ∫îÁöÑÂÆû‰ΩìÁ±ª"" + entityClass.getCanonicalName() + ""‰∏≠ÂåÖÂê´Â§ö‰∏™MySqlÁöÑËá™Âä®Â¢ûÈïøÂàó,ÊúÄÂ§öÂè™ËÉΩÊúâ‰∏Ä‰∏™!"");
                }
                newSelectKeyMappedStatement(ms, column);
                hasIdentityKey = true;
                //ËøôÁßçÊÉÖÂÜµ‰∏ã,Â¶ÇÊûúÂéüÂÖàÁöÑÂ≠óÊÆµÊúâÂÄº,ÈúÄË¶ÅÂÖàÁºìÂ≠òËµ∑Êù•,Âê¶ÂàôÂ∞±‰∏ÄÂÆö‰ºö‰ΩøÁî®Ëá™Âä®Â¢ûÈïø
                sqlNodes.add(new VarDeclSqlNode(column.getProperty() + ""_cache"", column.getProperty()));
            } else if (column.isUuid()) {
                sqlNodes.add(new VarDeclSqlNode(column.getProperty() + ""_bind"", getUUID()));
            }
        }
        sqlNodes.add(new StaticTextSqlNode(""("" + EntityHelper.getAllColumns(entityClass) + "")""));
        List<SqlNode> ifNodes = new ArrayList<SqlNode>();
        for (EntityHelper.EntityColumn column : columnList) {
            //‰ºòÂÖà‰ΩøÁî®‰º†ÂÖ•ÁöÑÂ±ûÊÄßÂÄº
            //Ëá™Â¢ûÁöÑÊÉÖÂÜµ‰∏ã,Â¶ÇÊûúÈªòËÆ§ÊúâÂÄº,Â∞±‰ºöÂ§á‰ªΩÂà∞property_cache‰∏≠
            if (column.isIdentity()) {
                ifNodes.add(new IfSqlNode(new StaticTextSqlNode(""#{"" + column.getProperty() + ""_cache },""), column.getProperty() + ""_cache != null ""));
            } else {
                ifNodes.add(new IfSqlNode(new StaticTextSqlNode(""#{"" + column.getProperty() + ""},""), column.getProperty() + "" != null ""));
            }

            if (column.getSequenceName() != null && column.getSequenceName().length() > 0) {
                ifNodes.add(new IfSqlNode(new StaticTextSqlNode(column.getSequenceName() + "".nextval ,""), column.getProperty() + "" == null ""));
            } else if (column.isIdentity()) {
                ifNodes.add(new IfSqlNode(new StaticTextSqlNode(""#{"" + column.getProperty() + "" },""), column.getProperty() + ""_cache == null ""));
            } else if (column.isUuid()) {
                ifNodes.add(new IfSqlNode(new StaticTextSqlNode(""#{"" + column.getProperty() + ""_bind },""), column.getProperty() + "" == null ""));
            } else {
                ifNodes.add(new IfSqlNode(new StaticTextSqlNode(""#{"" + column.getProperty() + ""},""), column.getProperty() + "" == null ""));
            }
        }
        sqlNodes.add(new TrimSqlNode(ms.getConfiguration(), new MixedSqlNode(ifNodes), ""VALUES ("", null, "")"", "",""));
        return new MixedSqlNode(sqlNodes);
    }",False,True
43,getDeleteSqlNode(MappedStatement),Method,"""","""","com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.lang.Object+Object()""","""",1007,21,24002,606,2,"/** 
 * ÁîüÊàêÂä®ÊÄÅselectËØ≠Âè•
 * @param ms
 * @return
 */
","/**
     * ÁîüÊàêÂä®ÊÄÅselectËØ≠Âè•
     *
     * @param ms
     * @return
     */
    private MixedSqlNode getDeleteSqlNode(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
        sqlNodes.add(new StaticTextSqlNode(""DELETE FROM "" + EntityHelper.getTableName(entityClass)));
        List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
        List<SqlNode> ifNodes = new ArrayList<SqlNode>();
        boolean first = true;
        for (EntityHelper.EntityColumn column : columnList) {
            StaticTextSqlNode columnNode = new StaticTextSqlNode((first ? """" : "" AND "") + column.getColumn() + "" = #{"" + column.getProperty() + ""} "");
            ifNodes.add(new IfSqlNode(columnNode, column.getProperty() + "" != null ""));
            first = false;
        }
        sqlNodes.add(new WhereSqlNode(ms.getConfiguration(), new MixedSqlNode(ifNodes)));
        return new MixedSqlNode(sqlNodes);
    }",True,True
44,getUpdateSqlNode(MappedStatement),Method,"""","""","com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper+getPKColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getPKColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.lang.Object+Object()""","""",1413,28,25015,628,2,"/** 
 * ÁîüÊàêÂä®ÊÄÅselectËØ≠Âè•
 * @param ms
 * @return MixedSqlNode
 */
","/**
     * ÁîüÊàêÂä®ÊÄÅselectËØ≠Âè•
     *
     * @param ms
     * @return MixedSqlNode
     */
    private MixedSqlNode getUpdateSqlNode(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
        sqlNodes.add(new StaticTextSqlNode(""UPDATE "" + EntityHelper.getTableName(entityClass)));
        List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
        List<SqlNode> ifNodes = new ArrayList<SqlNode>();
        for (EntityHelper.EntityColumn column : columnList) {
            StaticTextSqlNode columnNode = new StaticTextSqlNode(column.getColumn() + "" = #{"" + column.getProperty() + ""}, "");
            ifNodes.add(new IfSqlNode(columnNode, column.getProperty() + "" != null ""));
        }
        sqlNodes.add(new SetSqlNode(ms.getConfiguration(), new MixedSqlNode(ifNodes)));

        columnList = EntityHelper.getPKColumns(entityClass);
        List<SqlNode> whereNodes = new ArrayList<SqlNode>();
        boolean first = true;
        for (EntityHelper.EntityColumn column : columnList) {
            whereNodes.add(new StaticTextSqlNode((first ? """" : "" AND "") + column.getColumn() + "" = #{"" + column.getProperty() + ""} ""));
            first = false;
        }
        sqlNodes.add(new WhereSqlNode(ms.getConfiguration(), new MixedSqlNode(whereNodes)));
        return new MixedSqlNode(sqlNodes);
    }",True,True
45,"processParameterObject(MappedStatement,Object[])",Method,"""","""","com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getMethodName(MappedStatement) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) java.util.HashMap+HashMap() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.StringBuilder+StringBuilder(String) java.lang.StringBuilder+append(Object) java.lang.StringBuilder+append(Object) java.lang.RuntimeException+RuntimeException(String) java.lang.StringBuilder+substring(int,int) java.lang.StringBuilder+substring(int,int) java.lang.StringBuilder+length() java.lang.StringBuilder+length() com.github.abel533.mapper.Config+forObject(Object) com.github.abel533.mapper.Config+forObject(Object) java.util.Map+put(K,V) java.util.Map+put(K,V) java.lang.RuntimeException+RuntimeException(String) java.lang.Class+isAssignableFrom(Class) java.lang.Class+isAssignableFrom(Class) java.lang.Object+getClass() java.lang.Object+getClass() java.lang.RuntimeException+RuntimeException(String) java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getCanonicalName()""","com.github.abel533.mapper.Config+METHODS com.github.abel533.mapper.Config+METHODS""",2392,47,26434,657,1,"/** 
 * Â§ÑÁêÜÂÖ•ÂèÇ
 * @param ms
 * @param args
 */
","/**
     * Â§ÑÁêÜÂÖ•ÂèÇ
     *
     * @param ms
     * @param args
     */
    public void processParameterObject(MappedStatement ms, Object[] args) {
        Class<?> entityClass = getSelectReturnType(ms);
        String methodName = getMethodName(ms);
        Object parameterObject = args[1];
        //‰∏§‰∏™ÈÄöËøáPKÊü•ËØ¢ÁöÑÊñπÊ≥ïÁî®‰∏ãÈù¢ÁöÑÊñπÊ≥ïÂ§ÑÁêÜÂèÇÊï∞
        if (methodName.equals(METHODS[1]) || methodName.equals(METHODS[6])) {
            TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();
            List<ParameterMapping> parameterMappings = getPrimaryKeyParameterMappings(ms);
            Map<String, Object> parameterMap = new HashMap<String, Object>();
            for (ParameterMapping parameterMapping : parameterMappings) {
                if (parameterMapping.getMode() != ParameterMode.OUT) {
                    Object value;
                    String propertyName = parameterMapping.getProperty();
                    if (parameterObject == null) {
                        value = null;
                    } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {
                        if (parameterMappings.size() > 1) {
                            StringBuilder propertyBuilder = new StringBuilder(""ÂÖ•ÂèÇÁº∫Â∞ëÂøÖË¶ÅÁöÑÂ±ûÊÄßÈîôËØØ!ÂèÇÊï∞‰∏≠ÂøÖÈ°ªÊèê‰æõÂ±ûÊÄß:"");
                            for (ParameterMapping mapping : parameterMappings) {
                                propertyBuilder.append(mapping.getProperty()).append("","");
                            }
                            throw new RuntimeException(propertyBuilder.substring(0, propertyBuilder.length() - 1));
                        }
                        value = parameterObject;
                    } else {
                        MetaObject metaObject = forObject(parameterObject);
                        value = metaObject.getValue(propertyName);
                    }
                    parameterMap.put(propertyName, value);
                }
            }
            args[1] = parameterMap;
        } else if (parameterObject == null) {
            throw new RuntimeException(""ÂÖ•ÂèÇ‰∏çËÉΩ‰∏∫Á©∫!"");
        } else if (!entityClass.isAssignableFrom(parameterObject.getClass())) {
            throw new RuntimeException(""ÂÖ•ÂèÇÁ±ªÂûãÈîôËØØÔºåÈúÄË¶ÅÁöÑÁ±ªÂûã‰∏∫:""
                    + entityClass.getCanonicalName()
                    + "",ÂÆûÈôÖÂÖ•ÂèÇÁ±ªÂûã‰∏∫:""
                    + parameterObject.getClass().getCanonicalName());
        }
    }",False,True
46,"newSelectKeyMappedStatement(MappedStatement,EntityHelper.EntityColumn)",Method,"""","""","com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getBEFORE() com.github.abel533.mapper.Config+getBEFORE() com.github.abel533.mapper.EntityHelper.EntityColumn+getGenerator() com.github.abel533.mapper.EntityHelper.EntityColumn+getGenerator() java.lang.String+equals(Object) com.github.abel533.mapper.EntityHelper.EntityColumn+getGenerator() com.github.abel533.mapper.EntityHelper.EntityColumn+getGenerator() java.lang.String+equals(Object) com.github.abel533.mapper.Config+getIDENTITY() com.github.abel533.mapper.Config+getIDENTITY() com.github.abel533.mapper.EntityHelper.EntityColumn+getGenerator() com.github.abel533.mapper.EntityHelper.EntityColumn+getGenerator() java.lang.Object+Object() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.util.ArrayList+ArrayList() java.lang.Object+Object() java.util.ArrayList+ArrayList() java.lang.Object+Object() java.util.ArrayList+ArrayList() java.lang.Object+Object() com.github.abel533.mapper.Config+forObject(Object) com.github.abel533.mapper.Config+forObject(Object)""","""",3117,68,28832,705,2,"/** 
 * Êñ∞Âª∫SelectKeyËäÇÁÇπ - Âè™ÂØπmysqlÁöÑËá™Âä®Â¢ûÈïøÊúâÊïàÔºåOracleÂ∫èÂàóÁõ¥Êé•ÂÜôÂà∞Âàó‰∏≠
 * @param ms
 * @param column
 */
","/**
     * Êñ∞Âª∫SelectKeyËäÇÁÇπ - Âè™ÂØπmysqlÁöÑËá™Âä®Â¢ûÈïøÊúâÊïàÔºåOracleÂ∫èÂàóÁõ¥Êé•ÂÜôÂà∞Âàó‰∏≠
     *
     * @param ms
     * @param column
     */
    private void newSelectKeyMappedStatement(MappedStatement ms, EntityHelper.EntityColumn column) {
        String keyId = ms.getId() + SelectKeyGenerator.SELECT_KEY_SUFFIX;
        if (ms.getConfiguration().hasKeyGenerator(keyId)) {
            return;
        }
        Class<?> entityClass = getSelectReturnType(ms);
        //defaults
        Configuration configuration = ms.getConfiguration();
        KeyGenerator keyGenerator = new NoKeyGenerator();
        Boolean executeBefore = getBEFORE();
        String IDENTITY = (column.getGenerator() == null || column.getGenerator().equals("""")) ? getIDENTITY() : column.getGenerator();
        SqlSource sqlSource = new RawSqlSource(configuration, IDENTITY, entityClass);

        MappedStatement.Builder statementBuilder = new MappedStatement.Builder(configuration, keyId, sqlSource, SqlCommandType.SELECT);
        statementBuilder.resource(ms.getResource());
        statementBuilder.fetchSize(null);
        statementBuilder.statementType(StatementType.STATEMENT);
        statementBuilder.keyGenerator(keyGenerator);
        statementBuilder.keyProperty(column.getProperty());
        statementBuilder.keyColumn(null);
        statementBuilder.databaseId(null);
        statementBuilder.lang(configuration.getDefaultScriptingLanuageInstance());
        statementBuilder.resultOrdered(false);
        statementBuilder.resulSets(null);
        statementBuilder.timeout(configuration.getDefaultStatementTimeout());

        List<ParameterMapping> parameterMappings = new ArrayList<ParameterMapping>();
        ParameterMap.Builder inlineParameterMapBuilder = new ParameterMap.Builder(
                configuration,
                statementBuilder.id() + ""-Inline"",
                entityClass,
                parameterMappings);
        statementBuilder.parameterMap(inlineParameterMapBuilder.build());

        List<ResultMap> resultMaps = new ArrayList<ResultMap>();
        ResultMap.Builder inlineResultMapBuilder = new ResultMap.Builder(
                configuration,
                statementBuilder.id() + ""-Inline"",
                int.class,
                new ArrayList<ResultMapping>(),
                null);
        resultMaps.add(inlineResultMapBuilder.build());
        statementBuilder.resultMaps(resultMaps);
        statementBuilder.resultSetType(null);

        statementBuilder.flushCacheRequired(false);
        statementBuilder.useCache(false);
        statementBuilder.cache(null);

        MappedStatement statement = statementBuilder.build();
        configuration.addMappedStatement(statement);

        MappedStatement keyStatement = configuration.getMappedStatement(keyId, false);
        configuration.addKeyGenerator(keyId, new SelectKeyGenerator(keyStatement, executeBefore));
        //keyGenerator
        try {
            MetaObject msObject = forObject(ms);
            msObject.setValue(""keyGenerator"", configuration.getKeyGenerator(keyId));
        } catch (Exception e) {
            //ignore
        }
    }",True,True
47,"cameHumpMap(Object,MappedStatement)",Method,"""","""","java.util.List+size() java.util.List+size() java.lang.Class+isAssignableFrom(Class) java.lang.Class+isAssignableFrom(Class) com.github.abel533.mapper.Config+processMap(Map) com.github.abel533.mapper.Config+processMap(Map) com.github.abel533.mapper.Config+processMap(Map,List<ResultMapping>) com.github.abel533.mapper.Config+processMap(Map,List<ResultMapping>)""","""",974,28,31955,774,1,"/** 
 * Â§ÑÁêÜKey‰∏∫È©ºÂ≥∞Âºè
 * @param result
 * @param ms
 */
","/**
     * Â§ÑÁêÜKey‰∏∫È©ºÂ≥∞Âºè
     *
     * @param result
     * @param ms
     */
    public void cameHumpMap(Object result, MappedStatement ms) {
        ResultMap resultMap = ms.getResultMaps().get(0);
        Class<?> type = resultMap.getType();
        //Âè™ÊúâÊúâËøîÂõûÂÄºÂπ∂‰∏îtypeÊòØMapÁöÑÊó∂ÂÄô,Ëøò‰∏çËÉΩÊòØÂµåÂ•óÂ§çÊùÇÁöÑresultMap,ÊâçÈúÄË¶ÅÁâπÊÆäÂ§ÑÁêÜ
        if (result instanceof List
                && ((List) result).size() > 0
                && Map.class.isAssignableFrom(type)
                && !resultMap.hasNestedQueries()
                && !resultMap.hasNestedResultMaps()) {
            List resultList = (List) result;
            //1.resultTypeÊó∂
            if (resultMap.getId().endsWith(""-Inline"")) {
                for (Object re : resultList) {
                    processMap((Map) re);
                }
            } else {//2.resultMapÊó∂
                for (Object re : resultList) {
                    processMap((Map) re, resultMap.getResultMappings());
                }
            }
        }
    }",False,False
48,processMap(Map),Method,"""","""","java.util.HashMap+HashMap() java.util.Set+iterator() java.util.Map+entrySet() java.util.Map+entrySet() java.util.Set+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.Map.Entry+getKey() java.util.Map.Entry+getKey() com.github.abel533.mapper.EntityHelper+underlineToCamelhump(String) com.github.abel533.mapper.EntityHelper+underlineToCamelhump(String) java.lang.String+toLowerCase() java.lang.String+toLowerCase() java.lang.String+equals(Object) java.lang.String+equals(Object) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map.Entry+getValue() java.util.Map.Entry+getValue() java.util.Iterator+remove() java.util.Iterator+remove() java.util.Map+putAll(Map) java.util.Map+putAll(Map)""","""",623,19,32935,802,2,"/** 
 * Â§ÑÁêÜÁÆÄÂçïÂØπË±°
 * @param map
 */
","/**
     * Â§ÑÁêÜÁÆÄÂçïÂØπË±°
     *
     * @param map
     */
    private void processMap(Map map) {
        Map cameHumpMap = new HashMap();
        Iterator<Map.Entry> iterator = map.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry entry = iterator.next();
            String key = (String) entry.getKey();
            String cameHumpKey = EntityHelper.underlineToCamelhump(key.toLowerCase());
            if (!key.equals(cameHumpKey)) {
                cameHumpMap.put(cameHumpKey, entry.getValue());
                iterator.remove();
            }
        }
        map.putAll(cameHumpMap);
    }",False,False
49,"processMap(Map,List<ResultMapping>)",Method,"""","""","com.github.abel533.mapper.Config+toPropertySet(List<ResultMapping>) com.github.abel533.mapper.Config+toPropertySet(List<ResultMapping>) java.util.HashMap+HashMap() java.util.Set+iterator() java.util.Map+entrySet() java.util.Map+entrySet() java.util.Set+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.Map.Entry+getKey() java.util.Map.Entry+getKey() java.util.Set+contains(Object) java.util.Set+contains(Object) com.github.abel533.mapper.EntityHelper+underlineToCamelhump(String) com.github.abel533.mapper.EntityHelper+underlineToCamelhump(String) java.lang.String+toLowerCase() java.lang.String+toLowerCase() java.lang.String+equals(Object) java.lang.String+equals(Object) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map.Entry+getValue() java.util.Map.Entry+getValue() java.util.Iterator+remove() java.util.Iterator+remove() java.util.Map+putAll(Map) java.util.Map+putAll(Map)""","""",842,24,33564,823,2,"/** 
 * ÈÖçÁΩÆËøáÁöÑÂ±ûÊÄß‰∏çÂÅö‰øÆÊîπ
 * @param map
 * @param resultMappings
 */
","/**
     * ÈÖçÁΩÆËøáÁöÑÂ±ûÊÄß‰∏çÂÅö‰øÆÊîπ
     *
     * @param map
     * @param resultMappings
     */
    private void processMap(Map map, List<ResultMapping> resultMappings) {
        Set<String> propertySet = toPropertySet(resultMappings);
        Map cameHumpMap = new HashMap();
        Iterator<Map.Entry> iterator = map.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry entry = iterator.next();
            String key = (String) entry.getKey();
            if (propertySet.contains(key)) {
                continue;
            }
            String cameHumpKey = EntityHelper.underlineToCamelhump(key.toLowerCase());
            if (!key.equals(cameHumpKey)) {
                cameHumpMap.put(cameHumpKey, entry.getValue());
                iterator.remove();
            }
        }
        map.putAll(cameHumpMap);
    }",False,False
50,toPropertySet(List<ResultMapping>),Method,"""","""","java.util.HashSet+HashSet() java.util.Set+add(E) java.util.Set+add(E)""","""",373,13,34412,848,2,"/** 
 * ÂàóÂ±ûÊÄßËΩ¨Set
 * @param resultMappings
 * @return
 */
","/**
     * ÂàóÂ±ûÊÄßËΩ¨Set
     *
     * @param resultMappings
     * @return
     */
    private Set<String> toPropertySet(List<ResultMapping> resultMappings) {
        Set<String> propertySet = new HashSet<String>();
        for (ResultMapping resultMapping : resultMappings) {
            propertySet.add(resultMapping.getProperty());
        }
        return propertySet;
    }",False,False
