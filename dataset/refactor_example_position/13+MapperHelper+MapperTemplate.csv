index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,IdentityDialect,Field,,,,,63,4,1,"/** 
 * IDENTITY
 */
","/**
     * IDENTITY
     */
    public enum IdentityDialect",False
2,identityRetrievalStatement,Field,IdentityDialect(String),,,,42,1,2,,private String identityRetrievalStatement;,False
3,IdentityDialect(String),Method,,,,com.github.abel533.mapper.MapperHelper+identityRetrievalStatement com.github.abel533.mapper.MapperHelper+identityRetrievalStatement,144,3,2,,"private IdentityDialect(String identityRetrievalStatement) {
            this.identityRetrievalStatement = identityRetrievalStatement;
        }",False
4,getIdentityRetrievalStatement(),Method,,,,com.github.abel533.mapper.MapperHelper+identityRetrievalStatement,104,3,1,,"public String getIdentityRetrievalStatement() {
            return identityRetrievalStatement;
        }",False
5,getDatabaseDialect(String),Method,,,java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String),,1072,23,9,,"public static IdentityDialect getDatabaseDialect(String database) {
            IdentityDialect returnValue = null;
            if (""DB2"".equalsIgnoreCase(database)) {
                returnValue = DB2;
            } else if (""MySQL"".equalsIgnoreCase(database)) {
                returnValue = MYSQL;
            } else if (""SqlServer"".equalsIgnoreCase(database)) {
                returnValue = SQLSERVER;
            } else if (""Cloudscape"".equalsIgnoreCase(database)) {
                returnValue = CLOUDSCAPE;
            } else if (""Derby"".equalsIgnoreCase(database)) {
                returnValue = DERBY;
            } else if (""HSQLDB"".equalsIgnoreCase(database)) {
                returnValue = HSQLDB;
            } else if (""SYBASE"".equalsIgnoreCase(database)) {
                returnValue = SYBASE;
            } else if (""DB2_MF"".equalsIgnoreCase(database)) {
                returnValue = DB2_MF;
            } else if (""Informix"".equalsIgnoreCase(database)) {
                returnValue = INFORMIX;
            }
            return returnValue;
        }",False
6,UUID,Field,,,,,25,1,2,,"private String UUID = """";",False
7,IDENTITY,Field,,,,,29,1,2,,"private String IDENTITY = """";",False
8,BEFORE,Field,,,,,31,1,2,,private boolean BEFORE = false;,False
9,cameHumpMap,Field,,,,,36,1,2,,private boolean cameHumpMap = false;,False
10,config,Field,,,,,37,1,2,,private Config config = new Config();,False
11,setUUID(String),Method,,,,com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+UUID,68,3,1,,"public void setUUID(String UUID) {
        config.UUID = UUID;
    }",False
12,setIDENTITY(String),Method,,,,com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+IDENTITY com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+IDENTITY,321,8,1,,"public void setIDENTITY(String IDENTITY) {
        IdentityDialect identityDialect = IdentityDialect.getDatabaseDialect(IDENTITY);
        if (identityDialect != null) {
            config.IDENTITY = identityDialect.getIdentityRetrievalStatement();
        } else {
            config.IDENTITY = IDENTITY;
        }
    }",False
13,setBEFORE(String),Method,,,java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String),com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+BEFORE,103,3,1,,"public void setBEFORE(String BEFORE) {
        config.BEFORE = ""BEFORE"".equalsIgnoreCase(BEFORE);
    }",False
14,setCameHumpMap(String),Method,,,java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String),com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+cameHumpMap,121,3,1,,"public void setCameHumpMap(String cameHumpMap) {
        config.cameHumpMap = ""TRUE"".equalsIgnoreCase(cameHumpMap);
    }",False
15,getUUID(),Method,,,java.lang.String+length() java.lang.String+length(),com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+UUID com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+UUID com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+UUID,216,6,2,,"private String getUUID() {
        if (config.UUID != null && config.UUID.length() > 0) {
            return config.UUID;
        }
        return ""@java.util.UUID@randomUUID().toString().replace(\""-\"", \""\"")"";
    }",False
16,getIDENTITY(),Method,,,java.lang.String+length() java.lang.String+length(),com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+IDENTITY com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+IDENTITY com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+IDENTITY,245,7,2,,"private String getIDENTITY() {
        if (config.IDENTITY != null && config.IDENTITY.length() > 0) {
            return config.IDENTITY;
        }
        //‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚Äö√¢‚Ä†‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö‚â§‚âà√¨‚àö√ëmysql‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö‚Ä†¬¨¬®‚Äö√ë¬¢‚Äö√†√∂‚Äö√¢¬ß‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö√∫¬¨¬®‚àö√º‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö√´¬¨¬®‚Äö√†¬¥
        return IdentityDialect.MYSQL.getIdentityRetrievalStatement();
    }",False
17,getBEFORE(),Method,,,,com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+BEFORE,65,3,2,,"private boolean getBEFORE() {
        return config.BEFORE;
    }",False
18,isCameHumpMap(),Method,,,,com.github.abel533.mapper.Config+config com.github.abel533.mapper.Config+cameHumpMap,73,3,1,,"public boolean isCameHumpMap() {
        return config.cameHumpMap;
    }",False
19,DYNAMIC_SQL,Field,,,,,54,1,25,,"public static final String DYNAMIC_SQL = ""dynamicSQL"";",True
20,msIdSkip,Field,,,,,109,4,18,"/** 
 * 
 */
","/**
     * 
     */
    private final Map<String, Boolean> msIdSkip = new HashMap<String, Boolean>();",True
21,entityType,Field,,,,,112,4,18,"/** 
 * 
 */
","/**
     * 
     */
    private final Map<String, Class<?>> entityType = new HashMap<String, Class<?>>();",True
22,METHODS,Field,,,,,336,13,17,"/** 
 * 
 */
","/**
     * 
     */
    public final String[] METHODS = {
            ""select"",
            ""selectByPrimaryKey"",
            ""selectCount"",
            ""insert"",
            ""insertSelective"",
            ""delete"",
            ""deleteByPrimaryKey"",
            ""updateByPrimaryKey"",
            ""updateByPrimaryKeySelective""};",True
23,dynamicSQL(Object),Method,,,,com.github.abel533.mapper.Config+DYNAMIC_SQL,75,3,1,,"public String dynamicSQL(Object record) {
        return DYNAMIC_SQL;
    }",True
24,DEFAULT_OBJECT_FACTORY,Field,,,,,87,1,26,,private static final ObjectFactory DEFAULT_OBJECT_FACTORY = new DefaultObjectFactory();,True
25,DEFAULT_OBJECT_WRAPPER_FACTORY,Field,,,,,109,1,26,,private static final ObjectWrapperFactory DEFAULT_OBJECT_WRAPPER_FACTORY = new DefaultObjectWrapperFactory();,True
26,forObject(Object),Method,,,,com.github.abel533.mapper.Config+DEFAULT_OBJECT_FACTORY com.github.abel533.mapper.Config+DEFAULT_OBJECT_WRAPPER_FACTORY,251,9,9,"/** 
 *  * @param object 
 * @return
 */
","/**
     *      *
     * @param object 
     * @return
     */
    public static MetaObject forObject(Object object) {
        return MetaObject.forObject(object, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY);
    }",True
27,getMapperClass(String),Method,,,"java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+lastIndexOf(String) java.lang.String+lastIndexOf(String) java.lang.Class+forName(String) java.lang.Class+forName(String)",,315,11,1,"/** 
 * 
 * @param msId
 * @return
 * @throws ClassNotFoundException
 */
","/**
     * 
     *
     * @param msId
     * @return
     * @throws ClassNotFoundException
     */
    public Class<?> getMapperClass(String msId) throws ClassNotFoundException {
        String mapperClassStr = msId.substring(0, msId.lastIndexOf("".""));
        return Class.forName(mapperClassStr);
    }",True
28,extendsMapper(Class),Method,,,java.lang.Class+isAssignableFrom(Class) java.lang.Class+isAssignableFrom(Class),,201,9,1,"/** 
 * 
 * @param mapperClass
 * @return
 */
","/**
     * 
     *
     * @param mapperClass
     * @return
     */
    public boolean extendsMapper(Class mapperClass) {
        return Mapper.class.isAssignableFrom(mapperClass);
    }",True
29,isMapperMethod(String),Method,,,"java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+lastIndexOf(String) java.lang.String+lastIndexOf(String) java.lang.String+equals(Object) java.lang.String+equals(Object) com.github.abel533.mapper.Config+extendsMapper(Class) com.github.abel533.mapper.Config+extendsMapper(Class) com.github.abel533.mapper.Config+getMapperClass(String) com.github.abel533.mapper.Config+getMapperClass(String) java.util.Map+put(K,V) java.util.Map+put(K,V)",com.github.abel533.mapper.Config+msIdSkip com.github.abel533.mapper.Config+msIdSkip com.github.abel533.mapper.Config+METHODS com.github.abel533.mapper.Config+msIdSkip,829,29,1,"/** 
 * 
 * @param msId
 * @return
 */
","/**
     *      *
     * @param msId
     * @return
     */
    public boolean isMapperMethod(String msId) {
        if (msIdSkip.get(msId) != null) {
            return msIdSkip.get(msId);
        }
        try {
            String methodName = msId.substring(msId.lastIndexOf(""."") + 1);
            boolean rightMethod = false;
            for (String method : METHODS) {
                if (method.equals(methodName)) {
                    rightMethod = true;
                    break;
                }
            }
            if (!rightMethod) {
                return false;
            }
            Boolean skip = extendsMapper(getMapperClass(msId));
            msIdSkip.put(msId, skip);
            return skip;
        } catch (ClassNotFoundException e) {
            return false;
        }
    }",True
30,getSelectReturnType(MappedStatement),Method,,,"java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) com.github.abel533.mapper.Config+getMapperClass(String) com.github.abel533.mapper.Config+getMapperClass(String) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.lang.RuntimeException+RuntimeException(String) java.lang.Class+getGenericInterfaces() java.lang.Class+getGenericInterfaces() java.lang.reflect.ParameterizedType+getRawType() java.lang.reflect.ParameterizedType+getRawType() java.lang.reflect.ParameterizedType+getActualTypeArguments() java.lang.reflect.ParameterizedType+getActualTypeArguments() java.util.Map+put(K,V) java.util.Map+put(K,V) java.lang.RuntimeException+RuntimeException(String)",com.github.abel533.mapper.Config+entityType com.github.abel533.mapper.Config+entityType com.github.abel533.mapper.Config+entityType,1060,31,1,"/** 
 * ‚Äö√†√∂‚àö¬£‚Äö√†√∂¬¨¬©‚Äö√Ñ√∂‚àö‚Ä†‚àö¬¥‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√†√∂¬¨¬±‚Äö√†√∂‚àö¬£‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√ú‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨¬µ‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö√´¬¨¬®‚Äö√†¬¥‚Äö√†√∂‚àö√ñ¬¨¬®¬¨¬±¬¨¬®‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂?
 * @param ms
 * @return
 */
","/**
     * ‚Äö√†√∂‚àö¬£‚Äö√†√∂¬¨¬©‚Äö√Ñ√∂‚àö‚Ä†‚àö¬¥‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√†√∂¬¨¬±‚Äö√†√∂‚àö¬£‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√ú‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨¬µ‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö√´¬¨¬®‚Äö√†¬¥‚Äö√†√∂‚àö√ñ¬¨¬®¬¨¬±¬¨¬®‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂?
     *
     * @param ms
     * @return
     */
    public Class<?> getSelectReturnType(MappedStatement ms) {
        String msId = ms.getId();
        if (entityType.get(msId) != null) {
            return entityType.get(msId);
        }
        Class<?> mapperClass = null;
        try {
            mapperClass = getMapperClass(msId);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            throw new RuntimeException(""‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö¬ß‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ¬¢‚Äö√†√∂‚àö√≤‚Äö√†√∂‚àö¬£‚Äö√†√∂¬¨¬©‚Äö√Ñ√∂‚àö‚Ä†‚àö¬¥‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√†√∂¬¨¬±Mapper‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬©‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü¬¨¬®¬¨¬£‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√†√∂‚Äö√†√®¬¨¬®‚Äö√†√ª‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√±‚Äö√†√∂?"" + msId);
        }
        Type[] types = mapperClass.getGenericInterfaces();
        for (Type type : types) {
            if (type instanceof ParameterizedType) {
                ParameterizedType t = (ParameterizedType) type;
                if (t.getRawType() == Mapper.class) {
                    Class<?> returnType = (Class) t.getActualTypeArguments()[0];
                    entityType.put(msId, returnType);
                    return returnType;
                }
            }
        }
        throw new RuntimeException(""‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö¬ß‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ¬¢‚Äö√†√∂‚àö√≤‚Äö√†√∂‚àö¬£‚Äö√†√∂¬¨¬©‚Äö√Ñ√∂‚àö‚Ä†‚àö¬¥‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√†√∂¬¨¬±Mapper<T>‚Äö√†√∂‚àö¬ß‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ¬¢‚Äö√†√∂¬¨¬µ‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂¬¨¬£‚Äö√†√∂‚àö√ñ¬¨¬®¬¨¬±¬¨¬®‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂?"" + msId);
    }",True
31,getMethodName(MappedStatement),Method,,,java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+lastIndexOf(String) java.lang.String+lastIndexOf(String),,147,4,1,,"public String getMethodName(MappedStatement ms) {
        String msId = ms.getId();
        return msId.substring(msId.lastIndexOf(""."") + 1);
    }",True
32,"setSqlSource(MappedStatement,SqlSource)",Method,,,com.github.abel533.mapper.Config+forObject(Object) com.github.abel533.mapper.Config+forObject(Object),,255,10,2,"/** 
 * ‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂¬¨‚àû‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬±‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö√∫‚Äö√†√∂¬¨‚àÇ‚Äö√†√∂‚àö√ñ‚âà√≠¬¨¬©‚Äö√†√∂‚àö√∫SqlSource
 * @param ms
 * @param sqlSource
 */
","/**
     * ‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂¬¨‚àû‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬±‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö√∫‚Äö√†√∂¬¨‚àÇ‚Äö√†√∂‚àö√ñ‚âà√≠¬¨¬©‚Äö√†√∂‚àö√∫SqlSource
     *
     * @param ms
     * @param sqlSource
     */
    private void setSqlSource(MappedStatement ms, SqlSource sqlSource) {
        MetaObject msObject = forObject(ms);
        msObject.setValue(""sqlSource"", sqlSource);
    }",True
33,selectSqlSource(MappedStatement),Method,,,"com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.Object+Object() com.github.abel533.mapper.Config+getSelectSqlNode(MappedStatement) com.github.abel533.mapper.Config+getSelectSqlNode(MappedStatement) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) java.lang.String+equals(Object) java.lang.String+equals(Object) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.EntityHelper+getSelectColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getSelectColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getPrimaryKeyWhere(Class<?>) com.github.abel533.mapper.EntityHelper+getPrimaryKeyWhere(Class<?>) java.lang.Object+Object() com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) java.lang.Object+Object() com.github.abel533.mapper.Config+getSelectCountSqlNode(MappedStatement) com.github.abel533.mapper.Config+getSelectCountSqlNode(MappedStatement) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object)",com.github.abel533.mapper.Config+METHODS com.github.abel533.mapper.Config+METHODS com.github.abel533.mapper.Config+METHODS com.github.abel533.mapper.Config+METHODS,1428,30,1,"/** 
 * ‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√ú‚âà√¨‚àö√ëselect‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨‚à´‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§¬¨¬®¬¨¬¢‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥SqlSource
 * @param ms
 */
","/**
     * ‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√ú‚âà√¨‚àö√ëselect‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨‚à´‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§¬¨¬®¬¨¬¢‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥SqlSource
     *
     * @param ms
     */
    public void selectSqlSource(MappedStatement ms) {
        String methodName = getMethodName(ms);
        Class<?> entityClass = getSelectReturnType(ms);
        //‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±sql
        if (methodName.equals(METHODS[0])) {
            DynamicSqlSource dynamicSqlSource = new DynamicSqlSource(ms.getConfiguration(), getSelectSqlNode(ms));
            setSqlSource(ms, dynamicSqlSource);
        } else if (methodName.equals(METHODS[1])) {//‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂≈ì√Ñ‚Äö√†√∂¬¨‚Ä¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±sql
            List<ParameterMapping> parameterMappings = getPrimaryKeyParameterMappings(ms);
            BEGIN();
            SELECT(EntityHelper.getSelectColumns(entityClass));
            FROM(EntityHelper.getTableName(entityClass));
            WHERE(EntityHelper.getPrimaryKeyWhere(entityClass));
            StaticSqlSource sqlSource = new StaticSqlSource(ms.getConfiguration(), SQL(), parameterMappings);
            setSqlSource(ms, sqlSource);
        } else {
            DynamicSqlSource dynamicSqlSource = new DynamicSqlSource(ms.getConfiguration(), getSelectCountSqlNode(ms));
            setSqlSource(ms, dynamicSqlSource);
        }
        if (methodName.equals(METHODS[0]) || methodName.equals(METHODS[1])) {
            ResultMap resultMap = ms.getResultMaps().get(0);
            MetaObject metaObject = MapperHelper.forObject(resultMap);
            metaObject.setValue(""type"", entityClass);
        }
    }",True
34,insertSqlSource(MappedStatement),Method,,,"com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.Object+Object() com.github.abel533.mapper.Config+getInsertSqlNode(MappedStatement) com.github.abel533.mapper.Config+getInsertSqlNode(MappedStatement) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) java.lang.Object+Object() com.github.abel533.mapper.Config+getInsertAllSqlNode(MappedStatement) com.github.abel533.mapper.Config+getInsertAllSqlNode(MappedStatement) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource)",com.github.abel533.mapper.Config+METHODS,690,18,1,"/** 
 * ‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√ú‚âà√¨‚àö√ëinsert‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨√Ü‚Äö√†√∂‚Äö√¢‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö¬±‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥SqlSource
 * @param ms
 */
","/**
     * ‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√ú‚âà√¨‚àö√ëinsert‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨√Ü‚Äö√†√∂‚Äö√¢‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö¬±‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥SqlSource
     *
     * @param ms
     */
    public void insertSqlSource(MappedStatement ms) {
        String methodName = getMethodName(ms);
        Class<?> entityClass = getSelectReturnType(ms);
        //‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±sql
        if (methodName.equals(METHODS[4])) {
            DynamicSqlSource dynamicSqlSource = new DynamicSqlSource(ms.getConfiguration(), getInsertSqlNode(ms));
            setSqlSource(ms, dynamicSqlSource);
        } else {//‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂≈ì√Ñ‚Äö√†√∂¬¨‚Ä¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±sql
            //‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú¬¨¬®¬¨¬±‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•‚Äö√†√∂¬¨¬©‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö¬£¬¨¬®‚Äö√†√á‚Äö√†√∂‚àö√±selectKey‚Äö√†√∂‚àö√Ü¬¨¬®‚Äö√†¬¥‚Äö√†√∂‚Äö√Ñ¬¢‚Äö√†√∂‚àö¬£‚Äö√†√∂‚Äö√†√®‚Äö√†√∂¬¨‚Ä¢‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂¬¨‚àû‚Äö√†√∂‚Äö√Ñ¬¢‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚âà√¨‚àö√ë‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬£¬¨¬®‚Äö√†√á‚Äö√†√∂‚àö√±‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√ú‚âà√¨‚àö√ë‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±sql
            DynamicSqlSource dynamicSqlSource = new DynamicSqlSource(ms.getConfiguration(), getInsertAllSqlNode(ms));
            setSqlSource(ms, dynamicSqlSource);
        }
    }",True
35,updateSqlSource(MappedStatement),Method,,,"com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.Object+Object() com.github.abel533.mapper.Config+getUpdateSqlNode(MappedStatement) com.github.abel533.mapper.Config+getUpdateSqlNode(MappedStatement) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+getColumnParameterMappings(MappedStatement) com.github.abel533.mapper.Config+getColumnParameterMappings(MappedStatement) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper+getPrimaryKeyWhere(Class<?>) com.github.abel533.mapper.EntityHelper+getPrimaryKeyWhere(Class<?>) java.lang.Object+Object() com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource)",com.github.abel533.mapper.Config+METHODS,1221,27,1,"/** 
 * ‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√ú‚âà√¨‚àö√ëupdate‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬µ¬¨¬®‚Äö√Ñ¬¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬±‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥SqlSource
 * @param ms
 */
","/**
     * ‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√ú‚âà√¨‚àö√ëupdate‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬µ¬¨¬®‚Äö√Ñ¬¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬±‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥SqlSource
     *
     * @param ms
     */
    public void updateSqlSource(MappedStatement ms) {
        String methodName = getMethodName(ms);
        Class<?> entityClass = getSelectReturnType(ms);
        //‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±sql
        if (methodName.equals(METHODS[8])) {
            DynamicSqlSource dynamicSqlSource = new DynamicSqlSource(ms.getConfiguration(), getUpdateSqlNode(ms));
            setSqlSource(ms, dynamicSqlSource);
        } else {//‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂≈ì√Ñ‚Äö√†√∂¬¨‚Ä¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±sql - updateByPrimaryKey
            //‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√¢¬ß‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö¬£¬¨¬®‚Äö√†√á‚Äö√†√∂‚àö√±‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ¬¢‚Äö√†√∂‚àö¬±‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√ë¬¢¬¨¬®¬¨‚Ä¢set=?‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√¢‚Ä†‚Äö√†√∂‚Äö√Ñ¬¢where=?
            List<ParameterMapping> parameterMappings = getColumnParameterMappings(ms);
            parameterMappings.addAll(getPrimaryKeyParameterMappings(ms));
            BEGIN();
            UPDATE(EntityHelper.getTableName(entityClass));
            List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
            for (EntityHelper.EntityColumn column : columnList) {
                SET(column.getColumn() + "" = ?"");
            }
            WHERE(EntityHelper.getPrimaryKeyWhere(entityClass));
            StaticSqlSource sqlSource = new StaticSqlSource(ms.getConfiguration(), SQL(), parameterMappings);
            setSqlSource(ms, sqlSource);
        }
    }",True
36,deleteSqlSource(MappedStatement),Method,,,"com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.Object+Object() com.github.abel533.mapper.Config+getDeleteSqlNode(MappedStatement) com.github.abel533.mapper.Config+getDeleteSqlNode(MappedStatement) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getPrimaryKeyWhere(Class<?>) com.github.abel533.mapper.EntityHelper+getPrimaryKeyWhere(Class<?>) java.lang.Object+Object() com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource) com.github.abel533.mapper.Config+setSqlSource(MappedStatement,SqlSource)",com.github.abel533.mapper.Config+METHODS,873,21,1,"/** 
 * ‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√ú‚âà√¨‚àö√ëdelete‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂¬¨‚Ä¢¬¨¬®‚àö√º‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥SqlSource
 * @param ms
 */
","/**
     * ‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√ú‚âà√¨‚àö√ëdelete‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂¬¨‚Ä¢¬¨¬®‚àö√º‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥SqlSource
     *
     * @param ms
     */
    public void deleteSqlSource(MappedStatement ms) {
        String methodName = getMethodName(ms);
        Class<?> entityClass = getSelectReturnType(ms);
        //‚Äö√†√∂‚àö√°¬¨¬®¬¨¬¢‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†delete
        if (methodName.equals(METHODS[5])) {
            DynamicSqlSource dynamicSqlSource = new DynamicSqlSource(ms.getConfiguration(), getDeleteSqlNode(ms));
            setSqlSource(ms, dynamicSqlSource);
        } else {
            List<ParameterMapping> parameterMappings = getPrimaryKeyParameterMappings(ms);
            BEGIN();
            DELETE_FROM(EntityHelper.getTableName(entityClass));
            WHERE(EntityHelper.getPrimaryKeyWhere(entityClass));
            StaticSqlSource sqlSource = new StaticSqlSource(ms.getConfiguration(), SQL(), parameterMappings);
            setSqlSource(ms, sqlSource);
        }
    }",True
37,getPrimaryKeyParameterMappings(MappedStatement),Method,,,com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.EntityHelper+getPKColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getPKColumns(Class<?>) java.util.ArrayList+ArrayList() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getJavaType() com.github.abel533.mapper.EntityHelper.EntityColumn+getJavaType(),,749,17,2,"/** 
 * ‚Äö√†√∂‚àö¬ß‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚âà√¨‚àö√ë‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö‚â§‚âà√¨‚àö√ë‚Äö√†√∂‚àö¬£¬¨¬®¬¨¬±¬¨¬®‚Äö√†√ª‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ¬¨¬®‚Äö√ë¬¢‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚àö√ú‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√¢¬ß‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö¬¥
 * @param ms
 * @return
 */
","/**
     * ‚Äö√†√∂‚àö¬ß‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚âà√¨‚àö√ë‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö‚â§‚âà√¨‚àö√ë‚Äö√†√∂‚àö¬£¬¨¬®¬¨¬±¬¨¬®‚Äö√†√ª‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ¬¨¬®‚Äö√ë¬¢‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚àö√ú‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√¢¬ß‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö¬¥
     *
     * @param ms
     * @return
     */
    private List<ParameterMapping> getPrimaryKeyParameterMappings(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<EntityHelper.EntityColumn> entityColumns = EntityHelper.getPKColumns(entityClass);
        List<ParameterMapping> parameterMappings = new ArrayList<ParameterMapping>();
        for (EntityHelper.EntityColumn column : entityColumns) {
            ParameterMapping.Builder builder = new ParameterMapping.Builder(ms.getConfiguration(), column.getProperty(), column.getJavaType());
            builder.mode(ParameterMode.IN);
            parameterMappings.add(builder.build());
        }
        return parameterMappings;
    }",True
38,getColumnParameterMappings(MappedStatement),Method,,,com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) java.util.ArrayList+ArrayList() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getJavaType() com.github.abel533.mapper.EntityHelper.EntityColumn+getJavaType(),,745,17,2,"/** 
 * ‚Äö√†√∂‚àö¬ß‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚âà√¨‚àö√ë‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö‚â§‚âà√¨‚àö√ë‚Äö√†√∂‚àö¬£¬¨¬®¬¨¬±¬¨¬®‚Äö√†√ª‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬¢‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√¢¬ß‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö¬¥
 * @param ms
 * @return
 */
","/**
     * ‚Äö√†√∂‚àö¬ß‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚âà√¨‚àö√ë‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö‚â§‚âà√¨‚àö√ë‚Äö√†√∂‚àö¬£¬¨¬®¬¨¬±¬¨¬®‚Äö√†√ª‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬¢‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√¢¬ß‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö¬¥
     *
     * @param ms
     * @return
     */
    private List<ParameterMapping> getColumnParameterMappings(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<EntityHelper.EntityColumn> entityColumns = EntityHelper.getColumns(entityClass);
        List<ParameterMapping> parameterMappings = new ArrayList<ParameterMapping>();
        for (EntityHelper.EntityColumn column : entityColumns) {
            ParameterMapping.Builder builder = new ParameterMapping.Builder(ms.getConfiguration(), column.getProperty(), column.getJavaType());
            builder.mode(ParameterMode.IN);
            parameterMappings.add(builder.build());
        }
        return parameterMappings;
    }",True
39,getSelectSqlNode(MappedStatement),Method,,,com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper+getSelectColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getSelectColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.lang.Object+Object(),,1190,26,2,"/** 
 * ‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±select‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√ë?
 * @param ms
 * @return
 */
","/**
     * ‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±select‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√ë?
     *
     * @param ms
     * @return
     */
    private MixedSqlNode getSelectSqlNode(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
        //select column ... from table
        sqlNodes.add(new StaticTextSqlNode(""SELECT ""
                + EntityHelper.getSelectColumns(entityClass)
                + "" FROM ""
                + EntityHelper.getTableName(entityClass)));
        List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
        List<SqlNode> ifNodes = new ArrayList<SqlNode>();
        boolean first = true;
        for (EntityHelper.EntityColumn column : columnList) {
            StaticTextSqlNode columnNode = new StaticTextSqlNode((first ? """" : "" AND "") + column.getColumn() + "" = #{"" + column.getProperty() + ""} "");
            IfSqlNode ifSqlNode = new IfSqlNode(columnNode, column.getProperty() + "" != null "");
            ifNodes.add(ifSqlNode);
            first = false;
        }
        sqlNodes.add(new WhereSqlNode(ms.getConfiguration(), new MixedSqlNode(ifNodes)));
        return new MixedSqlNode(sqlNodes);
    }",True
40,getSelectCountSqlNode(MappedStatement),Method,,,com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.lang.Object+Object(),,1121,24,2,"/** 
 * ‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±select‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√ë?
 * @param ms
 * @return
 */
","/**
     * ‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±select‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√ë?
     *
     * @param ms
     * @return
     */
    private MixedSqlNode getSelectCountSqlNode(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
        //select column ... from table
        sqlNodes.add(new StaticTextSqlNode(""SELECT COUNT(*) FROM ""
                + EntityHelper.getTableName(entityClass)));
        List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
        List<SqlNode> ifNodes = new ArrayList<SqlNode>();
        boolean first = true;
        for (EntityHelper.EntityColumn column : columnList) {
            StaticTextSqlNode columnNode = new StaticTextSqlNode((first ? """" : "" AND "") + column.getColumn() + "" = #{"" + column.getProperty() + ""} "");
            IfSqlNode ifSqlNode = new IfSqlNode(columnNode, column.getProperty() + "" != null "");
            ifNodes.add(ifSqlNode);
            first = false;
        }
        sqlNodes.add(new WhereSqlNode(ms.getConfiguration(), new MixedSqlNode(ifNodes)));
        return new MixedSqlNode(sqlNodes);
    }",True
41,getInsertSqlNode(MappedStatement),Method,,,"com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() java.lang.RuntimeException+RuntimeException(String) java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName() com.github.abel533.mapper.Config+newSelectKeyMappedStatement(MappedStatement,EntityColumn) com.github.abel533.mapper.Config+newSelectKeyMappedStatement(MappedStatement,EntityColumn) com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.Config+getUUID() com.github.abel533.mapper.Config+getUUID() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.lang.Object+Object()",,3259,57,2,"/** 
 * ‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±insert‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√ë?
 * @param ms
 * @return
 */
","/**
     * ‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±insert‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√ë?
     *
     * @param ms
     * @return
     */
    private MixedSqlNode getInsertSqlNode(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
        sqlNodes.add(new StaticTextSqlNode(""INSERT INTO "" + EntityHelper.getTableName(entityClass)));

        List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
        List<SqlNode> ifNodes = new ArrayList<SqlNode>();
        Boolean hasIdentityKey = false;
        for (EntityHelper.EntityColumn column : columnList) {
            if (column.getSequenceName() != null && column.getSequenceName().length() > 0) {
                //‚Äö√†√∂‚àö√ñ‚Äö√†√∂¬¨¬µ¬¨¬®‚Äö√Ñ¬¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬©‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•‚Äö√†√∂¬¨√Ü‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü‚Äö√Ñ√∂‚àö√ë‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö¬£‚Äö√†√∂‚Äö√†√®‚Äö√†√∂¬¨¬µ‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨¬©¬¨¬®?
                ifNodes.add(new StaticTextSqlNode(column.getColumn() + "",""));
            } else if (column.isIdentity()) {
                if (hasIdentityKey) {
                    throw new RuntimeException(ms.getId() + ""‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö‚â§‚âà√¨‚àö√ë‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•‚Äö√†√∂‚àö√ú‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö√∫‚Äö√†√∂¬¨‚Ñ¢‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚âà√≠¬¨¬©‚Äö√†√∂¬¨¬Æ‚Äö√†√∂‚àö√ñ¬¨¬®¬¨¬±¬¨¬®? + entityClass.getCanonicalName() + """"‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ¬¢‚Äö√†√∂‚àö¬±‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√ë¬¢¬¨¬®¬¨‚Ä¢‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö√´¬¨¬¢MySql‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö¬£‚Äö√†√∂¬¨‚àû‚Äö√Ñ√∂‚àö√´¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö√°¬¨¬®¬¨¬¢‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚àö√≤‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂?‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√´¬¨¬¢‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö¬¢‚âà√≠¬¨¬©‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂¬¨¬¢‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√†√∂‚àö√´‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö√´?"""");",True
42,getInsertAllSqlNode(MappedStatement),Method,,,"com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() java.lang.RuntimeException+RuntimeException(String) java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName() com.github.abel533.mapper.Config+newSelectKeyMappedStatement(MappedStatement,EntityColumn) com.github.abel533.mapper.Config+newSelectKeyMappedStatement(MappedStatement,EntityColumn) com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.Config+getUUID() com.github.abel533.mapper.Config+getUUID() com.github.abel533.mapper.EntityHelper+getAllColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getAllColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() java.lang.String+length() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getSequenceName() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() com.github.abel533.mapper.EntityHelper.EntityColumn+isIdentity() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() com.github.abel533.mapper.EntityHelper.EntityColumn+isUuid() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.lang.Object+Object()",,2954,53,2,"/** 
 * ‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±insert‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√ë?
 * @param ms
 * @return
 */
","/**
     * ‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±insert‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√ë?
     *
     * @param ms
     * @return
     */
    private MixedSqlNode getInsertAllSqlNode(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
        sqlNodes.add(new StaticTextSqlNode(""INSERT INTO "" + EntityHelper.getTableName(entityClass)));

        List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
        Boolean hasIdentityKey = false;
        //‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö‚à´Key
        for (EntityHelper.EntityColumn column : columnList) {
            if (column.getSequenceName() != null && column.getSequenceName().length() > 0) {
            } else if (column.isIdentity()) {
                //‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö¬±‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂¬¨¬¢
                if (hasIdentityKey) {
                    throw new RuntimeException(ms.getId() + ""‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö‚â§‚âà√¨‚àö√ë‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•‚Äö√†√∂‚àö√ú‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö√∫‚Äö√†√∂¬¨‚Ñ¢‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚âà√≠¬¨¬©‚Äö√†√∂¬¨¬Æ‚Äö√†√∂‚àö√ñ¬¨¬®¬¨¬±¬¨¬®? + entityClass.getCanonicalName() + """"‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ¬¢‚Äö√†√∂‚àö¬±‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√ë¬¢¬¨¬®¬¨‚Ä¢‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö√´¬¨¬¢MySql‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö¬£‚Äö√†√∂¬¨‚àû‚Äö√Ñ√∂‚àö√´¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö√°¬¨¬®¬¨¬¢‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚àö√≤‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂?‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√´¬¨¬¢‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö¬¢‚âà√≠¬¨¬©‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂¬¨¬¢‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√†√∂‚àö√´‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö√´?"""");",True
43,getDeleteSqlNode(MappedStatement),Method,,,com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.lang.Object+Object(),,1007,21,2,"/** 
 * ‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±select‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√ë?
 * @param ms
 * @return
 */
","/**
     * ‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±select‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√ë?
     *
     * @param ms
     * @return
     */
    private MixedSqlNode getDeleteSqlNode(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
        sqlNodes.add(new StaticTextSqlNode(""DELETE FROM "" + EntityHelper.getTableName(entityClass)));
        List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
        List<SqlNode> ifNodes = new ArrayList<SqlNode>();
        boolean first = true;
        for (EntityHelper.EntityColumn column : columnList) {
            StaticTextSqlNode columnNode = new StaticTextSqlNode((first ? """" : "" AND "") + column.getColumn() + "" = #{"" + column.getProperty() + ""} "");
            ifNodes.add(new IfSqlNode(columnNode, column.getProperty() + "" != null ""));
            first = false;
        }
        sqlNodes.add(new WhereSqlNode(ms.getConfiguration(), new MixedSqlNode(ifNodes)));
        return new MixedSqlNode(sqlNodes);
    }",True
44,getUpdateSqlNode(MappedStatement),Method,,,com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getTableName(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper+getPKColumns(Class<?>) com.github.abel533.mapper.EntityHelper+getPKColumns(Class<?>) java.util.ArrayList+ArrayList() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getColumn() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.lang.Object+Object() java.lang.Object+Object() java.lang.Object+Object(),,1413,28,2,"/** 
 * ‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±select‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√ë?
 * @param ms
 * @return MixedSqlNode
 */
","/**
     * ‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚à´‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√±select‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√ë?
     *
     * @param ms
     * @return MixedSqlNode
     */
    private MixedSqlNode getUpdateSqlNode(MappedStatement ms) {
        Class<?> entityClass = getSelectReturnType(ms);
        List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
        sqlNodes.add(new StaticTextSqlNode(""UPDATE "" + EntityHelper.getTableName(entityClass)));
        List<EntityHelper.EntityColumn> columnList = EntityHelper.getColumns(entityClass);
        List<SqlNode> ifNodes = new ArrayList<SqlNode>();
        for (EntityHelper.EntityColumn column : columnList) {
            StaticTextSqlNode columnNode = new StaticTextSqlNode(column.getColumn() + "" = #{"" + column.getProperty() + ""}, "");
            ifNodes.add(new IfSqlNode(columnNode, column.getProperty() + "" != null ""));
        }
        sqlNodes.add(new SetSqlNode(ms.getConfiguration(), new MixedSqlNode(ifNodes)));

        columnList = EntityHelper.getPKColumns(entityClass);
        List<SqlNode> whereNodes = new ArrayList<SqlNode>();
        boolean first = true;
        for (EntityHelper.EntityColumn column : columnList) {
            whereNodes.add(new StaticTextSqlNode((first ? """" : "" AND "") + column.getColumn() + "" = #{"" + column.getProperty() + ""} ""));
            first = false;
        }
        sqlNodes.add(new WhereSqlNode(ms.getConfiguration(), new MixedSqlNode(whereNodes)));
        return new MixedSqlNode(sqlNodes);
    }",True
45,"processParameterObject(MappedStatement,Object[])",Method,,,"com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getMethodName(MappedStatement) com.github.abel533.mapper.Config+getMethodName(MappedStatement) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) com.github.abel533.mapper.Config+getPrimaryKeyParameterMappings(MappedStatement) java.util.HashMap+HashMap() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.StringBuilder+StringBuilder(String) java.lang.StringBuilder+append(Object) java.lang.StringBuilder+append(Object) java.lang.RuntimeException+RuntimeException(String) java.lang.StringBuilder+substring(int,int) java.lang.StringBuilder+substring(int,int) java.lang.StringBuilder+length() java.lang.StringBuilder+length() com.github.abel533.mapper.Config+forObject(Object) com.github.abel533.mapper.Config+forObject(Object) java.util.Map+put(K,V) java.util.Map+put(K,V) java.lang.RuntimeException+RuntimeException(String) java.lang.Class+isAssignableFrom(Class) java.lang.Class+isAssignableFrom(Class) java.lang.Object+getClass() java.lang.Object+getClass() java.lang.RuntimeException+RuntimeException(String) java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getCanonicalName()",com.github.abel533.mapper.Config+METHODS com.github.abel533.mapper.Config+METHODS,2392,47,1,"/** 
 * ‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö‚à´‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö¬±‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√†√∂?
 * @param ms
 * @param args
 */
","/**
     * ‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö‚à´‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö¬±‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√†√∂?
     *
     * @param ms
     * @param args
     */
    public void processParameterObject(MappedStatement ms, Object[] args) {
        Class<?> entityClass = getSelectReturnType(ms);
        String methodName = getMethodName(ms);
        Object parameterObject = args[1];
        //‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ¬¨¬®‚àö√º‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö√´¬¨¬¢‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬£‚Äö√†√∂‚Äö√†√®‚Äö√†√∂¬¨‚àûPK‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨‚à´‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§¬¨¬®¬¨¬¢‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬±‚âà√¨‚àö√ë‚Äö√†√∂‚àö¬ß‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ¬¢‚Äö√†√∂‚àö√≤‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√ú¬¨¬®‚àö√ú‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√†√∂¬¨¬£‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂≈ì√Ñ¬¨¬®¬¨¬¢‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬±‚âà√¨‚àö√ë‚Äö√†√∂‚àö¬ß‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ¬¢‚Äö√†√∂‚àö√≤‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö‚à´‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√†√∂‚àö¬∞‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√≤‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™
        if (methodName.equals(METHODS[1]) || methodName.equals(METHODS[6])) {
            TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();
            List<ParameterMapping> parameterMappings = getPrimaryKeyParameterMappings(ms);
            Map<String, Object> parameterMap = new HashMap<String, Object>();
            for (ParameterMapping parameterMapping : parameterMappings) {
                if (parameterMapping.getMode() != ParameterMode.OUT) {
                    Object value;
                    String propertyName = parameterMapping.getProperty();
                    if (parameterObject == null) {
                        value = null;
                    } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {
                        if (parameterMappings.size() > 1) {
                            StringBuilder propertyBuilder = new StringBuilder(""‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö¬±‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√†√∂‚àö¬∞‚Äö√†√∂‚àö√ñ¬¨¬®‚Äö√†¬¥‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂¬¨¬•‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö¬±‚Äö√†√∂‚àö¬£¬¨¬®‚Äö√†√á‚Äö√†√∂‚àö√±‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√°¬¨¬®¬¨¬±‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö¬∫‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚Ä¢‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√†√∂?‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√†√∂‚àö¬∞‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√≤‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö¬±‚Äö√†√∂‚àö‚Ä†¬¨¬®‚Äö√†√ª¬¨¬®‚Äö√ë¬¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨√Ü‚Äö√†√∂‚Äö√ë¬¢‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√†√∂¬¨‚àÇ‚Äö√†√∂¬¨¬µ‚Äö√†√∂‚àö√°¬¨¬®¬¨¬±‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂?"");
                            for (ParameterMapping mapping : parameterMappings) {
                                propertyBuilder.append(mapping.getProperty()).append("","");
                            }
                            throw new RuntimeException(propertyBuilder.substring(0, propertyBuilder.length() - 1));
                        }
                        value = parameterObject;
                    } else {
                        MetaObject metaObject = forObject(parameterObject);
                        value = metaObject.getValue(propertyName);
                    }
                    parameterMap.put(propertyName, value);
                }
            }
            args[1] = parameterMap;
        } else if (parameterObject == null) {
            throw new RuntimeException(""‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö¬±‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√†√∂‚àö¬∞‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö¬¢‚âà√≠¬¨¬©‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•‚Äö√†√∂‚àö√ñ¬¨¬®¬¨¬©‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•!"");
        } else if (!entityClass.isAssignableFrom(parameterObject.getClass())) {
            throw new RuntimeException(""‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö¬±‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√†√∂‚àö¬∞‚Äö√†√∂‚àö√ñ¬¨¬®¬¨¬±¬¨¬®‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂¬¨¬£‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚àö√ú‚Äö√†√∂¬¨‚Ä¢‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö‚â§‚Äö√†√∂‚àö‚â§‚Äö√†√∂‚àö√Ü¬¨¬®‚Äö√†¬¥‚Äö√†√∂‚Äö√Ñ¬¢‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö¬£¬¨¬®‚Äö√†√á‚Äö√†√∂‚àö√±‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√ñ¬¨¬®¬¨¬±¬¨¬®‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂¬¨¬£‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö‚Ä†?""
                    + entityClass.getCanonicalName()
                    + "",‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö√∫‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂¬¨‚Ä¢‚Äö√†√∂‚àö¬±‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö¬±‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√†√∂‚àö¬∞‚Äö√†√∂‚àö√ñ¬¨¬®¬¨¬±¬¨¬®‚Äö√ë¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂¬¨¬£‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö‚Ä†?""
                    + parameterObject.getClass().getCanonicalName());
        }
    }",True
46,"newSelectKeyMappedStatement(MappedStatement,EntityHelper.EntityColumn)",Method,,,com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getSelectReturnType(MappedStatement) com.github.abel533.mapper.Config+getBEFORE() com.github.abel533.mapper.Config+getBEFORE() com.github.abel533.mapper.EntityHelper.EntityColumn+getGenerator() com.github.abel533.mapper.EntityHelper.EntityColumn+getGenerator() java.lang.String+equals(Object) com.github.abel533.mapper.EntityHelper.EntityColumn+getGenerator() com.github.abel533.mapper.EntityHelper.EntityColumn+getGenerator() java.lang.String+equals(Object) com.github.abel533.mapper.Config+getIDENTITY() com.github.abel533.mapper.Config+getIDENTITY() com.github.abel533.mapper.EntityHelper.EntityColumn+getGenerator() com.github.abel533.mapper.EntityHelper.EntityColumn+getGenerator() java.lang.Object+Object() java.lang.Object+Object() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() com.github.abel533.mapper.EntityHelper.EntityColumn+getProperty() java.util.ArrayList+ArrayList() java.lang.Object+Object() java.util.ArrayList+ArrayList() java.lang.Object+Object() java.util.ArrayList+ArrayList() java.lang.Object+Object() com.github.abel533.mapper.Config+forObject(Object) com.github.abel533.mapper.Config+forObject(Object),,3117,68,2,"/** 
 * ‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬±‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö√°¬¨¬®‚Äö√ë¬¢‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•SelectKey‚Äö√†√∂‚àö¬£‚Äö√†√∂¬¨√ü‚Äö√†√∂‚àö¬∞‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö¬∞‚âà√¨‚àö√ë - ‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√´¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö‚â§‚âà√¨‚àö√ëmysql‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö¬£‚Äö√†√∂¬¨‚àû‚Äö√Ñ√∂‚àö√´¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö√°¬¨¬®¬¨¬¢‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚àö√≤‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂¬¨¬¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√≤‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√Ü¬¨¬®‚Äö√†¬¥‚Äö√†√∂‚Äö√Ñ¬¢Oracle‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•‚Äö√†√∂¬¨√Ü‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√†√∂‚àö√ñ‚Äö√†√∂¬¨¬µ¬¨¬®‚Äö√Ñ¬¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬©‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö‚à´‚Äö√†√∂¬¨‚Ä¢‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö¬¢?
 * @param ms
 * @param column
 */
","/**
     * ‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬±‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö√°¬¨¬®‚Äö√ë¬¢‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•SelectKey‚Äö√†√∂‚àö¬£‚Äö√†√∂¬¨√ü‚Äö√†√∂‚àö¬∞‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö¬∞‚âà√¨‚àö√ë - ‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√´¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö‚â§‚âà√¨‚àö√ëmysql‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö¬£‚Äö√†√∂¬¨‚àû‚Äö√Ñ√∂‚àö√´¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√ü¬¨¬®‚àö√ú‚Äö√†√∂‚àö√°¬¨¬®¬¨¬¢‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚àö√≤‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂¬¨¬¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√≤‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚àö√Ü¬¨¬®‚Äö√†¬¥‚Äö√†√∂‚Äö√Ñ¬¢Oracle‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•‚Äö√†√∂¬¨√Ü‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√†√∂‚àö√ñ‚Äö√†√∂¬¨¬µ¬¨¬®‚Äö√Ñ¬¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬©‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö‚à´‚Äö√†√∂¬¨‚Ä¢‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö¬¢?
     *
     * @param ms
     * @param column
     */
    private void newSelectKeyMappedStatement(MappedStatement ms, EntityHelper.EntityColumn column) {
        String keyId = ms.getId() + SelectKeyGenerator.SELECT_KEY_SUFFIX;
        if (ms.getConfiguration().hasKeyGenerator(keyId)) {
            return;
        }
        Class<?> entityClass = getSelectReturnType(ms);
        //defaults
        Configuration configuration = ms.getConfiguration();
        KeyGenerator keyGenerator = new NoKeyGenerator();
        Boolean executeBefore = getBEFORE();
        String IDENTITY = (column.getGenerator() == null || column.getGenerator().equals("""")) ? getIDENTITY() : column.getGenerator();
        SqlSource sqlSource = new RawSqlSource(configuration, IDENTITY, entityClass);

        MappedStatement.Builder statementBuilder = new MappedStatement.Builder(configuration, keyId, sqlSource, SqlCommandType.SELECT);
        statementBuilder.resource(ms.getResource());
        statementBuilder.fetchSize(null);
        statementBuilder.statementType(StatementType.STATEMENT);
        statementBuilder.keyGenerator(keyGenerator);
        statementBuilder.keyProperty(column.getProperty());
        statementBuilder.keyColumn(null);
        statementBuilder.databaseId(null);
        statementBuilder.lang(configuration.getDefaultScriptingLanuageInstance());
        statementBuilder.resultOrdered(false);
        statementBuilder.resulSets(null);
        statementBuilder.timeout(configuration.getDefaultStatementTimeout());

        List<ParameterMapping> parameterMappings = new ArrayList<ParameterMapping>();
        ParameterMap.Builder inlineParameterMapBuilder = new ParameterMap.Builder(
                configuration,
                statementBuilder.id() + ""-Inline"",
                entityClass,
                parameterMappings);
        statementBuilder.parameterMap(inlineParameterMapBuilder.build());

        List<ResultMap> resultMaps = new ArrayList<ResultMap>();
        ResultMap.Builder inlineResultMapBuilder = new ResultMap.Builder(
                configuration,
                statementBuilder.id() + ""-Inline"",
                int.class,
                new ArrayList<ResultMapping>(),
                null);
        resultMaps.add(inlineResultMapBuilder.build());
        statementBuilder.resultMaps(resultMaps);
        statementBuilder.resultSetType(null);

        statementBuilder.flushCacheRequired(false);
        statementBuilder.useCache(false);
        statementBuilder.cache(null);

        MappedStatement statement = statementBuilder.build();
        configuration.addMappedStatement(statement);

        MappedStatement keyStatement = configuration.getMappedStatement(keyId, false);
        configuration.addKeyGenerator(keyId, new SelectKeyGenerator(keyStatement, executeBefore));
        //keyGenerator
        try {
            MetaObject msObject = forObject(ms);
            msObject.setValue(""keyGenerator"", configuration.getKeyGenerator(keyId));
        } catch (Exception e) {
            //ignore
        }
    }",True
47,"cameHumpMap(Object,MappedStatement)",Method,,,"java.util.List+size() java.util.List+size() java.lang.Class+isAssignableFrom(Class) java.lang.Class+isAssignableFrom(Class) com.github.abel533.mapper.Config+processMap(Map) com.github.abel533.mapper.Config+processMap(Map) com.github.abel533.mapper.Config+processMap(Map,List<ResultMapping>) com.github.abel533.mapper.Config+processMap(Map,List<ResultMapping>)",,974,28,1,"/** 
 * ‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö‚à´Key‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•‚Äö√†√∂‚àö‚Ä†¬¨¬®¬¨¬©¬¨¬®‚Äö√†¬¥‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ¬¢‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö√°¬¨¬®‚Äö√†¬¥‚Äö√†√∂?
 * @param result
 * @param ms
 */
","/**
     * ‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö‚à´Key‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•‚Äö√†√∂‚àö‚Ä†¬¨¬®¬¨¬©¬¨¬®‚Äö√†¬¥‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö¬¢‚Äö√Ñ¬¢‚Äö√Ñ√∂‚àö‚Ä†‚àö¬™‚Äö√†√∂‚àö√°¬¨¬®‚Äö√†¬¥‚Äö√†√∂?
     *
     * @param result
     * @param ms
     */
    public void cameHumpMap(Object result, MappedStatement ms) {
        ResultMap resultMap = ms.getResultMaps().get(0);
        Class<?> type = resultMap.getType();
        //‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨√Ü‚Äö√Ñ√∂‚àö√´¬¨¬¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂¬¨¬¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂¬¨¬¢‚Äö√†√∂‚àö¬£‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√ú‚Äö√†√∂‚àö√°‚Äö√†√∂¬¨¬µ‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö√´¬¨¬®‚Äö√†¬¥‚Äö√†√∂‚àö√°‚âà√¨‚àö√ë‚Äö√Ñ√∂‚àö‚Ä†‚àö√°‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√†√∂‚àö√útype‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√¢¬ß‚Äö√†√∂‚àö‚â§Map‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√Ñ√∂‚àö‚Ä†‚àö√°‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö√´‚Äö√†√∂?‚Äö√†√∂‚àö¬£‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚Äö√¢¬ß‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö¬£‚Äö√†√∂‚àö¬¢‚âà√≠¬¨¬©‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√¢¬ß‚Äö√†√∂‚àö‚â§‚Äö√†√∂‚àö√°¬¨¬®¬¨¬µ‚Äö√†√∂‚Äö√Ñ¬¢‚Äö√†√∂‚àö√°‚Äö√Ñ√∂‚àö√ë¬¨¬¢‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö¬ß‚Äö√†√∂≈ì√Ñ‚Äö√†√∂‚àö¬∞‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥resultMap,‚Äö√†√∂‚àö¬ß‚Äö√†√∂¬¨¬¢‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚Äö√†¬¥‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö¬£¬¨¬®‚Äö√†√á‚Äö√†√∂‚àö√±‚Äö√†√∂‚àö√ñ‚Äö√†√∂¬¨¬¢‚âà√¨‚àö√ë‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√∫‚Äö√†√∂¬¨√ü‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö‚à´
        if (result instanceof List
                && ((List) result).size() > 0
                && Map.class.isAssignableFrom(type)
                && !resultMap.hasNestedQueries()
                && !resultMap.hasNestedResultMaps()) {
            List resultList = (List) result;
            //1.resultType‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√Ñ√∂‚àö‚Ä†?
            if (resultMap.getId().endsWith(""-Inline"")) {
                for (Object re : resultList) {
                    processMap((Map) re);
                }
            } else {//2.resultMap‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√Ñ√∂‚àö‚Ä†?
                for (Object re : resultList) {
                    processMap((Map) re, resultMap.getResultMappings());
                }
            }
        }
    }",False
48,processMap(Map),Method,,,"java.util.HashMap+HashMap() java.util.Set+iterator() java.util.Map+entrySet() java.util.Map+entrySet() java.util.Set+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.Map.Entry+getKey() java.util.Map.Entry+getKey() com.github.abel533.mapper.EntityHelper+underlineToCamelhump(String) com.github.abel533.mapper.EntityHelper+underlineToCamelhump(String) java.lang.String+toLowerCase() java.lang.String+toLowerCase() java.lang.String+equals(Object) java.lang.String+equals(Object) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map.Entry+getValue() java.util.Map.Entry+getValue() java.util.Iterator+remove() java.util.Iterator+remove() java.util.Map+putAll(Map) java.util.Map+putAll(Map)",,623,19,2,"/** 
 * ‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö‚à´‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö√≤‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö‚â§‚âà√¨‚àö√ë‚Äö√†√∂‚àö¬£¬¨¬®¬¨¬±¬¨¬®‚Äö√†√ª
 * @param map
 */
","/**
     * ‚Äö√†√∂‚àö√°¬¨¬®‚àö√º‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√ë¬¢‚Äö√†√∂‚àö‚à´‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö√≤‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö‚â§‚âà√¨‚àö√ë‚Äö√†√∂‚àö¬£¬¨¬®¬¨¬±¬¨¬®‚Äö√†√ª
     *
     * @param map
     */
    private void processMap(Map map) {
        Map cameHumpMap = new HashMap();
        Iterator<Map.Entry> iterator = map.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry entry = iterator.next();
            String key = (String) entry.getKey();
            String cameHumpKey = EntityHelper.underlineToCamelhump(key.toLowerCase());
            if (!key.equals(cameHumpKey)) {
                cameHumpMap.put(cameHumpKey, entry.getValue());
                iterator.remove();
            }
        }
        map.putAll(cameHumpMap);
    }",False
49,"processMap(Map,List<ResultMapping>)",Method,,,"com.github.abel533.mapper.Config+toPropertySet(List<ResultMapping>) com.github.abel533.mapper.Config+toPropertySet(List<ResultMapping>) java.util.HashMap+HashMap() java.util.Set+iterator() java.util.Map+entrySet() java.util.Map+entrySet() java.util.Set+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.Map.Entry+getKey() java.util.Map.Entry+getKey() java.util.Set+contains(Object) java.util.Set+contains(Object) com.github.abel533.mapper.EntityHelper+underlineToCamelhump(String) com.github.abel533.mapper.EntityHelper+underlineToCamelhump(String) java.lang.String+toLowerCase() java.lang.String+toLowerCase() java.lang.String+equals(Object) java.lang.String+equals(Object) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map.Entry+getValue() java.util.Map.Entry+getValue() java.util.Iterator+remove() java.util.Iterator+remove() java.util.Map+putAll(Map) java.util.Map+putAll(Map)",,842,24,2,"/** 
 * ‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚àö¬±‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö√ñ‚âà√≠¬¨¬©‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬£‚Äö√†√∂‚Äö√†√®‚Äö√†√∂¬¨‚àû‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√°¬¨¬®¬¨¬±‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö¬∫‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö√±‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√ú‚âà√¨‚àö√ë
 * @param map
 * @param resultMappings
 */
","/**
     * ‚Äö√†√∂‚àö‚Ä†‚Äö√†√∂‚àö¬±‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö√ñ‚âà√≠¬¨¬©‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬£‚Äö√†√∂‚Äö√†√®‚Äö√†√∂¬¨‚àû‚Äö√†√∂‚àö√ñ‚Äö√†√∂‚Äö√†√á‚Äö√†√∂‚àö¬¥‚Äö√†√∂‚àö√°¬¨¬®¬¨¬±‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö¬∫‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√†√∂‚àö√º‚Äö√†√∂‚àö√°‚Äö√†√∂‚àö√±‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö√ë‚Äö√†√ª‚Äö√†√∂‚Äö√†√®‚Äö√†√∂‚àö√∫‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√ú‚âà√¨‚àö√ë
     *
     * @param map
     * @param resultMappings
     */
    private void processMap(Map map, List<ResultMapping> resultMappings) {
        Set<String> propertySet = toPropertySet(resultMappings);
        Map cameHumpMap = new HashMap();
        Iterator<Map.Entry> iterator = map.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry entry = iterator.next();
            String key = (String) entry.getKey();
            if (propertySet.contains(key)) {
                continue;
            }
            String cameHumpKey = EntityHelper.underlineToCamelhump(key.toLowerCase());
            if (!key.equals(cameHumpKey)) {
                cameHumpMap.put(cameHumpKey, entry.getValue());
                iterator.remove();
            }
        }
        map.putAll(cameHumpMap);
    }",False
50,toPropertySet(List<ResultMapping>),Method,,,java.util.HashSet+HashSet() java.util.Set+add(E) java.util.Set+add(E),,373,13,2,"/** 
 * ‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√†√∂‚àö√°¬¨¬®¬¨¬±‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö¬∫‚Äö√†√∂‚àö¬£‚âà√≠¬¨¬©¬¨¬®¬¨√ÜSet
 * @param resultMappings
 * @return
 */
","/**
     * ‚Äö√†√∂‚àö√°‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√¢‚Ä¢‚Äö√†√∂‚àö√°¬¨¬®¬¨¬±‚Äö√†√∂¬¨‚Ñ¢‚Äö√†√∂‚àö¬ß‚Äö√†√∂‚àö√´‚Äö√†√∂‚àö¬∫‚Äö√†√∂‚àö¬£‚âà√≠¬¨¬©¬¨¬®¬¨√ÜSet
     *
     * @param resultMappings
     * @return
     */
    private Set<String> toPropertySet(List<ResultMapping> resultMappings) {
        Set<String> propertySet = new HashSet<String>();
        for (ResultMapping resultMapping : resultMappings) {
            propertySet.add(resultMapping.getProperty());
        }
        return propertySet;
    }",False
