index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,annotation,full text,removed
1,newline,Field,,,,,74,1,3122,82,25,,"public static final String newline = System.getProperty(""line.separator"");",False
2,pathSep,Field,,,,,74,1,3198,83,25,,"public static final String pathSep = System.getProperty(""path.separator"");",False
3,tmpdir,Field,,,,,28,1,3275,85,1,,public String tmpdir = null;,False
4,stderrDuringParse,Field,"rawBuildRecognizerTestFile(String,String,String,String,String,boolean,boolean) runProcess(ProcessBuilder,String,boolean) runProcess(ProcessBuilder,String,boolean) runProcess(ProcessBuilder,String,boolean) runProcess(ProcessBuilder,String,boolean) runProcess(ProcessBuilder,String,boolean) execModule(String) getFirstLineOfException() getFirstLineOfException()",,,,181,4,3306,87,4,"/** 
 * If error during parser execution, store stderr here; can't return stdout and stderr.  This doesn't trap errors from running antlr.
 */
","/** If error during parser execution, store stderr here; can't return
	 *  stdout and stderr.  This doesn't trap errors from running antlr.
	 */
	protected String stderrDuringParse;",False
5,antlrToolErrors,Field,,,,,81,2,3490,93,4,"/** 
 * Errors found while running antlr 
 */
","/** Errors found while running antlr */
	protected StringBuilder antlrToolErrors;",True
6,testWatcher,Field,,,,,200,10,3574,96,17,,"@org.junit.Rule
	public final TestRule testWatcher = new TestWatcher() {

		@Override
		protected void succeeded(Description description) {
			// remove tmpdir if no error.
			eraseTempDir();
		}

	};",True
7,getPropertyPrefix(),Method,testSetUp() shouldEraseTempDir(),,java.lang.String+toLowerCase() org.antlr.v4.test.runtime.cpp.BaseCppTest+getLanguage() org.antlr.v4.test.runtime.cpp.BaseCppTest+getLanguage() java.lang.String+toLowerCase(),,88,3,3777,106,2,,"private String getPropertyPrefix() {
		return ""antlr-"" + getLanguage().toLowerCase();
	}",False
8,testSetUp(),Method,,,"org.antlr.v4.test.runtime.cpp.BaseCppTest+getPropertyPrefix() org.antlr.v4.test.runtime.cpp.BaseCppTest+getPropertyPrefix() java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.String+length() java.lang.String+length() java.io.File+getAbsolutePath() java.io.File+File(String,String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.Class+getSimpleName() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getSimpleName() java.lang.Thread+getName() java.lang.Thread+currentThread() java.lang.Thread+currentThread() java.lang.Thread+getName() java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() java.io.File+getAbsolutePath() java.lang.StringBuilder+StringBuilder()",org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir org.antlr.v4.test.runtime.cpp.BaseCppTest+antlrToolErrors,500,14,3868,111,1,,"@Override
	public void testSetUp() throws Exception {
		// new output dir for each test
		String propName = getPropertyPrefix() + ""-test-dir"";
		String prop = System.getProperty(propName);
		if(prop!=null && prop.length()>0) {
			tmpdir = prop;
		}
		else {
			tmpdir = new File(System.getProperty(""java.io.tmpdir""),
			                  getClass().getSimpleName()+""-""+Thread.currentThread().getName()+""-""+System.currentTimeMillis()).getAbsolutePath();
		}
		antlrToolErrors = new StringBuilder();
	}",True
9,testTearDown(),Method,,,,,59,3,4371,126,1,,"@Override
	public void testTearDown() throws Exception {
	}",True
10,beforeTest(RuntimeTestDescriptor),Method,,,java.io.PrintStream+println(String) java.io.PrintStream+println(String) org.antlr.v4.test.runtime.RuntimeTestDescriptor+getTestName() org.antlr.v4.test.runtime.RuntimeTestDescriptor+getTestName(),java.lang.System+out,120,4,4433,130,1,,"@Override
	public void beforeTest(RuntimeTestDescriptor descriptor) {
		System.out.println(descriptor.getTestName());
	}",True
11,afterTest(RuntimeTestDescriptor),Method,,,,,71,3,4556,135,1,,"@Override
	public void afterTest(RuntimeTestDescriptor descriptor) {
	}",True
12,getTmpDir(),Method,"rawGenerateAndBuildRecognizer(String,String,String,String,boolean,String)",,,org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir,58,4,4630,139,1,,"@Override
	public String getTmpDir() {
		return tmpdir;
	}",True
13,getStdout(),Method,,,,,56,4,4691,144,1,,"@Override
	public String getStdout() {
		return null;
	}",True
14,getParseErrors(),Method,,,,org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse,74,4,4750,149,1,,"@Override
	public String getParseErrors() {
		return stderrDuringParse;
	}",True
15,getANTLRToolErrors(),Method,,,java.lang.StringBuilder+length() java.lang.StringBuilder+length() java.lang.StringBuilder+toString() java.lang.StringBuilder+toString(),org.antlr.v4.test.runtime.cpp.BaseCppTest+antlrToolErrors org.antlr.v4.test.runtime.cpp.BaseCppTest+antlrToolErrors,146,7,4827,154,1,,"@Override
	public String getANTLRToolErrors() {
		if ( antlrToolErrors.length()==0 ) {
			return null;
		}
		return antlrToolErrors.toString();
	}",True
16,newTool(String[]),Method,,,org.antlr.v4.Tool+Tool(String[]),,100,4,4976,161,4,,"protected org.antlr.v4.Tool newTool(String[] args) {
		Tool tool = new Tool(args);
		return tool;
	}",True
17,newTool(),Method,,,org.antlr.v4.Tool+Tool(String[]),org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir,110,4,5079,166,4,,"protected Tool newTool() {
		org.antlr.v4.Tool tool = new Tool(new String[] {""-o"", tmpdir});
		return tool;
	}",True
18,"createATN(Grammar,boolean)",Method,"checkRuleDFA(String,String,String) checkRuleDFA(String,int,String) checkLexerDFA(String,String,String)",,org.antlr.v4.test.runtime.cpp.BaseCppTest+semanticProcess(Grammar) org.antlr.v4.test.runtime.cpp.BaseCppTest+semanticProcess(Grammar) org.antlr.v4.Tool+getNumErrors() org.antlr.v4.Tool+getNumErrors() org.antlr.v4.tool.Grammar+isLexer() org.antlr.v4.tool.Grammar+isLexer() org.antlr.v4.automata.LexerATNFactory+LexerATNFactory(LexerGrammar) org.antlr.v4.automata.ParserATNFactory+ParserATNFactory(Grammar) org.antlr.v4.automata.ParserATNFactory+createATN() org.antlr.v4.automata.ParserATNFactory+createATN() org.antlr.v4.Tool+getNumErrors() org.antlr.v4.Tool+getNumErrors() org.antlr.v4.runtime.atn.ATNSerializer+getSerializedAsChars(ATN) org.antlr.v4.runtime.atn.ATNSerializer+getSerializedAsChars(ATN) org.antlr.v4.runtime.atn.ATNDeserializer+deserialize(char[]) org.antlr.v4.runtime.atn.ATNDeserializer+ATNDeserializer() org.antlr.v4.runtime.atn.ATNDeserializer+deserialize(char[]),org.antlr.v4.tool.Grammar+atn org.antlr.v4.tool.Grammar+tool org.antlr.v4.tool.Grammar+atn org.antlr.v4.tool.Grammar+tool org.antlr.v4.tool.Grammar+atn,555,25,5192,171,4,,"protected ATN createATN(Grammar g, boolean useSerializer) {
		if ( g.atn==null ) {
			semanticProcess(g);
			assertEquals(0, g.tool.getNumErrors());

			ParserATNFactory f;
			if ( g.isLexer() ) {
				f = new LexerATNFactory((LexerGrammar)g);
			}
			else {
				f = new ParserATNFactory(g);
			}

			g.atn = f.createATN();
			assertEquals(0, g.tool.getNumErrors());
		}

		ATN atn = g.atn;
		if (useSerializer) {
			char[] serialized = ATNSerializer.getSerializedAsChars(atn);
			return new ATNDeserializer().deserialize(serialized);
		}

		return atn;
	}",True
19,semanticProcess(Grammar),Method,"createATN(Grammar,boolean)",,"java.io.PrintStream+println(char[]) java.io.PrintStream+println(char[]) org.antlr.v4.Tool+Tool() org.antlr.v4.semantics.SemanticPipeline+SemanticPipeline(Grammar) org.antlr.v4.semantics.SemanticPipeline+process() org.antlr.v4.semantics.SemanticPipeline+process() org.antlr.v4.tool.Grammar+getImportedGrammars() org.antlr.v4.tool.Grammar+getImportedGrammars() org.antlr.v4.tool.Grammar+getImportedGrammars() org.antlr.v4.tool.Grammar+getImportedGrammars() org.antlr.v4.Tool+processNonCombinedGrammar(Grammar,boolean) org.antlr.v4.Tool+processNonCombinedGrammar(Grammar,boolean)",org.antlr.v4.tool.Grammar+ast org.antlr.v4.tool.Grammar+ast org.antlr.v4.tool.ast.GrammarRootAST+hasErrors java.lang.System+out org.antlr.v4.tool.Grammar+ast,426,13,5750,197,4,,"protected void semanticProcess(Grammar g) {
		if ( g.ast!=null && !g.ast.hasErrors ) {
			System.out.println(g.ast.toStringTree());
			Tool antlr = new Tool();
			SemanticPipeline sem = new SemanticPipeline(g);
			sem.process();
			if ( g.getImportedGrammars()!=null ) { // process imported grammars (if any)
				for (Grammar imp : g.getImportedGrammars()) {
					antlr.processNonCombinedGrammar(imp, false);
				}
			}
		}
	}",True
20,"createDFA(Grammar,DecisionState)",Method,"checkRuleDFA(Grammar,DecisionState,String)",,,,249,8,6179,211,1,,"public DFA createDFA(Grammar g, DecisionState s) {
//		PredictionDFAFactory conv = new PredictionDFAFactory(g, s);
//		DFA dfa = conv.createDFA();
//		conv.issueAmbiguityWarnings();
//		System.out.print(""DFA=""+dfa);
//		return dfa;
		return null;
	}",True
21,"getTypesFromString(Grammar,String)",Method,,,"org.antlr.v4.runtime.misc.IntegerList+IntegerList() java.lang.String+isEmpty() java.lang.String+trim() java.lang.String+trim() java.lang.String+isEmpty() java.lang.String+split(String) java.lang.String+replace(CharSequence,CharSequence) java.lang.String+replace(CharSequence,CharSequence) java.lang.String+split(String) org.antlr.v4.tool.Grammar+getTokenType(String) org.antlr.v4.tool.Grammar+getTokenType(String) org.antlr.v4.runtime.misc.IntegerList+add(int) org.antlr.v4.runtime.misc.IntegerList+add(int)",,355,10,6559,225,0,,"IntegerList getTypesFromString(Grammar g, String expecting) {
		IntegerList expectingTokenTypes = new IntegerList();
		if ( expecting!=null && !expecting.trim().isEmpty() ) {
			for (String tname : expecting.replace("" "", """").split("","")) {
				int ttype = g.getTokenType(tname);
				expectingTokenTypes.add(ttype);
			}
		}
		return expectingTokenTypes;
	}",True
22,"getTokenTypesViaATN(String,LexerATNSimulator)",Method,,,"org.antlr.v4.runtime.ANTLRInputStream+ANTLRInputStream(String) org.antlr.v4.runtime.misc.IntegerList+IntegerList() org.antlr.v4.runtime.atn.LexerATNSimulator+match(CharStream,int) org.antlr.v4.runtime.atn.LexerATNSimulator+match(CharStream,int) org.antlr.v4.runtime.misc.IntegerList+add(int) org.antlr.v4.runtime.misc.IntegerList+add(int)",org.antlr.v4.runtime.Lexer+DEFAULT_MODE org.antlr.v4.runtime.Token+EOF,335,10,6917,236,1,,"public IntegerList getTokenTypesViaATN(String input, LexerATNSimulator lexerATN) {
		ANTLRInputStream in = new ANTLRInputStream(input);
		IntegerList tokenTypes = new IntegerList();
		int ttype;
		do {
			ttype = lexerATN.match(in, Lexer.DEFAULT_MODE);
			tokenTypes.add(ttype);
		} while ( ttype!= Token.EOF );
		return tokenTypes;
	}",True
23,"getTokenTypes(LexerGrammar,ATN,CharStream)",Method,,,"org.antlr.v4.runtime.atn.LexerATNSimulator+LexerATNSimulator(ATN,DFA[],PredictionContextCache) org.antlr.v4.runtime.dfa.DFA+DFA(DecisionState) java.util.List+get(int) java.util.List+get(int) java.util.ArrayList+ArrayList() java.util.List+add(E) java.util.List+add(E) org.antlr.v4.runtime.IntStream+LA(int) org.antlr.v4.runtime.IntStream+LA(int) org.antlr.v4.runtime.atn.LexerATNSimulator+match(CharStream,int) org.antlr.v4.runtime.atn.LexerATNSimulator+match(CharStream,int) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+get(int) java.util.List+get(int)",org.antlr.v4.runtime.atn.ATN+modeToStartState org.antlr.v4.runtime.Lexer+DEFAULT_MODE org.antlr.v4.runtime.Lexer+DEFAULT_MODE org.antlr.v4.runtime.Token+EOF org.antlr.v4.tool.Grammar+typeToTokenList org.antlr.v4.runtime.IntStream+EOF org.antlr.v4.runtime.Token+EOF,757,28,7255,247,1,,"public List<String> getTokenTypes(LexerGrammar lg,
	                                  ATN atn,
	                                  CharStream input)
	{
		LexerATNSimulator interp = new LexerATNSimulator(atn,new DFA[] { new DFA(atn.modeToStartState.get(Lexer.DEFAULT_MODE)) },null);
		List<String> tokenTypes = new ArrayList<String>();
		int ttype;
		boolean hitEOF = false;
		do {
			if ( hitEOF ) {
				tokenTypes.add(""EOF"");
				break;
			}
			int t = input.LA(1);
			ttype = interp.match(input, Lexer.DEFAULT_MODE);
			if ( ttype == Token.EOF ) {
				tokenTypes.add(""EOF"");
			}
			else {
				tokenTypes.add(lg.typeToTokenList.get(ttype));
			}

			if ( t== IntStream.EOF ) {
				hitEOF = true;
			}
		} while ( ttype!=Token.EOF );
		return tokenTypes;
	}",True
24,"checkRuleDFA(String,String,String)",Method,,,"org.antlr.v4.test.runtime.ErrorQueue+ErrorQueue() org.antlr.v4.tool.Grammar+Grammar(String,ANTLRToolListener) org.antlr.v4.test.runtime.cpp.BaseCppTest+createATN(Grammar,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+createATN(Grammar,boolean) org.antlr.v4.tool.Grammar+getRule(String) org.antlr.v4.tool.Grammar+getRule(String) java.io.PrintStream+println(String) java.io.PrintStream+println(String) org.antlr.v4.runtime.atn.ATNState+transition(int) org.antlr.v4.runtime.atn.ATNState+transition(int) java.io.PrintStream+println(String) java.io.PrintStream+println(String) org.antlr.v4.test.runtime.cpp.BaseCppTest+checkRuleDFA(Grammar,DecisionState,String) org.antlr.v4.test.runtime.cpp.BaseCppTest+checkRuleDFA(Grammar,DecisionState,String)",org.antlr.v4.runtime.atn.ATN+ruleToStartState org.antlr.v4.tool.Rule+index org.antlr.v4.tool.Rule+index java.lang.System+err org.antlr.v4.runtime.atn.Transition+target org.antlr.v4.runtime.atn.Transition+target java.lang.System+out org.antlr.v4.test.runtime.ErrorQueue+all,621,20,8015,276,0,,"List<ANTLRMessage> checkRuleDFA(String gtext, String ruleName, String expecting)
		throws Exception
	{
		ErrorQueue equeue = new ErrorQueue();
		Grammar g = new Grammar(gtext, equeue);
		ATN atn = createATN(g, false);
		ATNState s = atn.ruleToStartState[g.getRule(ruleName).index];
		if ( s==null ) {
			System.err.println(""no such rule: ""+ruleName);
			return null;
		}
		ATNState t = s.transition(0).target;
		if ( !(t instanceof DecisionState) ) {
			System.out.println(ruleName+"" has no decision"");
			return null;
		}
		DecisionState blk = (DecisionState)t;
		checkRuleDFA(g, blk, expecting);
		return equeue.all;
	}",True
25,"checkRuleDFA(String,int,String)",Method,,,"org.antlr.v4.test.runtime.ErrorQueue+ErrorQueue() org.antlr.v4.tool.Grammar+Grammar(String,ANTLRToolListener) org.antlr.v4.test.runtime.cpp.BaseCppTest+createATN(Grammar,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+createATN(Grammar,boolean) java.util.List+get(int) java.util.List+get(int) org.antlr.v4.test.runtime.cpp.BaseCppTest+checkRuleDFA(Grammar,DecisionState,String) org.antlr.v4.test.runtime.cpp.BaseCppTest+checkRuleDFA(Grammar,DecisionState,String)",org.antlr.v4.runtime.atn.ATN+decisionToState org.antlr.v4.test.runtime.ErrorQueue+all,330,10,8639,297,0,,"List<ANTLRMessage> checkRuleDFA(String gtext, int decision, String expecting)
		throws Exception
	{
		ErrorQueue equeue = new ErrorQueue();
		Grammar g = new Grammar(gtext, equeue);
		ATN atn = createATN(g, false);
		DecisionState blk = atn.decisionToState.get(decision);
		checkRuleDFA(g, blk, expecting);
		return equeue.all;
	}",True
26,"checkRuleDFA(Grammar,DecisionState,String)",Method,"checkRuleDFA(String,String,String) checkRuleDFA(String,int,String)",,"org.antlr.v4.test.runtime.cpp.BaseCppTest+createDFA(Grammar,DecisionState) org.antlr.v4.test.runtime.cpp.BaseCppTest+createDFA(Grammar,DecisionState) org.antlr.v4.runtime.dfa.DFA+toString() org.antlr.v4.runtime.dfa.DFA+toString()",,224,8,8972,308,0,,"void checkRuleDFA(Grammar g, DecisionState blk, String expecting)
		throws Exception
	{
		DFA dfa = createDFA(g, blk);
		String result = null;
		if ( dfa!=null ) result = dfa.toString();
		assertEquals(expecting, result);
	}",True
27,"checkLexerDFA(String,String)",Method,,,"org.antlr.v4.test.runtime.cpp.BaseCppTest+checkLexerDFA(String,String,String) org.antlr.v4.test.runtime.cpp.BaseCppTest+checkLexerDFA(String,String,String)",org.antlr.v4.tool.LexerGrammar+DEFAULT_MODE_NAME,163,5,9199,317,0,,"List<ANTLRMessage> checkLexerDFA(String gtext, String expecting)
		throws Exception
	{
		return checkLexerDFA(gtext, LexerGrammar.DEFAULT_MODE_NAME, expecting);
	}",True
28,"checkLexerDFA(String,String,String)",Method,"checkLexerDFA(String,String)",,"org.antlr.v4.test.runtime.ErrorQueue+ErrorQueue() org.antlr.v4.tool.LexerGrammar+LexerGrammar(String,ANTLRToolListener) org.antlr.v4.test.runtime.cpp.BaseCppTest+createATN(Grammar,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+createATN(Grammar,boolean)",org.antlr.v4.tool.Grammar+atn,554,17,9365,323,0,,"List<ANTLRMessage> checkLexerDFA(String gtext, String modeName, String expecting)
		throws Exception
	{
		ErrorQueue equeue = new ErrorQueue();
		LexerGrammar g = new LexerGrammar(gtext, equeue);
		g.atn = createATN(g, false);
//		LexerATNToDFAConverter conv = new LexerATNToDFAConverter(g);
//		DFA dfa = conv.createDFA(modeName);
//		g.setLookaheadDFA(0, dfa); // only one decision to worry about
//
//		String result = null;
//		if ( dfa!=null ) result = dfa.toString();
//		assertEquals(expecting, result);
//
//		return equeue.all;
		return null;
	}",True
29,getLanguage(),Method,getPropertyPrefix(),,,,51,3,9922,341,4,,"protected String getLanguage() {
		return ""Cpp"";
	}",False
30,"execLexer(String,String,String,String)",Method,,,"org.antlr.v4.test.runtime.cpp.BaseCppTest+execLexer(String,String,String,String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+execLexer(String,String,String,String,boolean)",,265,7,9976,345,4,,"protected String execLexer(String grammarFileName,
	                           String grammarStr,
	                           String lexerName,
	                           String input)
	{
		return execLexer(grammarFileName, grammarStr, lexerName, input, false);
	}",False
31,"execLexer(String,String,String,String,boolean)",Method,"execLexer(String,String,String,String)",,"org.antlr.v4.test.runtime.cpp.BaseCppTest+rawGenerateAndBuildRecognizer(String,String,String,String,String[]) org.antlr.v4.test.runtime.cpp.BaseCppTest+rawGenerateAndBuildRecognizer(String,String,String,String,String[]) org.antlr.v4.test.runtime.cpp.BaseCppTest+writeLexerTestFile(String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+writeLexerTestFile(String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+execModule(String) org.antlr.v4.test.runtime.cpp.BaseCppTest+execModule(String)",org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir,660,17,10244,354,1,,"@Override
	public  String execLexer(String grammarFileName,
	                         String grammarStr,
	                         String lexerName,
	                         String input,
	                         boolean showDFA)
	{
		boolean success = rawGenerateAndBuildRecognizer(grammarFileName,
		                                                grammarStr,
		                                                null,
		                                                lexerName,""-no-listener"");
		assertTrue(success);
		writeFile(tmpdir, ""input"", input);
		writeLexerTestFile(lexerName, showDFA);
		String output = execModule(""Test.cpp"");
		return output;
	}",False
32,"execStartRule(String,Parser)",Method,,,"java.lang.Class+getMethod(String,Class[]) java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getMethod(String,Class[]) java.lang.Class+getMethod(String,Class[]) java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getMethod(String,Class[]) java.lang.reflect.Method+invoke(Object,Object[]) java.lang.reflect.Method+invoke(Object,Object[])",,616,18,10907,371,1,,"public ParseTree execStartRule(String startRuleName, Parser parser)
		throws IllegalAccessException, InvocationTargetException,
		NoSuchMethodException
	{
		Method startRule = null;
		Object[] args = null;
		try {
			startRule = parser.getClass().getMethod(startRuleName);
		}
		catch (NoSuchMethodException nsme) {
			// try with int _p arg for recursive func
			startRule = parser.getClass().getMethod(startRuleName, int.class);
			args = new Integer[] {0};
		}
		ParseTree result = (ParseTree)startRule.invoke(parser, args);
//		System.out.println(""parse tree = ""+result.toStringTree(parser));
		return result;
	}",False
33,"execParser(String,String,String,String,String,String,String,String,boolean)",Method,,,"org.antlr.v4.test.runtime.cpp.BaseCppTest+rawGenerateAndBuildRecognizer(String,String,String,String,String[]) org.antlr.v4.test.runtime.cpp.BaseCppTest+rawGenerateAndBuildRecognizer(String,String,String,String,String[]) org.antlr.v4.test.runtime.cpp.BaseCppTest+rawBuildRecognizerTestFile(String,String,String,String,String,boolean,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+rawBuildRecognizerTestFile(String,String,String,String,String,boolean,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+execRecognizer() org.antlr.v4.test.runtime.cpp.BaseCppTest+execRecognizer()",org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir,1136,27,12140,404,1,,"@Override
	public String execParser(String grammarFileName,
	                         String grammarStr,
	                         String parserName,
	                         String lexerName,
	                         String listenerName,
	                         String visitorName,
	                         String startRuleName,
	                         String input,
	                         boolean showDiagnosticErrors)
	{
		boolean success = rawGenerateAndBuildRecognizer(grammarFileName,
		                                                grammarStr,
		                                                parserName,
		                                                lexerName,
		                                                ""-visitor"");
		assertTrue(success);
		writeFile(tmpdir, ""input"", input);
		rawBuildRecognizerTestFile(parserName,
		                           lexerName,
		                           listenerName,
		                           visitorName,
		                           startRuleName,
		                           showDiagnosticErrors,
		                           false);
		return execRecognizer();
	}",False
34,"rawGenerateAndBuildRecognizer(String,String,String,String,String)",Method,,,"org.antlr.v4.test.runtime.cpp.BaseCppTest+rawGenerateAndBuildRecognizer(String,String,String,String,boolean,String[]) org.antlr.v4.test.runtime.cpp.BaseCppTest+rawGenerateAndBuildRecognizer(String,String,String,String,boolean,String[])",,501,9,13279,432,4,"/** 
 * Return true if all is well 
 */
","/** Return true if all is well */
	protected boolean rawGenerateAndBuildRecognizer(String grammarFileName,
	                                                String grammarStr,
	                                                String parserName,
	                                                String lexerName,
	                                                String... extraOptions)
	{
		return rawGenerateAndBuildRecognizer(grammarFileName, grammarStr, parserName, lexerName, false, extraOptions);
	}",False
35,"rawGenerateAndBuildRecognizer(String,String,String,String,boolean,String)",Method,,,"org.antlr.v4.test.runtime.cpp.BaseCppTest+getTmpDir() org.antlr.v4.test.runtime.cpp.BaseCppTest+getTmpDir() java.util.List+isEmpty() java.util.List+isEmpty() java.util.ArrayList+ArrayList() java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.List+add(E) java.util.HashSet+HashSet(Collection) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) java.util.Set+contains(Object) java.util.Set+contains(Object) java.util.List+add(E) java.util.List+add(E) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+lastIndexOf(int) java.lang.String+lastIndexOf(int) java.util.List+add(E) java.util.List+add(E) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+lastIndexOf(int) java.lang.String+lastIndexOf(int) java.util.Set+contains(Object) java.util.Set+contains(Object) java.util.List+add(E) java.util.List+add(E) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+lastIndexOf(int) java.lang.String+lastIndexOf(int) java.util.List+add(E) java.util.List+add(E) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+lastIndexOf(int) java.lang.String+lastIndexOf(int)",org.antlr.v4.test.runtime.ErrorQueue+errors,1462,34,13783,442,4,"/** 
 * Return true if all is well 
 */
","/** Return true if all is well */
	protected boolean rawGenerateAndBuildRecognizer(String grammarFileName,
	                                                String grammarStr,
	                                                String parserName,
	                                                String lexerName,
	                                                boolean defaultListener,
	                                                String... extraOptions)
	{
		ErrorQueue equeue =
			antlrOnString(getTmpDir(), ""Cpp"", grammarFileName, grammarStr, defaultListener, extraOptions);
		if (!equeue.errors.isEmpty()) {
			return false;
		}

		List<String> files = new ArrayList<String>();
		if ( lexerName!=null ) {
			files.add(lexerName+"".cpp"");
			files.add(lexerName+"".h"");
		}
		if ( parserName!=null ) {
			files.add(parserName+"".cpp"");
			files.add(parserName+"".h"");
			Set<String> optionsSet = new HashSet<String>(Arrays.asList(extraOptions));
			if (!optionsSet.contains(""-no-listener"")) {
				files.add(grammarFileName.substring(0, grammarFileName.lastIndexOf('.'))+""Listener.cpp"");
				files.add(grammarFileName.substring(0, grammarFileName.lastIndexOf('.'))+""Listener.h"");
			}
			if (optionsSet.contains(""-visitor"")) {
				files.add(grammarFileName.substring(0, grammarFileName.lastIndexOf('.'))+""Visitor.cpp"");
				files.add(grammarFileName.substring(0, grammarFileName.lastIndexOf('.'))+""Visitor.h"");
			}
		}
		return true; // allIsWell: no compile
	}",False
36,"rawBuildRecognizerTestFile(String,String,String,String,String,boolean,boolean)",Method,"execParser(String,String,String,String,String,String,String,String,boolean)",,"org.antlr.v4.test.runtime.cpp.BaseCppTest+writeLexerTestFile(String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+writeLexerTestFile(String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+writeParserTestFile(String,String,String,String,String,boolean,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+writeParserTestFile(String,String,String,String,String,boolean,boolean)",org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse,784,21,15248,476,4,,"protected void rawBuildRecognizerTestFile(String parserName,
	                                          String lexerName,
	                                          String listenerName,
	                                          String visitorName,
	                                          String parserStartRuleName,
	                                          boolean debug,
	                                          boolean trace)
	{
		this.stderrDuringParse = null;
		if ( parserName==null ) {
			writeLexerTestFile(lexerName, false);
		}
		else {
			writeParserTestFile(parserName,
			                    lexerName,
			                    listenerName,
			                    visitorName,
			                    parserStartRuleName,
			                    debug, trace);
		}
	}",False
37,execRecognizer(),Method,"execParser(String,String,String,String,String,String,String,String,boolean)",,org.antlr.v4.test.runtime.cpp.BaseCppTest+execModule(String) org.antlr.v4.test.runtime.cpp.BaseCppTest+execModule(String),,68,3,16035,498,1,,"public String execRecognizer() {
		return execModule(""Test.cpp"");
	}",False
38,detectedOS,Field,,,,,33,1,16107,503,10,,private static String detectedOS;,True
39,getOS(),Method,execModule(String),,"java.lang.String+toLowerCase(Locale) java.lang.System+getProperty(String,String) java.lang.System+getProperty(String,String) java.lang.String+toLowerCase(Locale) java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(String)",org.antlr.v4.test.runtime.cpp.BaseCppTest+detectedOS java.util.Locale+ENGLISH org.antlr.v4.test.runtime.cpp.BaseCppTest+detectedOS org.antlr.v4.test.runtime.cpp.BaseCppTest+detectedOS org.antlr.v4.test.runtime.cpp.BaseCppTest+detectedOS org.antlr.v4.test.runtime.cpp.BaseCppTest+detectedOS org.antlr.v4.test.runtime.cpp.BaseCppTest+detectedOS,449,18,16142,504,9,,"public static String getOS() {
		if (detectedOS == null) {
			String os = System.getProperty(""os.name"", ""generic"").toLowerCase(Locale.ENGLISH);
			if ((os.indexOf(""mac"") >= 0) || (os.indexOf(""darwin"") >= 0)) {
				detectedOS = ""mac"";
			}
			else if (os.indexOf(""win"") >= 0) {
				detectedOS = ""windows"";
			}
			else if (os.indexOf(""nux"") >= 0) {
				detectedOS = ""linux"";
			}
			else {
				detectedOS = ""unknown"";
			}
		}
		return detectedOS;
	}",True
40,allCppFiles(String),Method,execModule(String),,java.util.ArrayList+ArrayList() java.io.File+File(String) java.io.File+listFiles() java.io.File+listFiles() java.io.File+getAbsolutePath() java.io.File+getAbsolutePath() java.lang.String+endsWith(String) java.lang.String+endsWith(String) java.util.ArrayList+add(E) java.util.ArrayList+add(E),,355,12,16594,523,1,,"public List<String> allCppFiles(String path) {
		ArrayList<String> files = new ArrayList<String>();
		File folder = new File(path);
		File[] listOfFiles = folder.listFiles();
		for (int i = 0; i < listOfFiles.length; i++) {
			String file = listOfFiles[i].getAbsolutePath();
			if (file.endsWith("".cpp"")) {
				files.add(file);
			}
		}
		return files;
	}",False
41,"runProcess(ProcessBuilder,String,boolean)",Method,"runCommand(String,String,String,boolean) execModule(String)",,java.lang.ProcessBuilder+start() java.lang.ProcessBuilder+start() org.antlr.v4.test.runtime.StreamVacuum+StreamVacuum(InputStream) java.lang.Process+getInputStream() java.lang.Process+getInputStream() org.antlr.v4.test.runtime.StreamVacuum+StreamVacuum(InputStream) java.lang.Process+getErrorStream() java.lang.Process+getErrorStream() org.antlr.v4.test.runtime.StreamVacuum+start() org.antlr.v4.test.runtime.StreamVacuum+start() org.antlr.v4.test.runtime.StreamVacuum+start() org.antlr.v4.test.runtime.StreamVacuum+start() java.lang.Process+waitFor() java.lang.Process+waitFor() org.antlr.v4.test.runtime.StreamVacuum+join() org.antlr.v4.test.runtime.StreamVacuum+join() org.antlr.v4.test.runtime.StreamVacuum+join() org.antlr.v4.test.runtime.StreamVacuum+join() org.antlr.v4.test.runtime.StreamVacuum+toString() org.antlr.v4.test.runtime.StreamVacuum+toString() java.lang.String+length() org.antlr.v4.test.runtime.StreamVacuum+toString() org.antlr.v4.test.runtime.StreamVacuum+toString() java.lang.String+length() org.antlr.v4.test.runtime.StreamVacuum+toString() org.antlr.v4.test.runtime.StreamVacuum+toString() java.io.PrintStream+println(String) java.io.PrintStream+println(String),org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse java.lang.System+err org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse,992,27,16952,536,2,,"private String runProcess(ProcessBuilder builder, String description, boolean showStderr) throws Exception {
		// System.out.println(""BUILDER: "" + builder.command() + "" @ "" + builder.directory().toString());
		Process process = builder.start();
		StreamVacuum stdoutVacuum = new StreamVacuum(process.getInputStream());
		StreamVacuum stderrVacuum = new StreamVacuum(process.getErrorStream());
		stdoutVacuum.start();
		stderrVacuum.start();
		int errcode = process.waitFor();
		stdoutVacuum.join();
		stderrVacuum.join();
		String output = stdoutVacuum.toString();
		if ( stderrVacuum.toString().length()>0 ) {
			this.stderrDuringParse = stderrVacuum.toString();
			if ( showStderr ) System.err.println(this.stderrDuringParse);
		}
		if (errcode != 0) {
			String err = ""execution of '""+description+""' failed with error code: ""+errcode;
			if ( this.stderrDuringParse!=null ) {
				this.stderrDuringParse += err;
			}
			else {
				this.stderrDuringParse = err;
			}
		}

		return output;
	}",False
42,"runCommand(String,String,String,boolean)",Method,,,"java.lang.ProcessBuilder+ProcessBuilder(String[]) java.lang.ProcessBuilder+directory(File) java.lang.ProcessBuilder+directory(File) java.io.File+File(String) org.antlr.v4.test.runtime.cpp.BaseCppTest+runProcess(ProcessBuilder,String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+runProcess(ProcessBuilder,String,boolean)",,275,6,17947,564,2,,"private String runCommand(String command[], String workPath, String description, boolean showStderr) throws Exception {
		ProcessBuilder builder = new ProcessBuilder(command);
		builder.directory(new File(workPath));

		return runProcess(builder, description, showStderr);
	}",False
43,buildRuntime(),Method,execModule(String),,"org.antlr.v4.test.runtime.cpp.BaseCppTest+locateRuntime() org.antlr.v4.test.runtime.cpp.BaseCppTest+locateRuntime() java.io.PrintStream+println(String) java.io.PrintStream+println(String) org.antlr.v4.test.runtime.cpp.BaseCppTest+runCommand(String[],String,String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+runCommand(String[],String,String,boolean) java.io.PrintStream+println(String) java.io.PrintStream+println(String) org.antlr.v4.test.runtime.cpp.BaseCppTest+runCommand(String[],String,String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+runCommand(String[],String,String,boolean) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+printStackTrace(PrintStream) java.lang.Throwable+printStackTrace(PrintStream) org.antlr.v4.test.runtime.cpp.BaseCppTest+runCommand(String[],String,String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+runCommand(String[],String,String,boolean) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+printStackTrace(PrintStream) java.lang.Throwable+printStackTrace(PrintStream)",java.lang.System+out java.lang.System+err java.lang.System+err java.lang.System+err java.lang.System+out java.lang.System+err java.lang.System+err,1439,46,18272,572,2,,"private boolean buildRuntime() {
		String runtimePath = locateRuntime();
		System.out.println(""Building ANTLR4 C++ runtime (if necessary) at ""+ runtimePath);

		try {
			String command[] = { ""cmake"", ""."", /*""-DCMAKE_CXX_COMPILER=clang++"",*/ ""-DCMAKE_BUILD_TYPE=release"" };
			if (runCommand(command, runtimePath, ""antlr runtime cmake"", false) == null) {
				return false;
			}
		}
		catch (Exception e) {
			System.err.println(""can't configure antlr cpp runtime cmake file"");
		}

		try {
			String command[] = { ""make"", ""-j"", ""8"" }; // Assuming a reasonable amount of available CPU cores.
			if (runCommand(command, runtimePath, ""building antlr runtime"", true) == null)
				return false;
		}
		catch (Exception e) {
			System.err.println(""can't compile antlr cpp runtime"");
			e.printStackTrace(System.err);
			try {
			    String command[] = { ""ls"", ""-la"" };
					String output = runCommand(command, runtimePath + ""/dist/"", ""printing library folder content"", true);
				System.out.println(output);
			}
			catch (Exception e2) {
				System.err.println(""can't even list folder content"");
				e2.printStackTrace(System.err);
			}
		}

/* for debugging
		try {
		    String command[] = { ""ls"", ""-la"" };
				String output = runCommand(command, runtimePath + ""/dist/"", ""printing library folder content"");
			System.out.println(output);
		}
		catch (Exception e) {
			System.err.println(""can't print folder content"");
		}
*/

		return true;
	}",False
44,runtimeBuiltOnce,Field,,,,,40,1,19714,619,8,,static Boolean runtimeBuiltOnce = false;,False
45,execModule(String),Method,"execLexer(String,String,String,String,boolean) execRecognizer()",,"org.antlr.v4.test.runtime.cpp.BaseCppTest+locateRuntime() org.antlr.v4.test.runtime.cpp.BaseCppTest+locateRuntime() java.io.File+getAbsolutePath() java.io.File+File(File,String) java.io.File+File(String) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath() java.io.File+File(File,String) java.io.File+File(String) java.io.File+getAbsolutePath() org.antlr.v4.test.runtime.cpp.BaseCppTest+runCommand(String[],String,String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+runCommand(String[],String,String,boolean) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.io.PrintStream+println(String) org.antlr.v4.test.runtime.cpp.BaseCppTest+buildRuntime() org.antlr.v4.test.runtime.cpp.BaseCppTest+buildRuntime() java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.String+equals(Object) org.antlr.v4.test.runtime.cpp.BaseCppTest+getOS() org.antlr.v4.test.runtime.cpp.BaseCppTest+getOS() java.lang.String+equals(Object) org.antlr.v4.test.runtime.cpp.BaseCppTest+runCommand(String[],String,String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+runCommand(String[],String,String,boolean) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+printStackTrace(PrintStream) java.lang.Throwable+printStackTrace(PrintStream) java.util.ArrayList+ArrayList(Collection) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) java.util.List+addAll(Collection) java.util.List+addAll(Collection) org.antlr.v4.test.runtime.cpp.BaseCppTest+allCppFiles(String) org.antlr.v4.test.runtime.cpp.BaseCppTest+allCppFiles(String) org.antlr.v4.test.runtime.cpp.BaseCppTest+runCommand(String[],String,String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+runCommand(String[],String,String,boolean) java.util.List+toArray(T[]) java.util.List+toArray(T[]) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage() java.lang.Throwable+printStackTrace(PrintStream) java.lang.Throwable+printStackTrace(PrintStream) java.lang.ProcessBuilder+ProcessBuilder(List) java.lang.ProcessBuilder+directory(File) java.lang.ProcessBuilder+directory(File) java.io.File+File(String) java.lang.ProcessBuilder+environment() java.lang.ProcessBuilder+environment() java.util.Map+put(K,V) java.util.Map+put(K,V) org.antlr.v4.test.runtime.cpp.BaseCppTest+runProcess(ProcessBuilder,String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+runProcess(ProcessBuilder,String,boolean) java.lang.String+length() java.lang.String+length() java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+printStackTrace(PrintStream) java.lang.Throwable+printStackTrace(PrintStream)",org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir org.antlr.v4.test.runtime.cpp.BaseCppTest+runtimeBuiltOnce org.antlr.v4.test.runtime.cpp.BaseCppTest+runtimeBuiltOnce org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir java.lang.System+out java.lang.System+err org.antlr.v4.test.runtime.cpp.BaseCppTest+runtimeBuiltOnce java.lang.System+out java.lang.System+out org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir java.lang.System+err java.lang.System+err org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir java.lang.System+err java.lang.System+err org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir java.lang.System+err java.lang.System+err,2815,79,19757,621,1,,"public String execModule(String fileName) {
		String runtimePath = locateRuntime();
		String includePath = runtimePath + ""/runtime/src"";
		String binPath = new File(new File(tmpdir), ""a.out"").getAbsolutePath();
		String inputPath = new File(new File(tmpdir), ""input"").getAbsolutePath();

		// Build runtime using cmake once.
		synchronized (runtimeBuiltOnce) {
			if ( !runtimeBuiltOnce ) {
				try {
					String command[] = {""clang++"", ""--version""};
					String output = runCommand(command, tmpdir, ""printing compiler version"", false);
					System.out.println(""Compiler version is: ""+output);
				}
				catch (Exception e) {
					System.err.println(""Can't get compiler version"");
				}

				runtimeBuiltOnce = true;
				if ( !buildRuntime() ) {
					System.out.println(""C++ runtime build failed\n"");
					return null;
				}
				System.out.println(""C++ runtime build succeeded\n"");
			}
		}

		// Create symlink to the runtime. Currently only used on OSX.
		String libExtension = (getOS().equals(""mac"")) ? ""dylib"" : ""so"";
		try {
			String command[] = { ""ln"", ""-s"", runtimePath + ""/dist/libantlr4-runtime."" + libExtension };
			if (runCommand(command, tmpdir, ""sym linking C++ runtime"", true) == null)
				return null;
		}
		catch (Exception e) {
			System.err.println(""can't create link to "" + runtimePath + ""/dist/libantlr4-runtime."" + libExtension);
			e.printStackTrace(System.err);
			return null;
		}

		try {
			List<String> command2 = new ArrayList<String>(Arrays.asList(""clang++"", ""-std=c++11"", ""-I"", includePath, ""-L."", ""-lantlr4-runtime"", ""-o"", ""a.out""));
			command2.addAll(allCppFiles(tmpdir));
			if (runCommand(command2.toArray(new String[0]), tmpdir, ""building test binary"", true) == null) {
				return null;
			}
		}
		catch (Exception e) {
			System.err.println(""can't compile test module: "" + e.getMessage());
			e.printStackTrace(System.err);
			return null;
		}

		// Now run the newly minted binary. Reset the error output, as we could have got compiler warnings which are not relevant here.
		this.stderrDuringParse = null;
		try {
			ProcessBuilder builder = new ProcessBuilder(binPath, inputPath);
			builder.directory(new File(tmpdir));
			Map<String, String> env = builder.environment();
			env.put(""LD_PRELOAD"", runtimePath + ""/dist/libantlr4-runtime."" + libExtension);
			String output = runProcess(builder, ""running test binary"", false);
			if ( output.length()==0 ) {
				output = null;
			}

      /* for debugging
		  System.out.println(""========================================================="");
		  System.out.println(output);
		  System.out.println(""========================================================="");
		  */
			return output;
		}
		catch (Exception e) {
			System.err.println(""can't exec module: "" + fileName);
			e.printStackTrace(System.err);
		}

		return null;
	}",False
46,locateRuntime(),Method,buildRuntime() execModule(String),,java.lang.Thread+getContextClassLoader() java.lang.Thread+currentThread() java.lang.Thread+currentThread() java.lang.Thread+getContextClassLoader() java.lang.ClassLoader+getResource(String) java.lang.ClassLoader+getResource(String) java.lang.RuntimeException+RuntimeException(String) java.io.File+toString() java.nio.file.Path+toFile() java.nio.file.Paths+get(URI) java.nio.file.Paths+get(URI) java.net.URL+toURI() java.net.URL+toURI() java.nio.file.Path+toFile() java.io.File+toString() java.net.URL+toString() java.net.URL+toString(),,668,18,22575,701,4,,"protected String locateRuntime() {
		final ClassLoader loader = Thread.currentThread().getContextClassLoader();
		final URL runtimeURL = loader.getResource(""Cpp"");
		if (runtimeURL == null) {
			throw new RuntimeException(""Cannot find runtime"");
		}
		// Windows not getting runtime right. See:
		// http://stackoverflow.com/questions/6164448/convert-url-to-normal-windows-filename-java
		// it was coming back ""/C:/projects/antlr4-l7imv/runtime-testsuite/target/classes/Cpp""
		String p;
		try {
			p = Paths.get(runtimeURL.toURI()).toFile().toString();
		}
		catch (URISyntaxException use) {
			p = ""Can't find runtime at "" + runtimeURL.toString();
		}
		return p;
	}",False
47,"getMessagesOfType(List<ANTLRMessage>,Class<? extends ANTLRMessage>)",Method,,,java.util.ArrayList+ArrayList() java.lang.Object+getClass() java.lang.Object+getClass() java.util.List+add(E) java.util.List+add(E),,262,7,23246,720,0,,"List<ANTLRMessage> getMessagesOfType(List<ANTLRMessage> msgs, Class<? extends ANTLRMessage> c) {
		List<ANTLRMessage> filtered = new ArrayList<ANTLRMessage>();
		for (ANTLRMessage m : msgs) {
			if ( m.getClass() == c ) filtered.add(m);
		}
		return filtered;
	}",True
48,"checkRuleATN(Grammar,String,String)",Method,,,"org.antlr.v4.automata.ParserATNFactory+ParserATNFactory(Grammar) org.antlr.v4.automata.ParserATNFactory+createATN() org.antlr.v4.automata.ParserATNFactory+createATN() org.antlr.v4.tool.DOTGenerator+DOTGenerator(Grammar) java.io.PrintStream+println(String) java.io.PrintStream+println(String) org.antlr.v4.tool.DOTGenerator+getDOT(ATNState) org.antlr.v4.tool.DOTGenerator+getDOT(ATNState) org.antlr.v4.tool.Grammar+getRule(String) org.antlr.v4.tool.Grammar+getRule(String) org.antlr.v4.tool.Grammar+getRule(String) org.antlr.v4.tool.Grammar+getRule(String) org.antlr.v4.automata.ATNPrinter+ATNPrinter(Grammar,ATNState) org.antlr.v4.automata.ATNPrinter+asString() org.antlr.v4.automata.ATNPrinter+asString()",java.lang.System+out org.antlr.v4.runtime.atn.ATN+ruleToStartState org.antlr.v4.tool.Rule+index org.antlr.v4.tool.Rule+index org.antlr.v4.runtime.atn.ATN+ruleToStartState org.antlr.v4.tool.Rule+index,521,15,23511,728,0,,"void checkRuleATN(Grammar g, String ruleName, String expecting) {
		ParserATNFactory f = new ParserATNFactory(g);
		ATN atn = f.createATN();

		DOTGenerator dot = new DOTGenerator(g);
		System.out.println(dot.getDOT(atn.ruleToStartState[g.getRule(ruleName).index]));

		Rule r = g.getRule(ruleName);
		ATNState startState = atn.ruleToStartState[r.index];
		ATNPrinter serializer = new ATNPrinter(g, startState);
		String result = serializer.asString();

		//System.out.print(result);
		assertEquals(expecting, result);
	}",True
49,"testActions(String,String,String,String)",Method,,,"java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+substring(int,int) java.lang.String+substring(int,int) org.antlr.v4.test.runtime.ErrorQueue+ErrorQueue() org.antlr.v4.tool.Grammar+Grammar(String,ANTLRToolListener) org.antlr.v4.semantics.SemanticPipeline+SemanticPipeline(Grammar) org.antlr.v4.semantics.SemanticPipeline+process() org.antlr.v4.semantics.SemanticPipeline+process() org.antlr.v4.automata.ParserATNFactory+ParserATNFactory(Grammar) org.antlr.v4.tool.Grammar+isLexer() org.antlr.v4.tool.Grammar+isLexer() org.antlr.v4.automata.LexerATNFactory+LexerATNFactory(LexerGrammar) org.antlr.v4.automata.ATNFactory+createATN() org.antlr.v4.automata.ATNFactory+createATN() org.antlr.v4.codegen.CodeGenerator+CodeGenerator(Grammar) org.antlr.v4.codegen.CodeGenerator+generateParser() org.antlr.v4.codegen.CodeGenerator+generateParser() java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+indexOf(String) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+length() java.lang.String+length() org.antlr.v4.test.runtime.ErrorQueue+size() org.antlr.v4.test.runtime.ErrorQueue+size() java.io.PrintStream+println(String) java.io.PrintStream+println(String) org.antlr.v4.test.runtime.ErrorQueue+toString() org.antlr.v4.test.runtime.ErrorQueue+toString()",org.antlr.v4.tool.Grammar+ast org.antlr.v4.tool.Grammar+ast org.antlr.v4.tool.ast.GrammarRootAST+hasErrors org.antlr.v4.tool.Grammar+atn java.lang.System+err,1200,32,24035,744,1,,"public void testActions(String templates, String actionName, String action, String expected) throws org.antlr.runtime.RecognitionException {
		int lp = templates.indexOf('(');
		String name = templates.substring(0, lp);
		STGroup group = new STGroupString(templates);
		ST st = group.getInstanceOf(name);
		st.add(actionName, action);
		String grammar = st.render();
		ErrorQueue equeue = new ErrorQueue();
		Grammar g = new Grammar(grammar, equeue);
		if ( g.ast!=null && !g.ast.hasErrors ) {
			SemanticPipeline sem = new SemanticPipeline(g);
			sem.process();

			ATNFactory factory = new ParserATNFactory(g);
			if ( g.isLexer() ) factory = new LexerATNFactory((LexerGrammar)g);
			g.atn = factory.createATN();

			CodeGenerator gen = new CodeGenerator(g);
			ST outputFileST = gen.generateParser();
			String output = outputFileST.render();
			//System.out.println(output);
			String b = ""#"" + actionName + ""#"";
			int start = output.indexOf(b);
			String e = ""#end-"" + actionName + ""#"";
			int end = output.indexOf(e);
			String snippet = output.substring(start+b.length(),end);
			assertEquals(expected, snippet);
		}
		if ( equeue.size()>0 ) {
			System.err.println(equeue.toString());
		}
	}",True
50,"checkGrammarSemanticsError(ErrorQueue,GrammarSemanticsMessage)",Method,,,java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() java.util.Arrays+toString(Object[]) java.util.Arrays+toString(Object[]) org.antlr.v4.tool.ANTLRMessage+getArgs() org.antlr.v4.tool.ANTLRMessage+getArgs() java.util.Arrays+toString(Object[]) java.util.Arrays+toString(Object[]) org.antlr.v4.tool.ANTLRMessage+getArgs() org.antlr.v4.tool.ANTLRMessage+getArgs() org.antlr.v4.test.runtime.ErrorQueue+size() org.antlr.v4.test.runtime.ErrorQueue+size() java.io.PrintStream+println(Object) java.io.PrintStream+println(Object),org.antlr.v4.test.runtime.ErrorQueue+errors org.antlr.v4.test.runtime.ErrorQueue+errors java.lang.System+err,739,19,25238,777,4,,"protected void checkGrammarSemanticsError(ErrorQueue equeue,
	                                          GrammarSemanticsMessage expectedMessage)
		throws Exception
	{
		ANTLRMessage foundMsg = null;
		for (int i = 0; i < equeue.errors.size(); i++) {
			ANTLRMessage m = equeue.errors.get(i);
			if (m.getErrorType()==expectedMessage.getErrorType() ) {
				foundMsg = m;
			}
		}
		assertNotNull(""no error; ""+expectedMessage.getErrorType()+"" expected"", foundMsg);
		assertTrue(""error is not a GrammarSemanticsMessage"",
		           foundMsg instanceof GrammarSemanticsMessage);
		assertEquals(Arrays.toString(expectedMessage.getArgs()), Arrays.toString(foundMsg.getArgs()));
		if ( equeue.size()!=1 ) {
			System.err.println(equeue);
		}
	}",True
51,"checkGrammarSemanticsWarning(ErrorQueue,GrammarSemanticsMessage)",Method,,,java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() java.util.Arrays+toString(Object[]) java.util.Arrays+toString(Object[]) org.antlr.v4.tool.ANTLRMessage+getArgs() org.antlr.v4.tool.ANTLRMessage+getArgs() java.util.Arrays+toString(Object[]) java.util.Arrays+toString(Object[]) org.antlr.v4.tool.ANTLRMessage+getArgs() org.antlr.v4.tool.ANTLRMessage+getArgs() org.antlr.v4.test.runtime.ErrorQueue+size() org.antlr.v4.test.runtime.ErrorQueue+size() java.io.PrintStream+println(Object) java.io.PrintStream+println(Object),org.antlr.v4.test.runtime.ErrorQueue+warnings org.antlr.v4.test.runtime.ErrorQueue+warnings java.lang.System+err,747,19,25980,797,4,,"protected void checkGrammarSemanticsWarning(ErrorQueue equeue,
	                                            GrammarSemanticsMessage expectedMessage)
		throws Exception
	{
		ANTLRMessage foundMsg = null;
		for (int i = 0; i < equeue.warnings.size(); i++) {
			ANTLRMessage m = equeue.warnings.get(i);
			if (m.getErrorType()==expectedMessage.getErrorType() ) {
				foundMsg = m;
			}
		}
		assertNotNull(""no error; ""+expectedMessage.getErrorType()+"" expected"", foundMsg);
		assertTrue(""error is not a GrammarSemanticsMessage"",
		           foundMsg instanceof GrammarSemanticsMessage);
		assertEquals(Arrays.toString(expectedMessage.getArgs()), Arrays.toString(foundMsg.getArgs()));
		if ( equeue.size()!=1 ) {
			System.err.println(equeue);
		}
	}",True
52,"checkError(ErrorQueue,ANTLRMessage)",Method,,,java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() java.util.List+isEmpty() java.util.List+isEmpty() java.util.List+size() java.util.List+size() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getErrorType() org.antlr.v4.tool.ANTLRMessage+getArgs() org.antlr.v4.tool.ANTLRMessage+getArgs() org.antlr.v4.tool.ANTLRMessage+getArgs() org.antlr.v4.tool.ANTLRMessage+getArgs(),org.antlr.v4.test.runtime.ErrorQueue+errors org.antlr.v4.test.runtime.ErrorQueue+errors org.antlr.v4.test.runtime.ErrorQueue+errors org.antlr.v4.test.runtime.ErrorQueue+errors org.antlr.v4.test.runtime.ErrorQueue+errors,830,21,26730,817,4,,"protected void checkError(ErrorQueue equeue,
	                          ANTLRMessage expectedMessage)
		throws Exception
	{
		//System.out.println(""errors=""+equeue);
		ANTLRMessage foundMsg = null;
		for (int i = 0; i < equeue.errors.size(); i++) {
			ANTLRMessage m = equeue.errors.get(i);
			if (m.getErrorType()==expectedMessage.getErrorType() ) {
				foundMsg = m;
			}
		}
		assertTrue(""no error; ""+expectedMessage.getErrorType()+"" expected"", !equeue.errors.isEmpty());
		assertTrue(""too many errors; ""+equeue.errors, equeue.errors.size()<=1);
		assertNotNull(""couldn't find expected error: ""+expectedMessage.getErrorType(), foundMsg);
		/*
		assertTrue(""error is not a GrammarSemanticsMessage"",
				   foundMsg instanceof GrammarSemanticsMessage);
		 */
		assertArrayEquals(expectedMessage.getArgs(), foundMsg.getArgs());
	}",True
53,FilteringTokenStream,MemberClass,,,"org.antlr.v4.test.runtime.cpp.BaseCppTest.FilteringTokenStream+FilteringTokenStream(TokenSource) java.util.HashSet+HashSet() org.antlr.v4.test.runtime.cpp.BaseCppTest.FilteringTokenStream+sync(int) org.antlr.v4.runtime.BufferedTokenStream+sync(int) org.antlr.v4.runtime.BufferedTokenStream+get(int) org.antlr.v4.runtime.BufferedTokenStream+get(int) java.util.Set+contains(Object) java.util.Set+contains(Object) org.antlr.v4.runtime.Token+getType() org.antlr.v4.runtime.Token+getType() org.antlr.v4.runtime.WritableToken+setChannel(int) org.antlr.v4.runtime.WritableToken+setChannel(int) org.antlr.v4.test.runtime.cpp.BaseCppTest.FilteringTokenStream+setTokenTypeChannel(int,int) java.util.Set+add(E) java.util.Set+add(E)",org.antlr.v4.test.runtime.cpp.BaseCppTest.FilteringTokenStream+hide org.antlr.v4.test.runtime.cpp.BaseCppTest.FilteringTokenStream+hide org.antlr.v4.runtime.Token+HIDDEN_CHANNEL org.antlr.v4.test.runtime.cpp.BaseCppTest.FilteringTokenStream+hide,502,20,-1,-1,9,,"public static class FilteringTokenStream extends CommonTokenStream {
		public FilteringTokenStream(TokenSource src) { super(src); }
		Set<Integer> hide = new HashSet<Integer>();
		@Override
		protected boolean sync(int i) {
			if (!super.sync(i)) {
				return false;
			}

			Token t = get(i);
			if ( hide.contains(t.getType()) ) {
				((WritableToken)t).setChannel(Token.HIDDEN_CHANNEL);
			}

			return true;
		}
		public void setTokenTypeChannel(int ttype, int channel) {
			hide.add(ttype);
		}
	}",True
54,mkdir(String),Method,,,java.io.File+File(String) java.io.File+mkdirs() java.io.File+mkdirs(),,77,4,28068,860,4,,"protected void mkdir(String dir) {
		File f = new File(dir);
		f.mkdirs();
	}",True
55,"writeParserTestFile(String,String,String,String,String,boolean,boolean)",Method,"rawBuildRecognizerTestFile(String,String,String,String,String,boolean,boolean) writeRecognizer(String,String,String,String,String,boolean,boolean)",,java.lang.String+endsWith(String) java.lang.String+endsWith(String),org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir,2374,62,28148,865,4,,"protected void writeParserTestFile(String parserName, String lexerName,
	                                   String listenerName, String visitorName,
	                                   String parserStartRuleName, boolean debug, boolean trace) {
		if(!parserStartRuleName.endsWith("")""))
			parserStartRuleName += ""()"";
		ST outputFileST = new ST(
			""#include \\<iostream>\n""
				+ ""\n""
				+ ""#include \""antlr4-runtime.h\""\n""
				+ ""#include \""<lexerName>.h\""\n""
				+ ""#include \""<parserName>.h\""\n""
				+ ""\n""
				+ ""using namespace antlr4;\n""
				+ ""\n""
				+ ""class TreeShapeListener : public tree::ParseTreeListener {\n""
				+ ""public:\n""
				+ ""  void visitTerminal(tree::TerminalNode *) override {}\n""
				+ ""  void visitErrorNode(tree::ErrorNode *) override {}\n""
				+ ""  void exitEveryRule(ParserRuleContext *) override {}\n""
				+ ""  void enterEveryRule(ParserRuleContext *ctx) override {\n""
				+ ""    for (auto child : ctx->children) {\n""
				+ ""      tree::ParseTree *parent = child->parent;\n""
				+ ""      ParserRuleContext *rule = dynamic_cast\\<ParserRuleContext *>(parent);\n""
				+ ""      if (rule != ctx) {\n""
				+ ""        throw \""Invalid parse tree shape detected.\"";\n""
				+ ""      }\n""

				+ ""    }\n""
				+ ""  }\n""
				+ ""};\n""
				+ ""\n""
				+ ""\n""
				+ ""int main(int argc, const char* argv[]) {\n""
				+ ""  ANTLRFileStream input(argv[1]);\n""
				+ ""  <lexerName> lexer(&input);\n""
				+ ""  CommonTokenStream tokens(&lexer);\n""
				+ ""<createParser>""
				+ ""\n""
				+ ""  tree::ParseTree *tree = parser.<parserStartRuleName>;\n""
				+ ""  TreeShapeListener listener;\n""
				+ ""  tree::ParseTreeWalker::DEFAULT.walk(&listener, tree);\n""
				+ ""\n""
				+ ""  return 0;\n""
				+ ""}\n""
		);

		String stSource = ""  <parserName> parser(&tokens);\n"";
		if(debug) {
			stSource += ""  DiagnosticErrorListener errorListener;\n"";
			stSource += ""  parser.addErrorListener(&errorListener);\n"";
		}
		if(trace)
			stSource += ""  parser.setTrace(true);\n"";
		ST createParserST = new ST(stSource);
		outputFileST.add(""createParser"", createParserST);
		outputFileST.add(""parserName"", parserName);
		outputFileST.add(""lexerName"", lexerName);
		outputFileST.add(""listenerName"", listenerName);
		outputFileST.add(""visitorName"", visitorName);
		outputFileST.add(""parserStartRuleName"", parserStartRuleName);
		writeFile(tmpdir, ""Test.cpp"", outputFileST.render());
	}",False
56,"writeLexerTestFile(String,boolean)",Method,"execLexer(String,String,String,String,boolean) rawBuildRecognizerTestFile(String,String,String,String,String,boolean,boolean) writeRecognizer(String,String,String,String,String,boolean,boolean)",,,org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir,933,24,30525,928,4,,"protected void writeLexerTestFile(String lexerName, boolean showDFA) {
		ST outputFileST = new ST(
			""#include \\<iostream>\n""
				+ ""\n""
				+ ""#include \""antlr4-runtime.h\""\n""
				+ ""#include \""<lexerName>.h\""\n""
				+ ""\n""
				+ ""#include \""support/StringUtils.h\""\n""
				+ ""\n""
				+ ""using namespace antlr4;\n""
				+ ""\n""
				+ ""int main(int argc, const char* argv[]) {\n""
				+ ""  ANTLRFileStream input(argv[1]);\n""
				+ ""  <lexerName> lexer(&input);\n""
				+ ""  CommonTokenStream tokens(&lexer);\n""
				+ ""  tokens.fill();\n""
				+ ""  for (auto token : tokens.getTokens())\n""
				+ ""    std::cout \\<\\< token->toString() \\<\\< std::endl;\n""
				+ (showDFA ? ""  std::cout \\<\\< lexer.getInterpreter\\<atn::LexerATNSimulator>()->getDFA(Lexer::DEFAULT_MODE).toLexerString();\n"" : ""\n"")
				+ ""  return 0;\n""
				+ ""}\n"");
		outputFileST.add(""lexerName"", lexerName);
		writeFile(tmpdir, ""Test.cpp"", outputFileST.render());
	}",False
57,"writeRecognizer(String,String,String,String,String,boolean,boolean)",Method,,,"org.antlr.v4.test.runtime.cpp.BaseCppTest+writeLexerTestFile(String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+writeLexerTestFile(String,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+writeParserTestFile(String,String,String,String,String,boolean,boolean) org.antlr.v4.test.runtime.cpp.BaseCppTest+writeParserTestFile(String,String,String,String,String,boolean,boolean)",,559,16,31461,953,1,,"public void writeRecognizer(String parserName, String lexerName,
	                            String listenerName, String visitorName,
	                            String parserStartRuleName, boolean debug, boolean trace) {
		if ( parserName==null ) {
			writeLexerTestFile(lexerName, debug);
		}
		else {
			writeParserTestFile(parserName,
			                    lexerName,
			                    listenerName,
			                    visitorName,
			                    parserStartRuleName,
			                    debug,
			                    trace);
		}
	}",False
58,eraseFiles(String),Method,,,java.io.File+File(String) java.io.File+list() java.io.File+list() java.lang.String+endsWith(String) java.lang.String+endsWith(String) java.io.File+delete() java.io.File+File(String) java.io.File+delete(),org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir,287,9,32024,971,4,,"protected void eraseFiles(final String filesEndingWith) {
		File tmpdirF = new File(tmpdir);
		String[] files = tmpdirF.list();
		for(int i = 0; files!=null && i < files.length; i++) {
			if ( files[i].endsWith(filesEndingWith) ) {
				new File(tmpdir+""/""+files[i]).delete();
			}
		}
	}",False
59,eraseFiles(File),Method,eraseTempDir(),,"java.io.File+list() java.io.File+list() java.io.File+delete() java.io.File+File(File,String) java.io.File+delete()",,168,6,32314,981,4,,"protected void eraseFiles(File dir) {
		String[] files = dir.list();
		for(int i = 0; files!=null && i < files.length; i++) {
			new File(dir,files[i]).delete();
		}
	}",True
60,eraseTempDir(),Method,,,org.antlr.v4.test.runtime.cpp.BaseCppTest+shouldEraseTempDir() org.antlr.v4.test.runtime.cpp.BaseCppTest+shouldEraseTempDir() java.io.File+File(String) java.io.File+exists() java.io.File+exists() org.antlr.v4.test.runtime.cpp.BaseCppTest+eraseFiles(File) org.antlr.v4.test.runtime.cpp.BaseCppTest+eraseFiles(File) java.io.File+delete() java.io.File+delete(),org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir,191,10,32485,989,1,,"@Override
	public void eraseTempDir() {
		if (shouldEraseTempDir()) {
			File tmpdirF = new File(tmpdir);
			if (tmpdirF.exists()) {
				eraseFiles(tmpdirF);
				tmpdirF.delete();
			}
		}
	}",True
61,shouldEraseTempDir(),Method,eraseTempDir(),,org.antlr.v4.test.runtime.cpp.BaseCppTest+getPropertyPrefix() org.antlr.v4.test.runtime.cpp.BaseCppTest+getPropertyPrefix() java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.String+length() java.lang.String+length() java.lang.Boolean+getBoolean(String) java.lang.Boolean+getBoolean(String),org.antlr.v4.test.runtime.cpp.BaseCppTest+tmpdir,284,10,32679,999,2,,"private boolean shouldEraseTempDir() {
		if(tmpdir==null)
			return false;
		String propName = getPropertyPrefix() + ""-erase-test-dir"";
		String prop = System.getProperty(propName);
		if (prop != null && prop.length() > 0)
			return Boolean.getBoolean(prop);
		else
			return true;
	}",True
62,getFirstLineOfException(),Method,,,"java.lang.String+split(String) java.lang.String+split(String) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+length() java.lang.String+length() java.lang.String+length() java.lang.String+length()",org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse org.antlr.v4.test.runtime.cpp.BaseCppTest+stderrDuringParse,273,8,32966,1010,1,,"public String getFirstLineOfException() {
		if ( this.stderrDuringParse ==null ) {
			return null;
		}
		String[] lines = this.stderrDuringParse.split(""\n"");
		String prefix=""Exception in thread \""main\"" "";
		return lines[0].substring(prefix.length(),lines[0].length());
	}",False
63,"sortMapToString(Map<K,V>)",Method,,,java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Object+toString() java.lang.Object+toString() java.util.TreeMap+TreeMap(Map) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.util.AbstractMap+toString() java.util.AbstractMap+toString() java.util.AbstractMap+toString() java.util.AbstractMap+toString(),java.lang.System+out java.lang.System+out,974,27,33242,1030,1,"/** 
 * When looking at a result set that consists of a Map/HashTable we cannot rely on the output order, as the hashing algorithm or other aspects of the implementation may be different on different JDKs or platforms. Hence we take the Map, convert the keys to a List, sort them and Stringify the Map, which is a bit of a hack, but guarantees that we get the same order on all systems. We assume that the keys are strings.
 * @param m The Map that contains keys we wish to return in sorted order
 * @return A string that represents all the keys in sorted order.
 */
","/**
	 * When looking at a result set that consists of a Map/HashTable
	 * we cannot rely on the output order, as the hashing algorithm or other aspects
	 * of the implementation may be different on different JDKs or platforms. Hence
	 * we take the Map, convert the keys to a List, sort them and Stringify the Map, which is a
	 * bit of a hack, but guarantees that we get the same order on all systems. We assume that
	 * the keys are strings.
	 *
	 * @param m The Map that contains keys we wish to return in sorted order
	 * @return A string that represents all the keys in sorted order.
	 */
	public <K, V> String sortMapToString(Map<K, V> m) {
		// Pass in crap, and get nothing back
		//
		if  (m == null) {
			return null;
		}

		System.out.println(""Map toString looks like: "" + m.toString());

		// Sort the keys in the Map
		//
		TreeMap<K, V> nset = new TreeMap<K, V>(m);

		System.out.println(""Tree map looks like: "" + nset.toString());
		return nset.toString();
	}",True
64,realElements(List<String>),Method,,,"java.util.List+subList(int,int) java.util.List+subList(int,int) java.util.List+size() java.util.List+size()",org.antlr.v4.runtime.Token+MIN_USER_TOKEN_TYPE,131,3,34219,1047,1,,"public List<String> realElements(List<String> elements) {
		return elements.subList(Token.MIN_USER_TOKEN_TYPE, elements.size());
	}",False
65,"assertNotNullOrEmpty(String,String)",Method,,,java.lang.String+isEmpty() java.lang.String+isEmpty(),,138,4,34353,1051,1,,"public void assertNotNullOrEmpty(String message, String text) {
		assertNotNull(message, text);
		assertFalse(message, text.isEmpty());
	}",False
66,assertNotNullOrEmpty(String),Method,,,java.lang.String+isEmpty() java.lang.String+isEmpty(),,104,4,34494,1056,1,,"public void assertNotNullOrEmpty(String text) {
		assertNotNull(text);
		assertFalse(text.isEmpty());
	}",False
67,IntTokenStream,MemberClass,,,"org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+IntTokenStream(IntegerList) org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+consume() org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+LA(int) org.antlr.v4.runtime.Token+getType() org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+LT(int) org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+LT(int) org.antlr.v4.runtime.Token+getType() org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+mark() org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+index() org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+index() org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+index() org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+release(int) org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+seek(int) org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+seek(int) org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+seek(int) org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+size() org.antlr.v4.runtime.misc.IntegerList+size() org.antlr.v4.runtime.misc.IntegerList+size() org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+getSourceName() org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+LT(int) org.antlr.v4.runtime.misc.IntegerList+size() org.antlr.v4.runtime.misc.IntegerList+size() org.antlr.v4.runtime.CommonToken+CommonToken(int) org.antlr.v4.runtime.CommonToken+CommonToken(int) org.antlr.v4.runtime.misc.IntegerList+get(int) org.antlr.v4.runtime.misc.IntegerList+get(int) org.antlr.v4.runtime.CommonToken+setTokenIndex(int) org.antlr.v4.runtime.CommonToken+setTokenIndex(int) org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+get(int) org.antlr.v4.runtime.CommonToken+CommonToken(int) org.antlr.v4.runtime.misc.IntegerList+get(int) org.antlr.v4.runtime.misc.IntegerList+get(int) org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+getTokenSource() org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+getText() java.lang.UnsupportedOperationException+UnsupportedOperationException(String) org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+getText(Interval) java.lang.UnsupportedOperationException+UnsupportedOperationException(String) org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+getText(RuleContext) java.lang.UnsupportedOperationException+UnsupportedOperationException(String) org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+getText(Token,Token) java.lang.UnsupportedOperationException+UnsupportedOperationException(String)",org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+types org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+p org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+types org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+p org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+p org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+p org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+types org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+p org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+types org.antlr.v4.runtime.Token+EOF org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+types org.antlr.v4.test.runtime.cpp.BaseCppTest.IntTokenStream+types,1568,79,-1,-1,9,,"public static class IntTokenStream implements TokenStream {
		IntegerList types;
		int p=0;
		public IntTokenStream(IntegerList types) { this.types = types; }

		@Override
		public void consume() { p++; }

		@Override
		public int LA(int i) { return LT(i).getType(); }

		@Override
		public int mark() {
			return index();
		}

		@Override
		public int index() { return p; }

		@Override
		public void release(int marker) {
			seek(marker);
		}

		@Override
		public void seek(int index) {
			p = index;
		}

		@Override
		public int size() {
			return types.size();
		}

		@Override
		public String getSourceName() {
			return null;
		}

		@Override
		public Token LT(int i) {
			CommonToken t;
			int rawIndex = p + i - 1;
			if ( rawIndex>=types.size() ) t = new CommonToken(Token.EOF);
			else t = new CommonToken(types.get(rawIndex));
			t.setTokenIndex(rawIndex);
			return t;
		}

		@Override
		public Token get(int i) {
			return new org.antlr.v4.runtime.CommonToken(types.get(i));
		}

		@Override
		public TokenSource getTokenSource() {
			return null;
		}

		@Override
		public String getText() {
			throw new UnsupportedOperationException(""can't give strings"");
		}

		@Override
		public String getText(Interval interval) {
			throw new UnsupportedOperationException(""can't give strings"");
		}

		@Override
		public String getText(RuleContext ctx) {
			throw new UnsupportedOperationException(""can't give strings"");
		}

		@Override
		public String getText(Token start, Token stop) {
			throw new UnsupportedOperationException(""can't give strings"");
		}
	}",False
68,sort(List<T>),Method,,,java.util.ArrayList+ArrayList() java.util.List+addAll(Collection) java.util.List+addAll(Collection) java.util.Collections+sort(List) java.util.Collections+sort(List),,187,7,36172,1142,1,"/** 
 * Sort a list 
 */
","/** Sort a list */
	public <T extends Comparable<? super T>> List<T> sort(List<T> data) {
		List<T> dup = new ArrayList<T>();
		dup.addAll(data);
		Collections.sort(dup);
		return dup;
	}",True
69,"sort(Map<K,V>)",Method,,,"java.util.LinkedHashMap+LinkedHashMap() java.util.ArrayList+ArrayList() java.util.List+addAll(Collection) java.util.List+addAll(Collection) java.util.Map+keySet() java.util.Map+keySet() java.util.Collections+sort(List) java.util.Collections+sort(List) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.Map+get(Object) java.util.Map+get(Object)",,333,11,36362,1150,1,"/** 
 * Return map sorted by key 
 */
","/** Return map sorted by key */
	public <K extends Comparable<? super K>,V> LinkedHashMap<K,V> sort(Map<K,V> data) {
		LinkedHashMap<K,V> dup = new LinkedHashMap<K, V>();
		List<K> keys = new ArrayList<K>();
		keys.addAll(data.keySet());
		Collections.sort(keys);
		for (K k : keys) {
			dup.put(k, data.get(k));
		}
		return dup;
	}",True
