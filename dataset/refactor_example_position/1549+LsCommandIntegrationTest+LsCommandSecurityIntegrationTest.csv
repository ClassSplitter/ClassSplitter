index,name,type,inner invocations,external invocations,calls,visits,length,lines,start location,definition line,modifier,commit,full text,moved,removed
1,createFiles(String),Method,"lsNoAcl() lsMultipleDirs() lsHumanReadable() lsPinned() lsDirectoryAsPlainFileNoAcl() ls() lsrNoAcl() lsr() checkLsWithTimestamp(String,Function<URIStatus,Long>)""","""","alluxio.master.LocalAlluxioCluster+getClient(FileSystemContext) alluxio.master.LocalAlluxioCluster+getClient(FileSystemContext) alluxio.client.file.FileSystemContext+create(Subject,AlluxioConfiguration) alluxio.client.file.FileSystemContext+create(Subject,AlluxioConfiguration) alluxio.security.user.BaseUserState+getSubject() alluxio.security.user.TestUserState+TestUserState(String,AlluxioConfiguration) alluxio.conf.ServerConfiguration+global() alluxio.conf.ServerConfiguration+global() alluxio.security.user.BaseUserState+getSubject() alluxio.conf.ServerConfiguration+global() alluxio.conf.ServerConfiguration+global() alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int)""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mLocalAlluxioCluster""",611,12,1707,47,2,,"private void createFiles(String user) throws Exception {
    FileSystem fs = mFileSystem;
    if (user != null) {
      fs = mLocalAlluxioCluster.getClient(FileSystemContext
          .create(new TestUserState(user, ServerConfiguration.global()).getSubject(),
              ServerConfiguration.global()));
    }
    FileSystemTestUtils.createByteFile(fs, ""/testRoot/testFileA"", WritePType.MUST_CACHE, 10);
    FileSystemTestUtils
        .createByteFile(fs, ""/testRoot/testDir/testFileB"", WritePType.MUST_CACHE, 20);
    FileSystemTestUtils.createByteFile(fs, ""/testRoot/testFileC"", WritePType.THROUGH, 30);
  }",False,False
2,lsNoAcl(),Method,"""","""","alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",610,15,2322,65,1,"/** 
 * Tests ls command when security is not enabled.
 */
","/**
   * Tests ls command when security is not enabled.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsNoAcl() throws Exception {
    createFiles(null);
    mFsShell.run(""ls"", ""/testRoot"");
    checkOutput(
        ""              1   NOT_PERSISTED .+ .+  DIR /testRoot/testDir"",
        ""             10   NOT_PERSISTED .+ .+ 100% /testRoot/testFileA"",
        ""             30       PERSISTED .+ .+   0% /testRoot/testFileC"");
  }",False,False
3,lsMultipleDirs(),Method,"""","""","alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",760,16,2936,81,1,"/** 
 * Tests ls command when arguments are multiple directories and security is not enabled.
 */
","/**
   * Tests ls command when arguments are multiple directories and security is not enabled.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsMultipleDirs() throws Exception {
    createFiles(null);
    mFsShell.run(""ls"", ""/testRoot"", ""/testRoot/testDir/"");
    checkOutput(
        ""              1   NOT_PERSISTED .+ .+  DIR /testRoot/testDir"",
        ""             10   NOT_PERSISTED .+ .+ 100% /testRoot/testFileA"",
        ""             30       PERSISTED .+ .+   0% /testRoot/testFileC"",
        ""             20   NOT_PERSISTED .+ .+ 100% /testRoot/testDir/testFileB"");
  }",False,False
4,lsHumanReadable(),Method,"""","""","alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",627,15,3700,98,1,"/** 
 * Tests ls -h command when security is not enabled.
 */
","/**
   * Tests ls -h command when security is not enabled.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsHumanReadable() throws Exception {
    createFiles(null);
    mFsShell.run(""ls"", ""-h"", ""/testRoot"");
    checkOutput(
        ""              1   NOT_PERSISTED .+ .+  DIR /testRoot/testDir"",
        ""            10B   NOT_PERSISTED .+ .+ 100% /testRoot/testFileA"",
        ""            30B       PERSISTED .+ .+   0% /testRoot/testFileC"");
  }",False,False
5,lsPinned(),Method,"""","""","alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.AlluxioURI+AlluxioURI(String) alluxio.AlluxioURI+AlluxioURI(String) alluxio.client.file.FileSystem+setAttribute(AlluxioURI,SetAttributePOptions) alluxio.client.file.FileSystem+setAttribute(AlluxioURI,SetAttributePOptions) alluxio.client.file.FileSystem+setAttribute(AlluxioURI,SetAttributePOptions) alluxio.client.file.FileSystem+setAttribute(AlluxioURI,SetAttributePOptions) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",910,20,4331,114,1,"/** 
 * Tests ls -p command when security is not enabled.
 */
","/**
   * Tests ls -p command when security is not enabled.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsPinned() throws Exception {
    createFiles(null);
    AlluxioURI fileURI1 = new AlluxioURI(""/testRoot/testDir/testFileB"");
    AlluxioURI fileURI2 = new AlluxioURI(""/testRoot/testFileA"");
    mFileSystem.setAttribute(fileURI1,
        SetAttributePOptions.newBuilder().setPinned(true).build());
    mFileSystem.setAttribute(fileURI2,
        SetAttributePOptions.newBuilder().setPinned(true).build());
    mFsShell.run(""ls"", ""-pR"",  ""/testRoot"");
    checkOutput(
        ""             20   NOT_PERSISTED .+ .+ 100% /testRoot/testDir/testFileB"",
        ""             10   NOT_PERSISTED .+ .+ 100% /testRoot/testFileA"");
  }",False,False
6,lsDirectoryAsPlainFileNoAcl(),Method,"""","""","alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",474,12,5245,135,1,"/** 
 * Tests ls -d command when security is not enabled.
 */
","/**
   * Tests ls -d command when security is not enabled.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsDirectoryAsPlainFileNoAcl() throws Exception {
    createFiles(null);
    mFsShell.run(""ls"", ""-d"", ""/testRoot"");
    checkOutput(""              3       PERSISTED .+ .+  DIR /testRoot"");
  }",False,False
7,lsRootNoAcl(),Method,"""","""","alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",441,11,5723,148,1,"/** 
 * Tests ls -d command on root directory when security is not enabled.
 */
","/**
   * Tests ls -d command on root directory when security is not enabled.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsRootNoAcl() throws Exception {
    mFsShell.run(""ls"", ""-d"", ""/"");
    checkOutput(""              0       PERSISTED .+ .+  DIR /    "");
  }",False,False
8,ls(),Method,"""","""","alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",1054,20,6168,160,1,"/** 
 * Tests ls command when security is enabled.
 */
","/**
   * Tests ls command when security is enabled.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""true"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""SIMPLE"",
          PropertyKey.Name.SECURITY_GROUP_MAPPING_CLASS,
          ""alluxio.security.group.provider.IdentityUserGroupsMapping"",
          PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_SUPERGROUP, ""test_user_ls""})
  public void ls() throws Exception {
    createFiles(""test_user_ls"");
    mFsShell.run(""ls"", ""/testRoot"");
    // CHECKSTYLE.OFF: LineLengthExceed - Improve readability
    checkOutput(
        ""drwxr-xr-x  test_user_ls   test_user_ls                 1   NOT_PERSISTED .+ .+  DIR /testRoot/testDir"",
        ""-rw-r--r--  test_user_ls   test_user_ls                10   NOT_PERSISTED .+ .+ 100% /testRoot/testFileA"",
        ""-rw-r--r--  test_user_ls   test_user_ls                30       PERSISTED .+ .+   0% /testRoot/testFileC"");
    // CHECKSTYLE.ON: LineLengthExceed
  }",True,True
9,lsWildcardNoAcl(),Method,"""","""","alluxio.client.cli.fs.FileSystemShellUtilsTest+resetFileHierarchy(FileSystem) alluxio.client.cli.fs.FileSystemShellUtilsTest+resetFileHierarchy(FileSystem) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) java.io.ByteArrayOutputStream+reset() java.io.ByteArrayOutputStream+reset() alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell alluxio.client.cli.fs.AbstractShellIntegrationTest+mOutput alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",1079,25,7226,181,1,"/** 
 * Tests ls command with wildcard when security is not enabled.
 */
","/**
   * Tests ls command with wildcard when security is not enabled.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsWildcardNoAcl() throws Exception {
    String testDir = FileSystemShellUtilsTest.resetFileHierarchy(mFileSystem);

    mFsShell.run(""ls"", testDir + ""/*/foo*"");
    checkOutput(
        ""             30   NOT_PERSISTED .+ .+ 100% /testDir/bar/foobar3"",
        ""             10   NOT_PERSISTED .+ .+ 100% /testDir/foo/foobar1"",
        ""             20   NOT_PERSISTED .+ .+ 100% /testDir/foo/foobar2"");

    mOutput.reset();

    mFsShell.run(""ls"", testDir + ""/*"");
    checkOutput(
        ""             30   NOT_PERSISTED .+ .+ 100% /testDir/bar/foobar3"",
        ""             10   NOT_PERSISTED .+ .+ 100% /testDir/foo/foobar1"",
        ""             20   NOT_PERSISTED .+ .+ 100% /testDir/foo/foobar2"",
        ""             40   NOT_PERSISTED .+ .+ 100% /testDir/foobar4"");
  }",False,False
10,lsWildcard(),Method,"""","""","alluxio.master.LocalAlluxioCluster+getClient(FileSystemContext) alluxio.master.LocalAlluxioCluster+getClient(FileSystemContext) alluxio.client.file.FileSystemContext+create(Subject,AlluxioConfiguration) alluxio.client.file.FileSystemContext+create(Subject,AlluxioConfiguration) alluxio.security.user.BaseUserState+getSubject() alluxio.security.user.TestUserState+TestUserState(String,AlluxioConfiguration) alluxio.conf.ServerConfiguration+global() alluxio.conf.ServerConfiguration+global() alluxio.security.user.BaseUserState+getSubject() alluxio.conf.ServerConfiguration+global() alluxio.conf.ServerConfiguration+global() alluxio.client.cli.fs.FileSystemShellUtilsTest+resetFileHierarchy(FileSystem) alluxio.client.cli.fs.FileSystemShellUtilsTest+resetFileHierarchy(FileSystem) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) java.io.ByteArrayOutputStream+reset() java.io.ByteArrayOutputStream+reset() alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mLocalAlluxioCluster alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell alluxio.client.cli.fs.AbstractShellIntegrationTest+mOutput alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",1970,33,8309,207,1,"/** 
 * Tests ls command with wildcard when security is enabled.
 */
","/**
   * Tests ls command with wildcard when security is enabled.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""true"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""SIMPLE"",
          PropertyKey.Name.SECURITY_GROUP_MAPPING_CLASS,
          ""alluxio.security.group.provider.IdentityUserGroupsMapping"",
          PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_SUPERGROUP,
          ""test_user_lsWildcard""})
  public void lsWildcard() throws Exception {
    FileSystem fs = mLocalAlluxioCluster.getClient(FileSystemContext.create(
        new TestUserState(""test_user_lsWildcard"", ServerConfiguration.global()).getSubject(),
        ServerConfiguration.global()));

    String testDir = FileSystemShellUtilsTest.resetFileHierarchy(fs);
    mFsShell.run(""ls"", testDir + ""/*/foo*"");
    // CHECKSTYLE.OFF: LineLengthExceed - Improve readability
    checkOutput(
        ""-rw-r--r--  test_user_lsWildcardtest_user_lsWildcard             30   NOT_PERSISTED .+ .+ 100% /testDir/bar/foobar3"",
        ""-rw-r--r--  test_user_lsWildcardtest_user_lsWildcard             10   NOT_PERSISTED .+ .+ 100% /testDir/foo/foobar1"",
        ""-rw-r--r--  test_user_lsWildcardtest_user_lsWildcard             20   NOT_PERSISTED .+ .+ 100% /testDir/foo/foobar2"");
    mOutput.reset();

    mFsShell.run(""ls"", testDir + ""/*"");
    checkOutput(
        ""-rw-r--r--  test_user_lsWildcardtest_user_lsWildcard             30   NOT_PERSISTED .+ .+ 100% /testDir/bar/foobar3"",
        ""-rw-r--r--  test_user_lsWildcardtest_user_lsWildcard             10   NOT_PERSISTED .+ .+ 100% /testDir/foo/foobar1"",
        ""-rw-r--r--  test_user_lsWildcardtest_user_lsWildcard             20   NOT_PERSISTED .+ .+ 100% /testDir/foo/foobar2"",
        ""-rw-r--r--  test_user_lsWildcardtest_user_lsWildcard             40   NOT_PERSISTED .+ .+ 100% /testDir/foobar4"");
    // CHECKSTYLE.ON: LineLengthExceed
  }",True,True
11,lsrNoAcl(),Method,"""","""","alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",716,16,10283,241,1,"/** 
 * Tests ls -R command with wildcard when security is not enabled.
 */
","/**
   * Tests ls -R command with wildcard when security is not enabled.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsrNoAcl() throws Exception {
    createFiles(null);
    mFsShell.run(""ls"", ""-R"", ""/testRoot"");
    checkOutput(
        ""              1   NOT_PERSISTED .+ .+  DIR /testRoot/testDir"",
        ""             20   NOT_PERSISTED .+ .+ 100% /testRoot/testDir/testFileB"",
        ""             10   NOT_PERSISTED .+ .+ 100% /testRoot/testFileA"",
        ""             30       PERSISTED .+ .+   0% /testRoot/testFileC"");
  }",False,False
12,lsr(),Method,"""","""","alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",1214,22,11003,258,1,"/** 
 * Tests ls -R command with wildcard when security is enabled.
 */
","/**
   * Tests ls -R command with wildcard when security is enabled.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""true"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""SIMPLE"",
          PropertyKey.Name.SECURITY_GROUP_MAPPING_CLASS,
          ""alluxio.security.group.provider.IdentityUserGroupsMapping"",
          PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_SUPERGROUP,
          ""test_user_lsr""})
  public void lsr() throws Exception {
    createFiles(""test_user_lsr"");
    mFsShell.run(""ls"", ""-R"", ""/testRoot"");
    // CHECKSTYLE.OFF: LineLengthExceed - Improve readability
    checkOutput(
        ""drwxr-xr-x  test_user_lsr  test_user_lsr                1   NOT_PERSISTED .+ .+  DIR /testRoot/testDir"",
        ""-rw-r--r--  test_user_lsr  test_user_lsr               20   NOT_PERSISTED .+ .+ 100% /testRoot/testDir/testFileB"",
        ""-rw-r--r--  test_user_lsr  test_user_lsr               10   NOT_PERSISTED .+ .+ 100% /testRoot/testFileA"",
        ""-rw-r--r--  test_user_lsr  test_user_lsr               30       PERSISTED .+ .+   0% /testRoot/testFileC"");
    // CHECKSTYLE.ON: LineLengthExceed
  }",True,True
13,lsWithFormatSpecifierCharacter(),Method,"""","""","alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",817,15,12221,281,1,"/** 
 * Tests ls command with a file where the file name includes a specifier character.
 */
","/**
   * Tests ls command with a file where the file name includes a specifier character.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsWithFormatSpecifierCharacter() throws IOException, AlluxioException {
    String fileName = ""/localhost%2C61764%2C1476207067267..meta.1476207073442.meta"";
    FileSystemTestUtils.createByteFile(mFileSystem, fileName, WritePType.MUST_CACHE, 10);
    mFsShell.run(""ls"", ""/"");
    // CHECKSTYLE.OFF: LineLengthExceed - Improve readability
    checkOutput(""             10   NOT_PERSISTED .+ .+ 100% /localhost%2C61764%2C1476207067267..meta.1476207073442.meta"");
    // CHECKSTYLE.ON: LineLengthExceed
  }",False,False
14,lsWithSortByPath(),Method,"""","""","alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",999,20,13042,297,1,"/** 
 * Tests ls command with sort by path option.
 */
","/**
   * Tests ls command with sort by path option.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
          confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
                  PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsWithSortByPath() throws IOException, AlluxioException {
    FileSystemTestUtils
            .createByteFile(mFileSystem, ""/testRoot/testLongFile"", WritePType.MUST_CACHE, 100);
    FileSystemTestUtils
            .createByteFile(mFileSystem, ""/testRoot/testFileZ"", WritePType.MUST_CACHE, 10);
    FileSystemTestUtils
            .createByteFile(mFileSystem, ""/testRoot/testFileA"", WritePType.MUST_CACHE, 50);
    mFsShell.run(""ls"", ""--sort"", ""path"", ""/testRoot"");
    checkOutput(
        ""             50   NOT_PERSISTED .+ .+ 100% /testRoot/testFileA"",
        ""             10   NOT_PERSISTED .+ .+ 100% /testRoot/testFileZ"",
        ""            100   NOT_PERSISTED .+ .+ 100% /testRoot/testLongFile"");
  }",False,False
15,lsWithSortByAccessTime(),Method,"""","""","alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+loadFile(FileSystem,String) alluxio.client.file.FileSystemTestUtils+loadFile(FileSystem,String) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",1058,22,14045,318,1,"/** 
 * Tests ls command with sort by access time option.
 */
","/**
   * Tests ls command with sort by access time option.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL"",
          PropertyKey.Name.MASTER_FILE_ACCESS_TIME_UPDATE_PRECISION, ""0""})
  public void lsWithSortByAccessTime() throws IOException, AlluxioException {
    String oldFileRecentlyAccessed = ""/testRoot/testFileRecent"";
    String oldFileName = ""/testRoot/testFile"";
    FileSystemTestUtils
        .createByteFile(mFileSystem, oldFileRecentlyAccessed, WritePType.MUST_CACHE, 10);
    FileSystemTestUtils
        .createByteFile(mFileSystem, oldFileName, WritePType.MUST_CACHE, 10);

    FileSystemTestUtils.loadFile(mFileSystem, oldFileRecentlyAccessed);
    mFsShell.run(""ls"", ""--sort"", ""lastAccessTime"", ""/testRoot"");
    checkOutput(
        ""             10   NOT_PERSISTED .+ .+ 100% "" + oldFileName,
        ""             10   NOT_PERSISTED .+ .+ 100% "" + oldFileRecentlyAccessed);
  }",False,False
16,lsWithSortByCreationTime(),Method,"""","""","alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+loadFile(FileSystem,String) alluxio.client.file.FileSystemTestUtils+loadFile(FileSystem,String) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",1060,22,15107,341,1,"/** 
 * Tests ls command with sort by creation time option.
 */
","/**
   * Tests ls command with sort by creation time option.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL"",
          PropertyKey.Name.MASTER_FILE_ACCESS_TIME_UPDATE_PRECISION, ""0""})
  public void lsWithSortByCreationTime() throws IOException, AlluxioException {
    String oldFileRecentlyAccessed = ""/testRoot/testFileRecent"";
    String oldFileName = ""/testRoot/testFile"";
    FileSystemTestUtils
        .createByteFile(mFileSystem, oldFileRecentlyAccessed, WritePType.MUST_CACHE, 10);
    FileSystemTestUtils
        .createByteFile(mFileSystem, oldFileName, WritePType.MUST_CACHE, 10);

    FileSystemTestUtils.loadFile(mFileSystem, oldFileRecentlyAccessed);
    mFsShell.run(""ls"", ""--sort"", ""creationTime"", ""/testRoot"");
    checkOutput(
        ""             10   NOT_PERSISTED .+ .+ 100% "" + oldFileRecentlyAccessed,
        ""             10   NOT_PERSISTED .+ .+ 100% "" + oldFileName);
  }",False,False
17,lsWithSortBySize(),Method,"""","""","alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",1007,20,16171,364,1,"/** 
 * Tests ls command with sort by size option.
 */
","/**
   * Tests ls command with sort by size option.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
          confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
                  PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsWithSortBySize() throws IOException, AlluxioException {
    FileSystemTestUtils
            .createByteFile(mFileSystem, ""/testRoot/testFileA"", WritePType.MUST_CACHE, 50, 50);
    FileSystemTestUtils
            .createByteFile(mFileSystem, ""/testRoot/testFileZ"", WritePType.MUST_CACHE, 10, 10);
    FileSystemTestUtils
            .createByteFile(mFileSystem, ""/testRoot/testLongFile"", WritePType.MUST_CACHE, 100, 100);
    mFsShell.run(""ls"", ""--sort"", ""size"", ""/testRoot"");
    checkOutput(
        ""             10   NOT_PERSISTED .+ .+ 100% /testRoot/testFileZ"",
        ""             50   NOT_PERSISTED .+ .+ 100% /testRoot/testFileA"",
        ""            100   NOT_PERSISTED .+ .+ /testRoot/testLongFile"");
  }",False,False
18,lsWithSortBySizeAndReverse(),Method,"""","""","alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",1046,20,17182,385,1,"/** 
 * Tests ls command with sort by size and reverse order option.
 */
","/**
   * Tests ls command with sort by size and reverse order option.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
          confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
                  PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsWithSortBySizeAndReverse() throws IOException, AlluxioException {
    FileSystemTestUtils
            .createByteFile(mFileSystem, ""/testRoot/testFileA"", WritePType.MUST_CACHE, 50, 50);
    FileSystemTestUtils
            .createByteFile(mFileSystem, ""/testRoot/testFileZ"", WritePType.MUST_CACHE, 10, 10);
    FileSystemTestUtils
            .createByteFile(mFileSystem, ""/testRoot/testLongFile"", WritePType.MUST_CACHE, 100, 100);
    mFsShell.run(""ls"", ""--sort"", ""size"", ""-r"", ""/testRoot"");
    checkOutput(
        ""            100   NOT_PERSISTED .+ .+ 100% /testRoot/testLongFile"",
        ""             50   NOT_PERSISTED .+ .+ 100% /testRoot/testFileA"",
        ""             10   NOT_PERSISTED .+ .+ 100% /testRoot/testFileZ"");
  }",False,False
19,lsWithInvalidSortOption(),Method,"""","""","alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) java.io.ByteArrayOutputStream+toString() java.io.ByteArrayOutputStream+toString()""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell alluxio.client.cli.fs.AbstractShellIntegrationTest+mOutput""",658,14,18232,406,1,"/** 
 * Tests ls command with an invalid sort option.
 */
","/**
   * Tests ls command with an invalid sort option.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
          confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
                  PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsWithInvalidSortOption() throws IOException, AlluxioException {
    FileSystemTestUtils.createByteFile(mFileSystem, ""/testRoot/testFileA"",
        WritePType.MUST_CACHE, 50, 50);
    mFsShell.run(""ls"", ""--sort"", ""unknownfield"", ""/testRoot"");
    String expected = ""Invalid sort option `unknownfield` for --sort\n"";
    assertEquals(expected, mOutput.toString());
  }",False,False
20,lsReverseWithoutSort(),Method,"""","""","alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",1010,20,18894,421,1,"/** 
 * Tests ls command with reverse sort order option.
 */
","/**
   * Tests ls command with reverse sort order option.
   */
  @Test
  @LocalAlluxioClusterResource.Config(
          confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""false"",
                  PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""NOSASL""})
  public void lsReverseWithoutSort() throws IOException, AlluxioException {
    FileSystemTestUtils
            .createByteFile(mFileSystem, ""/testRoot/testFileA"", WritePType.MUST_CACHE, 50, 50);
    FileSystemTestUtils
            .createByteFile(mFileSystem, ""/testRoot/testFileZ"", WritePType.MUST_CACHE, 10, 10);
    FileSystemTestUtils
            .createByteFile(mFileSystem, ""/testRoot/testLongFile"", WritePType.MUST_CACHE, 100, 100);
    mFsShell.run(""ls"", ""-r"", ""/testRoot"");
    checkOutput(
        ""            100   NOT_PERSISTED .+ .+ 100% /testRoot/testLongFile"",
        ""             10   NOT_PERSISTED .+ .+ 100% /testRoot/testFileZ"",
        ""             50   NOT_PERSISTED .+ .+ 100% /testRoot/testFileA"");
  }",False,False
21,getDisplayTime(long),Method,"checkLsWithTimestamp(String,Function<URIStatus,Long>) checkLsWithTimestamp(String,Function<URIStatus,Long>) checkLsWithTimestamp(String,Function<URIStatus,Long>)""","""","alluxio.conf.ServerConfiguration+get(PropertyKey) alluxio.conf.ServerConfiguration+get(PropertyKey) alluxio.util.CommonUtils+convertMsToDate(long,String) alluxio.util.CommonUtils+convertMsToDate(long,String)""","alluxio.conf.PropertyKey+USER_DATE_FORMAT_PATTERN""",205,4,19908,437,2,,"private String getDisplayTime(long timestamp) {
    String formatString = ServerConfiguration.get(PropertyKey.USER_DATE_FORMAT_PATTERN);
    return CommonUtils.convertMsToDate(timestamp, formatString);
  }",True,True
22,lsWithCreationTime(),Method,"""","""","alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkLsWithTimestamp(String,Function<URIStatus,Long>) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkLsWithTimestamp(String,Function<URIStatus,Long>)""","""",628,12,20117,444,1,,"@Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""true"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""SIMPLE"",
          PropertyKey.Name.SECURITY_GROUP_MAPPING_CLASS,
          ""alluxio.security.group.provider.IdentityUserGroupsMapping"",
          PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_SUPERGROUP, ""test_user_ls"",
          PropertyKey.Name.MASTER_FILE_ACCESS_TIME_UPDATE_PRECISION, ""0""
      })
  public void lsWithCreationTime() throws Exception {
    checkLsWithTimestamp(""creationTime"", URIStatus::getCreationTimeMs);
  }",True,True
23,lsWithModificationTime(),Method,"""","""","alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkLsWithTimestamp(String,Function<URIStatus,Long>) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkLsWithTimestamp(String,Function<URIStatus,Long>)""","""",648,12,20749,457,1,,"@Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""true"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""SIMPLE"",
          PropertyKey.Name.SECURITY_GROUP_MAPPING_CLASS,
          ""alluxio.security.group.provider.IdentityUserGroupsMapping"",
          PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_SUPERGROUP, ""test_user_ls"",
          PropertyKey.Name.MASTER_FILE_ACCESS_TIME_UPDATE_PRECISION, ""0""
      })
  public void lsWithModificationTime() throws Exception {
    checkLsWithTimestamp(""lastModificationTime"", URIStatus::getLastModificationTimeMs);
  }",True,True
24,lsWithAccessTime(),Method,"""","""","alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkLsWithTimestamp(String,Function<URIStatus,Long>) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkLsWithTimestamp(String,Function<URIStatus,Long>)""","""",630,12,21401,470,1,,"@Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""true"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""SIMPLE"",
          PropertyKey.Name.SECURITY_GROUP_MAPPING_CLASS,
          ""alluxio.security.group.provider.IdentityUserGroupsMapping"",
          PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_SUPERGROUP, ""test_user_ls"",
          PropertyKey.Name.MASTER_FILE_ACCESS_TIME_UPDATE_PRECISION, ""0""
      })
  public void lsWithAccessTime() throws Exception {
    checkLsWithTimestamp(""lastAccessTime"", URIStatus::getLastAccessTimeMs);
  }",True,True
25,"checkLsWithTimestamp(String,Function<URIStatus,Long>)",Method,"lsWithCreationTime() lsWithModificationTime() lsWithAccessTime()""","""","alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.client.cli.fs.command.LsCommandIntegrationTest+createFiles(String) alluxio.client.file.FileSystem+listStatus(AlluxioURI) alluxio.client.file.FileSystem+listStatus(AlluxioURI) alluxio.AlluxioURI+AlluxioURI(String) alluxio.client.file.FileSystemTestUtils+loadFile(FileSystem,String) alluxio.client.file.FileSystemTestUtils+loadFile(FileSystem,String) alluxio.client.file.FileSystemTestUtils+loadFile(FileSystem,String) alluxio.client.file.FileSystemTestUtils+loadFile(FileSystem,String) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) java.util.function.Function+apply(T) java.util.function.Function+apply(T) alluxio.client.file.FileSystem+getStatus(AlluxioURI) alluxio.client.file.FileSystem+getStatus(AlluxioURI) alluxio.AlluxioURI+AlluxioURI(String) java.util.function.Function+apply(T) java.util.function.Function+apply(T) alluxio.client.file.FileSystem+getStatus(AlluxioURI) alluxio.client.file.FileSystem+getStatus(AlluxioURI) alluxio.AlluxioURI+AlluxioURI(String) java.util.function.Function+apply(T) java.util.function.Function+apply(T) alluxio.client.file.FileSystem+getStatus(AlluxioURI) alluxio.client.file.FileSystem+getStatus(AlluxioURI) alluxio.AlluxioURI+AlluxioURI(String) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+getDisplayTime(long) alluxio.client.cli.fs.command.LsCommandIntegrationTest+getDisplayTime(long) alluxio.client.cli.fs.command.LsCommandIntegrationTest+getDisplayTime(long) alluxio.client.cli.fs.command.LsCommandIntegrationTest+getDisplayTime(long) alluxio.client.cli.fs.command.LsCommandIntegrationTest+getDisplayTime(long) alluxio.client.cli.fs.command.LsCommandIntegrationTest+getDisplayTime(long)""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem alluxio.client.cli.fs.AbstractFileSystemShellTest+mFileSystem""",1322,20,22035,481,2,,"private void checkLsWithTimestamp(String parameter, Function<URIStatus, Long> timestampFunc)
      throws Exception {
    createFiles(""test_user_ls"");
    String testDir = ""/testRoot/testDir"";
    String testFileA = ""/testRoot/testFileA"";
    String testFileC = ""/testRoot/testFileC"";
    mFileSystem.listStatus(new AlluxioURI(testDir));
    FileSystemTestUtils.loadFile(mFileSystem, testFileA);
    FileSystemTestUtils.loadFile(mFileSystem, testFileC);
    mFsShell.run(""ls"", ""--timestamp"", parameter, ""/testRoot"");
    long time1 = timestampFunc.apply(mFileSystem.getStatus(new AlluxioURI(testDir)));
    long time2 = timestampFunc.apply(mFileSystem.getStatus(new AlluxioURI(testFileA)));
    long time3 = timestampFunc.apply(mFileSystem.getStatus(new AlluxioURI(testFileC)));
    // CHECKSTYLE.OFF: LineLengthExceed - Improve readability
    checkOutput(
        ""drwxr-xr-x  test_user_ls   test_user_ls                 1   NOT_PERSISTED "" +  getDisplayTime(time1) + ""  DIR /testRoot/testDir"",
        ""-rw-r--r--  test_user_ls   test_user_ls                10   NOT_PERSISTED "" +  getDisplayTime(time2) + "" 100% /testRoot/testFileA"",
        ""-rw-r--r--  test_user_ls   test_user_ls                30       PERSISTED "" +  getDisplayTime(time3) + "" 100% /testRoot/testFileC"");
    // CHECKSTYLE.ON: LineLengthExceed
  }",True,True
26,lsWithExtendedAcl(),Method,"""","""","alluxio.master.LocalAlluxioCluster+getClient(FileSystemContext) alluxio.master.LocalAlluxioCluster+getClient(FileSystemContext) alluxio.client.file.FileSystemContext+create(Subject,AlluxioConfiguration) alluxio.client.file.FileSystemContext+create(Subject,AlluxioConfiguration) alluxio.security.user.BaseUserState+getSubject() alluxio.security.user.TestUserState+TestUserState(String,AlluxioConfiguration) alluxio.conf.ServerConfiguration+global() alluxio.conf.ServerConfiguration+global() alluxio.security.user.BaseUserState+getSubject() alluxio.conf.ServerConfiguration+global() alluxio.conf.ServerConfiguration+global() alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.client.file.FileSystemTestUtils+createByteFile(FileSystem,String,WritePType,int,long) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) java.io.ByteArrayOutputStream+reset() java.io.ByteArrayOutputStream+reset() alluxio.client.file.FileSystem+setAcl(AlluxioURI,SetAclAction,List<AclEntry>) alluxio.client.file.FileSystem+setAcl(AlluxioURI,SetAclAction,List<AclEntry>) alluxio.AlluxioURI+AlluxioURI(String) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) alluxio.security.authorization.AclEntry+fromCliString(String) alluxio.security.authorization.AclEntry+fromCliString(String) alluxio.client.file.FileSystem+setAcl(AlluxioURI,SetAclAction,List<AclEntry>) alluxio.client.file.FileSystem+setAcl(AlluxioURI,SetAclAction,List<AclEntry>) alluxio.AlluxioURI+AlluxioURI(String) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) alluxio.security.authorization.AclEntry+fromCliString(String) alluxio.security.authorization.AclEntry+fromCliString(String) alluxio.cli.AbstractShell+run(String[]) alluxio.cli.AbstractShell+run(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[]) alluxio.client.cli.fs.command.LsCommandIntegrationTest+checkOutput(String[])""","alluxio.client.cli.fs.AbstractFileSystemShellTest+mLocalAlluxioCluster alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell alluxio.client.cli.fs.AbstractShellIntegrationTest+mOutput alluxio.client.cli.fs.AbstractFileSystemShellTest+mFsShell""",2102,38,23361,504,1,,"@Test
  @LocalAlluxioClusterResource.Config(
      confParams = {PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_ENABLED, ""true"",
          PropertyKey.Name.SECURITY_AUTHENTICATION_TYPE, ""SIMPLE"",
          PropertyKey.Name.SECURITY_GROUP_MAPPING_CLASS,
          ""alluxio.security.group.provider.IdentityUserGroupsMapping"",
          PropertyKey.Name.SECURITY_AUTHORIZATION_PERMISSION_SUPERGROUP, ""test_user_extended""})
  public void lsWithExtendedAcl() throws IOException, AlluxioException {
    int size = 50;

    FileSystem fs = mLocalAlluxioCluster.getClient(FileSystemContext
        .create(new TestUserState(""test_user_extended"", ServerConfiguration.global()).getSubject(),
            ServerConfiguration.global()));
    FileSystemTestUtils.createByteFile(fs, ""/testRoot/testDir/testFileB"",
        WritePType.MUST_CACHE, 20);
    FileSystemTestUtils.createByteFile(fs, ""/testRoot/testFile"",
        WritePType.MUST_CACHE, size, size);

    mFsShell.run(""ls"", ""--sort"", ""path"", ""/testRoot"");
    // CHECKSTYLE.OFF: LineLengthExceed - Improve readability
    checkOutput(
        ""drwxr-xr-x  test_user_extendedtest_user_extended              1   NOT_PERSISTED .+ .+ DIR /testRoot/testDir"",
        ""-rw-r--r--  test_user_extendedtest_user_extended             50   NOT_PERSISTED .+ .+ 100% /testRoot/testFile"");
    // CHECKSTYLE.ON: LineLengthExceed
    mOutput.reset();

    fs.setAcl(new AlluxioURI(""/testRoot/testDir""), SetAclAction.MODIFY,
        Arrays.asList(AclEntry.fromCliString(""default:user:nameduser:rwx"")));
    fs.setAcl(new AlluxioURI(""/testRoot/testFile""), SetAclAction.MODIFY,
        Arrays.asList(AclEntry.fromCliString(""user:nameduser:rwx"")));

    mFsShell.run(""ls"", ""--sort"", ""path"", ""/testRoot"");
    // CHECKSTYLE.OFF: LineLengthExceed - Improve readability
    checkOutput(
        ""drwxr-xr-x\\+ test_user_extendedtest_user_extended              1   NOT_PERSISTED .+ .+  DIR /testRoot/testDir"",
        ""-rw-r--r--\\+ test_user_extendedtest_user_extended             50   NOT_PERSISTED .+ .+ 100% /testRoot/testFile"");
    // CHECKSTYLE.ON: LineLengthExceed
  }",True,True
27,checkOutput(String),Method,"""","""","java.lang.String+split(String) java.io.ByteArrayOutputStream+toString() java.io.ByteArrayOutputStream+toString() java.lang.String+split(String) java.io.ByteArrayOutputStream+toString() java.io.ByteArrayOutputStream+toString() java.io.ByteArrayOutputStream+toString() java.io.ByteArrayOutputStream+toString()""","alluxio.client.cli.fs.AbstractShellIntegrationTest+mOutput alluxio.client.cli.fs.AbstractShellIntegrationTest+mOutput alluxio.client.cli.fs.AbstractShellIntegrationTest+mOutput""",364,7,25467,541,2,,"private void checkOutput(String... linePatterns) {
    String[] actualLines = mOutput.toString().split(""\n"");
    assertEquals(""Output: "" + mOutput.toString(), linePatterns.length, actualLines.length);
    for (int i = 0; i < linePatterns.length; i++) {
      assertThat(""mOutput: "" + mOutput.toString(), actualLines[i], matchesPattern(linePatterns[i]));
    }
  }",False,False
