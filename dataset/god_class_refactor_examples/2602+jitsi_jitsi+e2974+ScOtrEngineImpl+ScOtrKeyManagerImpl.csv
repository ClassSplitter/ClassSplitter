index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,listeners,Field,,,,,89,2,2,,"private List<ScOtrEngineListener> listeners =
        new Vector<ScOtrEngineListener>();",False
2,addListener(ScOtrEngineListener),Method,,,java.util.List+add(E) java.util.List+add(E),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,87,4,1,,"public void addListener(ScOtrEngineListener l)
    {
        listeners.add(l);
    }",False
3,removeListener(ScOtrEngineListener),Method,,,java.util.List+remove(Object) java.util.List+remove(Object),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,93,4,1,,"public void removeListener(ScOtrEngineListener l)
    {
        listeners.remove(l);
    }",False
4,injectedMessageUIDs,Field,,,,,64,1,2,,private List<String> injectedMessageUIDs = new Vector<String>();,False
5,isMessageUIDInjected(String),Method,,,java.util.List+contains(Object) java.util.List+contains(Object),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+injectedMessageUIDs,114,4,1,,"public boolean isMessageUIDInjected(String mUID)
    {
        return injectedMessageUIDs.contains(mUID);
    }",False
6,ScOtrKeyManager,MemberClass,,,net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.ScOtrKeyManager+getKeyPair(SessionID) net.java.otr4j.session.SessionID+getAccountID() net.java.otr4j.session.SessionID+getAccountID() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadKeyPair(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadKeyPair(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+generateKeyPair(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+generateKeyPair(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadKeyPair(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadKeyPair(String),,385,13,0,,"class ScOtrKeyManager
        implements OtrKeyManager
    {
        public KeyPair getKeyPair(SessionID sessionID)
        {
            String accountID = sessionID.getAccountID();
            KeyPair keyPair = loadKeyPair(accountID);
            if (keyPair == null)
                generateKeyPair(accountID);

            return loadKeyPair(accountID);
        }
    }",False
7,ScOtrEngineHost,MemberClass,,,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.ScOtrEngineHost+showWarning(SessionID,String) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.ScOtrEngineHost+showError(SessionID,String) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.ScOtrEngineHost+injectMessage(SessionID,String) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+createMessage(String) net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+createMessage(String) java.util.List+add(E) java.util.List+add(E) net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+sendInstantMessage(Contact,Message) net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+sendInstantMessage(Contact,Message) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.ScOtrEngineHost+getSessionPolicy(SessionID) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getContactPolicy(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getContactPolicy(Contact) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.ScOtrEngineHost+sessionStatusChanged(SessionID) java.util.Map+get(Object) java.util.Map+get(Object) net.java.otr4j.OtrEngine+getSessionStatus(SessionID) net.java.otr4j.OtrEngine+getSessionStatus(SessionID) net.java.otr4j.OtrEngine+getRemotePublicKey(SessionID) net.java.otr4j.OtrEngine+getRemotePublicKey(SessionID) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadPublicKey(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadPublicKey(String) net.java.otr4j.session.SessionID+getUserID() net.java.otr4j.session.SessionID+getUserID() java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+savePublicKey(String,PublicKey) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+savePublicKey(String,PublicKey) net.java.otr4j.session.SessionID+getUserID() net.java.otr4j.session.SessionID+getUserID() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.UIService+getChat(Contact) net.java.sip.communicator.service.gui.Chat+addMessage(String,long,String,String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() net.java.sip.communicator.plugin.otr.ScOtrEngineListener+sessionStatusChanged(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineListener+sessionStatusChanged(Contact)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+contactsMap net.java.sip.communicator.plugin.otr.OtrActivator+uiService net.java.sip.communicator.service.gui.Chat+SYSTEM_MESSAGE net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+DEFAULT_MIME_TYPE net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+contactsMap net.java.sip.communicator.plugin.otr.OtrActivator+uiService net.java.sip.communicator.service.gui.Chat+ERROR_MESSAGE net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+DEFAULT_MIME_TYPE net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+contactsMap net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+injectedMessageUIDs net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+contactsMap net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+contactsMap net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine net.java.otr4j.session.SessionStatus+ENCRYPTED net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine net.java.sip.communicator.plugin.otr.OtrActivator+resourceService net.java.sip.communicator.plugin.otr.OtrActivator+uiService net.java.sip.communicator.service.gui.Chat+SYSTEM_MESSAGE net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+HTML_MIME_TYPE net.java.sip.communicator.plugin.otr.OtrActivator+resourceService net.java.otr4j.session.SessionStatus+FINISHED net.java.sip.communicator.plugin.otr.OtrActivator+resourceService net.java.otr4j.session.SessionStatus+PLAINTEXT net.java.sip.communicator.plugin.otr.OtrActivator+resourceService net.java.sip.communicator.plugin.otr.OtrActivator+uiService net.java.sip.communicator.service.gui.Chat+SYSTEM_MESSAGE net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+HTML_MIME_TYPE net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,4479,111,0,,"class ScOtrEngineHost
        implements OtrEngineHost
    {
        public void showWarning(SessionID sessionID, String warn)
        {
            Contact contact = contactsMap.get(sessionID);
            if (contact == null)
                return;

            OtrActivator.uiService.getChat(contact).addMessage(
                contact.getDisplayName(), System.currentTimeMillis(),
                Chat.SYSTEM_MESSAGE, warn,
                OperationSetBasicInstantMessaging.DEFAULT_MIME_TYPE);
        }

        public void showError(SessionID sessionID, String err)
        {
            Contact contact = contactsMap.get(sessionID);
            if (contact == null)
                return;

            OtrActivator.uiService.getChat(contact).addMessage(
                contact.getDisplayName(), System.currentTimeMillis(),
                Chat.ERROR_MESSAGE, err,
                OperationSetBasicInstantMessaging.DEFAULT_MIME_TYPE);
        }

        public void injectMessage(SessionID sessionID, String messageText)
        {
            Contact contact = contactsMap.get(sessionID);
            OperationSetBasicInstantMessaging imOpSet =
                (OperationSetBasicInstantMessaging) contact
                    .getProtocolProvider().getOperationSet(
                        OperationSetBasicInstantMessaging.class);

            Message message = imOpSet.createMessage(messageText);
            injectedMessageUIDs.add(message.getMessageUID());
            imOpSet.sendInstantMessage(contact, message);
        }

        public OtrPolicy getSessionPolicy(SessionID sessionID)
        {
            return getContactPolicy(contactsMap.get(sessionID));
        }

        public void sessionStatusChanged(SessionID sessionID)
        {
            Contact contact = contactsMap.get(sessionID);
            if (contact == null)
                return;

            String message = """";
            switch (otrEngine.getSessionStatus(sessionID))
            {
            case ENCRYPTED:
                PublicKey remotePubKey =
                    otrEngine.getRemotePublicKey(sessionID);

                PublicKey storedPubKey = loadPublicKey(sessionID.getUserID());

                if (!remotePubKey.equals(storedPubKey))
                    savePublicKey(sessionID.getUserID(), remotePubKey);

                if (!isContactVerified(contact))
                {
                    String unverifiedSessionWarning =
                        OtrActivator.resourceService.getI18NString(
                            ""plugin.otr.activator.unverifiedsessionwarning"",
                            new String[]
                            { contact.getDisplayName() });

                    OtrActivator.uiService.getChat(contact).addMessage(
                        contact.getDisplayName(), System.currentTimeMillis(),
                        Chat.SYSTEM_MESSAGE, unverifiedSessionWarning,
                        OperationSetBasicInstantMessaging.HTML_MIME_TYPE);

                }
                message =
                    OtrActivator.resourceService
                        .getI18NString(
                            (isContactVerified(contact)) ? ""plugin.otr.activator.sessionstared""
                                : ""plugin.otr.activator.unverifiedsessionstared"",
                            new String[]
                            { contact.getDisplayName() });

                break;
            case FINISHED:
                message =
                    OtrActivator.resourceService.getI18NString(
                        ""plugin.otr.activator.sessionfinished"", new String[]
                        { contact.getDisplayName() });
                break;
            case PLAINTEXT:
                message =
                    OtrActivator.resourceService.getI18NString(
                        ""plugin.otr.activator.sessionlost"", new String[]
                        { contact.getDisplayName() });
                break;
            }

            OtrActivator.uiService.getChat(contact).addMessage(
                contact.getDisplayName(), System.currentTimeMillis(),
                Chat.SYSTEM_MESSAGE, message,
                OperationSetBasicInstantMessaging.HTML_MIME_TYPE);

            for (ScOtrEngineListener l : listeners)
            {
                l.sessionStatusChanged(contact);
            }
        }
    }",False
8,otrEngine,Field,,,,,103,2,2,,"private OtrEngine otrEngine =
        new OtrEngineImpl(new ScOtrEngineHost(), new ScOtrKeyManager());",False
9,isContactVerified(Contact),Method,ScOtrEngineHost.sessionStatusChanged(SessionID) ScOtrEngineHost.sessionStatusChanged(SessionID) verifyContactFingerprint(Contact) forgetContactFingerprint(Contact),,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBoolean(String,boolean) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBoolean(String,boolean) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator,183,5,1,,"public boolean isContactVerified(Contact contact)
    {
        return this.configurator.getPropertyBoolean(getSessionID(contact)
            + ""publicKey.verified"", false);
    }",False
10,contactsMap,Field,,,,,74,1,0,,"Map<SessionID, Contact> contactsMap = new Hashtable<SessionID, Contact>();",False
11,endSession(Contact),Method,,,net.java.otr4j.OtrEngine+endSession(SessionID) net.java.otr4j.OtrEngine+endSession(SessionID) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine,107,4,1,,"public void endSession(Contact contact)
    {
        otrEngine.endSession(getSessionID(contact));
    }",False
12,getSessionStatus(Contact),Method,,,net.java.otr4j.OtrEngine+getSessionStatus(SessionID) net.java.otr4j.OtrEngine+getSessionStatus(SessionID) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine,135,4,1,,"public SessionStatus getSessionStatus(Contact contact)
    {
        return otrEngine.getSessionStatus(getSessionID(contact));
    }",False
13,"transformReceiving(Contact,String)",Method,,,"net.java.otr4j.OtrEngine+transformReceiving(SessionID,String) net.java.otr4j.OtrEngine+transformReceiving(SessionID,String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine,157,4,1,,"public String transformReceiving(Contact contact, String msgText)
    {
        return otrEngine.transformReceiving(getSessionID(contact), msgText);
    }",False
14,"transformSending(Contact,String)",Method,,,"net.java.otr4j.OtrEngine+transformSending(SessionID,String) net.java.otr4j.OtrEngine+transformSending(SessionID,String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine,153,4,1,,"public String transformSending(Contact contact, String msgText)
    {
        return otrEngine.transformSending(getSessionID(contact), msgText);
    }",False
15,refreshSession(Contact),Method,,,net.java.otr4j.OtrEngine+refreshSession(SessionID) net.java.otr4j.OtrEngine+refreshSession(SessionID) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine,115,4,1,,"public void refreshSession(Contact contact)
    {
        otrEngine.refreshSession(getSessionID(contact));
    }",False
16,startSession(Contact),Method,,,net.java.otr4j.OtrEngine+startSession(SessionID) net.java.otr4j.OtrEngine+startSession(SessionID) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+otrEngine,111,4,1,,"public void startSession(Contact contact)
    {
        otrEngine.startSession(getSessionID(contact));
    }",False
17,getSessionID(Contact),Method,"isContactVerified(Contact) endSession(Contact) getSessionStatus(Contact) transformReceiving(Contact,String) transformSending(Contact,String) refreshSession(Contact) startSession(Contact) verifyContactFingerprint(Contact) forgetContactFingerprint(Contact) getContactPolicy(Contact) setContactPolicy(Contact,OtrPolicy)",,"net.java.otr4j.session.SessionID+SessionID(String,String,String) net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() java.util.Map+put(K,V) java.util.Map+put(K,V)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+contactsMap,369,10,2,,"private SessionID getSessionID(Contact contact)
    {
        SessionID sessionID =
            new SessionID(contact.getProtocolProvider().getAccountID()
                .getAccountUniqueID(), contact.getAddress(), contact
                .getProtocolProvider().getProtocolName());

        contactsMap.put(sessionID, contact);
        return sessionID;
    }",True
18,getRemoteFingerprint(Contact),Method,,,net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadPublicKey(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadPublicKey(String) net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.otr4j.crypto.OtrCryptoEngineImpl+getFingerprint(PublicKey) net.java.otr4j.crypto.OtrCryptoEngineImpl+OtrCryptoEngineImpl() net.java.otr4j.crypto.OtrCryptoEngineImpl+getFingerprint(PublicKey) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,437,15,1,,"public String getRemoteFingerprint(Contact contact)
    {
        PublicKey remotePublicKey = loadPublicKey(contact.getAddress());
        if (remotePublicKey == null)
            return null;
        try
        {
            return new OtrCryptoEngineImpl().getFingerprint(remotePublicKey);
        }
        catch (OtrCryptoException e)
        {
            e.printStackTrace();
            return null;
        }
    }",True
19,getLocalFingerprint(AccountID),Method,,,net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadKeyPair(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+loadKeyPair(String) net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() java.security.KeyPair+getPublic() java.security.KeyPair+getPublic() net.java.otr4j.crypto.OtrCryptoEngineImpl+getFingerprint(PublicKey) net.java.otr4j.crypto.OtrCryptoEngineImpl+OtrCryptoEngineImpl() net.java.otr4j.crypto.OtrCryptoEngineImpl+getFingerprint(PublicKey) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,472,19,1,,"public String getLocalFingerprint(AccountID account)
    {
        KeyPair keyPair = loadKeyPair(account.getAccountUniqueID());

        if (keyPair == null)
            return null;

        PublicKey pubKey = keyPair.getPublic();

        try
        {
            return new OtrCryptoEngineImpl().getFingerprint(pubKey);
        }
        catch (OtrCryptoException e)
        {
            e.printStackTrace();
            return null;
        }
    }",True
20,configurator,Field,"isContactVerified(Contact) verifyContactFingerprint(Contact) forgetContactFingerprint(Contact) getGlobalPolicy() setGlobalPolicy(OtrPolicy) setGlobalPolicy(OtrPolicy) getContactPolicy(Contact) setContactPolicy(Contact,OtrPolicy) setContactPolicy(Contact,OtrPolicy) loadKeyPair(String) loadKeyPair(String) generateKeyPair(String) generateKeyPair(String) savePublicKey(String,PublicKey) savePublicKey(String,PublicKey) loadPublicKey(String)",,,,55,1,2,,private Configurator configurator = new Configurator();,False
21,Configurator,MemberClass,,,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getXmlFriendlyString(String) java.lang.String+length() java.lang.String+length() java.lang.Character+isDigit(char) java.lang.Character+isDigit(char) java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.String+length() java.lang.String+length() java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.Character+isLetterOrDigit(char) java.lang.Character+isLetterOrDigit(char) java.lang.String+String(char[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getXmlFriendlyString(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getXmlFriendlyString(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) net.java.sip.communicator.service.configuration.ConfigurationService+getProperty(String) net.java.sip.communicator.service.configuration.ConfigurationService+getProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) java.lang.String+getBytes() java.lang.String+getBytes() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBoolean(String,boolean) net.java.sip.communicator.service.configuration.ConfigurationService+getBoolean(String,boolean) net.java.sip.communicator.service.configuration.ConfigurationService+getBoolean(String,boolean) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) java.lang.String+String(String) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,boolean) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,Integer) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.service.configuration.ConfigurationService+removeProperty(String) net.java.sip.communicator.service.configuration.ConfigurationService+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyInt(String,int) net.java.sip.communicator.service.configuration.ConfigurationService+getInt(String,int) net.java.sip.communicator.service.configuration.ConfigurationService+getInt(String,int) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getID(String)",net.java.sip.communicator.plugin.otr.OtrActivator+configService net.java.sip.communicator.plugin.otr.OtrActivator+configService net.java.sip.communicator.plugin.otr.OtrActivator+configService net.java.sip.communicator.plugin.otr.OtrActivator+configService net.java.sip.communicator.plugin.otr.OtrActivator+configService net.java.sip.communicator.plugin.otr.OtrActivator+configService net.java.sip.communicator.plugin.otr.OtrActivator+configService,2206,73,0,,"class Configurator
    {

        private String getXmlFriendlyString(String s)
        {
            if (s == null || s.length() < 1)
                return s;

            // XML Tags are not allowed to start with digits,
            // insert a dummy ""p"" char.
            if (Character.isDigit(s.charAt(0)))
                s = ""p"" + s;

            char[] cId = new char[s.length()];
            for (int i = 0; i < cId.length; i++)
            {
                char c = s.charAt(i);
                cId[i] = (Character.isLetterOrDigit(c)) ? c : '_';
            }

            return new String(cId);
        }

        private String getID(String id)
        {
            return ""net.java.sip.communicator.plugin.otr.""
                + getXmlFriendlyString(id);
        }

        public byte[] getPropertyBytes(String id)
        {
            String value =
                (String) OtrActivator.configService.getProperty(this.getID(id));
            if (value == null)
                return null;

            return Base64.decode(value.getBytes());
        }

        public Boolean getPropertyBoolean(String id, boolean defaultValue)
        {
            return OtrActivator.configService.getBoolean(this.getID(id),
                defaultValue);
        }

        public void setProperty(String id, byte[] value)
        {
            String valueToStore = new String(Base64.encode(value));

            OtrActivator.configService
                .setProperty(this.getID(id), valueToStore);
        }

        public void setProperty(String id, boolean value)
        {
            OtrActivator.configService.setProperty(this.getID(id), value);
        }

        public void setProperty(String id, Integer value)
        {
            OtrActivator.configService.setProperty(this.getID(id), value);
        }

        public void removeProperty(String id)
        {
            OtrActivator.configService.removeProperty(this.getID(id));
        }

        public int getPropertyInt(String id, int defaultValue)
        {
            return OtrActivator.configService.getInt(getID(id), defaultValue);
        }
    }",False
22,verifyContactFingerprint(Contact),Method,,,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,boolean) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,boolean) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineListener+contactVerificationStatusChanged(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineListener+contactVerificationStatusChanged(Contact)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,414,14,1,,"public void verifyContactFingerprint(Contact contact)
    {
        if (contact == null)
            return;

        if (isContactVerified(contact))
            return;
        
        this.configurator.setProperty(getSessionID(contact)
            + ""publicKey.verified"", true);
        
        for (ScOtrEngineListener l : listeners)
            l.contactVerificationStatusChanged(contact);
    }",True
23,forgetContactFingerprint(Contact),Method,,,net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+isContactVerified(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineListener+contactVerificationStatusChanged(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineListener+contactVerificationStatusChanged(Contact),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,404,14,1,,"public void forgetContactFingerprint(Contact contact)
    {
        if (contact == null)
            return;

        if (!isContactVerified(contact))
            return;
        
        this.configurator.removeProperty(getSessionID(contact)
            + ""publicKey.verified"");

        for (ScOtrEngineListener l : listeners)
            l.contactVerificationStatusChanged(contact);
    }",True
24,getGlobalPolicy(),Method,getContactPolicy(Contact),,"net.java.otr4j.OtrPolicyImpl+OtrPolicyImpl(int) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyInt(String,int) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyInt(String,int)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.otr4j.OtrPolicy+OTRL_POLICY_DEFAULT,171,5,1,,"public OtrPolicy getGlobalPolicy()
    {
        return new OtrPolicyImpl(this.configurator.getPropertyInt(""POLICY"",
            OtrPolicy.OTRL_POLICY_DEFAULT));
    }",False
25,setGlobalPolicy(OtrPolicy),Method,,,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.otr4j.OtrPolicy+getPolicy() net.java.otr4j.OtrPolicy+getPolicy() net.java.sip.communicator.plugin.otr.ScOtrEngineListener+globalPolicyChanged() net.java.sip.communicator.plugin.otr.ScOtrEngineListener+globalPolicyChanged()",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,322,10,1,,"public void setGlobalPolicy(OtrPolicy policy)
    {
        if (policy == null)
            this.configurator.removeProperty(""POLICY"");
        else
            this.configurator.setProperty(""POLICY"", policy.getPolicy());

        for (ScOtrEngineListener l : listeners)
            l.globalPolicyChanged();
    }",False
26,launchHelp(),Method,,,org.osgi.framework.BundleContext+getServiceReference(String) org.osgi.framework.BundleContext+getServiceReference(String) java.lang.Class+getName() java.lang.Class+getName() org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.BundleContext+getService(ServiceReference) net.java.sip.communicator.service.browserlauncher.BrowserLauncherService+openURL(String) net.java.sip.communicator.service.browserlauncher.BrowserLauncherService+openURL(String) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String),net.java.sip.communicator.plugin.otr.OtrActivator+bundleContext net.java.sip.communicator.plugin.otr.OtrActivator+bundleContext net.java.sip.communicator.plugin.otr.OtrActivator+resourceService,489,15,1,,"public void launchHelp()
    {
        ServiceReference ref =
            OtrActivator.bundleContext
                .getServiceReference(BrowserLauncherService.class.getName());

        if (ref == null)
            return;

        BrowserLauncherService service =
            (BrowserLauncherService) OtrActivator.bundleContext.getService(ref);

        service.openURL(OtrActivator.resourceService
            .getI18NString(""plugin.otr.authbuddydialog.HELP_URI""));
    }",False
27,getContactPolicy(Contact),Method,ScOtrEngineHost.getSessionPolicy(SessionID),,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyInt(String,int) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyInt(String,int) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getGlobalPolicy() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getGlobalPolicy() net.java.otr4j.OtrPolicyImpl+OtrPolicyImpl(int)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator,313,10,1,,"public OtrPolicy getContactPolicy(Contact contact)
    {
        int policy =
            this.configurator.getPropertyInt(getSessionID(contact) + ""policy"",
                -1);
        if (policy < 0)
            return getGlobalPolicy();
        else
            return new OtrPolicyImpl(policy);
    }",False
28,"setContactPolicy(Contact,OtrPolicy)",Method,,,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+getSessionID(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.otr4j.OtrPolicy+getPolicy() net.java.otr4j.OtrPolicy+getPolicy() net.java.sip.communicator.plugin.otr.ScOtrEngineListener+contactPolicyChanged(Contact) net.java.sip.communicator.plugin.otr.ScOtrEngineListener+contactPolicyChanged(Contact)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+listeners,417,12,1,,"public void setContactPolicy(Contact contact, OtrPolicy policy)
    {
        String propertyID = getSessionID(contact) + ""policy"";
        if (policy == null)
            this.configurator.removeProperty(propertyID);
        else
            this.configurator.setProperty(propertyID, policy.getPolicy());

        for (ScOtrEngineListener l : listeners)
            l.contactPolicyChanged(contact);

    }",False
29,loadKeyPair(String),Method,ScOtrKeyManager.getKeyPair(SessionID) ScOtrKeyManager.getKeyPair(SessionID) getLocalFingerprint(AccountID),,"net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) java.security.spec.PKCS8EncodedKeySpec+PKCS8EncodedKeySpec(byte[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) java.security.spec.X509EncodedKeySpec+X509EncodedKeySpec(byte[]) java.security.KeyFactory+getInstance(String) java.security.KeyFactory+getInstance(String) java.security.KeyFactory+generatePublic(KeySpec) java.security.KeyFactory+generatePublic(KeySpec) java.security.KeyFactory+generatePrivate(KeySpec) java.security.KeyFactory+generatePrivate(KeySpec) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.security.KeyPair+KeyPair(PublicKey,PrivateKey)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator,1286,43,2,,"private KeyPair loadKeyPair(String accountID)
    {
        // Load Private Key.
        byte[] b64PrivKey =
            this.configurator.getPropertyBytes(accountID + "".privateKey"");
        if (b64PrivKey == null)
            return null;

        PKCS8EncodedKeySpec privateKeySpec =
            new PKCS8EncodedKeySpec(b64PrivKey);

        // Load Public Key.
        byte[] b64PubKey =
            this.configurator.getPropertyBytes(accountID + "".publicKey"");
        if (b64PubKey == null)
            return null;

        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(b64PubKey);

        PublicKey publicKey;
        PrivateKey privateKey;

        // Generate KeyPair.
        KeyFactory keyFactory;
        try
        {
            keyFactory = KeyFactory.getInstance(""DSA"");
            publicKey = keyFactory.generatePublic(publicKeySpec);
            privateKey = keyFactory.generatePrivate(privateKeySpec);
        }
        catch (NoSuchAlgorithmException e)
        {
            e.printStackTrace();
            return null;
        }
        catch (InvalidKeySpecException e)
        {
            e.printStackTrace();
            return null;
        }

        return new KeyPair(publicKey, privateKey);
    }",True
30,generateKeyPair(String),Method,ScOtrKeyManager.getKeyPair(SessionID),,"java.security.KeyPairGenerator+genKeyPair() java.security.KeyPairGenerator+getInstance(String) java.security.KeyPairGenerator+getInstance(String) java.security.KeyPairGenerator+genKeyPair() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.security.KeyPair+getPublic() java.security.KeyPair+getPublic() java.security.spec.X509EncodedKeySpec+X509EncodedKeySpec(byte[]) java.security.Key+getEncoded() java.security.Key+getEncoded() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) java.security.spec.X509EncodedKeySpec+getEncoded() java.security.spec.X509EncodedKeySpec+getEncoded() java.security.KeyPair+getPrivate() java.security.KeyPair+getPrivate() java.security.spec.PKCS8EncodedKeySpec+PKCS8EncodedKeySpec(byte[]) java.security.Key+getEncoded() java.security.Key+getEncoded() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) java.security.spec.PKCS8EncodedKeySpec+getEncoded() java.security.spec.PKCS8EncodedKeySpec+getEncoded()",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator,928,29,1,,"public void generateKeyPair(String accountID)
    {
        KeyPair keyPair;
        try
        {
            keyPair = KeyPairGenerator.getInstance(""DSA"").genKeyPair();
        }
        catch (NoSuchAlgorithmException e)
        {
            e.printStackTrace();
            return;
        }

        // Store Public Key.
        PublicKey pubKey = keyPair.getPublic();
        X509EncodedKeySpec x509EncodedKeySpec =
            new X509EncodedKeySpec(pubKey.getEncoded());

        this.configurator.setProperty(accountID + "".publicKey"",
            x509EncodedKeySpec.getEncoded());

        // Store Private Key.
        PrivateKey privKey = keyPair.getPrivate();
        PKCS8EncodedKeySpec pkcs8EncodedKeySpec =
            new PKCS8EncodedKeySpec(privKey.getEncoded());

        this.configurator.setProperty(accountID + "".privateKey"",
            pkcs8EncodedKeySpec.getEncoded());
    }",True
31,"savePublicKey(String,PublicKey)",Method,ScOtrEngineHost.sessionStatusChanged(SessionID),,"java.security.spec.X509EncodedKeySpec+X509EncodedKeySpec(byte[]) java.security.Key+getEncoded() java.security.Key+getEncoded() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+setProperty(String,byte[]) java.security.spec.X509EncodedKeySpec+getEncoded() java.security.spec.X509EncodedKeySpec+getEncoded() net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+removeProperty(String)",net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator,369,10,2,,"private void savePublicKey(String userID, PublicKey pubKey)
    {
        X509EncodedKeySpec x509EncodedKeySpec =
            new X509EncodedKeySpec(pubKey.getEncoded());

        this.configurator.setProperty(userID + "".publicKey"", x509EncodedKeySpec
            .getEncoded());

        this.configurator.removeProperty(userID + "".publicKey.verified"");
    }",True
32,loadPublicKey(String),Method,ScOtrEngineHost.sessionStatusChanged(SessionID) getRemoteFingerprint(Contact),,net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) net.java.sip.communicator.plugin.otr.ScOtrEngineImpl.Configurator+getPropertyBytes(String) java.security.spec.X509EncodedKeySpec+X509EncodedKeySpec(byte[]) java.security.KeyFactory+getInstance(String) java.security.KeyFactory+getInstance(String) java.security.KeyFactory+generatePublic(KeySpec) java.security.KeyFactory+generatePublic(KeySpec) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator net.java.sip.communicator.plugin.otr.ScOtrEngineImpl+configurator,768,27,2,,"private PublicKey loadPublicKey(String userID)
    {
        byte[] b64PubKey =
            this.configurator.getPropertyBytes(userID + "".publicKey"");
        if (b64PubKey == null)
            return null;

        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(b64PubKey);

        // Generate KeyPair.
        KeyFactory keyFactory;
        try
        {
            keyFactory = KeyFactory.getInstance(""DSA"");
            return keyFactory.generatePublic(publicKeySpec);
        }
        catch (NoSuchAlgorithmException e)
        {
            e.printStackTrace();
            return null;
        }
        catch (InvalidKeySpecException e)
        {
            e.printStackTrace();
            return null;
        }
    }",True
