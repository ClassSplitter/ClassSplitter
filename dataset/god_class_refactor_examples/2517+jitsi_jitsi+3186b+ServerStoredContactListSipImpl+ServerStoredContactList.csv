index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,logger,logger logger class ,Field,,,,,140,5,26,"/** 
 * Logger class
 */
","/**
     * Logger class
     */
    private static final Logger logger =
            Logger.getLogger(ServerStoredContactListSipImpl.class);",False,False,"/** 
 * Logger class
 */
",False,"/** 
 * Logger class
 */
"
2,ROOT_GROUP_NAME,root group name root group name ,Field,,,,,98,4,26,"/** 
 * Root group name.
 */
","/**
     * Root group name.
     */
    private final static String ROOT_GROUP_NAME = ""RootGroup"";",True,True,"/** 
 * Root group name.
 */
",False,"/** 
 * Root group name.
 */
"
3,DEFAULT_WHITE_RULE_ID,default white rule id default white rule identifier ,Field,,,,,125,4,26,"/** 
 * Default ""White"" rule identifier.
 */
","/**
     * Default ""White"" rule identifier.
     */
    private final static String DEFAULT_WHITE_RULE_ID = ""presence_allow"";",False,False,"/** 
 * Default ""White"" rule identifier.
 */
",False,"/** 
 * Default ""White"" rule identifier.
 */
"
4,DEFAULT_BLOCK_RULE_ID,default block rule id default block rule identifier ,Field,,,,,125,4,26,"/** 
 * Default ""Block"" rule identifier.
 */
","/**
     * Default ""Block"" rule identifier.
     */
    private final static String DEFAULT_BLOCK_RULE_ID = ""presence_block"";",False,False,"/** 
 * Default ""Block"" rule identifier.
 */
",False,"/** 
 * Default ""Block"" rule identifier.
 */
"
5,DEFAULT_POLITE_BLOCK_RULE_ID,default polite block rule id default polite block rule identifier ,Field,,,,,158,5,26,"/** 
 * Default ""Polite Block"" rule identifier.
 */
","/**
     * Default ""Polite Block"" rule identifier.
     */
    private final static String DEFAULT_POLITE_BLOCK_RULE_ID
            = ""presence_polite_block"";",False,False,"/** 
 * Default ""Polite Block"" rule identifier.
 */
",False,"/** 
 * Default ""Polite Block"" rule identifier.
 */
"
6,sipProvider,sip provider the provider that is on top of us ,Field,"ServerStoredContactListSipImpl(ProtocolProviderServiceSipImpl,OperationSetPresenceSipImpl)",,,,115,4,18,"/** 
 * The provider that is on top of us.
 */
","/**
     * The provider that is on top of us.
     */
    private final ProtocolProviderServiceSipImpl sipProvider;",True,True,"/** 
 * The provider that is on top of us.
 */
",False,"/** 
 * The provider that is on top of us.
 */
"
7,parentOperationSet,parent operation set the operation set that created us and that we could use when dispatching subscription events ,Field,"ServerStoredContactListSipImpl(ProtocolProviderServiceSipImpl,OperationSetPresenceSipImpl)",,,,185,5,18,"/** 
 * The operation set that created us and that we could use when dispatching subscription events.
 */
","/**
     * The operation set that created us and that we could use when dispatching
     * subscription events.
     */
    private final OperationSetPresenceSipImpl parentOperationSet;",False,False,"/** 
 * The operation set that created us and that we could use when dispatching subscription events.
 */
",False,"/** 
 * The operation set that created us and that we could use when dispatching subscription events.
 */
"
8,serverStoredGroupListeners,server stored group listeners listeners that would receive event notifications for changes in group names or other properties removal or creation of groups ,Field,"ServerStoredContactListSipImpl(ProtocolProviderServiceSipImpl,OperationSetPresenceSipImpl) addGroupListener(ServerStoredGroupListener) removeGroupListener(ServerStoredGroupListener)",,,,233,5,18,"/** 
 * Listeners that would receive event notifications for changes in group names or other properties, removal or creation of groups.
 */
","/**
     * Listeners that would receive event notifications for changes in group
     * names or other properties, removal or creation of groups.
     */
    private final Vector<ServerStoredGroupListener> serverStoredGroupListeners;",True,True,"/** 
 * Listeners that would receive event notifications for changes in group names or other properties, removal or creation of groups.
 */
",False,"/** 
 * Listeners that would receive event notifications for changes in group names or other properties, removal or creation of groups.
 */
"
9,rootGroup,root group the root contact group the container for all sip contacts and groups ,Field,"ServerStoredContactListSipImpl(ProtocolProviderServiceSipImpl,OperationSetPresenceSipImpl)",,,,138,4,18,"/** 
 * The root contact group. The container for all SIP contacts and groups.
 */
","/**
     * The root contact group. The container for all SIP contacts and groups.
     */
    private final ContactGroupSipImpl rootGroup;",True,True,"/** 
 * The root contact group. The container for all SIP contacts and groups.
 */
",False,"/** 
 * The root contact group. The container for all SIP contacts and groups.
 */
"
10,presRules,pres rules current presence rules ,Field,,,,,77,4,2,"/** 
 * Current presence rules.
 */
","/**
     * Current presence rules.
     */
    private RulesetType presRules;",False,False,"/** 
 * Current presence rules.
 */
",False,"/** 
 * Current presence rules.
 */
"
11,"ServerStoredContactListSipImpl(ProtocolProviderServiceSipImpl,OperationSetPresenceSipImpl)",server stored contact list sip impl sip provider parent operation set creates a server stored contact list wrapper for the specified buddy list param sip provider the provider that has instantiated us param parent operation set the operation set that created us and thatwe could use for dispatching subscription events ,Method,,,"java.util.Vector+Vector() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+ContactGroupSipImpl(String,ProtocolProviderServiceSipImpl)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+parentOperationSet net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+parentOperationSet net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+serverStoredGroupListeners net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+serverStoredGroupListeners net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+ROOT_GROUP_NAME,763,17,0,"/** 
 * Creates a ServerStoredContactList wrapper for the specified BuddyList.
 * @param sipProvider        the provider that has instantiated us.
 * @param parentOperationSet the operation set that created us and thatwe could use for dispatching subscription events
 */
","/**
     * Creates a ServerStoredContactList wrapper for the specified BuddyList.
     *
     * @param sipProvider        the provider that has instantiated us.
     * @param parentOperationSet the operation set that created us and that
     *                           we could use for dispatching subscription events
     */
    ServerStoredContactListSipImpl(
            ProtocolProviderServiceSipImpl sipProvider,
            OperationSetPresenceSipImpl parentOperationSet)
    {
        this.sipProvider = sipProvider;
        this.parentOperationSet = parentOperationSet;
        this.serverStoredGroupListeners =
                new Vector<ServerStoredGroupListener>();
        this.rootGroup = new ContactGroupSipImpl(ROOT_GROUP_NAME, sipProvider);
    }",False,False,"This method creates a wrapper for a BuddyList, specifically a ServerStoredContactList, using the specified sipProvider and parentOperationSet. It also initializes some variables and creates a root group for the contact list.",False,This code snippet is a constructor for the ServerStoredContactListSipImpl class. It takes in a ProtocolProviderServiceSipImpl object and an OperationSetPresenceSipImpl object as parameters. It initializes the instance variables and creates a root group for the contact list.
12,getRootGroup(),get root group returns the root group of the contact list return the root contact group for the contact list ,Method,,"net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+getServerStoredContactListRoot() net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+subscribe(String) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+findContactByID(String) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+createVolatileContact(String,String) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+unsubscribeToAllContact() net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+registrationStateChanged(RegistrationStateChangeEvent) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+registrationStateChanged(RegistrationStateChangeEvent)",,net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup,211,9,1,"/** 
 * Returns the root group of the contact list.
 * @return the root ContactGroup for the ContactList.
 */
","/**
     * Returns the root group of the contact list.
     *
     * @return the root ContactGroup for the ContactList.
     */
    public ContactGroupSipImpl getRootGroup()
    {
        return rootGroup;
    }",True,True,"This method returns the root group of the contact list. It returns an instance of the ContactGroupSipImpl class, which represents the root ContactGroup for the ContactList.",False,"The code defines a method called ""getRootGroup"" which returns the root group of a contact list. The method returns an instance of the ""ContactGroupSipImpl"" class, representing the root group. The method does not take any parameters."
13,addGroupListener(ServerStoredGroupListener),add group listener listener registers the specified group listener so that it would receive events on group modification creation destruction param listener the server stored group listener to register for groupevents ,Method,,net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+addServerStoredGroupChangeListener(ServerStoredGroupListener),java.util.Vector+contains(Object) java.util.Vector+contains(Object) java.util.Vector+add(E) java.util.Vector+add(E),net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+serverStoredGroupListeners net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+serverStoredGroupListeners net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+serverStoredGroupListeners net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+serverStoredGroupListeners,559,17,1,"/** 
 * Registers the specified group listener so that it would receive events on group modification/creation/destruction.
 * @param listener the ServerStoredGroupListener to register for groupevents.
 */
","/**
     * Registers the specified group listener so that it would receive events
     * on group modification/creation/destruction.
     *
     * @param listener the ServerStoredGroupListener to register for group
     *                 events.
     */
    public void addGroupListener(ServerStoredGroupListener listener)
    {
        synchronized (serverStoredGroupListeners)
        {
            if (!serverStoredGroupListeners.contains(listener))
            {
                this.serverStoredGroupListeners.add(listener);
            }
        }
    }",True,True,"This method is used to register a group listener to receive events related to group modification, creation, and destruction. The listener is added to a list of server stored group listeners if it is not already present.",False,"This code defines a method called ""addGroupListener"" that registers a specified group listener to receive events related to group modification, creation, and destruction. The method ensures that the listener is not already registered before adding it to the list of serverStoredGroupListeners."
14,removeGroupListener(ServerStoredGroupListener),remove group listener listener removes the specified group listener so that it won t receive further events on group modification creation destruction param listener the server stored group listener to unregister ,Method,,net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+removeServerStoredGroupChangeListener(ServerStoredGroupListener),java.util.Vector+remove(Object) java.util.Vector+remove(Object),net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+serverStoredGroupListeners net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+serverStoredGroupListeners net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+serverStoredGroupListeners,437,13,1,"/** 
 * Removes the specified group listener so that it won't receive further events on group modification/creation/destruction.
 * @param listener the ServerStoredGroupListener to unregister.
 */
","/**
     * Removes the specified group listener so that it won't receive further
     * events on group modification/creation/destruction.
     *
     * @param listener the ServerStoredGroupListener to unregister.
     */
    public void removeGroupListener(ServerStoredGroupListener listener)
    {
        synchronized (serverStoredGroupListeners)
        {
            this.serverStoredGroupListeners.remove(listener);
        }
    }",True,True,"This method removes a specified group listener from receiving events related to group modification, creation, and destruction.",False,"The `removeGroupListener` method is used to unregister a specified `ServerStoredGroupListener` from receiving events related to group modification, creation, and destruction. It removes the listener from the list of registered listeners in a synchronized manner."
15,"fireGroupEvent(ContactGroup,int)",fire group event group event id creates the corresponding event and notifies all server stored group listener s that the source group has been removed changed renamed or whatever happened to it param group the contact group that has been created modified removed param event id the id of the event to generate ,Method,"createUnresolvedContactGroup(ContactGroupSipImpl,String) createGroup(ContactGroupSipImpl,String,boolean) removeGroup(ContactGroupSipImpl) renameGroup(ContactGroupSipImpl,String) init() resolveContactGroup(ContactGroupSipImpl,ListType,boolean) resolveContactGroup(ContactGroupSipImpl,ListType,boolean) resolveContactGroup(ContactGroupSipImpl,ListType,boolean)",,"net.java.sip.communicator.service.protocol.event.ServerStoredGroupEvent+ServerStoredGroupEvent(ContactGroup,int,ContactGroup,ProtocolProviderService,OperationSetPersistentPresence) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+getServerStoredContactListRoot() net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+getServerStoredContactListRoot() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.util.Logger+trace(Object) java.util.ArrayList+ArrayList(Collection) net.java.sip.communicator.service.protocol.event.ServerStoredGroupListener+groupRemoved(ServerStoredGroupEvent) net.java.sip.communicator.service.protocol.event.ServerStoredGroupListener+groupRemoved(ServerStoredGroupEvent) net.java.sip.communicator.service.protocol.event.ServerStoredGroupListener+groupNameChanged(ServerStoredGroupEvent) net.java.sip.communicator.service.protocol.event.ServerStoredGroupListener+groupNameChanged(ServerStoredGroupEvent) net.java.sip.communicator.service.protocol.event.ServerStoredGroupListener+groupCreated(ServerStoredGroupEvent) net.java.sip.communicator.service.protocol.event.ServerStoredGroupListener+groupCreated(ServerStoredGroupEvent) net.java.sip.communicator.service.protocol.event.ServerStoredGroupListener+groupResolved(ServerStoredGroupEvent) net.java.sip.communicator.service.protocol.event.ServerStoredGroupListener+groupResolved(ServerStoredGroupEvent)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+parentOperationSet net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+parentOperationSet net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+serverStoredGroupListeners net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+serverStoredGroupListeners net.java.sip.communicator.service.protocol.event.ServerStoredGroupEvent+GROUP_REMOVED_EVENT net.java.sip.communicator.service.protocol.event.ServerStoredGroupEvent+GROUP_RENAMED_EVENT net.java.sip.communicator.service.protocol.event.ServerStoredGroupEvent+GROUP_CREATED_EVENT net.java.sip.communicator.service.protocol.event.ServerStoredGroupEvent+GROUP_RESOLVED_EVENT,1748,47,0,"/** 
 * Creates the corresponding event and notifies all <tt>ServerStoredGroupListener</tt>s that the source group has been removed, changed, renamed or whatever happened to it.
 * @param group   the ContactGroup that has been created/modified/removed.
 * @param eventID the id of the event to generate.
 */
","/**
     * Creates the corresponding event and notifies all
     * <tt>ServerStoredGroupListener</tt>s that the source group has been
     * removed, changed, renamed or whatever happened to it.
     *
     * @param group   the ContactGroup that has been created/modified/removed.
     * @param eventID the id of the event to generate.
     */
    void fireGroupEvent(ContactGroup group, int eventID)
    {
        ServerStoredGroupEvent event = new ServerStoredGroupEvent(
                group,
                eventID,
                parentOperationSet.getServerStoredContactListRoot(),
                sipProvider,
                parentOperationSet);
        if (logger.isTraceEnabled())
        {
            logger.trace(""Will dispatch the following group event: "" + event);
        }
        Iterable<ServerStoredGroupListener> listeners;
        synchronized (serverStoredGroupListeners)
        {
            listeners =
                    new ArrayList<ServerStoredGroupListener>(
                            serverStoredGroupListeners);
        }
        for (ServerStoredGroupListener listener : listeners)
        {
            if (eventID == ServerStoredGroupEvent.GROUP_REMOVED_EVENT)
            {
                listener.groupRemoved(event);
            }
            else if (eventID == ServerStoredGroupEvent.GROUP_RENAMED_EVENT)
            {
                listener.groupNameChanged(event);
            }
            else if (eventID == ServerStoredGroupEvent.GROUP_CREATED_EVENT)
            {
                listener.groupCreated(event);
            }
            else if (eventID == ServerStoredGroupEvent.GROUP_RESOLVED_EVENT)
            {
                listener.groupResolved(event);
            }
        }
    }",True,True,"The function of this method is to create a ServerStoredGroupEvent based on the given ContactGroup and eventID, and notify all ServerStoredGroupListeners about the event that occurred on the group (removed, renamed, created, or resolved).",False,"This code defines a method called ""fireGroupEvent"" that creates an event and notifies all listeners about changes made to a contact group. The method takes the group and an event ID as parameters, and based on the event ID, it calls the appropriate listener method to handle the event."
16,"createUnresolvedContact(ContactGroupSipImpl,String,String)",create unresolved contact parent group contact id persistent data creates a non resolved contact for the specified address and inside the specified group the newly created contact would be added to the local contact list as a standard contact but when an event is received from the server concerning this contact then it will be reused and only its is resolved field would be updated instead of creating the whole contact again if creation is successfull event will be fired param parent group the group where the unersolved contact is to becreated param contact id the sip id of the contact to create param persistent data a string returned contact s get persistent data method during a previous run and that has been persistently stored locally return the newly created unresolved contact sip impl ,Method,,"net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+createUnresolvedContact(String,String,ContactGroup)","java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.String+length() java.lang.String+length() java.lang.IllegalArgumentException+IllegalArgumentException(String) net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+parseAddressString(String) net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+parseAddressString(String) java.lang.IllegalArgumentException+IllegalArgumentException(String,Throwable) java.lang.String+format(String,Object[]) java.lang.String+format(String,Object[]) net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+ContactSipImpl(Address,ProtocolProviderServiceSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setPersistentData(String) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setPersistentData(String) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactAdded(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactAdded(ContactGroupSipImpl,ContactSipImpl)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider,2189,52,33,"/** 
 * Creates a non resolved contact for the specified address and inside the specified group. The newly created contact would be added to the local contact list as a standard contact but when an event is received from the server concerning this contact, then it will be reused and only its isResolved field would be updated instead of creating the whole contact again. If creation is successfull event will be fired.
 * @param parentGroup the group where the unersolved contact is to becreated.
 * @param contactId   the sip id of the contact to create.
 * @param persistentData a String returned Contact's getPersistentData()method during a previous run and that has been persistently stored locally.
 * @return the newly created unresolved <tt>ContactSipImpl</tt>.
 */
","/**
     * Creates a non resolved contact for the specified address and inside the
     * specified group. The newly created contact would be added to the local
     * contact list as a standard contact but when an event is received from the
     * server concerning this contact, then it will be reused and only its
     * isResolved field would be updated instead of creating the whole contact
     * again. If creation is successfull event will be fired.
     *
     * @param parentGroup the group where the unersolved contact is to be
     *                    created.
     * @param contactId   the sip id of the contact to create.
     * @param persistentData a String returned Contact's getPersistentData()
     * method during a previous run and that has been persistently stored
     * locally.
     * @return the newly created unresolved <tt>ContactSipImpl</tt>.
     */
    public synchronized ContactSipImpl createUnresolvedContact(
            ContactGroupSipImpl parentGroup, String contactId,
            String persistentData)
    {
        if (parentGroup == null)
        {
            throw new IllegalArgumentException(""Parent group cannot be null"");
        }
        if (contactId == null || contactId.length() == 0)
        {
            throw new IllegalArgumentException(
                    ""Creating contact id name cannot be null or empty"");
        }
        Address contactAddress;
        try
        {
            contactAddress = sipProvider.parseAddressString(contactId);
        }
        catch (ParseException ex)
        {
            throw new IllegalArgumentException(
                    String.format(""%1s is no a valid SIP identifier"",
                            contactId),
                    ex);
        }

        if(logger.isTraceEnabled())
            logger.trace(""createUnresolvedContact "" + contactId);

        ContactSipImpl newUnresolvedContact = new ContactSipImpl(contactAddress,
                sipProvider);
        parentGroup.addContact(newUnresolvedContact);
        newUnresolvedContact.setPersistentData(persistentData);
        fireContactAdded(parentGroup, newUnresolvedContact);
        return newUnresolvedContact;
    }",True,True,"This method creates a non-resolved contact with the specified address and adds it to the specified group. The contact is added as a standard contact, but when an event is received from the server, only the isResolved field of the contact is updated instead of creating a new contact. The method returns the newly created unresolved contact.",False,"This code defines a method called `createUnresolvedContact` that creates a new unresolved contact with the specified address and adds it to the specified group. The contact is added to the local contact list and can be reused when events are received from the server, updating only the `isResolved` field instead of creating a new contact."
17,"createContact(ContactGroupSipImpl,String,boolean)",create contact parent group contact id persistent creates contact for the specified address and inside the specified group if creation is successfull event will be fired param parent group the group where the unersolved contact is to becreated param contact id the sip id of the contact to create param persistent specify whether created contact is persistent ot not return the newly created contact sip impl throws operation failed exception with code network failure if theoperation if failed during network communication ,Method,,"net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+subscribe(ContactGroup,String) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+createVolatileContact(String,String)","net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+createContact(ContactGroupSipImpl,String,String,boolean) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+createContact(ContactGroupSipImpl,String,String,boolean)",,933,20,33,"/** 
 * Creates contact for the specified address and inside the specified group . If creation is successfull event will be fired.
 * @param parentGroup the group where the unersolved contact is to becreated.
 * @param contactId   the sip id of the contact to create.
 * @param persistent  specify whether created contact is persistent ot not.
 * @return the newly created <tt>ContactSipImpl</tt>.
 * @throws OperationFailedException with code NETWORK_FAILURE if theoperation if failed during network communication.
 */
","/**
     * Creates contact for the specified address and inside the
     * specified group . If creation is successfull event will be fired.
     *
     * @param parentGroup the group where the unersolved contact is to be
     *                    created.
     * @param contactId   the sip id of the contact to create.
     * @param persistent  specify whether created contact is persistent ot not.
     * @return the newly created <tt>ContactSipImpl</tt>.
     * @throws OperationFailedException with code NETWORK_FAILURE if the
     *                                  operation if failed during network
     *                                  communication.
     */
    synchronized public ContactSipImpl createContact(
        ContactGroupSipImpl parentGroup, String contactId,
        boolean persistent)
        throws OperationFailedException
    {
        return createContact(parentGroup, contactId, null, persistent);
    }",True,True,"The function of this method is to create a contact with the specified address and inside the specified group. If the creation is successful, an event will be fired. The method takes in the parent group, contact ID, and a boolean value to specify whether the created contact is persistent or not. It returns the newly created ContactSipImpl object. If the operation fails during network communication, it throws an OperationFailedException with the code NETWORK_FAILURE.",False,"This code defines a method called ""createContact"" that creates a new contact within a specified group. The method takes parameters for the parent group, contact ID, and persistence status, and returns the newly created contact. It also throws an exception if there is a network failure during the operation."
18,"createContact(ContactGroupSipImpl,String,String,boolean)",create contact parent group contact id display name persistent creates contact for the specified address and inside the specified group if creation is successfull event will be fired param parent group the group where the unersolved contact is to becreated param contact id the sip id of the contact to create param display name the display name of the contact to create param persistent specify whether created contact is persistent ot not return the newly created contact sip impl throws operation failed exception with code network failure if theoperation if failed during network communication ,Method,"createContact(ContactGroupSipImpl,String,boolean)","net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+createVolatileContact(String,String)","java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.String+length() java.lang.String+trim() java.lang.String+trim() java.lang.String+length() java.lang.IllegalArgumentException+IllegalArgumentException(String) net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.util.Logger+trace(Object) java.lang.String+format(Locale,String,Object[]) java.lang.String+format(Locale,String,Object[]) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroupName() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroupName() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getContact(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getContact(String) net.java.sip.communicator.service.protocol.OperationFailedException+OperationFailedException(String,int) net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+parseAddressString(String) net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+parseAddressString(String) java.lang.IllegalArgumentException+IllegalArgumentException(String,Throwable) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+resolveContactID(String) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+resolveContactID(String) javax.sip.address.URI+toString() javax.sip.address.Address+getURI() javax.sip.address.Address+getURI() javax.sip.address.URI+toString() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.service.protocol.ContactGroup+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getParentContactGroup() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getParentContactGroup() net.java.sip.communicator.service.protocol.ContactGroup+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getParentContactGroup() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getParentContactGroup() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactRemoved(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactRemoved(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+ContactSipImpl(Address,ProtocolProviderServiceSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setPersistent(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setPersistent(boolean) java.lang.String+length() java.lang.String+length() javax.sip.address.SipURI+getUser() javax.sip.address.Address+getURI() javax.sip.address.Address+getURI() javax.sip.address.SipURI+getUser() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setDisplayName(String) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setDisplayName(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.service.protocol.OperationFailedException+OperationFailedException(String,int,Throwable) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+isConnected() net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+isConnected() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isResourceListsSupported() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isResourceListsSupported() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setXCapResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setXCapResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+isContactInWhiteRule(String) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+isContactInWhiteRule(String) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+addContactToWhiteList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+addContactToWhiteList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updatePresRules() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updatePresRules() net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactAdded(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactAdded(ContactGroupSipImpl,ContactSipImpl)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.service.protocol.OperationFailedException+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+parentOperationSet net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.service.protocol.OperationFailedException+NETWORK_FAILURE net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger,4531,119,33,"/** 
 * Creates contact for the specified address and inside the specified group . If creation is successfull event will be fired.
 * @param parentGroup the group where the unersolved contact is to becreated.
 * @param contactId   the sip id of the contact to create.
 * @param displayName the display name of the contact to create
 * @param persistent  specify whether created contact is persistent ot not.
 * @return the newly created <tt>ContactSipImpl</tt>.
 * @throws OperationFailedException with code NETWORK_FAILURE if theoperation if failed during network communication.
 */
","/**
     * Creates contact for the specified address and inside the
     * specified group . If creation is successfull event will be fired.
     *
     * @param parentGroup the group where the unersolved contact is to be
     *                    created.
     * @param contactId   the sip id of the contact to create.
     * @param displayName the display name of the contact to create
     * @param persistent  specify whether created contact is persistent ot not.
     * @return the newly created <tt>ContactSipImpl</tt>.
     * @throws OperationFailedException with code NETWORK_FAILURE if the
     *                                  operation if failed during network
     *                                  communication.
     */
    synchronized public ContactSipImpl createContact(
            ContactGroupSipImpl parentGroup,
            String contactId,
            String displayName,
            boolean persistent)
            throws OperationFailedException
    {
        if (parentGroup == null)
        {
            throw new IllegalArgumentException(""Parent group cannot be null"");
        }
        if (contactId == null || contactId.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                    ""Contact identifier cannot be null or empty"");
        }
        if (logger.isTraceEnabled())
        {
            logger.trace(
                    String.format(""createContact %1s, %2s, %3s"",
                            parentGroup.getGroupName(), contactId, persistent));
        }
        if (parentGroup.getContact(contactId) != null)
        {
            throw new OperationFailedException(
                    ""Contact "" + contactId + "" already exists."",
                    OperationFailedException.SUBSCRIPTION_ALREADY_EXISTS);
        }
        Address contactAddress;
        try
        {
            contactAddress = sipProvider.parseAddressString(contactId);
        }
        catch (ParseException ex)
        {
            throw new IllegalArgumentException(contactId +
                    "" is not a valid string."", ex);
        }

        ContactSipImpl newContact = parentOperationSet.resolveContactID(
                contactAddress.getURI().toString());

        if(newContact != null && !newContact.isPersistent() &&
                !newContact.getParentContactGroup().isPersistent())
        {
            // this is a contact from not in contact list group
            // we must remove it
            ContactGroupSipImpl oldParentGroup =
                    (ContactGroupSipImpl)newContact.getParentContactGroup();
            oldParentGroup.removeContact(newContact);
            fireContactRemoved(oldParentGroup, newContact);
        }

        newContact = new ContactSipImpl(contactAddress,
                sipProvider);
        newContact.setPersistent(persistent);

        // Set the display name.
        if (displayName == null || displayName.length() <= 0)
            displayName = ((SipURI) contactAddress.getURI()).getUser();

        newContact.setDisplayName(displayName);

        parentGroup.addContact(newContact);
        if (newContact.isPersistent())
        {
            // Update resoure-lists
            try
            {
                updateResourceLists();
            }
            catch (XCapException e)
            {
                parentGroup.removeContact(newContact);
                throw new OperationFailedException(
                        ""Error while creating XCAP contact"",
                        OperationFailedException.NETWORK_FAILURE, e);
            }
            newContact.setResolved(true);
            XCapClient xCapClient = sipProvider.getXCapClient();
            if (xCapClient.isConnected() &&
                    xCapClient.isResourceListsSupported())
            {
                newContact.setXCapResolved(true);

                try
                {
                    // Update pres-rules if needed
                    if (!isContactInWhiteRule(contactId))
                    {
                        // Update pres-rules
                        if(addContactToWhiteList(newContact))
                            updatePresRules();
                    }
                }
                catch (XCapException e)
                {
                    logger.error(""Cannot add contact to white list while "" +
                            ""creating it"", e);
                }
            }
        }
        fireContactAdded(parentGroup, newContact);
        return newContact;
    }",False,False,"This method creates a contact with the specified address and adds it to the specified group. If the creation is successful, an event is fired. The method also handles various exceptions and updates resource lists and pres-rules if necessary.",False,"This code defines a method called ""createContact"" that creates a new contact within a specified group. It performs various validations and checks before creating the contact, sets its properties, and fires events accordingly. The method also handles persistence and updates resource lists and pres-rules if necessary."
19,removeContact(ContactSipImpl),remove contact contact removes a contact if creation is successfull event will be fired param contact contact to be removed throws operation failed exception with code network failure if theoperation if failed during network communication ,Method,,"net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+subscribe(ContactGroup,String) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+unsubscribe(Contact) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+PresenceSubscriberSubscription.processTerminatedRequest(RequestEvent,String)","java.lang.IllegalArgumentException+IllegalArgumentException(String) net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getParentContactGroup() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getParentContactGroup() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromWhiteList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromWhiteList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromBlockList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromBlockList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromPoliteBlockList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromPoliteBlockList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updatePresRules() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updatePresRules() net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.service.protocol.OperationFailedException+OperationFailedException(String,int,Throwable) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactRemoved(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactRemoved(ContactGroupSipImpl,ContactSipImpl)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.service.protocol.OperationFailedException+NETWORK_FAILURE,2152,59,33,"/** 
 * Removes a contact. If creation is successfull event will be fired.
 * @param contact contact to be removed.
 * @throws OperationFailedException with code NETWORK_FAILURE if theoperation if failed during network communication.
 */
","/**
     * Removes a contact. If creation is successfull event will be fired.
     *
     * @param contact contact to be removed.
     * @throws OperationFailedException with code NETWORK_FAILURE if the
     *                                  operation if failed during network
     *                                  communication.
     */
    synchronized public void removeContact(ContactSipImpl contact)
            throws OperationFailedException
    {
        if (contact == null)
        {
            throw new IllegalArgumentException(
                    ""Removing contact cannot be null"");
        }

        if(logger.isTraceEnabled())
            logger.trace(""removeContact "" + contact.getUri());

        ContactGroupSipImpl parentGroup =
                (ContactGroupSipImpl) contact.getParentContactGroup();
        parentGroup.removeContact(contact);
        if (contact.isPersistent())
        {
            try
            {
                // when removing contact add it to polite block list, cause
                // as soon as we remove it we will receive notification
                // for authorization (watcher info - pending)
                boolean updateRules = removeContactFromWhiteList(contact);
                updateRules = removeContactFromBlockList(contact)
                        || updateRules;
                updateRules = removeContactFromPoliteBlockList(contact)
                        || updateRules;

                if(updateRules)
                    updatePresRules();
            }
            catch (XCapException e)
            {
                logger.error(""Error while removing XCAP contact"", e);
            }

            // Update resoure-lists
            try
            {
                updateResourceLists();
            }
            catch (XCapException e)
            {
                parentGroup.removeContact(contact);
                throw new OperationFailedException(
                        ""Error while removing XCAP contact"",
                        OperationFailedException.NETWORK_FAILURE, e);
            }
        }
        fireContactRemoved(parentGroup, contact);
    }",False,False,"This method serves to remove a contact. It first checks if the contact is null and throws an exception if it is. Then it removes the contact from its parent group. If the contact is persistent, it removes it from various lists and updates the rules. It also updates the resource lists. Finally, it fires an event to notify that the contact has been removed.",False,"This code defines a method called ""removeContact"" that removes a contact from a contact group. It also handles updating various lists and firing an event when the contact is successfully removed. It throws an exception if there is a network failure during the operation."
20,"moveContactToGroup(ContactSipImpl,ContactGroupSipImpl)",move contact to group contact new parent group removes the specified contact from its current parent and places it under new parent param contact the contact to move param new parent group the contact group where contact would be placed throws operation failed exception with code network failure if theoperation if failed during network communication ,Method,,"net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+moveContactToGroup(Contact,ContactGroup)","java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.IllegalArgumentException+IllegalArgumentException(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getContact(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getContact(String) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.service.protocol.OperationFailedException+OperationFailedException(String,int) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getParentContactGroup() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getParentContactGroup() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setPersistent(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setPersistent(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addContact(ContactSipImpl) net.java.sip.communicator.service.protocol.OperationFailedException+OperationFailedException(String,int,Throwable) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+isConnected() net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+isConnected() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isResourceListsSupported() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isResourceListsSupported() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setXCapResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setXCapResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+isContactInWhiteRule(String) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+isContactInWhiteRule(String) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getAddress() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getAddress() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+addContactToWhiteList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+addContactToWhiteList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updatePresRules() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updatePresRules() net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactMoved(ContactGroupSipImpl,ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactMoved(ContactGroupSipImpl,ContactGroupSipImpl,ContactSipImpl)",net.java.sip.communicator.service.protocol.OperationFailedException+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.service.protocol.OperationFailedException+NETWORK_FAILURE net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger,3307,89,1,"/** 
 * Removes the specified contact from its current parent and places it under <tt>newParent</tt>.
 * @param contact        the <tt>Contact</tt> to move
 * @param newParentGroup the <tt>ContactGroup</tt> where <tt>Contact</tt>would be placed.
 * @throws OperationFailedException with code NETWORK_FAILURE if theoperation if failed during network communication.
 */
","/**
     * Removes the specified contact from its current parent and places it
     * under <tt>newParent</tt>.
     *
     * @param contact        the <tt>Contact</tt> to move
     * @param newParentGroup the <tt>ContactGroup</tt> where <tt>Contact</tt>
     *                       would be placed.
     * @throws OperationFailedException with code NETWORK_FAILURE if the
     *                                  operation if failed during network
     *                                  communication.
     */
    public void moveContactToGroup(
            ContactSipImpl contact,
            ContactGroupSipImpl newParentGroup)
            throws OperationFailedException
    {
        if (contact == null)
        {
            throw new IllegalArgumentException(
                    ""Moving contact cannot be null"");
        }
        if (newParentGroup == null)
        {
            throw new IllegalArgumentException(
                    ""New contact's parent group  be null"");
        }
        if (newParentGroup.getContact(contact.getUri()) != null)
        {
            throw new OperationFailedException(
                    ""Contact "" + contact.getUri() + "" already exists."",
                    OperationFailedException.SUBSCRIPTION_ALREADY_EXISTS);
        }
        ContactGroupSipImpl oldParentGroup =
                (ContactGroupSipImpl) contact.getParentContactGroup();
        oldParentGroup.removeContact(contact);

        boolean wasContactPersistent = contact.isPersistent();

        // if contact is not persistent we make it persistent if
        // new parent is persistent
        if(newParentGroup.isPersistent())
            contact.setPersistent(true);

        newParentGroup.addContact(contact);

        if (contact.isPersistent())
        {
            try
            {
                updateResourceLists();
            }
            catch (XCapException e)
            {
                newParentGroup.removeContact(contact);
                oldParentGroup.addContact(contact);
                throw new OperationFailedException(
                        ""Error while moving XCAP contact"",
                        OperationFailedException.NETWORK_FAILURE, e);
            }

            if(!wasContactPersistent)
            {
                contact.setResolved(true);
                XCapClient xCapClient = sipProvider.getXCapClient();
                if (xCapClient.isConnected() &&
                        xCapClient.isResourceListsSupported())
                {
                    contact.setXCapResolved(true);

                    try
                    {
                        // Update pres-rules if needed
                        if (!isContactInWhiteRule(contact.getAddress()))
                        {
                            // Update pres-rules
                            if(addContactToWhiteList(contact))
                                updatePresRules();
                        }
                    }
                    catch (XCapException e)
                    {
                        logger.error(""Cannot add contact to white list while "" +
                                ""creating it"", e);
                    }
                }
            }
        }
        fireContactMoved(oldParentGroup, newParentGroup, contact);
    }",False,False,The function of this method is to move a specified contact from its current parent group to a new parent group. It also handles various exceptions and updates the contact's persistence and XCAP settings if necessary.,False,"This code defines a method called ""moveContactToGroup"" that moves a specified contact from its current parent group to a new parent group. It performs various checks and operations, such as removing the contact from the old group, adding it to the new group, updating resource lists, and handling exceptions. Finally, it fires an event to notify listeners about the contact movement."
21,"renameContact(ContactSipImpl,String)",rename contact contact new name renames the specified contac param contact the contact to be renameed param new name the new contact name throws operation failed exception with code network failure if theoperation if failed during network communication ,Method,,"net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+setDisplayName(Contact,String)","java.lang.IllegalArgumentException+IllegalArgumentException(String) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getDisplayName() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getDisplayName() java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setDisplayName(String) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setDisplayName(String) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setDisplayName(String) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setDisplayName(String) java.lang.IllegalStateException+IllegalStateException(String,Throwable) net.java.sip.communicator.service.protocol.AbstractOperationSetPersistentPresence+fireContactPropertyChangeEvent(String,Contact,Object,Object) net.java.sip.communicator.service.protocol.AbstractOperationSetPersistentPresence+fireContactPropertyChangeEvent(String,Contact,Object,Object)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+parentOperationSet net.java.sip.communicator.service.protocol.event.ContactPropertyChangeEvent+PROPERTY_DISPLAY_NAME,1359,43,33,"/** 
 * Renames the specified contac.
 * @param contact the contact to be renameed.
 * @param newName the new contact name.
 * @throws OperationFailedException with code NETWORK_FAILURE if theoperation if failed during network communication.
 */
","/**
     * Renames the specified contac.
     *
     * @param contact the contact to be renameed.
     * @param newName the new contact name.
     * @throws OperationFailedException with code NETWORK_FAILURE if the
     *                                  operation if failed during network
     *                                  communication.
     */
    synchronized public void renameContact(
            ContactSipImpl contact,
            String newName)
    {
        if (contact == null)
        {
            throw new IllegalArgumentException(
                    ""Renaming contact cannot be null"");
        }
        String oldName = contact.getDisplayName();
        if (oldName.equals(newName))
        {
            return;
        }
        contact.setDisplayName(newName);
        if (contact.isPersistent())
        {
            try
            {
                updateResourceLists();
            }
            catch (XCapException e)
            {
                contact.setDisplayName(oldName);
                throw new IllegalStateException(
                        ""Error while renaming XCAP group"", e);
            }
        }
        parentOperationSet.fireContactPropertyChangeEvent(
                ContactPropertyChangeEvent.PROPERTY_DISPLAY_NAME,
                contact,
                oldName,
                newName);
    }",False,False,This method renames a contact by changing its display name. It throws an exception if the operation fails during network communication.,False,"This code defines a method called ""renameContact"" that renames a specified contact by updating its display name. If the contact is persistent, it also updates the resource lists and fires a contact property change event. It throws an exception if there is a network failure during the operation."
22,"createUnresolvedContactGroup(ContactGroupSipImpl,String)",create unresolved contact group parent group group name creates a non resolved contact group for the specified name the newly created group would be added to the local contact list as any other group but when an event is received from the server concerning this group then it will be reused and only its is resolved field would be updated instead of creating the whole group again param parent group the group under which the new group is to be created param group name the name of the group to create return the newly created unresolved contact group sip impl ,Method,,"net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+createUnresolvedContactGroup(String,String,ContactGroup)","java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.String+length() java.lang.String+length() java.lang.IllegalArgumentException+IllegalArgumentException(String) net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+ContactGroupSipImpl(String,ProtocolProviderServiceSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addSubgroup(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addSubgroup(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.service.protocol.event.ServerStoredGroupEvent+GROUP_CREATED_EVENT,1507,36,33,"/** 
 * Creates a non resolved contact group for the specified name. The newly created group would be added to the local contact list as any other group but when an event is received from the server concerning this group, then it will be reused and only its isResolved field would be updated instead of creating the whole group again. <p/>
 * @param parentGroup the group under which the new group is to be created.
 * @param groupName   the name of the group to create.
 * @return the newly created unresolved <tt>ContactGroupSipImpl</tt>.
 */
","/**
     * Creates a non resolved contact group for the specified name. The newly
     * created group would be added to the local contact list as any other group
     * but when an event is received from the server concerning this group, then
     * it will be reused and only its isResolved field would be updated instead
     * of creating the whole group again.
     * <p/>
     *
     * @param parentGroup the group under which the new group is to be created.
     * @param groupName   the name of the group to create.
     * @return the newly created unresolved <tt>ContactGroupSipImpl</tt>.
     */
    synchronized public ContactGroupSipImpl createUnresolvedContactGroup(
            ContactGroupSipImpl parentGroup,
            String groupName)
    {
        if (parentGroup == null)
        {
            throw new IllegalArgumentException(""Parent group cannot be null"");
        }
        if (groupName == null || groupName.length() == 0)
        {
            throw new IllegalArgumentException(
                    ""Creating group name cannot be null or empry"");
        }
        if (logger.isTraceEnabled())
        {
            logger.trace(""createUnresolvedContactGroup "" + groupName);
        }
        ContactGroupSipImpl subGroup = new ContactGroupSipImpl(groupName,
                sipProvider);
        subGroup.setResolved(false);
        parentGroup.addSubgroup(subGroup);
        fireGroupEvent(subGroup, ServerStoredGroupEvent.GROUP_CREATED_EVENT);
        return subGroup;
    }",True,True,"This method creates a non-resolved contact group with the specified name. The group is added to the parent group, and an event is fired. The newly created group can be reused and updated instead of creating a new group.",False,"This code defines a method called ""createUnresolvedContactGroup"" that creates a new contact group with a specified name. The group is added to the parent group and marked as unresolved. It also fires a group event to notify the server about the creation of the group."
23,"createGroup(ContactGroupSipImpl,String,boolean)",create group parent group group name persistent creates a group with the specified name and parent in the server stored contact list param parent group the group where the new group should be created param group name the name of the new group to create param persistent specify whether created contact is persistent ot not return the newly created contact group sip impl throws operation failed exception with code network failure if creatingthe group fails because of xcap server error or with code contact group already exists if contact group with such name already exists ,Method,,"net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+createServerStoredContactGroup(ContactGroup,String) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+createVolatileContact(String,String)","java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.String+length() java.lang.String+length() java.lang.IllegalArgumentException+IllegalArgumentException(String) net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroupName() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroupName() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroup(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroup(String) net.java.sip.communicator.service.protocol.OperationFailedException+OperationFailedException(String,int) java.lang.String+format(String,Object[]) java.lang.String+format(String,Object[]) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+ContactGroupSipImpl(String,ProtocolProviderServiceSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setPersistent(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setPersistent(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addSubgroup(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addSubgroup(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeSubGroup(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeSubGroup(ContactGroupSipImpl) net.java.sip.communicator.service.protocol.OperationFailedException+OperationFailedException(String,int,Throwable) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.service.protocol.OperationFailedException+CONTACT_GROUP_ALREADY_EXISTS net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.service.protocol.OperationFailedException+NETWORK_FAILURE net.java.sip.communicator.service.protocol.event.ServerStoredGroupEvent+GROUP_CREATED_EVENT,2536,61,33,"/** 
 * Creates a group with the specified name and parent in the server stored contact list.
 * @param parentGroup the group where the new group should be created.
 * @param groupName   the name of the new group to create.
 * @param persistent  specify whether created contact is persistent ot not.
 * @return the newly created <tt>ContactGroupSipImpl</tt>.
 * @throws OperationFailedException with code NETWORK_FAILURE if creatingthe group fails because of XCAP server error or with code CONTACT_GROUP_ALREADY_EXISTS if contact group with such name already exists.
 */
","/**
     * Creates a group with the specified name and parent in the server stored
     * contact list.
     *
     * @param parentGroup the group where the new group should be created.
     * @param groupName   the name of the new group to create.
     * @param persistent  specify whether created contact is persistent ot not.
     * @return the newly created <tt>ContactGroupSipImpl</tt>.
     * @throws OperationFailedException with code NETWORK_FAILURE if creating
     *                                  the group fails because of XCAP server
     *                                  error or with code
     *                                  CONTACT_GROUP_ALREADY_EXISTS if contact
     *                                  group with such name already exists.
     */
    synchronized public ContactGroupSipImpl createGroup(
            ContactGroupSipImpl parentGroup, String groupName,
            boolean persistent)
            throws OperationFailedException
    {
        if (parentGroup == null)
        {
            throw new IllegalArgumentException(""Parent group cannot be null"");
        }
        if (groupName == null || groupName.length() == 0)
        {
            throw new IllegalArgumentException(
                    ""Creating group name cannot be null or empry"");
        }
        if (logger.isTraceEnabled())
        {
            logger.trace(""createGroup "" + parentGroup.getGroupName() + "",""
                    + groupName + "","" + persistent);
        }
        if (parentGroup.getGroup(groupName) != null)
        {
            throw new OperationFailedException(
                    String.format(""Group %1s already exists."", groupName),
                    OperationFailedException.CONTACT_GROUP_ALREADY_EXISTS);
        }
        ContactGroupSipImpl subGroup =
                new ContactGroupSipImpl(groupName, sipProvider);
        subGroup.setPersistent(persistent);
        parentGroup.addSubgroup(subGroup);
        if (subGroup.isPersistent())
        {
            try
            {
                updateResourceLists();
            }
            catch (XCapException e)
            {
                parentGroup.removeSubGroup(subGroup);
                throw new OperationFailedException(
                        ""Error while creating XCAP group"",
                        OperationFailedException.NETWORK_FAILURE, e);
            }
            subGroup.setResolved(true);
        }
        fireGroupEvent(subGroup, ServerStoredGroupEvent.GROUP_CREATED_EVENT);
        return subGroup;
    }",False,False,This method creates a new contact group with a specified name and parent group in the server's stored contact list. It also allows for specifying whether the created contact is persistent or not. It returns the newly created ContactGroupSipImpl object.,False,"This code defines a method called ""createGroup"" that creates a new contact group with a specified name and parent group in the server's contact list. It also handles exceptions for cases where the group already exists or there is a network failure while creating the group. The method returns the newly created contact group."
24,removeGroup(ContactGroupSipImpl),remove group group removes the specified group from the server stored contact list param group the group to delete ,Method,,net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+removeServerStoredContactGroup(ContactGroup),"java.lang.IllegalArgumentException+IllegalArgumentException(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+equals(Object) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+equals(Object) java.lang.IllegalArgumentException+IllegalArgumentException(String) net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroupName() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroupName() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getParentContactGroup() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getParentContactGroup() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeSubGroup(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeSubGroup(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+contacts() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+contacts() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromWhiteList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromWhiteList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromBlockList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromBlockList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromPoliteBlockList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromPoliteBlockList(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updatePresRules() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updatePresRules() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addSubgroup(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addSubgroup(ContactGroupSipImpl) java.lang.IllegalStateException+IllegalStateException(String,Throwable) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.service.protocol.event.ServerStoredGroupEvent+GROUP_REMOVED_EVENT,1781,50,33,"/** 
 * Removes the specified group from the server stored contact list.
 * @param group the group to delete.
 */
","/**
     * Removes the specified group from the server stored contact list.
     *
     * @param group the group to delete.
     */
    synchronized public void removeGroup(ContactGroupSipImpl group)
    {
        if (group == null)
        {
            throw new IllegalArgumentException(""Removing group cannot be null"");
        }
        if (rootGroup.equals(group))
        {
            throw new IllegalArgumentException(""Root group cannot be deleted"");
        }
        if (logger.isTraceEnabled())
        {
            logger.trace(""removeGroup "" + group.getGroupName());
        }
        ContactGroupSipImpl parentGroup =
                (ContactGroupSipImpl) group.getParentContactGroup();
        parentGroup.removeSubGroup(group);
        if (group.isPersistent())
        {
            try
            {
                updateResourceLists();

                Iterator<Contact>  iter = group.contacts();
                boolean updateRules = false;
                while(iter.hasNext())
                {
                    ContactSipImpl c = (ContactSipImpl)iter.next();
                    updateRules = removeContactFromWhiteList(c) || updateRules;
                    updateRules = removeContactFromBlockList(c) || updateRules;
                    updateRules = removeContactFromPoliteBlockList(c)
                            || updateRules;
                }
                if(updateRules)
                    updatePresRules();
            }
            catch (XCapException e)
            {
                parentGroup.addSubgroup(group);
                throw new IllegalStateException(
                        ""Error while removing XCAP group"", e);
            }
        }
        fireGroupEvent(group, ServerStoredGroupEvent.GROUP_REMOVED_EVENT);
    }",False,False,"This method serves to remove a specified group from the server stored contact list. It checks if the group is null or the root group, throws exceptions if necessary, and then removes the group from its parent group. If the group is persistent, it updates the resource lists, removes contacts from various lists, and updates presence rules. Finally, it fires a group removed event.",False,"This code defines a method called `removeGroup` that removes a specified group from a server-stored contact list. It first checks if the group is valid and not the root group, then removes the group from its parent group. If the group is persistent, it updates the resource lists, removes contacts from various lists, and updates presence rules. Finally, it fires a group removed event."
25,"renameGroup(ContactGroupSipImpl,String)",rename group group new name renames the specified group from the server stored contact list param group the group to rename param new name the new name of the group ,Method,,"net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+renameServerStoredContactGroup(ContactGroup,String)","java.lang.IllegalArgumentException+IllegalArgumentException(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+equals(Object) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+equals(Object) java.lang.IllegalArgumentException+IllegalArgumentException(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroupName() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroupName() java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getParentContactGroup() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getParentContactGroup() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroup(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroup(String) java.lang.IllegalStateException+IllegalStateException(String) java.lang.String+format(String,Object[]) java.lang.String+format(String,Object[]) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setName(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setName(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setName(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setName(String) java.lang.IllegalStateException+IllegalStateException(String,Throwable) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.service.protocol.event.ServerStoredGroupEvent+GROUP_RENAMED_EVENT,1490,47,33,"/** 
 * Renames the specified group from the server stored contact list.
 * @param group   the group to rename.
 * @param newName the new name of the group.
 */
","/**
     * Renames the specified group from the server stored contact list.
     *
     * @param group   the group to rename.
     * @param newName the new name of the group.
     */
    synchronized public void renameGroup(
            ContactGroupSipImpl group,
            String newName)
    {
        if (group == null)
        {
            throw new IllegalArgumentException(""Renaming group cannot be null"");
        }
        if (rootGroup.equals(group))
        {
            throw new IllegalArgumentException(""Root group cannot be renamed"");
        }
        String oldName = group.getGroupName();
        if (oldName.equals(newName))
        {
            return;
        }
        ContactGroupSipImpl parentGroup =
                (ContactGroupSipImpl) group.getParentContactGroup();
        if (parentGroup.getGroup(newName) != null)
        {
            throw new IllegalStateException(
                    String.format(""Group with name %1s already exists"",
                            newName));
        }
        group.setName(newName);
        if (group.isPersistent())
        {
            try
            {
                updateResourceLists();
            }
            catch (XCapException e)
            {
                group.setName(oldName);
                throw new IllegalStateException(
                        ""Error while renaming XCAP group"", e);
            }
        }
        fireGroupEvent(group, ServerStoredGroupEvent.GROUP_RENAMED_EVENT);
    }",False,False,"This method renames a specified group in a server stored contact list. It checks if the group is null or the root group, throws exceptions if necessary. It then renames the group, updates the resource lists if the group is persistent, and fires a group renamed event.",False,"This code defines a method called ""renameGroup"" which is used to rename a specified group in a server stored contact list. It first checks if the group is null or if it is the root group, and throws exceptions accordingly. Then it renames the group, updates the resource lists if the group is persistent, and fires a group event."
26,"fireContactAdded(ContactGroupSipImpl,ContactSipImpl)",fire contact added parent group contact make the parent persistent presence operation set dispatch a contact added event param parent group the group where the new contact was added param contact the contact that was added ,Method,"createUnresolvedContact(ContactGroupSipImpl,String,String) createContact(ContactGroupSipImpl,String,String,boolean) resolveContactGroup(ContactGroupSipImpl,ListType,boolean)",,"net.java.sip.communicator.service.protocol.AbstractOperationSetPersistentPresence+fireSubscriptionEvent(Contact,ContactGroup,int) net.java.sip.communicator.service.protocol.AbstractOperationSetPersistentPresence+fireSubscriptionEvent(Contact,ContactGroup,int)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+parentOperationSet net.java.sip.communicator.service.protocol.event.SubscriptionEvent+SUBSCRIPTION_CREATED,526,16,2,"/** 
 * Make the parent persistent presence operation set dispatch a contact added event.
 * @param parentGroup the group where the new contact was added.
 * @param contact     the contact that was added.
 */
","/**
     * Make the parent persistent presence operation set dispatch a contact
     * added event.
     *
     * @param parentGroup the group where the new contact was added.
     * @param contact     the contact that was added.
     */
    private void fireContactAdded(
            ContactGroupSipImpl parentGroup,
            ContactSipImpl contact)
    {
        parentOperationSet.fireSubscriptionEvent(
                contact,
                parentGroup,
                SubscriptionEvent.SUBSCRIPTION_CREATED);
    }",True,True,"The function of this method is to trigger a contact added event by calling the fireSubscriptionEvent method on the parentOperationSet object, passing in the contact, parentGroup, and a subscription event type.",False,This code is a private method that is used to trigger a contact added event in the parent persistent presence operation set. It takes in the parent group and the contact that was added as parameters and then calls the fireSubscriptionEvent method of the parent operation set to notify subscribers about the new contact.
27,"fireContactMoved(ContactGroupSipImpl,ContactGroupSipImpl,ContactSipImpl)",fire contact moved old parent group new parent group contact make the parent persistent presence operation set dispatch a subscription moved event param old parent group the group where the source contact was locatedbefore being moved param new parent group the group that the source contact is currently in param contact the contact that was added ,Method,"moveContactToGroup(ContactSipImpl,ContactGroupSipImpl)",,"net.java.sip.communicator.service.protocol.AbstractOperationSetPersistentPresence+fireSubscriptionMovedEvent(Contact,ContactGroup,ContactGroup) net.java.sip.communicator.service.protocol.AbstractOperationSetPersistentPresence+fireSubscriptionMovedEvent(Contact,ContactGroup,ContactGroup)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+parentOperationSet,705,19,2,"/** 
 * Make the parent persistent presence operation set dispatch a subscription moved event.
 * @param oldParentGroup the group where the source contact was locatedbefore being moved.
 * @param newParentGroup the group that the source contact is currently in.
 * @param contact        the contact that was added.
 */
","/**
     * Make the parent persistent presence operation set dispatch a subscription
     * moved event.
     *
     * @param oldParentGroup the group where the source contact was located
     *                       before being moved.
     * @param newParentGroup the group that the source contact is currently in.
     * @param contact        the contact that was added.
     */
    private void fireContactMoved(
            ContactGroupSipImpl oldParentGroup,
            ContactGroupSipImpl newParentGroup,
            ContactSipImpl contact)
    {
        parentOperationSet.fireSubscriptionMovedEvent(
                contact,
                oldParentGroup,
                newParentGroup);
    }",True,True,"This method is used to notify the parent operation set that a contact has been moved from one group to another, triggering a subscription moved event.",False,"This code defines a private method called ""fireContactMoved"" that is responsible for notifying the parent persistent presence operation set to dispatch a subscription moved event. It takes in the old and new parent groups, as well as the contact that was added, and calls the ""fireSubscriptionMovedEvent"" method of the parent operation set with the appropriate parameters."
28,"fireContactRemoved(ContactGroupSipImpl,ContactSipImpl)",fire contact removed parent group contact make the parent persistent presence operation set dispatch a contact removed event param parent group the group where that the removed contact belonged to param contact the contact that was removed ,Method,"createContact(ContactGroupSipImpl,String,String,boolean) removeContact(ContactSipImpl) init() resolveContactGroup(ContactGroupSipImpl,ListType,boolean)",,"net.java.sip.communicator.service.protocol.AbstractOperationSetPersistentPresence+fireSubscriptionEvent(Contact,ContactGroup,int) net.java.sip.communicator.service.protocol.AbstractOperationSetPersistentPresence+fireSubscriptionEvent(Contact,ContactGroup,int)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+parentOperationSet net.java.sip.communicator.service.protocol.event.SubscriptionEvent+SUBSCRIPTION_REMOVED,543,16,2,"/** 
 * Make the parent persistent presence operation set dispatch a contact removed event.
 * @param parentGroup the group where that the removed contact belonged to.
 * @param contact     the contact that was removed.
 */
","/**
     * Make the parent persistent presence operation set dispatch a contact
     * removed event.
     *
     * @param parentGroup the group where that the removed contact belonged to.
     * @param contact     the contact that was removed.
     */
    private void fireContactRemoved(
            ContactGroupSipImpl parentGroup,
            ContactSipImpl contact)
    {
        parentOperationSet.fireSubscriptionEvent(
                contact,
                parentGroup,
                SubscriptionEvent.SUBSCRIPTION_REMOVED);
    }",True,True,The function of this method is to trigger a contact removed event in the parent persistent presence operation set. It takes the parent group and the removed contact as parameters and uses them to fire the subscription event.,False,This code is a private method that is used to trigger a contact removed event in the parent persistent presence operation set. It takes in the parent group and the contact that was removed as parameters and calls the fireSubscriptionEvent method with the appropriate arguments to notify subscribers of the removal.
29,"fireContactResolved(ContactGroupSipImpl,ContactSipImpl)",fire contact resolved parent group contact make the parent persistent presence operation set dispatch a contact resolved event param parent group the group that the resolved contact belongs to param contact the contact that was resolved ,Method,"init() resolveContactGroup(ContactGroupSipImpl,ListType,boolean)",,"net.java.sip.communicator.service.protocol.AbstractOperationSetPersistentPresence+fireSubscriptionEvent(Contact,ContactGroup,int) net.java.sip.communicator.service.protocol.AbstractOperationSetPersistentPresence+fireSubscriptionEvent(Contact,ContactGroup,int)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+parentOperationSet net.java.sip.communicator.service.protocol.event.SubscriptionEvent+SUBSCRIPTION_RESOLVED,541,16,2,"/** 
 * Make the parent persistent presence operation set dispatch a contact resolved event.
 * @param parentGroup the group that the resolved contact belongs to.
 * @param contact     the contact that was resolved.
 */
","/**
     * Make the parent persistent presence operation set dispatch a contact
     * resolved event.
     *
     * @param parentGroup the group that the resolved contact belongs to.
     * @param contact     the contact that was resolved.
     */
    private void fireContactResolved(
            ContactGroupSipImpl parentGroup,
            ContactSipImpl contact)
    {
        parentOperationSet.fireSubscriptionEvent(
                contact,
                parentGroup,
                SubscriptionEvent.SUBSCRIPTION_RESOLVED);
    }",True,True,The function of this method is to trigger a contact resolved event in the parent persistent presence operation set. It takes the parent group and the resolved contact as parameters and uses them to fire the subscription event.,False,"The `fireContactResolved` method is used to notify the parent persistent presence operation set to dispatch a contact resolved event. It takes a parent group and a resolved contact as parameters and calls the `fireSubscriptionEvent` method of the parent operation set, passing the contact, parent group, and a subscription resolved event as arguments."
30,init(),init initializes the server stored list synchronize server stored groups and contacts with the local groups and contacts ,Method,,net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+registrationStateChanged(RegistrationStateChangeEvent),"net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+isConnected() net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+isConnected() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isResourceListsSupported() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isResourceListsSupported() net.java.sip.communicator.impl.protocol.sip.xcap.ResourceListsClient+getResourceLists() net.java.sip.communicator.impl.protocol.sip.xcap.ResourceListsClient+getResourceLists() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+ListType() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ResourceListsType+getList() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ResourceListsType+getList() java.lang.String+equals(Object) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getName() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getName() java.lang.String+equals(Object) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setName(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setName(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setDisplayName(DisplayNameType) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setDisplayName(DisplayNameType) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getDisplayName() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getDisplayName() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntries() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntries() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntries() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntries() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntryRefs() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntryRefs() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntryRefs() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntryRefs() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getExternals() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getExternals() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getExternals() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getExternals() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setAny(List<Element>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setAny(List<Element>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAny() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAny() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setAnyAttributes(Map<QName,String>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setAnyAttributes(Map<QName,String>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAnyAttributes() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAnyAttributes() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getLists() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getLists() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+resolveContactGroup(ContactGroupSipImpl,ListType,boolean) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+resolveContactGroup(ContactGroupSipImpl,ListType,boolean) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllContacts(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllContacts(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isResolved() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isResolved() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getParentContactGroup() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getParentContactGroup() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isXCapResolved() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isXCapResolved() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactRemoved(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactRemoved(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getPersistentData() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getPersistentData() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setXCapResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setXCapResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactResolved(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactResolved(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.service.protocol.AbstractOperationSetPersistentPresence+fireContactPropertyChangeEvent(String,Contact,Object,Object) net.java.sip.communicator.service.protocol.AbstractOperationSetPersistentPresence+fireContactPropertyChangeEvent(String,Contact,Object,Object) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getPersistentData() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getPersistentData() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllGroups(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllGroups(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isResolved() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isResolved() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updateResourceLists() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isPresRulesSupported() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isPresRulesSupported() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+createWhiteRule() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+createWhiteRule() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RulesetType+getRules() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RulesetType+getRules() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getUniqueContacts(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getUniqueContacts(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+isContactInRule(RuleType,String) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+isContactInRule(RuleType,String) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+addContactToRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+addContactToRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updatePresRules() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+updatePresRules() net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+disconnect() net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+disconnect()",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+ROOT_GROUP_NAME net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+ROOT_GROUP_NAME net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+parentOperationSet net.java.sip.communicator.service.protocol.event.ContactPropertyChangeEvent+PROPERTY_PERSISTENT_DATA net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.service.protocol.event.ServerStoredGroupEvent+GROUP_RESOLVED_EVENT net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+presRules net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider,5505,132,33,"/** 
 * Initializes the server stored list. Synchronize server stored groups and contacts with the local groups and contacts.
 */
","/**
     * Initializes the server stored list. Synchronize server stored groups and
     * contacts with the local groups and contacts.
     */
    synchronized public void init()
    {
        try
        {
            XCapClient xCapClient = sipProvider.getXCapClient();
            if (!xCapClient.isConnected() ||
                    !xCapClient.isResourceListsSupported())
            {
                return;
            }
            // Process resource-lists
            ResourceListsType resourceLists = xCapClient.getResourceLists();
            // Collect all root's subgroups to check if some of them were deleted
            ListType serverRootList = new ListType();
            for (ListType list : resourceLists.getList())
            {
                // If root group has sub group with ROOT_GROUP_NAME - it is
                // special group for storing contacts that is not allowed by RFC
                if (list.getName().equals(ROOT_GROUP_NAME))
                {
                    serverRootList.setName(ROOT_GROUP_NAME);
                    serverRootList.setDisplayName(list.getDisplayName());
                    serverRootList.getEntries().addAll(list.getEntries());
                    serverRootList.getEntryRefs().addAll(list.getEntryRefs());
                    serverRootList.getExternals().addAll(list.getExternals());
                    serverRootList.setAny(list.getAny());
                    serverRootList
                            .setAnyAttributes(list.getAnyAttributes());
                }
                else
                {
                    serverRootList.getLists().add(list);
                }
            }
            boolean updateResourceLists = false;
            // Resolve localy saved contacts and groups with server stored
            // contacts and groups
            resolveContactGroup(rootGroup, serverRootList, false);
            // Upload unresolved contacts and groups to the server.
            for (ContactSipImpl contact : getAllContacts(rootGroup))
            {
                if (!contact.isResolved() && contact.isPersistent())
                {
                    contact.setResolved(true);
                    ContactGroupSipImpl parentGroup = ((ContactGroupSipImpl)
                            contact.getParentContactGroup());
                    // If contact is xcap.resolved and is not on the server we
                    // delete it
                    if (contact.isXCapResolved())
                    {
                        parentGroup.removeContact(contact);
                        fireContactRemoved(parentGroup, contact);
                    }
                    // If contact is added localy we upload it
                    else
                    {
                        updateResourceLists = true;
                        String oldValue = contact.getPersistentData();
                        contact.setXCapResolved(true);
                        fireContactResolved(parentGroup, contact);

                        // fire that property is changed in order
                        // to save change, event resolved doesn't save it
                        parentOperationSet.fireContactPropertyChangeEvent(
                            ContactPropertyChangeEvent.PROPERTY_PERSISTENT_DATA,
                            contact,
                            oldValue,
                            contact.getPersistentData()
                        );
                    }
                }
            }
            for (ContactGroupSipImpl group : getAllGroups(rootGroup))
            {
                if (!group.isResolved() && group.isPersistent())
                {
                    updateResourceLists = true;
                    group.setResolved(true);
                    fireGroupEvent(group,
                            ServerStoredGroupEvent.GROUP_RESOLVED_EVENT);
                }
            }
            // Update resource-lists if needed
            if(updateResourceLists)
            {
                updateResourceLists();
            }
            // Process pres-rules
            if (xCapClient.isPresRulesSupported())
            {
                // Get white pres-rules and analyze it
                RuleType whiteRule = getRule(SubHandlingType.Allow);

                boolean updateRules = false;

                // If ""white"" rule is available refresh it
                if (whiteRule == null)
                {
                    whiteRule = createWhiteRule();
                    presRules.getRules().add(whiteRule);
                }

                // Add contacts into the ""white"" rule if missing
                List<ContactSipImpl> uniqueContacts =
                        getUniqueContacts(rootGroup);
                for (ContactSipImpl contact : uniqueContacts)
                {
                    if(contact.isPersistent()
                        && !isContactInRule(whiteRule, contact.getUri()))
                    {
                        addContactToRule(whiteRule, contact);
                        updateRules = true;
                    }
                }

                if(updateRules)
                    updatePresRules();
            }
        }
        catch (XCapException e)
        {
            logger.error(""Error initializing serverside list!"", e);

            // if for some reason we cannot init the contact list
            // disconnect xcap client
            sipProvider.getXCapClient().disconnect();
        }
    }",False,False,"This method initializes the server stored list by synchronizing the server stored groups and contacts with the local groups and contacts. It also processes resource-lists and pres-rules, and updates them if needed.",False,"The `init()` method initializes the server stored list by synchronizing the server stored groups and contacts with the local groups and contacts. It retrieves the resource lists from the XCapClient, resolves and uploads unresolved contacts and groups, updates the resource lists if needed, and processes pres-rules by refreshing the ""white"" rule and adding missing contacts to it. If an error occurs during initialization, the XCapClient is disconnected."
31,destroy(),destroy destroys the server stored list ,Method,,net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+registrationStateChanged(RegistrationStateChangeEvent) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+registrationStateChanged(RegistrationStateChangeEvent),net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllContacts(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllContacts(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean),net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+presRules,303,12,33,"/** 
 * Destroys the server stored list.
 */
","/**
     * Destroys the server stored list.
     */
    synchronized public void destroy()
    {
        List<ContactSipImpl> contacts = getAllContacts(rootGroup);
        for (ContactSipImpl contact : contacts)
        {
            contact.setResolved(false);
        }
        presRules = null;
    }",False,False,"This method destroys the server stored list by setting the ""resolved"" property of each contact in the list to false and setting the ""presRules"" variable to null.",False,"The `destroy()` method is a synchronized method that is used to destroy the server stored list. It retrieves all contacts from the root group, sets their resolved status to false, and then sets the presRules variable to null."
32,createWhiteRule(),create white rule creates white rule with full permissions return created rule ,Method,init() addContactToWhiteList(ContactSipImpl),,net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+RuleType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setId(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setId(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+ConditionsType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setConditions(ConditionsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setConditions(ConditionsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ActionsType+ActionsType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ActionsType+setSubHandling(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ActionsType+setSubHandling(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setActions(ActionsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setActions(ActionsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.TransformationsType+TransformationsType() net.java.sip.communicator.impl.protocol.sip.xcap.model.presrules.ProvideServicePermissionType+ProvideServicePermissionType() net.java.sip.communicator.impl.protocol.sip.xcap.model.presrules.ProvideServicePermissionType+setAllServices(AllServicesType) net.java.sip.communicator.impl.protocol.sip.xcap.model.presrules.ProvideServicePermissionType+setAllServices(AllServicesType) net.java.sip.communicator.impl.protocol.sip.xcap.model.presrules.ProvideServicePermissionType.AllServicesType+AllServicesType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.TransformationsType+setServicePermission(ProvideServicePermissionType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.TransformationsType+setServicePermission(ProvideServicePermissionType) net.java.sip.communicator.impl.protocol.sip.xcap.model.presrules.ProvidePersonPermissionType+ProvidePersonPermissionType() net.java.sip.communicator.impl.protocol.sip.xcap.model.presrules.ProvidePersonPermissionType+setAllPersons(AllPersonsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.presrules.ProvidePersonPermissionType+setAllPersons(AllPersonsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.presrules.ProvidePersonPermissionType.AllPersonsType+AllPersonsType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.TransformationsType+setPersonPermission(ProvidePersonPermissionType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.TransformationsType+setPersonPermission(ProvidePersonPermissionType) net.java.sip.communicator.impl.protocol.sip.xcap.model.presrules.ProvideDevicePermissionType+ProvideDevicePermissionType() net.java.sip.communicator.impl.protocol.sip.xcap.model.presrules.ProvideDevicePermissionType+setAllDevices(AllDevicesType) net.java.sip.communicator.impl.protocol.sip.xcap.model.presrules.ProvideDevicePermissionType+setAllDevices(AllDevicesType) net.java.sip.communicator.impl.protocol.sip.xcap.model.presrules.ProvideDevicePermissionType.AllDevicesType+AllDevicesType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.TransformationsType+setDevicePermission(ProvideDevicePermissionType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.TransformationsType+setDevicePermission(ProvideDevicePermissionType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setTransformations(TransformationsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setTransformations(TransformationsType),net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+DEFAULT_WHITE_RULE_ID,1490,37,10,"/** 
 * Creates ""white"" rule with full permissions.
 * @return created rule.
 */
","/**
     * Creates ""white"" rule with full permissions.
     *
     * @return created rule.
     */
    private static RuleType createWhiteRule()
    {
        RuleType whiteList = new RuleType();
        whiteList.setId(DEFAULT_WHITE_RULE_ID);

        ConditionsType conditions = new ConditionsType();
        whiteList.setConditions(conditions);

        ActionsType actions = new ActionsType();
        actions.setSubHandling(SubHandlingType.Allow);
        whiteList.setActions(actions);

        TransformationsType transformations = new TransformationsType();
        ProvideServicePermissionType servicePermission =
                new ProvideServicePermissionType();
        servicePermission.setAllServices(
                new ProvideServicePermissionType.AllServicesType());
        transformations.setServicePermission(servicePermission);
        ProvidePersonPermissionType personPermission =
                new ProvidePersonPermissionType();
        personPermission.setAllPersons(
                new ProvidePersonPermissionType.AllPersonsType());
        transformations.setPersonPermission(personPermission);
        ProvideDevicePermissionType devicePermission =
                new ProvideDevicePermissionType();
        devicePermission.setAllDevices(
                new ProvideDevicePermissionType.AllDevicesType());
        transformations.setDevicePermission(devicePermission);
        whiteList.setTransformations(transformations);

        return whiteList;
    }",False,False,"The function creates a ""white"" rule with full permissions and returns the created rule.",False,"This code defines a private static method called ""createWhiteRule"" that creates a rule with full permissions. The method initializes various properties of the rule, such as conditions, actions, and transformations, and returns the created rule."
33,createBlockRule(),create block rule creates block rule return created rule ,Method,addContactToBlockList(ContactSipImpl),,net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+RuleType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setId(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setId(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+ConditionsType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setConditions(ConditionsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setConditions(ConditionsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ActionsType+ActionsType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ActionsType+setSubHandling(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ActionsType+setSubHandling(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setActions(ActionsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setActions(ActionsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.TransformationsType+TransformationsType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setTransformations(TransformationsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setTransformations(TransformationsType),net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+DEFAULT_BLOCK_RULE_ID,631,22,10,"/** 
 * Creates ""block"" rule.
 * @return created rule.
 */
","/**
     * Creates ""block"" rule.
     *
     * @return created rule.
     */
    private static RuleType createBlockRule()
    {
        RuleType blackList = new RuleType();
        blackList.setId(DEFAULT_BLOCK_RULE_ID);

        ConditionsType conditions = new ConditionsType();
        blackList.setConditions(conditions);

        ActionsType actions = new ActionsType();
        actions.setSubHandling(SubHandlingType.Block);
        blackList.setActions(actions);

        TransformationsType transformations = new TransformationsType();
        blackList.setTransformations(transformations);

        return blackList;
    }",False,False,"This method creates a ""block"" rule by initializing a RuleType object with default values for its id, conditions, actions, and transformations. It then returns the created rule.",False,"This code defines a private static method called ""createBlockRule"" that creates and returns a RuleType object. The method sets various properties of the RuleType object, such as its ID, conditions, actions, and transformations. The returned RuleType object represents a ""block"" rule."
34,createPoliteBlockRule(),create polite block rule creates polite block rule return created rule ,Method,addContactToPoliteBlockList(ContactSipImpl),,net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+RuleType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setId(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setId(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+ConditionsType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setConditions(ConditionsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setConditions(ConditionsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ActionsType+ActionsType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ActionsType+setSubHandling(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ActionsType+setSubHandling(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setActions(ActionsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setActions(ActionsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.TransformationsType+TransformationsType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setTransformations(TransformationsType) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+setTransformations(TransformationsType),net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+DEFAULT_POLITE_BLOCK_RULE_ID,657,22,10,"/** 
 * Creates ""polite block"" rule.
 * @return created rule.
 */
","/**
     * Creates ""polite block"" rule.
     *
     * @return created rule.
     */
    private static RuleType createPoliteBlockRule()
    {
        RuleType blackList = new RuleType();
        blackList.setId(DEFAULT_POLITE_BLOCK_RULE_ID);

        ConditionsType conditions = new ConditionsType();
        blackList.setConditions(conditions);

        ActionsType actions = new ActionsType();
        actions.setSubHandling(SubHandlingType.PoliteBlock);
        blackList.setActions(actions);

        TransformationsType transformations = new TransformationsType();
        blackList.setTransformations(transformations);

        return blackList;
    }",False,False,"This method creates a ""polite block"" rule by initializing a RuleType object with default values for its id, conditions, actions, and transformations. It then returns the created rule.",False,"This code defines a private static method called createPoliteBlockRule() that creates and returns a RuleType object. The method sets the id, conditions, actions, and transformations of the RuleType object before returning it."
35,getRule(SubHandlingType),get rule type finds the rule with the given action type param type the action type to search for return the rule if any or null ,Method,init() addContactToWhiteList(ContactSipImpl) addContactToWhiteList(ContactSipImpl) addContactToWhiteList(ContactSipImpl) addContactToBlockList(ContactSipImpl) addContactToBlockList(ContactSipImpl) addContactToBlockList(ContactSipImpl) addContactToPoliteBlockList(ContactSipImpl) addContactToPoliteBlockList(ContactSipImpl) addContactToPoliteBlockList(ContactSipImpl) isContactInWhiteRule(String) removeContactFromWhiteList(ContactSipImpl) removeContactFromBlockList(ContactSipImpl) removeContactFromPoliteBlockList(ContactSipImpl),,net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+isConnected() net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+isConnected() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isResourceListsSupported() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isResourceListsSupported() net.java.sip.communicator.impl.protocol.sip.xcap.PresRulesClient+getPresRules() net.java.sip.communicator.impl.protocol.sip.xcap.PresRulesClient+getPresRules() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RulesetType+getRules() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RulesetType+getRules() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ActionsType+getSubHandling() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getActions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getActions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ActionsType+getSubHandling(),net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+presRules net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+presRules net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+presRules,857,31,2,"/** 
 * Finds the rule with the given action type.
 * @param type the action type to search for.
 * @return the rule if any or null.
 */
","/**
     * Finds the rule with the given action type.
     * @param type the action type to search for.
     * @return the rule if any or null.
     */
    private RuleType getRule(SubHandlingType type)
        throws XCapException
    {
        if(presRules == null)
        {
            XCapClient xCapClient = sipProvider.getXCapClient();
            if (!xCapClient.isConnected() ||
                    !xCapClient.isResourceListsSupported())
            {
                return null;
            }

            presRules = xCapClient.getPresRules();
        }

        for (RuleType rule : presRules.getRules())
        {
            SubHandlingType currType = rule.getActions().getSubHandling();
            if (currType != null && currType.equals(type))
            {
                return rule;
            }
        }

        return null;
    }",False,False,"This method is used to find a rule with a specific action type. It takes a SubHandlingType as a parameter and returns the rule if found, otherwise it returns null.",False,"This code defines a private method called ""getRule"" that searches for a rule with a given action type. It first checks if the ""presRules"" variable is null and if so, retrieves the rules from an XCapClient. It then iterates through the rules and returns the first rule that matches the given action type, or null if no match is found."
36,"isContactInRule(RuleType,String)",is contact in rule rule contact uri checks whether the contact in the specified rule param rule the rule param contact uri the contact uri to check return is the contact in the rule ,Method,"init() addContactToRule(RuleType,ContactSipImpl) isContactInWhiteRule(String)",,java.util.List+size() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() java.util.List+size() java.util.List+get(int) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() java.util.List+get(int) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.IdentityType+getOneList() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.IdentityType+getOneList() java.lang.String+equals(Object) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.OneType+getId() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.OneType+getId() java.lang.String+equals(Object),,687,24,10,"/** 
 * Checks whether the contact in the specified rule.
 * @param rule the rule.
 * @param contactUri the contact uri to check.
 * @return is the contact in the rule.
 */
","/**
     * Checks whether the contact in the specified rule.
     *
     * @param rule the rule.
     * @param contactUri the contact uri to check.
     * @return is the contact in the rule.
     */
    private static boolean isContactInRule(RuleType rule, String contactUri)
    {
        IdentityType identity;
        if (rule.getConditions().getIdentities().size() == 0)
        {
            return false;
        }
        identity = rule.getConditions().getIdentities().get(0);
        for (OneType one : identity.getOneList())
        {
            if (one.getId().equals(contactUri))
            {
                return true;
            }
        }
        return false;
    }",False,False,"This method checks if a given contact URI is present in the specified rule's conditions. It returns true if the contact is in the rule, and false otherwise.",False,"This code defines a private method called ""isContactInRule"" that checks whether a given contact URI is present in a specified rule. It iterates through the identities in the rule's conditions and returns true if the contact URI is found, otherwise it returns false."
37,"addContactToRule(RuleType,ContactSipImpl)",add contact to rule rule contact adds contact to the rule param contact the contact to add param rule the rule to use to add contact to return true if present rules were updated false otherwise ,Method,init() addContactToWhiteList(ContactSipImpl) addContactToBlockList(ContactSipImpl) addContactToPoliteBlockList(ContactSipImpl),,"net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+isContactInRule(RuleType,String) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+isContactInRule(RuleType,String) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() java.util.List+size() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() java.util.List+size() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.IdentityType+IdentityType() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() java.util.List+add(E) java.util.List+get(int) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() java.util.List+get(int) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.OneType+OneType() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.OneType+setId(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.OneType+setId(String) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.IdentityType+getOneList() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.IdentityType+getOneList() java.util.List+add(E)",,846,28,10,"/** 
 * Adds contact to the rule.
 * @param contact the contact to add.
 * @param rule the rule to use to add contact to.
 * @return true if present rules were updated, false otherwise.
 */
","/**
     * Adds contact to the rule.
     *
     * @param contact the contact to add.
     * @param rule the rule to use to add contact to.
     * @return true if present rules were updated, false otherwise.
     */
    private static boolean addContactToRule(RuleType rule, ContactSipImpl contact)
    {
        if(isContactInRule(rule, contact.getUri()))
            return false;

        IdentityType identity;
        if (rule.getConditions().getIdentities().size() == 0)
        {
            identity = new IdentityType();
            rule.getConditions().getIdentities().add(identity);
        }
        else
        {
            identity = rule.getConditions().getIdentities().get(0);
        }
        OneType one = new OneType();
        one.setId(contact.getUri());
        identity.getOneList().add(one);

        return true;
    }",False,False,"This method adds a contact to a rule. It checks if the contact is already in the rule, and if not, it adds the contact to the rule's conditions. It returns true if the rule was updated, and false otherwise.",False,"This code is a private method that adds a contact to a given rule. It checks if the contact is already present in the rule, and if not, it creates a new identity and adds the contact to it. The method returns true if the rules were updated successfully, and false otherwise."
38,"removeContactFromRule(RuleType,ContactSipImpl)",remove contact from rule rule contact removes contact from the rule param contact the contact to remove param rule the rule to use to remove contact from return true if present rules were updated false otherwise ,Method,addContactToWhiteList(ContactSipImpl) addContactToWhiteList(ContactSipImpl) addContactToBlockList(ContactSipImpl) addContactToBlockList(ContactSipImpl) addContactToPoliteBlockList(ContactSipImpl) addContactToPoliteBlockList(ContactSipImpl) removeContactFromWhiteList(ContactSipImpl) removeContactFromBlockList(ContactSipImpl) removeContactFromPoliteBlockList(ContactSipImpl),,java.util.List+size() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() java.util.List+size() java.util.List+get(int) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() java.util.List+get(int) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.IdentityType+getOneList() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.IdentityType+getOneList() java.lang.String+equals(Object) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() java.lang.String+equals(Object) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.OneType+getId() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.OneType+getId() java.util.List+remove(Object) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.IdentityType+getOneList() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.IdentityType+getOneList() java.util.List+remove(Object) java.util.List+size() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.IdentityType+getOneList() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.IdentityType+getOneList() java.util.List+size() java.util.List+remove(Object) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() java.util.List+remove(Object) java.util.List+remove(Object) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RuleType+getConditions() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.ConditionsType+getIdentities() java.util.List+remove(Object),,1096,37,10,"/** 
 * Removes contact from the rule.
 * @param contact the contact to remove.
 * @param rule the rule to use to remove contact from.
 * @return true if present rules were updated, false otherwise.
 */
","/**
     * Removes contact from the rule.
     *
     * @param contact the contact to remove.
     * @param rule the rule to use to remove contact from.
     * @return true if present rules were updated, false otherwise.
     */
    private static boolean removeContactFromRule(
            RuleType rule, ContactSipImpl contact)
    {
        if(rule.getConditions().getIdentities().size() == 0)
            return false;

        IdentityType identity =
                rule.getConditions().getIdentities().get(0);
        OneType contactOne = null;
        for (OneType one : identity.getOneList())
        {
            if (contact.getUri().equals(one.getId()))
            {
                contactOne = one;
                break;
            }
        }

        if (contactOne != null)
        {
            identity.getOneList().remove(contactOne);
        }
        if (identity.getOneList().size() == 0)
        {
            rule.getConditions().getIdentities().remove(identity);
            rule.getConditions().getIdentities().remove(identity);
        }

        return true;
    }",False,False,"This method serves to remove a contact from a rule. It takes a rule and a contact as parameters, and returns true if the contact was successfully removed from the rule's conditions, false otherwise.",False,"This code defines a private method called `removeContactFromRule` that removes a specific contact from a given rule. It iterates through the identities in the rule's conditions, finds the matching contact, and removes it. If the identity becomes empty after removing the contact, it is also removed from the rule. The method returns true if the rule was updated successfully."
39,addContactToWhiteList(ContactSipImpl),add contact to white list contact adds contact to the white rule param contact the contact to add return true if present rules were updated false otherwise ,Method,"createContact(ContactGroupSipImpl,String,String,boolean) moveContactToGroup(ContactSipImpl,ContactGroupSipImpl)","net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+setWatcherInfoStatus(WatcherInfoSubscriberSubscription,String)","net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+createWhiteRule() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+createWhiteRule() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RulesetType+getRules() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RulesetType+getRules() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+addContactToRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+addContactToRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+presRules,992,32,0,"/** 
 * Adds contact to the ""white"" rule.
 * @param contact the contact to add.
 * @return true if present rules were updated, false otherwise.
 */
","/**
     * Adds contact to the ""white"" rule.
     *
     * @param contact the contact to add.
     * @return true if present rules were updated, false otherwise.
     */
    boolean addContactToWhiteList(ContactSipImpl contact)
        throws XCapException
    {
        RuleType whiteRule = getRule(SubHandlingType.Allow);
        RuleType blockRule = getRule(SubHandlingType.Block);
        RuleType politeBlockRule = getRule(SubHandlingType.PoliteBlock);

        if(whiteRule == null)
        {
            whiteRule = createWhiteRule();
            presRules.getRules().add(whiteRule);
        }

        boolean updateRule =
            addContactToRule(whiteRule, contact);

        if(blockRule != null)
            updateRule = removeContactFromRule(blockRule, contact)
                    || updateRule;

        if(politeBlockRule != null)
            updateRule = removeContactFromRule(politeBlockRule, contact)
                    || updateRule;

        return updateRule;
    }",False,False,"This method adds a contact to the ""white"" rule and updates the present rules. It returns true if the rules were updated, and false otherwise.",False,"This code defines a method called ""addContactToWhiteList"" that adds a contact to the ""white"" rule. It retrieves the white, block, and polite block rules, creates the white rule if it doesn't exist, adds the contact to the white rule, and removes the contact from the block and polite block rules if they exist. Finally, it returns true if the rules were updated, and false otherwise."
40,addContactToBlockList(ContactSipImpl),add contact to block list contact adds contact to the block rule param contact the contact to add ,Method,,"net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+setWatcherInfoStatus(WatcherInfoSubscriberSubscription,String)","net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+createBlockRule() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+createBlockRule() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RulesetType+getRules() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RulesetType+getRules() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+addContactToRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+addContactToRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+presRules,922,29,0,"/** 
 * Adds contact to the ""block"" rule.
 * @param contact the contact to add.
 */
","/**
     * Adds contact to the ""block"" rule.
     *
     * @param contact the contact to add.
     */
    boolean addContactToBlockList(ContactSipImpl contact)
        throws XCapException
    {
        RuleType whiteRule = getRule(SubHandlingType.Allow);
        RuleType blockRule = getRule(SubHandlingType.Block);
        RuleType politeBlockRule = getRule(SubHandlingType.PoliteBlock);

        if(blockRule == null)
        {
            blockRule = createBlockRule();
            presRules.getRules().add(blockRule);
        }

        boolean updateRule =
            addContactToRule(blockRule, contact);
        if(whiteRule != null)
            updateRule = removeContactFromRule(whiteRule, contact)
                    || updateRule;
        if(politeBlockRule != null)
            updateRule = removeContactFromRule(politeBlockRule, contact)
                    || updateRule;

        return updateRule;
    }",False,False,"The function of this method is to add a contact to the ""block"" rule. It first checks if the block rule exists, and if not, creates it. Then it adds the contact to the block rule and removes it from any other rules if necessary. Finally, it returns a boolean indicating whether the rule was updated.",False,"This code adds a contact to the ""block"" rule in a set of presence rules. It first checks if the block rule exists, and if not, creates it. Then, it adds the contact to the block rule and removes it from any other rules it may be in. The method returns a boolean indicating whether the rule was updated."
41,addContactToPoliteBlockList(ContactSipImpl),add contact to polite block list contact adds contact to the polite block rule param contact the contact to add ,Method,,"net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+setWatcherInfoStatus(WatcherInfoSubscriberSubscription,String)","net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+createPoliteBlockRule() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+createPoliteBlockRule() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RulesetType+getRules() net.java.sip.communicator.impl.protocol.sip.xcap.model.commonpolicy.RulesetType+getRules() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+addContactToRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+addContactToRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+presRules,953,29,0,"/** 
 * Adds contact to the ""polite block"" rule.
 * @param contact the contact to add.
 */
","/**
     * Adds contact to the ""polite block"" rule.
     *
     * @param contact the contact to add.
     */
    boolean addContactToPoliteBlockList(ContactSipImpl contact)
        throws XCapException
    {
        RuleType whiteRule = getRule(SubHandlingType.Allow);
        RuleType blockRule = getRule(SubHandlingType.Block);
        RuleType politeBlockRule = getRule(SubHandlingType.PoliteBlock);

        if(politeBlockRule == null)
        {
            politeBlockRule = createPoliteBlockRule();
            presRules.getRules().add(politeBlockRule);
        }

        boolean updateRule =
            addContactToRule(politeBlockRule, contact);
        if(whiteRule != null)
            updateRule = removeContactFromRule(whiteRule, contact)
                    || updateRule;
        if(blockRule != null)
            updateRule = removeContactFromRule(blockRule, contact)
                    || updateRule;

        return updateRule;
    }",False,False,"This method adds a contact to the ""polite block"" rule. It first checks if the rule exists, and if not, creates it. Then it adds the contact to the rule and removes it from any other rules if necessary. Finally, it returns a boolean indicating if the rule was updated.",False,"This code adds a contact to the ""polite block"" rule in a set of presence rules. It first checks if the polite block rule exists, and if not, creates it. Then, it adds the contact to the polite block rule and removes it from any other existing rules. Finally, it returns a boolean indicating whether the rule was updated."
42,isContactInWhiteRule(String),is contact in white rule contact uri indicates whether or not contact is exists in the white rule param contact uri the contact uri return true if contact is exists false if not ,Method,"createContact(ContactGroupSipImpl,String,String,boolean) moveContactToGroup(ContactSipImpl,ContactGroupSipImpl)",,"net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+isContactInRule(RuleType,String) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+isContactInRule(RuleType,String)",,462,16,2,"/** 
 * Indicates whether or not contact is exists in the ""white"" rule.
 * @param contactUri the contact uri.
 * @return true if contact is exists, false if not.
 */
","/**
     * Indicates whether or not contact is exists in the ""white"" rule.
     *
     * @param contactUri the contact uri.
     * @return true if contact is exists, false if not.
     */
    private boolean isContactInWhiteRule(String contactUri)
        throws XCapException
    {
        RuleType whiteRule = getRule(SubHandlingType.Allow);

        if(whiteRule == null)
            return false;

        return isContactInRule(whiteRule, contactUri);
    }",False,False,"This method checks if a contact exists in the ""white"" rule. It returns true if the contact exists, false if not.",False,"This code defines a private method called ""isContactInWhiteRule"" that checks if a given contact exists in the ""white"" rule. It retrieves the ""white"" rule using the getRule method and then calls the isContactInRule method to determine if the contact is present in the rule. If the ""white"" rule is not found, it returns false."
43,removeContactFromWhiteList(ContactSipImpl),remove contact from white list contact removes contact from the white rule param contact the contact to remove return true if present rules were updated false otherwise ,Method,removeContact(ContactSipImpl) removeGroup(ContactGroupSipImpl),,"net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl)",,474,16,0,"/** 
 * Removes contact from the ""white"" rule.
 * @param contact the contact to remove.
 * @return true if present rules were updated, false otherwise.
 */
","/**
     * Removes contact from the ""white"" rule.
     *
     * @param contact the contact to remove.
     * @return true if present rules were updated, false otherwise.
     */
    boolean removeContactFromWhiteList(ContactSipImpl contact)
        throws XCapException
    {
        RuleType whiteRule = getRule(SubHandlingType.Allow);

        if(whiteRule != null)
            return removeContactFromRule(whiteRule, contact);
        else
            return false;
    }",False,False,"This method removes a contact from the ""white"" rule. It returns true if the rules were updated, and false otherwise.",False,"This code defines a method called ""removeContactFromWhiteList"" which removes a contact from the ""white"" rule. It takes a ContactSipImpl object as a parameter and returns true if the rules were updated successfully, otherwise it returns false. The method first retrieves the ""white"" rule using the getRule() method and then calls the removeContactFromRule() method to remove the contact from the rule."
44,removeContactFromBlockList(ContactSipImpl),remove contact from block list contact removes contact from the block rule param contact the contact to remove return true if present rules were updated false otherwise ,Method,removeContact(ContactSipImpl) removeGroup(ContactGroupSipImpl),,"net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl)",,474,16,0,"/** 
 * Removes contact from the ""block"" rule.
 * @param contact the contact to remove.
 * @return true if present rules were updated, false otherwise.
 */
","/**
     * Removes contact from the ""block"" rule.
     *
     * @param contact the contact to remove.
     * @return true if present rules were updated, false otherwise.
     */
    boolean removeContactFromBlockList(ContactSipImpl contact)
        throws XCapException
    {
        RuleType blockRule = getRule(SubHandlingType.Block);

        if(blockRule != null)
            return removeContactFromRule(blockRule, contact);
        else
            return false;
    }",False,False,"This method removes a contact from the ""block"" rule. It returns true if the rules were updated, and false otherwise.",False,"This code is a method that removes a contact from a ""block"" rule. It takes a ContactSipImpl object as a parameter and returns true if the rules were updated successfully, and false otherwise. It first checks if a block rule exists, and if so, it calls another method to remove the contact from that rule."
45,removeContactFromPoliteBlockList(ContactSipImpl),remove contact from polite block list contact removes contact from the polite block rule param contact the contact to remove return true if present rules were updated false otherwise ,Method,removeContact(ContactSipImpl) removeGroup(ContactGroupSipImpl),,"net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getRule(SubHandlingType) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+removeContactFromRule(RuleType,ContactSipImpl)",,493,16,0,"/** 
 * Removes contact from the ""polite block"" rule.
 * @param contact the contact to remove.
 * @return true if present rules were updated, false otherwise.
 */
","/**
     * Removes contact from the ""polite block"" rule.
     *
     * @param contact the contact to remove.
     * @return true if present rules were updated, false otherwise.
     */
    boolean removeContactFromPoliteBlockList(ContactSipImpl contact)
        throws XCapException
    {
        RuleType blockRule = getRule(SubHandlingType.PoliteBlock);

        if(blockRule != null)
            return removeContactFromRule(blockRule, contact);
        else
            return false;
    }",False,False,"This method removes a contact from the ""polite block"" rule. It returns true if the rules were updated, and false otherwise.",False,"This code is a method that removes a contact from a ""polite block"" rule. It takes a ContactSipImpl object as a parameter and returns true if the rule was successfully updated, and false otherwise. It throws an XCapException if an error occurs."
46,getAllContacts(ContactGroupSipImpl),get all contacts group returns all avaliable contacts from group and all subgroups param group the parent of the contacts return the list of availcable contacts ,Method,init() destroy() getAllContacts(ContactGroupSipImpl) getUniqueContacts(ContactGroupSipImpl) getContacts(String),net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+registrationStateChanged(RegistrationStateChangeEvent) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+registrationStateChanged(RegistrationStateChangeEvent),java.util.ArrayList+ArrayList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+subgroups() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+subgroups() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.List+addAll(Collection) java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllContacts(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllContacts(ContactGroupSipImpl) java.util.Iterator+next() java.util.Iterator+next() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+contacts() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+contacts() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.List+add(E) java.util.List+add(E),,865,24,33,"/** 
 * Returns all avaliable contacts from group and all subgroups.
 * @param group the parent of the contacts.
 * @return the list of availcable contacts.
 */
","/**
     * Returns all avaliable contacts from group and all subgroups.
     *
     * @param group the parent of the contacts.
     * @return the list of availcable contacts.
     */
    public synchronized List<ContactSipImpl> getAllContacts(
            ContactGroupSipImpl group)
    {
        List<ContactSipImpl> contacts = new ArrayList<ContactSipImpl>();
        Iterator<ContactGroup> groupIterator = group.subgroups();
        while (groupIterator.hasNext())
        {
            contacts.addAll(
                    getAllContacts((ContactGroupSipImpl) groupIterator.next()));
        }
        Iterator<Contact> contactIterator = group.contacts();
        while (contactIterator.hasNext())
        {
            ContactSipImpl contact = (ContactSipImpl) contactIterator.next();
            contacts.add(contact);
        }
        return contacts;
    }",True,True,This method returns a list of all available contacts from a given group and its subgroups.,False,"This code defines a method called ""getAllContacts"" that takes a ContactGroupSipImpl object as input and returns a list of all available contacts from the given group and its subgroups. It recursively iterates through the subgroups and adds all contacts to the list."
47,getAllGroups(ContactGroupSipImpl),get all groups group returns all avaliable groups from group and all subgroups param group the parent of the contacts return the list of availcable groups ,Method,init() getAllGroups(ContactGroupSipImpl),,java.util.ArrayList+ArrayList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+subgroups() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+subgroups() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.List+addAll(Collection) java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllGroups(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllGroups(ContactGroupSipImpl) java.util.Iterator+next() java.util.Iterator+next(),,629,18,33,"/** 
 * Returns all avaliable groups from group and all subgroups.
 * @param group the parent of the contacts.
 * @return the list of availcable groups.
 */
","/**
     * Returns all avaliable groups from group and all subgroups.
     *
     * @param group the parent of the contacts.
     * @return the list of availcable groups.
     */
    public synchronized List<ContactGroupSipImpl> getAllGroups(
            ContactGroupSipImpl group)
    {
        List<ContactGroupSipImpl> groups = new ArrayList<ContactGroupSipImpl>();
        Iterator<ContactGroup> groupIterator = group.subgroups();
        while (groupIterator.hasNext())
        {
            groups.addAll(
                    getAllGroups((ContactGroupSipImpl) groupIterator.next()));
        }
        return groups;
    }",True,True,"This method returns a list of all available groups, including the parent group and all its subgroups. It takes a parent group as a parameter and recursively adds all subgroups to the list.",False,"This code defines a method called ""getAllGroups"" that takes a parent group as input and recursively retrieves all available groups from the parent group and its subgroups. It returns a list of ContactGroupSipImpl objects representing the available groups. The method uses an iterator to iterate through the subgroups and adds them to the list of groups."
48,getUniqueContacts(ContactGroupSipImpl),get unique contacts group gets all unique contacts from group and all subgroups param group the parent of the contacts return list of available contacts ,Method,init() isContactExists(String),net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+unsubscribeToAllContact(),"java.util.HashMap+HashMap() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllContacts(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllContacts(ContactGroupSipImpl) java.util.Map+put(K,V) java.util.Map+put(K,V) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() java.util.ArrayList+ArrayList(Collection) java.util.Map+values() java.util.Map+values()",,654,18,33,"/** 
 * Gets all unique contacts from group and all subgroups.
 * @param group the parent of the contacts.
 * @return List of available contacts
 */
","/**
     * Gets all unique contacts from group and all subgroups.
     *
     * @param group the parent of the contacts.
     * @return List of available contacts
     */
    public synchronized List<ContactSipImpl> getUniqueContacts(
            ContactGroupSipImpl group)
    {
        Map<String, ContactSipImpl> uniqueContacts =
                new HashMap<String, ContactSipImpl>();
        List<ContactSipImpl> contacts = getAllContacts(group);
        for (ContactSipImpl contact : contacts)
        {
            uniqueContacts.put(contact.getUri(), contact);
        }
        return new ArrayList<ContactSipImpl>(uniqueContacts.values());
    }",True,True,"This method returns a list of unique contacts from a given group and its subgroups. It uses a map to store unique contacts based on their URI, and then converts the map values into a list to return.",False,"This code defines a method called ""getUniqueContacts"" that takes a ContactGroupSipImpl object as input and returns a list of unique contacts. It uses a HashMap to store unique contacts based on their URI and then converts the values of the HashMap into an ArrayList to be returned."
49,isContactExists(String),is contact exists contact uri indicates whether or not contact is exists param contact uri the contact uri return true if contact is exists false if not ,Method,,,net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getUniqueContacts(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getUniqueContacts(ContactGroupSipImpl) java.lang.String+equals(Object) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() java.lang.String+equals(Object),net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup,466,17,2,"/** 
 * Indicates whether or not contact is exists.
 * @param contactUri the contact uri.
 * @return true if contact is exists, false if not.
 */
","/**
     * Indicates whether or not contact is exists.
     *
     * @param contactUri the contact uri.
     * @return true if contact is exists, false if not.
     */
    private boolean isContactExists(String contactUri)
    {
        for (ContactSipImpl uniqueContact : getUniqueContacts(rootGroup))
        {
            if (uniqueContact.getUri().equals(contactUri))
            {
                return true;
            }
        }
        return false;
    }",True,True,"This method checks if a contact exists by comparing the given contact URI with the URIs of all unique contacts in the root group. It returns true if a match is found, and false otherwise.",False,"The code defines a private method called ""isContactExists"" that takes a contact URI as input and checks if the contact exists in a list of unique contacts. It returns true if the contact is found, and false otherwise."
50,getContacts(String),get contacts contact uri gets all contacts with the specified uri param contact uri the contact uri return the list of the contacts ,Method,isContactPersistent(String),,java.util.ArrayList+ArrayList() net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllContacts(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getAllContacts(ContactGroupSipImpl) java.lang.String+equals(Object) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+getUri() java.lang.String+equals(Object) java.util.List+add(E) java.util.List+add(E),net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup,523,18,2,"/** 
 * Gets all contacts with the specified uri.
 * @param contactUri the contact uri.
 * @return the list of the contacts.
 */
","/**
     * Gets all contacts with the specified uri.
     *
     * @param contactUri the contact uri.
     * @return the list of the contacts.
     */
    private List<ContactSipImpl> getContacts(String contactUri)
    {
        List<ContactSipImpl> result = new ArrayList<ContactSipImpl>();
        for (ContactSipImpl contact : getAllContacts(rootGroup))
        {
            if (contact.getUri().equals(contactUri))
            {
                result.add(contact);
            }
        }
        return result;
    }",False,True,This method retrieves a list of contacts with a specified URI from a root group. It returns a list of ContactSipImpl objects that match the given URI.,False,"This code defines a private method called ""getContacts"" that takes a contact URI as input and returns a list of ContactSipImpl objects. It iterates through all contacts in the rootGroup and adds any contacts with a matching URI to the result list."
51,isContactPersistent(String),is contact persistent contact uri indicates whether or not contact is exists param contact uri contact uri the contact uri return true if at least one contact is persistent false if not ,Method,,,net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getContacts(String) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+getContacts(String) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent(),,468,17,2,"/** 
 * Indicates whether or not contact is exists.
 * @param contactUri contactUri the contact uri.
 * @return true if at least one contact is persistent, false if not.
 */
","/**
     * Indicates whether or not contact is exists.
     *
     * @param contactUri contactUri the contact uri.
     * @return true if at least one contact is persistent, false if not.
     */
    private boolean isContactPersistent(String contactUri)
    {
        for (ContactSipImpl contact : getContacts(contactUri))
        {
            if (contact.isPersistent())
            {
                return true;
            }
        }
        return false;
    }",True,True,"This method checks if at least one contact with the given contactUri is persistent. It returns true if there is a persistent contact, and false if there is not.",False,"The method ""isContactPersistent"" checks if at least one contact with the given contactUri is persistent. It iterates through the contacts obtained from the ""getContacts"" method and returns true if any contact is persistent, otherwise it returns false."
52,"resolveContactGroup(ContactGroupSipImpl,ListType,boolean)",resolve contact group client group server group delete unresolved resolves local group with server stored group if local group exsists group created resolved will be fired if local group doesn t exsist group created event will be fired if server group doesn t represented group removed event will be fired param client group the local group param server group the server stored group param delete unresolved indicates whether to delete unresolved contactsand group if true they will be removed otherwise they will be skiped ,Method,"init() resolveContactGroup(ContactGroupSipImpl,ListType,boolean) resolveContactGroup(ContactGroupSipImpl,ListType,boolean)",,"java.util.ArrayList+ArrayList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+subgroups() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+subgroups() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.List+add(E) java.util.List+add(E) java.util.ArrayList+ArrayList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+contacts() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+contacts() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.List+add(E) java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getLists() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getLists() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroup(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getGroup(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getName() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getName() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+ContactGroupSipImpl(String,ProtocolProviderServiceSipImpl) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getName() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getName() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setOtherAttributes(Map<QName,String>) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setOtherAttributes(Map<QName,String>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAnyAttributes() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAnyAttributes() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setAny(List<Element>) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setAny(List<Element>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAny() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAny() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addSubgroup(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addSubgroup(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+resolveContactGroup(ContactGroupSipImpl,ListType,boolean) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+resolveContactGroup(ContactGroupSipImpl,ListType,boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setOtherAttributes(Map<QName,String>) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setOtherAttributes(Map<QName,String>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAnyAttributes() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAnyAttributes() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setAny(List<Element>) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setAny(List<Element>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAny() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAny() java.util.List+remove(Object) java.util.List+remove(Object) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+resolveContactGroup(ContactGroupSipImpl,ListType,boolean) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+resolveContactGroup(ContactGroupSipImpl,ListType,boolean) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntries() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntries() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getContact(String) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getContact(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getUri() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getUri() net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+parseAddressString(String) net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+parseAddressString(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getUri() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getUri() net.java.sip.communicator.util.Logger+error(Object) net.java.sip.communicator.util.Logger+error(Object) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+ContactSipImpl(Address,ProtocolProviderServiceSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setDisplayName(DisplayNameType) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setDisplayName(DisplayNameType) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getDisplayName() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getDisplayName() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setOtherAttributes(Map<QName,String>) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setOtherAttributes(Map<QName,String>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getAnyAttributes() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getAnyAttributes() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setAny(List<Element>) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setAny(List<Element>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getAny() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getAny() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setXCapResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setXCapResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+addContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactAdded(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactAdded(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setDisplayName(DisplayNameType) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setDisplayName(DisplayNameType) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getDisplayName() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getDisplayName() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setOtherAttributes(Map<QName,String>) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setOtherAttributes(Map<QName,String>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getAnyAttributes() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getAnyAttributes() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setAny(List<Element>) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setAny(List<Element>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getAny() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.EntryType+getAny() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setXCapResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setXCapResolved(boolean) java.util.List+remove(Object) java.util.List+remove(Object) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactResolved(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactResolved(ContactGroupSipImpl,ContactSipImpl) java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getExternals() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getExternals() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getExternals() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getExternals() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntryRefs() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntryRefs() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntryRefs() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntryRefs() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAny() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAny() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAny() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAny() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setXCapResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactSipImpl+setXCapResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeContact(ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactRemoved(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireContactRemoved(ContactGroupSipImpl,ContactSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+isPersistent() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+setResolved(boolean) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeSubGroup(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+removeSubGroup(ContactGroupSipImpl) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int) net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+fireGroupEvent(ContactGroup,int)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.service.protocol.event.ServerStoredGroupEvent+GROUP_CREATED_EVENT net.java.sip.communicator.service.protocol.event.ServerStoredGroupEvent+GROUP_RESOLVED_EVENT net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+logger net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.service.protocol.event.ServerStoredGroupEvent+GROUP_REMOVED_EVENT,6286,150,2,"/** 
 * Resolves local group with server stored group. <p/> If local group exsists GROUP_CREATED_RESOLVED will be fired. <p/> If local group doesn't exsist GROUP_CREATED_EVENT will be fired. <p/> If server group doesn't represented GROUP_REMOVED_EVENT will be fired.
 * @param clientGroup the local group.
 * @param serverGroup the server stored group.
 * @param deleteUnresolved indicates whether to delete unresolved contactsand group. If true they will be removed otherwise they will be skiped.
 */
","/**
     * Resolves local group with server stored group.
     * <p/>
     * If local group exsists GROUP_CREATED_RESOLVED will be fired.
     * <p/>
     * If local group doesn't exsist GROUP_CREATED_EVENT will be fired.
     * <p/>
     * If server group doesn't represented GROUP_REMOVED_EVENT will be fired.
     *
     * @param clientGroup the local group.
     * @param serverGroup the server stored group.
     * @param deleteUnresolved indicates whether to delete unresolved contacts
     *                         and group. If true they will be removed otherwise
     *                         they will be skiped.
     */
    private void resolveContactGroup(
            ContactGroupSipImpl clientGroup,
            ListType serverGroup,
            boolean deleteUnresolved)
    {
        // Gather client information
        List<ContactGroupSipImpl> unresolvedGroups =
                new ArrayList<ContactGroupSipImpl>();
        Iterator<ContactGroup> groupIterator = clientGroup.subgroups();
        while (groupIterator.hasNext())
        {
            ContactGroupSipImpl group =
                    (ContactGroupSipImpl) groupIterator.next();
            unresolvedGroups.add(group);
        }
        List<ContactSipImpl> unresolvedContacts =
                new ArrayList<ContactSipImpl>();
        Iterator<Contact> contactIterator = clientGroup.contacts();
        while (contactIterator.hasNext())
        {
            ContactSipImpl contact = (ContactSipImpl) contactIterator.next();
            unresolvedContacts.add(contact);
        }
        // Process all server groups and fire events
        for (ListType serverList : serverGroup.getLists())
        {
            ContactGroupSipImpl newGroup =
                    (ContactGroupSipImpl) clientGroup.getGroup(
                            serverList.getName());
            if (newGroup == null)
            {
                newGroup = new ContactGroupSipImpl(serverList.getName(),
                        sipProvider);
                newGroup.setOtherAttributes(serverList.getAnyAttributes());
                newGroup.setAny(serverList.getAny());
                newGroup.setResolved(true);
                clientGroup.addSubgroup(newGroup);
                // Tell listeners about the added group
                fireGroupEvent(newGroup,
                        ServerStoredGroupEvent.GROUP_CREATED_EVENT);
                resolveContactGroup(newGroup, serverList, deleteUnresolved);
            }
            else
            {
                newGroup.setResolved(true);
                newGroup.setOtherAttributes(serverList.getAnyAttributes());
                newGroup.setAny(serverList.getAny());
                unresolvedGroups.remove(newGroup);
                // Tell listeners about the resolved group
                fireGroupEvent(newGroup,
                        ServerStoredGroupEvent.GROUP_RESOLVED_EVENT);
                resolveContactGroup(newGroup, serverList, deleteUnresolved);
            }
        }
        // Process all server contacts and fire events
        for (EntryType serverEntry : serverGroup.getEntries())
        {
            ContactSipImpl newContact = (ContactSipImpl)
                    clientGroup.getContact(serverEntry.getUri());
            if (newContact == null)
            {
                Address sipAddress;
                try
                {
                    sipAddress = sipProvider.parseAddressString(
                            serverEntry.getUri());
                }
                catch (ParseException e)
                {
                    logger.error(e);
                    continue;
                }
                newContact = new ContactSipImpl(sipAddress, sipProvider);
                newContact.setDisplayName(serverEntry.getDisplayName());
                newContact.setOtherAttributes(serverEntry.getAnyAttributes());
                newContact.setAny(serverEntry.getAny());
                newContact.setResolved(true);
                newContact.setXCapResolved(true);
                clientGroup.addContact(newContact);

                fireContactAdded(clientGroup, newContact);
            }
            else
            {
                newContact.setDisplayName(serverEntry.getDisplayName());
                newContact.setOtherAttributes(serverEntry.getAnyAttributes());
                newContact.setAny(serverEntry.getAny());
                newContact.setResolved(true);
                newContact.setXCapResolved(true);
                unresolvedContacts.remove(newContact);

                fireContactResolved(clientGroup, newContact);
            }
        }
        // Save all others
        // TODO: process externals and enrty-refs after OpenXCAP fixes
        clientGroup.getList().getExternals().addAll(serverGroup.getExternals());
        clientGroup.getList().getEntryRefs().addAll(serverGroup.getEntryRefs());
        clientGroup.getList().getAny().addAll(serverGroup.getAny());

        // Process all unresolved contacts
        if (deleteUnresolved)
        {
            for (ContactSipImpl unresolvedContact : unresolvedContacts)
            {
                if(!unresolvedContact.isPersistent())
                {
                    continue;
                }
                unresolvedContact.setResolved(true);
                unresolvedContact.setXCapResolved(true);
                // Remove unresolved contacts
                clientGroup.removeContact(unresolvedContact);
                // Tell listeners about the removed contact
                fireContactRemoved(clientGroup, unresolvedContact);
            }
        }
        // Process all unresolved groups
        if (deleteUnresolved)
        {
            for (ContactGroupSipImpl unresolvedGroup : unresolvedGroups)
            {
                if(!unresolvedGroup.isPersistent())
                {
                    continue;
                }
                unresolvedGroup.setResolved(true);
                // Remove unresolved groups
                clientGroup.removeSubGroup(unresolvedGroup);
                // Tell listeners about the removed group
                fireGroupEvent(unresolvedGroup,
                        ServerStoredGroupEvent.GROUP_REMOVED_EVENT);
            }
        }
    }",False,False,"The function of this method is to resolve a local contact group with a server stored group. It compares the local group with the server group and fires events based on the comparison results. It also handles unresolved contacts and groups, either deleting them or skipping them based on the value of the ""deleteUnresolved"" parameter.",False,"The `resolveContactGroup` method takes a local group and a server stored group as input, and resolves any differences between them. It creates new groups or contacts if they exist in the server group but not in the local group, and removes unresolved contacts or groups if specified. It also fires events to notify listeners about the changes made."
53,updateResourceLists(),update resource lists puts resource lists to the server throws x cap exception if there is some error during operation ,Method,"createContact(ContactGroupSipImpl,String,String,boolean) removeContact(ContactSipImpl) moveContactToGroup(ContactSipImpl,ContactGroupSipImpl) renameContact(ContactSipImpl,String) createGroup(ContactGroupSipImpl,String,boolean) removeGroup(ContactGroupSipImpl) renameGroup(ContactGroupSipImpl,String) init()",,"net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+isConnected() net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+isConnected() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isResourceListsSupported() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isResourceListsSupported() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ResourceListsType+ResourceListsType() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getLists() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getLists() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ResourceListsType+getList() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ResourceListsType+getList() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+ListType() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setName(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setName(String) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setDisplayName(DisplayNameType) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setDisplayName(DisplayNameType) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getDisplayName() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getDisplayName() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntries() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntries() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntries() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntries() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntryRefs() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntryRefs() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntryRefs() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getEntryRefs() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getExternals() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getExternals() java.util.List+addAll(Collection) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getExternals() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getExternals() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setAny(List<Element>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setAny(List<Element>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAny() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAny() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setAnyAttributes(Map<QName,String>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+setAnyAttributes(Map<QName,String>) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAnyAttributes() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.ContactGroupSipImpl+getList() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ListType+getAnyAttributes() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ResourceListsType+getList() net.java.sip.communicator.impl.protocol.sip.xcap.model.resourcelists.ResourceListsType+getList() java.util.List+add(E) net.java.sip.communicator.impl.protocol.sip.xcap.ResourceListsClient+putResourceLists(ResourceListsType) net.java.sip.communicator.impl.protocol.sip.xcap.ResourceListsClient+putResourceLists(ResourceListsType)",net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+ROOT_GROUP_NAME net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+rootGroup,1358,34,34,"/** 
 * Puts resource-lists to the server.
 * @throws XCapException if there is some error during operation.
 */
","/**
     * Puts resource-lists to the server.
     *
     * @throws XCapException if there is some error during operation.
     */
    synchronized private void updateResourceLists()
            throws XCapException
    {
        XCapClient xCapClient = sipProvider.getXCapClient();
        if (!xCapClient.isConnected() || !xCapClient.isResourceListsSupported())
        {
            return;
        }
        ResourceListsType resourceLists = new ResourceListsType();
        for (ListType list : rootGroup.getList().getLists())
        {
            resourceLists.getList().add(list);
        }
        // Create special root group
        ListType serverRootList = new ListType();
        serverRootList.setName(ROOT_GROUP_NAME);
        serverRootList.setDisplayName(rootGroup.getList().getDisplayName());
        serverRootList.getEntries().addAll(rootGroup.getList().getEntries());
        serverRootList.getEntryRefs()
                .addAll(rootGroup.getList().getEntryRefs());
        serverRootList.getExternals()
                .addAll(rootGroup.getList().getExternals());
        serverRootList.setAny(rootGroup.getList().getAny());
        serverRootList
                .setAnyAttributes(rootGroup.getList().getAnyAttributes());
        resourceLists.getList().add(serverRootList);

        xCapClient.putResourceLists(resourceLists);
    }",False,False,"The function of this method is to update resource lists on the server. It checks if the XCapClient is connected and supports resource lists. It then creates a new ResourceListsType object and adds lists to it. It also creates a special root group and adds it to the resource lists. Finally, it calls the putResourceLists method of the XCapClient to update the resource lists on the server.",True,"This code is a synchronized method that updates resource lists on a server. It checks if the XCapClient is connected and supports resource lists, then creates a new resource list and adds it to the server. Finally, it calls the putResourceLists method of the XCapClient to update the resource lists on the server."
54,updatePresRules(),update pres rules puts pres rules to the server throws x cap exception if there is some error during operation ,Method,"createContact(ContactGroupSipImpl,String,String,boolean) removeContact(ContactSipImpl) moveContactToGroup(ContactSipImpl,ContactGroupSipImpl) removeGroup(ContactGroupSipImpl) init()","net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+setWatcherInfoStatus(WatcherInfoSubscriberSubscription,String) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+setWatcherInfoStatus(WatcherInfoSubscriberSubscription,String) net.java.sip.communicator.impl.protocol.sip.OperationSetPresenceSipImpl+setWatcherInfoStatus(WatcherInfoSubscriberSubscription,String)",net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.ProtocolProviderServiceSipImpl+getXCapClient() net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+isConnected() net.java.sip.communicator.impl.protocol.sip.xcap.HttpXCapClient+isConnected() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isPresRulesSupported() net.java.sip.communicator.impl.protocol.sip.xcap.XCapClient+isPresRulesSupported() net.java.sip.communicator.impl.protocol.sip.xcap.PresRulesClient+putPresRules(RulesetType) net.java.sip.communicator.impl.protocol.sip.xcap.PresRulesClient+putPresRules(RulesetType),net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+sipProvider net.java.sip.communicator.impl.protocol.sip.ServerStoredContactListSipImpl+presRules,433,15,32,"/** 
 * Puts pres-rules to the server.
 * @throws XCapException if there is some error during operation.
 */
","/**
     * Puts pres-rules to the server.
     *
     * @throws XCapException if there is some error during operation.
     */
    synchronized void updatePresRules()
            throws XCapException
    {
        XCapClient xCapClient = sipProvider.getXCapClient();
        if (!xCapClient.isConnected() || !xCapClient.isPresRulesSupported())
        {
            return;
        }
        xCapClient.putPresRules(presRules);
    }",False,False,"This method updates the presence rules on the server. It checks if the XCapClient is connected and supports presence rules, and then calls the putPresRules method to update the rules. If there is an error during the operation, it throws an XCapException.",False,"This code defines a synchronized method called ""updatePresRules"" that is responsible for putting pres-rules to the server. It first checks if the XCapClient is connected and supports pres-rules, and if so, it calls the ""putPresRules"" method of the XCapClient with the presRules parameter. If there is any error during the operation, it throws an XCapException."
