index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,PREFIX,Field,,,,,108,4,25,"/** 
 * The prefix to use for this file system.
 */
","/**
     * The prefix to use for this file system.
     */
    public static final String PREFIX = ""split:"";",False
2,PART_SUFFIX,Field,,,,,50,1,26,,"private static final String PART_SUFFIX = "".part"";",False
3,defaultMaxSize,Field,,,,,72,1,2,,private long defaultMaxSize = 1L << SysProperties.SPLIT_FILE_SIZE_SHIFT;,False
4,canWrite(String),Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+canWrite(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+canWrite(String),,155,4,1,,"public boolean canWrite(String fileName) {
        fileName = translateFileName(fileName);
        return getFileSystem(fileName).canWrite(fileName);
    }",True
5,setReadOnly(String),Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+setReadOnly(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+setReadOnly(String)",,407,13,1,,"public boolean setReadOnly(String fileName) {
        fileName = translateFileName(fileName);
        boolean result = false;
        for (int i = 0;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(f).exists(f)) {
                result = getFileSystem(f).setReadOnly(f);
            } else {
                break;
            }
        }
        return result;
    }",False
6,"copy(String,String)",Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+copy(String,String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+copy(String,String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+copy(String,String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+copy(String,String)",,485,14,1,,"public void copy(String original, String copy) {
        original = translateFileName(original);
        copy = translateFileName(copy);
        getFileSystem(original).copy(original, copy);
        for (int i = 1;; i++) {
            String o = getFileName(original, i);
            if (getFileSystem(o).exists(o)) {
                String c = getFileName(copy, i);
                getFileSystem(o).copy(o, c);
            } else {
                break;
            }
        }
    }",False
7,createDirs(String),Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+createDirs(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+createDirs(String),,149,4,1,,"public void createDirs(String fileName) {
        fileName = translateFileName(fileName);
        getFileSystem(fileName).createDirs(fileName);
    }",True
8,createNewFile(String),Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+createNewFile(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+createNewFile(String),,165,4,1,,"public boolean createNewFile(String fileName) {
        fileName = translateFileName(fileName);
        return getFileSystem(fileName).createNewFile(fileName);
    }",True
9,"createTempFile(String,String,boolean,boolean)",Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+createTempFile(String,String,boolean,boolean) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+createTempFile(String,String,boolean,boolean)",org.h2.store.fs.FileSystemSplit+PREFIX,285,5,1,,"public String createTempFile(String prefix, String suffix, boolean deleteOnExit, boolean inTempDir)
            throws IOException {
        prefix = translateFileName(prefix);
        return PREFIX + getFileSystem(prefix).createTempFile(prefix, suffix, deleteOnExit, inTempDir);
    }",True
10,delete(String),Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+delete(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+delete(String)",,344,11,1,,"public void delete(String fileName) {
        fileName = translateFileName(fileName);
        for (int i = 0;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(fileName).exists(f)) {
                getFileSystem(fileName).delete(f);
            } else {
                break;
            }
        }
    }",False
11,"deleteRecursive(String,boolean)",Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+deleteRecursive(String,boolean) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+deleteRecursive(String,boolean)",,190,4,1,,"public void deleteRecursive(String directory, boolean tryOnly) {
        directory = translateFileName(directory);
        getFileSystem(directory).deleteRecursive(directory, tryOnly);
    }",True
12,exists(String),Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String),,151,4,1,,"public boolean exists(String fileName) {
        fileName = translateFileName(fileName);
        return getFileSystem(fileName).exists(fileName);
    }",True
13,"fileStartsWith(String,String)",Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+fileStartsWith(String,String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+fileStartsWith(String,String)",,234,5,1,,"public boolean fileStartsWith(String fileName, String prefix) {
        fileName = translateFileName(fileName);
        prefix = translateFileName(prefix);
        return getFileSystem(fileName).fileStartsWith(fileName, prefix);
    }",True
14,getAbsolutePath(String),Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+getAbsolutePath(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+getAbsolutePath(String),org.h2.store.fs.FileSystemSplit+PREFIX,177,4,1,,"public String getAbsolutePath(String fileName) {
        fileName = translateFileName(fileName);
        return PREFIX + getFileSystem(fileName).getAbsolutePath(fileName);
    }",True
15,getFileName(String),Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+getFileName(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+getFileName(String),,140,4,1,,"public String getFileName(String name) {
        name = translateFileName(name);
        return getFileSystem(name).getFileName(name);
    }",True
16,getLastModified(String),Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+getLastModified(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+getLastModified(String) java.lang.Math+max(long,long) java.lang.Math+max(long,long)",,496,14,1,,"public long getLastModified(String fileName) {
        fileName = translateFileName(fileName);
        long lastModified = 0;
        for (int i = 0;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(fileName).exists(f)) {
                long l = getFileSystem(fileName).getLastModified(fileName);
                lastModified = Math.max(lastModified, l);
            } else {
                break;
            }
        }
        return lastModified;
    }",False
17,getParent(String),Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+getParent(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+getParent(String),org.h2.store.fs.FileSystemSplit+PREFIX,165,4,1,,"public String getParent(String fileName) {
        fileName = translateFileName(fileName);
        return PREFIX + getFileSystem(fileName).getParent(fileName);
    }",True
18,isAbsolute(String),Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+isAbsolute(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+isAbsolute(String),,159,4,1,,"public boolean isAbsolute(String fileName) {
        fileName = translateFileName(fileName);
        return getFileSystem(fileName).isAbsolute(fileName);
    }",True
19,isDirectory(String),Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+isDirectory(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+isDirectory(String),,161,4,1,,"public boolean isDirectory(String fileName) {
        fileName = translateFileName(fileName);
        return getFileSystem(fileName).isDirectory(fileName);
    }",True
20,isReadOnly(String),Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+isReadOnly(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+isReadOnly(String),,159,4,1,,"public boolean isReadOnly(String fileName) {
        fileName = translateFileName(fileName);
        return getFileSystem(fileName).isReadOnly(fileName);
    }",True
21,length(String),Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+length(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+length(String)",,402,13,1,,"public long length(String fileName) {
        fileName = translateFileName(fileName);
        long length = 0;
        for (int i = 0;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(fileName).exists(f)) {
                length += getFileSystem(fileName).length(f);
            } else {
                break;
            }
        }
        return length;
    }",False
22,listFiles(String),Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+listFiles(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+listFiles(String) org.h2.util.New+arrayList() org.h2.util.New+arrayList() java.lang.String+endsWith(String) java.lang.String+endsWith(String) java.util.ArrayList+add(E) java.util.ArrayList+add(E) java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+toArray(T[]) java.util.ArrayList+toArray(T[]),org.h2.store.fs.FileSystemSplit+PART_SUFFIX org.h2.store.fs.FileSystemSplit+PREFIX,615,18,1,,"public String[] listFiles(String directory) {
        directory = translateFileName(directory);
        String[] array = getFileSystem(directory).listFiles(directory);
        ArrayList<String> list = New.arrayList();
        for (int i = 0; i < array.length; i++) {
            String f = array[i];
            if (f.endsWith(PART_SUFFIX)) {
                continue;
            }
            array[i] = f = PREFIX + f;
            list.add(f);
        }
        if (list.size() != array.length) {
            array = new String[list.size()];
            list.toArray(array);
        }
        return array;
    }",False
23,normalize(String),Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+normalize(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+normalize(String),org.h2.store.fs.FileSystemSplit+PREFIX,165,4,1,,"public String normalize(String fileName) {
        fileName = translateFileName(fileName);
        return PREFIX + getFileSystem(fileName).normalize(fileName);
    }",True
24,openFileInputStream(String),Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+openFileInputStream(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+openFileInputStream(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+openFileInputStream(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+openFileInputStream(String) java.io.SequenceInputStream+SequenceInputStream(InputStream,InputStream)",,564,14,1,,"public InputStream openFileInputStream(String fileName) throws IOException {
        fileName = translateFileName(fileName);
        InputStream input = getFileSystem(fileName).openFileInputStream(fileName);
        for (int i = 1;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(f).exists(f)) {
                InputStream i2 = getFileSystem(f).openFileInputStream(f);
                input = new SequenceInputStream(input, i2);
            } else {
                break;
            }
        }
        return input;
    }",False
25,"openFileObject(String,String)",Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.util.New+arrayList() org.h2.util.New+arrayList() org.h2.store.fs.FileSystem+openFileObject(String,String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+openFileObject(String,String) java.util.ArrayList+add(E) java.util.ArrayList+add(E) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+openFileObject(String,String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+openFileObject(String,String) java.util.ArrayList+add(E) java.util.ArrayList+add(E) java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+toArray(T[]) java.util.ArrayList+toArray(T[]) org.h2.store.fs.FileObject+length() org.h2.store.fs.FileObject+length() org.h2.store.fs.FileSystemSplit+closeAndThrow(FileObject[],FileObject,long) org.h2.store.fs.FileSystemSplit+closeAndThrow(FileObject[],FileObject,long) org.h2.store.fs.FileObject+length() org.h2.store.fs.FileObject+length() org.h2.store.fs.FileSystemSplit+closeAndThrow(FileObject[],FileObject,long) org.h2.store.fs.FileSystemSplit+closeAndThrow(FileObject[],FileObject,long) org.h2.store.fs.FileObject+length() org.h2.store.fs.FileObject+length() org.h2.store.fs.FileSystemSplit+closeAndThrow(FileObject[],FileObject,long) org.h2.store.fs.FileSystemSplit+closeAndThrow(FileObject[],FileObject,long) org.h2.store.fs.FileObjectSplit+FileObjectSplit(String,String,FileObject[],long,long)",org.h2.store.fs.FileSystemSplit+defaultMaxSize org.h2.store.fs.FileSystemSplit+defaultMaxSize,1607,44,1,,"public FileObject openFileObject(String fileName, String mode) throws IOException {
        fileName = translateFileName(fileName);
        ArrayList<FileObject> list = New.arrayList();
        FileObject o = getFileSystem(fileName).openFileObject(fileName, mode);
        list.add(o);
        for (int i = 1;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(fileName).exists(f)) {
                o = getFileSystem(f).openFileObject(f, mode);
                list.add(o);
            } else {
                break;
            }
        }
        FileObject[] array = new FileObject[list.size()];
        list.toArray(array);
        long maxLength = array[0].length();
        long length = maxLength;
        if (array.length == 1) {
            if (maxLength < defaultMaxSize) {
                maxLength = defaultMaxSize;
            }
        } else {
            if (maxLength == 0) {
                closeAndThrow(array, array[0], maxLength);
            }
            for (int i = 1; i < array.length - 1; i++) {
                o = array[i];
                long l = o.length();
                length += l;
                if (l != maxLength) {
                    closeAndThrow(array, o, maxLength);
                }
            }
            o = array[array.length - 1];
            long l = o.length();
            length += l;
            if (l > maxLength) {
                closeAndThrow(array, o, maxLength);
            }
        }
        FileObjectSplit fo = new FileObjectSplit(fileName, mode, array, length, maxLength);
        return fo;
    }",False
26,"closeAndThrow(FileObject[],FileObject,long)",Method,"openFileObject(String,String) openFileObject(String,String) openFileObject(String,String)",,org.h2.store.fs.FileObject+length() org.h2.store.fs.FileObject+length() org.h2.store.fs.FileObject+getName() org.h2.store.fs.FileObject+getName() org.h2.store.fs.FileObject+close() org.h2.store.fs.FileObject+close() java.io.IOException+IOException(String),,324,7,2,,"private void closeAndThrow(FileObject[] array, FileObject o, long maxLength) throws IOException {
        String message = ""Expected file length: "" + maxLength + "" got: "" + o.length() + "" for "" + o.getName();
        for (FileObject f : array) {
            f.close();
        }
        throw new IOException(message);
    }",False
27,"openFileOutputStream(String,boolean)",Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+openFileOutputStream(String,boolean) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+openFileOutputStream(String,boolean)",,255,5,1,,"public OutputStream openFileOutputStream(String fileName, boolean append) {
        fileName = translateFileName(fileName);
        // TODO the output stream is not split
        return getFileSystem(fileName).openFileOutputStream(fileName, append);
    }",False
28,"rename(String,String)",Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+rename(String,String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+rename(String,String)",,443,13,1,,"public void rename(String oldName, String newName) {
        oldName = translateFileName(oldName);
        newName = translateFileName(newName);
        for (int i = 0;; i++) {
            String o = getFileName(oldName, i);
            if (getFileSystem(o).exists(o)) {
                String n = getFileName(newName, i);
                getFileSystem(n).rename(o, n);
            } else {
                break;
            }
        }
    }",False
29,tryDelete(String),Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+tryDelete(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+tryDelete(String)",,466,15,1,,"public boolean tryDelete(String fileName) {
        fileName = translateFileName(fileName);
        for (int i = 0;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(fileName).exists(f)) {
                boolean ok = getFileSystem(fileName).tryDelete(f);
                if (!ok) {
                    return false;
                }
            } else {
                break;
            }
        }
        return true;
    }",False
30,translateFileName(String),Method,"canWrite(String) setReadOnly(String) copy(String,String) copy(String,String) createDirs(String) createNewFile(String) createTempFile(String,String,boolean,boolean) delete(String) deleteRecursive(String,boolean) exists(String) fileStartsWith(String,String) fileStartsWith(String,String) getAbsolutePath(String) getFileName(String) getLastModified(String) getParent(String) isAbsolute(String) isDirectory(String) isReadOnly(String) length(String) listFiles(String) normalize(String) openFileInputStream(String) openFileObject(String,String) openFileOutputStream(String,boolean) rename(String,String) rename(String,String) tryDelete(String)",,"java.lang.String+startsWith(String) java.lang.String+startsWith(String) org.h2.message.DbException+throwInternalError(String) org.h2.message.DbException+throwInternalError(String) java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+length() java.lang.String+length() java.lang.String+length() java.lang.String+length() java.lang.Character+isDigit(char) java.lang.Character+isDigit(char) java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.Integer+intValue() java.lang.Integer+decode(String) java.lang.Integer+decode(String) java.lang.Integer+intValue() java.lang.String+substring(int) java.lang.String+substring(int)",org.h2.store.fs.FileSystemSplit+PREFIX org.h2.store.fs.FileSystemSplit+PREFIX org.h2.store.fs.FileSystemSplit+PREFIX org.h2.store.fs.FileSystemSplit+defaultMaxSize,701,17,2,,"private String translateFileName(String fileName) {
        if (!fileName.startsWith(PREFIX)) {
            DbException.throwInternalError(fileName + "" doesn't start with "" + PREFIX);
        }
        fileName = fileName.substring(PREFIX.length());
        if (fileName.length() > 0 && Character.isDigit(fileName.charAt(0))) {
            int idx = fileName.indexOf(':');
            String size = fileName.substring(0, idx);
            try {
                defaultMaxSize = 1L << Integer.decode(size).intValue();
                fileName = fileName.substring(idx + 1);
            } catch (NumberFormatException e) {
                // ignore
            }
        }
        return fileName;
    }",False
31,"getFileName(String,int)",Method,"setReadOnly(String) copy(String,String) copy(String,String) delete(String) getLastModified(String) length(String) openFileInputStream(String) openFileObject(String,String) rename(String,String) rename(String,String) tryDelete(String)",org.h2.store.fs.FileObjectSplit+getFileObject() org.h2.store.fs.FileObjectSplit+setFileLength(long),,org.h2.store.fs.FileSystemSplit+PART_SUFFIX,344,13,8,"/** 
 * Get the file name of a part file.
 * @param fileName the file name
 * @param id the part id
 * @return the file name including the part id
 */
","/**
     * Get the file name of a part file.
     *
     * @param fileName the file name
     * @param id the part id
     * @return the file name including the part id
     */
    static String getFileName(String fileName, int id) {
        if (id > 0) {
            fileName += ""."" + id + PART_SUFFIX;
        }
        return fileName;
    }",False
32,getFileSystem(String),Method,"canWrite(String) setReadOnly(String) setReadOnly(String) copy(String,String) copy(String,String) copy(String,String) createDirs(String) createNewFile(String) createTempFile(String,String,boolean,boolean) delete(String) delete(String) deleteRecursive(String,boolean) exists(String) fileStartsWith(String,String) getAbsolutePath(String) getFileName(String) getLastModified(String) getLastModified(String) getParent(String) isAbsolute(String) isDirectory(String) isReadOnly(String) length(String) length(String) listFiles(String) normalize(String) openFileInputStream(String) openFileInputStream(String) openFileInputStream(String) openFileObject(String,String) openFileObject(String,String) openFileObject(String,String) openFileOutputStream(String,boolean) rename(String,String) rename(String,String) tryDelete(String) tryDelete(String)",,org.h2.store.fs.FileSystem+getInstance(String) org.h2.store.fs.FileSystem+getInstance(String),,106,3,2,,"private FileSystem getFileSystem(String fileName) {
        return FileSystem.getInstance(fileName);
    }",False
33,accepts(String),Method,,,java.lang.String+startsWith(String) java.lang.String+startsWith(String),org.h2.store.fs.FileSystemSplit+PREFIX,94,3,4,,"protected boolean accepts(String fileName) {
        return fileName.startsWith(PREFIX);
    }",True
