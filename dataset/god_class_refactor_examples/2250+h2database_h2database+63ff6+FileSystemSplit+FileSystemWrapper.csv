index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,PREFIX,prefix the prefix to use for this file system ,Field,,,,,108,4,25,"/** 
 * The prefix to use for this file system.
 */
","/**
     * The prefix to use for this file system.
     */
    public static final String PREFIX = ""split:"";",False,False,"/** 
 * The prefix to use for this file system.
 */
",False,"/** 
 * The prefix to use for this file system.
 */
"
2,PART_SUFFIX,part suffix ,Field,,,,,50,1,26,,"private static final String PART_SUFFIX = "".part"";",False,False,,False,
3,defaultMaxSize,default max size ,Field,,,,,72,1,2,,private long defaultMaxSize = 1L << SysProperties.SPLIT_FILE_SIZE_SHIFT;,False,False,,False,
4,canWrite(String),can write file name ,Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+canWrite(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+canWrite(String),,155,4,1,,"public boolean canWrite(String fileName) {
        fileName = translateFileName(fileName);
        return getFileSystem(fileName).canWrite(fileName);
    }",True,True,"This method checks if a file with the given name can be written to. It translates the file name, then checks if the file system allows writing to the translated file name.",True,"The given code defines a method named ""canWrite"" that takes a file name as input. It translates the file name and then checks if the file system associated with the translated file name allows writing to the file. The method returns a boolean value indicating whether writing is allowed or not."
5,setReadOnly(String),set read only file name ,Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+setReadOnly(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+setReadOnly(String)",,407,13,1,,"public boolean setReadOnly(String fileName) {
        fileName = translateFileName(fileName);
        boolean result = false;
        for (int i = 0;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(f).exists(f)) {
                result = getFileSystem(f).setReadOnly(f);
            } else {
                break;
            }
        }
        return result;
    }",False,False,"This method sets the read-only attribute of a file and all its versions to true. It returns true if the operation is successful, false otherwise.",True,This code takes a file name as input and iterates through a series of file names until it finds one that exists. It then sets that file to read-only mode and returns a boolean indicating whether the operation was successful.
6,"copy(String,String)",copy original copy ,Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+copy(String,String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+copy(String,String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+copy(String,String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+copy(String,String)",,485,14,1,,"public void copy(String original, String copy) {
        original = translateFileName(original);
        copy = translateFileName(copy);
        getFileSystem(original).copy(original, copy);
        for (int i = 1;; i++) {
            String o = getFileName(original, i);
            if (getFileSystem(o).exists(o)) {
                String c = getFileName(copy, i);
                getFileSystem(o).copy(o, c);
            } else {
                break;
            }
        }
    }",False,False,"The function of this method is to copy a file from the original location to a new location, while also handling the case of multiple files with the same name by appending a number to the copied file's name.",True,"The given code defines a method called ""copy"" that takes two string parameters, ""original"" and ""copy"". It translates the file names using a helper method, then copies the original file to the copy file using the file system. It also checks for additional files with incremented numbers in the original file name and copies them to corresponding copy files."
7,createDirs(String),create dirs file name ,Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+createDirs(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+createDirs(String),,149,4,1,,"public void createDirs(String fileName) {
        fileName = translateFileName(fileName);
        getFileSystem(fileName).createDirs(fileName);
    }",True,True,"This method takes a file name as input, translates the file name, and then creates directories in the file system using the translated file name.",True,"The given code defines a method called ""createDirs"" that takes a file name as input. It translates the file name using the ""translateFileName"" method and then calls the ""createDirs"" method of the file system to create directories based on the translated file name."
8,createNewFile(String),create new file file name ,Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+createNewFile(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+createNewFile(String),,165,4,1,,"public boolean createNewFile(String fileName) {
        fileName = translateFileName(fileName);
        return getFileSystem(fileName).createNewFile(fileName);
    }",True,True,"This method takes a file name as input, translates the file name, and then creates a new file with the translated file name using the file system. It returns a boolean value indicating whether the file creation was successful or not.",True,This code defines a method called `createNewFile` that takes a `fileName` as input. It translates the `fileName` using a helper method and then calls another method `createNewFile` from the file system to create a new file with the translated `fileName`. The method returns a boolean indicating whether the file creation was successful or not.
9,"createTempFile(String,String,boolean,boolean)",create temp file prefix suffix delete on exit in temp dir ,Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+createTempFile(String,String,boolean,boolean) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+createTempFile(String,String,boolean,boolean)",org.h2.store.fs.FileSystemSplit+PREFIX,285,5,1,,"public String createTempFile(String prefix, String suffix, boolean deleteOnExit, boolean inTempDir)
            throws IOException {
        prefix = translateFileName(prefix);
        return PREFIX + getFileSystem(prefix).createTempFile(prefix, suffix, deleteOnExit, inTempDir);
    }",True,True,"The function of this method is to create a temporary file with a given prefix and suffix, and specify whether the file should be deleted on exit and whether it should be created in the temporary directory.",True,"This code defines a method called ""createTempFile"" that takes in a prefix, suffix, deleteOnExit flag, and inTempDir flag as parameters. It translates the prefix, then calls another method to create a temporary file with the translated prefix, suffix, and the provided flags. The method returns the path of the created temporary file."
10,delete(String),delete file name ,Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+delete(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+delete(String)",,344,11,1,,"public void delete(String fileName) {
        fileName = translateFileName(fileName);
        for (int i = 0;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(fileName).exists(f)) {
                getFileSystem(fileName).delete(f);
            } else {
                break;
            }
        }
    }",False,False,The function of this method is to delete a file and all its versions by iterating through the file system and deleting each version until no more versions exist.,True,"The given code defines a method called ""delete"" that takes a file name as input. It iterates over a series of file names generated based on the input file name and checks if each file exists in the file system. If a file exists, it is deleted. The iteration stops when a non-existent file is encountered."
11,"deleteRecursive(String,boolean)",delete recursive directory try only ,Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+deleteRecursive(String,boolean) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+deleteRecursive(String,boolean)",,190,4,1,,"public void deleteRecursive(String directory, boolean tryOnly) {
        directory = translateFileName(directory);
        getFileSystem(directory).deleteRecursive(directory, tryOnly);
    }",True,True,"This method serves to delete a directory and its contents recursively. It takes a directory path and a boolean flag as parameters, and calls the deleteRecursive method of the file system associated with the directory.",True,"The code defines a method called ""deleteRecursive"" that takes a directory path and a boolean flag as parameters. It translates the directory path, and then calls the ""deleteRecursive"" method of the file system associated with the directory, passing the translated directory path and the boolean flag as arguments."
12,exists(String),exists file name ,Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String),,151,4,1,,"public boolean exists(String fileName) {
        fileName = translateFileName(fileName);
        return getFileSystem(fileName).exists(fileName);
    }",False,True,This method checks if a file with the given name exists in the file system. It translates the file name and then checks if the translated file name exists in the file system.,True,"The given code defines a method called ""exists"" which takes a file name as input. It translates the file name using a helper method and then checks if the file exists in the file system using another helper method. The method returns a boolean value indicating whether the file exists or not."
13,"fileStartsWith(String,String)",file starts with file name prefix ,Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+fileStartsWith(String,String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+fileStartsWith(String,String)",,234,5,1,,"public boolean fileStartsWith(String fileName, String prefix) {
        fileName = translateFileName(fileName);
        prefix = translateFileName(prefix);
        return getFileSystem(fileName).fileStartsWith(fileName, prefix);
    }",True,True,"This method checks if a file starts with a given prefix by translating the file name and prefix, and then calling the fileStartsWith method on the file system. It returns a boolean value.",True,"This code defines a method called ""fileStartsWith"" that takes in two strings, ""fileName"" and ""prefix"". It then translates both strings using a separate method called ""translateFileName"" and returns the result of calling the ""fileStartsWith"" method on the file system with the translated ""fileName"" and ""prefix"" as arguments."
14,getAbsolutePath(String),get absolute path file name ,Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+getAbsolutePath(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+getAbsolutePath(String),org.h2.store.fs.FileSystemSplit+PREFIX,177,4,1,,"public String getAbsolutePath(String fileName) {
        fileName = translateFileName(fileName);
        return PREFIX + getFileSystem(fileName).getAbsolutePath(fileName);
    }",True,True,"This method takes a file name as input, translates it, and returns the absolute path of the file using the file system.",True,"The given code defines a method named ""getAbsolutePath"" that takes a file name as input. It first translates the file name using another method called ""translateFileName"". Then, it returns the absolute path of the file by concatenating a prefix with the absolute path obtained from the file system."
15,getFileName(String),get file name name ,Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+getFileName(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+getFileName(String),,140,4,1,,"public String getFileName(String name) {
        name = translateFileName(name);
        return getFileSystem(name).getFileName(name);
    }",True,True,"This method takes a name as input, translates the name using a separate method, and then retrieves the file name from the file system using the translated name. It returns the file name as a string.",True,"The given code defines a method named ""getFileName"" that takes a string parameter ""name"". It first translates the name using the ""translateFileName"" method and then retrieves the file name using the ""getFileSystem"" method, passing the translated name as an argument. The method returns the retrieved file name as a string."
16,getLastModified(String),get last modified file name ,Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+getLastModified(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+getLastModified(String) java.lang.Math+max(long,long) java.lang.Math+max(long,long)",,496,14,1,,"public long getLastModified(String fileName) {
        fileName = translateFileName(fileName);
        long lastModified = 0;
        for (int i = 0;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(fileName).exists(f)) {
                long l = getFileSystem(fileName).getLastModified(fileName);
                lastModified = Math.max(lastModified, l);
            } else {
                break;
            }
        }
        return lastModified;
    }",False,False,"This method returns the last modified timestamp of a file. It iterates through a series of file names, checks if each file exists, and updates the last modified timestamp if a newer one is found. The final last modified timestamp is returned.",True,"The code defines a method `getLastModified` that takes a file name as input and returns the last modified timestamp of the file. It iterates through a series of file names generated based on the input file name, checks if each file exists, and updates the `lastModified` variable with the maximum timestamp found. Finally, it returns the `lastModified` value."
17,getParent(String),get parent file name ,Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+getParent(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+getParent(String),org.h2.store.fs.FileSystemSplit+PREFIX,165,4,1,,"public String getParent(String fileName) {
        fileName = translateFileName(fileName);
        return PREFIX + getFileSystem(fileName).getParent(fileName);
    }",True,True,"This method takes a file name as input, translates the file name, and returns the parent directory of the translated file name.",True,"The given code defines a method named ""getParent"" that takes a file name as input. It first translates the file name using a separate method, then returns the parent directory of the translated file name by calling another method from the file system class, prefixed with a constant string."
18,isAbsolute(String),is absolute file name ,Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+isAbsolute(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+isAbsolute(String),,159,4,1,,"public boolean isAbsolute(String fileName) {
        fileName = translateFileName(fileName);
        return getFileSystem(fileName).isAbsolute(fileName);
    }",False,True,"This method takes a file name as input, translates it, and then checks if the translated file name is an absolute path in the file system. It returns a boolean value indicating whether the file name is absolute or not.",True,"The given code is a method named ""isAbsolute"" that takes a string parameter ""fileName"". It first translates the file name using a separate method, then it retrieves the file system using the translated file name and checks if the file is an absolute path, returning a boolean value indicating the result."
19,isDirectory(String),is directory file name ,Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+isDirectory(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+isDirectory(String),,161,4,1,,"public boolean isDirectory(String fileName) {
        fileName = translateFileName(fileName);
        return getFileSystem(fileName).isDirectory(fileName);
    }",False,True,"This method takes a file name as input, translates it, and then checks if the translated file name represents a directory in the file system. It returns a boolean value indicating whether the file is a directory or not.",True,"The given code is a method named ""isDirectory"" that takes a file name as input. It translates the file name and then checks if the file system associated with the translated file name is a directory or not, returning a boolean value accordingly."
20,isReadOnly(String),is read only file name ,Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+isReadOnly(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+isReadOnly(String),,159,4,1,,"public boolean isReadOnly(String fileName) {
        fileName = translateFileName(fileName);
        return getFileSystem(fileName).isReadOnly(fileName);
    }",True,True,This method checks if a file is read-only by translating the file name and then using the file system to determine if it is read-only. It returns a boolean value indicating whether the file is read-only or not.,True,"The given code defines a method named ""isReadOnly"" that takes a file name as input. It translates the file name and then checks if the corresponding file system is read-only or not. The method returns a boolean value indicating whether the file is read-only or not."
21,length(String),length file name ,Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+length(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+length(String)",,402,13,1,,"public long length(String fileName) {
        fileName = translateFileName(fileName);
        long length = 0;
        for (int i = 0;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(fileName).exists(f)) {
                length += getFileSystem(fileName).length(f);
            } else {
                break;
            }
        }
        return length;
    }",False,False,"This method calculates the total length of a file or a set of files specified by the given file name. It iterates through the files, checks if each file exists, and adds its length to the total length. The final total length is returned.",True,"This code calculates the total length of a file by iterating through a series of file names generated based on the given file name. It checks if each file exists and if so, adds its length to the total length. The final total length is returned."
22,listFiles(String),list files directory ,Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+listFiles(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+listFiles(String) org.h2.util.New+arrayList() org.h2.util.New+arrayList() java.lang.String+endsWith(String) java.lang.String+endsWith(String) java.util.ArrayList+add(E) java.util.ArrayList+add(E) java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+toArray(T[]) java.util.ArrayList+toArray(T[]),org.h2.store.fs.FileSystemSplit+PART_SUFFIX org.h2.store.fs.FileSystemSplit+PREFIX,615,18,1,,"public String[] listFiles(String directory) {
        directory = translateFileName(directory);
        String[] array = getFileSystem(directory).listFiles(directory);
        ArrayList<String> list = New.arrayList();
        for (int i = 0; i < array.length; i++) {
            String f = array[i];
            if (f.endsWith(PART_SUFFIX)) {
                continue;
            }
            array[i] = f = PREFIX + f;
            list.add(f);
        }
        if (list.size() != array.length) {
            array = new String[list.size()];
            list.toArray(array);
        }
        return array;
    }",False,False,"The function of this method is to list all the files in a given directory. It first translates the directory name, then retrieves the file system for that directory. It filters out files with a specific suffix, adds a prefix to the remaining files, and returns an array of the modified file names.",True,This code takes a directory path as input and returns an array of file names within that directory. It adds a prefix to each file name and excludes any file ending with a specific suffix.
23,normalize(String),normalize file name ,Method,,,org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+normalize(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+normalize(String),org.h2.store.fs.FileSystemSplit+PREFIX,165,4,1,,"public String normalize(String fileName) {
        fileName = translateFileName(fileName);
        return PREFIX + getFileSystem(fileName).normalize(fileName);
    }",True,True,The function of this method is to normalize a given file name by translating it and then returning the normalized file name with a prefix.,True,"The given code defines a method called ""normalize"" that takes a file name as input. It first translates the file name using another method called ""translateFileName"". Then, it returns the normalized file name by appending a prefix and calling the ""normalize"" method of the file system associated with the file name."
24,openFileInputStream(String),open file input stream file name ,Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+openFileInputStream(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+openFileInputStream(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+openFileInputStream(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+openFileInputStream(String) java.io.SequenceInputStream+SequenceInputStream(InputStream,InputStream)",,564,14,1,,"public InputStream openFileInputStream(String fileName) throws IOException {
        fileName = translateFileName(fileName);
        InputStream input = getFileSystem(fileName).openFileInputStream(fileName);
        for (int i = 1;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(f).exists(f)) {
                InputStream i2 = getFileSystem(f).openFileInputStream(f);
                input = new SequenceInputStream(input, i2);
            } else {
                break;
            }
        }
        return input;
    }",False,False,"This method opens an input stream for a file specified by the given file name. It translates the file name, opens the input stream for the file, and then checks for additional files with incremented numbers in the file name. If additional files exist, it opens input streams for them and creates a sequence input stream with the original input stream. Finally, it returns the input stream.",True,"This code defines a method that takes a file name as input and returns an InputStream. It translates the file name, opens an InputStream for the file, and then checks for additional files with incremented numbers in the name. If found, it opens an InputStream for each additional file and creates a SequenceInputStream to combine them with the original InputStream before returning it."
25,"openFileObject(String,String)",open file object file name mode ,Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.util.New+arrayList() org.h2.util.New+arrayList() org.h2.store.fs.FileSystem+openFileObject(String,String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+openFileObject(String,String) java.util.ArrayList+add(E) java.util.ArrayList+add(E) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+openFileObject(String,String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+openFileObject(String,String) java.util.ArrayList+add(E) java.util.ArrayList+add(E) java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+toArray(T[]) java.util.ArrayList+toArray(T[]) org.h2.store.fs.FileObject+length() org.h2.store.fs.FileObject+length() org.h2.store.fs.FileSystemSplit+closeAndThrow(FileObject[],FileObject,long) org.h2.store.fs.FileSystemSplit+closeAndThrow(FileObject[],FileObject,long) org.h2.store.fs.FileObject+length() org.h2.store.fs.FileObject+length() org.h2.store.fs.FileSystemSplit+closeAndThrow(FileObject[],FileObject,long) org.h2.store.fs.FileSystemSplit+closeAndThrow(FileObject[],FileObject,long) org.h2.store.fs.FileObject+length() org.h2.store.fs.FileObject+length() org.h2.store.fs.FileSystemSplit+closeAndThrow(FileObject[],FileObject,long) org.h2.store.fs.FileSystemSplit+closeAndThrow(FileObject[],FileObject,long) org.h2.store.fs.FileObjectSplit+FileObjectSplit(String,String,FileObject[],long,long)",org.h2.store.fs.FileSystemSplit+defaultMaxSize org.h2.store.fs.FileSystemSplit+defaultMaxSize,1607,44,1,,"public FileObject openFileObject(String fileName, String mode) throws IOException {
        fileName = translateFileName(fileName);
        ArrayList<FileObject> list = New.arrayList();
        FileObject o = getFileSystem(fileName).openFileObject(fileName, mode);
        list.add(o);
        for (int i = 1;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(fileName).exists(f)) {
                o = getFileSystem(f).openFileObject(f, mode);
                list.add(o);
            } else {
                break;
            }
        }
        FileObject[] array = new FileObject[list.size()];
        list.toArray(array);
        long maxLength = array[0].length();
        long length = maxLength;
        if (array.length == 1) {
            if (maxLength < defaultMaxSize) {
                maxLength = defaultMaxSize;
            }
        } else {
            if (maxLength == 0) {
                closeAndThrow(array, array[0], maxLength);
            }
            for (int i = 1; i < array.length - 1; i++) {
                o = array[i];
                long l = o.length();
                length += l;
                if (l != maxLength) {
                    closeAndThrow(array, o, maxLength);
                }
            }
            o = array[array.length - 1];
            long l = o.length();
            length += l;
            if (l > maxLength) {
                closeAndThrow(array, o, maxLength);
            }
        }
        FileObjectSplit fo = new FileObjectSplit(fileName, mode, array, length, maxLength);
        return fo;
    }",False,False,"This method opens a file object with the given file name and mode. It translates the file name, creates a list of file objects, and adds the initial file object to the list. It then iterates through the file names with increasing numbers, checking if each file exists. If a file exists, it opens a file object for that file and adds it to the list. If a file does not exist, it breaks out of the loop. It converts the list of file objects to an array, determines the maximum length of the file objects, and calculates the total length. If there is only one file object in the array, it checks if the maximum length is less than a default maximum size and updates the maximum length if necessary. If there are multiple file objects in the array, it checks if the maximum length is zero and throws an exception if it is. It then iterates through the file objects in the array, checking if each file object's length is equal to the maximum length and throwing an exception if it is not. Finally, it creates a new FileObjectSplit object with the file name, mode, array of file objects, length, and maximum length, and returns it.",True,"This code opens a file object specified by the given file name and mode. It checks if there are multiple file objects with the same name and verifies their lengths. If the lengths are not consistent, it throws an exception. Finally, it returns a split file object containing the original file and any additional file objects."
26,"closeAndThrow(FileObject[],FileObject,long)",close and throw array o max length ,Method,"openFileObject(String,String) openFileObject(String,String) openFileObject(String,String)",,org.h2.store.fs.FileObject+length() org.h2.store.fs.FileObject+length() org.h2.store.fs.FileObject+getName() org.h2.store.fs.FileObject+getName() org.h2.store.fs.FileObject+close() org.h2.store.fs.FileObject+close() java.io.IOException+IOException(String),,324,7,2,,"private void closeAndThrow(FileObject[] array, FileObject o, long maxLength) throws IOException {
        String message = ""Expected file length: "" + maxLength + "" got: "" + o.length() + "" for "" + o.getName();
        for (FileObject f : array) {
            f.close();
        }
        throw new IOException(message);
    }",False,False,This method closes all the file objects in the given array and throws an IOException with a message indicating the expected and actual file lengths for a specific file object.,False,The given code is a private method that closes an array of FileObjects and throws an IOException with a message indicating the expected and actual file length if the actual length does not match the expected length.
27,"openFileOutputStream(String,boolean)",open file output stream file name append ,Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystem+openFileOutputStream(String,boolean) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+openFileOutputStream(String,boolean)",,255,5,1,,"public OutputStream openFileOutputStream(String fileName, boolean append) {
        fileName = translateFileName(fileName);
        // TODO the output stream is not split
        return getFileSystem(fileName).openFileOutputStream(fileName, append);
    }",False,False,"This method opens an output stream to a file. It translates the file name, and then calls another method to get the file system and open the output stream with the translated file name and append flag.",True,"This code defines a method called `openFileOutputStream` that takes a file name and a boolean flag indicating whether to append to the file. It translates the file name and then returns an output stream obtained from the file system, with the translated file name and append flag passed as arguments."
28,"rename(String,String)",rename old name new name ,Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+rename(String,String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+rename(String,String)",,443,13,1,,"public void rename(String oldName, String newName) {
        oldName = translateFileName(oldName);
        newName = translateFileName(newName);
        for (int i = 0;; i++) {
            String o = getFileName(oldName, i);
            if (getFileSystem(o).exists(o)) {
                String n = getFileName(newName, i);
                getFileSystem(n).rename(o, n);
            } else {
                break;
            }
        }
    }",False,False,"The function of this method is to rename files in a file system. It takes in two parameters, oldName and newName, and iteratively renames files by appending a number to the end of the file name until a unique name is found.",True,"The given code defines a method called ""rename"" that takes two string parameters: oldName and newName. It iterates over a sequence of file names generated using the oldName and checks if each file exists in the file system. If a file exists, it renames it to the corresponding new name."
29,tryDelete(String),try delete file name ,Method,,,"org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+translateFileName(String) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystemSplit+getFileName(String,int) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String) org.h2.store.fs.FileSystem+tryDelete(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystemSplit+getFileSystem(String) org.h2.store.fs.FileSystem+tryDelete(String)",,466,15,1,,"public boolean tryDelete(String fileName) {
        fileName = translateFileName(fileName);
        for (int i = 0;; i++) {
            String f = getFileName(fileName, i);
            if (getFileSystem(fileName).exists(f)) {
                boolean ok = getFileSystem(fileName).tryDelete(f);
                if (!ok) {
                    return false;
                }
            } else {
                break;
            }
        }
        return true;
    }",False,False,"This method attempts to delete a file by iterating through a series of possible file names and checking if each file exists. If a file exists, it tries to delete it. If the deletion is successful, it continues to the next file. If the deletion fails, it returns false. If no more files exist, it returns true.",True,"The given code attempts to delete a file by iterating through a series of file names generated based on the input file name. It checks if each file exists and tries to delete it using the corresponding file system. If any deletion fails, the method returns false; otherwise, it returns true."
30,translateFileName(String),translate file name file name ,Method,"canWrite(String) setReadOnly(String) copy(String,String) copy(String,String) createDirs(String) createNewFile(String) createTempFile(String,String,boolean,boolean) delete(String) deleteRecursive(String,boolean) exists(String) fileStartsWith(String,String) fileStartsWith(String,String) getAbsolutePath(String) getFileName(String) getLastModified(String) getParent(String) isAbsolute(String) isDirectory(String) isReadOnly(String) length(String) listFiles(String) normalize(String) openFileInputStream(String) openFileObject(String,String) openFileOutputStream(String,boolean) rename(String,String) rename(String,String) tryDelete(String)",,"java.lang.String+startsWith(String) java.lang.String+startsWith(String) org.h2.message.DbException+throwInternalError(String) org.h2.message.DbException+throwInternalError(String) java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+length() java.lang.String+length() java.lang.String+length() java.lang.String+length() java.lang.Character+isDigit(char) java.lang.Character+isDigit(char) java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.Integer+intValue() java.lang.Integer+decode(String) java.lang.Integer+decode(String) java.lang.Integer+intValue() java.lang.String+substring(int) java.lang.String+substring(int)",org.h2.store.fs.FileSystemSplit+PREFIX org.h2.store.fs.FileSystemSplit+PREFIX org.h2.store.fs.FileSystemSplit+PREFIX org.h2.store.fs.FileSystemSplit+defaultMaxSize,701,17,2,,"private String translateFileName(String fileName) {
        if (!fileName.startsWith(PREFIX)) {
            DbException.throwInternalError(fileName + "" doesn't start with "" + PREFIX);
        }
        fileName = fileName.substring(PREFIX.length());
        if (fileName.length() > 0 && Character.isDigit(fileName.charAt(0))) {
            int idx = fileName.indexOf(':');
            String size = fileName.substring(0, idx);
            try {
                defaultMaxSize = 1L << Integer.decode(size).intValue();
                fileName = fileName.substring(idx + 1);
            } catch (NumberFormatException e) {
                // ignore
            }
        }
        return fileName;
    }",False,False,The function of this method is to translate a file name by removing a prefix and extracting a size value if it exists. It then returns the modified file name.,False,"This code is a private method that takes a file name as input and returns a modified version of the file name. It checks if the file name starts with a specific prefix, throws an error if it doesn't, removes the prefix from the file name, and if the remaining file name starts with a digit followed by a colon, it extracts a size value, converts it to a long, and assigns it to a variable before returning the modified file name."
31,"getFileName(String,int)",get file name file name id get the file name of a part file param file name the file name param id the part id return the file name including the part id ,Method,"setReadOnly(String) copy(String,String) copy(String,String) delete(String) getLastModified(String) length(String) openFileInputStream(String) openFileObject(String,String) rename(String,String) rename(String,String) tryDelete(String)",org.h2.store.fs.FileObjectSplit+getFileObject() org.h2.store.fs.FileObjectSplit+setFileLength(long),,org.h2.store.fs.FileSystemSplit+PART_SUFFIX,344,13,8,"/** 
 * Get the file name of a part file.
 * @param fileName the file name
 * @param id the part id
 * @return the file name including the part id
 */
","/**
     * Get the file name of a part file.
     *
     * @param fileName the file name
     * @param id the part id
     * @return the file name including the part id
     */
    static String getFileName(String fileName, int id) {
        if (id > 0) {
            fileName += ""."" + id + PART_SUFFIX;
        }
        return fileName;
    }",False,False,"This method takes a file name and a part id as input and returns the file name with the part id appended to it. If the part id is greater than 0, it appends the part id and a constant suffix to the file name.",True,"This code defines a static method called ""getFileName"" that takes a file name and a part id as input. It appends the part id to the file name and returns the resulting file name."
32,getFileSystem(String),get file system file name ,Method,"canWrite(String) setReadOnly(String) setReadOnly(String) copy(String,String) copy(String,String) copy(String,String) createDirs(String) createNewFile(String) createTempFile(String,String,boolean,boolean) delete(String) delete(String) deleteRecursive(String,boolean) exists(String) fileStartsWith(String,String) getAbsolutePath(String) getFileName(String) getLastModified(String) getLastModified(String) getParent(String) isAbsolute(String) isDirectory(String) isReadOnly(String) length(String) length(String) listFiles(String) normalize(String) openFileInputStream(String) openFileInputStream(String) openFileInputStream(String) openFileObject(String,String) openFileObject(String,String) openFileObject(String,String) openFileOutputStream(String,boolean) rename(String,String) rename(String,String) tryDelete(String) tryDelete(String)",,org.h2.store.fs.FileSystem+getInstance(String) org.h2.store.fs.FileSystem+getInstance(String),,106,3,2,,"private FileSystem getFileSystem(String fileName) {
        return FileSystem.getInstance(fileName);
    }",False,False,This method serves to retrieve the instance of the FileSystem class associated with the given fileName.,False,"The code defines a private method named ""getFileSystem"" that takes a string parameter ""fileName"" and returns an instance of the FileSystem class using the provided fileName. The method is encapsulated and can only be accessed within the current class."
33,accepts(String),accepts file name ,Method,,,java.lang.String+startsWith(String) java.lang.String+startsWith(String),org.h2.store.fs.FileSystemSplit+PREFIX,94,3,4,,"protected boolean accepts(String fileName) {
        return fileName.startsWith(PREFIX);
    }",True,True,This method checks if the given fileName starts with a specific PREFIX and returns a boolean value indicating whether it does or not.,False,"The given code contains a protected method named ""accepts"" that takes a string parameter ""fileName"". It checks if the ""fileName"" starts with a specific prefix and returns a boolean value indicating whether it does or not."
