index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,keyStore,Field,"CertificateGeneratingX509ExtendedKeyManager(X509ExtendedKeyManager,KeyStore,char[])",,,,32,1,18,,private final KeyStore keyStore;,True
2,password,Field,"CertificateGeneratingX509ExtendedKeyManager(X509ExtendedKeyManager,KeyStore,char[])",,,,30,1,18,,private final char[] password;,True
3,existingCertificateAuthority,Field,,,,,64,1,18,,private final CertificateAuthority existingCertificateAuthority;,True
4,"CertificateGeneratingX509ExtendedKeyManager(X509ExtendedKeyManager,KeyStore,char[])",Method,,,com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+findExistingCertificateAuthority() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+findExistingCertificateAuthority(),com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+keyStore com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+keyStore com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+password com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+password com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+existingCertificateAuthority,305,6,1,,"public CertificateGeneratingX509ExtendedKeyManager(X509ExtendedKeyManager keyManager, KeyStore keyStore, char[] keyPassword) {
        super(keyManager);
        this.keyStore = keyStore;
        this.password = keyPassword;
        existingCertificateAuthority = findExistingCertificateAuthority();
    }",False
5,getPrivateKey(String),Method,getCertChainAndKey(String),com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest+generatesAndReturnsNewAliasForWorkingPrivateKey() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest+generatesAndReturnsNewAliasForWorkingPrivateKey(),com.github.tomakehurst.wiremock.http.ssl.DelegatingX509ExtendedKeyManager+getPrivateKey(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getDynamicPrivateKey(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getDynamicPrivateKey(String),,199,5,1,,"@Override
    public PrivateKey getPrivateKey(String alias) {
        PrivateKey original = super.getPrivateKey(alias);
        return original == null ? getDynamicPrivateKey(alias) : original;
    }",False
6,getDynamicPrivateKey(String),Method,getPrivateKey(String),,"java.security.KeyStore+getKey(String,char[]) java.security.KeyStore+getKey(String,char[])",com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+keyStore com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+password,271,7,2,,"private PrivateKey getDynamicPrivateKey(String alias) {
        try {
            return (PrivateKey) keyStore.getKey(alias, password);
        } catch (KeyStoreException | NoSuchAlgorithmException | UnrecoverableKeyException e) {
            return null;
        }
    }",True
7,getCertificateChain(String),Method,"chooseServerAlias(String,String,List<SNIHostName>) getCertChainAndKey(String)",com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest+generatesAndReturnsNewAliasForWorkingPrivateKey() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest+generatesAndReturnsNewAliasForWorkingPrivateKey() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest+generatesAndReturnsNewAliasForWorkingPrivateKey(),com.github.tomakehurst.wiremock.http.ssl.DelegatingX509ExtendedKeyManager+getCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getDynamicCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getDynamicCertificateChain(String),,293,9,1,,"@Override
    public X509Certificate[] getCertificateChain(String alias) {
        X509Certificate[] original = super.getCertificateChain(alias);
        if (original == null) {
            return getDynamicCertificateChain(alias);
        } else {
            return original;
        }
    }",False
8,getDynamicCertificateChain(String),Method,getCertificateChain(String),,java.security.KeyStore+getCertificateChain(String) java.security.KeyStore+getCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+areX509Certificates(Certificate[]) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+areX509Certificates(Certificate[]) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+convertToX509(Certificate[]) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+convertToX509(Certificate[]),com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+keyStore,434,12,2,,"private X509Certificate[] getDynamicCertificateChain(String alias) {
        try {
            Certificate[] fromKeyStore = keyStore.getCertificateChain(alias);
            if (fromKeyStore != null && areX509Certificates(fromKeyStore)) {
                return convertToX509(fromKeyStore);
            } else {
                return null;
            }
        } catch (KeyStoreException e) {
            return null;
        }
    }",True
9,areX509Certificates(Certificate[]),Method,getDynamicCertificateChain(String),,,,165,3,10,,"private static boolean areX509Certificates(Certificate[] fromKeyStore) {
        return fromKeyStore.length == 0 || fromKeyStore[0] instanceof X509Certificate;
    }",True
10,convertToX509(Certificate[]),Method,getDynamicCertificateChain(String),,,,307,7,10,,"private static X509Certificate[] convertToX509(Certificate[] fromKeyStore) {
        X509Certificate[] result = new X509Certificate[fromKeyStore.length];
        for (int i = 0; i < fromKeyStore.length; i++) {
            result[i] = (X509Certificate) fromKeyStore[i];
        }
        return result;
    }",True
11,"chooseServerAlias(String,Principal[],Socket)",Method,,com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsNullIfDefaultAliasReturnsNull() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfSocketIsNull() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfSocketIsNotAnAnSSLSocket() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfHandshakeSessionIsNotSupported() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfHandshakeSessionIsNotAnAnExtendedSSLSession() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfGetRequestedServerNamesIsNotSupported() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfThereAreNoSNIServerNames() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfThereAreNoSNIHostNames() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfAnSNIHostNameMatchesTheDefaultCertificate(),"com.github.tomakehurst.wiremock.http.ssl.DelegatingX509ExtendedKeyManager+chooseServerAlias(String,Principal[],Socket) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(Socket) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(Socket) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+tryToChooseServerAlias(String,String,ExtendedSSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+tryToChooseServerAlias(String,String,ExtendedSSLSession)",,341,6,1,,"@Override
    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {
        String defaultAlias = super.chooseServerAlias(keyType, issuers, socket);
        ExtendedSSLSession handshakeSession = getHandshakeSession(socket);
        return tryToChooseServerAlias(keyType, defaultAlias, handshakeSession);
    }",False
12,getHandshakeSession(Socket),Method,"chooseServerAlias(String,Principal[],Socket)",,com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSessionIfSupported(SSLSocket) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSessionIfSupported(SSLSocket) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(SSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(SSLSession),,356,9,10,,"private static ExtendedSSLSession getHandshakeSession(Socket socket) {
        if (socket instanceof SSLSocket) {
            SSLSocket sslSocket = (SSLSocket) socket;
            SSLSession sslSession = getHandshakeSessionIfSupported(sslSocket);
            return getHandshakeSession(sslSession);
        } else {
            return null;
        }
    }",False
13,getHandshakeSessionIfSupported(SSLSocket),Method,getHandshakeSession(Socket),,javax.net.ssl.SSLSocket+getHandshakeSession() javax.net.ssl.SSLSocket+getHandshakeSession(),,307,8,10,,"private static SSLSession getHandshakeSessionIfSupported(SSLSocket sslSocket) {
        try {
            return sslSocket.getHandshakeSession();
        } catch (UnsupportedOperationException e) {
            // TODO log that dynamically generating is not supported
            return null;
        }
    }",False
14,"chooseEngineServerAlias(String,Principal[],SSLEngine)",Method,,com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsNullIfDefaultAliasReturnsNull() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfEngineIsNull() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfHandshakeSessionIsNotSupported() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfHandshakeSessionIsNotAnAnExtendedSSLSession() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfGetRequestedServerNamesIsNotSupported() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfThereAreNoSNIServerNames() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfThereAreNoSNIHostNames() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfAnSNIHostNameMatchesTheDefaultCertificate() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest+generatesAndReturnsNewAliasForWorkingPrivateKey(),"com.github.tomakehurst.wiremock.http.ssl.DelegatingX509ExtendedKeyManager+chooseEngineServerAlias(String,Principal[],SSLEngine) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(SSLEngine) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(SSLEngine) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+tryToChooseServerAlias(String,String,ExtendedSSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+tryToChooseServerAlias(String,String,ExtendedSSLSession)",,356,6,1,,"@Override
    public String chooseEngineServerAlias(String keyType, Principal[] issuers, SSLEngine engine) {
        String defaultAlias = super.chooseEngineServerAlias(keyType, issuers, engine);
        ExtendedSSLSession handshakeSession = getHandshakeSession(engine);
        return tryToChooseServerAlias(keyType, defaultAlias, handshakeSession);
    }",False
15,getHandshakeSession(SSLEngine),Method,"chooseEngineServerAlias(String,Principal[],SSLEngine)",,com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSessionIfSupported(SSLEngine) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSessionIfSupported(SSLEngine) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(SSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(SSLSession),,205,4,10,,"private static ExtendedSSLSession getHandshakeSession(SSLEngine sslEngine) {
        SSLSession sslSession = getHandshakeSessionIfSupported(sslEngine);
        return getHandshakeSession(sslSession);
    }",False
16,getHandshakeSessionIfSupported(SSLEngine),Method,getHandshakeSession(SSLEngine),,javax.net.ssl.SSLEngine+getHandshakeSession() javax.net.ssl.SSLEngine+getHandshakeSession(),,330,8,10,,"private static SSLSession getHandshakeSessionIfSupported(SSLEngine sslEngine) {
        try {
            return sslEngine.getHandshakeSession();
        } catch (UnsupportedOperationException | NullPointerException e) {
            // TODO log that dynamically generating is not supported
            return null;
        }
    }",False
17,getHandshakeSession(SSLSession),Method,getHandshakeSession(Socket) getHandshakeSession(SSLEngine),,,,262,7,10,,"private static ExtendedSSLSession getHandshakeSession(SSLSession handshakeSession) {
        if (handshakeSession instanceof ExtendedSSLSession) {
            return (ExtendedSSLSession) handshakeSession;
        } else {
            return null;
        }
    }",False
18,"tryToChooseServerAlias(String,String,ExtendedSSLSession)",Method,"chooseServerAlias(String,Principal[],Socket) chooseEngineServerAlias(String,Principal[],SSLEngine)",,"com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+chooseServerAlias(String,String,ExtendedSSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+chooseServerAlias(String,String,ExtendedSSLSession)",com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+existingCertificateAuthority,501,12,2,"/** 
 * @param keyType non null, may be invalid
 * @param defaultAlias nullable
 * @param handshakeSession nullable
 */
","/**
     * @param keyType non null, may be invalid
     * @param defaultAlias nullable
     * @param handshakeSession nullable
     */
    private String tryToChooseServerAlias(String keyType, String defaultAlias, ExtendedSSLSession handshakeSession) {
        if (defaultAlias != null && handshakeSession != null && existingCertificateAuthority != null) {
            return chooseServerAlias(keyType, defaultAlias, handshakeSession);
        } else {
            return defaultAlias;
        }
    }",False
19,"chooseServerAlias(String,String,ExtendedSSLSession)",Method,"tryToChooseServerAlias(String,String,ExtendedSSLSession)",,"com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getSNIHostNames(ExtendedSSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getSNIHostNames(ExtendedSSLSession) java.util.List+isEmpty() java.util.List+isEmpty() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+chooseServerAlias(String,String,List<SNIHostName>) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+chooseServerAlias(String,String,List<SNIHostName>)",,575,13,2,"/** 
 * @param keyType non null, guaranteed to be valid
 * @param defaultAlias non null, guaranteed to match a private key entry
 * @param handshakeSession non null
 */
","/**
     * @param keyType non null, guaranteed to be valid
     * @param defaultAlias non null, guaranteed to match a private key entry
     * @param handshakeSession non null
     */
    private String chooseServerAlias(String keyType, String defaultAlias, ExtendedSSLSession handshakeSession) {
        List<SNIHostName> requestedServerNames = getSNIHostNames(handshakeSession);
        if (requestedServerNames.isEmpty()) {
            return defaultAlias;
        } else {
            return chooseServerAlias(keyType, defaultAlias, requestedServerNames);
        }
    }",False
20,getSNIHostNames(ExtendedSSLSession),Method,"chooseServerAlias(String,String,ExtendedSSLSession)",,com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getRequestedServerNames(ExtendedSSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getRequestedServerNames(ExtendedSSLSession) java.util.List+size() java.util.List+size() java.util.List+add(E) java.util.List+add(E),,521,10,10,,"private static List<SNIHostName> getSNIHostNames(ExtendedSSLSession handshakeSession) {
        List<SNIServerName> requestedServerNames = getRequestedServerNames(handshakeSession);
        List<SNIHostName> requestedHostNames = new ArrayList<>(requestedServerNames.size());
        for (SNIServerName serverName: requestedServerNames) {
            if (serverName instanceof SNIHostName) {
                requestedHostNames.add((SNIHostName) serverName);
            }
        }
        return requestedHostNames;
    }",False
21,getRequestedServerNames(ExtendedSSLSession),Method,getSNIHostNames(ExtendedSSLSession),,javax.net.ssl.ExtendedSSLSession+getRequestedServerNames() javax.net.ssl.ExtendedSSLSession+getRequestedServerNames(),,343,8,10,,"private static List<SNIServerName> getRequestedServerNames(ExtendedSSLSession handshakeSession) {
        try {
            return handshakeSession.getRequestedServerNames();
        } catch (UnsupportedOperationException e) {
            // TODO log that dynamically generating is not supported
            return emptyList();
        }
    }",False
22,"chooseServerAlias(String,String,List<SNIHostName>)",Method,"chooseServerAlias(String,String,ExtendedSSLSession)",,"com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+matches(X509Certificate,List<SNIHostName>) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+matches(X509Certificate,List<SNIHostName>) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+generateCertificate(String,SNIHostName) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+generateCertificate(String,SNIHostName) java.util.List+get(int) java.util.List+get(int)",,869,18,2,"/** 
 * @param keyType non null, guaranteed to be valid
 * @param defaultAlias non null, guaranteed to match a private key entry
 * @param requestedServerNames non null, non empty
 */
","/**
     * @param keyType non null, guaranteed to be valid
     * @param defaultAlias non null, guaranteed to match a private key entry
     * @param requestedServerNames non null, non empty
     */
    private String chooseServerAlias(String keyType, String defaultAlias, List<SNIHostName> requestedServerNames) {
        X509Certificate[] certificateChain = getCertificateChain(defaultAlias);
        if (matches(certificateChain[0], requestedServerNames)) {
            return defaultAlias;
        } else {
            try {
                return generateCertificate(keyType, requestedServerNames.get(0));
            } catch (KeyStoreException | CertificateException | NoSuchAlgorithmException | NoSuchProviderException | InvalidKeyException | SignatureException e) {
                // TODO log?
                return defaultAlias;
            }
        }
    }",False
23,"generateCertificate(String,SNIHostName)",Method,"chooseServerAlias(String,String,List<SNIHostName>)",,"com.github.tomakehurst.wiremock.http.ssl.CertificateAuthority+generateCertificate(String,SNIHostName) com.github.tomakehurst.wiremock.http.ssl.CertificateAuthority+generateCertificate(String,SNIHostName) javax.net.ssl.SNIHostName+getAsciiName() javax.net.ssl.SNIHostName+getAsciiName() java.security.KeyStore+setKeyEntry(String,Key,char[],Certificate[]) java.security.KeyStore+setKeyEntry(String,Key,char[],Certificate[])",com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+existingCertificateAuthority com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+keyStore com.github.tomakehurst.wiremock.http.ssl.CertChainAndKey+key com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+password com.github.tomakehurst.wiremock.http.ssl.CertChainAndKey+certificateChain,819,16,2,"/** 
 * @param keyType non null, guaranteed to be valid
 * @param requestedServerName non null
 * @return an alias to a new private key & certificate for the first requested server name
 */
","/**
     * @param keyType non null, guaranteed to be valid
     * @param requestedServerName non null
     * @return an alias to a new private key & certificate for the first requested server name
     */
    private String generateCertificate(
        String keyType,
        SNIHostName requestedServerName
    ) throws CertificateException, NoSuchAlgorithmException, SignatureException, NoSuchProviderException, InvalidKeyException, KeyStoreException {

        CertChainAndKey newCertChainAndKey = existingCertificateAuthority.generateCertificate(keyType, requestedServerName);

        String requestedNameString = requestedServerName.getAsciiName();
        keyStore.setKeyEntry(requestedNameString, newCertChainAndKey.key, password, newCertChainAndKey.certificateChain);
        return requestedNameString;
    }",True
24,findExistingCertificateAuthority(),Method,"CertificateGeneratingX509ExtendedKeyManager(X509ExtendedKeyManager,KeyStore,char[])",,java.security.KeyStore+aliases() java.security.KeyStore+aliases() java.util.Collections+emptyEnumeration() java.util.Collections+emptyEnumeration() java.util.Enumeration+hasMoreElements() java.util.Enumeration+hasMoreElements() java.util.Enumeration+nextElement() java.util.Enumeration+nextElement() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getCertChainAndKey(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getCertChainAndKey(String),com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+keyStore,500,14,2,,"private CertificateAuthority findExistingCertificateAuthority() {
        Enumeration<String> aliases;
        try {
            aliases = keyStore.aliases();
        } catch (KeyStoreException e) {
            aliases = Collections.emptyEnumeration();
        }
        while (aliases.hasMoreElements()) {
            String alias = aliases.nextElement();
            CertificateAuthority key = getCertChainAndKey(alias);
            if (key != null) return key;
        }
        return null;
    }",True
25,getCertChainAndKey(String),Method,findExistingCertificateAuthority(),,"com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getPrivateKey(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getPrivateKey(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+isCertificateAuthority(X509Certificate) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+isCertificateAuthority(X509Certificate) com.github.tomakehurst.wiremock.http.ssl.CertificateAuthority+CertificateAuthority(X509Certificate[],PrivateKey)",,350,9,2,,"private CertificateAuthority getCertChainAndKey(String alias) {
        X509Certificate[] chain = getCertificateChain(alias);
        PrivateKey key = getPrivateKey(alias);
        if (isCertificateAuthority(chain[0]) && key != null) {
            return new CertificateAuthority(chain, key);
        } else {
            return null;
        }
    }",True
26,isCertificateAuthority(X509Certificate),Method,getCertChainAndKey(String),,java.security.cert.X509Certificate+getKeyUsage() java.security.cert.X509Certificate+getKeyUsage(),,209,4,10,,"private static boolean isCertificateAuthority(X509Certificate certificate) {
        boolean[] keyUsage = certificate.getKeyUsage();
        return keyUsage != null && keyUsage.length > 5 && keyUsage[5];
    }",True
27,"matches(X509Certificate,List<SNIHostName>)",Method,"chooseServerAlias(String,String,List<SNIHostName>)",,"com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+matches(X509Certificate,SNIHostName) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+matches(X509Certificate,SNIHostName)",,304,8,10,,"private static boolean matches(X509Certificate x509Certificate, List<SNIHostName> requestedServerNames) {
        for (SNIHostName serverName : requestedServerNames) {
            if (matches(x509Certificate, serverName)) {
                return true;
            }
        }
        return false;
    }",False
28,"matches(X509Certificate,SNIHostName)",Method,"matches(X509Certificate,List<SNIHostName>)",,"sun.security.util.HostnameChecker+getInstance(byte) sun.security.util.HostnameChecker+getInstance(byte) sun.security.util.HostnameChecker+match(String,X509Certificate) sun.security.util.HostnameChecker+match(String,X509Certificate) javax.net.ssl.SNIHostName+getAsciiName() javax.net.ssl.SNIHostName+getAsciiName()",sun.security.util.HostnameChecker+TYPE_TLS,375,9,10,,"private static boolean matches(X509Certificate x509Certificate, SNIHostName hostName) {
        try {
            HostnameChecker instance = HostnameChecker.getInstance(HostnameChecker.TYPE_TLS);
            instance.match(hostName.getAsciiName(), x509Certificate);
            return true;
        } catch (CertificateException e) {
            return false;
        }
    }",False
