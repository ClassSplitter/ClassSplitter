index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,code summary
1,keyStore,key store ,Field,"CertificateGeneratingX509ExtendedKeyManager(X509ExtendedKeyManager,KeyStore,char[])",,,,32,1,18,,private final KeyStore keyStore;,True,True,,
2,password,password ,Field,"CertificateGeneratingX509ExtendedKeyManager(X509ExtendedKeyManager,KeyStore,char[])",,,,30,1,18,,private final char[] password;,True,True,,
3,existingCertificateAuthority,existing certificate authority ,Field,,,,,64,1,18,,private final CertificateAuthority existingCertificateAuthority;,True,True,,
4,"CertificateGeneratingX509ExtendedKeyManager(X509ExtendedKeyManager,KeyStore,char[])",certificate generating x509 extended key manager key manager key store key password ,Method,,,com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+findExistingCertificateAuthority() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+findExistingCertificateAuthority(),com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+keyStore com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+keyStore com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+password com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+password com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+existingCertificateAuthority,305,6,1,,"public CertificateGeneratingX509ExtendedKeyManager(X509ExtendedKeyManager keyManager, KeyStore keyStore, char[] keyPassword) {
        super(keyManager);
        this.keyStore = keyStore;
        this.password = keyPassword;
        existingCertificateAuthority = findExistingCertificateAuthority();
    }",False,False,"The function of the method is to generate a certificate using an X509ExtendedKeyManager, a KeyStore, and a password. It also finds an existing certificate authority.","The code defines a constructor for a class called CertificateGeneratingX509ExtendedKeyManager. It takes an X509ExtendedKeyManager, a KeyStore, and a password as parameters. The constructor initializes the keyStore and password variables, and also calls a method called findExistingCertificateAuthority to find an existing certificate authority."
5,getPrivateKey(String),get private key alias ,Method,getCertChainAndKey(String),com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest+generatesAndReturnsNewAliasForWorkingPrivateKey() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest+generatesAndReturnsNewAliasForWorkingPrivateKey(),com.github.tomakehurst.wiremock.http.ssl.DelegatingX509ExtendedKeyManager+getPrivateKey(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getDynamicPrivateKey(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getDynamicPrivateKey(String),,199,5,1,,"@Override
    public PrivateKey getPrivateKey(String alias) {
        PrivateKey original = super.getPrivateKey(alias);
        return original == null ? getDynamicPrivateKey(alias) : original;
    }",False,False,"The function of this method is to retrieve a private key based on the given alias. If the original private key is null, it will return a dynamic private key instead.","This code overrides the `getPrivateKey` method and returns the private key associated with the given alias. If the original private key is null, it calls the `getDynamicPrivateKey` method to retrieve a dynamic private key instead."
6,getDynamicPrivateKey(String),get dynamic private key alias ,Method,getPrivateKey(String),,"java.security.KeyStore+getKey(String,char[]) java.security.KeyStore+getKey(String,char[])",com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+keyStore com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+password,271,7,2,,"private PrivateKey getDynamicPrivateKey(String alias) {
        try {
            return (PrivateKey) keyStore.getKey(alias, password);
        } catch (KeyStoreException | NoSuchAlgorithmException | UnrecoverableKeyException e) {
            return null;
        }
    }",True,True,"This method retrieves a dynamic private key from a keystore using the provided alias. If successful, it returns the private key. If any exceptions occur, it returns null.","The code defines a private method named ""getDynamicPrivateKey"" that takes an alias as input and attempts to retrieve a private key from a key store using the provided alias and password. If successful, it returns the private key; otherwise, it returns null."
7,getCertificateChain(String),get certificate chain alias ,Method,"chooseServerAlias(String,String,List<SNIHostName>) getCertChainAndKey(String)",com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest+generatesAndReturnsNewAliasForWorkingPrivateKey() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest+generatesAndReturnsNewAliasForWorkingPrivateKey() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest+generatesAndReturnsNewAliasForWorkingPrivateKey(),com.github.tomakehurst.wiremock.http.ssl.DelegatingX509ExtendedKeyManager+getCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getDynamicCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getDynamicCertificateChain(String),,293,9,1,,"@Override
    public X509Certificate[] getCertificateChain(String alias) {
        X509Certificate[] original = super.getCertificateChain(alias);
        if (original == null) {
            return getDynamicCertificateChain(alias);
        } else {
            return original;
        }
    }",False,False,"This method overrides the getCertificateChain method. It retrieves the certificate chain for a given alias. If the original chain is null, it retrieves a dynamic certificate chain. Otherwise, it returns the original chain.","This code overrides the `getCertificateChain` method and first checks if the original certificate chain is null. If it is null, it calls the `getDynamicCertificateChain` method to retrieve a dynamic certificate chain. Otherwise, it returns the original certificate chain."
8,getDynamicCertificateChain(String),get dynamic certificate chain alias ,Method,getCertificateChain(String),,java.security.KeyStore+getCertificateChain(String) java.security.KeyStore+getCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+areX509Certificates(Certificate[]) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+areX509Certificates(Certificate[]) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+convertToX509(Certificate[]) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+convertToX509(Certificate[]),com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+keyStore,434,12,2,,"private X509Certificate[] getDynamicCertificateChain(String alias) {
        try {
            Certificate[] fromKeyStore = keyStore.getCertificateChain(alias);
            if (fromKeyStore != null && areX509Certificates(fromKeyStore)) {
                return convertToX509(fromKeyStore);
            } else {
                return null;
            }
        } catch (KeyStoreException e) {
            return null;
        }
    }",True,True,This method retrieves a dynamic certificate chain from a keystore using the provided alias. It checks if the retrieved certificates are of type X509 and converts them if necessary. It returns the converted chain or null if an exception occurs.,"This code is a private method that retrieves a dynamic certificate chain from a KeyStore. It checks if the retrieved certificates are of type X509 and converts them if necessary. If an exception occurs during the process, it returns null."
9,areX509Certificates(Certificate[]),are x509 certificates from key store ,Method,getDynamicCertificateChain(String),,,,165,3,10,,"private static boolean areX509Certificates(Certificate[] fromKeyStore) {
        return fromKeyStore.length == 0 || fromKeyStore[0] instanceof X509Certificate;
    }",True,True,This method checks if the given array of certificates is empty or if the first certificate in the array is an instance of X509Certificate. It returns a boolean value indicating the result.,"The given code is a private static method named ""areX509Certificates"" that takes an array of Certificates as input. It checks if the length of the array is zero or if the first element in the array is an instance of X509Certificate. It returns a boolean value indicating whether the array contains X509Certificates or not."
10,convertToX509(Certificate[]),convert to x509 from key store ,Method,getDynamicCertificateChain(String),,,,307,7,10,,"private static X509Certificate[] convertToX509(Certificate[] fromKeyStore) {
        X509Certificate[] result = new X509Certificate[fromKeyStore.length];
        for (int i = 0; i < fromKeyStore.length; i++) {
            result[i] = (X509Certificate) fromKeyStore[i];
        }
        return result;
    }",True,True,The function of this method is to convert an array of Certificates to an array of X509Certificates by casting each element of the input array.,This code is a private static method that takes an array of Certificates as input and converts them into an array of X509Certificates. It iterates through each element of the input array and casts it to an X509Certificate before assigning it to the corresponding position in the result array. The method then returns the resulting array of X509Certificates.
11,"chooseServerAlias(String,Principal[],Socket)",choose server alias key type issuers socket ,Method,,com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsNullIfDefaultAliasReturnsNull() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfSocketIsNull() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfSocketIsNotAnAnSSLSocket() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfHandshakeSessionIsNotSupported() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfHandshakeSessionIsNotAnAnExtendedSSLSession() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfGetRequestedServerNamesIsNotSupported() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfThereAreNoSNIServerNames() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfThereAreNoSNIHostNames() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseServerAliasDefaultsTest+returnsDefaultIfAnSNIHostNameMatchesTheDefaultCertificate(),"com.github.tomakehurst.wiremock.http.ssl.DelegatingX509ExtendedKeyManager+chooseServerAlias(String,Principal[],Socket) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(Socket) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(Socket) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+tryToChooseServerAlias(String,String,ExtendedSSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+tryToChooseServerAlias(String,String,ExtendedSSLSession)",,341,6,1,,"@Override
    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {
        String defaultAlias = super.chooseServerAlias(keyType, issuers, socket);
        ExtendedSSLSession handshakeSession = getHandshakeSession(socket);
        return tryToChooseServerAlias(keyType, defaultAlias, handshakeSession);
    }",False,False,"This method overrides the chooseServerAlias method from a superclass. It takes in the keyType, issuers, and socket as parameters. It calls the superclass method to get the defaultAlias. It then gets the handshakeSession from the socket and calls tryToChooseServerAlias method with the keyType, defaultAlias, and handshakeSession as parameters. Finally, it returns the result of the tryToChooseServerAlias method.","This code overrides the `chooseServerAlias` method, which is responsible for selecting the server's alias during SSL/TLS handshake. It first calls the superclass's implementation to get a default alias, then retrieves the handshake session from the socket and finally calls another method to potentially choose a different alias based on the key type, default alias, and handshake session."
12,getHandshakeSession(Socket),get handshake session socket ,Method,"chooseServerAlias(String,Principal[],Socket)",,com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSessionIfSupported(SSLSocket) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSessionIfSupported(SSLSocket) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(SSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(SSLSession),,356,9,10,,"private static ExtendedSSLSession getHandshakeSession(Socket socket) {
        if (socket instanceof SSLSocket) {
            SSLSocket sslSocket = (SSLSocket) socket;
            SSLSession sslSession = getHandshakeSessionIfSupported(sslSocket);
            return getHandshakeSession(sslSession);
        } else {
            return null;
        }
    }",False,False,"This method returns the handshake session of a given socket if it is an instance of SSLSocket, otherwise it returns null.","This code is a method named ""getHandshakeSession"" that takes a Socket object as a parameter. It checks if the socket is an instance of SSLSocket, and if so, it retrieves the SSLSession from the socket and returns an ExtendedSSLSession object. If the socket is not an instance of SSLSocket, it returns null."
13,getHandshakeSessionIfSupported(SSLSocket),get handshake session if supported ssl socket ,Method,getHandshakeSession(Socket),,javax.net.ssl.SSLSocket+getHandshakeSession() javax.net.ssl.SSLSocket+getHandshakeSession(),,307,8,10,,"private static SSLSession getHandshakeSessionIfSupported(SSLSocket sslSocket) {
        try {
            return sslSocket.getHandshakeSession();
        } catch (UnsupportedOperationException e) {
            // TODO log that dynamically generating is not supported
            return null;
        }
    }",False,False,"This method returns the SSL handshake session of the given SSL socket if supported. If not supported, it logs a message and returns null.","The code defines a private static method named ""getHandshakeSessionIfSupported"" that takes an SSLSocket as a parameter. It attempts to retrieve the handshake session from the socket using the ""getHandshakeSession"" method. If the operation is not supported, it catches the UnsupportedOperationException and returns null."
14,"chooseEngineServerAlias(String,Principal[],SSLEngine)",choose engine server alias key type issuers engine ,Method,,com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsNullIfDefaultAliasReturnsNull() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfEngineIsNull() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfHandshakeSessionIsNotSupported() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfHandshakeSessionIsNotAnAnExtendedSSLSession() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfGetRequestedServerNamesIsNotSupported() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfThereAreNoSNIServerNames() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfThereAreNoSNIHostNames() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasDefaultsTest+returnsDefaultIfAnSNIHostNameMatchesTheDefaultCertificate() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManagerChooseEngineServerAliasTest+generatesAndReturnsNewAliasForWorkingPrivateKey(),"com.github.tomakehurst.wiremock.http.ssl.DelegatingX509ExtendedKeyManager+chooseEngineServerAlias(String,Principal[],SSLEngine) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(SSLEngine) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(SSLEngine) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+tryToChooseServerAlias(String,String,ExtendedSSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+tryToChooseServerAlias(String,String,ExtendedSSLSession)",,356,6,1,,"@Override
    public String chooseEngineServerAlias(String keyType, Principal[] issuers, SSLEngine engine) {
        String defaultAlias = super.chooseEngineServerAlias(keyType, issuers, engine);
        ExtendedSSLSession handshakeSession = getHandshakeSession(engine);
        return tryToChooseServerAlias(keyType, defaultAlias, handshakeSession);
    }",False,False,"This method overrides the chooseEngineServerAlias method and returns a server alias for the given key type, issuers, and SSLEngine. It first calls the super method to get a default alias, then tries to choose a server alias based on the key type, default alias, and handshake session.","This code overrides the `chooseEngineServerAlias` method, which is responsible for selecting the server's alias for SSL/TLS handshake. It calls the superclass's method to get a default alias, retrieves the handshake session, and then uses a custom method `tryToChooseServerAlias` to potentially choose a different alias based on the key type, default alias, and handshake session."
15,getHandshakeSession(SSLEngine),get handshake session ssl engine ,Method,"chooseEngineServerAlias(String,Principal[],SSLEngine)",,com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSessionIfSupported(SSLEngine) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSessionIfSupported(SSLEngine) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(SSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getHandshakeSession(SSLSession),,205,4,10,,"private static ExtendedSSLSession getHandshakeSession(SSLEngine sslEngine) {
        SSLSession sslSession = getHandshakeSessionIfSupported(sslEngine);
        return getHandshakeSession(sslSession);
    }",False,False,"The function of the given method is to retrieve the handshake session from the provided SSL engine, by first checking if the handshake session is supported and then returning the handshake session.","The code defines a private static method named ""getHandshakeSession"" that takes an SSLEngine object as a parameter. It first calls another method named ""getHandshakeSessionIfSupported"" to retrieve the SSLSession object, and then passes that object to another method named ""getHandshakeSession"" to return an ExtendedSSLSession object."
16,getHandshakeSessionIfSupported(SSLEngine),get handshake session if supported ssl engine ,Method,getHandshakeSession(SSLEngine),,javax.net.ssl.SSLEngine+getHandshakeSession() javax.net.ssl.SSLEngine+getHandshakeSession(),,330,8,10,,"private static SSLSession getHandshakeSessionIfSupported(SSLEngine sslEngine) {
        try {
            return sslEngine.getHandshakeSession();
        } catch (UnsupportedOperationException | NullPointerException e) {
            // TODO log that dynamically generating is not supported
            return null;
        }
    }",False,False,"This method returns the SSL handshake session if supported by the given SSL engine. If not supported, it logs a message and returns null.","This code defines a private static method named ""getHandshakeSessionIfSupported"" that takes an SSLEngine object as a parameter. It attempts to retrieve the handshake session from the SSLEngine and returns it. If the operation is not supported or a NullPointerException occurs, it logs a message and returns null."
17,getHandshakeSession(SSLSession),get handshake session handshake session ,Method,getHandshakeSession(Socket) getHandshakeSession(SSLEngine),,,,262,7,10,,"private static ExtendedSSLSession getHandshakeSession(SSLSession handshakeSession) {
        if (handshakeSession instanceof ExtendedSSLSession) {
            return (ExtendedSSLSession) handshakeSession;
        } else {
            return null;
        }
    }",False,False,"The function of the method is to return an ExtendedSSLSession object if the input SSLSession object is an instance of ExtendedSSLSession, otherwise it returns null.","The code defines a private static method named ""getHandshakeSession"" that takes an SSLSession object as a parameter. It checks if the given session is an instance of ExtendedSSLSession and returns it if true, otherwise it returns null."
18,"tryToChooseServerAlias(String,String,ExtendedSSLSession)",try to choose server alias key type default alias handshake session param key type non null may be invalid param default alias nullable param handshake session nullable ,Method,"chooseServerAlias(String,Principal[],Socket) chooseEngineServerAlias(String,Principal[],SSLEngine)",,"com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+chooseServerAlias(String,String,ExtendedSSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+chooseServerAlias(String,String,ExtendedSSLSession)",com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+existingCertificateAuthority,501,12,2,"/** 
 * @param keyType non null, may be invalid
 * @param defaultAlias nullable
 * @param handshakeSession nullable
 */
","/**
     * @param keyType non null, may be invalid
     * @param defaultAlias nullable
     * @param handshakeSession nullable
     */
    private String tryToChooseServerAlias(String keyType, String defaultAlias, ExtendedSSLSession handshakeSession) {
        if (defaultAlias != null && handshakeSession != null && existingCertificateAuthority != null) {
            return chooseServerAlias(keyType, defaultAlias, handshakeSession);
        } else {
            return defaultAlias;
        }
    }",False,False,"This method tries to choose a server alias based on the provided parameters. If the default alias, handshake session, and existing certificate authority are not null, it calls the chooseServerAlias method. Otherwise, it returns the default alias.","This code defines a private method called `tryToChooseServerAlias` that takes in three parameters: `keyType`, `defaultAlias`, and `handshakeSession`. It checks if `defaultAlias`, `handshakeSession`, and `existingCertificateAuthority` are not null, and if so, it calls another method called `chooseServerAlias` with the same parameters and returns its result. Otherwise, it returns the value of `defaultAlias`."
19,"chooseServerAlias(String,String,ExtendedSSLSession)",choose server alias key type default alias handshake session param key type non null guaranteed to be valid param default alias non null guaranteed to match a private key entry param handshake session non null ,Method,"tryToChooseServerAlias(String,String,ExtendedSSLSession)",,"com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getSNIHostNames(ExtendedSSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getSNIHostNames(ExtendedSSLSession) java.util.List+isEmpty() java.util.List+isEmpty() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+chooseServerAlias(String,String,List<SNIHostName>) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+chooseServerAlias(String,String,List<SNIHostName>)",,575,13,2,"/** 
 * @param keyType non null, guaranteed to be valid
 * @param defaultAlias non null, guaranteed to match a private key entry
 * @param handshakeSession non null
 */
","/**
     * @param keyType non null, guaranteed to be valid
     * @param defaultAlias non null, guaranteed to match a private key entry
     * @param handshakeSession non null
     */
    private String chooseServerAlias(String keyType, String defaultAlias, ExtendedSSLSession handshakeSession) {
        List<SNIHostName> requestedServerNames = getSNIHostNames(handshakeSession);
        if (requestedServerNames.isEmpty()) {
            return defaultAlias;
        } else {
            return chooseServerAlias(keyType, defaultAlias, requestedServerNames);
        }
    }",False,False,"This method chooses a server alias based on the key type, default alias, and the requested server names in the handshake session. If no requested server names are present, it returns the default alias. Otherwise, it recursively calls itself with the requested server names.","This code defines a private method called `chooseServerAlias` that takes in three parameters: `keyType`, `defaultAlias`, and `handshakeSession`. It first checks if the list of requested server names is empty, and if so, it returns the `defaultAlias`. Otherwise, it calls another overloaded version of `chooseServerAlias` with the additional parameter `requestedServerNames` and returns the result."
20,getSNIHostNames(ExtendedSSLSession),get sni host names handshake session ,Method,"chooseServerAlias(String,String,ExtendedSSLSession)",,com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getRequestedServerNames(ExtendedSSLSession) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getRequestedServerNames(ExtendedSSLSession) java.util.List+size() java.util.List+size() java.util.List+add(E) java.util.List+add(E),,521,10,10,,"private static List<SNIHostName> getSNIHostNames(ExtendedSSLSession handshakeSession) {
        List<SNIServerName> requestedServerNames = getRequestedServerNames(handshakeSession);
        List<SNIHostName> requestedHostNames = new ArrayList<>(requestedServerNames.size());
        for (SNIServerName serverName: requestedServerNames) {
            if (serverName instanceof SNIHostName) {
                requestedHostNames.add((SNIHostName) serverName);
            }
        }
        return requestedHostNames;
    }",False,False,"This method takes an ExtendedSSLSession as input and returns a List of SNIHostNames. It extracts the requested server names from the session, filters out any that are not SNIHostNames, and returns the filtered list.","This code is a private static method that takes an ExtendedSSLSession object as input and returns a list of SNIHostNames. It extracts the requested server names from the session, filters out any that are not of type SNIHostName, and returns the filtered list."
21,getRequestedServerNames(ExtendedSSLSession),get requested server names handshake session ,Method,getSNIHostNames(ExtendedSSLSession),,javax.net.ssl.ExtendedSSLSession+getRequestedServerNames() javax.net.ssl.ExtendedSSLSession+getRequestedServerNames(),,343,8,10,,"private static List<SNIServerName> getRequestedServerNames(ExtendedSSLSession handshakeSession) {
        try {
            return handshakeSession.getRequestedServerNames();
        } catch (UnsupportedOperationException e) {
            // TODO log that dynamically generating is not supported
            return emptyList();
        }
    }",False,False,"This method returns a list of requested server names from an extended SSL session. If dynamically generating server names is not supported, it returns an empty list.","This code defines a private static method named ""getRequestedServerNames"" that takes an ExtendedSSLSession object as a parameter. It attempts to retrieve the requested server names from the session using the ""getRequestedServerNames"" method. If the operation is not supported, it catches the UnsupportedOperationException and returns an empty list."
22,"chooseServerAlias(String,String,List<SNIHostName>)",choose server alias key type default alias requested server names param key type non null guaranteed to be valid param default alias non null guaranteed to match a private key entry param requested server names non null non empty ,Method,"chooseServerAlias(String,String,ExtendedSSLSession)",,"com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+matches(X509Certificate,List<SNIHostName>) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+matches(X509Certificate,List<SNIHostName>) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+generateCertificate(String,SNIHostName) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+generateCertificate(String,SNIHostName) java.util.List+get(int) java.util.List+get(int)",,869,18,2,"/** 
 * @param keyType non null, guaranteed to be valid
 * @param defaultAlias non null, guaranteed to match a private key entry
 * @param requestedServerNames non null, non empty
 */
","/**
     * @param keyType non null, guaranteed to be valid
     * @param defaultAlias non null, guaranteed to match a private key entry
     * @param requestedServerNames non null, non empty
     */
    private String chooseServerAlias(String keyType, String defaultAlias, List<SNIHostName> requestedServerNames) {
        X509Certificate[] certificateChain = getCertificateChain(defaultAlias);
        if (matches(certificateChain[0], requestedServerNames)) {
            return defaultAlias;
        } else {
            try {
                return generateCertificate(keyType, requestedServerNames.get(0));
            } catch (KeyStoreException | CertificateException | NoSuchAlgorithmException | NoSuchProviderException | InvalidKeyException | SignatureException e) {
                // TODO log?
                return defaultAlias;
            }
        }
    }",False,False,"This method chooses a server alias based on the provided key type, default alias, and requested server names. It checks if the certificate chain matches the requested server names and returns the default alias if it does. Otherwise, it generates a new certificate and returns the generated alias. If any exceptions occur during the process, it logs the error and returns the default alias.","This code defines a private method called `chooseServerAlias` that takes in a key type, a default alias, and a list of requested server names. It retrieves the certificate chain for the default alias and checks if it matches the requested server names. If it does, it returns the default alias. Otherwise, it generates a new certificate using the key type and the first requested server name, and returns it. If any exceptions occur during the generation process, it returns the default alias."
23,"generateCertificate(String,SNIHostName)",generate certificate key type requested server name param key type non null guaranteed to be valid param requested server name non null return an alias to a new private key certificate for the first requested server name ,Method,"chooseServerAlias(String,String,List<SNIHostName>)",,"com.github.tomakehurst.wiremock.http.ssl.CertificateAuthority+generateCertificate(String,SNIHostName) com.github.tomakehurst.wiremock.http.ssl.CertificateAuthority+generateCertificate(String,SNIHostName) javax.net.ssl.SNIHostName+getAsciiName() javax.net.ssl.SNIHostName+getAsciiName() java.security.KeyStore+setKeyEntry(String,Key,char[],Certificate[]) java.security.KeyStore+setKeyEntry(String,Key,char[],Certificate[])",com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+existingCertificateAuthority com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+keyStore com.github.tomakehurst.wiremock.http.ssl.CertChainAndKey+key com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+password com.github.tomakehurst.wiremock.http.ssl.CertChainAndKey+certificateChain,819,16,2,"/** 
 * @param keyType non null, guaranteed to be valid
 * @param requestedServerName non null
 * @return an alias to a new private key & certificate for the first requested server name
 */
","/**
     * @param keyType non null, guaranteed to be valid
     * @param requestedServerName non null
     * @return an alias to a new private key & certificate for the first requested server name
     */
    private String generateCertificate(
        String keyType,
        SNIHostName requestedServerName
    ) throws CertificateException, NoSuchAlgorithmException, SignatureException, NoSuchProviderException, InvalidKeyException, KeyStoreException {

        CertChainAndKey newCertChainAndKey = existingCertificateAuthority.generateCertificate(keyType, requestedServerName);

        String requestedNameString = requestedServerName.getAsciiName();
        keyStore.setKeyEntry(requestedNameString, newCertChainAndKey.key, password, newCertChainAndKey.certificateChain);
        return requestedNameString;
    }",False,True,"The function generates a new private key and certificate for a requested server name, using a given key type. It then stores the generated key and certificate in a key store, and returns the requested server name as an alias.","This code defines a private method called `generateCertificate` that takes a key type and a server name as input. It generates a new private key and certificate for the server name, stores them in a key store, and returns the server name as an alias. The method handles various exceptions related to certificate generation and key storage."
24,findExistingCertificateAuthority(),find existing certificate authority ,Method,"CertificateGeneratingX509ExtendedKeyManager(X509ExtendedKeyManager,KeyStore,char[])",,java.security.KeyStore+aliases() java.security.KeyStore+aliases() java.util.Collections+emptyEnumeration() java.util.Collections+emptyEnumeration() java.util.Enumeration+hasMoreElements() java.util.Enumeration+hasMoreElements() java.util.Enumeration+nextElement() java.util.Enumeration+nextElement() com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getCertChainAndKey(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getCertChainAndKey(String),com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+keyStore,500,14,2,,"private CertificateAuthority findExistingCertificateAuthority() {
        Enumeration<String> aliases;
        try {
            aliases = keyStore.aliases();
        } catch (KeyStoreException e) {
            aliases = Collections.emptyEnumeration();
        }
        while (aliases.hasMoreElements()) {
            String alias = aliases.nextElement();
            CertificateAuthority key = getCertChainAndKey(alias);
            if (key != null) return key;
        }
        return null;
    }",True,True,"This method searches for an existing certificate authority in a key store. It iterates through the aliases in the key store and retrieves the certificate authority associated with each alias. If a certificate authority is found, it is returned; otherwise, null is returned.","This code is a method that searches for an existing certificate authority in a key store. It iterates through the aliases in the key store and retrieves the certificate authority's certificate chain and key. If a valid certificate authority is found, it is returned; otherwise, null is returned."
25,getCertChainAndKey(String),get cert chain and key alias ,Method,findExistingCertificateAuthority(),,"com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getCertificateChain(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getPrivateKey(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+getPrivateKey(String) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+isCertificateAuthority(X509Certificate) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+isCertificateAuthority(X509Certificate) com.github.tomakehurst.wiremock.http.ssl.CertificateAuthority+CertificateAuthority(X509Certificate[],PrivateKey)",,350,9,2,,"private CertificateAuthority getCertChainAndKey(String alias) {
        X509Certificate[] chain = getCertificateChain(alias);
        PrivateKey key = getPrivateKey(alias);
        if (isCertificateAuthority(chain[0]) && key != null) {
            return new CertificateAuthority(chain, key);
        } else {
            return null;
        }
    }",True,True,"This method retrieves the certificate chain and private key associated with a given alias. If the first certificate in the chain is a certificate authority and the private key is not null, it returns a new CertificateAuthority object with the chain and key. Otherwise, it returns null.","This code is a method that retrieves a certificate chain and private key based on a given alias. It checks if the first certificate in the chain is a certificate authority and if the private key is not null. If both conditions are met, it returns a new instance of the CertificateAuthority class with the chain and key, otherwise it returns null."
26,isCertificateAuthority(X509Certificate),is certificate authority certificate ,Method,getCertChainAndKey(String),,java.security.cert.X509Certificate+getKeyUsage() java.security.cert.X509Certificate+getKeyUsage(),,209,4,10,,"private static boolean isCertificateAuthority(X509Certificate certificate) {
        boolean[] keyUsage = certificate.getKeyUsage();
        return keyUsage != null && keyUsage.length > 5 && keyUsage[5];
    }",True,True,"The function checks if a given X509Certificate is a certificate authority by examining its key usage. It returns true if the key usage array is not null, has a length greater than 5, and the element at index 5 is true.","The given code is a method named ""isCertificateAuthority"" that takes an X509Certificate as input and returns a boolean value. It checks if the certificate's keyUsage array is not null, has a length greater than 5, and if the element at index 5 is true, indicating that the certificate is a certificate authority."
27,"matches(X509Certificate,List<SNIHostName>)",matches x509 certificate requested server names ,Method,"chooseServerAlias(String,String,List<SNIHostName>)",,"com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+matches(X509Certificate,SNIHostName) com.github.tomakehurst.wiremock.http.ssl.CertificateGeneratingX509ExtendedKeyManager+matches(X509Certificate,SNIHostName)",,304,8,10,,"private static boolean matches(X509Certificate x509Certificate, List<SNIHostName> requestedServerNames) {
        for (SNIHostName serverName : requestedServerNames) {
            if (matches(x509Certificate, serverName)) {
                return true;
            }
        }
        return false;
    }",False,False,"The function checks if the given X509Certificate matches any of the requested server names in the list. It returns true if there is a match, and false otherwise.","The given code is a private static method named ""matches"" that takes an X509Certificate and a list of SNIHostNames as parameters. It iterates through the list of SNIHostNames and checks if the X509Certificate matches any of the server names. If a match is found, it returns true; otherwise, it returns false."
28,"matches(X509Certificate,SNIHostName)",matches x509 certificate host name ,Method,"matches(X509Certificate,List<SNIHostName>)",,"sun.security.util.HostnameChecker+getInstance(byte) sun.security.util.HostnameChecker+getInstance(byte) sun.security.util.HostnameChecker+match(String,X509Certificate) sun.security.util.HostnameChecker+match(String,X509Certificate) javax.net.ssl.SNIHostName+getAsciiName() javax.net.ssl.SNIHostName+getAsciiName()",sun.security.util.HostnameChecker+TYPE_TLS,375,9,10,,"private static boolean matches(X509Certificate x509Certificate, SNIHostName hostName) {
        try {
            HostnameChecker instance = HostnameChecker.getInstance(HostnameChecker.TYPE_TLS);
            instance.match(hostName.getAsciiName(), x509Certificate);
            return true;
        } catch (CertificateException e) {
            return false;
        }
    }",False,False,"This method checks if the given X509Certificate matches the given SNIHostName by using the HostnameChecker class. It returns true if the certificate matches, and false if there is a CertificateException.","The code defines a private static method named ""matches"" that takes an X509Certificate and an SNIHostName as parameters. It attempts to match the host name with the certificate using the HostnameChecker class, and returns true if successful. If a CertificateException occurs, it returns false."
