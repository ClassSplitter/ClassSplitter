index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,mBackgroundColorResource,m background color resource ,Field,setBackgroundColorResource(int) getBackgroundColor(Context),,,,37,1,2,,private int mBackgroundColorResource;,True,True,,False,
2,mBackgroundColorCode,m background color code ,Field,setBackgroundColor(String),,,,36,1,2,,private String mBackgroundColorCode;,True,True,,False,
3,mBackgroundColor,m background color ,Field,setBackgroundColor(int),,,,41,1,2,,private int mBackgroundColor = Color.RED;,True,True,,False,
4,mTextColorResource,m text color resource ,Field,setTextColorResource(int) getTextColor(Context),,,,31,1,2,,private int mTextColorResource;,True,True,,False,
5,mTextColorCode,m text color code ,Field,setTextColor(String),,,,30,1,2,,private String mTextColorCode;,True,True,,False,
6,mTextColor,m text color ,Field,setTextColor(int),,,,37,1,2,,private int mTextColor = Color.WHITE;,True,True,,False,
7,mText,m text ,Field,setText(CharSequence),,,,27,1,2,,private CharSequence mText;,True,True,,False,
8,mBorderColorResource,m border color resource ,Field,setBorderColorResource(int) getBorderColor(Context),,,,33,1,2,,private int mBorderColorResource;,True,True,,False,
9,mBorderColorCode,m border color code ,Field,setBorderColor(String),,,,32,1,2,,private String mBorderColorCode;,True,True,,False,
10,mBorderColor,m border color ,Field,setBorderColor(int),,,,39,1,2,,private int mBorderColor = Color.WHITE;,True,True,,False,
11,mBorderWidth,m border width ,Field,setBorderWidth(int),,,,29,1,2,,private int mBorderWidth = 0;,True,True,,False,
12,mGravity,m gravity ,Field,setGravity(int),,,,49,1,2,,private int mGravity = Gravity.TOP | Gravity.END;,False,False,,False,
13,mHideOnSelect,m hide on select ,Field,setHideOnSelect(boolean),,,,30,1,2,,private boolean mHideOnSelect;,False,False,,False,
14,mTextViewRef,m text view ref ,Field,setTextView(TextView),,,,45,1,2,,private WeakReference<TextView> mTextViewRef;,False,False,,False,
15,mIsHidden,m is hidden ,Field,,,,,34,1,2,,private boolean mIsHidden = false;,False,False,,False,
16,mAnimationDuration,m animation duration ,Field,setAnimationDuration(int),,,,37,1,2,,private int mAnimationDuration = 200;,False,False,,False,
17,setBackgroundColorResource(int),set background color resource color resource param color resource resource for background color return this to allow builder pattern ,Method,,com.ashokvarma.bottomnavigation.sample.HomeActivity+refresh(),com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorResource,303,9,1,"/** 
 * @param colorResource resource for background color
 * @return this, to allow builder pattern
 */
","/**
     * @param colorResource resource for background color
     * @return this, to allow builder pattern
     */
    public BadgeItem setBackgroundColorResource(@ColorRes int colorResource) {
        this.mBackgroundColorResource = colorResource;
        refreshDrawable();
        return this;
    }",True,True,This method sets the background color resource for a badge item and returns the updated badge item to allow for the builder pattern.,True,The method `setBackgroundColorResource` is used to set the background color resource for a badge item. It returns the instance of the `BadgeItem` class to allow for method chaining and follows the builder pattern.
18,setBackgroundColor(String),set background color color code param color code color code for background color return this to allow builder pattern ,Method,,,com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorCode com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorCode,284,9,1,"/** 
 * @param colorCode color code for background color
 * @return this, to allow builder pattern
 */
","/**
     * @param colorCode color code for background color
     * @return this, to allow builder pattern
     */
    public BadgeItem setBackgroundColor(@Nullable String colorCode) {
        this.mBackgroundColorCode = colorCode;
        refreshDrawable();
        return this;
    }",True,True,This method sets the background color of a badge item and returns the updated object. It also refreshes the drawable of the badge item.,True,"The code defines a method called `setBackgroundColor` in a class called `BadgeItem`. This method takes a color code as a parameter and sets it as the background color for the badge item. It then refreshes the drawable and returns the instance of the `BadgeItem` class, allowing for method chaining using the builder pattern."
19,setBackgroundColor(int),set background color color param color background color return this to allow builder pattern ,Method,,,com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColor com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColor,240,9,1,"/** 
 * @param color background color
 * @return this, to allow builder pattern
 */
","/**
     * @param color background color
     * @return this, to allow builder pattern
     */
    public BadgeItem setBackgroundColor(int color) {
        this.mBackgroundColor = color;
        refreshDrawable();
        return this;
    }",True,True,This method sets the background color of a badge item and returns the updated object. It is likely part of a builder pattern implementation for creating and customizing badge items.,True,"The code defines a method called `setBackgroundColor` in a class called `BadgeItem`. This method takes an integer parameter representing a color and sets it as the background color of the badge item. It then refreshes the drawable and returns the updated badge item, allowing for method chaining using the builder pattern."
20,setTextColorResource(int),set text color resource color resource param color resource resource for text color return this to allow builder pattern ,Method,,,com.ashokvarma.bottomnavigation.BadgeItem+setTextColor() com.ashokvarma.bottomnavigation.BadgeItem+setTextColor(),com.ashokvarma.bottomnavigation.BadgeItem+mTextColorResource com.ashokvarma.bottomnavigation.BadgeItem+mTextColorResource,282,9,1,"/** 
 * @param colorResource resource for text color
 * @return this, to allow builder pattern
 */
","/**
     * @param colorResource resource for text color
     * @return this, to allow builder pattern
     */
    public BadgeItem setTextColorResource(@ColorRes int colorResource) {
        this.mTextColorResource = colorResource;
        setTextColor();
        return this;
    }",True,True,This method sets the resource for the text color of a badge item and returns the instance of the badge item to allow the builder pattern.,True,The `setTextColorResource` method is used to set the resource for the text color of a badge item. It returns the instance of the `BadgeItem` class to allow for method chaining in the builder pattern.
21,setTextColor(String),set text color color code param color code color code for text color return this to allow builder pattern ,Method,,,com.ashokvarma.bottomnavigation.BadgeItem+setTextColor() com.ashokvarma.bottomnavigation.BadgeItem+setTextColor(),com.ashokvarma.bottomnavigation.BadgeItem+mTextColorCode com.ashokvarma.bottomnavigation.BadgeItem+mTextColorCode,263,9,1,"/** 
 * @param colorCode color code for text color
 * @return this, to allow builder pattern
 */
","/**
     * @param colorCode color code for text color
     * @return this, to allow builder pattern
     */
    public BadgeItem setTextColor(@Nullable String colorCode) {
        this.mTextColorCode = colorCode;
        setTextColor();
        return this;
    }",True,True,This method sets the text color for a badge item and returns the updated badge item to allow for the builder pattern.,True,The given code is a method named `setTextColor` in a class called `BadgeItem`. It takes a color code as a parameter and sets it as the text color for the badge item. The method returns the instance of the `BadgeItem` class to support the builder pattern.
22,setTextColor(int),set text color color param color text color return this to allow builder pattern ,Method,,,com.ashokvarma.bottomnavigation.BadgeItem+setTextColor() com.ashokvarma.bottomnavigation.BadgeItem+setTextColor(),com.ashokvarma.bottomnavigation.BadgeItem+mTextColor com.ashokvarma.bottomnavigation.BadgeItem+mTextColor,219,9,1,"/** 
 * @param color text color
 * @return this, to allow builder pattern
 */
","/**
     * @param color text color
     * @return this, to allow builder pattern
     */
    public BadgeItem setTextColor(int color) {
        this.mTextColor = color;
        setTextColor();
        return this;
    }",True,True,This method sets the text color of a badge item and returns the updated object to allow for the builder pattern.,True,The code defines a method called `setTextColor` in a class called `BadgeItem`. This method takes an integer parameter `color` and sets the text color of the badge item to the specified color. It returns the instance of the `BadgeItem` class to allow method chaining using the builder pattern.
23,setText(CharSequence),set text text param text text to be set in badge this shouldn t be empty text return this to allow builder pattern ,Method,,com.ashokvarma.bottomnavigation.sample.HomeActivity+onTabSelected(int),com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid(),com.ashokvarma.bottomnavigation.BadgeItem+mText com.ashokvarma.bottomnavigation.BadgeItem+mText com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,443,14,1,"/** 
 * @param text text to be set in badge (this shouldn't be empty text)
 * @return this, to allow builder pattern
 */
","/**
     * @param text text to be set in badge (this shouldn't be empty text)
     * @return this, to allow builder pattern
     */
    public BadgeItem setText(@Nullable CharSequence text) {
        this.mText = text;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            if (!TextUtils.isEmpty(text)) {
                textView.setText(text);
            }
        }
        return this;
    }",True,True,This method sets the text in a badge item. It takes a non-empty text as input and returns the updated badge item.,True,This code defines a method called `setText` in a class called `BadgeItem`. The method takes a text parameter and sets it as the text in a badge. It also returns the instance of `BadgeItem` to allow for method chaining.
24,setBorderColorResource(int),set border color resource color resource param color resource resource for border color return this to allow builder pattern ,Method,,,com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorResource,291,9,1,"/** 
 * @param colorResource resource for border color
 * @return this, to allow builder pattern
 */
","/**
     * @param colorResource resource for border color
     * @return this, to allow builder pattern
     */
    public BadgeItem setBorderColorResource(@ColorRes int colorResource) {
        this.mBorderColorResource = colorResource;
        refreshDrawable();
        return this;
    }",True,True,"This method sets the border color resource for a badge item and returns the updated badge item, allowing for the builder pattern.",True,The `setBorderColorResource` method is used to set the border color of a badge item by taking a color resource as a parameter. It returns the instance of the `BadgeItem` class to allow for method chaining using the builder pattern. The method also refreshes the drawable to reflect the updated border color.
25,setBorderColor(String),set border color color code param color code color code for border color return this to allow builder pattern ,Method,,,com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorCode com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorCode,272,9,1,"/** 
 * @param colorCode color code for border color
 * @return this, to allow builder pattern
 */
","/**
     * @param colorCode color code for border color
     * @return this, to allow builder pattern
     */
    public BadgeItem setBorderColor(@Nullable String colorCode) {
        this.mBorderColorCode = colorCode;
        refreshDrawable();
        return this;
    }",True,True,This method sets the border color of a badge item and returns the updated badge item. It also refreshes the drawable of the badge item.,True,"The `setBorderColor` method is used to set the border color of a badge item. It takes a color code as a parameter and returns the instance of the badge item itself, allowing for method chaining. The method also refreshes the drawable to reflect the updated border color."
26,setBorderColor(int),set border color color param color border color return this to allow builder pattern ,Method,,,com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBorderColor com.ashokvarma.bottomnavigation.BadgeItem+mBorderColor,228,9,1,"/** 
 * @param color border color
 * @return this, to allow builder pattern
 */
","/**
     * @param color border color
     * @return this, to allow builder pattern
     */
    public BadgeItem setBorderColor(int color) {
        this.mBorderColor = color;
        refreshDrawable();
        return this;
    }",True,True,This method sets the border color of a badge item and returns the updated badge item. It is used in the builder pattern to allow method chaining.,True,"The `setBorderColor` method is a part of a class called `BadgeItem` and is used to set the border color of the badge. It takes an integer parameter representing the color and returns the instance of the `BadgeItem` class, allowing for method chaining. The method also calls a `refreshDrawable` method to update the badge's appearance."
27,setBorderWidth(int),set border width border width param border width border width in pixels return this to allow builder pattern ,Method,,com.ashokvarma.bottomnavigation.sample.HomeActivity+refresh(),com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBorderWidth com.ashokvarma.bottomnavigation.BadgeItem+mBorderWidth,256,9,1,"/** 
 * @param borderWidth border width in pixels
 * @return this, to allow builder pattern
 */
","/**
     * @param borderWidth border width in pixels
     * @return this, to allow builder pattern
     */
    public BadgeItem setBorderWidth(int borderWidth) {
        this.mBorderWidth = borderWidth;
        refreshDrawable();
        return this;
    }",True,True,This method sets the border width of a badge item and returns the updated object to allow for the builder pattern.,True,"The `setBorderWidth` method is a part of a class called `BadgeItem`. It takes an integer parameter `borderWidth` representing the width of the border in pixels. The method sets the `mBorderWidth` variable to the given value, refreshes the drawable, and returns the instance of `BadgeItem` to allow method chaining."
28,setGravity(int),set gravity gravity param gravity gravity of badge top left etc return this to allow builder pattern ,Method,,,com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid(),com.ashokvarma.bottomnavigation.BadgeItem+mGravity com.ashokvarma.bottomnavigation.BadgeItem+mGravity com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,523,14,1,"/** 
 * @param gravity gravity of badge (TOP|LEFT ..etc)
 * @return this, to allow builder pattern
 */
","/**
     * @param gravity gravity of badge (TOP|LEFT ..etc)
     * @return this, to allow builder pattern
     */
    public BadgeItem setGravity(int gravity) {
        this.mGravity = gravity;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) textView.getLayoutParams();
            layoutParams.gravity = gravity;
            textView.setLayoutParams(layoutParams);
        }
        return this;
    }",False,False,This method sets the gravity of a badge item and returns the updated badge item. It also updates the gravity of the associated TextView if it exists.,True,"This method sets the gravity of a badge item, which determines its position on the screen. It updates the gravity value and adjusts the layout parameters of the associated TextView accordingly. The method follows the builder pattern and returns the updated BadgeItem object."
29,setHideOnSelect(boolean),set hide on select hide on select param hide on select if true hides badge on tab selection return this to allow builder pattern ,Method,,,,com.ashokvarma.bottomnavigation.BadgeItem+mHideOnSelect com.ashokvarma.bottomnavigation.BadgeItem+mHideOnSelect,252,8,1,"/** 
 * @param hideOnSelect if true hides badge on tab selection
 * @return this, to allow builder pattern
 */
","/**
     * @param hideOnSelect if true hides badge on tab selection
     * @return this, to allow builder pattern
     */
    public BadgeItem setHideOnSelect(boolean hideOnSelect) {
        this.mHideOnSelect = hideOnSelect;
        return this;
    }",False,False,"This method sets the value of the ""hideOnSelect"" property for a BadgeItem object. If the value is true, the badge will be hidden when the tab is selected. It returns the updated object to support the builder pattern.",True,"The code defines a method called ""setHideOnSelect"" which takes a boolean parameter ""hideOnSelect"" and sets the value of a variable ""mHideOnSelect"" to it. The method returns the instance of the class it belongs to, allowing for method chaining."
30,setAnimationDuration(int),set animation duration animation duration param animation duration hide and show animation time return this to allow builder pattern ,Method,,,,com.ashokvarma.bottomnavigation.BadgeItem+mAnimationDuration com.ashokvarma.bottomnavigation.BadgeItem+mAnimationDuration,265,8,1,"/** 
 * @param animationDuration hide and show animation time
 * @return this, to allow builder pattern
 */
","/**
     * @param animationDuration hide and show animation time
     * @return this, to allow builder pattern
     */
    public BadgeItem setAnimationDuration(int animationDuration) {
        this.mAnimationDuration = animationDuration;
        return this;
    }",False,False,This method sets the animation duration for hiding and showing the badge. It returns the current instance of the BadgeItem to allow for the builder pattern.,True,The code defines a method called `setAnimationDuration` which takes an integer parameter `animationDuration` and sets it as the animation duration for a badge item. It returns the instance of the `BadgeItem` class to allow method chaining and follows the builder pattern.
31,setTextView(TextView),set text view m text view internal method used to update view when ever changes are made param m text view badge text view return this to allow builder pattern ,Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+setBadgeForTab(BadgeItem,BottomNavigationTab)",,com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,318,10,4,"/** 
 * Internal method used to update view when ever changes are made
 * @param mTextView badge textView
 * @return this, to allow builder pattern
 */
","/**
     * Internal method used to update view when ever changes are made
     *
     * @param mTextView badge textView
     * @return this, to allow builder pattern
     */
    protected BadgeItem setTextView(TextView mTextView) {
        this.mTextViewRef = new WeakReference<>(mTextView);
        return this;
    }",False,False,This method is used to set the badge textView and update the view whenever changes are made. It returns the BadgeItem object to allow the builder pattern.,True,The `setTextView` method is used internally to update the view whenever changes are made. It takes a `TextView` as a parameter and sets it as a weak reference in the `BadgeItem` object. The method returns the `BadgeItem` object to allow for the builder pattern.
32,getBackgroundColor(Context),get background color context param context to fetch color return background color ,Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+getBadgeDrawable(BadgeItem,Context)",,com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorCode com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorCode com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColor,456,13,4,"/** 
 * @param context to fetch color
 * @return background color
 */
","/**
     * @param context to fetch color
     * @return background color
     */
    protected int getBackgroundColor(Context context) {
        if (this.mBackgroundColorResource != 0) {
            return ContextCompat.getColor(context, mBackgroundColorResource);
        } else if (!TextUtils.isEmpty(mBackgroundColorCode)) {
            return Color.parseColor(mBackgroundColorCode);
        } else {
            return mBackgroundColor;
        }
    }",True,True,"This method returns the background color based on the provided context. It first checks if a background color resource is set, and if so, returns the color from the resource. If not, it checks if a background color code is set, and if so, returns the color parsed from the code. If neither a resource nor a code is set, it returns the default background color.",True,"This method returns the background color based on the provided context. It first checks if a background color resource or code is specified, and if so, it returns the corresponding color. If not, it returns the default background color."
33,getTextColor(Context),get text color context param context to fetch color return text color ,Method,setTextColor(),"com.ashokvarma.bottomnavigation.BottomNavigationBar+setBadgeForTab(BadgeItem,BottomNavigationTab)",,com.ashokvarma.bottomnavigation.BadgeItem+mTextColorResource com.ashokvarma.bottomnavigation.BadgeItem+mTextColorResource com.ashokvarma.bottomnavigation.BadgeItem+mTextColorResource com.ashokvarma.bottomnavigation.BadgeItem+mTextColorCode com.ashokvarma.bottomnavigation.BadgeItem+mTextColorCode com.ashokvarma.bottomnavigation.BadgeItem+mTextColor,414,13,4,"/** 
 * @param context to fetch color
 * @return text color
 */
","/**
     * @param context to fetch color
     * @return text color
     */
    protected int getTextColor(Context context) {
        if (this.mTextColorResource != 0) {
            return ContextCompat.getColor(context, mTextColorResource);
        } else if (!TextUtils.isEmpty(mTextColorCode)) {
            return Color.parseColor(mTextColorCode);
        } else {
            return mTextColor;
        }
    }",True,True,"This method returns the text color based on the provided context. It first checks if a text color resource is set, and if so, returns the color from the context. If not, it checks if a text color code is set, and if so, returns the parsed color. If neither is set, it returns the default text color.",True,"This code defines a method called ""getTextColor"" that takes a context as a parameter and returns the text color. It first checks if a text color resource or code is specified, and if so, it retrieves the color using the appropriate method. If no resource or code is specified, it returns the default text color."
34,getText(),get text return text that needs to be set in badge ,Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+setBadgeForTab(BadgeItem,BottomNavigationTab)",,com.ashokvarma.bottomnavigation.BadgeItem+mText,128,6,4,"/** 
 * @return text that needs to be set in badge
 */
","/**
     * @return text that needs to be set in badge
     */
    protected CharSequence getText() {
        return mText;
    }",True,True,"This method serves to retrieve the text that needs to be set in a badge. It returns a CharSequence, which represents the text that will be displayed.",True,"The code contains a protected method named ""getText()"" that returns a CharSequence object. This method is used to retrieve the text that needs to be set in a badge."
35,getBorderColor(Context),get border color context param context to fetch color return border color ,Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+getBadgeDrawable(BadgeItem,Context)",,com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorCode com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorCode com.ashokvarma.bottomnavigation.BadgeItem+mBorderColor,428,13,4,"/** 
 * @param context to fetch color
 * @return border color
 */
","/**
     * @param context to fetch color
     * @return border color
     */
    protected int getBorderColor(Context context) {
        if (this.mBorderColorResource != 0) {
            return ContextCompat.getColor(context, mBorderColorResource);
        } else if (!TextUtils.isEmpty(mBorderColorCode)) {
            return Color.parseColor(mBorderColorCode);
        } else {
            return mBorderColor;
        }
    }",True,True,"This method returns the border color based on the provided context. It first checks if a border color resource is set, and if so, returns the color from the resource. If not, it checks if a border color code is set, and if so, returns the parsed color from the code. If neither a resource nor a code is set, it returns the default border color.",True,"This method returns the border color based on the provided context. It first checks if a border color resource is set, and if so, it fetches the color from the context. If not, it checks if a border color code is provided and parses it to return the color. If neither is available, it returns the default border color."
36,getBorderWidth(),get border width return border width ,Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+getBadgeDrawable(BadgeItem,Context)",,com.ashokvarma.bottomnavigation.BadgeItem+mBorderWidth,111,6,4,"/** 
 * @return border width
 */
","/**
     * @return border width
     */
    protected int getBorderWidth() {
        return mBorderWidth;
    }",True,True,This method serves to retrieve and return the value of the border width.,True,"The code contains a protected method named ""getBorderWidth"" that returns the value of the variable ""mBorderWidth"". It is not specified what ""mBorderWidth"" represents, but this method provides a way to access its value."
37,getGravity(),get gravity return gravity of badge ,Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+setBadgeForTab(BadgeItem,BottomNavigationTab)",,com.ashokvarma.bottomnavigation.BadgeItem+mGravity,107,6,4,"/** 
 * @return gravity of badge
 */
","/**
     * @return gravity of badge
     */
    protected int getGravity() {
        return mGravity;
    }",False,False,This method serves to retrieve the gravity of a badge.,True,"The code snippet defines a protected method called ""getGravity()"" that returns the gravity value of a badge. The method is not accessible outside the class or its subclasses."
38,isHideOnSelect(),is hide on select return should hide on selection ,Method,,,,com.ashokvarma.bottomnavigation.BadgeItem+mHideOnSelect,130,6,4,"/** 
 * @return should hide on selection ?
 */
","/**
     * @return should hide on selection ?
     */
    protected boolean isHideOnSelect() {
        return mHideOnSelect;
    }",False,False,This method serves to determine whether the object should be hidden when it is selected.,True,"The code contains a protected method named ""isHideOnSelect"" that returns a boolean value indicating whether something should be hidden when selected. The method is used to determine if an item should be hidden based on a selection event."
39,getTextView(),get text view return reference to text view ,Method,,,,com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,138,6,4,"/** 
 * @return reference to text-view
 */
","/**
     * @return reference to text-view
     */
    protected WeakReference<TextView> getTextView() {
        return mTextViewRef;
    }",False,False,This method returns a weak reference to a TextView object.,True,The code contains a method called `getTextView()` which returns a weak reference to a TextView object. The method is protected and its purpose is to provide access to the TextView object.
40,refreshDrawable(),refresh drawable ,Method,setBackgroundColorResource(int) setBackgroundColor(String) setBackgroundColor(int) setBorderColorResource(int) setBorderColor(String) setBorderColor(int) setBorderWidth(int),,"com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BottomNavigationHelper+getBadgeDrawable(BadgeItem,Context) com.ashokvarma.bottomnavigation.BottomNavigationHelper+getBadgeDrawable(BadgeItem,Context)",com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,252,6,2,,"private void refreshDrawable() {
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            textView.setBackgroundDrawable(BottomNavigationHelper.getBadgeDrawable(this, textView.getContext()));
        }
    }",True,True,The function of this method is to refresh the drawable background of a TextView if the weak reference to the TextView is valid.,True,The `refreshDrawable()` method updates the background drawable of a TextView if the weak reference to it is valid. It uses the `BottomNavigationHelper.getBadgeDrawable()` method to retrieve the appropriate drawable based on the current context of the TextView.
41,setTextColor(),set text color ,Method,setTextColorResource(int) setTextColor(String) setTextColor(int),,com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+getTextColor(Context) com.ashokvarma.bottomnavigation.BadgeItem+getTextColor(Context),com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,207,6,2,,"private void setTextColor() {
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            textView.setTextColor(getTextColor(textView.getContext()));
        }
    }",True,True,This method sets the text color of a TextView if the weak reference to it is valid. The text color is obtained from the context of the TextView.,True,"The `setTextColor()` method sets the text color of a `TextView` if the weak reference to it is valid. It retrieves the `TextView` from the weak reference, and then calls `getTextColor()` to get the desired text color based on the `TextView`'s context."
42,isWeakReferenceValid(),is weak reference valid ,Method,setText(CharSequence) setGravity(int) refreshDrawable() setTextColor() show(boolean) hide(boolean),,,com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,113,3,2,,"private boolean isWeakReferenceValid() {
        return mTextViewRef != null && mTextViewRef.get() != null;
    }",False,False,This method checks if the weak reference to a TextView object is valid by verifying that the reference itself is not null and the referenced object is also not null. It returns a boolean value indicating the validity of the reference.,True,The function `isWeakReferenceValid()` checks if a weak reference to a TextView object is still valid by verifying that the reference itself is not null and the referenced object is not null. It returns a boolean value indicating the validity of the reference.
43,select(),select callback from bottom navigation tab when it is selected ,Method,,,com.ashokvarma.bottomnavigation.BadgeItem+hide(boolean) com.ashokvarma.bottomnavigation.BadgeItem+hide(boolean),com.ashokvarma.bottomnavigation.BadgeItem+mHideOnSelect,163,8,0,"/** 
 * callback from bottom navigation tab when it is selected
 */
","/**
     * callback from bottom navigation tab when it is selected
     */
    void select() {
        if (mHideOnSelect) {
            hide(true);
        }
    }",False,False,"The function of the method is to hide the bottom navigation tab when it is selected, if the ""mHideOnSelect"" variable is set to true.",True,"This code defines a method called ""select"" that is called when a bottom navigation tab is selected. If a certain condition is met (mHideOnSelect is true), the method calls another method called ""hide"" with a boolean parameter set to true."
44,unSelect(),un select callback from bottom navigation tab when it is un selected ,Method,,,com.ashokvarma.bottomnavigation.BadgeItem+show(boolean) com.ashokvarma.bottomnavigation.BadgeItem+show(boolean),com.ashokvarma.bottomnavigation.BadgeItem+mHideOnSelect,168,8,0,"/** 
 * callback from bottom navigation tab when it is un-selected
 */
","/**
     * callback from bottom navigation tab when it is un-selected
     */
    void unSelect() {
        if (mHideOnSelect) {
            show(true);
        }
    }",False,False,"The function of the method is to un-select the bottom navigation tab and show it if the ""mHideOnSelect"" variable is set to true.",True,"This code defines a method called ""unSelect"" which is a callback function triggered when a bottom navigation tab is un-selected. It checks if a certain condition is met (mHideOnSelect) and if true, it calls another method called ""show"" with a boolean parameter set to true."
45,toggle(),toggle return this to allow builder pattern ,Method,,com.ashokvarma.bottomnavigation.sample.HomeActivity+onClick(View),com.ashokvarma.bottomnavigation.BadgeItem+toggle(boolean) com.ashokvarma.bottomnavigation.BadgeItem+toggle(boolean),,124,6,1,"/** 
 * @return this, to allow builder pattern
 */
","/**
     * @return this, to allow builder pattern
     */
    public BadgeItem toggle() {
        return toggle(true);
    }",False,False,"The function of this method is to toggle the state of a BadgeItem object and return the updated object. It allows for the use of the builder pattern by returning ""this"".",True,"The given code is a method named ""toggle"" in a class called ""BadgeItem"". It returns an instance of the ""BadgeItem"" class and allows the use of the builder pattern. The method can be called with a boolean parameter, but if no parameter is provided, it defaults to ""true""."
46,toggle(boolean),toggle animate param animate whether to animate the change return this to allow builder pattern ,Method,toggle(),,com.ashokvarma.bottomnavigation.BadgeItem+show(boolean) com.ashokvarma.bottomnavigation.BadgeItem+show(boolean) com.ashokvarma.bottomnavigation.BadgeItem+hide(boolean) com.ashokvarma.bottomnavigation.BadgeItem+hide(boolean),com.ashokvarma.bottomnavigation.BadgeItem+mIsHidden,282,11,1,"/** 
 * @param animate whether to animate the change
 * @return this, to allow builder pattern
 */
","/**
     * @param animate whether to animate the change
     * @return this, to allow builder pattern
     */
    public BadgeItem toggle(boolean animate) {
        if (mIsHidden) {
            return show(animate);
        } else {
            return hide(animate);
        }
    }",False,False,"This method toggles the visibility of a badge item. If the item is currently hidden, it will be shown with an optional animation. If the item is currently shown, it will be hidden with an optional animation. The method returns the updated BadgeItem to allow for method chaining in the builder pattern.",True,"The `toggle` method is used to switch the visibility of a badge item. If the item is currently hidden, it will be shown with an optional animation. If the item is currently shown, it will be hidden with an optional animation. The method returns the updated `BadgeItem` object to allow for method chaining."
47,show(),show return this to allow builder pattern ,Method,,,com.ashokvarma.bottomnavigation.BadgeItem+show(boolean) com.ashokvarma.bottomnavigation.BadgeItem+show(boolean),,120,6,1,"/** 
 * @return this, to allow builder pattern
 */
","/**
     * @return this, to allow builder pattern
     */
    public BadgeItem show() {
        return show(true);
    }",False,False,"The method ""show"" returns the current object (this) to enable the builder pattern.",True,"The code snippet defines a method named ""show"" in a class called ""BadgeItem"". This method returns an instance of the ""BadgeItem"" class and allows for method chaining using the builder pattern."
48,show(boolean),show animate param animate whether to animate the change return this to allow builder pattern ,Method,unSelect() toggle(boolean) show(),,com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid(),com.ashokvarma.bottomnavigation.BadgeItem+mIsHidden com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef com.ashokvarma.bottomnavigation.BadgeItem+mAnimationDuration,971,26,1,"/** 
 * @param animate whether to animate the change
 * @return this, to allow builder pattern
 */
","/**
     * @param animate whether to animate the change
     * @return this, to allow builder pattern
     */
    public BadgeItem show(boolean animate) {
        mIsHidden = false;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            if (animate) {
                textView.setScaleX(0);
                textView.setScaleY(0);
                textView.setVisibility(View.VISIBLE);
                ViewPropertyAnimatorCompat animatorCompat = ViewCompat.animate(textView);
                animatorCompat.cancel();
                animatorCompat.setDuration(mAnimationDuration);
                animatorCompat.scaleX(1).scaleY(1);
                animatorCompat.setListener(null);
                animatorCompat.start();
            } else {
                textView.setScaleX(1);
                textView.setScaleY(1);
                textView.setVisibility(View.VISIBLE);
            }
        }
        return this;
    }",False,False,"The function of this method is to show a badge item. It takes a boolean parameter to determine whether to animate the change or not, and returns the current instance of the BadgeItem class to allow for the builder pattern.",True,"This code defines a method called ""show"" that displays a badge item. The method takes a boolean parameter to determine whether to animate the change or not. If animation is enabled, the badge item is scaled up and made visible using ViewPropertyAnimatorCompat, otherwise it is simply made visible."
49,hide(),hide return this to allow builder pattern ,Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+setBadgeForTab(BadgeItem,BottomNavigationTab)",com.ashokvarma.bottomnavigation.BadgeItem+hide(boolean) com.ashokvarma.bottomnavigation.BadgeItem+hide(boolean),,120,6,1,"/** 
 * @return this, to allow builder pattern
 */
","/**
     * @return this, to allow builder pattern
     */
    public BadgeItem hide() {
        return hide(true);
    }",False,False,"The function of this method is to hide the BadgeItem and return itself, allowing the use of the builder pattern.",True,"The code snippet represents a method named ""hide"" in a class called ""BadgeItem"". This method returns an instance of the ""BadgeItem"" class and allows for method chaining, following the builder pattern. It takes no arguments and sets a boolean value to true, indicating that the badge should be hidden."
50,hide(boolean),hide animate param animate whether to animate the change return this to allow builder pattern ,Method,select() toggle(boolean) hide(),,com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() +onAnimationStart(View),com.ashokvarma.bottomnavigation.BadgeItem+mIsHidden com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef com.ashokvarma.bottomnavigation.BadgeItem+mAnimationDuration,1298,36,1,"/** 
 * @param animate whether to animate the change
 * @return this, to allow builder pattern
 */
","/**
     * @param animate whether to animate the change
     * @return this, to allow builder pattern
     */
    public BadgeItem hide(boolean animate) {
        mIsHidden = true;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            if (animate) {
                ViewPropertyAnimatorCompat animatorCompat = ViewCompat.animate(textView);
                animatorCompat.cancel();
                animatorCompat.setDuration(mAnimationDuration);
                animatorCompat.scaleX(0).scaleY(0);
                animatorCompat.setListener(new ViewPropertyAnimatorListener() {
                    @Override
                    public void onAnimationStart(View view) {
                        // Empty body
                    }

                    @Override
                    public void onAnimationEnd(View view) {
                        view.setVisibility(View.GONE);
                    }

                    @Override
                    public void onAnimationCancel(View view) {
                        view.setVisibility(View.GONE);
                    }
                });
                animatorCompat.start();
            } else {
                textView.setVisibility(View.GONE);
            }
        }
        return this;
    }",False,False,"The function of this method is to hide a badge item. It takes a boolean parameter ""animate"" to determine whether to animate the change. It sets the visibility of the badge item's associated TextView to GONE, either with or without animation, depending on the value of the ""animate"" parameter. It returns the current instance of the BadgeItem class to allow for method chaining using the builder pattern.",True,"This code defines a method called `hide` which hides a badge item. It takes a boolean parameter `animate` to determine whether to animate the change or not. If `animate` is true, it scales down the badge item with an animation before setting its visibility to `GONE`, otherwise it directly sets the visibility to `GONE`."
51,isHidden(),is hidden return if the badge is hidden ,Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+setBadgeForTab(BadgeItem,BottomNavigationTab)",,com.ashokvarma.bottomnavigation.BadgeItem+mIsHidden,113,6,1,"/** 
 * @return if the badge is hidden
 */
","/**
     * @return if the badge is hidden
     */
    public boolean isHidden() {
        return mIsHidden;
    }",False,False,This method serves to check if the badge is hidden.,True,"This code defines a method named ""isHidden()"" that returns a boolean value indicating whether a badge is hidden or not. The method does not take any parameters and simply returns the value of the ""mIsHidden"" variable."
