index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,mBackgroundColorResource,Field,setBackgroundColorResource(int) getBackgroundColor(Context),,,,37,1,2,,private int mBackgroundColorResource;,True
2,mBackgroundColorCode,Field,setBackgroundColor(String),,,,36,1,2,,private String mBackgroundColorCode;,True
3,mBackgroundColor,Field,setBackgroundColor(int),,,,41,1,2,,private int mBackgroundColor = Color.RED;,True
4,mTextColorResource,Field,setTextColorResource(int) getTextColor(Context),,,,31,1,2,,private int mTextColorResource;,True
5,mTextColorCode,Field,setTextColor(String),,,,30,1,2,,private String mTextColorCode;,True
6,mTextColor,Field,setTextColor(int),,,,37,1,2,,private int mTextColor = Color.WHITE;,True
7,mText,Field,setText(CharSequence),,,,27,1,2,,private CharSequence mText;,True
8,mBorderColorResource,Field,setBorderColorResource(int) getBorderColor(Context),,,,33,1,2,,private int mBorderColorResource;,True
9,mBorderColorCode,Field,setBorderColor(String),,,,32,1,2,,private String mBorderColorCode;,True
10,mBorderColor,Field,setBorderColor(int),,,,39,1,2,,private int mBorderColor = Color.WHITE;,True
11,mBorderWidth,Field,setBorderWidth(int),,,,29,1,2,,private int mBorderWidth = 0;,True
12,mGravity,Field,setGravity(int),,,,49,1,2,,private int mGravity = Gravity.TOP | Gravity.END;,False
13,mHideOnSelect,Field,setHideOnSelect(boolean),,,,30,1,2,,private boolean mHideOnSelect;,False
14,mTextViewRef,Field,setTextView(TextView),,,,45,1,2,,private WeakReference<TextView> mTextViewRef;,False
15,mIsHidden,Field,,,,,34,1,2,,private boolean mIsHidden = false;,False
16,mAnimationDuration,Field,setAnimationDuration(int),,,,37,1,2,,private int mAnimationDuration = 200;,False
17,setBackgroundColorResource(int),Method,,com.ashokvarma.bottomnavigation.sample.HomeActivity+refresh(),com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorResource,303,9,1,"/** 
 * @param colorResource resource for background color
 * @return this, to allow builder pattern
 */
","/**
     * @param colorResource resource for background color
     * @return this, to allow builder pattern
     */
    public BadgeItem setBackgroundColorResource(@ColorRes int colorResource) {
        this.mBackgroundColorResource = colorResource;
        refreshDrawable();
        return this;
    }",True
18,setBackgroundColor(String),Method,,,com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorCode com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorCode,284,9,1,"/** 
 * @param colorCode color code for background color
 * @return this, to allow builder pattern
 */
","/**
     * @param colorCode color code for background color
     * @return this, to allow builder pattern
     */
    public BadgeItem setBackgroundColor(@Nullable String colorCode) {
        this.mBackgroundColorCode = colorCode;
        refreshDrawable();
        return this;
    }",True
19,setBackgroundColor(int),Method,,,com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColor com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColor,240,9,1,"/** 
 * @param color background color
 * @return this, to allow builder pattern
 */
","/**
     * @param color background color
     * @return this, to allow builder pattern
     */
    public BadgeItem setBackgroundColor(int color) {
        this.mBackgroundColor = color;
        refreshDrawable();
        return this;
    }",True
20,setTextColorResource(int),Method,,,com.ashokvarma.bottomnavigation.BadgeItem+setTextColor() com.ashokvarma.bottomnavigation.BadgeItem+setTextColor(),com.ashokvarma.bottomnavigation.BadgeItem+mTextColorResource com.ashokvarma.bottomnavigation.BadgeItem+mTextColorResource,282,9,1,"/** 
 * @param colorResource resource for text color
 * @return this, to allow builder pattern
 */
","/**
     * @param colorResource resource for text color
     * @return this, to allow builder pattern
     */
    public BadgeItem setTextColorResource(@ColorRes int colorResource) {
        this.mTextColorResource = colorResource;
        setTextColor();
        return this;
    }",True
21,setTextColor(String),Method,,,com.ashokvarma.bottomnavigation.BadgeItem+setTextColor() com.ashokvarma.bottomnavigation.BadgeItem+setTextColor(),com.ashokvarma.bottomnavigation.BadgeItem+mTextColorCode com.ashokvarma.bottomnavigation.BadgeItem+mTextColorCode,263,9,1,"/** 
 * @param colorCode color code for text color
 * @return this, to allow builder pattern
 */
","/**
     * @param colorCode color code for text color
     * @return this, to allow builder pattern
     */
    public BadgeItem setTextColor(@Nullable String colorCode) {
        this.mTextColorCode = colorCode;
        setTextColor();
        return this;
    }",True
22,setTextColor(int),Method,,,com.ashokvarma.bottomnavigation.BadgeItem+setTextColor() com.ashokvarma.bottomnavigation.BadgeItem+setTextColor(),com.ashokvarma.bottomnavigation.BadgeItem+mTextColor com.ashokvarma.bottomnavigation.BadgeItem+mTextColor,219,9,1,"/** 
 * @param color text color
 * @return this, to allow builder pattern
 */
","/**
     * @param color text color
     * @return this, to allow builder pattern
     */
    public BadgeItem setTextColor(int color) {
        this.mTextColor = color;
        setTextColor();
        return this;
    }",True
23,setText(CharSequence),Method,,com.ashokvarma.bottomnavigation.sample.HomeActivity+onTabSelected(int),com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid(),com.ashokvarma.bottomnavigation.BadgeItem+mText com.ashokvarma.bottomnavigation.BadgeItem+mText com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,443,14,1,"/** 
 * @param text text to be set in badge (this shouldn't be empty text)
 * @return this, to allow builder pattern
 */
","/**
     * @param text text to be set in badge (this shouldn't be empty text)
     * @return this, to allow builder pattern
     */
    public BadgeItem setText(@Nullable CharSequence text) {
        this.mText = text;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            if (!TextUtils.isEmpty(text)) {
                textView.setText(text);
            }
        }
        return this;
    }",True
24,setBorderColorResource(int),Method,,,com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorResource,291,9,1,"/** 
 * @param colorResource resource for border color
 * @return this, to allow builder pattern
 */
","/**
     * @param colorResource resource for border color
     * @return this, to allow builder pattern
     */
    public BadgeItem setBorderColorResource(@ColorRes int colorResource) {
        this.mBorderColorResource = colorResource;
        refreshDrawable();
        return this;
    }",True
25,setBorderColor(String),Method,,,com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorCode com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorCode,272,9,1,"/** 
 * @param colorCode color code for border color
 * @return this, to allow builder pattern
 */
","/**
     * @param colorCode color code for border color
     * @return this, to allow builder pattern
     */
    public BadgeItem setBorderColor(@Nullable String colorCode) {
        this.mBorderColorCode = colorCode;
        refreshDrawable();
        return this;
    }",True
26,setBorderColor(int),Method,,,com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBorderColor com.ashokvarma.bottomnavigation.BadgeItem+mBorderColor,228,9,1,"/** 
 * @param color border color
 * @return this, to allow builder pattern
 */
","/**
     * @param color border color
     * @return this, to allow builder pattern
     */
    public BadgeItem setBorderColor(int color) {
        this.mBorderColor = color;
        refreshDrawable();
        return this;
    }",True
27,setBorderWidth(int),Method,,com.ashokvarma.bottomnavigation.sample.HomeActivity+refresh(),com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable() com.ashokvarma.bottomnavigation.BadgeItem+refreshDrawable(),com.ashokvarma.bottomnavigation.BadgeItem+mBorderWidth com.ashokvarma.bottomnavigation.BadgeItem+mBorderWidth,256,9,1,"/** 
 * @param borderWidth border width in pixels
 * @return this, to allow builder pattern
 */
","/**
     * @param borderWidth border width in pixels
     * @return this, to allow builder pattern
     */
    public BadgeItem setBorderWidth(int borderWidth) {
        this.mBorderWidth = borderWidth;
        refreshDrawable();
        return this;
    }",True
28,setGravity(int),Method,,,com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid(),com.ashokvarma.bottomnavigation.BadgeItem+mGravity com.ashokvarma.bottomnavigation.BadgeItem+mGravity com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,523,14,1,"/** 
 * @param gravity gravity of badge (TOP|LEFT ..etc)
 * @return this, to allow builder pattern
 */
","/**
     * @param gravity gravity of badge (TOP|LEFT ..etc)
     * @return this, to allow builder pattern
     */
    public BadgeItem setGravity(int gravity) {
        this.mGravity = gravity;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) textView.getLayoutParams();
            layoutParams.gravity = gravity;
            textView.setLayoutParams(layoutParams);
        }
        return this;
    }",False
29,setHideOnSelect(boolean),Method,,,,com.ashokvarma.bottomnavigation.BadgeItem+mHideOnSelect com.ashokvarma.bottomnavigation.BadgeItem+mHideOnSelect,252,8,1,"/** 
 * @param hideOnSelect if true hides badge on tab selection
 * @return this, to allow builder pattern
 */
","/**
     * @param hideOnSelect if true hides badge on tab selection
     * @return this, to allow builder pattern
     */
    public BadgeItem setHideOnSelect(boolean hideOnSelect) {
        this.mHideOnSelect = hideOnSelect;
        return this;
    }",False
30,setAnimationDuration(int),Method,,,,com.ashokvarma.bottomnavigation.BadgeItem+mAnimationDuration com.ashokvarma.bottomnavigation.BadgeItem+mAnimationDuration,265,8,1,"/** 
 * @param animationDuration hide and show animation time
 * @return this, to allow builder pattern
 */
","/**
     * @param animationDuration hide and show animation time
     * @return this, to allow builder pattern
     */
    public BadgeItem setAnimationDuration(int animationDuration) {
        this.mAnimationDuration = animationDuration;
        return this;
    }",False
31,setTextView(TextView),Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+setBadgeForTab(BadgeItem,BottomNavigationTab)",,com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,318,10,4,"/** 
 * Internal method used to update view when ever changes are made
 * @param mTextView badge textView
 * @return this, to allow builder pattern
 */
","/**
     * Internal method used to update view when ever changes are made
     *
     * @param mTextView badge textView
     * @return this, to allow builder pattern
     */
    protected BadgeItem setTextView(TextView mTextView) {
        this.mTextViewRef = new WeakReference<>(mTextView);
        return this;
    }",False
32,getBackgroundColor(Context),Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+getBadgeDrawable(BadgeItem,Context)",,com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorCode com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColorCode com.ashokvarma.bottomnavigation.BadgeItem+mBackgroundColor,456,13,4,"/** 
 * @param context to fetch color
 * @return background color
 */
","/**
     * @param context to fetch color
     * @return background color
     */
    protected int getBackgroundColor(Context context) {
        if (this.mBackgroundColorResource != 0) {
            return ContextCompat.getColor(context, mBackgroundColorResource);
        } else if (!TextUtils.isEmpty(mBackgroundColorCode)) {
            return Color.parseColor(mBackgroundColorCode);
        } else {
            return mBackgroundColor;
        }
    }",True
33,getTextColor(Context),Method,setTextColor(),"com.ashokvarma.bottomnavigation.BottomNavigationBar+setBadgeForTab(BadgeItem,BottomNavigationTab)",,com.ashokvarma.bottomnavigation.BadgeItem+mTextColorResource com.ashokvarma.bottomnavigation.BadgeItem+mTextColorResource com.ashokvarma.bottomnavigation.BadgeItem+mTextColorResource com.ashokvarma.bottomnavigation.BadgeItem+mTextColorCode com.ashokvarma.bottomnavigation.BadgeItem+mTextColorCode com.ashokvarma.bottomnavigation.BadgeItem+mTextColor,414,13,4,"/** 
 * @param context to fetch color
 * @return text color
 */
","/**
     * @param context to fetch color
     * @return text color
     */
    protected int getTextColor(Context context) {
        if (this.mTextColorResource != 0) {
            return ContextCompat.getColor(context, mTextColorResource);
        } else if (!TextUtils.isEmpty(mTextColorCode)) {
            return Color.parseColor(mTextColorCode);
        } else {
            return mTextColor;
        }
    }",True
34,getText(),Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+setBadgeForTab(BadgeItem,BottomNavigationTab)",,com.ashokvarma.bottomnavigation.BadgeItem+mText,128,6,4,"/** 
 * @return text that needs to be set in badge
 */
","/**
     * @return text that needs to be set in badge
     */
    protected CharSequence getText() {
        return mText;
    }",True
35,getBorderColor(Context),Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+getBadgeDrawable(BadgeItem,Context)",,com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorResource com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorCode com.ashokvarma.bottomnavigation.BadgeItem+mBorderColorCode com.ashokvarma.bottomnavigation.BadgeItem+mBorderColor,428,13,4,"/** 
 * @param context to fetch color
 * @return border color
 */
","/**
     * @param context to fetch color
     * @return border color
     */
    protected int getBorderColor(Context context) {
        if (this.mBorderColorResource != 0) {
            return ContextCompat.getColor(context, mBorderColorResource);
        } else if (!TextUtils.isEmpty(mBorderColorCode)) {
            return Color.parseColor(mBorderColorCode);
        } else {
            return mBorderColor;
        }
    }",True
36,getBorderWidth(),Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+getBadgeDrawable(BadgeItem,Context)",,com.ashokvarma.bottomnavigation.BadgeItem+mBorderWidth,111,6,4,"/** 
 * @return border width
 */
","/**
     * @return border width
     */
    protected int getBorderWidth() {
        return mBorderWidth;
    }",True
37,getGravity(),Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+setBadgeForTab(BadgeItem,BottomNavigationTab)",,com.ashokvarma.bottomnavigation.BadgeItem+mGravity,107,6,4,"/** 
 * @return gravity of badge
 */
","/**
     * @return gravity of badge
     */
    protected int getGravity() {
        return mGravity;
    }",False
38,isHideOnSelect(),Method,,,,com.ashokvarma.bottomnavigation.BadgeItem+mHideOnSelect,130,6,4,"/** 
 * @return should hide on selection ?
 */
","/**
     * @return should hide on selection ?
     */
    protected boolean isHideOnSelect() {
        return mHideOnSelect;
    }",False
39,getTextView(),Method,,,,com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,138,6,4,"/** 
 * @return reference to text-view
 */
","/**
     * @return reference to text-view
     */
    protected WeakReference<TextView> getTextView() {
        return mTextViewRef;
    }",False
40,refreshDrawable(),Method,setBackgroundColorResource(int) setBackgroundColor(String) setBackgroundColor(int) setBorderColorResource(int) setBorderColor(String) setBorderColor(int) setBorderWidth(int),,"com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BottomNavigationHelper+getBadgeDrawable(BadgeItem,Context) com.ashokvarma.bottomnavigation.BottomNavigationHelper+getBadgeDrawable(BadgeItem,Context)",com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,252,6,2,,"private void refreshDrawable() {
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            textView.setBackgroundDrawable(BottomNavigationHelper.getBadgeDrawable(this, textView.getContext()));
        }
    }",True
41,setTextColor(),Method,setTextColorResource(int) setTextColor(String) setTextColor(int),,com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+getTextColor(Context) com.ashokvarma.bottomnavigation.BadgeItem+getTextColor(Context),com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,207,6,2,,"private void setTextColor() {
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            textView.setTextColor(getTextColor(textView.getContext()));
        }
    }",True
42,isWeakReferenceValid(),Method,setText(CharSequence) setGravity(int) refreshDrawable() setTextColor() show(boolean) hide(boolean),,,com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef,113,3,2,,"private boolean isWeakReferenceValid() {
        return mTextViewRef != null && mTextViewRef.get() != null;
    }",False
43,select(),Method,,,com.ashokvarma.bottomnavigation.BadgeItem+hide(boolean) com.ashokvarma.bottomnavigation.BadgeItem+hide(boolean),com.ashokvarma.bottomnavigation.BadgeItem+mHideOnSelect,163,8,0,"/** 
 * callback from bottom navigation tab when it is selected
 */
","/**
     * callback from bottom navigation tab when it is selected
     */
    void select() {
        if (mHideOnSelect) {
            hide(true);
        }
    }",False
44,unSelect(),Method,,,com.ashokvarma.bottomnavigation.BadgeItem+show(boolean) com.ashokvarma.bottomnavigation.BadgeItem+show(boolean),com.ashokvarma.bottomnavigation.BadgeItem+mHideOnSelect,168,8,0,"/** 
 * callback from bottom navigation tab when it is un-selected
 */
","/**
     * callback from bottom navigation tab when it is un-selected
     */
    void unSelect() {
        if (mHideOnSelect) {
            show(true);
        }
    }",False
45,toggle(),Method,,com.ashokvarma.bottomnavigation.sample.HomeActivity+onClick(View),com.ashokvarma.bottomnavigation.BadgeItem+toggle(boolean) com.ashokvarma.bottomnavigation.BadgeItem+toggle(boolean),,124,6,1,"/** 
 * @return this, to allow builder pattern
 */
","/**
     * @return this, to allow builder pattern
     */
    public BadgeItem toggle() {
        return toggle(true);
    }",False
46,toggle(boolean),Method,toggle(),,com.ashokvarma.bottomnavigation.BadgeItem+show(boolean) com.ashokvarma.bottomnavigation.BadgeItem+show(boolean) com.ashokvarma.bottomnavigation.BadgeItem+hide(boolean) com.ashokvarma.bottomnavigation.BadgeItem+hide(boolean),com.ashokvarma.bottomnavigation.BadgeItem+mIsHidden,282,11,1,"/** 
 * @param animate whether to animate the change
 * @return this, to allow builder pattern
 */
","/**
     * @param animate whether to animate the change
     * @return this, to allow builder pattern
     */
    public BadgeItem toggle(boolean animate) {
        if (mIsHidden) {
            return show(animate);
        } else {
            return hide(animate);
        }
    }",False
47,show(),Method,,,com.ashokvarma.bottomnavigation.BadgeItem+show(boolean) com.ashokvarma.bottomnavigation.BadgeItem+show(boolean),,120,6,1,"/** 
 * @return this, to allow builder pattern
 */
","/**
     * @return this, to allow builder pattern
     */
    public BadgeItem show() {
        return show(true);
    }",False
48,show(boolean),Method,unSelect() toggle(boolean) show(),,com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid(),com.ashokvarma.bottomnavigation.BadgeItem+mIsHidden com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef com.ashokvarma.bottomnavigation.BadgeItem+mAnimationDuration,971,26,1,"/** 
 * @param animate whether to animate the change
 * @return this, to allow builder pattern
 */
","/**
     * @param animate whether to animate the change
     * @return this, to allow builder pattern
     */
    public BadgeItem show(boolean animate) {
        mIsHidden = false;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            if (animate) {
                textView.setScaleX(0);
                textView.setScaleY(0);
                textView.setVisibility(View.VISIBLE);
                ViewPropertyAnimatorCompat animatorCompat = ViewCompat.animate(textView);
                animatorCompat.cancel();
                animatorCompat.setDuration(mAnimationDuration);
                animatorCompat.scaleX(1).scaleY(1);
                animatorCompat.setListener(null);
                animatorCompat.start();
            } else {
                textView.setScaleX(1);
                textView.setScaleY(1);
                textView.setVisibility(View.VISIBLE);
            }
        }
        return this;
    }",False
49,hide(),Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+setBadgeForTab(BadgeItem,BottomNavigationTab)",com.ashokvarma.bottomnavigation.BadgeItem+hide(boolean) com.ashokvarma.bottomnavigation.BadgeItem+hide(boolean),,120,6,1,"/** 
 * @return this, to allow builder pattern
 */
","/**
     * @return this, to allow builder pattern
     */
    public BadgeItem hide() {
        return hide(true);
    }",False
50,hide(boolean),Method,select() toggle(boolean) hide(),,com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() com.ashokvarma.bottomnavigation.BadgeItem+isWeakReferenceValid() +onAnimationStart(View),com.ashokvarma.bottomnavigation.BadgeItem+mIsHidden com.ashokvarma.bottomnavigation.BadgeItem+mTextViewRef com.ashokvarma.bottomnavigation.BadgeItem+mAnimationDuration,1298,36,1,"/** 
 * @param animate whether to animate the change
 * @return this, to allow builder pattern
 */
","/**
     * @param animate whether to animate the change
     * @return this, to allow builder pattern
     */
    public BadgeItem hide(boolean animate) {
        mIsHidden = true;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            if (animate) {
                ViewPropertyAnimatorCompat animatorCompat = ViewCompat.animate(textView);
                animatorCompat.cancel();
                animatorCompat.setDuration(mAnimationDuration);
                animatorCompat.scaleX(0).scaleY(0);
                animatorCompat.setListener(new ViewPropertyAnimatorListener() {
                    @Override
                    public void onAnimationStart(View view) {
                        // Empty body
                    }

                    @Override
                    public void onAnimationEnd(View view) {
                        view.setVisibility(View.GONE);
                    }

                    @Override
                    public void onAnimationCancel(View view) {
                        view.setVisibility(View.GONE);
                    }
                });
                animatorCompat.start();
            } else {
                textView.setVisibility(View.GONE);
            }
        }
        return this;
    }",False
51,isHidden(),Method,,"com.ashokvarma.bottomnavigation.BottomNavigationBar+setBadgeForTab(BadgeItem,BottomNavigationTab)",,com.ashokvarma.bottomnavigation.BadgeItem+mIsHidden,113,6,1,"/** 
 * @return if the badge is hidden
 */
","/**
     * @return if the badge is hidden
     */
    public boolean isHidden() {
        return mIsHidden;
    }",False
