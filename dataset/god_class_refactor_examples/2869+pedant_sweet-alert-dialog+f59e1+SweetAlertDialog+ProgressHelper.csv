index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,mDialogView,m dialog view ,Field,,,,,25,1,2,,private View mDialogView;,False,False,,False,
2,mModalInAnim,m modal in anim ,Field,,,,,34,1,2,,private AnimationSet mModalInAnim;,False,False,,False,
3,mModalOutAnim,m modal out anim ,Field,,,,,35,1,2,,private AnimationSet mModalOutAnim;,False,False,,False,
4,mOverlayOutAnim,m overlay out anim ,Field,,,,,34,1,2,,private Animation mOverlayOutAnim;,False,False,,False,
5,mErrorInAnim,m error in anim ,Field,,,,,31,1,2,,private Animation mErrorInAnim;,False,False,,False,
6,mErrorXInAnim,m error x in anim ,Field,,,,,35,1,2,,private AnimationSet mErrorXInAnim;,False,False,,False,
7,mSuccessLayoutAnimSet,m success layout anim set ,Field,,,,,43,1,2,,private AnimationSet mSuccessLayoutAnimSet;,False,False,,False,
8,mSuccessBowAnim,m success bow anim ,Field,,,,,34,1,2,,private Animation mSuccessBowAnim;,False,False,,False,
9,mTitleTextView,m title text view ,Field,,,,,32,1,2,,private TextView mTitleTextView;,False,False,,False,
10,mContentTextView,m content text view ,Field,,,,,34,1,2,,private TextView mContentTextView;,False,False,,False,
11,mTitleText,m title text ,Field,,,,,26,1,2,,private String mTitleText;,False,False,,False,
12,mContentText,m content text ,Field,,,,,28,1,2,,private String mContentText;,False,False,,False,
13,mShowCancel,m show cancel ,Field,,,,,28,1,2,,private boolean mShowCancel;,False,False,,False,
14,mCancelText,m cancel text ,Field,,,,,27,1,2,,private String mCancelText;,False,False,,False,
15,mConfirmText,m confirm text ,Field,,,,,28,1,2,,private String mConfirmText;,False,False,,False,
16,mAlertType,m alert type ,Field,,,,,23,1,2,,private int mAlertType;,False,False,,False,
17,mErrorFrame,m error frame ,Field,,,,,32,1,2,,private FrameLayout mErrorFrame;,False,False,,False,
18,mSuccessFrame,m success frame ,Field,,,,,34,1,2,,private FrameLayout mSuccessFrame;,False,False,,False,
19,mProgressFrame,m progress frame ,Field,,,,,36,1,2,,private LinearLayout mProgressFrame;,False,False,,False,
20,mSuccessTick,m success tick ,Field,,,,,37,1,2,,private SuccessTickView mSuccessTick;,False,False,,False,
21,mErrorX,m error x ,Field,,,,,26,1,2,,private ImageView mErrorX;,False,False,,False,
22,mSuccessLeftMask,m success left mask ,Field,,,,,30,1,2,,private View mSuccessLeftMask;,False,False,,False,
23,mSuccessRightMask,m success right mask ,Field,,,,,31,1,2,,private View mSuccessRightMask;,False,False,,False,
24,mCustomImgDrawable,m custom img drawable ,Field,,,,,36,1,2,,private Drawable mCustomImgDrawable;,False,False,,False,
25,mCustomImage,m custom image ,Field,,,,,31,1,2,,private ImageView mCustomImage;,False,False,,False,
26,mConfirmButton,m confirm button ,Field,,,,,30,1,2,,private Button mConfirmButton;,False,False,,False,
27,mCancelButton,m cancel button ,Field,,,,,29,1,2,,private Button mCancelButton;,False,False,,False,
28,progressWheel,progress wheel ,Field,,,,,36,1,2,,private ProgressWheel progressWheel;,False,False,,False,
29,mWarningFrame,m warning frame ,Field,,,,,34,1,2,,private FrameLayout mWarningFrame;,False,False,,False,
30,mCancelClickListener,m cancel click listener ,Field,,,,,50,1,2,,private OnSweetClickListener mCancelClickListener;,False,False,,False,
31,mConfirmClickListener,m confirm click listener ,Field,,,,,51,1,2,,private OnSweetClickListener mConfirmClickListener;,False,False,,False,
32,mCloseFromCancel,m close from cancel ,Field,,,,,33,1,2,,private boolean mCloseFromCancel;,False,False,,False,
33,mProgressMessageColor,m progress message color ,Field,,,,,34,1,2,,private int mProgressMessageColor;,False,False,,False,
34,mProgressMessage,m progress message ,Field,,,,,32,1,2,,private String mProgressMessage;,False,False,,False,
35,mProgressRimWidth,m progress rim width ,Field,,,,,30,1,2,,private int mProgressRimWidth;,False,False,,False,
36,mProgressRimColor,m progress rim color ,Field,,,,,30,1,2,,private int mProgressRimColor;,False,False,,False,
37,mProgressSpin,m progress spin ,Field,,,,,28,1,2,,private float mProgressSpin;,False,False,,False,
38,mPogressWidth,m pogress width ,Field,,,,,26,1,2,,private int mPogressWidth;,False,False,,False,
39,mProgressColor,m progress color ,Field,,,,,27,1,2,,private int mProgressColor;,False,False,,False,
40,mProgressInstantProgress,m progress instant progress ,Field,,,,,39,1,2,,private float mProgressInstantProgress;,False,False,,False,
41,mProgress,m progress ,Field,,,,,24,1,2,,private float mProgress;,False,False,,False,
42,mProgressCircleRadius,m progress circle radius ,Field,,,,,34,1,2,,private int mProgressCircleRadius;,False,False,,False,
43,toSpin,to spin ,Field,,,,,23,1,2,,private boolean toSpin;,False,False,,False,
44,NORMAL_TYPE,normal type ,Field,,,,,40,1,25,,public static final int NORMAL_TYPE = 0;,False,False,,False,
45,ERROR_TYPE,error type ,Field,,,,,39,1,25,,public static final int ERROR_TYPE = 1;,False,False,,False,
46,SUCCESS_TYPE,success type ,Field,,,,,41,1,25,,public static final int SUCCESS_TYPE = 2;,False,False,,False,
47,WARNING_TYPE,warning type ,Field,,,,,41,1,25,,public static final int WARNING_TYPE = 3;,False,False,,False,
48,CUSTOM_IMAGE_TYPE,custom image type ,Field,,,,,46,1,25,,public static final int CUSTOM_IMAGE_TYPE = 4;,False,False,,False,
49,PROGRESS_TYPE,progress type ,Field,,,,,42,1,25,,public static final int PROGRESS_TYPE = 5;,False,False,,False,
50,OnSweetClickListener,on sweet click listener ,MemberClass,,,cn.pedant.SweetAlert.SweetAlertDialog.OnSweetClickListener+onClick(SweetAlertDialog),,117,3,9,,"public static interface OnSweetClickListener {
        public void onClick (SweetAlertDialog sweetAlertDialog);
    }",False,False,,False,
51,SweetAlertDialog(Context),sweet alert dialog context ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+NORMAL_TYPE,84,3,1,,"public SweetAlertDialog(Context context) {
        this(context, NORMAL_TYPE);
    }",False,False,The function of this method is to create a new instance of the SweetAlertDialog class with the specified context and a default type of NORMAL_TYPE.,True,The code defines a constructor method for the SweetAlertDialog class in Java. It takes a Context object as a parameter and initializes the SweetAlertDialog object with a default type of NORMAL_TYPE.
52,"SweetAlertDialog(Context,int)",sweet alert dialog context alert type ,Method,,,"cn.pedant.SweetAlert.OptAnimationLoader+loadAnimation(Context,int) cn.pedant.SweetAlert.OptAnimationLoader+loadAnimation(Context,int) cn.pedant.SweetAlert.OptAnimationLoader+loadAnimation(Context,int) cn.pedant.SweetAlert.OptAnimationLoader+loadAnimation(Context,int) cn.pedant.SweetAlert.OptAnimationLoader+loadAnimation(Context,int) cn.pedant.SweetAlert.OptAnimationLoader+loadAnimation(Context,int) cn.pedant.SweetAlert.OptAnimationLoader+loadAnimation(Context,int) cn.pedant.SweetAlert.OptAnimationLoader+loadAnimation(Context,int) cn.pedant.SweetAlert.OptAnimationLoader+loadAnimation(Context,int) cn.pedant.SweetAlert.OptAnimationLoader+loadAnimation(Context,int) cn.pedant.SweetAlert.OptAnimationLoader+loadAnimation(Context,int) cn.pedant.SweetAlert.OptAnimationLoader+loadAnimation(Context,int) +onAnimationStart(Animation)",cn.pedant.SweetAlert.SweetAlertDialog+mAlertType cn.pedant.SweetAlert.SweetAlertDialog+mErrorInAnim cn.pedant.SweetAlert.SweetAlertDialog+mErrorXInAnim cn.pedant.SweetAlert.SweetAlertDialog+mErrorXInAnim cn.pedant.SweetAlert.SweetAlertDialog+mSuccessBowAnim cn.pedant.SweetAlert.SweetAlertDialog+mSuccessLayoutAnimSet cn.pedant.SweetAlert.SweetAlertDialog+mModalInAnim cn.pedant.SweetAlert.SweetAlertDialog+mModalOutAnim cn.pedant.SweetAlert.SweetAlertDialog+mModalOutAnim,3011,70,1,,"public SweetAlertDialog(Context context, int alertType) {
        super(context, R.style.alert_dialog);
        setCancelable(true);
        setCanceledOnTouchOutside(false);
        mAlertType = alertType;
        mErrorInAnim = OptAnimationLoader.loadAnimation(getContext(), R.anim.error_frame_in);
        mErrorXInAnim = (AnimationSet)OptAnimationLoader.loadAnimation(getContext(), R.anim.error_x_in);
        // 2.3.x system don't support alpha-animation on layer-list drawable
        // remove it from animation set
        if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.GINGERBREAD_MR1) {
            List<Animation> childAnims = mErrorXInAnim.getAnimations();
            int idx = 0;
            for (;idx < childAnims.size();idx++) {
                if (childAnims.get(idx) instanceof AlphaAnimation) {
                    break;
                }
            }
            if (idx < childAnims.size()) {
                childAnims.remove(idx);
            }
        }
        mSuccessBowAnim = OptAnimationLoader.loadAnimation(getContext(), R.anim.success_bow_roate);
        mSuccessLayoutAnimSet = (AnimationSet)OptAnimationLoader.loadAnimation(getContext(), R.anim.success_mask_layout);
        mModalInAnim = (AnimationSet) OptAnimationLoader.loadAnimation(getContext(), R.anim.modal_in);
        mModalOutAnim = (AnimationSet) OptAnimationLoader.loadAnimation(getContext(), R.anim.modal_out);
        mModalOutAnim.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationEnd(Animation animation) {
                mDialogView.setVisibility(View.GONE);
                mDialogView.post(new Runnable() {
                    @Override
                    public void run() {
                        if (mCloseFromCancel) {
                            SweetAlertDialog.super.cancel();
                        } else {
                            SweetAlertDialog.super.dismiss();
                        }
                    }
                });
            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }
        });
        // dialog overlay fade out
        mOverlayOutAnim = new Animation() {
            @Override
            protected void applyTransformation(float interpolatedTime, Transformation t) {
                WindowManager.LayoutParams wlp = getWindow().getAttributes();
                wlp.alpha = 1 - interpolatedTime;
                getWindow().setAttributes(wlp);
            }
        };
        mOverlayOutAnim.setDuration(120);

        setRimWidth(0);
        setRimColor(0x00000000);
        setBarWidth(10);
        setBarColor(getContext().getResources().getColor(R.color.progress_bar_color));
        setSpinSpeed(0.75f);
        setCircleRadius(80);
        setProgressMessageColor(getContext().getResources().getColor(R.color.text_color));
    }",False,False,"The function of this method is to initialize a SweetAlertDialog object with a given context and alert type. It sets various animations and properties for the dialog, such as the error animation, success animation, modal animations, overlay fade out animation, and progress bar properties.",True,"The code defines a constructor for a custom dialog class called SweetAlertDialog. It initializes various animations and sets the properties of the dialog such as its cancelability, background color, progress bar color, and message color."
53,onCreate(Bundle),on create saved instance state ,Method,,,"cn.pedant.SweetAlert.SweetAlertDialog+setTitleText(String) cn.pedant.SweetAlert.SweetAlertDialog+setTitleText(String) cn.pedant.SweetAlert.SweetAlertDialog+setContentText(String) cn.pedant.SweetAlert.SweetAlertDialog+setContentText(String) cn.pedant.SweetAlert.SweetAlertDialog+showCancelButton(boolean) cn.pedant.SweetAlert.SweetAlertDialog+showCancelButton(boolean) cn.pedant.SweetAlert.SweetAlertDialog+setCancelText(String) cn.pedant.SweetAlert.SweetAlertDialog+setCancelText(String) cn.pedant.SweetAlert.SweetAlertDialog+setConfirmText(String) cn.pedant.SweetAlert.SweetAlertDialog+setConfirmText(String) cn.pedant.SweetAlert.SweetAlertDialog+changeAlertType(int,boolean) cn.pedant.SweetAlert.SweetAlertDialog+changeAlertType(int,boolean)",cn.pedant.SweetAlert.SweetAlertDialog+mDialogView cn.pedant.SweetAlert.SweetAlertDialog+mTitleTextView cn.pedant.SweetAlert.SweetAlertDialog+mContentTextView cn.pedant.SweetAlert.SweetAlertDialog+mErrorFrame cn.pedant.SweetAlert.SweetAlertDialog+mErrorX cn.pedant.SweetAlert.SweetAlertDialog+mErrorFrame cn.pedant.SweetAlert.SweetAlertDialog+mSuccessFrame cn.pedant.SweetAlert.SweetAlertDialog+mProgressFrame cn.pedant.SweetAlert.SweetAlertDialog+mSuccessTick cn.pedant.SweetAlert.SweetAlertDialog+mSuccessFrame cn.pedant.SweetAlert.SweetAlertDialog+mSuccessLeftMask cn.pedant.SweetAlert.SweetAlertDialog+mSuccessFrame cn.pedant.SweetAlert.SweetAlertDialog+mSuccessRightMask cn.pedant.SweetAlert.SweetAlertDialog+mSuccessFrame cn.pedant.SweetAlert.SweetAlertDialog+mCustomImage cn.pedant.SweetAlert.SweetAlertDialog+mWarningFrame cn.pedant.SweetAlert.SweetAlertDialog+mConfirmButton cn.pedant.SweetAlert.SweetAlertDialog+mCancelButton cn.pedant.SweetAlert.SweetAlertDialog+progressWheel cn.pedant.SweetAlert.SweetAlertDialog+mConfirmButton cn.pedant.SweetAlert.SweetAlertDialog+mCancelButton cn.pedant.SweetAlert.SweetAlertDialog+mTitleText cn.pedant.SweetAlert.SweetAlertDialog+mContentText cn.pedant.SweetAlert.SweetAlertDialog+mShowCancel cn.pedant.SweetAlert.SweetAlertDialog+mCancelText cn.pedant.SweetAlert.SweetAlertDialog+mConfirmText cn.pedant.SweetAlert.SweetAlertDialog+mAlertType,1558,31,4,,"protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.alert_dialog);

        mDialogView = getWindow().getDecorView().findViewById(android.R.id.content);
        mTitleTextView = (TextView)findViewById(R.id.title_text);
        mContentTextView = (TextView)findViewById(R.id.content_text);
        mErrorFrame = (FrameLayout)findViewById(R.id.error_frame);
        mErrorX = (ImageView)mErrorFrame.findViewById(R.id.error_x);
        mSuccessFrame = (FrameLayout)findViewById(R.id.success_frame);
        mProgressFrame = (LinearLayout)findViewById(R.id.progress_dialog);
        mSuccessTick = (SuccessTickView)mSuccessFrame.findViewById(R.id.success_tick);
        mSuccessLeftMask = mSuccessFrame.findViewById(R.id.mask_left);
        mSuccessRightMask = mSuccessFrame.findViewById(R.id.mask_right);
        mCustomImage = (ImageView)findViewById(R.id.custom_image);
        mWarningFrame = (FrameLayout)findViewById(R.id.warning_frame);
        mConfirmButton = (Button)findViewById(R.id.confirm_button);
        mCancelButton = (Button)findViewById(R.id.cancel_button);
        progressWheel = (ProgressWheel) findViewById(R.id.progressWheel);

        mConfirmButton.setOnClickListener(this);
        mCancelButton.setOnClickListener(this);

        setTitleText(mTitleText);
        setContentText(mContentText);
        showCancelButton(mShowCancel);
        setCancelText(mCancelText);
        setConfirmText(mConfirmText);
        changeAlertType(mAlertType, true);

    }",False,False,"The function of this method is to initialize and set up the layout and views for an alert dialog. It also sets listeners for the confirm and cancel buttons, and sets the title, content, cancel text, and confirm text for the dialog.",False,"The code is for the `onCreate` method of an activity. It sets the content view to an alert dialog layout, initializes various views and buttons, and sets their click listeners. It also sets the title, content, cancel and confirm texts, and changes the alert type."
54,restore(),restore ,Method,"changeAlertType(int,boolean)",,,cn.pedant.SweetAlert.SweetAlertDialog+mCustomImage cn.pedant.SweetAlert.SweetAlertDialog+mErrorFrame cn.pedant.SweetAlert.SweetAlertDialog+mSuccessFrame cn.pedant.SweetAlert.SweetAlertDialog+mWarningFrame cn.pedant.SweetAlert.SweetAlertDialog+mConfirmButton cn.pedant.SweetAlert.SweetAlertDialog+mErrorFrame cn.pedant.SweetAlert.SweetAlertDialog+mErrorX cn.pedant.SweetAlert.SweetAlertDialog+mSuccessTick cn.pedant.SweetAlert.SweetAlertDialog+mSuccessLeftMask cn.pedant.SweetAlert.SweetAlertDialog+mSuccessRightMask,500,13,2,,"private void restore () {
        mCustomImage.setVisibility(View.GONE);
        mErrorFrame.setVisibility(View.GONE);
        mSuccessFrame.setVisibility(View.GONE);
        mWarningFrame.setVisibility(View.GONE);

        mConfirmButton.setBackgroundResource(R.drawable.blue_button_background);
        mErrorFrame.clearAnimation();
        mErrorX.clearAnimation();
        mSuccessTick.clearAnimation();
        mSuccessLeftMask.clearAnimation();
        mSuccessRightMask.clearAnimation();
    }",False,False,"The function of the method is to restore the initial state of certain views and animations, and set the background resource of a button to a specific drawable.",False,The `restore()` method is used to reset the state of various UI elements by hiding them and clearing any animations. It also sets the background resource of a button to a blue button background.
55,playAnimation(),play animation ,Method,"changeAlertType(int,boolean) onStart()",,cn.pedant.SweetAlert.SuccessTickView+startTickAnim() cn.pedant.SweetAlert.SuccessTickView+startTickAnim(),cn.pedant.SweetAlert.SweetAlertDialog+mAlertType cn.pedant.SweetAlert.SweetAlertDialog+ERROR_TYPE cn.pedant.SweetAlert.SweetAlertDialog+mErrorFrame cn.pedant.SweetAlert.SweetAlertDialog+mErrorInAnim cn.pedant.SweetAlert.SweetAlertDialog+mErrorX cn.pedant.SweetAlert.SweetAlertDialog+mErrorXInAnim cn.pedant.SweetAlert.SweetAlertDialog+mAlertType cn.pedant.SweetAlert.SweetAlertDialog+SUCCESS_TYPE cn.pedant.SweetAlert.SweetAlertDialog+mSuccessTick cn.pedant.SweetAlert.SweetAlertDialog+mSuccessRightMask cn.pedant.SweetAlert.SweetAlertDialog+mSuccessBowAnim,346,9,2,,"private void playAnimation () {
        if (mAlertType == ERROR_TYPE) {
            mErrorFrame.startAnimation(mErrorInAnim);
            mErrorX.startAnimation(mErrorXInAnim);
        } else if (mAlertType == SUCCESS_TYPE) {
            mSuccessTick.startTickAnim();
            mSuccessRightMask.startAnimation(mSuccessBowAnim);
        }
    }",False,False,"The function ""playAnimation"" is used to play different animations based on the value of ""mAlertType"". If ""mAlertType"" is ERROR_TYPE, it plays animations for error. If ""mAlertType"" is SUCCESS_TYPE, it plays animations for success.",False,"The `playAnimation` method is responsible for playing different animations based on the value of `mAlertType`. If `mAlertType` is `ERROR_TYPE`, it starts the error frame and error X animations. If `mAlertType` is `SUCCESS_TYPE`, it starts the success tick and success right mask animations."
56,"changeAlertType(int,boolean)",change alert type alert type from create ,Method,onCreate(Bundle) changeAlertType(int),,cn.pedant.SweetAlert.SweetAlertDialog+restore() cn.pedant.SweetAlert.SweetAlertDialog+restore() cn.pedant.SweetAlert.SweetAlertDialog+setCustomImage(Drawable) cn.pedant.SweetAlert.SweetAlertDialog+setCustomImage(Drawable) cn.pedant.SweetAlert.SweetAlertDialog+setRimWidth(int) cn.pedant.SweetAlert.SweetAlertDialog+setRimWidth(int) cn.pedant.SweetAlert.SweetAlertDialog+setRimColor(int) cn.pedant.SweetAlert.SweetAlertDialog+setRimColor(int) cn.pedant.SweetAlert.SweetAlertDialog+setBarWidth(int) cn.pedant.SweetAlert.SweetAlertDialog+setBarWidth(int) cn.pedant.SweetAlert.SweetAlertDialog+setBarColor(int) cn.pedant.SweetAlert.SweetAlertDialog+setBarColor(int) cn.pedant.SweetAlert.SweetAlertDialog+setSpinSpeed(float) cn.pedant.SweetAlert.SweetAlertDialog+setSpinSpeed(float) cn.pedant.SweetAlert.SweetAlertDialog+setCircleRadius(int) cn.pedant.SweetAlert.SweetAlertDialog+setCircleRadius(int) cn.pedant.SweetAlert.SweetAlertDialog+setProgressMessageColor(int) cn.pedant.SweetAlert.SweetAlertDialog+setProgressMessageColor(int) cn.pedant.SweetAlert.SweetAlertDialog+spin() cn.pedant.SweetAlert.SweetAlertDialog+spin() cn.pedant.SweetAlert.SweetAlertDialog+playAnimation() cn.pedant.SweetAlert.SweetAlertDialog+playAnimation(),cn.pedant.SweetAlert.SweetAlertDialog+mAlertType cn.pedant.SweetAlert.SweetAlertDialog+mDialogView cn.pedant.SweetAlert.SweetAlertDialog+mAlertType cn.pedant.SweetAlert.SweetAlertDialog+ERROR_TYPE cn.pedant.SweetAlert.SweetAlertDialog+mErrorFrame cn.pedant.SweetAlert.SweetAlertDialog+SUCCESS_TYPE cn.pedant.SweetAlert.SweetAlertDialog+mSuccessFrame cn.pedant.SweetAlert.SweetAlertDialog+mSuccessLeftMask cn.pedant.SweetAlert.SweetAlertDialog+mSuccessLayoutAnimSet cn.pedant.SweetAlert.SweetAlertDialog+mSuccessRightMask cn.pedant.SweetAlert.SweetAlertDialog+mSuccessLayoutAnimSet cn.pedant.SweetAlert.SweetAlertDialog+WARNING_TYPE cn.pedant.SweetAlert.SweetAlertDialog+mConfirmButton cn.pedant.SweetAlert.SweetAlertDialog+mWarningFrame cn.pedant.SweetAlert.SweetAlertDialog+CUSTOM_IMAGE_TYPE cn.pedant.SweetAlert.SweetAlertDialog+mCustomImgDrawable cn.pedant.SweetAlert.SweetAlertDialog+PROGRESS_TYPE cn.pedant.SweetAlert.SweetAlertDialog+mProgressFrame cn.pedant.SweetAlert.SweetAlertDialog+mConfirmButton cn.pedant.SweetAlert.SweetAlertDialog+mTitleTextView cn.pedant.SweetAlert.SweetAlertDialog+mProgressRimWidth cn.pedant.SweetAlert.SweetAlertDialog+mProgressRimColor cn.pedant.SweetAlert.SweetAlertDialog+mPogressWidth cn.pedant.SweetAlert.SweetAlertDialog+mProgressColor cn.pedant.SweetAlert.SweetAlertDialog+mProgressSpin cn.pedant.SweetAlert.SweetAlertDialog+mProgressCircleRadius cn.pedant.SweetAlert.SweetAlertDialog+mProgressMessageColor cn.pedant.SweetAlert.SweetAlertDialog+toSpin,2013,47,2,,"private void changeAlertType(int alertType, boolean fromCreate) {
        mAlertType = alertType;
        // call after created views
        if (mDialogView != null) {
            if (!fromCreate) {
                // restore all of views state before switching alert type
                restore();
            }
            switch (mAlertType) {
                case ERROR_TYPE:
                    mErrorFrame.setVisibility(View.VISIBLE);
                    break;
                case SUCCESS_TYPE:
                    mSuccessFrame.setVisibility(View.VISIBLE);
                    // initial rotate layout of success mask
                    mSuccessLeftMask.startAnimation(mSuccessLayoutAnimSet.getAnimations().get(0));
                    mSuccessRightMask.startAnimation(mSuccessLayoutAnimSet.getAnimations().get(1));
                    break;
                case WARNING_TYPE:
                    mConfirmButton.setBackgroundResource(R.drawable.red_button_background);
                    mWarningFrame.setVisibility(View.VISIBLE);
                    break;
                case CUSTOM_IMAGE_TYPE:
                    setCustomImage(mCustomImgDrawable);
                    break;
                case PROGRESS_TYPE:
                    mProgressFrame.setVisibility(View.VISIBLE);
                    mConfirmButton.setVisibility(View.GONE);
                    mTitleTextView.setVisibility(View.GONE);

                    setCancelable(false);

                    setRimWidth(mProgressRimWidth);
                    setRimColor(mProgressRimColor);
                    setBarWidth(mPogressWidth);
                    setBarColor(mProgressColor);
                    setSpinSpeed(mProgressSpin);
                    setCircleRadius(mProgressCircleRadius);
                    setProgressMessageColor(mProgressMessageColor);
                    if (toSpin) spin();
                    break;
            }
            if (!fromCreate) {
                playAnimation();
            }
        }
    }",False,False,"The function of this method is to change the alert type of a dialog. It takes an alert type and a boolean parameter indicating whether the method is called from the creation of the dialog. It updates the alert type, restores the views' state if not called from creation, and shows or hides specific views based on the alert type.",True,"The code defines a private method called `changeAlertType` that takes an alert type and a boolean flag as parameters. It sets the alert type based on the input and performs different actions depending on the type, such as showing or hiding certain views and applying animations."
57,getAlerType(),get aler type ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+mAlertType,60,3,1,,"public int getAlerType () {
        return mAlertType;
    }",False,False,This method returns the value of the variable mAlertType.,True,"The code contains a method named ""getAlertType"" which returns an integer value. It retrieves and returns the value of a variable named ""mAlertType""."
58,changeAlertType(int),change alert type alert type ,Method,,cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog),"cn.pedant.SweetAlert.SweetAlertDialog+changeAlertType(int,boolean) cn.pedant.SweetAlert.SweetAlertDialog+changeAlertType(int,boolean)",,93,3,1,,"public void changeAlertType(int alertType) {
        changeAlertType(alertType, false);
    }",False,False,The function of the given method is to change the alert type. It takes an integer parameter called alertType and calls another method called changeAlertType with the same alertType value and a boolean value of false.,True,"The code defines a method called ""changeAlertType"" that takes an integer parameter ""alertType"". It calls another overloaded version of the same method with the same parameter and a boolean value set to false. This method is used to change the alert type and provides a convenient way to call the method with a default value for the boolean parameter."
59,getTitleText(),get title text ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+mTitleText,64,3,1,,"public String getTitleText () {
        return mTitleText;
    }",False,False,"The function of the method is to retrieve and return the value of the variable ""mTitleText"" as a string.",True,The code defines a method named `getTitleText` that returns a string value. It retrieves the value of a variable `mTitleText` and returns it as the result of the method.
60,setTitleText(String),set title text text ,Method,onCreate(Bundle),cn.pedant.SweetAlert.sample.SampleActivity+onClick(View) cn.pedant.SweetAlert.sample.SampleActivity+onClick(View) cn.pedant.SweetAlert.sample.SampleActivity+onClick(View) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog),,cn.pedant.SweetAlert.SweetAlertDialog+mTitleText cn.pedant.SweetAlert.SweetAlertDialog+mTitleTextView cn.pedant.SweetAlert.SweetAlertDialog+mTitleText cn.pedant.SweetAlert.SweetAlertDialog+mTitleTextView cn.pedant.SweetAlert.SweetAlertDialog+mTitleText,224,7,1,,"public SweetAlertDialog setTitleText (String text) {
        mTitleText = text;
        if (mTitleTextView != null && mTitleText != null) {
            mTitleTextView.setText(mTitleText);
        }
        return this;
    }",False,False,"This method sets the title text of a SweetAlertDialog object. It assigns the input text to the mTitleText variable, and if the mTitleTextView is not null, it sets the text of the mTitleTextView to the mTitleText. Finally, it returns the SweetAlertDialog object.",True,"The method `setTitleText` sets the title text of a SweetAlertDialog object. It takes a string parameter and assigns it to the `mTitleText` variable. If the `mTitleTextView` is not null and the `mTitleText` is not null, it sets the text of the `mTitleTextView` to the `mTitleText`. Finally, it returns the updated SweetAlertDialog object."
61,setCustomImage(Drawable),set custom image drawable ,Method,"changeAlertType(int,boolean) setCustomImage(int)",,,cn.pedant.SweetAlert.SweetAlertDialog+mCustomImgDrawable cn.pedant.SweetAlert.SweetAlertDialog+mCustomImage cn.pedant.SweetAlert.SweetAlertDialog+mCustomImgDrawable cn.pedant.SweetAlert.SweetAlertDialog+mCustomImage cn.pedant.SweetAlert.SweetAlertDialog+mCustomImage cn.pedant.SweetAlert.SweetAlertDialog+mCustomImgDrawable,319,8,1,,"public SweetAlertDialog setCustomImage (Drawable drawable) {
        mCustomImgDrawable = drawable;
        if (mCustomImage != null && mCustomImgDrawable != null) {
            mCustomImage.setVisibility(View.VISIBLE);
            mCustomImage.setImageDrawable(mCustomImgDrawable);
        }
        return this;
    }",False,False,"The function of this method is to set a custom image for a SweetAlertDialog. It takes a Drawable as a parameter, sets it as the custom image, and returns the SweetAlertDialog object.",True,"The method ""setCustomImage"" sets a custom image for a SweetAlertDialog object. It takes a Drawable parameter and assigns it to the mCustomImgDrawable variable. If the mCustomImage view is not null and the mCustomImgDrawable is not null, the image is set as the drawable for the mCustomImage view and the view is made visible. The method returns the SweetAlertDialog object."
62,setCustomImage(int),set custom image resource id ,Method,,,cn.pedant.SweetAlert.SweetAlertDialog+setCustomImage(Drawable) cn.pedant.SweetAlert.SweetAlertDialog+setCustomImage(Drawable),,147,3,1,,"public SweetAlertDialog setCustomImage (int resourceId) {
        return setCustomImage(getContext().getResources().getDrawable(resourceId));
    }",False,False,This method sets a custom image for a SweetAlertDialog by taking in a resource ID and returning a SweetAlertDialog object with the custom image set.,True,"The method ""setCustomImage"" takes an integer parameter ""resourceId"" and returns a SweetAlertDialog object. It sets a custom image for the dialog by retrieving the image resource from the given resourceId using the getContext() method."
63,getContentText(),get content text ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+mContentText,68,3,1,,"public String getContentText () {
        return mContentText;
    }",False,False,This method returns the value of the variable mContentText as a String.,False,The code defines a method named `getContentText` that returns a string value. The method retrieves and returns the value of a variable named `mContentText`.
64,setContentText(String),set content text text ,Method,onCreate(Bundle),cn.pedant.SweetAlert.sample.SampleActivity+onClick(View) cn.pedant.SweetAlert.sample.SampleActivity+onClick(View) cn.pedant.SweetAlert.sample.SampleActivity+onClick(View) cn.pedant.SweetAlert.sample.SampleActivity+onClick(View) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog),,cn.pedant.SweetAlert.SweetAlertDialog+mContentText cn.pedant.SweetAlert.SweetAlertDialog+mContentTextView cn.pedant.SweetAlert.SweetAlertDialog+mContentText cn.pedant.SweetAlert.SweetAlertDialog+mContentTextView cn.pedant.SweetAlert.SweetAlertDialog+mContentTextView cn.pedant.SweetAlert.SweetAlertDialog+mContentText,294,8,1,,"public SweetAlertDialog setContentText (String text) {
        mContentText = text;
        if (mContentTextView != null && mContentText != null) {
            mContentTextView.setVisibility(View.VISIBLE);
            mContentTextView.setText(mContentText);
        }
        return this;
    }",False,False,This method sets the content text of a SweetAlertDialog object and returns the updated object. It also updates the visibility and text of the content text view if it exists.,True,"The `setContentText` method sets the content text of a SweetAlertDialog object. It takes a string parameter and assigns it to the `mContentText` variable. If the `mContentTextView` is not null and the `mContentText` is not null, it sets the visibility of the `mContentTextView` to visible and sets its text to the `mContentText`. Finally, it returns the SweetAlertDialog object."
65,isShowCancelButton(),is show cancel button ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+mShowCancel,72,3,1,,"public boolean isShowCancelButton () {
        return mShowCancel;
    }",False,False,This method serves to determine whether the cancel button should be shown or not.,True,"The code defines a method named ""isShowCancelButton"" which returns a boolean value indicating whether the ""mShowCancel"" variable is true or false. This method can be used to check if the cancel button should be displayed or not in a program or application."
66,showCancelButton(boolean),show cancel button is show ,Method,onCreate(Bundle),cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog),,cn.pedant.SweetAlert.SweetAlertDialog+mShowCancel cn.pedant.SweetAlert.SweetAlertDialog+mCancelButton cn.pedant.SweetAlert.SweetAlertDialog+mCancelButton cn.pedant.SweetAlert.SweetAlertDialog+mShowCancel,244,7,1,,"public SweetAlertDialog showCancelButton (boolean isShow) {
        mShowCancel = isShow;
        if (mCancelButton != null) {
            mCancelButton.setVisibility(mShowCancel ? View.VISIBLE : View.GONE);
        }
        return this;
    }",False,False,This method sets the visibility of a cancel button in a SweetAlertDialog based on a boolean value. It returns the instance of the SweetAlertDialog.,True,"The method ""showCancelButton"" is used to control the visibility of a cancel button in a SweetAlertDialog. It takes a boolean parameter ""isShow"" to determine whether the cancel button should be shown or hidden. The method returns the instance of the SweetAlertDialog for method chaining."
67,getCancelText(),get cancel text ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+mCancelText,66,3,1,,"public String getCancelText () {
        return mCancelText;
    }",False,False,This method returns the value of the variable mCancelText as a String.,True,"The code defines a method named ""getCancelText"" that returns a String value. This method retrieves the value of a variable called ""mCancelText"" and returns it."
68,setCancelText(String),set cancel text text ,Method,onCreate(Bundle),,,cn.pedant.SweetAlert.SweetAlertDialog+mCancelText cn.pedant.SweetAlert.SweetAlertDialog+mCancelButton cn.pedant.SweetAlert.SweetAlertDialog+mCancelText cn.pedant.SweetAlert.SweetAlertDialog+mCancelButton cn.pedant.SweetAlert.SweetAlertDialog+mCancelText,226,7,1,,"public SweetAlertDialog setCancelText (String text) {
        mCancelText = text;
        if (mCancelButton != null && mCancelText != null) {
            mCancelButton.setText(mCancelText);
        }
        return this;
    }",False,False,"This method sets the cancel button text for a SweetAlertDialog. It takes a string as input and assigns it to the mCancelText variable. If the cancel button exists and the cancel text is not null, it sets the cancel button text to the mCancelText value. Finally, it returns the SweetAlertDialog object.",True,"The method ""setCancelText"" sets the cancel button text of a SweetAlertDialog object. It takes a string parameter and assigns it to the mCancelText variable. If the cancel button is not null and the cancel text is not null, it sets the text of the cancel button to the assigned value. The method returns the updated SweetAlertDialog object."
69,getConfirmText(),get confirm text ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+mConfirmText,68,3,1,,"public String getConfirmText () {
        return mConfirmText;
    }",False,False,"The function of the given method is to retrieve and return the value of the variable ""mConfirmText"" as a string.",True,"The code contains a method named ""getConfirmText"" which returns a string value. It retrieves and returns the value of a variable named ""mConfirmText""."
70,setConfirmText(String),set confirm text text ,Method,onCreate(Bundle),cn.pedant.SweetAlert.sample.SampleActivity+onClick(View) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog),,cn.pedant.SweetAlert.SweetAlertDialog+mConfirmText cn.pedant.SweetAlert.SweetAlertDialog+mConfirmButton cn.pedant.SweetAlert.SweetAlertDialog+mConfirmText cn.pedant.SweetAlert.SweetAlertDialog+mConfirmButton cn.pedant.SweetAlert.SweetAlertDialog+mConfirmText,232,7,1,,"public SweetAlertDialog setConfirmText (String text) {
        mConfirmText = text;
        if (mConfirmButton != null && mConfirmText != null) {
            mConfirmButton.setText(mConfirmText);
        }
        return this;
    }",False,False,This method sets the text for the confirm button in a SweetAlertDialog. It updates the text of the button if it has already been initialized. The method returns the instance of the SweetAlertDialog for method chaining.,True,"The `setConfirmText` method is used to set the text for the confirm button in a SweetAlertDialog. It takes a string parameter and assigns it to the `mConfirmText` variable. If the confirm button and the confirm text are not null, it sets the text of the confirm button to the `mConfirmText` value. The method returns the instance of the SweetAlertDialog for method chaining."
71,setCancelClickListener(OnSweetClickListener),set cancel click listener listener ,Method,,cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog),,cn.pedant.SweetAlert.SweetAlertDialog+mCancelClickListener,148,4,1,,"public SweetAlertDialog setCancelClickListener (OnSweetClickListener listener) {
        mCancelClickListener = listener;
        return this;
    }",False,False,The function of this method is to set a cancel click listener for a SweetAlertDialog object and return the updated object.,True,"The code defines a method named ""setCancelClickListener"" which takes an object of type ""OnSweetClickListener"" as a parameter. It assigns the parameter to a member variable named ""mCancelClickListener"" and returns the current instance of the class ""SweetAlertDialog"". This method is used to set a listener for the cancel button click event in the SweetAlertDialog."
72,setConfirmClickListener(OnSweetClickListener),set confirm click listener listener ,Method,,cn.pedant.SweetAlert.sample.SampleActivity+onClick(View) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog) cn.pedant.SweetAlert.sample.SampleActivity+onClick(SweetAlertDialog),,cn.pedant.SweetAlert.SweetAlertDialog+mConfirmClickListener,150,4,1,,"public SweetAlertDialog setConfirmClickListener (OnSweetClickListener listener) {
        mConfirmClickListener = listener;
        return this;
    }",False,False,The method sets a listener for the confirm button click event in a SweetAlertDialog and returns the instance of the SweetAlertDialog.,True,"The code defines a method named ""setConfirmClickListener"" which takes an object of type ""OnSweetClickListener"" as a parameter. It assigns the parameter to a member variable named ""mConfirmClickListener"" and returns the current instance of the ""SweetAlertDialog"" class. This method is used to set a listener for the confirm button click event in the ""SweetAlertDialog"" class."
73,onStart(),on start ,Method,,,cn.pedant.SweetAlert.SweetAlertDialog+playAnimation() cn.pedant.SweetAlert.SweetAlertDialog+playAnimation(),cn.pedant.SweetAlert.SweetAlertDialog+mDialogView cn.pedant.SweetAlert.SweetAlertDialog+mModalInAnim,107,4,4,,"protected void onStart() {
        mDialogView.startAnimation(mModalInAnim);
        playAnimation();
    }",False,False,The function of the method is to start an animation on a dialog view and then play another animation.,False,"The `onStart()` method is a protected method that starts an animation on a dialog view using the `mModalInAnim` animation. It also calls the `playAnimation()` method, which is not shown in the provided code."
74,cancel(),cancel the real dialog cancel will be invoked async ly after the animation finishes ,Method,,,cn.pedant.SweetAlert.SweetAlertDialog+dismissWithAnimation(boolean) cn.pedant.SweetAlert.SweetAlertDialog+dismissWithAnimation(boolean),,181,7,1,"/** 
 * The real Dialog.cancel() will be invoked async-ly after the animation finishes.
 */
","/**
     * The real Dialog.cancel() will be invoked async-ly after the animation finishes.
     */
    @Override
    public void cancel() {
        dismissWithAnimation(true);
    }",False,False,The function of this method is to cancel the dialog by invoking the dismissWithAnimation method with the parameter set to true.,False,"This code overrides the cancel() method in a dialog class. It calls the dismissWithAnimation() method with a boolean parameter set to true, indicating that the dialog should be dismissed with an animation. The actual cancellation of the dialog will occur asynchronously after the animation finishes."
75,dismissWithAnimation(),dismiss with animation the real dialog dismiss will be invoked async ly after the animation finishes ,Method,onClick(View) onClick(View),cn.pedant.SweetAlert.sample.SampleActivity+onFinish(),cn.pedant.SweetAlert.SweetAlertDialog+dismissWithAnimation(boolean) cn.pedant.SweetAlert.SweetAlertDialog+dismissWithAnimation(boolean),,183,6,1,"/** 
 * The real Dialog.dismiss() will be invoked async-ly after the animation finishes.
 */
","/**
     * The real Dialog.dismiss() will be invoked async-ly after the animation finishes.
     */
    public void dismissWithAnimation() {
        dismissWithAnimation(false);
    }",False,False,"The function of the method is to dismiss a dialog with an animation. It calls another method, dismissWithAnimation(false), to initiate the dismissal process.",False,"The code defines a method called ""dismissWithAnimation()"" which is used to dismiss a dialog. It has an overloaded version that takes a boolean parameter to indicate whether the dismissal should be animated or not. The actual dismissal of the dialog will happen asynchronously after the animation finishes."
76,dismissWithAnimation(boolean),dismiss with animation from cancel ,Method,cancel() dismissWithAnimation(),,,cn.pedant.SweetAlert.SweetAlertDialog+mCloseFromCancel cn.pedant.SweetAlert.SweetAlertDialog+mConfirmButton cn.pedant.SweetAlert.SweetAlertDialog+mOverlayOutAnim cn.pedant.SweetAlert.SweetAlertDialog+mDialogView cn.pedant.SweetAlert.SweetAlertDialog+mModalOutAnim,207,5,2,,"private void dismissWithAnimation(boolean fromCancel) {
        mCloseFromCancel = fromCancel;
        mConfirmButton.startAnimation(mOverlayOutAnim);
        mDialogView.startAnimation(mModalOutAnim);
    }",False,False,"This method dismisses a dialog with animation. It sets a flag indicating if the dismissal is from a cancel action, then starts animations on the confirm button and dialog view to fade them out.",False,"The code defines a private method called ""dismissWithAnimation"" that takes a boolean parameter. It sets a flag based on the value of the parameter and then starts two animations on different views. The purpose of this method is to dismiss a dialog with animation, possibly indicating whether it was dismissed from a cancel action."
77,onClick(View),on click v ,Method,,,cn.pedant.SweetAlert.SweetAlertDialog.OnSweetClickListener+onClick(SweetAlertDialog) cn.pedant.SweetAlert.SweetAlertDialog.OnSweetClickListener+onClick(SweetAlertDialog) cn.pedant.SweetAlert.SweetAlertDialog+dismissWithAnimation() cn.pedant.SweetAlert.SweetAlertDialog+dismissWithAnimation() cn.pedant.SweetAlert.SweetAlertDialog.OnSweetClickListener+onClick(SweetAlertDialog) cn.pedant.SweetAlert.SweetAlertDialog.OnSweetClickListener+onClick(SweetAlertDialog) cn.pedant.SweetAlert.SweetAlertDialog+dismissWithAnimation() cn.pedant.SweetAlert.SweetAlertDialog+dismissWithAnimation(),cn.pedant.SweetAlert.SweetAlertDialog+mCancelClickListener cn.pedant.SweetAlert.SweetAlertDialog+mCancelClickListener cn.pedant.SweetAlert.SweetAlertDialog+mConfirmClickListener cn.pedant.SweetAlert.SweetAlertDialog+mConfirmClickListener,547,16,1,,"@Override
    public void onClick(View v) {
        if (v.getId() == R.id.cancel_button) {
            if (mCancelClickListener != null) {
                mCancelClickListener.onClick(SweetAlertDialog.this);
            } else {
                dismissWithAnimation();
            }
        } else if (v.getId() == R.id.confirm_button) {
            if (mConfirmClickListener != null) {
                mConfirmClickListener.onClick(SweetAlertDialog.this);
            } else {
                dismissWithAnimation();
            }
        }
    }",False,False,"This method is an implementation of the onClick() method from the View.OnClickListener interface. It handles the click events for the cancel_button and confirm_button views. If a click listener is set for either button, it will call the appropriate onClick() method. If no click listener is set, it will dismiss the SweetAlertDialog with an animation.",False,"This code defines an onClick method that is triggered when a cancel or confirm button is clicked. If a cancel or confirm click listener is set, it calls the respective listener's onClick method. Otherwise, it dismisses the dialog with an animation."
78,isSpinning(),is spinning ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,78,3,1,,"public boolean isSpinning() {
        return progressWheel.isSpinning();
    }",True,True,This method returns a boolean value indicating whether the progress wheel is spinning or not.,True,"The code defines a method named ""isSpinning()"" which returns a boolean value. It checks if a progress wheel, represented by the variable ""progressWheel"", is spinning and returns true if it is, and false otherwise."
79,resetCount(),reset count ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+progressWheel cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,152,6,1,,"public SweetAlertDialog resetCount() {
        if (progressWheel != null) {
            progressWheel.resetCount();
        }
        return this;
    }",False,True,The function of this method is to reset the count of a progress wheel (if it exists) and return the instance of the SweetAlertDialog.,True,The `resetCount()` method is a part of the `SweetAlertDialog` class. It checks if the `progressWheel` object is not null and then calls its `resetCount()` method. It returns the instance of the `SweetAlertDialog` class.
80,stopSpinning(),stop spinning ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+toSpin cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,96,4,1,,"public void stopSpinning() {
        toSpin = false;
        progressWheel.stopSpinning();
    }",True,True,"The function of the method is to stop the spinning animation by setting the ""toSpin"" variable to false and calling the ""stopSpinning"" method of the ""progressWheel"" object.",True,"The code defines a method called ""stopSpinning"" which sets a boolean variable ""toSpin"" to false and calls the ""stopSpinning"" method of an object named ""progressWheel"". This method is likely used to stop a spinning animation or process."
81,spin(),spin ,Method,"changeAlertType(int,boolean)",,,cn.pedant.SweetAlert.SweetAlertDialog+toSpin cn.pedant.SweetAlert.SweetAlertDialog+progressWheel cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,163,7,1,,"public SweetAlertDialog spin() {
        toSpin = true;
        if (progressWheel != null) {
            progressWheel.spin();
        }
        return this;
    }",False,True,"The function of this method is to start spinning the progress wheel if it exists, and set the ""toSpin"" variable to true. It returns the instance of the SweetAlertDialog.",True,"The `spin()` method is a part of the `SweetAlertDialog` class. It sets a boolean variable `toSpin` to true and then checks if the `progressWheel` object is not null. If it is not null, it calls the `spin()` method on the `progressWheel` object. Finally, it returns the current instance of the `SweetAlertDialog` class."
82,setProgress(float),set progress progress ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+mProgress cn.pedant.SweetAlert.SweetAlertDialog+progressWheel cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,206,7,1,,"public SweetAlertDialog setProgress(float progress) {
        mProgress = progress;
        if (progressWheel != null) {
            progressWheel.setProgress(progress);
        }
        return this;
    }",True,True,This method sets the progress value for a SweetAlertDialog object. It updates the progress value and also updates the progress wheel if it exists. It returns the updated SweetAlertDialog object.,True,"The code defines a method named ""setProgress"" in a class called ""SweetAlertDialog"". This method takes a float value as a parameter and sets it as the progress value. If a progress wheel is present, it updates the progress value of the wheel. Finally, it returns the instance of the class."
83,setInstantProgress(float),set instant progress progress ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+mProgressInstantProgress cn.pedant.SweetAlert.SweetAlertDialog+progressWheel cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,235,7,1,,"public SweetAlertDialog setInstantProgress(float progress) {
        mProgressInstantProgress = progress;
        if (progressWheel != null) {
            progressWheel.setInstantProgress(progress);
        }
        return this;
    }",False,True,The function of this method is to set the instant progress of a SweetAlertDialog object. It updates the value of mProgressInstantProgress and also updates the progressWheel if it is not null. It returns the updated SweetAlertDialog object.,True,"The method ""setInstantProgress"" is used to set the progress of a SweetAlertDialog. It takes a float value as input and updates the progress of the progressWheel accordingly. The method returns the updated SweetAlertDialog object."
84,getProgress(),get progress ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,78,3,1,,"public float getProgress() {
        return progressWheel.getProgress();
    }",True,True,This method returns the progress value of the progress wheel as a float.,True,"The code defines a method named ""getProgress"" that returns a float value. This method retrieves the progress value from an object called ""progressWheel"" and returns it."
85,getCircleRadius(),get circle radius ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,84,3,1,,"public int getCircleRadius() {
        return progressWheel.getCircleRadius();
    }",True,True,This method returns the circle radius of a progress wheel.,True,"The code defines a method named ""getCircleRadius"" that returns an integer value. This method retrieves the circle radius from an object called ""progressWheel"" and returns it."
86,setCircleRadius(int),set circle radius circle radius ,Method,"changeAlertType(int,boolean)",,,cn.pedant.SweetAlert.SweetAlertDialog+mProgressCircleRadius cn.pedant.SweetAlert.SweetAlertDialog+progressWheel cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,236,7,1,,"public SweetAlertDialog setCircleRadius(int circleRadius) {
        mProgressCircleRadius = circleRadius;
        if (progressWheel != null) {
            progressWheel.setCircleRadius(circleRadius);
        }
        return this;
    }",True,True,This method sets the radius of the circle in a SweetAlertDialog. It updates the mProgressCircleRadius variable and also updates the circle radius in the progressWheel if it is not null. It returns the SweetAlertDialog object.,True,"This code defines a method called ""setCircleRadius"" in the SweetAlertDialog class. It takes an integer parameter called ""circleRadius"" and sets the value of the class variable ""mProgressCircleRadius"" to it. If the ""progressWheel"" object is not null, it also calls the ""setCircleRadius"" method of the ""progressWheel"" object with the same parameter value. Finally, it returns the instance of the SweetAlertDialog class."
87,getBarWidth(),get bar width ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,76,3,1,,"public int getBarWidth() {
        return progressWheel.getBarWidth();
    }",True,True,This method returns the bar width of a progress wheel.,True,"The code defines a method named ""getBarWidth"" that returns an integer value. This method retrieves the bar width from an object called ""progressWheel"" and returns it."
88,setBarWidth(int),set bar width bar width ,Method,"changeAlertType(int,boolean)",,,cn.pedant.SweetAlert.SweetAlertDialog+mPogressWidth cn.pedant.SweetAlert.SweetAlertDialog+progressWheel cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,208,7,1,,"public SweetAlertDialog setBarWidth(int barWidth) {
        mPogressWidth = barWidth;
        if (progressWheel != null) {
            progressWheel.setBarWidth(barWidth);
        }
        return this;
    }",False,True,This method sets the width of a progress bar in a SweetAlertDialog. It updates the mPogressWidth variable and also updates the bar width of the progressWheel if it is not null. It returns the SweetAlertDialog object.,True,"The method ""setBarWidth"" is used to set the width of a progress bar in a SweetAlertDialog. It takes an integer parameter ""barWidth"" and updates the mPogressWidth variable. If the progressWheel object is not null, it also sets the bar width of the progress wheel. The method returns the updated SweetAlertDialog object."
89,getBarColor(),get bar color ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,76,3,1,,"public int getBarColor() {
        return progressWheel.getBarColor();
    }",True,True,This method returns the bar color of a progress wheel.,True,"The code defines a method named ""getBarColor"" that returns an integer value. This method retrieves the bar color from an object named ""progressWheel"" and returns it."
90,setBarColor(int),set bar color bar color ,Method,"changeAlertType(int,boolean)",cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long),,cn.pedant.SweetAlert.SweetAlertDialog+mProgressColor cn.pedant.SweetAlert.SweetAlertDialog+progressWheel cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,209,7,1,,"public SweetAlertDialog setBarColor(int barColor) {
        mProgressColor = barColor;
        if (progressWheel != null) {
            progressWheel.setBarColor(barColor);
        }
        return this;
    }",False,True,This method sets the color of the progress bar in a SweetAlertDialog. It updates the mProgressColor variable and also updates the color of the progressWheel if it is not null. It returns the instance of the SweetAlertDialog.,True,"The code defines a method called ""setBarColor"" which takes an integer parameter ""barColor"" and sets the value of ""mProgressColor"" to it. If the ""progressWheel"" object is not null, it also sets the bar color of the progress wheel to the specified color. The method returns an instance of the ""SweetAlertDialog"" class."
91,getRimColor(),get rim color ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,76,3,1,,"public int getRimColor() {
        return progressWheel.getRimColor();
    }",True,True,This method returns the rim color of a progress wheel.,True,"The code defines a method named ""getRimColor"" that returns an integer value. This method retrieves the rim color of a progress wheel object and returns it."
92,setRimColor(int),set rim color rim color ,Method,"changeAlertType(int,boolean)",,,cn.pedant.SweetAlert.SweetAlertDialog+mProgressRimColor cn.pedant.SweetAlert.SweetAlertDialog+progressWheel cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,212,7,1,,"public SweetAlertDialog setRimColor(int rimColor) {
        mProgressRimColor = rimColor;
        if (progressWheel != null) {
            progressWheel.setRimColor(rimColor);
        }
        return this;
    }",False,True,"This method sets the color of the rim in a SweetAlertDialog. It takes an integer value as the rim color and updates the mProgressRimColor variable. If the progressWheel is not null, it also sets the rim color of the progressWheel. Finally, it returns the SweetAlertDialog object.",True,"This method sets the color of the rim of a SweetAlertDialog. It takes an integer value representing the color and updates the mProgressRimColor variable. If the progressWheel object is not null, it also sets the rim color of the progressWheel. Finally, it returns the updated SweetAlertDialog object."
93,getSpinSpeed(),get spin speed ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,80,3,1,,"public float getSpinSpeed() {
        return progressWheel.getSpinSpeed();
    }",True,True,This method returns the spin speed of the progress wheel as a float value.,True,"The code defines a method named ""getSpinSpeed"" that returns a float value. This method retrieves the spin speed of an object called ""progressWheel"" and returns it."
94,setSpinSpeed(float),set spin speed spin speed ,Method,"changeAlertType(int,boolean)",,,cn.pedant.SweetAlert.SweetAlertDialog+mProgressSpin cn.pedant.SweetAlert.SweetAlertDialog+progressWheel cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,215,7,1,,"public SweetAlertDialog setSpinSpeed(float spinSpeed) {
        mProgressSpin = spinSpeed;
        if (progressWheel != null) {
            progressWheel.setSpinSpeed(spinSpeed);
        }
        return this;
    }",False,True,This method sets the spin speed of a progress wheel in a SweetAlertDialog. It takes a float value as input and returns the updated SweetAlertDialog object.,True,"The code defines a method called ""setSpinSpeed"" in a class called ""SweetAlertDialog"". This method takes a float parameter called ""spinSpeed"" and sets the value of a variable called ""mProgressSpin"" to the provided spinSpeed value. If a progressWheel object exists, the spinSpeed of the progressWheel is also set to the provided spinSpeed value. The method returns an instance of the SweetAlertDialog class."
95,getRimWidth(),get rim width ,Method,,,,cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,76,3,1,,"public int getRimWidth() {
        return progressWheel.getRimWidth();
    }",True,True,This method returns the rim width of a progress wheel.,True,"The code defines a method named ""getRimWidth"" that returns an integer value. This method retrieves the rim width of a progress wheel object and returns it."
96,setRimWidth(int),set rim width rim width ,Method,"changeAlertType(int,boolean)",,,cn.pedant.SweetAlert.SweetAlertDialog+mProgressRimWidth cn.pedant.SweetAlert.SweetAlertDialog+progressWheel cn.pedant.SweetAlert.SweetAlertDialog+progressWheel,212,7,1,,"public SweetAlertDialog setRimWidth(int rimWidth) {
        mProgressRimWidth = rimWidth;
        if (progressWheel != null) {
            progressWheel.setRimWidth(rimWidth);
        }
        return this;
    }",False,True,The function of this method is to set the rim width of a SweetAlertDialog object. It updates the rim width value and also updates the rim width of the progress wheel associated with the dialog. It returns the updated SweetAlertDialog object.,True,This method sets the width of the rim of a progress wheel in a SweetAlertDialog. It takes an integer parameter representing the desired rim width and updates the rim width of the progress wheel accordingly. The method returns the updated SweetAlertDialog object.
97,setProgressMessageColor(int),set progress message color color ,Method,"changeAlertType(int,boolean)",cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long) cn.pedant.SweetAlert.sample.SampleActivity+onTick(long),,cn.pedant.SweetAlert.SweetAlertDialog+mProgressMessageColor cn.pedant.SweetAlert.SweetAlertDialog+mContentTextView cn.pedant.SweetAlert.SweetAlertDialog+mContentTextView,225,7,1,,"public SweetAlertDialog setProgressMessageColor(int color){
        mProgressMessageColor = color;
        if (mContentTextView != null) {
            mContentTextView.setTextColor(color);
        }
        return this;
    }",False,True,This method sets the color of the progress message in a SweetAlertDialog. It also updates the color of the content text view if it exists. It returns the instance of the SweetAlertDialog.,True,The code defines a method called `setProgressMessageColor` which takes an integer color as input. It sets the color of the progress message in a SweetAlertDialog and returns the updated instance of the SweetAlertDialog.
