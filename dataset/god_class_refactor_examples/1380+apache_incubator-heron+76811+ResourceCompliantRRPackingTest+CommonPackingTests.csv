index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,A,a ,Field,,,,,37,1,26,,"private static final String A  = ""A"";",False,True,,False,
2,B,b ,Field,,,,,36,1,26,,"private static final String B = ""B"";",True,True,,False,
3,BOLT_NAME,bolt name ,Field,,,,,48,1,26,,"private static final String BOLT_NAME  = ""bolt"";",True,True,,False,
4,SPOUT_NAME,spout name ,Field,,,,,49,1,26,,"private static final String SPOUT_NAME = ""spout"";",True,True,,False,
5,DEFAULT_CONTAINER_PADDING,default container padding ,Field,,,,,56,1,26,,private static final int DEFAULT_CONTAINER_PADDING = 10;,True,True,,False,
6,spoutParallelism,spout parallelism ,Field,setUp() setUp(),,,,29,1,2,,private int spoutParallelism;,True,True,,False,
7,boltParallelism,bolt parallelism ,Field,setUp() setUp(),,,,28,1,2,,private int boltParallelism;,True,True,,False,
8,totalInstances,total instances ,Field,setUp(),,,,31,1,2,,private Integer totalInstances;,True,True,,False,
9,topologyConfig,topology config ,Field,setUp(),,,,52,1,2,,private com.twitter.heron.api.Config topologyConfig;,True,True,,False,
10,topology,topology ,Field,setUp(),,,,38,1,2,,private TopologyAPI.Topology topology;,True,True,,False,
11,instanceDefaultResources,instance default resources ,Field,setUp(),,,,42,1,2,,private Resource instanceDefaultResources;,True,True,,False,
12,"getTopology(int,int,com.twitter.heron.api.Config)",get topology spout parallelism bolt parallelism topology config ,Method,,,"com.twitter.heron.spi.utils.TopologyTests+createTopology(String,Config,String,String,int,int) com.twitter.heron.spi.utils.TopologyTests+createTopology(String,Config,String,String,int,int)",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME,293,6,10,,"private static TopologyAPI.Topology getTopology(
      int spoutParallelism, int boltParallelism,
      com.twitter.heron.api.Config topologyConfig) {
    return TopologyTests.createTopology(""testTopology"", topologyConfig, SPOUT_NAME, BOLT_NAME,
        spoutParallelism, boltParallelism);
  }",False,True,"The function of the given method is to create and return a topology using the provided spout and bolt parallelism values, along with the given topology configuration.",False,"The given code is a private static method named ""getTopology"" that returns a TopologyAPI.Topology object. It takes in three parameters: spoutParallelism (an integer), boltParallelism (an integer), and topologyConfig (a com.twitter.heron.api.Config object). The method calls the createTopology method from the TopologyTests class, passing in the necessary arguments, and returns the resulting topology."
13,getResourceCompliantRRPackingPlan(TopologyAPI.Topology),get resource compliant rr packing plan topology ,Method,,,"com.twitter.heron.spi.common.Config.Builder+put(String,Object) com.twitter.heron.spi.common.Config+newBuilder() com.twitter.heron.spi.common.Config+newBuilder() com.twitter.heron.spi.common.Config.Builder+put(String,Object) com.twitter.heron.spi.common.Keys+topologyId() com.twitter.heron.spi.common.Keys+topologyId() com.twitter.heron.spi.common.Keys+topologyName() com.twitter.heron.spi.common.Keys+topologyName() com.twitter.heron.spi.common.ClusterDefaults+getDefaults() com.twitter.heron.spi.common.ClusterDefaults+getDefaults() com.twitter.heron.packing.roundrobin.ResourceCompliantRRPacking+ResourceCompliantRRPacking() com.twitter.heron.packing.roundrobin.ResourceCompliantRRPacking+initialize(Config,Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPacking+initialize(Config,Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPacking+pack() com.twitter.heron.packing.roundrobin.ResourceCompliantRRPacking+pack()",,451,11,10,,"private static PackingPlan getResourceCompliantRRPackingPlan(TopologyAPI.Topology topology) {
    Config config = Config.newBuilder()
        .put(Keys.topologyId(), topology.getId())
        .put(Keys.topologyName(), topology.getName())
        .putAll(ClusterDefaults.getDefaults())
        .build();

    ResourceCompliantRRPacking packing = new ResourceCompliantRRPacking();
    packing.initialize(config, topology);
    return packing.pack();
  }",True,True,"This method takes a topology as input and returns a packing plan. It creates a configuration object using the topology's id and name, along with default cluster settings. It then initializes a ResourceCompliantRRPacking object with the configuration and topology, and returns the packing plan generated by calling the pack() method on the packing object.",True,"This code defines a private static method called `getResourceCompliantRRPackingPlan` that takes a `TopologyAPI.Topology` object as input. It creates a `Config` object with the topology's ID, name, and default cluster settings, and then initializes and executes a `ResourceCompliantRRPacking` object to generate a packing plan. The packing plan is then returned as the output of the method."
14,"getResourceCompliantRRPackingPlanRepack(TopologyAPI.Topology,PackingPlan,Map<String,Integer>)",get resource compliant rr packing plan repack topology current packing plan component changes ,Method,,,"com.twitter.heron.spi.common.Config.Builder+put(String,Object) com.twitter.heron.spi.common.Config+newBuilder() com.twitter.heron.spi.common.Config+newBuilder() com.twitter.heron.spi.common.Config.Builder+put(String,Object) com.twitter.heron.spi.common.Keys+topologyId() com.twitter.heron.spi.common.Keys+topologyId() com.twitter.heron.spi.common.Keys+topologyName() com.twitter.heron.spi.common.Keys+topologyName() com.twitter.heron.spi.common.ClusterDefaults+getDefaults() com.twitter.heron.spi.common.ClusterDefaults+getDefaults() com.twitter.heron.packing.roundrobin.ResourceCompliantRRPacking+ResourceCompliantRRPacking() com.twitter.heron.packing.roundrobin.ResourceCompliantRRPacking+initialize(Config,Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPacking+initialize(Config,Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPacking+repack(PackingPlan,Map<String,Integer>) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPacking+repack(PackingPlan,Map<String,Integer>)",,585,14,10,,"private static PackingPlan getResourceCompliantRRPackingPlanRepack(
      TopologyAPI.Topology topology,
      PackingPlan currentPackingPlan,
      Map<String, Integer> componentChanges) {
    Config config = Config.newBuilder()
        .put(Keys.topologyId(), topology.getId())
        .put(Keys.topologyName(), topology.getName())
        .putAll(ClusterDefaults.getDefaults())
        .build();

    ResourceCompliantRRPacking packing = new ResourceCompliantRRPacking();
    packing.initialize(config, topology);
    return packing.repack(currentPackingPlan, componentChanges);
  }",True,True,"This method returns a packing plan that is compliant with resource requirements. It takes a topology, current packing plan, and component changes as input, and uses a ResourceCompliantRRPacking object to initialize and repack the packing plan.",True,"This code defines a private static method called `getResourceCompliantRRPackingPlanRepack` that takes in a topology, current packing plan, and a map of component changes. It creates a configuration object using the topology information, initializes a `ResourceCompliantRRPacking` object with the configuration and topology, and then calls the `repack` method on the packing object with the current packing plan and component changes, returning the result."
15,"doScalingTest(TopologyAPI.Topology,Map<String,Integer>,ByteAmount,int,ByteAmount,int,int,int)",do scaling test topology component changes bolt ram bolt parallelism spout ram spout parallelism num containers before repack total instances expected performs a scaling test for a specific topology it first computes an initial packing plan as a basis for scaling given specific component parallelism changes a new packing plan is produced param topology input topology param component changes parallelism changes for scale up down param bolt ram ram allocated to bolts param bolt parallelism bolt parallelism param spout ram ram allocated to spouts param spout parallelism spout parallelism param num containers before repack number of containers that the initial packing plan should use param total instances expected number of instances expected before scaling return the new packing plan ,Method,,,"com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.packing.AssertPacking+assertContainers(Set<ContainerPlan>,String,String,ByteAmount,ByteAmount,ByteAmount) com.twitter.heron.packing.AssertPacking+assertContainers(Set<ContainerPlan>,String,String,ByteAmount,ByteAmount,ByteAmount) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlanRepack(Topology,PackingPlan,Map<String,Integer>) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlanRepack(Topology,PackingPlan,Map<String,Integer>) com.twitter.heron.packing.AssertPacking+assertContainerRam(Set<ContainerPlan>,ByteAmount) com.twitter.heron.packing.AssertPacking+assertContainerRam(Set<ContainerPlan>,ByteAmount) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.PackingPlan+getMaxContainerResources() com.twitter.heron.spi.packing.PackingPlan+getMaxContainerResources() com.twitter.heron.spi.packing.Resource+getRam()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME,2081,38,10,"/** 
 * Performs a scaling test for a specific topology. It first computes an initial packing plan as a basis for scaling. Given specific component parallelism changes, a new packing plan is produced.
 * @param topology Input topology
 * @param componentChanges parallelism changes for scale up/down
 * @param boltRam ram allocated to bolts
 * @param boltParallelism bolt parallelism
 * @param spoutRam ram allocated to spouts
 * @param spoutParallelism spout parallelism
 * @param numContainersBeforeRepack number of containers that the initial packing plan should use
 * @param totalInstancesExpected number of instances expected before scaling
 * @return the new packing plan
 */
","/**
   * Performs a scaling test for a specific topology. It first
   * computes an initial packing plan as a basis for scaling.
   * Given specific component parallelism changes, a new packing plan is produced.
   *
   * @param topology Input topology
   * @param componentChanges parallelism changes for scale up/down
   * @param boltRam ram allocated to bolts
   * @param boltParallelism bolt parallelism
   * @param spoutRam ram allocated to spouts
   * @param spoutParallelism spout parallelism
   * @param numContainersBeforeRepack number of containers that the initial packing plan should use
   * @param totalInstancesExpected number of instances expected before scaling
   * @return the new packing plan
   */
  private static PackingPlan doScalingTest(TopologyAPI.Topology topology,
                                           Map<String, Integer> componentChanges,
                                           ByteAmount boltRam,
                                           int boltParallelism, ByteAmount spoutRam,
                                           int spoutParallelism,
                                           int numContainersBeforeRepack,
                                           int totalInstancesExpected) {
    PackingPlan packingPlan = getResourceCompliantRRPackingPlan(topology);

    Assert.assertEquals(numContainersBeforeRepack, packingPlan.getContainers().size());
    Assert.assertEquals(totalInstancesExpected, (int) packingPlan.getInstanceCount());
    AssertPacking.assertContainers(packingPlan.getContainers(),
        BOLT_NAME, SPOUT_NAME, boltRam, spoutRam, null);
    AssertPacking.assertNumInstances(packingPlan.getContainers(), BOLT_NAME, boltParallelism);
    AssertPacking.assertNumInstances(packingPlan.getContainers(), SPOUT_NAME, spoutParallelism);

    PackingPlan newPackingPlan =
        getResourceCompliantRRPackingPlanRepack(topology, packingPlan, componentChanges);
    AssertPacking.assertContainerRam(newPackingPlan.getContainers(),
        packingPlan.getMaxContainerResources().getRam());

    return newPackingPlan;
  }",True,True,The function performs a scaling test for a specific topology. It computes an initial packing plan and then produces a new packing plan based on specific component parallelism changes. The function returns the new packing plan.,True,"The `doScalingTest` method performs a scaling test for a given topology by computing an initial packing plan and then producing a new packing plan based on specific component parallelism changes. It ensures that the new packing plan meets resource requirements and asserts various conditions such as the number of containers, instances, and RAM allocation. The method returns the new packing plan."
16,"countComponent(String,Set<PackingPlan.InstancePlan>)",count component component instances ,Method,,,java.lang.String+equals(Object) java.lang.String+equals(Object) com.twitter.heron.spi.packing.PackingPlan.InstancePlan+getComponentName() com.twitter.heron.spi.packing.PackingPlan.InstancePlan+getComponentName(),,284,9,2,,"private int countComponent(String component, Set<PackingPlan.InstancePlan> instances) {
    int count = 0;
    for (PackingPlan.InstancePlan instancePlan : instances) {
      if (component.equals(instancePlan.getComponentName())) {
        count++;
      }
    }
    return count;
  }",False,False,"This method counts the number of instances in a set that have a specific component name. It takes a component name and a set of instance plans as input, and returns the count of instances with the given component name.",True,"The given code is a private method named ""countComponent"" that takes a component name and a set of instance plans as input. It iterates through the instance plans and counts the number of plans that have the same component name as the given component. The method returns the count of such plans."
17,"doDefaultScalingTest(Map<String,Integer>,int)",do default scaling test component changes num containers before repack ,Method,testDefaultContainerSizeRepack() testScaleDownInvalidComponent() testScaleDownInvalidScaleFactor() testScaleDown() removeFirstContainer() scaleDownAndUp() scaleUpMultiple(),,"com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScalingTest(Topology,Map<String,Integer>,ByteAmount,int,ByteAmount,int,int,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScalingTest(Topology,Map<String,Integer>,ByteAmount,int,ByteAmount,int,int,int) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topology com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances,385,7,2,,"private PackingPlan doDefaultScalingTest(Map<String, Integer> componentChanges,
                                           int numContainersBeforeRepack) {
    return doScalingTest(topology, componentChanges,
        instanceDefaultResources.getRam(), boltParallelism,
        instanceDefaultResources.getRam(), spoutParallelism,
        numContainersBeforeRepack, totalInstances);
  }",False,True,The function of this method is to perform a default scaling test by calling the doScalingTest method with the given parameters and returning the result.,False,"The given code is a private method that performs a default scaling test. It takes a map of component changes, the number of containers before repack, and the total number of instances as parameters. It then calls another method, passing in the topology, component changes, default resources for RAM and parallelism for bolts and spouts, and the number of containers before repack and total instances."
18,setUp(),set up ,Method,,,"com.twitter.heron.api.Config+Config() java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.spi.common.Config.Builder+put(String,Object) com.twitter.heron.spi.common.Config+newBuilder() com.twitter.heron.spi.common.Config+newBuilder() com.twitter.heron.spi.common.Config.Builder+put(String,Object) com.twitter.heron.spi.common.Keys+topologyId() com.twitter.heron.spi.common.Keys+topologyId() com.twitter.heron.spi.common.Keys+topologyName() com.twitter.heron.spi.common.Keys+topologyName() com.twitter.heron.spi.common.ClusterDefaults+getDefaults() com.twitter.heron.spi.common.ClusterDefaults+getDefaults() com.twitter.heron.spi.packing.Resource+Resource(double,ByteAmount,ByteAmount) com.twitter.heron.spi.common.Context+instanceCpu(Config) com.twitter.heron.spi.common.Context+instanceCpu(Config) com.twitter.heron.spi.common.Context+instanceRam(Config) com.twitter.heron.spi.common.Context+instanceRam(Config) com.twitter.heron.spi.common.Context+instanceDisk(Config) com.twitter.heron.spi.common.Context+instanceDisk(Config)",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.api.Config+TOPOLOGY_STMGRS com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topology com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topology com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topology com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topology com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources,825,19,1,,"@Before
  public void setUp() {
    this.spoutParallelism = 4;
    this.boltParallelism = 3;
    this.totalInstances = this.spoutParallelism + this.boltParallelism;
    int numContainers = 2;
    // Set up the topology and its config
    this.topologyConfig = new com.twitter.heron.api.Config();
    topologyConfig.put(com.twitter.heron.api.Config.TOPOLOGY_STMGRS, numContainers);
    this.topology = getTopology(spoutParallelism, boltParallelism, topologyConfig);

    Config config = Config.newBuilder()
        .put(Keys.topologyId(), topology.getId())
        .put(Keys.topologyName(), topology.getName())
        .putAll(ClusterDefaults.getDefaults())
        .build();
    this.instanceDefaultResources = new Resource(
        Context.instanceCpu(config), Context.instanceRam(config), Context.instanceDisk(config));
  }",True,True,"The function ""setUp"" is used to initialize the variables and configurations required for setting up a topology in a distributed system. It sets the parallelism values for spouts and bolts, calculates the total number of instances, sets up the topology configuration, and initializes the default resources for each instance.",False,"The code is a setup method that initializes the configuration and resources for a topology. It sets the parallelism values for the spout and bolt components, calculates the total number of instances, and creates a configuration object with default values. The method also initializes the default resources for each instance based on the configuration."
19,testCheckFailure(),test check failure ,Method,,,"com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology)",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig,430,11,1,,"@Test(expected = RuntimeException.class)
  public void testCheckFailure() throws Exception {
    // Explicit set insufficient ram for container
    ByteAmount containerRam = ByteAmount.fromGigabytes(0);

    topologyConfig.setContainerRamRequested(containerRam);
    TopologyAPI.Topology newTopology = getTopology(spoutParallelism, boltParallelism,
        topologyConfig);

    getResourceCompliantRRPackingPlan(newTopology);
  }",False,False,"This method is a JUnit test that checks if a RuntimeException is expected to be thrown. It sets the container's RAM to 0, creates a new topology, and then calls a method to get a resource-compliant RRPackingPlan for the topology.",False,The code is a JUnit test method that expects a RuntimeException to be thrown. It sets the container RAM to 0 and creates a new topology using the given spout and bolt parallelism. It then calls a method to get a resource-compliant round-robin packing plan for the new topology.
20,testDefaultResources(),test default resources test the scenario where the max container size is the default ,Method,,,com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount(),com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topology com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances,479,12,1,"/** 
 * Test the scenario where the max container size is the default
 */
","/**
   * Test the scenario where the max container size is the default
   */
  @Test
  public void testDefaultResources() throws Exception {
    int numContainers = 2;
    PackingPlan packingPlanNoExplicitResourcesConfig =
        getResourceCompliantRRPackingPlan(topology);

    Assert.assertEquals(numContainers, packingPlanNoExplicitResourcesConfig.getContainers().size());
    Assert.assertEquals(totalInstances, packingPlanNoExplicitResourcesConfig.getInstanceCount());
  }",False,False,The function of the method is to test a scenario where the maximum container size is set to the default value. It checks if the packing plan generated for the given topology has the expected number of containers and total instances.,False,"The code is a unit test that verifies the behavior of a method called ""testDefaultResources"". It checks if the packing plan generated by the method ""getResourceCompliantRRPackingPlan"" correctly assigns the expected number of containers and total instances for a given topology."
21,testDefaultContainerSizeWithPadding(),test default container size with padding test the scenario where the max container size is the default and padding is configured ,Method,,,"com.twitter.heron.api.Config+setContainerPaddingPercentage(int) com.twitter.heron.api.Config+setContainerPaddingPercentage(int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances,633,16,1,"/** 
 * Test the scenario where the max container size is the default and padding is configured
 */
","/**
   * Test the scenario where the max container size is the default and padding is configured
   */
  @Test
  public void testDefaultContainerSizeWithPadding() throws Exception {
    int numContainers = 2;
    int padding = 50;
    topologyConfig.setContainerPaddingPercentage(padding);
    TopologyAPI.Topology newTopology = getTopology(spoutParallelism, boltParallelism,
        topologyConfig);

    PackingPlan packingPlan = getResourceCompliantRRPackingPlan(newTopology);

    Assert.assertEquals(numContainers, packingPlan.getContainers().size());
    Assert.assertEquals(totalInstances, packingPlan.getInstanceCount());
  }",False,False,"The function of the method is to test a scenario where the maximum container size is set to the default value and padding is configured. It sets the container padding percentage, creates a new topology, generates a packing plan, and asserts that the number of containers and total instances in the packing plan match the expected values.",False,"The code is a unit test that verifies the behavior of a method called `testDefaultContainerSizeWithPadding()`. It sets the container padding percentage in the topology configuration, creates a new topology, and then checks if the packing plan generated for the topology has the expected number of containers and total instances."
22,testContainerRequestedResourcesSingleContainer(),test container requested resources single container test the scenario where container level resource config are set ,Method,,,"java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setContainerDiskRequested(ByteAmount) com.twitter.heron.api.Config+setContainerDiskRequested(ByteAmount) com.twitter.heron.api.Config+setContainerCpuRequested(float) com.twitter.heron.api.Config+setContainerCpuRequested(float) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.lang.Math+round(float) java.lang.Math+round(float) com.twitter.heron.packing.utils.PackingUtils+increaseBy(long,int) com.twitter.heron.packing.utils.PackingUtils+increaseBy(long,int) com.twitter.heron.spi.packing.Resource+getCpu() com.twitter.heron.spi.packing.Resource+getCpu() com.twitter.heron.spi.packing.Resource+getCpu() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.Resource+getCpu() com.twitter.heron.common.basics.ByteAmount+multiply(int) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.common.basics.ByteAmount+multiply(int) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.common.basics.ByteAmount+multiply(int) com.twitter.heron.spi.packing.Resource+getDisk() com.twitter.heron.spi.packing.Resource+getDisk() com.twitter.heron.common.basics.ByteAmount+multiply(int) com.twitter.heron.spi.packing.Resource+getDisk() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.Resource+getDisk() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() java.util.Set+add(E) java.util.Set+add(E) com.twitter.heron.spi.packing.PackingPlan.InstancePlan+getResource() com.twitter.heron.spi.packing.PackingPlan.InstancePlan+getResource() java.util.Set+size() java.util.Set+size() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() java.util.Iterator+next() java.util.Set+iterator() java.util.Set+iterator() java.util.Iterator+next()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.api.Config+TOPOLOGY_STMGRS com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+DEFAULT_CONTAINER_PADDING com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+DEFAULT_CONTAINER_PADDING com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+DEFAULT_CONTAINER_PADDING com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources,2376,51,1,"/** 
 * Test the scenario where container level resource config are set
 */
","/**
   * Test the scenario where container level resource config are set
   */
  @Test
  public void testContainerRequestedResourcesSingleContainer() throws Exception {
    int numContainers = 1;

    // Set up the topology and its config
    topologyConfig.put(com.twitter.heron.api.Config.TOPOLOGY_STMGRS, numContainers);
    // Explicit set resources for container
    ByteAmount containerRam = ByteAmount.fromGigabytes(10);
    ByteAmount containerDisk = ByteAmount.fromGigabytes(20);
    float containerCpu = 30;

    topologyConfig.setContainerRamRequested(containerRam);
    topologyConfig.setContainerDiskRequested(containerDisk);
    topologyConfig.setContainerCpuRequested(containerCpu);
    TopologyAPI.Topology topologyExplicitResourcesConfig =
        getTopology(spoutParallelism, boltParallelism, topologyConfig);
    PackingPlan packingPlanExplicitResourcesConfig =
        getResourceCompliantRRPackingPlan(topologyExplicitResourcesConfig);

    Assert.assertEquals(numContainers, packingPlanExplicitResourcesConfig.getContainers().size());
    Assert.assertEquals(totalInstances, packingPlanExplicitResourcesConfig.getInstanceCount());

    for (PackingPlan.ContainerPlan containerPlan
        : packingPlanExplicitResourcesConfig.getContainers()) {
      Assert.assertEquals(Math.round(PackingUtils.increaseBy(totalInstances
              * instanceDefaultResources.getCpu(), DEFAULT_CONTAINER_PADDING)),
          (long) containerPlan.getRequiredResource().getCpu());

      Assert.assertEquals(instanceDefaultResources.getRam()
              .multiply(totalInstances)
              .increaseBy(DEFAULT_CONTAINER_PADDING),
          containerPlan.getRequiredResource().getRam());

      Assert.assertEquals(instanceDefaultResources.getDisk()
                    .multiply(totalInstances)
                    .increaseBy(DEFAULT_CONTAINER_PADDING),
          containerPlan.getRequiredResource().getDisk());

      // All instances' resource requirement should be equal
      // So the size of set should be 1
      Set<Resource> resources = new HashSet<>();
      for (PackingPlan.InstancePlan instancePlan : containerPlan.getInstances()) {
        resources.add(instancePlan.getResource());
      }
      Assert.assertEquals(1, resources.size());
      Assert.assertEquals(instanceDefaultResources.getRam(), resources.iterator().next().getRam());
    }
  }",False,False,"The function of this method is to test the scenario where container level resource configurations are set. It sets up the topology and its configuration, including the resources (RAM, disk, and CPU) requested for the container. It then verifies that the packing plan generated based on these resource configurations is correct.",False,"The code is a unit test that verifies the behavior of setting container-level resource configurations in a Heron topology. It sets the desired amount of RAM, disk, and CPU for a single container, creates a topology with these configurations, and checks that the packing plan for the topology correctly reflects the requested resources for the container."
23,testContainerRequestedResourcesTwoContainers(),test container requested resources two containers test the scenario where container level resource config are set ,Method,,,"com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setContainerDiskRequested(ByteAmount) com.twitter.heron.api.Config+setContainerDiskRequested(ByteAmount) com.twitter.heron.api.Config+setContainerCpuRequested(float) com.twitter.heron.api.Config+setContainerCpuRequested(float) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.PackingPlan.InstancePlan+getResource() com.twitter.heron.spi.packing.PackingPlan.InstancePlan+getResource() com.twitter.heron.spi.packing.Resource+getRam()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources,1407,31,1,"/** 
 * Test the scenario where container level resource config are set
 */
","/**
   * Test the scenario where container level resource config are set
   */
  @Test
  public void testContainerRequestedResourcesTwoContainers() throws Exception {
    int numContainers = 2;

    // Explicit set resources for container
    ByteAmount containerRam = ByteAmount.fromGigabytes(10);
    ByteAmount containerDisk = ByteAmount.fromGigabytes(20);
    float containerCpu = 30;

    topologyConfig.setContainerRamRequested(containerRam);
    topologyConfig.setContainerDiskRequested(containerDisk);
    topologyConfig.setContainerCpuRequested(containerCpu);
    TopologyAPI.Topology topologyExplicitResourcesConfig =
        getTopology(spoutParallelism, boltParallelism, topologyConfig);
    PackingPlan packingPlanExplicitResourcesConfig =
        getResourceCompliantRRPackingPlan(topologyExplicitResourcesConfig);

    Assert.assertEquals(numContainers, packingPlanExplicitResourcesConfig.getContainers().size());
    Assert.assertEquals(totalInstances, packingPlanExplicitResourcesConfig.getInstanceCount());

    // Ram for bolt/spout should be the value in component ram map
    for (PackingPlan.ContainerPlan containerPlan
        : packingPlanExplicitResourcesConfig.getContainers()) {
      for (PackingPlan.InstancePlan instancePlan : containerPlan.getInstances()) {
        Assert.assertEquals(instanceDefaultResources.getRam(), instancePlan.getResource().getRam());
      }
    }
  }",False,False,"The function of this method is to test the scenario where container level resource configurations are set. It sets the requested resources for the containers, creates a topology with the specified resources, and checks if the packing plan is compliant with the requested resources. It also verifies that the RAM for each instance in the packing plan matches the value in the component RAM map.",False,"The code is testing a scenario where container level resource configurations are set. It sets the requested RAM, disk, and CPU for the containers and then verifies that the packing plan generated based on these configurations is correct."
24,testCompleteRamMapRequested(),test complete ram map requested test the scenario ram map config is partially set ,Method,,,"com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.packing.AssertPacking+assertContainers(Set<ContainerPlan>,String,String,ByteAmount,ByteAmount,ByteAmount) com.twitter.heron.packing.AssertPacking+assertContainers(Set<ContainerPlan>,String,String,ByteAmount,ByteAmount,ByteAmount) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam()",java.lang.Long+MAX_VALUE com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources,1152,27,1,"/** 
 * Test the scenario ram map config is partially set
 */
","/**
   * Test the scenario ram map config is partially set
   */
  @Test
  public void testCompleteRamMapRequested() throws Exception {
    int numContainers = 2;

    // Explicit set resources for container
    // the value should be ignored, since we set the complete component ram map
    ByteAmount containerRam = ByteAmount.fromGigabytes(Long.MAX_VALUE);

    // Explicit set component ram map
    ByteAmount boltRam = ByteAmount.fromGigabytes(1);

    topologyConfig.setContainerRamRequested(containerRam);
    topologyConfig.setComponentRam(BOLT_NAME, boltRam);

    TopologyAPI.Topology topologyExplicitRamMap =
        getTopology(spoutParallelism, boltParallelism, topologyConfig);
    PackingPlan packingPlanExplicitRamMap =
        getResourceCompliantRRPackingPlan(topologyExplicitRamMap);
    Assert.assertEquals(totalInstances, packingPlanExplicitRamMap.getInstanceCount());
    Assert.assertEquals(numContainers, packingPlanExplicitRamMap.getContainers().size());

    AssertPacking.assertContainers(packingPlanExplicitRamMap.getContainers(),
        BOLT_NAME, SPOUT_NAME, boltRam, instanceDefaultResources.getRam(), containerRam);
  }",False,False,"The function of the method is to test a scenario where the RAM map configuration is partially set. It sets the resources for containers and components, creates a topology with the specified parallelism, and checks if the packing plan is resource compliant. It also asserts the expected number of instances and containers, and checks if the containers have the correct resources allocated.",False,"The code is testing a scenario where the RAM map configuration is partially set. It sets the resources for a container and the RAM map for a component, and then verifies that the packing plan generated based on these configurations is correct."
25,testPartialRamMap(),test partial ram map test the scenario ram map config is fully set ,Method,,,"com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.packing.AssertPacking+assertContainers(Set<ContainerPlan>,String,String,ByteAmount,ByteAmount,ByteAmount) com.twitter.heron.packing.AssertPacking+assertContainers(Set<ContainerPlan>,String,String,ByteAmount,ByteAmount,ByteAmount) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME,1134,28,1,"/** 
 * Test the scenario ram map config is fully set
 */
","/**
   * Test the scenario ram map config is fully set
   */
  @Test
  public void testPartialRamMap() throws Exception {
    int numContainers = 2;

    // Explicit set resources for container
    ByteAmount containerRam = ByteAmount.fromGigabytes(10);

    // Explicit set component ram map
    ByteAmount boltRam = ByteAmount.fromGigabytes(1);
    ByteAmount spoutRam = ByteAmount.fromGigabytes(2);

    topologyConfig.setContainerRamRequested(containerRam);
    topologyConfig.setComponentRam(BOLT_NAME, boltRam);
    topologyConfig.setComponentRam(SPOUT_NAME, spoutRam);

    TopologyAPI.Topology topologyExplicitRamMap =
        getTopology(spoutParallelism, boltParallelism, topologyConfig);
    PackingPlan packingPlanExplicitRamMap =
        getResourceCompliantRRPackingPlan(topologyExplicitRamMap);
    Assert.assertEquals(totalInstances, packingPlanExplicitRamMap.getInstanceCount());
    Assert.assertEquals(numContainers, packingPlanExplicitRamMap.getContainers().size());

    AssertPacking.assertContainers(packingPlanExplicitRamMap.getContainers(),
        BOLT_NAME, SPOUT_NAME, boltRam, spoutRam, containerRam);
  }",False,False,"The function of the method is to test a scenario where the RAM map configuration is fully set. It sets the resources for containers and components, creates a topology with the specified parallelism, and checks if the packing plan is resource compliant and has the expected number of instances and containers. It also asserts that the containers have the correct component RAM allocations.",False,"The code is a unit test that verifies the behavior of a method called `testPartialRamMap()`. It sets specific resource allocations for containers and components, creates a topology, and then checks if the resulting packing plan matches the expected values."
26,testInsufficientContainersWithOneAdjustment(),test insufficient containers with one adjustment test the scenario where the user defined number of containers is not sufficient ,Method,,,"java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.api.Config+TOPOLOGY_STMGRS com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances,841,23,1,"/** 
 * Test the scenario where the user defined number of containers is not sufficient.
 */
","/**
   * Test the scenario where the user defined number of containers is not sufficient.
   */
  @Test
  public void testInsufficientContainersWithOneAdjustment() throws Exception {
    int numContainers = 1;

    // Set up the topology and its config
    topologyConfig.put(com.twitter.heron.api.Config.TOPOLOGY_STMGRS, numContainers);

    // Explicit set resources for container
    ByteAmount containerRam = ByteAmount.fromGigabytes(2);

    topologyConfig.setContainerRamRequested(containerRam);

    TopologyAPI.Topology newTopology =
        getTopology(spoutParallelism, boltParallelism, topologyConfig);
    PackingPlan packingPlan =
        getResourceCompliantRRPackingPlan(newTopology);
    Assert.assertEquals(7, packingPlan.getContainers().size());
    Assert.assertEquals(totalInstances, packingPlan.getInstanceCount());

  }",False,False,"The function of this method is to test a scenario where the user-defined number of containers is not sufficient. It sets up the topology and its configuration, sets resources for the container, gets the topology, and checks the packing plan for the expected number of containers and instance count.",False,"The code is testing a scenario where the user-defined number of containers is not sufficient. It sets up a topology configuration with a specified number of containers and container resources, and then generates a packing plan for the topology. The test asserts that the packing plan contains the expected number of containers and instances."
27,testInsufficientContainersWithMultipleAdjustments(),test insufficient containers with multiple adjustments test the scenario where the user defined number of containers is not sufficient ,Method,,,"java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.api.Config+TOPOLOGY_STMGRS com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances,1130,28,1,"/** 
 * Test the scenario where the user defined number of containers is not sufficient.
 */
","/**
   * Test the scenario where the user defined number of containers is not sufficient.
   */
  @Test
  public void testInsufficientContainersWithMultipleAdjustments() throws Exception {
    int numContainers = 1;

    // Set up the topology and its config
    topologyConfig.put(com.twitter.heron.api.Config.TOPOLOGY_STMGRS, numContainers);

    // Explicit set resources for container
    ByteAmount containerRam = ByteAmount.fromGigabytes(3);

    // Explicit set component ram map
    ByteAmount boltRam = ByteAmount.fromGigabytes(1);
    ByteAmount spoutRam = ByteAmount.fromGigabytes(2);

    topologyConfig.setContainerRamRequested(containerRam);
    topologyConfig.setComponentRam(BOLT_NAME, boltRam);
    topologyConfig.setComponentRam(SPOUT_NAME, spoutRam);

    TopologyAPI.Topology topologyExplicitRamMap =
        getTopology(spoutParallelism, boltParallelism, topologyConfig);
    PackingPlan packingPlan =
        getResourceCompliantRRPackingPlan(topologyExplicitRamMap);
    Assert.assertEquals(7, packingPlan.getContainers().size());
    Assert.assertEquals(totalInstances, packingPlan.getInstanceCount());
  }",False,False,"The function of the method is to test a scenario where the user-defined number of containers is not sufficient. It sets up the topology and its configuration, sets resources for the container and component RAM, gets the topology, and checks the packing plan for the expected number of containers and total instances.",False,"The code is testing a scenario where the user-defined number of containers is not sufficient for the given topology. It sets up the topology configuration with specific resource allocations for containers and components, and then checks if the resulting packing plan has the expected number of containers and instances."
28,testEvenPacking(),test even packing test even packing of instances ,Method,,,"java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.spi.utils.TopologyUtils+getTotalInstance(Topology) com.twitter.heron.spi.utils.TopologyUtils+getTotalInstance(Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlan(Topology) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() java.util.Set+size() com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+countComponent(String,Set<InstancePlan>) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+countComponent(String,Set<InstancePlan>) com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+countComponent(String,Set<InstancePlan>) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+countComponent(String,Set<InstancePlan>) com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.api.Config+TOPOLOGY_STMGRS com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig,1121,27,1,"/** 
 * test even packing of instances
 */
","/**
   * test even packing of instances
   */
  @Test
  public void testEvenPacking() throws Exception {
    int numContainers = 2;
    int componentParallelism = 4;

    // Set up the topology and its config
    topologyConfig.put(com.twitter.heron.api.Config.TOPOLOGY_STMGRS, numContainers);

    TopologyAPI.Topology newTopology =
        getTopology(componentParallelism, componentParallelism, topologyConfig);

    int numInstance = TopologyUtils.getTotalInstance(newTopology);
    // Two components
    Assert.assertEquals(2 * componentParallelism, numInstance);
    PackingPlan output = getResourceCompliantRRPackingPlan(newTopology);
    Assert.assertEquals(numContainers, output.getContainers().size());
    Assert.assertEquals((Integer) numInstance, output.getInstanceCount());

    for (PackingPlan.ContainerPlan container : output.getContainers()) {
      Assert.assertEquals(numInstance / numContainers, container.getInstances().size());
      Assert.assertEquals(2, countComponent(""spout"", container.getInstances()));
      Assert.assertEquals(2, countComponent(""bolt"", container.getInstances()));
    }
  }",False,False,"The function of this method is to test the even packing of instances in a topology. It sets up the topology configuration, creates a new topology, calculates the number of instances, and checks if the packing plan is resource compliant. It also checks if the number of containers, instances per container, and component counts are as expected.",False,"The code is a unit test for even packing of instances in a topology. It sets up a topology with a specified number of containers and component parallelism, and then checks if the packing plan for the topology is resource compliant, with each container having the expected number of instances for the components."
29,testDefaultContainerSizeRepack(),test default container size repack test the scenario where the max container size is the default and scaling is requested ,Method,,,"java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.packing.AssertPacking+assertContainers(Set<ContainerPlan>,String,String,ByteAmount,ByteAmount,ByteAmount) com.twitter.heron.packing.AssertPacking+assertContainers(Set<ContainerPlan>,String,String,ByteAmount,ByteAmount,ByteAmount) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.lang.Math+round(double) java.lang.Math+round(double) com.twitter.heron.packing.utils.PackingUtils+increaseBy(double,int) com.twitter.heron.packing.utils.PackingUtils+increaseBy(double,int) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() java.util.Set+size() com.twitter.heron.spi.packing.Resource+getCpu() com.twitter.heron.spi.packing.Resource+getCpu() com.twitter.heron.spi.packing.Resource+getCpu() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.Resource+getCpu() com.twitter.heron.common.basics.ByteAmount+increaseBy(int) com.twitter.heron.common.basics.ByteAmount+multiply(int) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.common.basics.ByteAmount+multiply(int) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() java.util.Set+size() com.twitter.heron.common.basics.ByteAmount+increaseBy(int) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.common.basics.ByteAmount+increaseBy(int) com.twitter.heron.common.basics.ByteAmount+multiply(int) com.twitter.heron.spi.packing.Resource+getDisk() com.twitter.heron.spi.packing.Resource+getDisk() com.twitter.heron.common.basics.ByteAmount+multiply(int) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() java.util.Set+size() com.twitter.heron.common.basics.ByteAmount+increaseBy(int) com.twitter.heron.spi.packing.Resource+getDisk() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.Resource+getDisk()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+DEFAULT_CONTAINER_PADDING com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+DEFAULT_CONTAINER_PADDING com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+DEFAULT_CONTAINER_PADDING,1649,34,1,"/** 
 * Test the scenario where the max container size is the default and scaling is requested.
 */
","/**
   * Test the scenario where the max container size is the default
   * and scaling is requested.
   */
  @Test
  public void testDefaultContainerSizeRepack() throws Exception {
    int numScalingInstances = 5;
    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(BOLT_NAME, numScalingInstances);
    int numContainersBeforeRepack = 2;
    PackingPlan newPackingPlan = doDefaultScalingTest(componentChanges, numContainersBeforeRepack);
    Assert.assertEquals(4, newPackingPlan.getContainers().size());
    Assert.assertEquals((Integer) (totalInstances + numScalingInstances),
        newPackingPlan.getInstanceCount());
    AssertPacking.assertContainers(newPackingPlan.getContainers(),
        BOLT_NAME, SPOUT_NAME, instanceDefaultResources.getRam(),
        instanceDefaultResources.getRam(), null);
    for (PackingPlan.ContainerPlan containerPlan
        : newPackingPlan.getContainers()) {
      Assert.assertEquals(Math.round(PackingUtils.increaseBy(
          containerPlan.getInstances().size() * instanceDefaultResources.getCpu(),
          DEFAULT_CONTAINER_PADDING)), (long) containerPlan.getRequiredResource().getCpu());

      Assert.assertEquals(instanceDefaultResources.getRam()
              .multiply(containerPlan.getInstances().size())
              .increaseBy(DEFAULT_CONTAINER_PADDING),
          containerPlan.getRequiredResource().getRam());

      Assert.assertEquals(instanceDefaultResources.getDisk()
              .multiply(containerPlan.getInstances().size())
              .increaseBy(DEFAULT_CONTAINER_PADDING),
          containerPlan.getRequiredResource().getDisk());
    }
  }",False,False,The function of the method is to test the scenario where the max container size is the default and scaling is requested. It creates a packing plan with a specified number of scaling instances and a specified number of containers before repacking. It then asserts various conditions on the new packing plan.,False,"The code is a test method that verifies the behavior of a default container size repack scenario with scaling. It creates a packing plan with a specified number of scaling instances and checks if the new packing plan meets the expected conditions, such as the number of containers, total instance count, and required resources for each container."
30,testRepackPadding(),test repack padding test the scenario ram map config is partially set and scaling is requested ,Method,,,"com.twitter.heron.api.Config+setContainerPaddingPercentage(int) com.twitter.heron.api.Config+setContainerPaddingPercentage(int) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScalingTest(Topology,Map<String,Integer>,ByteAmount,int,ByteAmount,int,int,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScalingTest(Topology,Map<String,Integer>,ByteAmount,int,ByteAmount,int,int,int) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.packing.AssertPacking+assertContainers(Set<ContainerPlan>,String,String,ByteAmount,ByteAmount,ByteAmount) com.twitter.heron.packing.AssertPacking+assertContainers(Set<ContainerPlan>,String,String,ByteAmount,ByteAmount,ByteAmount) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() java.util.Set+size() com.twitter.heron.common.basics.ByteAmount+increaseBy(int) com.twitter.heron.common.basics.ByteAmount+increaseBy(int) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.Resource+getRam() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() java.util.Set+size() com.twitter.heron.common.basics.ByteAmount+increaseBy(int) com.twitter.heron.common.basics.ByteAmount+plus(ByteAmount) com.twitter.heron.common.basics.ByteAmount+plus(ByteAmount) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.common.basics.ByteAmount+increaseBy(int) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.Resource+getRam() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getInstances() java.util.Set+size() com.twitter.heron.common.basics.ByteAmount+increaseBy(int) com.twitter.heron.common.basics.ByteAmount+plus(ByteAmount) com.twitter.heron.common.basics.ByteAmount+plus(ByteAmount) com.twitter.heron.common.basics.ByteAmount+multiply(int) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.common.basics.ByteAmount+multiply(int) com.twitter.heron.common.basics.ByteAmount+increaseBy(int) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.PackingPlan.ContainerPlan+getRequiredResource() com.twitter.heron.spi.packing.Resource+getRam()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources,2302,49,1,"/** 
 * Test the scenario ram map config is partially set and scaling is requested
 */
","/**
   * Test the scenario ram map config is partially set and scaling is requested
   */
  @Test
  public void testRepackPadding() throws Exception {
    int paddingPercentage = 50;
    topologyConfig.setContainerPaddingPercentage(paddingPercentage);
    // Explicit set component ram map
    ByteAmount boltRam = ByteAmount.fromGigabytes(4);
    ByteAmount maxContainerRam = ByteAmount.fromGigabytes(10);
    topologyConfig.setComponentRam(BOLT_NAME, boltRam);
    topologyConfig.setContainerRamRequested(maxContainerRam);

    TopologyAPI.Topology topologyExplicitRamMap =
        getTopology(spoutParallelism, boltParallelism, topologyConfig);

    int numScalingInstances = 3;
    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(BOLT_NAME, numScalingInstances);

    int numContainersBeforeRepack = 3;
    PackingPlan newPackingPlan =
        doScalingTest(topologyExplicitRamMap, componentChanges, boltRam,
            boltParallelism, instanceDefaultResources.getRam(), spoutParallelism,
            numContainersBeforeRepack, totalInstances);
    Assert.assertEquals(6, newPackingPlan.getContainers().size());
    Assert.assertEquals((Integer) (totalInstances + numScalingInstances),
        newPackingPlan.getInstanceCount());
    AssertPacking.assertContainers(newPackingPlan.getContainers(),
        BOLT_NAME, SPOUT_NAME, boltRam, instanceDefaultResources.getRam(), null);

    for (PackingPlan.ContainerPlan containerPlan : newPackingPlan.getContainers()) {
      //Each container either contains a single bolt or 1 bolt and 2 spouts or 1 bolt and 1 spout
      if (containerPlan.getInstances().size() == 1) {
        Assert.assertEquals(boltRam.increaseBy(paddingPercentage),
            containerPlan.getRequiredResource().getRam());
      }
      if (containerPlan.getInstances().size() == 2) {
        Assert.assertEquals(boltRam.plus(instanceDefaultResources.getRam())
                .increaseBy(paddingPercentage),
            containerPlan.getRequiredResource().getRam());
      }
      if (containerPlan.getInstances().size() == 3) {
        Assert.assertEquals(boltRam.plus(instanceDefaultResources.getRam().multiply(2))
                .increaseBy(paddingPercentage),
            containerPlan.getRequiredResource().getRam());
      }
    }
  }",False,False,"The function of the method is to test the scenario where the RAM map configuration is partially set and scaling is requested. It sets the padding percentage, component RAM, and container RAM requested. It then creates a new packing plan based on the explicit RAM map and performs various assertions on the containers in the packing plan.",False,"The code is testing a scenario where a partial configuration for RAM allocation is set and scaling is requested. It sets the RAM allocation for a specific component, creates a topology with the specified configuration, performs scaling by adding instances of the component, and verifies that the new packing plan reflects the expected RAM allocation for each container."
31,testPartialRamMapScaling(),test partial ram map scaling test the scenario ram map config is partially set and scaling is requested ,Method,,,"com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScalingTest(Topology,Map<String,Integer>,ByteAmount,int,ByteAmount,int,int,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScalingTest(Topology,Map<String,Integer>,ByteAmount,int,ByteAmount,int,int,int) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.packing.AssertPacking+assertContainers(Set<ContainerPlan>,String,String,ByteAmount,ByteAmount,ByteAmount) com.twitter.heron.packing.AssertPacking+assertContainers(Set<ContainerPlan>,String,String,ByteAmount,ByteAmount,ByteAmount) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources,1358,31,1,"/** 
 * Test the scenario ram map config is partially set and scaling is requested
 */
","/**
   * Test the scenario ram map config is partially set and scaling is requested
   */
  @Test
  public void testPartialRamMapScaling() throws Exception {

    // Explicit set resources for container
    ByteAmount maxContainerRam = ByteAmount.fromGigabytes(10);
    // Explicit set component ram map
    ByteAmount boltRam = ByteAmount.fromGigabytes(4);
    topologyConfig.setContainerRamRequested(maxContainerRam);
    topologyConfig.setComponentRam(BOLT_NAME, boltRam);

    TopologyAPI.Topology topologyExplicitRamMap =
        getTopology(spoutParallelism, boltParallelism, topologyConfig);

    int numScalingInstances = 3;
    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(BOLT_NAME, numScalingInstances);

    int numContainersBeforeRepack = 3;
    PackingPlan newPackingPlan = doScalingTest(topologyExplicitRamMap, componentChanges, boltRam,
        boltParallelism, instanceDefaultResources.getRam(), spoutParallelism,
        numContainersBeforeRepack, totalInstances);

    Assert.assertEquals(6, newPackingPlan.getContainers().size());
    Assert.assertEquals((Integer) (totalInstances + numScalingInstances),
        newPackingPlan.getInstanceCount());
    AssertPacking.assertContainers(newPackingPlan.getContainers(),
        BOLT_NAME, SPOUT_NAME, boltRam, instanceDefaultResources.getRam(), null);
  }",False,False,"The function of the method is to test the scenario where the RAM map configuration is partially set and scaling is requested. It sets resources for the container and component RAM map, creates a topology with the explicit RAM map, performs scaling by changing the number of instances for a component, and asserts the expected results.",False,"The code is testing a scenario where the RAM map configuration is partially set and scaling is requested. It sets explicit resources for a container and a component, creates a topology with the specified parallelism, and performs scaling by adding multiple instances of a component. It then verifies the expected changes in the packing plan and container configuration."
32,testScaleDownInvalidComponent(),test scale down invalid component ,Method,,,"java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int)",,373,7,1,,"@Test(expected = RuntimeException.class)
  public void testScaleDownInvalidComponent() throws Exception {
    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(""SPOUT_FAKE"", -10); //try to remove a component that does not exist
    int numContainersBeforeRepack = 2;
    doDefaultScalingTest(componentChanges, numContainersBeforeRepack);
  }",False,False,This method is a JUnit test that expects a RuntimeException to be thrown. It tests the functionality of scaling down an invalid component by removing a component that does not exist. It uses a HashMap to store the component changes and calls the doDefaultScalingTest method with the component changes and the number of containers before repack.,False,The code is a JUnit test method that tests the behavior of a method called `doDefaultScalingTest()` when an invalid component is attempted to be removed. It expects the `doDefaultScalingTest()` method to throw a `RuntimeException` when the invalid component is specified. The test sets up a map of component changes and calls the `doDefaultScalingTest()` method with the map and a specified number of containers before repack.
33,testScaleDownInvalidScaleFactor(),test scale down invalid scale factor ,Method,,,"java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int)",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME,426,11,1,,"@Test(expected = RuntimeException.class)
  public void testScaleDownInvalidScaleFactor() throws Exception {

    //try to remove more spout instances than possible
    int spoutScalingDown = -5;
    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(SPOUT_NAME, spoutScalingDown);

    int numContainersBeforeRepack = 2;
    doDefaultScalingTest(componentChanges, numContainersBeforeRepack);
  }",True,True,This method is a JUnit test that expects a RuntimeException to be thrown. It tests the functionality of scaling down a component by providing an invalid scale factor.,False,"The code is a JUnit test method that tests the behavior of a scale-down operation in a system. It expects a RuntimeException to be thrown when trying to remove more spout instances than possible. The method uses a helper function called ""doDefaultScalingTest"" to perform the test with specific component changes and the number of containers before repacking."
34,testScaleDown(),test scale down test the scenario where the scaling down is requested ,Method,,,"java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME,919,21,1,"/** 
 * Test the scenario where the scaling down is requested
 */
","/**
   * Test the scenario where the scaling down is requested
   */
  @Test
  public void testScaleDown() throws Exception {
    int spoutScalingDown = -2;
    int boltScalingDown = -1;

    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(SPOUT_NAME, spoutScalingDown); //leave 2 spouts
    componentChanges.put(BOLT_NAME, boltScalingDown); //leave 2 bolts
    int numContainersBeforeRepack = 2;
    PackingPlan newPackingPlan = doDefaultScalingTest(componentChanges, numContainersBeforeRepack);
    Assert.assertEquals(1, newPackingPlan.getContainers().size());
    Assert.assertEquals((Integer) (totalInstances + spoutScalingDown + boltScalingDown),
        newPackingPlan.getInstanceCount());
    AssertPacking.assertNumInstances(newPackingPlan.getContainers(),
        BOLT_NAME, 2);
    AssertPacking.assertNumInstances(newPackingPlan.getContainers(),
        SPOUT_NAME, 2);
  }",False,False,"The function of the method is to test the scenario where scaling down is requested. It sets the scaling down values for spouts and bolts, creates a map of component changes, and performs a scaling test using the default method. It then asserts the expected number of containers and instances in the new packing plan.",False,The code is a test method that verifies the behavior of scaling down a system by reducing the number of spouts and bolts. It creates a packing plan with the desired scaling changes and asserts that the resulting plan has the expected number of containers and instances for each component.
35,testScaleDownOneComponentRemoveContainer(),test scale down one component remove container test the scenario where scaling down removes instances from containers that are most imbalanced i e tending towards homogeneity first if there is a tie e g aabb ab chooses from the container with the fewest instances to favor ultimately removing containers if there is still a tie favor removing from higher numbered containers ,Method,,,"com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScaleDownTest(Pair<Integer,InstanceId>[],Map<String,Integer>,Pair<Integer,InstanceId>[]) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScaleDownTest(Pair<Integer,InstanceId>[],Map<String,Integer>,Pair<Integer,InstanceId>[])",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B,1484,33,1,"/** 
 * Test the scenario where scaling down removes instances from containers that are most imbalanced (i.e., tending towards homogeneity) first. If there is a tie (e.g. AABB, AB), chooses from the container with the fewest instances, to favor ultimately removing  containers. If there is still a tie, favor removing from higher numbered containers
 */
","/**
   * Test the scenario where scaling down removes instances from containers that are most imbalanced
   * (i.e., tending towards homogeneity) first. If there is a tie (e.g. AABB, AB), chooses from the
   * container with the fewest instances, to favor ultimately removing  containers. If there is
   * still a tie, favor removing from higher numbered containers
   */
  @Test
  public void testScaleDownOneComponentRemoveContainer() throws Exception {
    @SuppressWarnings({""unchecked"", ""rawtypes""})
    Pair<Integer, InstanceId>[] initialComponentInstances = new Pair[] {
        new Pair<>(1, new InstanceId(A, 1, 0)),
        new Pair<>(1, new InstanceId(A, 2, 1)),
        new Pair<>(1, new InstanceId(B, 3, 0)),
        new Pair<>(3, new InstanceId(B, 4, 1)),
        new Pair<>(3, new InstanceId(B, 5, 2)),
        new Pair<>(4, new InstanceId(B, 6, 3)),
        new Pair<>(4, new InstanceId(B, 7, 4))
    };

    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(B, -2);

    @SuppressWarnings({""unchecked"", ""rawtypes""})
    Pair<Integer, InstanceId>[] expectedComponentInstances = new Pair[] {
        new Pair<>(1, new InstanceId(A, 1, 0)),
        new Pair<>(1, new InstanceId(A, 2, 1)),
        new Pair<>(1, new InstanceId(B, 3, 0)),
        new Pair<>(3, new InstanceId(B, 4, 1)),
        new Pair<>(3, new InstanceId(B, 5, 2)),
    };

    doScaleDownTest(initialComponentInstances, componentChanges, expectedComponentInstances);
  }",True,True,The function tests the scenario where scaling down removes instances from containers that are most imbalanced. It also handles ties by favoring containers with fewer instances and higher numbered containers.,False,"The code is testing a scenario where scaling down removes instances from containers that are most imbalanced, favoring removing containers if there is a tie. It defines initial component instances and expected component instances, and then calls a method to perform the scale down test using these inputs."
36,testScaleDownTwoComponentsRemoveContainer(),test scale down two components remove container ,Method,,,"com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScaleDownTest(Pair<Integer,InstanceId>[],Map<String,Integer>,Pair<Integer,InstanceId>[]) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScaleDownTest(Pair<Integer,InstanceId>[],Map<String,Integer>,Pair<Integer,InstanceId>[])",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B,1144,28,1,,"@Test
  public void testScaleDownTwoComponentsRemoveContainer() throws Exception {
    @SuppressWarnings({""unchecked"", ""rawtypes""})
    Pair<Integer, InstanceId>[] initialComponentInstances = new Pair[] {
        new Pair<>(1, new InstanceId(A, 1, 0)),
        new Pair<>(1, new InstanceId(A, 2, 1)),
        new Pair<>(1, new InstanceId(B, 3, 0)),
        new Pair<>(1, new InstanceId(B, 4, 1)),
        new Pair<>(3, new InstanceId(A, 5, 2)),
        new Pair<>(3, new InstanceId(A, 6, 3)),
        new Pair<>(3, new InstanceId(B, 7, 2)),
        new Pair<>(3, new InstanceId(B, 8, 3))
    };

    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(A, -2);
    componentChanges.put(B, -2);

    @SuppressWarnings({""unchecked"", ""rawtypes""})
    Pair<Integer, InstanceId>[] expectedComponentInstances = new Pair[] {
        new Pair<>(1, new InstanceId(A, 1, 0)),
        new Pair<>(1, new InstanceId(A, 2, 1)),
        new Pair<>(1, new InstanceId(B, 3, 0)),
        new Pair<>(1, new InstanceId(B, 4, 1)),
    };

    doScaleDownTest(initialComponentInstances, componentChanges, expectedComponentInstances);
  }",True,True,"The function of this method is to test the scale down of two components and remove the container. It initializes an array of component instances, creates a map of component changes, and calls the doScaleDownTest method with the initial and expected component instances.",False,"The code is a test method that tests the functionality of scaling down two components and removing their containers. It initializes an array of component instances, defines the changes to be made to the components, and specifies the expected component instances after the scaling down operation. The test method then calls the `doScaleDownTest` function with the provided parameters to perform the test."
37,testScaleDownHomogenousFirst(),test scale down homogenous first ,Method,,,"com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.spi.packing.InstanceId+InstanceId(String,int,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScaleDownTest(Pair<Integer,InstanceId>[],Map<String,Integer>,Pair<Integer,InstanceId>[]) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScaleDownTest(Pair<Integer,InstanceId>[],Map<String,Integer>,Pair<Integer,InstanceId>[])",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+A com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+B,1001,25,1,,"@Test
  public void testScaleDownHomogenousFirst() throws Exception {
    @SuppressWarnings({""unchecked"", ""rawtypes""})
    Pair<Integer, InstanceId>[] initialComponentInstances = new Pair[] {
        new Pair<>(1, new InstanceId(A, 1, 0)),
        new Pair<>(1, new InstanceId(A, 2, 1)),
        new Pair<>(1, new InstanceId(B, 3, 0)),
        new Pair<>(3, new InstanceId(B, 4, 1)),
        new Pair<>(3, new InstanceId(B, 5, 2)),
        new Pair<>(3, new InstanceId(B, 6, 3)),
        new Pair<>(3, new InstanceId(B, 7, 4))
    };

    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(B, -4);

    @SuppressWarnings({""unchecked"", ""rawtypes""})
    Pair<Integer, InstanceId>[] expectedComponentInstances = new Pair[] {
        new Pair<>(1, new InstanceId(A, 1, 0)),
        new Pair<>(1, new InstanceId(A, 2, 1)),
        new Pair<>(1, new InstanceId(B, 3, 0))
    };

    doScaleDownTest(initialComponentInstances, componentChanges, expectedComponentInstances);
  }",True,True,"The function of this method is to test the scaling down of homogenous instances. It creates an initial set of component instances, specifies the changes to be made, and verifies that the expected component instances match the actual result after scaling down.",False,"The code is a test method that tests the functionality of scaling down a set of component instances. It initializes an array of initial component instances, defines a map of component changes, and an array of expected component instances. It then calls the `doScaleDownTest` method with these parameters to perform the test."
38,"doScaleDownTest(Pair<Integer,InstanceId>[],Map<String,Integer>,Pair<Integer,InstanceId>[])",do scale down test initial component instances component changes expected component instances ,Method,testScaleDownOneComponentRemoveContainer() testScaleDownTwoComponentsRemoveContainer() testScaleDownHomogenousFirst(),,"com.twitter.heron.packing.PackingTestHelper+addToTestPackingPlan(String,PackingPlan,Pair<Integer,String>[],int) com.twitter.heron.packing.PackingTestHelper+addToTestPackingPlan(String,PackingPlan,Pair<Integer,String>[],int) com.twitter.heron.packing.PackingTestHelper+toContainerIdComponentNames(Pair<Integer,InstanceId>[]) com.twitter.heron.packing.PackingTestHelper+toContainerIdComponentNames(Pair<Integer,InstanceId>[]) com.twitter.heron.packing.AssertPacking+assertPackingPlan(String,Pair<Integer,InstanceId>[],PackingPlan) com.twitter.heron.packing.AssertPacking+assertPackingPlan(String,Pair<Integer,InstanceId>[],PackingPlan) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlanRepack(Topology,PackingPlan,Map<String,Integer>) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getResourceCompliantRRPackingPlanRepack(Topology,PackingPlan,Map<String,Integer>) com.twitter.heron.packing.AssertPacking+assertPackingPlan(String,Pair<Integer,InstanceId>[],PackingPlan) com.twitter.heron.packing.AssertPacking+assertPackingPlan(String,Pair<Integer,InstanceId>[],PackingPlan)",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topology com.twitter.heron.packing.roundrobin.ResourceCompliantRRPacking+DEFAULT_CONTAINER_PADDING_PERCENTAGE com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topology,1085,18,2,,"private void doScaleDownTest(Pair<Integer, InstanceId>[] initialComponentInstances,
                               Map<String, Integer> componentChanges,
                               Pair<Integer, InstanceId>[] expectedComponentInstances)
      throws ResourceExceededException {
    String topologyId = topology.getId();

    // The padding percentage used in repack() must be <= one as used in pack(), otherwise we can't
    // reconstruct the PackingPlan, see https://github.com/twitter/heron/issues/1577
    PackingPlan initialPackingPlan = PackingTestHelper.addToTestPackingPlan(
        topologyId, null, PackingTestHelper.toContainerIdComponentNames(initialComponentInstances),
        ResourceCompliantRRPacking.DEFAULT_CONTAINER_PADDING_PERCENTAGE);
    AssertPacking.assertPackingPlan(topologyId, initialComponentInstances, initialPackingPlan);

    PackingPlan newPackingPlan =
        getResourceCompliantRRPackingPlanRepack(topology, initialPackingPlan, componentChanges);

    AssertPacking.assertPackingPlan(topologyId, expectedComponentInstances, newPackingPlan);
  }",True,True,"The function `doScaleDownTest` is a private method that performs a scale-down test. It takes in an array of initial component instances, a map of component changes, and an array of expected component instances. It throws a `ResourceExceededException`. The method first creates an initial packing plan based on the initial component instances and asserts that the packing plan is correct. Then, it creates a new packing plan based on the initial packing plan and the component changes. Finally, it asserts that the new packing plan matches the expected component instances.",False,"The given code is a private method named ""doScaleDownTest"" that takes in an array of initial component instances, a map of component changes, and an array of expected component instances. It throws a ""ResourceExceededException"". The method performs various assertions on the packing plan of a topology, including adding to the packing plan, repacking it, and asserting the expected packing plan."
39,removeFirstContainer(),remove first container test the scenario where the scaling down is requested and the first container is removed ,Method,,,"java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME,1210,25,1,"/** 
 * Test the scenario where the scaling down is requested and the first container is removed
 */
","/**
   * Test the scenario where the scaling down is requested and the first container is removed
   */
  @Test
  public void removeFirstContainer() throws Exception {
    int spoutScalingDown = -3;
    int boltScalingDown = -3;

     /* The packing plan consists of two containers. The first one contains 2 spouts and 2 bolts
       the second one contains 2 spouts and 1 bolt. During scaling we remove 3 spouts and 3 bolts
       and thus the first container is removed.
     */
    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(SPOUT_NAME, spoutScalingDown); //leave 1 spout
    componentChanges.put(BOLT_NAME, boltScalingDown); //leave 1 bolt
    int numContainersBeforeRepack = 2;
    PackingPlan newPackingPlan = doDefaultScalingTest(componentChanges, numContainersBeforeRepack);
    Assert.assertEquals(1, newPackingPlan.getContainers().size());
    Assert.assertEquals((Integer) (totalInstances + spoutScalingDown + boltScalingDown),
        newPackingPlan.getInstanceCount());
    AssertPacking.assertNumInstances(newPackingPlan.getContainers(),
        BOLT_NAME, 0);
    AssertPacking.assertNumInstances(newPackingPlan.getContainers(),
        SPOUT_NAME, 1);
  }",False,False,"The function tests the scenario where scaling down is requested and the first container is removed. It creates a packing plan with two containers, removes a specified number of spouts and bolts, and verifies that the first container is removed and the remaining containers have the correct number of instances.",False,"The code is a test method that verifies the behavior of scaling down in a packing plan. It removes a specified number of spouts and bolts from the packing plan and checks if the first container is correctly removed, leaving only one spout and no bolts in the remaining container."
40,scaleDownAndUp(),scale down and up test the scenario where scaling down and up is simultaneously requested ,Method,,,"java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME,921,21,1,"/** 
 * Test the scenario where scaling down and up is simultaneously requested
 */
","/**
   * Test the scenario where scaling down and up is simultaneously requested
   */
  @Test
  public void scaleDownAndUp() throws Exception {
    int spoutScalingDown = -4;
    int boltScalingUp = 6;

    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(SPOUT_NAME, spoutScalingDown); // 0 spouts
    componentChanges.put(BOLT_NAME, boltScalingUp); // 9 bolts
    int numContainersBeforeRepack = 2;
    PackingPlan newPackingPlan = doDefaultScalingTest(componentChanges, numContainersBeforeRepack);
    Assert.assertEquals(3, newPackingPlan.getContainers().size());
    Assert.assertEquals((Integer) (totalInstances + spoutScalingDown + boltScalingUp),
        newPackingPlan.getInstanceCount());
    AssertPacking.assertNumInstances(newPackingPlan.getContainers(),
        BOLT_NAME, 9);
    AssertPacking.assertNumInstances(newPackingPlan.getContainers(),
        SPOUT_NAME, 0);
  }",True,True,"The function of the method is to test the scenario where scaling down and up is simultaneously requested. It sets the scaling values for the spout and bolt, creates a map of component changes, performs a scaling test, and asserts the expected results.",False,"The code is a test method that checks the behavior of scaling down and up simultaneously in a system. It creates a map of component changes, specifies the number of containers before repacking, and asserts the expected number of containers and instances after scaling."
41,scaleDownAndUpWithExtraPadding(),scale down and up with extra padding test the scenario where scaling down and up is simultaneously requested and padding is configured ,Method,,,"com.twitter.heron.api.Config+setContainerPaddingPercentage(int) com.twitter.heron.api.Config+setContainerPaddingPercentage(int) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setNumStmgrs(int) com.twitter.heron.api.Config+setNumStmgrs(int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScalingTest(Topology,Map<String,Integer>,ByteAmount,int,ByteAmount,int,int,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScalingTest(Topology,Map<String,Integer>,ByteAmount,int,ByteAmount,int,int,int) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME,1786,42,1,"/** 
 * Test the scenario where scaling down and up is simultaneously requested and padding is configured
 */
","/**
   * Test the scenario where scaling down and up is simultaneously requested and padding is
   * configured
   */
  @Test
  public void scaleDownAndUpWithExtraPadding() throws Exception {
    int paddingPercentage = 50;
    int numContainers = 1;
    topologyConfig.setContainerPaddingPercentage(paddingPercentage);
    // Explicit set resources for container
    ByteAmount maxContainerRam = ByteAmount.fromGigabytes(12);
    // Explicit set component ram map
    ByteAmount spoutRam = ByteAmount.fromGigabytes(2);
    topologyConfig.setContainerRamRequested(maxContainerRam);
    topologyConfig.setComponentRam(SPOUT_NAME, spoutRam);
    topologyConfig.setNumStmgrs(numContainers);

    int noBolts = 2;
    int noSpouts = 1;

    TopologyAPI.Topology topologyExplicitRamMap =
        getTopology(noSpouts, noBolts, topologyConfig);

    int spoutScalingUp = 1;
    int boltScalingDown = -2;

    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(SPOUT_NAME, spoutScalingUp); // 2 spouts
    componentChanges.put(BOLT_NAME, boltScalingDown); // 0 bolts
    int numContainersBeforeRepack = 1;
    PackingPlan newPackingPlan = doScalingTest(topologyExplicitRamMap, componentChanges,
        instanceDefaultResources.getRam(), noBolts, spoutRam, noSpouts,
        numContainersBeforeRepack, noSpouts + noBolts);

    Assert.assertEquals(1, newPackingPlan.getContainers().size());
    Assert.assertEquals((Integer) (noSpouts + noBolts + spoutScalingUp + boltScalingDown),
        newPackingPlan.getInstanceCount());
    AssertPacking.assertNumInstances(newPackingPlan.getContainers(),
        BOLT_NAME, noBolts + boltScalingDown);
    AssertPacking.assertNumInstances(newPackingPlan.getContainers(),
        SPOUT_NAME, noSpouts + spoutScalingUp);
  }",False,False,"The function of this method is to test a scenario where scaling down and up is simultaneously requested, and padding is configured. It sets up the necessary configurations, performs the scaling test, and asserts the expected results.",False,"The code is testing a scenario where scaling down and up is simultaneously requested with padding configured. It sets the resources and RAM for the containers and components, and then performs the scaling test to check the new packing plan. The function summary is to verify the behavior of scaling down and up with padding in a topology."
42,scaleDownAndUpNoPadding(),scale down and up no padding test the scenario where scaling down and up is simultaneously requested and padding is configured ,Method,,,"com.twitter.heron.api.Config+setContainerPaddingPercentage(int) com.twitter.heron.api.Config+setContainerPaddingPercentage(int) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.common.basics.ByteAmount+fromGigabytes(long) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setContainerRamRequested(ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setComponentRam(String,ByteAmount) com.twitter.heron.api.Config+setNumStmgrs(int) com.twitter.heron.api.Config+setNumStmgrs(int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+getTopology(int,int,Config) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScalingTest(Topology,Map<String,Integer>,ByteAmount,int,ByteAmount,int,int,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doScalingTest(Topology,Map<String,Integer>,ByteAmount,int,ByteAmount,int,int,int) com.twitter.heron.spi.packing.Resource+getRam() com.twitter.heron.spi.packing.Resource+getRam() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+topologyConfig com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+instanceDefaultResources com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME,1779,43,1,"/** 
 * Test the scenario where scaling down and up is simultaneously requested and padding is configured
 */
","/**
   * Test the scenario where scaling down and up is simultaneously requested and padding is
   * configured
   */
  @Test
  public void scaleDownAndUpNoPadding() throws Exception {
    int paddingPercentage = 0;
    int numContainers = 1;

    topologyConfig.setContainerPaddingPercentage(paddingPercentage);
    // Explicit set resources for container
    ByteAmount maxContainerRam = ByteAmount.fromGigabytes(12);
    // Explicit set component ram map
    ByteAmount spoutRam = ByteAmount.fromGigabytes(4);
    topologyConfig.setContainerRamRequested(maxContainerRam);
    topologyConfig.setComponentRam(SPOUT_NAME, spoutRam);
    topologyConfig.setNumStmgrs(numContainers);

    int noBolts = 3;
    int noSpouts = 1;

    TopologyAPI.Topology topologyExplicitRamMap =
        getTopology(noSpouts, noBolts, topologyConfig);

    int spoutScalingUp = 1;
    int boltScalingDown = -1;

    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(SPOUT_NAME, spoutScalingUp); // 2 spouts
    componentChanges.put(BOLT_NAME, boltScalingDown); // 2 bolts
    int numContainersBeforeRepack = 1;
    PackingPlan newPackingPlan = doScalingTest(topologyExplicitRamMap, componentChanges,
        instanceDefaultResources.getRam(), noBolts, spoutRam, noSpouts,
        numContainersBeforeRepack, noSpouts + noBolts);

    Assert.assertEquals(2, newPackingPlan.getContainers().size());
    Assert.assertEquals((Integer) (noSpouts + noBolts + spoutScalingUp + boltScalingDown),
        newPackingPlan.getInstanceCount());
    AssertPacking.assertNumInstances(newPackingPlan.getContainers(),
        BOLT_NAME, noBolts + boltScalingDown);
    AssertPacking.assertNumInstances(newPackingPlan.getContainers(),
        SPOUT_NAME, noSpouts + spoutScalingUp);
  }",False,False,"The function of this method is to test a scenario where scaling down and up is simultaneously requested, and padding is configured. It sets up the necessary configurations, performs the scaling test, and asserts the expected results.",False,"The code is testing a scenario where scaling down and up is requested simultaneously with padding configured. It sets the resources and RAM for the containers and components, creates a topology, and performs scaling tests to verify the expected number of instances and containers after scaling."
43,scaleUpMultiple(),scale up multiple ,Method,,,"java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int) com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+doDefaultScalingTest(Map<String,Integer>,int) java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() java.util.Set+size() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.spi.packing.PackingPlan+getInstanceCount() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.packing.AssertPacking+assertNumInstances(Set<ContainerPlan>,String,int) com.twitter.heron.spi.packing.PackingPlan+getContainers() com.twitter.heron.spi.packing.PackingPlan+getContainers()",com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+totalInstances com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+BOLT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+boltParallelism com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+SPOUT_NAME com.twitter.heron.packing.roundrobin.ResourceCompliantRRPackingTest+spoutParallelism,888,18,1,,"@Test
  public void scaleUpMultiple() throws Exception {
    int spoutScalingUp = 4;
    int boltScalingUp = 4;

    Map<String, Integer> componentChanges = new HashMap<>();
    componentChanges.put(SPOUT_NAME, spoutScalingUp); // 8 spouts
    componentChanges.put(BOLT_NAME, boltScalingUp); // 8 bolts
    int numContainersBeforeRepack = 2;
    PackingPlan newPackingPlan = doDefaultScalingTest(componentChanges, numContainersBeforeRepack);
    Assert.assertEquals(4, newPackingPlan.getContainers().size());
    Assert.assertEquals((Integer) (totalInstances + spoutScalingUp + boltScalingUp),
        newPackingPlan.getInstanceCount());
    AssertPacking.assertNumInstances(newPackingPlan.getContainers(),
        BOLT_NAME, boltParallelism + boltScalingUp);
    AssertPacking.assertNumInstances(newPackingPlan.getContainers(),
        SPOUT_NAME, spoutParallelism + spoutScalingUp);
  }",False,False,"The function of this method is to test the scaling up of spouts and bolts in a system. It creates a map of component changes, with the number of spouts and bolts to be scaled up. It then calls the doDefaultScalingTest method with the component changes and the number of containers before repack. Finally, it asserts various conditions to ensure that the scaling up was successful.",False,"The code is a test method that checks the scaling up functionality of a system. It creates a map of component changes, specifying the number of spouts and bolts to scale up, and then verifies that the new packing plan contains the expected number of containers and instances for the scaled up components."
