index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,DATE_PATTERN,date pattern ,Field,,,,,57,1,24,,"static final String DATE_PATTERN = ""yyyy-MM-dd_HH_mm_ss"";",False,True,,False,
2,sdf,sdf ,Field,,,,,58,1,0,,SimpleDateFormat sdf = new SimpleDateFormat(DATE_PATTERN);,True,True,,False,
3,layout,layout ,Field,,,,,53,1,0,,EchoLayout<Object> layout = new EchoLayout<Object>();,True,True,,False,
4,context,context ,Field,,,,,36,1,0,,Context context = new ContextBase();,True,True,,False,
5,rfa1,rfa1 ,Field,,,,,69,1,0,,RollingFileAppender<Object> rfa1 = new RollingFileAppender<Object>();,False,False,,False,
6,tbrp1,tbrp1 ,Field,,,,,76,1,0,,TimeBasedRollingPolicy<Object> tbrp1 = new TimeBasedRollingPolicy<Object>();,False,False,,False,
7,rfa2,rfa2 ,Field,,,,,69,1,0,,RollingFileAppender<Object> rfa2 = new RollingFileAppender<Object>();,False,False,,False,
8,tbrp2,tbrp2 ,Field,,,,,76,1,0,,TimeBasedRollingPolicy<Object> tbrp2 = new TimeBasedRollingPolicy<Object>();,False,False,,False,
9,cal,cal ,Field,,,,,38,1,0,,Calendar cal = Calendar.getInstance();,True,True,,False,
10,currentTime,current time ,Field,,,,,17,1,0,,long currentTime;,True,True,,False,
11,nextRolloverThreshold,next rollover threshold ,Field,,,,,27,1,0,,long nextRolloverThreshold;,True,True,,False,
12,expectedFilenameList,expected filename list ,Field,,,,,60,1,0,,List<String> expectedFilenameList = new ArrayList<String>();,True,True,,False,
13,setUp(),set up ,Method,,,"ch.qos.logback.core.Context+setName(String) ch.qos.logback.core.Context+setName(String) java.util.Calendar+set(int,int) java.util.Calendar+set(int,int) java.util.Calendar+getTimeInMillis() java.util.Calendar+getTimeInMillis() ch.qos.logback.core.rolling.TimeBasedRollingTest+recomputeRolloverThreshold(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+recomputeRolloverThreshold(long) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.text.DateFormat+format(Date) java.text.DateFormat+format(Date) java.sql.Date+Date(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+deleteStaleLogFile(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+deleteStaleLogFile(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+deleteStaleLogFile(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+deleteStaleLogFile(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+deleteStaleLogFile(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+deleteStaleLogFile(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+deleteStaleLogFile(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+deleteStaleLogFile(String)",ch.qos.logback.core.rolling.TimeBasedRollingTest+context ch.qos.logback.core.rolling.TimeBasedRollingTest+cal java.util.Calendar+MILLISECOND ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+cal ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime java.lang.System+out ch.qos.logback.core.rolling.TimeBasedRollingTest+sdf ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime,474,15,1,,"@Before
  public void setUp() {
    context.setName(""test"");
    cal.set(Calendar.MILLISECOND, 333);
    currentTime = cal.getTimeInMillis();
    recomputeRolloverThreshold(currentTime);
    System.out.println(""at setUp() currentTime=""
        + sdf.format(new Date(currentTime)));

    // Delete .log files
    deleteStaleLogFile(""test4.log"");
    deleteStaleLogFile(""test4B.log"");
    deleteStaleLogFile(""test5.log"");
    deleteStaleLogFile(""test6.log"");
  }",False,False,"This method is a setup method that is executed before each test. It sets the name of the context, sets the millisecond of the calendar, computes the rollover threshold, prints the current time, and deletes stale log files.",False,"The code is a setup method that is executed before each test. It sets the name of the context, sets the millisecond value of the calendar, computes the rollover threshold, and prints the current time. It also deletes stale log files with specific names."
14,deleteStaleLogFile(String),delete stale log file filename ,Method,setUp() setUp() setUp() setUp(),,java.io.File+File(String) java.io.File+mkdirs() java.io.File+mkdirs() java.io.File+delete() java.io.File+delete(),ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX,168,5,0,,"void deleteStaleLogFile(String filename) {
    File target = new File(CoreTestConstants.OUTPUT_DIR_PREFIX + filename);
    target.mkdirs();
    target.delete();
  }",False,False,"This method deletes a stale log file by creating a file object with the given filename, creating any necessary directories, and then deleting the file.",True,The given code defines a method called `deleteStaleLogFile` that takes a filename as input. It creates a file object with the given filename and deletes it if it exists. The method is used to delete a stale log file from the specified output directory.
15,tearDown(),tear down ,Method,,,,,39,3,1,,"@After
  public void tearDown() {
  }",False,False,This method serves as a teardown method that is executed after each test case in a test suite.,False,"The code snippet contains a method named ""tearDown"" which is annotated with ""@After"". This method is likely used in a testing framework to perform cleanup tasks after each test case execution. However, without any code inside the method, its functionality cannot be determined."
16,"initRFA(RollingFileAppender<Object>,String)",init rfa rfa filename ,Method,noCompression_FileBlank_NoRestart_1() withCompression_FileBlank_NoRestart_2() noCompression_FileBlank_StopRestart_3() noCompression_FileBlank_StopRestart_3() noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_NoRestart_5() withCompression_FileSet_NoRestart_6(),,ch.qos.logback.core.spi.ContextAwareBase+setContext(Context) ch.qos.logback.core.spi.ContextAwareBase+setContext(Context) ch.qos.logback.core.UnsynchronizedAppenderBase+setLayout(Layout<E>) ch.qos.logback.core.UnsynchronizedAppenderBase+setLayout(Layout<E>) ch.qos.logback.core.rolling.RollingFileAppender+setFile(String) ch.qos.logback.core.rolling.RollingFileAppender+setFile(String),ch.qos.logback.core.rolling.TimeBasedRollingTest+context ch.qos.logback.core.rolling.TimeBasedRollingTest+layout,193,7,0,,"void initRFA(RollingFileAppender<Object> rfa, String filename) {
    rfa.setContext(context);
    rfa.setLayout(layout);
    if (filename != null) {
      rfa.setFile(filename);
    }
  }",False,False,"This method initializes a RollingFileAppender by setting its context and layout. If a filename is provided, it sets the file for the appender.",True,"The given code defines a method called ""initRFA"" that initializes a RollingFileAppender object with a specified filename. It sets the context and layout for the appender, and if a filename is provided, it sets the file for the appender as well."
17,"initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long)",init trbp rfa tbrp filename pattern given time last check ,Method,noCompression_FileBlank_NoRestart_1() withCompression_FileBlank_NoRestart_2() noCompression_FileBlank_StopRestart_3() noCompression_FileBlank_StopRestart_3() noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_NoRestart_5() withCompression_FileSet_NoRestart_6(),,ch.qos.logback.core.spi.ContextAwareBase+setContext(Context) ch.qos.logback.core.spi.ContextAwareBase+setContext(Context) ch.qos.logback.core.rolling.RollingPolicyBase+setFileNamePattern(String) ch.qos.logback.core.rolling.RollingPolicyBase+setFileNamePattern(String) ch.qos.logback.core.rolling.RollingPolicyBase+setParent(FileAppender) ch.qos.logback.core.rolling.RollingPolicyBase+setParent(FileAppender) ch.qos.logback.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy+DefaultTimeBasedFileNamingAndTriggeringPolicy() ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setDateInCurrentPeriod(Date) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setDateInCurrentPeriod(Date) java.sql.Date+Date(long) ch.qos.logback.core.rolling.RollingFileAppender+setRollingPolicy(RollingPolicy) ch.qos.logback.core.rolling.RollingFileAppender+setRollingPolicy(RollingPolicy) ch.qos.logback.core.rolling.TimeBasedRollingPolicy+start() ch.qos.logback.core.rolling.TimeBasedRollingPolicy+start() ch.qos.logback.core.rolling.RollingFileAppender+start() ch.qos.logback.core.rolling.RollingFileAppender+start(),ch.qos.logback.core.rolling.TimeBasedRollingTest+context ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering,588,14,0,,"void initTRBP(RollingFileAppender<Object> rfa, TimeBasedRollingPolicy<Object> tbrp,
      String filenamePattern, long givenTime, long lastCheck) {
    tbrp.setContext(context);
    tbrp.setFileNamePattern(filenamePattern);
    tbrp.setParent(rfa);
    tbrp.timeBasedTriggering = new DefaultTimeBasedFileNamingAndTriggeringPolicy<Object>();
    tbrp.timeBasedTriggering.setCurrentTime(givenTime);
    if (lastCheck != 0) {
      tbrp.timeBasedTriggering.setDateInCurrentPeriod(new Date(lastCheck));
    }
    rfa.setRollingPolicy(tbrp);
    tbrp.start();
    rfa.start();
  }",False,False,"The function initializes a TimeBasedRollingPolicy for a RollingFileAppender. It sets the context, filename pattern, parent, and triggering policy for the rolling policy. It also sets the current time and date in the current period if provided. Finally, it sets the rolling policy for the RollingFileAppender and starts both the rolling policy and the RollingFileAppender.",True,"This code initializes a TimeBasedRollingPolicy for a RollingFileAppender. It sets the necessary properties for the policy, such as the filename pattern and triggering policy based on given time and last check. Finally, it starts the policy and the appender."
18,noCompression_FileBlank_NoRestart_1(),nocompression fileblank norestart 1 test rolling without compression file option left blank no stop start ,Method,,,"ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.util.Compare+compare(String,String) ch.qos.logback.core.util.Compare+compare(String,String)",ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX ch.qos.logback.core.rolling.TimeBasedRollingTest+DATE_PATTERN ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+expectedFilenameList ch.qos.logback.core.util.CoreTestConstants+TEST_DIR_PREFIX,1002,29,1,"/** 
 * Test rolling without compression, file option left blank, no stop/start
 */
","/**
   * Test rolling without compression, file option left blank, no stop/start
   */
  @Test
  public void noCompression_FileBlank_NoRestart_1() throws Exception {
    String testId = ""test1"";
    initRFA(rfa1, null);
    initTRBP(rfa1, tbrp1, CoreTestConstants.OUTPUT_DIR_PREFIX + testId + ""-%d{""
        + DATE_PATTERN + ""}"", currentTime, 0);

    // compute the current filename
    addExpectedFileName_ByDate(testId, getDateOfCurrentPeriodsStart(), false);

    incCurrentTime(1100);
    tbrp1.timeBasedTriggering.setCurrentTime(currentTime);

    for (int i = 0; i < 3; i++) {
      rfa1.doAppend(""Hello---"" + i);
      addExpectedFileNamedIfItsTime_ByDate(testId, false);
      incCurrentTime(500);
      tbrp1.timeBasedTriggering.setCurrentTime(currentTime);
    }

    int i = 0;
    for (String fn : expectedFilenameList) {
      assertTrue(Compare.compare(fn, CoreTestConstants.TEST_DIR_PREFIX
          + ""witness/rolling/tbr-"" + testId + ""."" + i++));
    }
  }",False,False,"This method is a test case that checks the behavior of rolling without compression. It initializes some variables, computes the current filename, appends some log messages, and compares the expected filenames with the actual filenames.",False,"This code is a unit test for a method that tests rolling without compression. It initializes a RollingFileAppender and a TimeBasedRollingPolicy, sets the current time, appends log messages, and compares the expected filenames with the actual filenames."
19,withCompression_FileBlank_NoRestart_2(),withcompression fileblank norestart 2 with compression file option left blank no stop restart ,Method,,,"ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) java.util.concurrent.Future+get(long,TimeUnit) java.util.concurrent.Future+get(long,TimeUnit) ch.qos.logback.core.util.Compare+compare(String,String) ch.qos.logback.core.util.Compare+compare(String,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+addGZIfNotLast(int) ch.qos.logback.core.rolling.TimeBasedRollingTest+addGZIfNotLast(int)",ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX ch.qos.logback.core.rolling.TimeBasedRollingTest+DATE_PATTERN ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+future java.util.concurrent.TimeUnit+MILLISECONDS ch.qos.logback.core.rolling.TimeBasedRollingTest+expectedFilenameList ch.qos.logback.core.util.CoreTestConstants+TEST_DIR_PREFIX,1101,31,1,"/** 
 * With compression, file option left blank, no stop/restart
 */
","/**
   * With compression, file option left blank, no stop/restart
   */
  @Test
  public void withCompression_FileBlank_NoRestart_2() throws Exception {
    String testId = ""test2"";
    initRFA(rfa1, null);
    initTRBP(rfa1, tbrp1, CoreTestConstants.OUTPUT_DIR_PREFIX + testId + ""-%d{""
        + DATE_PATTERN + ""}.gz"", currentTime, 0);

    addExpectedFileName_ByDate(testId, getDateOfCurrentPeriodsStart(), true);
    incCurrentTime(1100);
    tbrp1.timeBasedTriggering.setCurrentTime(currentTime);

    for (int i = 0; i < 3; i++) {
      // when i == 2, file name should not have .gz extension
      addExpectedFileNamedIfItsTime_ByDate(testId, i != 2);
      rfa1.doAppend(""Hello---"" + i);
      incCurrentTime(500);
      tbrp1.timeBasedTriggering.setCurrentTime(currentTime);
    }

    tbrp1.future.get(2000, TimeUnit.MILLISECONDS);

    int i = 0;
    for (String fn : expectedFilenameList) {
      assertTrue(Compare.compare(fn, CoreTestConstants.TEST_DIR_PREFIX
          + ""witness/rolling/tbr-"" + testId + ""."" + i + addGZIfNotLast(i)));
      i++;
    }
  }",False,False,"The function of this method is to test the behavior of a logging system with compression enabled, where the file option is left blank and there is no stop/restart functionality. It appends log messages to the file and checks if the expected file names match the actual file names.",False,This code is a test method that checks the behavior of a log file rolling policy with compression enabled. It appends log messages to the file and verifies that the expected file names are created based on the current time and date. The test also checks that the file names have the correct extension (.gz) when necessary.
20,noCompression_FileBlank_StopRestart_3(),nocompression fileblank stoprestart 3 no compression file option left blank with stop restart ,Method,,,"ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.WriterAppender+stop() ch.qos.logback.core.WriterAppender+stop() ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+getCurrentTime() ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+getCurrentTime() ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.util.Compare+compare(String,String) ch.qos.logback.core.util.Compare+compare(String,String)",ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX ch.qos.logback.core.rolling.TimeBasedRollingTest+DATE_PATTERN ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa2 ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa2 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp2 ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX ch.qos.logback.core.rolling.TimeBasedRollingTest+DATE_PATTERN ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa2 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp2 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+expectedFilenameList ch.qos.logback.core.util.CoreTestConstants+TEST_DIR_PREFIX,1454,43,1,"/** 
 * No compression, file option left blank, with stop/restart,
 */
","/**
   * No compression, file option left blank, with stop/restart,
   */
  @Test
  public void noCompression_FileBlank_StopRestart_3() throws Exception {
    String testId = ""test3"";

    initRFA(rfa1, null);
    initTRBP(rfa1, tbrp1, CoreTestConstants.OUTPUT_DIR_PREFIX + testId + ""-%d{""
        + DATE_PATTERN + ""}"", currentTime, 0);

    // a new file is created by virtue of rfa.start();
    addExpectedFileName_ByDate(testId, getDateOfCurrentPeriodsStart(), false);

    incCurrentTime(1100);
    tbrp1.timeBasedTriggering.setCurrentTime(currentTime);

    for (int i = 0; i <= 2; i++) {
      rfa1.doAppend(""Hello---"" + i);
      addExpectedFileNamedIfItsTime_ByDate(testId, false);
      incCurrentTime(500);
      tbrp1.timeBasedTriggering.setCurrentTime(currentTime);
    }

    rfa1.stop();

    initRFA(rfa2, null);
    initTRBP(rfa2, tbrp2, CoreTestConstants.OUTPUT_DIR_PREFIX + testId + ""-%d{""
        + DATE_PATTERN + ""}"", tbrp1.timeBasedTriggering.getCurrentTime(), 0);

    for (int i = 0; i <= 2; i++) {
      addExpectedFileNamedIfItsTime_ByDate(testId, false);
      rfa2.doAppend(""World---"" + i);
      incCurrentTime(100);
      tbrp2.timeBasedTriggering.setCurrentTime(currentTime);
    }

    int i = 0;
    for (String fn : expectedFilenameList) {
      assertTrue(Compare.compare(fn, CoreTestConstants.TEST_DIR_PREFIX
          + ""witness/rolling/tbr-"" + testId + ""."" + i++));
    }
  }",False,False,"The function of this method is to test the behavior of a logging system when no compression is used, the file option is left blank, and stop/restart operations are performed.",False,"This code is a test method that checks the behavior of a logging system with no compression and a blank file option. It creates multiple log files based on the current date and time, stops the logging, and then restarts it with a new set of log files. The test verifies that the expected log file names match the actual file names."
21,noCompression_FileSet_StopRestart_4(),nocompression fileset stoprestart 4 without compression file option set with stop restart ,Method,,,"ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+testId2FileName(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+testId2FileName(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.WriterAppender+stop() ch.qos.logback.core.WriterAppender+stop() ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+testId2FileName(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+testId2FileName(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+massageExpectedFilesToCorresponToCurrentTarget(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+massageExpectedFilesToCorresponToCurrentTarget(String) ch.qos.logback.core.util.Compare+compare(String,String) ch.qos.logback.core.util.Compare+compare(String,String)",ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX ch.qos.logback.core.rolling.TimeBasedRollingTest+DATE_PATTERN ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa2 ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa2 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp2 ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX ch.qos.logback.core.rolling.TimeBasedRollingTest+DATE_PATTERN ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa2 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp2 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+expectedFilenameList ch.qos.logback.core.util.CoreTestConstants+TEST_DIR_PREFIX,1476,43,1,"/** 
 * Without compression, file option set, with stop/restart
 */
","/**
   * Without compression, file option set, with stop/restart
   */
  @Test
  public void noCompression_FileSet_StopRestart_4() throws Exception {
    String testId = ""test4"";
    initRFA(rfa1, testId2FileName(testId));
    initTRBP(rfa1, tbrp1, CoreTestConstants.OUTPUT_DIR_PREFIX + testId + ""-%d{""
        + DATE_PATTERN + ""}"", currentTime, 0);

    addExpectedFileName_ByDate(testId, getDateOfCurrentPeriodsStart(), false);

    incCurrentTime(1100);
    tbrp1.timeBasedTriggering.setCurrentTime(currentTime);

    for (int i = 0; i <= 2; i++) {
      rfa1.doAppend(""Hello---"" + i);
      addExpectedFileNamedIfItsTime_ByDate(testId, false);
      incCurrentTime(500);
      tbrp1.timeBasedTriggering.setCurrentTime(currentTime);
    }

    rfa1.stop();

    initRFA(rfa2, testId2FileName(testId));
    initTRBP(rfa2, tbrp2, CoreTestConstants.OUTPUT_DIR_PREFIX + testId + ""-%d{""
        + DATE_PATTERN + ""}"", currentTime, currentTime);

    for (int i = 0; i <= 2; i++) {
      rfa2.doAppend(""World---"" + i);
      addExpectedFileNamedIfItsTime_ByDate(testId, false);
      incCurrentTime(100);
      tbrp2.timeBasedTriggering.setCurrentTime(currentTime);
    }

    massageExpectedFilesToCorresponToCurrentTarget(""test4.log"");

    int i = 0;
    for (String fn : expectedFilenameList) {
      assertTrue(Compare.compare(fn, CoreTestConstants.TEST_DIR_PREFIX
          + ""witness/rolling/tbr-"" + testId + ""."" + i++));
    }
  }",False,False,"The function of this method is to test the behavior of a logging system without compression, with the file option set, and with the ability to stop and restart. It appends log messages to two different loggers and verifies that the expected log files are created.",False,"This code is a test method that checks the behavior of a logging system without compression, with the option to stop and restart. It initializes two RollingFileAppenders (rfa1 and rfa2) with different configurations, appends log messages to them, stops rfa1, initializes rfa2 with the same file name, and appends more log messages to it. Finally, it compares the expected file names with the actual file names to verify the correctness of the logging system."
22,noCompression_FileSet_StopRestart_WithLongWait_4B(),nocompression fileset stoprestart withlongwait 4b ,Method,,,"ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+testId2FileName(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+testId2FileName(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.WriterAppender+stop() ch.qos.logback.core.WriterAppender+stop() ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+massageExpectedFilesToCorresponToCurrentTarget(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+massageExpectedFilesToCorresponToCurrentTarget(String) ch.qos.logback.core.util.Compare+compare(String,String) ch.qos.logback.core.util.Compare+compare(String,String)",ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX ch.qos.logback.core.rolling.TimeBasedRollingTest+DATE_PATTERN ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa2 ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa2 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp2 ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX ch.qos.logback.core.rolling.TimeBasedRollingTest+DATE_PATTERN ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa2 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp2 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+expectedFilenameList ch.qos.logback.core.util.CoreTestConstants+TEST_DIR_PREFIX,1514,45,1,,"@Test
  public void noCompression_FileSet_StopRestart_WithLongWait_4B()
      throws Exception {
    String testId = ""test4B"";
    initRFA(rfa1, testId2FileName(testId));
    initTRBP(rfa1, tbrp1, CoreTestConstants.OUTPUT_DIR_PREFIX + testId + ""-%d{""
        + DATE_PATTERN + ""}"", currentTime, 0);

    addExpectedFileName_ByDate(testId, getDateOfCurrentPeriodsStart(), false);

    incCurrentTime(1100);
    tbrp1.timeBasedTriggering.setCurrentTime(currentTime);

    for (int i = 0; i <= 2; i++) {
      rfa1.doAppend(""Hello---"" + i);
      addExpectedFileNamedIfItsTime_ByDate(testId, false);
      incCurrentTime(500);
      tbrp1.timeBasedTriggering.setCurrentTime(currentTime);
    }

    rfa1.stop();

    long fileTimestamp = currentTime;
    incCurrentTime(2000);

    initRFA(rfa2, CoreTestConstants.OUTPUT_DIR_PREFIX + ""test4B.log"");
    initTRBP(rfa2, tbrp2, CoreTestConstants.OUTPUT_DIR_PREFIX + testId + ""-%d{""
        + DATE_PATTERN + ""}"", currentTime, fileTimestamp);

    for (int i = 0; i <= 2; i++) {
      rfa2.doAppend(""World---"" + i);
      addExpectedFileNamedIfItsTime_ByDate(testId, false);
      incCurrentTime(100);
      tbrp2.timeBasedTriggering.setCurrentTime(currentTime);
    }

    massageExpectedFilesToCorresponToCurrentTarget(""test4B.log"");

    int i = 0;
    for (String fn : expectedFilenameList) {
      assertTrue(Compare.compare(fn, CoreTestConstants.TEST_DIR_PREFIX
          + ""witness/rolling/tbr-test4B."" + i++));
    }

  }",False,False,"The function of this method is to test the behavior of a file appender with time-based rolling policy, when the appender is stopped and restarted with a long wait time. It appends log messages to two different file appenders and compares the expected file names with the actual file names.",False,"This code is a JUnit test method that tests the behavior of a file appender with time-based rolling policy. It appends log messages to two different file appenders, stops the first appender, restarts it with a different file name, and continues appending log messages. The test verifies that the expected log files are created and have the correct content."
23,noCompression_FileSet_NoRestart_5(),nocompression fileset norestart 5 no compression file option set without stop restart ,Method,,,"ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+testId2FileName(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+testId2FileName(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+massageExpectedFilesToCorresponToCurrentTarget(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+massageExpectedFilesToCorresponToCurrentTarget(String) ch.qos.logback.core.util.Compare+compare(String,String) ch.qos.logback.core.util.Compare+compare(String,String)",ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX ch.qos.logback.core.rolling.TimeBasedRollingTest+DATE_PATTERN ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+expectedFilenameList ch.qos.logback.core.util.CoreTestConstants+TEST_DIR_PREFIX,1025,31,1,"/** 
 * No compression, file option set, without stop/restart
 */
","/**
   * No compression, file option set, without stop/restart
   */
  @Test
  public void noCompression_FileSet_NoRestart_5() throws Exception {
    String testId = ""test5"";

    initRFA(rfa1, testId2FileName(testId));
    initTRBP(rfa1, tbrp1, CoreTestConstants.OUTPUT_DIR_PREFIX + testId + ""-%d{""
        + DATE_PATTERN + ""}"", currentTime, 0);

    addExpectedFileName_ByDate(testId, getDateOfCurrentPeriodsStart(), false);

    incCurrentTime(1100);
    tbrp1.timeBasedTriggering.setCurrentTime(currentTime);

    for (int i = 0; i < 3; i++) {
      rfa1.doAppend(""Hello---"" + i);
      addExpectedFileNamedIfItsTime_ByDate(testId, false);
      incCurrentTime(500);
      tbrp1.timeBasedTriggering.setCurrentTime(currentTime);
    }

    massageExpectedFilesToCorresponToCurrentTarget(""test5.log"");

    int i = 0;
    for (String fn : expectedFilenameList) {
      assertTrue(Compare.compare(fn, CoreTestConstants.TEST_DIR_PREFIX
          + ""witness/rolling/tbr-test5."" + i++));
    }
  }",False,False,"The function of this method is to test a specific scenario where no compression is used, a file option is set, and there is no stop/restart functionality. It performs various operations such as initializing variables, adding expected file names, appending log messages, and comparing expected file names with actual file names.",False,"This code is a test method that checks the behavior of a logging system when no compression is applied, a file option is set, and there is no stop/restart. It initializes the logging system, appends log messages, and compares the expected output files with the actual output files."
24,withCompression_FileSet_NoRestart_6(),withcompression fileset norestart 6 with compression file option set no stop restart ,Method,,,"ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initRFA(RollingFileAppender<Object>,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+testId2FileName(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+testId2FileName(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+initTRBP(RollingFileAppender<Object>,TimeBasedRollingPolicy<Object>,String,long,long) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.UnsynchronizedAppenderBase+doAppend(E) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileNamedIfItsTime_ByDate(String,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+incCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy+setCurrentTime(long) java.util.concurrent.Future+get(long,TimeUnit) java.util.concurrent.Future+get(long,TimeUnit) ch.qos.logback.core.rolling.TimeBasedRollingTest+massageExpectedFilesToCorresponToCurrentTarget(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+massageExpectedFilesToCorresponToCurrentTarget(String) ch.qos.logback.core.util.Compare+compare(String,String) ch.qos.logback.core.util.Compare+compare(String,String) ch.qos.logback.core.rolling.TimeBasedRollingTest+addGZIfNotLast(int) ch.qos.logback.core.rolling.TimeBasedRollingTest+addGZIfNotLast(int)",ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX ch.qos.logback.core.rolling.TimeBasedRollingTest+DATE_PATTERN ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+rfa1 ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+timeBasedTriggering ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+tbrp1 ch.qos.logback.core.rolling.TimeBasedRollingPolicy+future java.util.concurrent.TimeUnit+MILLISECONDS ch.qos.logback.core.rolling.TimeBasedRollingTest+expectedFilenameList ch.qos.logback.core.util.CoreTestConstants+TEST_DIR_PREFIX,1169,36,1,"/** 
 * With compression, file option set, no stop/restart,
 */
","/**
   * With compression, file option set, no stop/restart,
   */
  @Test
  public void withCompression_FileSet_NoRestart_6() throws Exception {

    String testId = ""test6"";

    initRFA(rfa1, testId2FileName(testId));
    initTRBP(rfa1, tbrp1, CoreTestConstants.OUTPUT_DIR_PREFIX + testId + ""-%d{""
        + DATE_PATTERN + ""}.gz"", currentTime, 0);

    addExpectedFileName_ByDate(testId, getDateOfCurrentPeriodsStart(), true);

    incCurrentTime(1100);
    tbrp1.timeBasedTriggering.setCurrentTime(currentTime);

    for (int i = 0; i < 3; i++) {
      rfa1.doAppend(""Hello---"" + i);
      addExpectedFileNamedIfItsTime_ByDate(testId, true);
      incCurrentTime(500);
      tbrp1.timeBasedTriggering.setCurrentTime(currentTime);
    }

    // wait for the compression task to finish
    tbrp1.future.get(1000, TimeUnit.MILLISECONDS);

    massageExpectedFilesToCorresponToCurrentTarget(""test6.log"");

    int i = 0;
    for (String fn : expectedFilenameList) {
      assertTrue(Compare.compare(fn, CoreTestConstants.TEST_DIR_PREFIX
          + ""witness/rolling/tbr-"" + testId + ""."" + i + addGZIfNotLast(i)));
      i++;
    }
  }",False,False,"The function of this method is to test the behavior of a logging system with compression enabled, a file option set, and no stop/restart. It appends log messages to a file, checks if the expected files are created, and compares them to witness files.",False,"This code is a test method that checks the behavior of a log file rolling policy with compression enabled and no stop/restart. It initializes a RollingFileAppender and a TimeBasedRollingPolicy, appends log messages, and verifies that the expected compressed log files are created."
25,testId2FileName(String),test id2 file name test id ,Method,noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_NoRestart_5() withCompression_FileSet_NoRestart_6(),,,ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX,111,3,0,,"String testId2FileName(String testId) {
    return CoreTestConstants.OUTPUT_DIR_PREFIX + testId + "".log"";
  }",False,False,This method takes a testId as input and returns a string that represents the file name for the corresponding test log file.,False,"The code defines a method named `testId2FileName` that takes a `testId` as input and returns a string representing a file name. The file name is constructed by concatenating a constant prefix (`CoreTestConstants.OUTPUT_DIR_PREFIX`) with the `testId` and the extension "".log""."
26,massageExpectedFilesToCorresponToCurrentTarget(String),massage expected files to correspon to current target file ,Method,noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_NoRestart_5() withCompression_FileSet_NoRestart_6(),,java.util.List+remove(int) java.util.List+remove(int) java.util.List+size() java.util.List+size() ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByFile(String) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByFile(String),ch.qos.logback.core.rolling.TimeBasedRollingTest+expectedFilenameList ch.qos.logback.core.rolling.TimeBasedRollingTest+expectedFilenameList,266,6,0,,"void massageExpectedFilesToCorresponToCurrentTarget(String file) {
    // we added one too many files by date
    expectedFilenameList.remove(expectedFilenameList.size() - 1);
    // since file is set, we have to add it
    addExpectedFileName_ByFile(file);
  }",False,False,This method removes the last file from the expectedFilenameList and then adds the given file to the list.,False,"The given code is a method named ""massageExpectedFilesToCorresponToCurrentTarget"" that takes a file as input. It removes the last file from the expectedFilenameList and then adds the given file to the list. This method is used to adjust the expected files to correspond to the current target."
27,addGZIfNotLast(int),add gz if not last i ,Method,withCompression_FileBlank_NoRestart_2() withCompression_FileSet_NoRestart_6(),,java.util.List+size() java.util.List+size(),ch.qos.logback.core.rolling.TimeBasedRollingTest+expectedFilenameList,176,8,0,,"String addGZIfNotLast(int i) {
    int lastIndex = expectedFilenameList.size() - 1;
    if (i != lastIndex) {
      return "".gz"";
    } else {
      return """";
    }
  }",True,True,"This method returns "".gz"" if the given index is not the last index in the expectedFilenameList, otherwise it returns an empty string.",False,"The code defines a method called ""addGZIfNotLast"" that takes an integer parameter. It checks if the integer is not the last index in a list called ""expectedFilenameList"" and returns "".gz"" if true, otherwise it returns an empty string."
28,"addExpectedFileName_ByDate(String,Date,boolean)",addexpectedfilename bydate test id date gz extension ,Method,"noCompression_FileBlank_NoRestart_1() withCompression_FileBlank_NoRestart_2() noCompression_FileBlank_StopRestart_3() noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_NoRestart_5() withCompression_FileSet_NoRestart_6() addExpectedFileNamedIfItsTime_ByDate(String,boolean)",,java.text.DateFormat+format(Date) java.text.DateFormat+format(Date) java.util.List+add(E) java.util.List+add(E),ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX ch.qos.logback.core.rolling.TimeBasedRollingTest+sdf ch.qos.logback.core.rolling.TimeBasedRollingTest+expectedFilenameList,268,8,0,,"void addExpectedFileName_ByDate(String testId, Date date, boolean gzExtension) {
    String fn = CoreTestConstants.OUTPUT_DIR_PREFIX + testId + ""-""
        + sdf.format(date);
    if (gzExtension) {
      fn += "".gz"";
    }
    expectedFilenameList.add(fn);
  }",False,False,"This method adds an expected file name to a list based on the test ID, date, and whether or not the file should have a "".gz"" extension.",True,"This code defines a method called ""addExpectedFileName_ByDate"" that takes a testId, date, and a boolean indicating whether to add a "".gz"" extension to the filename. It constructs a filename by concatenating the testId, formatted date, and optional extension, and adds it to a list called ""expectedFilenameList""."
29,"addExpectedFileNamedIfItsTime_ByDate(String,boolean)",addexpectedfilenamedifitstime bydate test id gz extension ,Method,noCompression_FileBlank_NoRestart_1() withCompression_FileBlank_NoRestart_2() noCompression_FileBlank_StopRestart_3() noCompression_FileBlank_StopRestart_3() noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_NoRestart_5() withCompression_FileSet_NoRestart_6(),,"ch.qos.logback.core.rolling.TimeBasedRollingTest+passThresholdTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+passThresholdTime(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+addExpectedFileName_ByDate(String,Date,boolean) ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+getDateOfCurrentPeriodsStart() ch.qos.logback.core.rolling.TimeBasedRollingTest+recomputeRolloverThreshold(long) ch.qos.logback.core.rolling.TimeBasedRollingTest+recomputeRolloverThreshold(long)",ch.qos.logback.core.rolling.TimeBasedRollingTest+nextRolloverThreshold ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime,291,7,0,,"void addExpectedFileNamedIfItsTime_ByDate(String testId, boolean gzExtension) {
    if (passThresholdTime(nextRolloverThreshold)) {
      addExpectedFileName_ByDate(testId, getDateOfCurrentPeriodsStart(),
          gzExtension);
      recomputeRolloverThreshold(currentTime);
    }
  }",False,False,"This method adds an expected file name if it is time to do so, based on the current date. It takes a test ID and a boolean indicating whether the file should have a .gz extension. If the current time has passed the threshold for the next rollover, it adds the expected file name and recomputes the rollover threshold.",True,"The given code defines a method called ""addExpectedFileNamedIfItsTime_ByDate"" that takes a testId and a boolean value as parameters. It checks if the current time has passed a certain threshold, and if so, it adds a file name to an expected file list based on the current date and the testId. It also recomputes the rollover threshold based on the current time."
30,addExpectedFileName_ByFile(String),addexpectedfilename byfile filename suffix ,Method,massageExpectedFilesToCorresponToCurrentTarget(String),,java.util.List+add(E) java.util.List+add(E),ch.qos.logback.core.util.CoreTestConstants+OUTPUT_DIR_PREFIX ch.qos.logback.core.rolling.TimeBasedRollingTest+expectedFilenameList,167,4,0,,"void addExpectedFileName_ByFile(String filenameSuffix) {
    String fn = CoreTestConstants.OUTPUT_DIR_PREFIX + filenameSuffix;
    expectedFilenameList.add(fn);
  }",False,False,This method adds an expected file name to a list by concatenating a prefix with a given file name suffix.,True,"This code defines a method called ""addExpectedFileName_ByFile"" that takes a filename suffix as a parameter. It creates a full filename by appending the suffix to a constant prefix and adds it to a list of expected filenames."
31,getDateOfCurrentPeriodsStart(),get date of current periods start ,Method,"noCompression_FileBlank_NoRestart_1() withCompression_FileBlank_NoRestart_2() noCompression_FileBlank_StopRestart_3() noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_NoRestart_5() withCompression_FileSet_NoRestart_6() addExpectedFileNamedIfItsTime_ByDate(String,boolean)",,java.sql.Date+Date(long),ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime,123,4,0,,"Date getDateOfCurrentPeriodsStart() {
    long delta = currentTime % 1000;
    return new Date(currentTime - delta);
  }",True,True,This method returns the start date of the current period by subtracting the milliseconds from the current time.,True,The code defines a method called `getDateOfCurrentPeriodsStart()` that calculates the start date of the current period. It does this by subtracting the milliseconds component of the current time from the current time and returning a new `Date` object with the calculated value.
32,getDateOfPastPeriodsStart(),get date of past periods start ,Method,,,java.sql.Date+Date(long),ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime,127,4,0,,"Date getDateOfPastPeriodsStart() {
    long delta = currentTime % 1000;
    return new Date(currentTime - delta - 1000);
  }",False,True,This method returns the start date of the past period by subtracting the milliseconds of the current time and 1000 milliseconds from the current time.,True,The code defines a method called `getDateOfPastPeriodsStart()` that calculates the start date of a past period. It does this by subtracting the milliseconds of the current time from the current time and then subtracting an additional 1000 milliseconds. The result is returned as a `Date` object.
33,"addTime(long,long)",add time current time time to wait ,Method,,,,,99,3,8,,"static long addTime(long currentTime, long timeToWait) {
    return currentTime + timeToWait;
  }",True,True,This method serves to add the value of timeToWait to the value of currentTime and return the result as a long integer.,True,"The code contains a static method named ""addTime"" that takes two long parameters: ""currentTime"" and ""timeToWait"". It returns the sum of the two parameters, representing the updated time after waiting for a certain duration."
34,passThresholdTime(long),pass threshold time next rollover threshold ,Method,"addExpectedFileNamedIfItsTime_ByDate(String,boolean)",,,ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime,110,3,0,,"boolean passThresholdTime(long nextRolloverThreshold) {
    return currentTime >= nextRolloverThreshold;
  }",True,True,The function checks if the current time is greater than or equal to the next rollover threshold time and returns a boolean value indicating whether the condition is true or false.,True,"The given code defines a method named ""passThresholdTime"" that takes a long parameter called ""nextRolloverThreshold"". It checks if the current time is greater than or equal to the next rollover threshold and returns a boolean value indicating whether the condition is true or false."
35,recomputeRolloverThreshold(long),recompute rollover threshold ct ,Method,"setUp() addExpectedFileNamedIfItsTime_ByDate(String,boolean)",,,ch.qos.logback.core.rolling.TimeBasedRollingTest+nextRolloverThreshold,126,4,0,,"void recomputeRolloverThreshold(long ct) {
    long delta = ct % 1000;
    nextRolloverThreshold = (ct - delta) + 1000;
  }",True,True,"This method calculates the next rollover threshold based on the current time. It takes the current time as input, calculates the difference between the current time and the nearest multiple of 1000, and sets the next rollover threshold to be the current time minus the difference plus 1000.",True,"The given code defines a method named ""recomputeRolloverThreshold"" that takes a long value as input. It calculates the remainder of the input value divided by 1000 and assigns the result to the variable ""delta"". Then, it updates the value of ""nextRolloverThreshold"" by subtracting ""delta"" from the input value and adding 1000."
36,incCurrentTime(long),inc current time increment ,Method,noCompression_FileBlank_NoRestart_1() noCompression_FileBlank_NoRestart_1() withCompression_FileBlank_NoRestart_2() withCompression_FileBlank_NoRestart_2() noCompression_FileBlank_StopRestart_3() noCompression_FileBlank_StopRestart_3() noCompression_FileBlank_StopRestart_3() noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_4() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_StopRestart_WithLongWait_4B() noCompression_FileSet_NoRestart_5() noCompression_FileSet_NoRestart_5() withCompression_FileSet_NoRestart_6() withCompression_FileSet_NoRestart_6(),,,ch.qos.logback.core.rolling.TimeBasedRollingTest+currentTime,73,3,0,,"void incCurrentTime(long increment) {
    currentTime += increment;
  }",True,True,This method increments the current time by a specified amount.,True,"The code contains a method named ""incCurrentTime"" that takes a long parameter called ""increment"". This method increments the value of a variable named ""currentTime"" by the value of the ""increment"" parameter."
37,"printLongAsDate(String,long)",print long as date msg time ,Method,,,java.text.SimpleDateFormat+SimpleDateFormat(String) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.text.DateFormat+format(Date) java.text.DateFormat+format(Date) java.sql.Date+Date(long),java.lang.System+out,182,4,0,,"void printLongAsDate(String msg, long time) {
    SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd_HH_mm_ss"");
    System.out.println(msg + sdf.format(new Date(time)));
  }",False,True,"This method takes a message and a long value representing a time, and prints the message followed by the time formatted as a date in the format ""yyyy-MM-dd_HH_mm_ss"".",True,"The code defines a method named ""printLongAsDate"" that takes a message and a long value representing time as input. It converts the long value to a formatted date string using the SimpleDateFormat class and prints the message along with the formatted date string to the console."
