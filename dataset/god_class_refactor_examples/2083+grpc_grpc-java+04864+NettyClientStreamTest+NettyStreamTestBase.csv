index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,CONTEXT_KEY,Field,,,,,48,1,26,,"private static final String CONTEXT_KEY = ""key"";",True
2,MESSAGE,Field,,,,,52,1,26,,"private static final String MESSAGE = ""hello world"";",True
3,stream,Field,,,,,33,1,2,,private NettyClientStream stream;,False
4,listener,Field,,,,,40,2,2,,"@Mock
  private StreamListener listener;",True
5,channel,Field,,,,,32,2,2,,"@Mock
  private Channel channel;",True
6,future,Field,,,,,37,2,2,,"@Mock
  private ChannelFuture future;",True
7,promise,Field,,,,,39,2,2,,"@Mock
  private ChannelPromise promise;",True
8,eventLoop,Field,,,,,36,2,2,,"@Mock
  private EventLoop eventLoop;",True
9,input,Field,,,,,26,1,2,,private InputStream input;,True
10,accepted,Field,,,,,34,2,2,,"@Mock
  private Runnable accepted;",True
11,setup(),Method,,,"com.google.net.stubby.newtransport.netty.NettyClientStreamTest+mockChannelFuture(boolean) com.google.net.stubby.newtransport.netty.NettyClientStreamTest+mockChannelFuture(boolean) com.google.net.stubby.newtransport.netty.NettyClientStream+NettyClientStream(StreamListener,Channel) com.google.net.stubby.newtransport.AbstractStream+state() com.google.net.stubby.newtransport.AbstractStream+state() java.io.ByteArrayInputStream+ByteArrayInputStream(byte[]) java.lang.String+getBytes(String) java.lang.String+getBytes(String)",com.google.net.stubby.newtransport.netty.NettyClientStreamTest+channel com.google.net.stubby.newtransport.netty.NettyClientStreamTest+future com.google.net.stubby.newtransport.netty.NettyClientStreamTest+channel com.google.net.stubby.newtransport.netty.NettyClientStreamTest+future com.google.net.stubby.newtransport.netty.NettyClientStreamTest+channel com.google.net.stubby.newtransport.netty.NettyClientStreamTest+channel com.google.net.stubby.newtransport.netty.NettyClientStreamTest+eventLoop com.google.net.stubby.newtransport.netty.NettyClientStreamTest+eventLoop com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+listener com.google.net.stubby.newtransport.netty.NettyClientStreamTest+channel com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+input com.google.net.stubby.newtransport.netty.NettyClientStreamTest+MESSAGE,563,15,1,,"@Before
  public void setup() {
    MockitoAnnotations.initMocks(this);

    mockChannelFuture(true);
    when(channel.write(any())).thenReturn(future);
    when(channel.writeAndFlush(any())).thenReturn(future);
    when(channel.alloc()).thenReturn(UnpooledByteBufAllocator.DEFAULT);
    when(channel.eventLoop()).thenReturn(eventLoop);
    when(eventLoop.inEventLoop()).thenReturn(true);

    stream = new NettyClientStream(listener, channel);
    assertEquals(StreamState.OPEN, stream.state());
    input = new ByteArrayInputStream(MESSAGE.getBytes(UTF_8));
  }",False
12,closeShouldSucceed(),Method,,,com.google.net.stubby.newtransport.netty.NettyClientStream+id(int) com.google.net.stubby.newtransport.netty.NettyClientStream+id(int) com.google.net.stubby.newtransport.AbstractStream+halfClose() com.google.net.stubby.newtransport.AbstractStream+halfClose() com.google.net.stubby.newtransport.AbstractStream+state() com.google.net.stubby.newtransport.AbstractStream+state(),com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream,175,7,1,,"@Test
  public void closeShouldSucceed() {
    // Force stream creation.
    stream.id(1);
    stream.halfClose();
    assertEquals(StreamState.READ_ONLY, stream.state());
  }",False
13,cancelShouldSendCommand(),Method,,,com.google.net.stubby.newtransport.netty.NettyClientStream+cancel() com.google.net.stubby.newtransport.netty.NettyClientStream+cancel(),com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+channel,139,5,1,,"@Test
  public void cancelShouldSendCommand() {
    stream.cancel();
    verify(channel).writeAndFlush(any(CancelStreamCommand.class));
  }",False
14,writeContextShouldSendRequest(),Method,,,"com.google.net.stubby.newtransport.netty.NettyClientStream+id(int) com.google.net.stubby.newtransport.netty.NettyClientStream+id(int) com.google.net.stubby.newtransport.AbstractStream+writeContext(String,InputStream,int,Runnable) com.google.net.stubby.newtransport.AbstractStream+writeContext(String,InputStream,int,Runnable) java.io.InputStream+available() java.io.InputStream+available() com.google.net.stubby.newtransport.AbstractStream+flush() com.google.net.stubby.newtransport.AbstractStream+flush() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+contextFrame() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+contextFrame()",com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+CONTEXT_KEY com.google.net.stubby.newtransport.netty.NettyClientStreamTest+input com.google.net.stubby.newtransport.netty.NettyClientStreamTest+input com.google.net.stubby.newtransport.netty.NettyClientStreamTest+accepted com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+channel com.google.net.stubby.newtransport.netty.NettyClientStreamTest+accepted,471,12,1,,"@Test
  public void writeContextShouldSendRequest() throws Exception {
    // Force stream creation.
    stream.id(1);
    stream.writeContext(CONTEXT_KEY, input, input.available(), accepted);
    stream.flush();
    ArgumentCaptor<SendGrpcFrameCommand> captor =
        ArgumentCaptor.forClass(SendGrpcFrameCommand.class);
    verify(channel).writeAndFlush(captor.capture());
    assertEquals(contextFrame(), captor.getValue().content());
    verify(accepted).run();
  }",False
15,writeMessageShouldSendRequest(),Method,,,"com.google.net.stubby.newtransport.netty.NettyClientStream+id(int) com.google.net.stubby.newtransport.netty.NettyClientStream+id(int) com.google.net.stubby.newtransport.AbstractStream+writeMessage(InputStream,int,Runnable) com.google.net.stubby.newtransport.AbstractStream+writeMessage(InputStream,int,Runnable) java.io.InputStream+available() java.io.InputStream+available() com.google.net.stubby.newtransport.AbstractStream+flush() com.google.net.stubby.newtransport.AbstractStream+flush() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+messageFrame() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+messageFrame()",com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+input com.google.net.stubby.newtransport.netty.NettyClientStreamTest+input com.google.net.stubby.newtransport.netty.NettyClientStreamTest+accepted com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+channel com.google.net.stubby.newtransport.netty.NettyClientStreamTest+accepted,458,12,1,,"@Test
  public void writeMessageShouldSendRequest() throws Exception {
    // Force stream creation.
    stream.id(1);
    stream.writeMessage(input, input.available(), accepted);
    stream.flush();
    ArgumentCaptor<SendGrpcFrameCommand> captor =
        ArgumentCaptor.forClass(SendGrpcFrameCommand.class);
    verify(channel).writeAndFlush(captor.capture());
    assertEquals(messageFrame(), captor.getValue().content());
    verify(accepted).run();
  }",False
16,setStatusWithOkShouldCloseStream(),Method,,,com.google.net.stubby.newtransport.netty.NettyClientStream+id(int) com.google.net.stubby.newtransport.netty.NettyClientStream+id(int) com.google.net.stubby.newtransport.AbstractStream+setStatus(Status) com.google.net.stubby.newtransport.AbstractStream+setStatus(Status) com.google.net.stubby.newtransport.AbstractStream+state() com.google.net.stubby.newtransport.AbstractStream+state(),com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.Status+OK com.google.net.stubby.newtransport.netty.NettyClientStreamTest+listener com.google.net.stubby.Status+OK com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream,205,7,1,,"@Test
  public void setStatusWithOkShouldCloseStream() {
    stream.id(1);
    stream.setStatus(Status.OK);
    verify(listener).closed(Status.OK);
    assertEquals(StreamState.CLOSED, stream.state());
  }",False
17,setStatusWithErrorShouldCloseStream(),Method,,,com.google.net.stubby.Status+Status(Code) com.google.net.stubby.newtransport.AbstractStream+setStatus(Status) com.google.net.stubby.newtransport.AbstractStream+setStatus(Status) com.google.net.stubby.newtransport.AbstractStream+state() com.google.net.stubby.newtransport.AbstractStream+state(),com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+listener com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream,260,7,1,,"@Test
  public void setStatusWithErrorShouldCloseStream() {
    Status errorStatus = new Status(Transport.Code.INTERNAL);
    stream.setStatus(errorStatus);
    verify(listener).closed(eq(errorStatus));
    assertEquals(StreamState.CLOSED, stream.state());
  }",False
18,setStatusWithOkShouldNotOverrideError(),Method,,,com.google.net.stubby.Status+Status(Code) com.google.net.stubby.newtransport.AbstractStream+setStatus(Status) com.google.net.stubby.newtransport.AbstractStream+setStatus(Status) com.google.net.stubby.newtransport.AbstractStream+setStatus(Status) com.google.net.stubby.newtransport.AbstractStream+setStatus(Status) com.google.net.stubby.newtransport.AbstractStream+state() com.google.net.stubby.newtransport.AbstractStream+state(),com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.Status+OK com.google.net.stubby.newtransport.netty.NettyClientStreamTest+listener com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream,297,8,1,,"@Test
  public void setStatusWithOkShouldNotOverrideError() {
    Status errorStatus = new Status(Transport.Code.INTERNAL);
    stream.setStatus(errorStatus);
    stream.setStatus(Status.OK);
    verify(listener).closed(any(Status.class));
    assertEquals(StreamState.CLOSED, stream.state());
  }",False
19,setStatusWithErrorShouldNotOverridePreviousError(),Method,,,com.google.net.stubby.Status+Status(Code) com.google.net.stubby.newtransport.AbstractStream+setStatus(Status) com.google.net.stubby.newtransport.AbstractStream+setStatus(Status) com.google.net.stubby.newtransport.AbstractStream+setStatus(Status) com.google.net.stubby.newtransport.AbstractStream+setStatus(Status) com.google.net.stubby.Status+fromThrowable(Throwable) com.google.net.stubby.Status+fromThrowable(Throwable) java.lang.RuntimeException+RuntimeException(String) com.google.net.stubby.newtransport.AbstractStream+state() com.google.net.stubby.newtransport.AbstractStream+state(),com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+listener com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream,349,8,1,,"@Test
  public void setStatusWithErrorShouldNotOverridePreviousError() {
    Status errorStatus = new Status(Transport.Code.INTERNAL);
    stream.setStatus(errorStatus);
    stream.setStatus(Status.fromThrowable(new RuntimeException(""fake"")));
    verify(listener).closed(any(Status.class));
    assertEquals(StreamState.CLOSED, stream.state());
  }",False
20,inboundContextShouldCallListener(),Method,,,"com.google.net.stubby.newtransport.netty.NettyClientStream+inboundHeadersRecieved(Http2Headers,boolean) com.google.net.stubby.newtransport.netty.NettyClientStream+inboundHeadersRecieved(Http2Headers,boolean) com.google.net.stubby.newtransport.netty.NettyClientStreamTest+grpcResponseHeaders() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+grpcResponseHeaders() com.google.net.stubby.newtransport.netty.NettyClientStream+inboundDataReceived(ByteBuf,boolean,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientStream+inboundDataReceived(ByteBuf,boolean,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientStreamTest+contextFrame() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+contextFrame() java.lang.String+length() java.lang.String+length() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+toString(InputStream) com.google.net.stubby.newtransport.netty.NettyClientStreamTest+toString(InputStream)",com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+promise com.google.net.stubby.newtransport.netty.NettyClientStreamTest+listener com.google.net.stubby.newtransport.netty.NettyClientStreamTest+CONTEXT_KEY com.google.net.stubby.newtransport.netty.NettyClientStreamTest+MESSAGE com.google.net.stubby.newtransport.netty.NettyClientStreamTest+promise com.google.net.stubby.newtransport.netty.NettyClientStreamTest+MESSAGE,538,11,1,,"@Test
  public void inboundContextShouldCallListener() throws Exception {
    // Receive headers first so that it's a valid GRPC response.
    stream.inboundHeadersRecieved(grpcResponseHeaders(), false);

    stream.inboundDataReceived(contextFrame(), false, promise);
    ArgumentCaptor<InputStream> captor = ArgumentCaptor.forClass(InputStream.class);
    verify(listener).contextRead(eq(CONTEXT_KEY), captor.capture(), eq(MESSAGE.length()));
    verify(promise).setSuccess();
    assertEquals(MESSAGE, toString(captor.getValue()));
  }",False
21,inboundMessageShouldCallListener(),Method,,,"com.google.net.stubby.newtransport.netty.NettyClientStream+inboundHeadersRecieved(Http2Headers,boolean) com.google.net.stubby.newtransport.netty.NettyClientStream+inboundHeadersRecieved(Http2Headers,boolean) com.google.net.stubby.newtransport.netty.NettyClientStreamTest+grpcResponseHeaders() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+grpcResponseHeaders() com.google.net.stubby.newtransport.netty.NettyClientStream+inboundDataReceived(ByteBuf,boolean,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientStream+inboundDataReceived(ByteBuf,boolean,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientStreamTest+messageFrame() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+messageFrame() java.lang.String+length() java.lang.String+length() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+toString(InputStream) com.google.net.stubby.newtransport.netty.NettyClientStreamTest+toString(InputStream)",com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+promise com.google.net.stubby.newtransport.netty.NettyClientStreamTest+listener com.google.net.stubby.newtransport.netty.NettyClientStreamTest+MESSAGE com.google.net.stubby.newtransport.netty.NettyClientStreamTest+promise com.google.net.stubby.newtransport.netty.NettyClientStreamTest+MESSAGE,521,11,1,,"@Test
  public void inboundMessageShouldCallListener() throws Exception {
    // Receive headers first so that it's a valid GRPC response.
    stream.inboundHeadersRecieved(grpcResponseHeaders(), false);

    stream.inboundDataReceived(messageFrame(), false, promise);
    ArgumentCaptor<InputStream> captor = ArgumentCaptor.forClass(InputStream.class);
    verify(listener).messageRead(captor.capture(), eq(MESSAGE.length()));
    verify(promise).setSuccess();
    assertEquals(MESSAGE, toString(captor.getValue()));
  }",False
22,inboundStatusShouldSetStatus(),Method,,,"com.google.net.stubby.newtransport.netty.NettyClientStream+id(int) com.google.net.stubby.newtransport.netty.NettyClientStream+id(int) com.google.net.stubby.newtransport.netty.NettyClientStream+inboundHeadersRecieved(Http2Headers,boolean) com.google.net.stubby.newtransport.netty.NettyClientStream+inboundHeadersRecieved(Http2Headers,boolean) com.google.net.stubby.newtransport.netty.NettyClientStreamTest+grpcResponseHeaders() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+grpcResponseHeaders() com.google.net.stubby.newtransport.netty.NettyClientStream+inboundDataReceived(ByteBuf,boolean,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientStream+inboundDataReceived(ByteBuf,boolean,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientStreamTest+statusFrame() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+statusFrame() com.google.net.stubby.newtransport.AbstractStream+state() com.google.net.stubby.newtransport.AbstractStream+state()",com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+promise com.google.net.stubby.newtransport.netty.NettyClientStreamTest+listener com.google.net.stubby.newtransport.netty.NettyClientStreamTest+promise com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream,568,14,1,,"@Test
  public void inboundStatusShouldSetStatus() throws Exception {
    stream.id(1);

    // Receive headers first so that it's a valid GRPC response.
    stream.inboundHeadersRecieved(grpcResponseHeaders(), false);

    stream.inboundDataReceived(statusFrame(), false, promise);
    ArgumentCaptor<Status> captor = ArgumentCaptor.forClass(Status.class);
    verify(listener).closed(captor.capture());
    assertEquals(Transport.Code.INTERNAL, captor.getValue().getCode());
    verify(promise).setSuccess();
    assertEquals(StreamState.CLOSED, stream.state());
  }",False
23,nonGrpcResponseShouldSetStatus(),Method,,,"com.google.net.stubby.newtransport.netty.NettyClientStream+inboundDataReceived(ByteBuf,boolean,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientStream+inboundDataReceived(ByteBuf,boolean,ChannelPromise)",com.google.net.stubby.newtransport.netty.NettyClientStreamTest+stream com.google.net.stubby.newtransport.netty.NettyClientStreamTest+MESSAGE com.google.net.stubby.newtransport.netty.NettyClientStreamTest+promise com.google.net.stubby.newtransport.netty.NettyClientStreamTest+listener com.google.net.stubby.newtransport.netty.NettyClientStreamTest+MESSAGE,346,7,1,,"@Test
  public void nonGrpcResponseShouldSetStatus() throws Exception {
    stream.inboundDataReceived(Unpooled.copiedBuffer(MESSAGE, UTF_8), true, promise);
    ArgumentCaptor<Status> captor = ArgumentCaptor.forClass(Status.class);
    verify(listener).closed(captor.capture());
    assertEquals(MESSAGE, captor.getValue().getDescription());
  }",False
24,toString(InputStream),Method,inboundContextShouldCallListener() inboundMessageShouldCallListener(),,"java.io.InputStream+available() java.io.InputStream+available() java.lang.String+String(byte[],String)",,182,5,2,,"private String toString(InputStream in) throws Exception {
    byte[] bytes = new byte[in.available()];
    ByteStreams.readFully(in, bytes);
    return new String(bytes, UTF_8);
  }",True
25,contextFrame(),Method,writeContextShouldSendRequest() inboundContextShouldCallListener(),,java.io.ByteArrayOutputStream+ByteArrayOutputStream() java.io.DataOutputStream+DataOutputStream(OutputStream) java.io.FilterOutputStream+write(byte[]) java.io.FilterOutputStream+write(byte[]) java.io.DataOutputStream+writeInt(int) java.io.DataOutputStream+writeInt(int) java.io.FilterOutputStream+write(byte[]) java.io.FilterOutputStream+write(byte[]) java.io.FilterOutputStream+close() java.io.FilterOutputStream+close() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+compressionFrame(byte[]) com.google.net.stubby.newtransport.netty.NettyClientStreamTest+compressionFrame(byte[]) java.io.ByteArrayOutputStream+toByteArray() java.io.ByteArrayOutputStream+toByteArray(),com.google.net.stubby.newtransport.netty.NettyClientStreamTest+CONTEXT_KEY com.google.net.stubby.newtransport.netty.NettyClientStreamTest+MESSAGE,561,17,2,,"private ByteBuf contextFrame() throws Exception {
    byte[] body = ContextValue
        .newBuilder()
        .setKey(CONTEXT_KEY)
        .setValue(ByteString.copyFromUtf8(MESSAGE))
        .build()
        .toByteArray();
    ByteArrayOutputStream os = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(os);
    dos.write(CONTEXT_VALUE_FRAME);
    dos.writeInt(body.length);
    dos.write(body);
    dos.close();

    // Write the compression header followed by the context frame.
    return compressionFrame(os.toByteArray());
  }",True
26,messageFrame(),Method,writeMessageShouldSendRequest() inboundMessageShouldCallListener(),,java.io.ByteArrayOutputStream+ByteArrayOutputStream() java.io.DataOutputStream+DataOutputStream(OutputStream) java.io.FilterOutputStream+write(byte[]) java.io.FilterOutputStream+write(byte[]) java.io.DataOutputStream+writeInt(int) java.io.DataOutputStream+writeInt(int) java.lang.String+length() java.lang.String+length() java.io.FilterOutputStream+write(byte[]) java.io.FilterOutputStream+write(byte[]) java.lang.String+getBytes(String) java.lang.String+getBytes(String) java.io.FilterOutputStream+close() java.io.FilterOutputStream+close() com.google.net.stubby.newtransport.netty.NettyClientStreamTest+compressionFrame(byte[]) com.google.net.stubby.newtransport.netty.NettyClientStreamTest+compressionFrame(byte[]) java.io.ByteArrayOutputStream+toByteArray() java.io.ByteArrayOutputStream+toByteArray(),com.google.net.stubby.newtransport.netty.NettyClientStreamTest+MESSAGE com.google.net.stubby.newtransport.netty.NettyClientStreamTest+MESSAGE,404,11,2,,"private ByteBuf messageFrame() throws Exception {
    ByteArrayOutputStream os = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(os);
    dos.write(PAYLOAD_FRAME);
    dos.writeInt(MESSAGE.length());
    dos.write(MESSAGE.getBytes(UTF_8));
    dos.close();

    // Write the compression header followed by the context frame.
    return compressionFrame(os.toByteArray());
  }",True
27,statusFrame(),Method,inboundStatusShouldSetStatus(),,java.io.ByteArrayOutputStream+ByteArrayOutputStream() java.io.DataOutputStream+DataOutputStream(OutputStream) java.io.FilterOutputStream+write(byte[]) java.io.FilterOutputStream+write(byte[]) java.io.DataOutputStream+writeInt(int) java.io.DataOutputStream+writeInt(int) java.io.DataOutputStream+writeShort(int) java.io.DataOutputStream+writeShort(int) com.google.net.stubby.newtransport.netty.NettyClientStreamTest+compressionFrame(byte[]) com.google.net.stubby.newtransport.netty.NettyClientStreamTest+compressionFrame(byte[]) java.io.ByteArrayOutputStream+toByteArray() java.io.ByteArrayOutputStream+toByteArray(),,443,12,2,,"private ByteBuf statusFrame() throws Exception {
    ByteArrayOutputStream os = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(os);
    short code = (short) Transport.Code.INTERNAL.getNumber();
    dos.write(STATUS_FRAME);
    int length = 2;
    dos.writeInt(length);
    dos.writeShort(code);

    // Write the compression header followed by the context frame.
    return compressionFrame(os.toByteArray());
  }",True
28,compressionFrame(byte[]),Method,contextFrame() messageFrame() statusFrame(),,,,161,6,2,,"private ByteBuf compressionFrame(byte[] data) {
    ByteBuf buf = Unpooled.buffer();
    buf.writeInt(data.length);
    buf.writeBytes(data);
    return buf;
  }",True
29,grpcResponseHeaders(),Method,inboundContextShouldCallListener() inboundMessageShouldCallListener() inboundStatusShouldSetStatus(),,,com.google.net.stubby.newtransport.HttpUtil+CONTENT_TYPE_HEADER com.google.net.stubby.newtransport.HttpUtil+CONTENT_TYPE_PROTORPC,190,4,2,,"private Http2Headers grpcResponseHeaders() {
    return DefaultHttp2Headers.newBuilder().status(""200"")
        .set(HttpUtil.CONTENT_TYPE_HEADER, HttpUtil.CONTENT_TYPE_PROTORPC).build();
  }",False
30,mockChannelFuture(boolean),Method,setup(),,java.lang.Exception+Exception(String) +answer(InvocationOnMock),com.google.net.stubby.newtransport.netty.NettyClientStreamTest+future com.google.net.stubby.newtransport.netty.NettyClientStreamTest+future com.google.net.stubby.newtransport.netty.NettyClientStreamTest+future com.google.net.stubby.newtransport.netty.NettyClientStreamTest+future com.google.net.stubby.newtransport.netty.NettyClientStreamTest+future,758,18,2,,"private void mockChannelFuture(boolean succeeded) {
    when(future.isDone()).thenReturn(true);
    when(future.isCancelled()).thenReturn(false);
    when(future.isSuccess()).thenReturn(succeeded);
    when(future.awaitUninterruptibly(anyLong(), any(TimeUnit.class))).thenReturn(true);
    if (!succeeded) {
      when(future.cause()).thenReturn(new Exception(""fake""));
    }

    doAnswer(new Answer<ChannelFuture>() {
      @Override
      public ChannelFuture answer(InvocationOnMock invocation) throws Throwable {
        ChannelFutureListener listener = (ChannelFutureListener) invocation.getArguments()[0];
        listener.operationComplete(future);
        return future;
      }
    }).when(future).addListener(any(ChannelFutureListener.class));
  }",True
