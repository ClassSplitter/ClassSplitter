index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,TAG,Field,,,,,52,1,26,,"private static final String TAG = ""AutoFitTextView"";",True
2,SPEW,Field,,,,,42,1,26,,private static final boolean SPEW = false;,True
3,DEFAULT_MIN_TEXT_SIZE,Field,,,,,51,1,26,,private static final int DEFAULT_MIN_TEXT_SIZE = 8;,True
4,PRECISION,Field,,,,,44,1,26,,private static final float PRECISION = 0.5f;,True
5,mSizeToFit,Field,,,,,27,1,2,,private boolean mSizeToFit;,True
6,mMaxLines,Field,,,,,22,1,2,,private int mMaxLines;,True
7,mMinTextSize,Field,,,,,27,1,2,,private float mMinTextSize;,True
8,mMaxTextSize,Field,,,,,27,1,2,,private float mMaxTextSize;,True
9,mPrecision,Field,,,,,25,1,2,,private float mPrecision;,True
10,mPaint,Field,,,,,25,1,2,,private TextPaint mPaint;,True
11,AutofitTextView(Context),Method,,,"me.grantland.widget.AutofitTextView+init(Context,AttributeSet,int) me.grantland.widget.AutofitTextView+init(Context,AttributeSet,int)",,103,4,1,,"public AutofitTextView(Context context) {
        super(context);
        init(context, null, 0);
    }",False
12,"AutofitTextView(Context,AttributeSet)",Method,,,"me.grantland.widget.AutofitTextView+init(Context,AttributeSet,int) me.grantland.widget.AutofitTextView+init(Context,AttributeSet,int)",,131,4,1,,"public AutofitTextView(Context context, AttributeSet attrs) {
        super(context, attrs);
        init(context, attrs, 0);
    }",False
13,"AutofitTextView(Context,AttributeSet,int)",Method,,,"me.grantland.widget.AutofitTextView+init(Context,AttributeSet,int) me.grantland.widget.AutofitTextView+init(Context,AttributeSet,int)",,162,4,1,,"public AutofitTextView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        init(context, attrs, defStyle);
    }",False
14,"init(Context,AttributeSet,int)",Method,"AutofitTextView(Context) AutofitTextView(Context,AttributeSet) AutofitTextView(Context,AttributeSet,int)",,me.grantland.widget.AutofitTextView+setSizeToFit(boolean) me.grantland.widget.AutofitTextView+setSizeToFit(boolean) me.grantland.widget.AutofitTextView+setRawTextSize(float) me.grantland.widget.AutofitTextView+setRawTextSize(float) me.grantland.widget.AutofitTextView+setRawMinTextSize(float) me.grantland.widget.AutofitTextView+setRawMinTextSize(float) me.grantland.widget.AutofitTextView+setPrecision(float) me.grantland.widget.AutofitTextView+setPrecision(float),me.grantland.widget.AutofitTextView+DEFAULT_MIN_TEXT_SIZE me.grantland.widget.AutofitTextView+PRECISION me.grantland.widget.AutofitTextView+mPaint,1050,25,2,,"private void init(Context context, AttributeSet attrs, int defStyle) {
        float scaledDensity = context.getResources().getDisplayMetrics().scaledDensity;
        boolean sizeToFit = true;
        int minTextSize = (int) scaledDensity * DEFAULT_MIN_TEXT_SIZE;
        float precision = PRECISION;

        if (attrs != null) {
            TypedArray ta = context.obtainStyledAttributes(
                    attrs,
                    R.styleable.AutofitTextView,
                    defStyle,
                    0);
            sizeToFit = ta.getBoolean(R.styleable.AutofitTextView_sizeToFit, sizeToFit);
            minTextSize = ta.getDimensionPixelSize(R.styleable.AutofitTextView_minTextSize,
                    minTextSize);
            precision = ta.getFloat(R.styleable.AutofitTextView_precision, precision);
            ta.recycle();
        }

        mPaint = new TextPaint();
        setSizeToFit(sizeToFit);
        setRawTextSize(super.getTextSize());
        setRawMinTextSize(minTextSize);
        setPrecision(precision);
    }",False
15,isSizeToFit(),Method,,,,me.grantland.widget.AutofitTextView+mSizeToFit,172,6,1,"/** 
 * @return whether or not the text will be automatically resized to fit its constraints.
 */
","/**
     * @return whether or not the text will be automatically resized to fit its constraints.
     */
    public boolean isSizeToFit() {
        return mSizeToFit;
    }",False
16,setSizeToFit(),Method,,,me.grantland.widget.AutofitTextView+setSizeToFit(boolean) me.grantland.widget.AutofitTextView+setSizeToFit(boolean),,187,6,1,"/** 
 * Sets the property of this field (singleLine, to automatically resize the text to fit its constraints.
 */
","/**
     * Sets the property of this field (singleLine, to automatically resize the text to fit its constraints.
     */
    public void setSizeToFit() {
        setSizeToFit(true);
    }",False
17,setSizeToFit(boolean),Method,"init(Context,AttributeSet,int) setSizeToFit()",,me.grantland.widget.AutofitTextView+refitText() me.grantland.widget.AutofitTextView+refitText(),me.grantland.widget.AutofitTextView+mSizeToFit,283,10,1,"/** 
 * If true, the text will automatically be resized to fit its constraints; if false, it will act like a normal TextView.
 * @param sizeToFit
 */
","/**
     * If true, the text will automatically be resized to fit its constraints; if false, it will
     * act like a normal TextView.
     *
     * @param sizeToFit
     */
    public void setSizeToFit(boolean sizeToFit) {
        mSizeToFit = sizeToFit;
        refitText();
    }",False
18,getTextSize(),Method,,,,me.grantland.widget.AutofitTextView+mMaxTextSize,114,7,1,"/** 
 * {@inheritDoc}
 */
","/**
     * {@inheritDoc}
     */
    @Override
    public float getTextSize() {
        return mMaxTextSize;
    }",True
19,"setTextSize(int,float)",Method,,,me.grantland.widget.AutofitTextView+setRawTextSize(float) me.grantland.widget.AutofitTextView+setRawTextSize(float),,358,14,1,"/** 
 * {@inheritDoc}
 */
","/**
     * {@inheritDoc}
     */
    @Override
    public void setTextSize(int unit, float size) {
        Context context = getContext();
        Resources r = Resources.getSystem();

        if (context != null) {
            r = context.getResources();
        }

        setRawTextSize(TypedValue.applyDimension(unit, size, r.getDisplayMetrics()));
    }",False
20,setRawTextSize(float),Method,"init(Context,AttributeSet,int) setTextSize(int,float)",,me.grantland.widget.AutofitTextView+refitText() me.grantland.widget.AutofitTextView+refitText(),me.grantland.widget.AutofitTextView+mMaxTextSize me.grantland.widget.AutofitTextView+mMaxTextSize,151,6,2,,"private void setRawTextSize(float size) {
        if (size != mMaxTextSize) {
            mMaxTextSize = size;
            refitText();
        }
    }",False
21,getMinTextSize(),Method,,,,me.grantland.widget.AutofitTextView+mMinTextSize,167,6,1,"/** 
 * @return the minimum size (in pixels) of the text size in this AutofitTextView
 */
","/**
     * @return the minimum size (in pixels) of the text size in this AutofitTextView
     */
    public float getMinTextSize() {
        return mMinTextSize;
    }",False
22,"setMinTextSize(int,float)",Method,setMinTextSize(int),,me.grantland.widget.AutofitTextView+setRawMinTextSize(float) me.grantland.widget.AutofitTextView+setRawMinTextSize(float),,641,19,1,"/** 
 * Set the minimum text size to a given unit and value. See TypedValue for the possible dimension units.
 * @param unit The desired dimension unit.
 * @param minSize The desired size in the given units.
 * @attr ref me.grantland.R.styleable#AutofitTextView_minTextSize
 */
","/**
     * Set the minimum text size to a given unit and value. See TypedValue for the possible
     * dimension units.
     *
     * @param unit The desired dimension unit.
     * @param minSize The desired size in the given units.
     *
     * @attr ref me.grantland.R.styleable#AutofitTextView_minTextSize
     */
    public void setMinTextSize(int unit, float minSize) {
        Context context = getContext();
        Resources r = Resources.getSystem();

        if (context != null) {
            r = context.getResources();
        }

        setRawMinTextSize(TypedValue.applyDimension(unit, minSize, r.getDisplayMetrics()));
    }",False
23,setMinTextSize(int),Method,,,"me.grantland.widget.AutofitTextView+setMinTextSize(int,float) me.grantland.widget.AutofitTextView+setMinTextSize(int,float)",,432,11,1,"/** 
 * Set the minimum text size to the given value, interpreted as ""scaled pixel"" units. This size is adjusted based on the current density and user font size preference.
 * @param minSize The scaled pixel size.
 * @attr ref me.grantland.R.styleable#AutofitTextView_minTextSize
 */
","/**
     * Set the minimum text size to the given value, interpreted as ""scaled pixel"" units. This size
     * is adjusted based on the current density and user font size preference.
     *
     * @param minSize The scaled pixel size.
     *
     * @attr ref me.grantland.R.styleable#AutofitTextView_minTextSize
     */
    public void setMinTextSize(int minSize) {
        setMinTextSize(TypedValue.COMPLEX_UNIT_SP, minSize);
    }",False
24,setRawMinTextSize(float),Method,"init(Context,AttributeSet,int) setMinTextSize(int,float)",,me.grantland.widget.AutofitTextView+refitText() me.grantland.widget.AutofitTextView+refitText(),me.grantland.widget.AutofitTextView+mMinTextSize me.grantland.widget.AutofitTextView+mMinTextSize,163,6,2,,"private void setRawMinTextSize(float minSize) {
        if (minSize != mMinTextSize) {
            mMinTextSize = minSize;
            refitText();
        }
    }",True
25,getPrecision(),Method,,,,me.grantland.widget.AutofitTextView+mPrecision,191,7,1,"/** 
 * @return the amount of precision used to calculate the correct text size to fit within it'sbounds.
 */
","/**
     * @return the amount of precision used to calculate the correct text size to fit within it's
     * bounds.
     */
    public float getPrecision() {
        return mPrecision;
    }",False
26,setPrecision(float),Method,"init(Context,AttributeSet,int)",,me.grantland.widget.AutofitTextView+refitText() me.grantland.widget.AutofitTextView+refitText(),me.grantland.widget.AutofitTextView+mPrecision me.grantland.widget.AutofitTextView+mPrecision,393,12,1,"/** 
 * Set the amount of precision used to calculate the correct text size to fit within it's bounds. Lower precision is more precise and takes more time.
 * @param precision The amount of precision.
 */
","/**
     * Set the amount of precision used to calculate the correct text size to fit within it's
     * bounds. Lower precision is more precise and takes more time.
     *
     * @param precision The amount of precision.
     */
    public void setPrecision(float precision) {
        if (precision != mPrecision) {
            mPrecision = precision;
            refitText();
        }
    }",False
27,setLines(int),Method,,,me.grantland.widget.AutofitTextView+refitText() me.grantland.widget.AutofitTextView+refitText(),me.grantland.widget.AutofitTextView+mMaxLines,169,9,1,"/** 
 * {@inheritDoc}
 */
","/**
     * {@inheritDoc}
     */
    @Override
    public void setLines(int lines) {
        super.setLines(lines);
        mMaxLines = lines;
        refitText();
    }",True
28,getMaxLines(),Method,,,,me.grantland.widget.AutofitTextView+mMaxLines,109,7,1,"/** 
 * {@inheritDoc}
 */
","/**
     * {@inheritDoc}
     */
    @Override
    public int getMaxLines() {
        return mMaxLines;
    }",True
29,setMaxLines(int),Method,,,me.grantland.widget.AutofitTextView+refitText() me.grantland.widget.AutofitTextView+refitText(),me.grantland.widget.AutofitTextView+mMaxLines me.grantland.widget.AutofitTextView+mMaxLines,239,11,1,"/** 
 * {@inheritDoc}
 */
","/**
     * {@inheritDoc}
     */
    @Override
    public void setMaxLines(int maxLines) {
        super.setMaxLines(maxLines);
        if (maxLines != mMaxLines) {
            mMaxLines = maxLines;
            refitText();
        }
    }",True
30,refitText(),Method,"setSizeToFit(boolean) setRawTextSize(float) setRawMinTextSize(float) setPrecision(float) setLines(int) setMaxLines(int) onTextChanged(CharSequence,int,int,int) onSizeChanged(int,int,int,int)",,"java.lang.CharSequence+length() java.lang.CharSequence+length() me.grantland.widget.AutofitTextView+getLineCount(CharSequence,TextPaint,float,float,DisplayMetrics) me.grantland.widget.AutofitTextView+getLineCount(CharSequence,TextPaint,float,float,DisplayMetrics) me.grantland.widget.AutofitTextView+getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics) me.grantland.widget.AutofitTextView+getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics)",me.grantland.widget.AutofitTextView+mSizeToFit me.grantland.widget.AutofitTextView+mMaxLines me.grantland.widget.AutofitTextView+mMaxTextSize me.grantland.widget.AutofitTextView+mPaint me.grantland.widget.AutofitTextView+mPaint me.grantland.widget.AutofitTextView+mMaxLines me.grantland.widget.AutofitTextView+mPaint me.grantland.widget.AutofitTextView+mPaint me.grantland.widget.AutofitTextView+mMaxLines me.grantland.widget.AutofitTextView+mPaint me.grantland.widget.AutofitTextView+mMaxLines me.grantland.widget.AutofitTextView+mPrecision me.grantland.widget.AutofitTextView+mMinTextSize me.grantland.widget.AutofitTextView+mMinTextSize,1627,50,2,"/** 
 * Re size the font so the specified text fits in the text box assuming the text box is the specified width.
 */
","/**
     * Re size the font so the specified text fits in the text box assuming the text box is the
     * specified width.
     */
    private void refitText() {
        if (!mSizeToFit) {
            return;
        }

        if (mMaxLines <= 0) {
            // Don't auto-size since there's no limit on lines.
            return;
        }

        CharSequence text = getText();
        TransformationMethod method = getTransformationMethod();
        if (method != null) {
            text = method.getTransformation(text, this);
        }
        int targetWidth = getWidth() - getPaddingLeft() - getPaddingRight();
        if (targetWidth > 0) {
            Context context = getContext();
            Resources r = Resources.getSystem();
            DisplayMetrics displayMetrics;

            float size = mMaxTextSize;
            float high = size;
            float low = 0;

            if (context != null) {
                r = context.getResources();
            }
            displayMetrics = r.getDisplayMetrics();

            mPaint.set(getPaint());
            mPaint.setTextSize(size);

            if ((mMaxLines == 1 && mPaint.measureText(text, 0, text.length()) > targetWidth)
                    || getLineCount(text, mPaint, size, targetWidth, displayMetrics) > mMaxLines) {
                size = getTextSize(text, mPaint, targetWidth, mMaxLines, low, high, mPrecision,
                        displayMetrics);
            }

            if (size < mMinTextSize) {
                size = mMinTextSize;
            }

            super.setTextSize(TypedValue.COMPLEX_UNIT_PX, size);
        }
    }",True
31,"getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics)",Method,"refitText() getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics) getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics) getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics) getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics)",,"java.lang.Object+Object() me.grantland.widget.AutofitTextView+getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics) me.grantland.widget.AutofitTextView+getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics) me.grantland.widget.AutofitTextView+getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics) me.grantland.widget.AutofitTextView+getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics) java.lang.CharSequence+length() java.lang.CharSequence+length() me.grantland.widget.AutofitTextView+getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics) me.grantland.widget.AutofitTextView+getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics) me.grantland.widget.AutofitTextView+getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics) me.grantland.widget.AutofitTextView+getTextSize(CharSequence,TextPaint,float,int,float,float,float,DisplayMetrics)",me.grantland.widget.AutofitTextView+SPEW me.grantland.widget.AutofitTextView+TAG,2282,56,10,"/** 
 * Recursive binary search to find the best size for the text
 */
","/**
     * Recursive binary search to find the best size for the text
     */
    private static float getTextSize(CharSequence text, TextPaint paint,
                                     float targetWidth, int maxLines,
                                     float low, float high, float precision,
                                     DisplayMetrics displayMetrics) {
        float mid = (low + high) / 2.0f;
        int lineCount = 1;
        StaticLayout layout = null;

        paint.setTextSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_PX, mid,
                displayMetrics));

        if (maxLines != 1) {
            layout = new StaticLayout(text, paint, (int)targetWidth, Layout.Alignment.ALIGN_NORMAL,
                    1.0f, 0.0f, true);
            lineCount = layout.getLineCount();
        }

        if (SPEW) Log.d(TAG, ""low="" + low + "" high="" + high + "" mid="" + mid +
                "" target="" + targetWidth + "" maxLines="" + maxLines + "" lineCount="" + lineCount);

        if (lineCount > maxLines) {
            return getTextSize(text, paint, targetWidth, maxLines, low, mid, precision,
                    displayMetrics);
        }
        else if (lineCount < maxLines) {
            return getTextSize(text, paint, targetWidth, maxLines, mid, high, precision,
                    displayMetrics);
        }
        else {
            float maxLineWidth = 0;
            if (maxLines == 1) {
                maxLineWidth = paint.measureText(text, 0, text.length());
            } else {
                for (int i = 0; i < lineCount; i++) {
                    if (layout.getLineWidth(i) > maxLineWidth) {
                        maxLineWidth = layout.getLineWidth(i);
                    }
                }
            }

            if ((high - low) < precision) {
                return low;
            } else if (maxLineWidth > targetWidth) {
                return getTextSize(text, paint, targetWidth, maxLines, low, mid, precision,
                        displayMetrics);
            } else if (maxLineWidth < targetWidth) {
                return getTextSize(text, paint, targetWidth, maxLines, mid, high, precision,
                        displayMetrics);
            } else {
                return mid;
            }
        }
    }",True
32,"getLineCount(CharSequence,TextPaint,float,float,DisplayMetrics)",Method,refitText(),,java.lang.Object+Object(),,463,8,10,,"private static int getLineCount(CharSequence text, TextPaint paint, float size, float width,
                                    DisplayMetrics displayMetrics) {
        paint.setTextSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_PX, size,
                displayMetrics));
        StaticLayout layout = new StaticLayout(text, paint, (int)width,
                Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
        return layout.getLineCount();
    }",True
33,"onTextChanged(CharSequence,int,int,int)",Method,,,me.grantland.widget.AutofitTextView+refitText() me.grantland.widget.AutofitTextView+refitText(),,262,6,4,,"@Override
    protected void onTextChanged(final CharSequence text, final int start,
                                 final int lengthBefore, final int lengthAfter) {
        super.onTextChanged(text, start, lengthBefore, lengthAfter);
        refitText();
    }",True
34,"onSizeChanged(int,int,int,int)",Method,,,me.grantland.widget.AutofitTextView+refitText() me.grantland.widget.AutofitTextView+refitText(),,191,7,4,,"@Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        if (w != oldw) {
            refitText();
        }
    }",True
