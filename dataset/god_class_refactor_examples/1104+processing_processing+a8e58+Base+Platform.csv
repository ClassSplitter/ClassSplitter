index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,REVISION,Field,,,,,40,1,26,,static private final int REVISION = 242;,False
2,VERSION_NAME,Field,,,,,121,2,10,"/** 
 * This might be replaced by main() if there's a lib/version.txt file. 
 */
","/** This might be replaced by main() if there's a lib/version.txt file. */
  static private String VERSION_NAME = ""0242"";",False
3,DEBUG,Field,,,,,100,2,9,"/** 
 * True if heavy debugging error/log messages are enabled 
 */
","/** True if heavy debugging error/log messages are enabled */
  static public boolean DEBUG = false;",False
4,platformNames,Field,,,,,83,2,8,,"static HashMap<Integer, String> platformNames =
    new HashMap<Integer, String>();",True
5,platformIndices,Field,,,,,81,1,8,,"static HashMap<String, Integer> platformIndices = new HashMap<String, Integer>();",True
6,nativeBits,Field,,,,,61,2,8,"/** 
 * How many bits this machine is 
 */
","/** How many bits this machine is */
  static int nativeBits;",True
7,nativeArch,Field,,,,,57,1,8,,"static String nativeArch = System.getProperty(""os.arch"");",True
8,commandLine,Field,,,,,35,1,10,,static private boolean commandLine;,False
9,preferencesFrame,Field,,,,,34,1,0,,PreferencesFrame preferencesFrame;,False
10,contributionManagerFrame,Field,,,,,51,1,0,,ContributionManagerDialog contributionManagerFrame;,True
11,untitledFolder,Field,,,,,27,1,8,,static File untitledFolder;,False
12,editors,Field,,,,,134,3,4,"/** 
 * List of currently active editors. 
 */
","/** List of currently active editors. */
  protected List<Editor> editors =
    Collections.synchronizedList(new ArrayList<Editor>());",False
13,activeEditor,Field,,,,,30,1,4,,protected Editor activeEditor;,False
14,defaultFileMenu,Field,,,,,109,2,9,"/** 
 * A lone file menu to be used when all sketch windows are closed. 
 */
","/** A lone file menu to be used when all sketch windows are closed. */
  static public JMenu defaultFileMenu;",False
15,nextMode,Field,,,,,130,5,2,"/** 
 * Starts with the last mode used with the environment, or the default mode if not used.
 */
","/**
   * Starts with the last mode used with the environment,
   * or the default mode if not used.
   */
  private Mode nextMode;",False
16,coreModes,Field,,,,,101,2,2,"/** 
 * The built-in modes. coreModes[0] will be considered the 'default'. 
 */
","/** The built-in modes. coreModes[0] will be considered the 'default'. */
  private Mode[] coreModes;",False
17,modeContribs,Field,,,,,51,1,4,,protected ArrayList<ModeContribution> modeContribs;,False
18,exampleContribs,Field,,,,,58,1,4,,protected ArrayList<ExamplesContribution> exampleContribs;,False
19,sketchbookMenu,Field,,,,,29,1,2,,private JMenu sketchbookMenu;,False
20,recent,Field,,,,,22,1,2,,private Recent recent;,False
21,openChooser,Field,,,,,33,1,2,,private JFileChooser openChooser;,False
22,sketchbookFolder,Field,,,,,39,1,12,,static protected File sketchbookFolder;,False
23,main(String[]),Method,,processing.mode.java.JavaMode+main(String[]),java.awt.EventQueue+invokeLater(Runnable) java.awt.EventQueue+invokeLater(Runnable) +() +run(),,479,13,9,,"static public void main(final String[] args) {
    EventQueue.invokeLater(new Runnable() {
        public void run() {
          try {
            createAndShowGUI(args);
          } catch (Throwable t) {
            showBadnessTrace(""It was not meant to be"",
                             ""A serious problem happened during startup. Please report:\n"" +
                             ""http://github.com/processing/processing/issues/new"", t, true);
          }
        }
    });
  }",False
24,createAndShowGUI(String[]),Method,,,"processing.app.Base+getContentFile(String) processing.app.Base+getContentFile(String) java.io.File+exists() java.io.File+exists() processing.core.PApplet+loadStrings(File) processing.core.PApplet+loadStrings(File) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() processing.app.Base+initPlatform() processing.app.Base+initPlatform() javax.swing.JPopupMenu+setDefaultLightWeightPopupEnabled(boolean) javax.swing.JPopupMenu+setDefaultLightWeightPopupEnabled(boolean) processing.app.Language+init() processing.app.Language+init() processing.app.Preferences+init() processing.app.Preferences+init() processing.app.SingleInstance+alreadyRunning(String[]) processing.app.SingleInstance+alreadyRunning(String[]) processing.app.Base+loge(String,Throwable) processing.app.Base+loge(String,Throwable) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getOldSketchbookPath() processing.app.Preferences+getOldSketchbookPath() processing.app.Preferences+getSketchbookPath() processing.app.Preferences+getSketchbookPath() java.lang.String+equals(Object) java.lang.String+equals(Object) processing.app.Base+locateSketchbookFolder() processing.app.Base+locateSketchbookFolder() processing.app.Base+createTempFolder(String,String,File) processing.app.Base+createTempFolder(String,String,File) java.io.File+deleteOnExit() java.io.File+deleteOnExit() processing.app.Base+showError(String,String,Throwable) processing.app.Base+showError(String,String,Throwable) processing.app.Base+log(String) processing.app.Base+log(String) processing.app.Base+Base(String[]) processing.app.SingleInstance+startServer(Base) processing.app.SingleInstance+startServer(Base) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getBoolean(String) java.awt.EventQueue+invokeLater(Runnable) java.awt.EventQueue+invokeLater(Runnable) +() +run()",processing.app.Base+VERSION_NAME processing.app.Base+VERSION_NAME processing.app.Base+untitledFolder processing.app.Base+untitledFolder,3951,110,10,,"static private void createAndShowGUI(String[] args) {
    try {
      File versionFile = getContentFile(""lib/version.txt""); //$NON-NLS-1$
      if (versionFile.exists()) {
        String version = PApplet.loadStrings(versionFile)[0];
        if (!version.equals(VERSION_NAME)) {
          VERSION_NAME = version;
//          RELEASE = true;
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    initPlatform();

    // Use native popups so they don't look so crappy on OS X
    JPopupMenu.setDefaultLightWeightPopupEnabled(false);

    // Don't put anything above this line that might make GUI,
    // because the platform has to be inited properly first.

    // Make sure a full JDK is installed
    //initRequirements();

    // Load the languages
    Language.init();

    // run static initialization that grabs all the prefs
    Preferences.init();

    if (!SingleInstance.alreadyRunning(args)) {
      // Set the look and feel before opening the window
      try {
        Platform.setLookAndFeel();
      } catch (Exception e) {
        loge(""Could not set the Look & Feel"", e); //$NON-NLS-1$
      }

      boolean sketchbookPrompt = false;
      if (Preferences.getBoolean(""welcome.show"")) {
        if (!Preferences.getBoolean(""welcome.seen"")) {
          // Check if there's a 2.0 sketchbook present
          String oldPath = Preferences.getOldSketchbookPath();
          if (oldPath != null) {
            String newPath = Preferences.getSketchbookPath();
            // If newPath is null, this is the first run of any 3.x version
            if (newPath == null) {
              sketchbookPrompt = true;

            } else if (oldPath.equals(newPath)) {
              // If both exist and are identical, then the user has been using
              // alpha releases of 3.x and needs to be warned about the larger
              // changes in this release.
              sketchbookPrompt = true;
            }
          }
        }
      }

      // Get the sketchbook path, and make sure it's set properly
      locateSketchbookFolder();


      // Create a location for untitled sketches
      try {
        untitledFolder = Base.createTempFolder(""untitled"", ""sketches"", null);
        untitledFolder.deleteOnExit();
      } catch (IOException e) {
        Base.showError(""Trouble without a name"",
                       ""Could not create a place to store untitled sketches.\n"" +
                       ""That's gonna prevent us from continuing."", e);
      }

      log(""about to create base...""); //$NON-NLS-1$
      try {
        final Base base = new Base(args);
        // Prevent more than one copy of the PDE from running.
        SingleInstance.startServer(base);

        // Needs to be shown after the first editor window opens, so that it
        // shows up on top, and doesn't prevent an editor window from opening.
        if (Preferences.getBoolean(""welcome.show"")) {
          final boolean prompt = sketchbookPrompt;
          EventQueue.invokeLater(new Runnable() {
            public void run() {
              try {
                new Welcome(base, prompt);
              } catch (IOException e) {
                Base.showBadnessTrace(""Unwelcoming"",
                                      ""Please report this error to\n"" +
                                      ""https://github.com/processing/processing/issues"", e, false);
              }
            }
          });
        }

      } catch (Throwable t) {
        // Catch-all to pick up badness during startup.
        if (t.getCause() != null) {
          // Usually this is the more important piece of information. We'll
          // show this one so that it's not truncated in the error window.
          t = t.getCause();
        }
        showBadnessTrace(""We're off on the wrong foot"",
                         ""An error occurred during startup."", t, true);
      }
      log(""done creating base...""); //$NON-NLS-1$
    }
  }",False
25,setCommandLine(),Method,,processing.mode.java.Commander+main(String[]),,processing.app.Base+commandLine,65,3,9,,"public static void setCommandLine() {
    commandLine = true;
  }",False
26,isCommandLine(),Method,,processing.app.ui.Editor+showChanges(),,processing.app.Base+commandLine,67,3,9,,"static public boolean isCommandLine() {
    return commandLine;
  }",False
27,initPlatform(),Method,createAndShowGUI(String[]),processing.app.ui.Welcome+main(String[]) processing.mode.java.Commander+main(String[]),"java.lang.Class+forName(String) java.lang.Class+forName(String) processing.app.Base+isMacOS() processing.app.Base+isMacOS() java.lang.Class+forName(String) java.lang.Class+forName(String) processing.app.Base+isWindows() processing.app.Base+isWindows() java.lang.Class+forName(String) java.lang.Class+forName(String) processing.app.Base+isLinux() processing.app.Base+isLinux() java.lang.Class+forName(String) java.lang.Class+forName(String) java.lang.Class+newInstance() java.lang.Class+newInstance() processing.app.Base+showError(String,String,Throwable) processing.app.Base+showError(String,String,Throwable)",,813,17,9,,"static public void initPlatform() {
    try {
      Class<?> platformClass = Class.forName(""processing.app.Platform""); //$NON-NLS-1$
      if (Base.isMacOS()) {
        platformClass = Class.forName(""processing.app.platform.MacPlatform""); //$NON-NLS-1$
      } else if (Base.isWindows()) {
        platformClass = Class.forName(""processing.app.platform.WindowsPlatform""); //$NON-NLS-1$
      } else if (Base.isLinux()) {
        platformClass = Class.forName(""processing.app.platform.LinuxPlatform""); //$NON-NLS-1$
      }
      platform = (Platform) platformClass.newInstance();
    } catch (Exception e) {
      Base.showError(""Problem Setting the Platform"",
                     ""An unknown error occurred while trying to load\n"" +
                     ""platform-specific code for your machine."", e);
    }
  }",True
28,getDefaultModeIdentifier(),Method,"buildCoreModes() promptForMode(File,ModeInfo)",,,,150,4,2,,"private String getDefaultModeIdentifier() {
    //return ""processing.mode.java.pdex.ExperimentalMode"";
    return ""processing.mode.java.JavaMode"";
  }",False
29,buildCoreModes(),Method,Base(String[]),,"processing.app.contrib.ModeContribution+getMode() processing.app.contrib.ModeContribution+load(Base,File,String) processing.app.contrib.ModeContribution+load(Base,File,String) processing.app.Base+getContentFile(String) processing.app.Base+getContentFile(String) processing.app.Base+getDefaultModeIdentifier() processing.app.Base+getDefaultModeIdentifier() processing.app.contrib.ModeContribution+getMode()",processing.app.Base+coreModes,702,18,2,,"private void buildCoreModes() {
    Mode javaMode =
      ModeContribution.load(this, getContentFile(""modes/java""), //$NON-NLS-1$
                            getDefaultModeIdentifier()).getMode(); //$NON-NLS-1$

    // PDE X calls getModeList() while it's loading, so coreModes must be set
    coreModes = new Mode[] { javaMode };

    /*
    Mode pdexMode =
      ModeContribution.load(this, getContentFile(""modes/ExperimentalMode""), //$NON-NLS-1$
                            ""processing.mode.experimental.ExperimentalMode"").getMode(); //$NON-NLS-1$

    // Safe to remove the old Java mode here?
    //coreModes = new Mode[] { pdexMode };
    coreModes = new Mode[] { pdexMode, javaMode };
    */
  }",False
30,rebuildContribModes(),Method,Base(String[]),,java.util.ArrayList+ArrayList() processing.app.contrib.ModeContribution+loadMissing(Base) processing.app.contrib.ModeContribution+loadMissing(Base),processing.app.Base+modeContribs processing.app.Base+modeContribs,741,21,0,"/** 
 * Instantiates and adds new contributed modes to the contribModes list. Checks for duplicates so the same mode isn't instantiates twice. Does not remove modes because modes can't be removed once they are instantiated.
 */
","/**
   * Instantiates and adds new contributed modes to the contribModes list.
   * Checks for duplicates so the same mode isn't instantiates twice. Does not
   * remove modes because modes can't be removed once they are instantiated.
   */
  void rebuildContribModes() {
    if (modeContribs == null) {
      modeContribs = new ArrayList<ModeContribution>();
    }
    ModeContribution.loadMissing(this);

//    ArrayList<ModeContribution> newContribs =
//      ModeContribution.loadAll(getSketchbookModesFolder());
//    for (ModeContribution contrib : newContribs) {
//      if (!contribModes.contains(contrib)) {
//        if (contrib.instantiateModeClass(this)) {
//          contribModes.add(contrib);
//        }
//      }
//    }
  }",False
31,rebuildContribExamples(),Method,Base(String[]),,java.util.ArrayList+ArrayList() processing.app.contrib.ExamplesContribution+loadMissing(Base) processing.app.contrib.ExamplesContribution+loadMissing(Base),processing.app.Base+exampleContribs processing.app.Base+exampleContribs,426,11,0,"/** 
 * Instantiates and adds new contributed modes to the contribModes list. Checks for duplicates so the same mode isn't instantiates twice. Does not remove modes because modes can't be removed once they are instantiated.
 */
","/**
   * Instantiates and adds new contributed modes to the contribModes list.
   * Checks for duplicates so the same mode isn't instantiates twice. Does not
   * remove modes because modes can't be removed once they are instantiated.
   */
  void rebuildContribExamples() {
    if (exampleContribs == null) {
      exampleContribs = new ArrayList<ExamplesContribution>();
    }
    ExamplesContribution.loadMissing(this);
  }",False
32,Base(String[]),Method,,,"processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+cleanup(Base) processing.app.Base+buildCoreModes() processing.app.Base+buildCoreModes() processing.app.Base+rebuildContribModes() processing.app.Base+rebuildContribModes() processing.app.Base+rebuildContribExamples() processing.app.Base+rebuildContribExamples() processing.app.ui.Recent+Recent(Base) processing.app.Preferences+get(String) processing.app.Preferences+get(String) processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode() processing.app.Base+log(String) processing.app.Base+log(String) processing.app.Base+getModeList() processing.app.Base+getModeList() java.lang.String+equals(Object) processing.app.Mode+getIdentifier() processing.app.Mode+getIdentifier() java.lang.String+equals(Object) processing.app.Base+logf(String,Object[]) processing.app.Base+logf(String,Object[]) processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode() processing.app.Base+logf(String,Object[]) processing.app.Base+logf(String,Object[]) processing.app.contrib.ContributionManagerDialog+ContributionManagerDialog() processing.app.Mode+rebuildLibraryList() processing.app.Mode+rebuildLibraryList() processing.app.Base+isWindows() processing.app.Base+isWindows() java.io.File+File(String) java.io.File+getCanonicalPath() java.io.File+getCanonicalPath() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() processing.app.Base+handleOpen(String) processing.app.Base+handleOpen(String) processing.app.Base+handleNew() processing.app.Base+handleNew() processing.app.UpdateCheck+UpdateCheck(Base)",processing.app.Base+recent processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+contributionManagerFrame processing.app.Base+nextMode,2527,74,1,,"public Base(String[] args) throws Exception {
    ContributionManager.cleanup(this);
    buildCoreModes();
    rebuildContribModes();
    rebuildContribExamples();

    // Needs to happen after the sketchbook folder has been located.
    // Also relies on the modes to be loaded so it knows what can be
    // marked as an example.
    recent = new Recent(this);

    String lastModeIdentifier = Preferences.get(""mode.last""); //$NON-NLS-1$
    if (lastModeIdentifier == null) {
      nextMode = getDefaultMode();
      log(""Nothing set for last.sketch.mode, using default.""); //$NON-NLS-1$
    } else {
      for (Mode m : getModeList()) {
        if (m.getIdentifier().equals(lastModeIdentifier)) {
          logf(""Setting next mode to %s."", lastModeIdentifier); //$NON-NLS-1$
          nextMode = m;
        }
      }
      if (nextMode == null) {
        nextMode = getDefaultMode();
        logf(""Could not find mode %s, using default."", lastModeIdentifier); //$NON-NLS-1$
      }
    }

    contributionManagerFrame = new ContributionManagerDialog();

    // Make sure ThinkDifferent has library examples too
    nextMode.rebuildLibraryList();

    // Put this after loading the examples, so that building the default file
    // menu works on Mac OS X (since it needs examplesFolder to be set).
    platform.init(this);

//    toolsFolder = getContentFile(""tools"");

//    // Check if there were previously opened sketches to be restored
//    boolean opened = restoreSketches();
    boolean opened = false;

    // Check if any files were passed in on the command line
    for (int i = 0; i < args.length; i++) {
      String path = args[i];
      // Fix a problem with systems that use a non-ASCII languages. Paths are
      // being passed in with 8.3 syntax, which makes the sketch loader code
      // unhappy, since the sketch folder naming doesn't match up correctly.
      // http://dev.processing.org/bugs/show_bug.cgi?id=1089
      if (isWindows()) {
        try {
          File file = new File(args[i]);
          path = file.getCanonicalPath();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
      if (handleOpen(path) != null) {
        opened = true;
      }
    }

    // Create a new empty window (will be replaced with any files to be opened)
    if (!opened) {
//      System.out.println(""opening a new window"");
      handleNew();
//    } else {
//      System.out.println(""something else was opened"");
    }

    // check for updates
    new UpdateCheck(this);
  }",False
33,getActiveEditor(),Method,,"processing.app.contrib.ContributionListing+countUpdates(Base) processing.app.contrib.ContributionListing+countUpdates(Base) processing.app.contrib.ContributionListing+hasUpdates(Base) processing.app.contrib.ContributionListing+hasUpdates(Base) processing.app.contrib.ContributionManager+run() processing.app.contrib.ContributionManager+run() processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ExamplesContribution+isCompatible(Base,StringDict) processing.app.contrib.LocalContribution+copyAndLoad(Base,boolean,StatusPanel) processing.app.ui.ExamplesFrame+setVisible() processing.app.ui.SketchbookFrame+run() processing.mode.java.JavaEditor+autoSave()",,processing.app.Base+activeEditor,117,4,1,"/** 
 * Returns the front most, active editor window. 
 */
","/** Returns the front most, active editor window. */
  public Editor getActiveEditor() {
    return activeEditor;
  }",False
34,getEditors(),Method,,"processing.app.contrib.ContributionManager+refreshInstalled(Editor) processing.app.contrib.ContributionManagerDialog+actionPerformed(ActionEvent) processing.app.contrib.ContributionManagerDialog+cancel() processing.app.contrib.ContributionManagerDialog+cancel() processing.app.contrib.LocalContribution+remove(Editor,ContribProgressMonitor,StatusPanel,ContributionListing) processing.app.contrib.LocalContribution+remove(Editor,ContribProgressMonitor,StatusPanel,ContributionListing) processing.app.contrib.ToolContribution+clearClassLoader(Base) processing.app.ui.Editor+menuSelected(MenuEvent) processing.app.ui.EditorHeader+actionPerformed(ActionEvent) processing.app.ui.PreferencesFrame+applyFrame() processing.app.ui.PreferencesFrame+applyFrame()",,processing.app.Base+editors,116,4,1,"/** 
 * Get the list of currently active editor windows. 
 */
","/** Get the list of currently active editor windows. */
  public List<Editor> getEditors() {
    return editors;
  }",False
35,changeMode(Mode),Method,,processing.app.ui.Editor+actionPerformed(ActionEvent),"processing.app.ui.Editor+getMode() processing.app.ui.Editor+getMode() processing.app.ui.Editor+getSketch() processing.app.ui.Editor+getSketch() processing.app.Sketch+isUntitled() processing.app.Sketch+isUntitled() processing.app.Base+handleClose(Editor,boolean) processing.app.Base+handleClose(Editor,boolean) processing.app.Base+handleNew() processing.app.Base+handleNew() processing.app.Sketch+getCode() processing.app.Sketch+getCode() processing.app.Mode+validExtension(String) processing.app.Mode+validExtension(String) processing.app.SketchCode+getExtension() processing.app.SketchCode+getExtension() java.io.File+File(File,String) processing.app.Sketch+getCodeFolder() processing.app.Sketch+getCodeFolder() processing.app.Base+saveModeSettings(File,Mode) processing.app.Base+saveModeSettings(File,Mode) processing.app.Base+handleClose(Editor,boolean) processing.app.Base+handleClose(Editor,boolean) processing.app.Base+handleOpen(String) processing.app.Base+handleOpen(String) processing.app.Sketch+getMainFilePath() processing.app.Sketch+getMainFilePath()",processing.app.Base+activeEditor processing.app.Base+activeEditor processing.app.Base+nextMode processing.app.Base+activeEditor processing.app.Base+nextMode processing.app.Base+activeEditor,1241,34,1,"/** 
 * The call has already checked to make sure this sketch is not modified, now change the mode.
 */
","/**
   * The call has already checked to make sure this sketch is not modified,
   * now change the mode.
   */
  public void changeMode(Mode mode) {
    if (activeEditor.getMode() != mode) {
      Sketch sketch = activeEditor.getSketch();
      nextMode = mode;

      if (sketch.isUntitled()) {
        // If no changes have been made, just close and start fresh.
        // (Otherwise the editor would lose its 'untitled' status.)
        handleClose(activeEditor, true);
        handleNew();

      } else {
        // If the current editor contains file extensions that the new mode can handle, then
        // write a sketch.properties file with the new mode specified, and reopen.
        boolean newModeCanHandleCurrentSource = true;
        for (final SketchCode code: sketch.getCode()) {
          if (!mode.validExtension(code.getExtension())) {
            newModeCanHandleCurrentSource = false;
            break;
          }
        }
        if (newModeCanHandleCurrentSource) {
          final File props = new File(sketch.getCodeFolder(), ""sketch.properties"");
          saveModeSettings(props, nextMode);
          handleClose(activeEditor, true);
          handleOpen(sketch.getMainFilePath());
        }
      }
    }
  }",False
36,getModeContribs(),Method,getInstalledContribs(),processing.app.contrib.ContributionListing+countUpdates(Base) processing.app.contrib.ContributionListing+hasUpdates(Base) processing.app.contrib.ContributionManager+run() processing.app.contrib.ContributionManager+run() processing.app.contrib.ContributionTab+updateContributionListing() processing.app.contrib.ModeContribution+clearClassLoader(Base) processing.app.contrib.ModeContribution+loadMissing(Base),,processing.app.Base+modeContribs,78,3,1,,"public List<ModeContribution> getModeContribs() {
    return modeContribs;
  }",False
37,getModeList(),Method,"Base(String[]) handleOpenPrompt() promptForMode(File,ModeInfo) findMode(String) rebuildSketchbookMenus() checkSketchFolder(File,String)","processing.app.contrib.ModeContribution+initLoader(Base,String) processing.app.Sketch+isReadOnly() processing.app.ui.Editor+initModeMenu() processing.app.ui.Recent+updateMenuRecord(JMenu,Record,String)",java.util.ArrayList+ArrayList() java.util.ArrayList+addAll(Collection) java.util.ArrayList+addAll(Collection) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) java.util.ArrayList+add(E) java.util.ArrayList+add(E) processing.app.contrib.ModeContribution+getMode() processing.app.contrib.ModeContribution+getMode(),processing.app.Base+coreModes processing.app.Base+modeContribs processing.app.Base+modeContribs,300,10,1,,"public List<Mode> getModeList() {
    ArrayList<Mode> allModes = new ArrayList<Mode>();
    allModes.addAll(Arrays.asList(coreModes));
    if (modeContribs != null) {
      for (ModeContribution contrib : modeContribs) {
        allModes.add(contrib.getMode());
      }
    }
    return allModes;
  }",False
38,getExampleContribs(),Method,getInstalledContribs(),processing.app.contrib.ContributionTab+updateContributionListing() processing.app.contrib.ExamplesContribution+loadMissing(Base),,processing.app.Base+exampleContribs,88,3,1,,"public List<ExamplesContribution> getExampleContribs() {
    return exampleContribs;
  }",False
39,getInstalledContribs(),Method,getInstalledContribsInfo(),,java.util.ArrayList+ArrayList() processing.app.Base+getModeContribs() processing.app.Base+getModeContribs() java.util.List+addAll(Collection) java.util.List+addAll(Collection) processing.app.contrib.ModeContribution+getMode() processing.app.contrib.ModeContribution+getMode() java.util.List+addAll(Collection) java.util.List+addAll(Collection) java.util.ArrayList+ArrayList(Collection) java.util.List+addAll(Collection) java.util.List+addAll(Collection) processing.app.contrib.ToolContribution+loadAll(File) processing.app.contrib.ToolContribution+loadAll(File) processing.app.Base+getSketchbookToolsFolder() processing.app.Base+getSketchbookToolsFolder() java.util.List+addAll(Collection) java.util.List+addAll(Collection) processing.app.Base+getExampleContribs() processing.app.Base+getExampleContribs(),processing.app.Mode+contribLibraries,788,20,2,,"private List<Contribution> getInstalledContribs() {
    List<Contribution> contributions = new ArrayList<Contribution>();

    List<ModeContribution> modeContribs = getModeContribs();
    contributions.addAll(modeContribs);

    for (ModeContribution modeContrib : modeContribs) {
      Mode mode = modeContrib.getMode();
      contributions.addAll(new ArrayList<Library>(mode.contribLibraries));
    }

    // TODO this duplicates code in Editor, but it's not editor-specific
//    List<ToolContribution> toolContribs =
//      ToolContribution.loadAll(Base.getSketchbookToolsFolder());
//    contributions.addAll(toolContribs);
    contributions.addAll(ToolContribution.loadAll(getSketchbookToolsFolder()));

    contributions.addAll(getExampleContribs());
    return contributions;
  }",False
40,getInstalledContribsInfo(),Method,,processing.app.contrib.ContributionListing+run(),"processing.app.Base+getInstalledContribs() processing.app.Base+getInstalledContribs() processing.data.StringList+StringList() processing.app.contrib.Contribution+getTypeName() processing.app.contrib.Contribution+getTypeName() processing.core.PApplet+urlEncode(String) processing.core.PApplet+urlEncode(String) java.lang.String+format(Locale,String,Object[]) java.lang.String+format(Locale,String,Object[]) processing.app.contrib.Contribution+getName() processing.app.contrib.Contribution+getName() processing.app.contrib.Contribution+getUrl() processing.app.contrib.Contribution+getUrl() processing.app.contrib.Contribution+getVersion() processing.app.contrib.Contribution+getVersion() processing.app.contrib.Contribution+getPrettyVersion() processing.app.contrib.Contribution+getPrettyVersion() processing.data.StringList+append(String) processing.data.StringList+append(String) processing.app.Preferences+get(String) processing.app.Preferences+get(String) processing.data.StringList+join(String) processing.data.StringList+join(String) java.lang.String+getBytes() java.lang.String+getBytes()",,1274,30,1,,"public byte[] getInstalledContribsInfo() {
    List<Contribution> contribs = getInstalledContribs();
    StringList entries = new StringList();
    for (Contribution c : contribs) {
      String entry = c.getTypeName() + ""="" +
        PApplet.urlEncode(String.format(""name=%s\nurl=%s\nrevision=%d\nversion=%s"",
                                        c.getName(), c.getUrl(),
                                        c.getVersion(), c.getPrettyVersion()));
      entries.append(entry);
    }
    String joined =
      ""id="" + Preferences.get(""update.id"") + ""&"" + entries.join(""&"");
//    StringBuilder sb = new StringBuilder();
//    try {
//      // Truly ridiculous attempt to shove everything into a GET request.
//      // More likely to be seen as part of a grand plot.
//      ByteArrayOutputStream baos = new ByteArrayOutputStream();
//      GZIPOutputStream output = new GZIPOutputStream(baos);
//      PApplet.saveStream(output, new ByteArrayInputStream(joined.getBytes()));
//      output.close();
//      byte[] b = baos.toByteArray();
//      for (int i = 0; i < b.length; i++) {
//        sb.append(PApplet.hex(b[i], 2));
//      }
//    } catch (IOException e) {
//      e.printStackTrace();
//    }
//    return sb.toString();
    return joined.getBytes();
  }",False
41,handleActivated(Editor),Method,,processing.app.ui.Editor+windowActivated(WindowEvent),"processing.app.ui.EditorConsole+setEditor(Editor) processing.app.ui.EditorConsole+setEditor(Editor) processing.app.ui.Editor+getMode() processing.app.ui.Editor+getMode() processing.app.Preferences+set(String,String) processing.app.Preferences+set(String,String) processing.app.Mode+getIdentifier() processing.app.Mode+getIdentifier()",processing.app.Base+activeEditor processing.app.Base+activeEditor processing.app.Base+nextMode processing.app.Base+nextMode,356,10,1,,"public void handleActivated(Editor whichEditor) {
    activeEditor = whichEditor;

    // set the current window to be the console that's getting output
    EditorConsole.setEditor(activeEditor);

    // make this the next mode to be loaded
    nextMode = whichEditor.getMode();
    Preferences.set(""mode.last"", nextMode.getIdentifier()); //$NON-NLS-1$
  }",False
42,breakTime,Field,,,,,26,1,0,,boolean breakTime = false;,False
43,months,Field,,,,,115,4,0,,"String[] months = {
    ""jan"", ""feb"", ""mar"", ""apr"", ""may"", ""jun"",
    ""jul"", ""aug"", ""sep"", ""oct"", ""nov"", ""dec""
  };",False
44,handleNew(),Method,Base(String[]) changeMode(Mode),processing.app.platform.ThinkDifferent+actionPerformed(ActionEvent) processing.app.SingleInstance+run() processing.app.ui.Editor+actionPerformed(ActionEvent),"processing.app.Preferences+get(String) processing.app.Preferences+get(String) processing.app.Preferences+get(String) processing.app.Preferences+get(String) java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) processing.core.PApplet+nf(int,int) processing.core.PApplet+nf(int,int) java.text.SimpleDateFormat+SimpleDateFormat(String) java.text.DateFormat+format(Date) java.text.DateFormat+format(Date) java.util.Date+Date() processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) processing.app.Sketch+sanitizeName(String) processing.app.Sketch+sanitizeName(String) java.io.File+File(File,String) java.io.File+exists() java.io.File+exists() java.io.File+exists() java.io.File+File(File,String) java.io.File+exists() java.io.File+mkdirs() java.io.File+mkdirs() java.io.File+File(File,String) processing.app.Mode+getDefaultExtension() processing.app.Mode+getDefaultExtension() java.io.File+createNewFile() java.io.File+createNewFile() java.io.IOException+IOException(String) java.lang.Object+equals(Object) java.lang.Object+equals(Object) processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode() processing.app.Base+saveModeSettings(File,Mode) processing.app.Base+saveModeSettings(File,Mode) java.io.File+File(File,String) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath() processing.app.Base+handleOpen(String,boolean) processing.app.Base+handleOpen(String,boolean) processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable)",processing.app.Base+untitledFolder java.util.Calendar+DAY_OF_MONTH java.util.Calendar+MONTH processing.app.Base+months processing.app.Base+breakTime processing.app.Base+breakTime processing.app.Base+sketchbookFolder processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode,3271,79,1,"/** 
 * Create a new untitled document in a new sketch window.
 */
","/**
   * Create a new untitled document in a new sketch window.
   */
  public void handleNew() {
    try {
      File newbieDir = null;
      String newbieName = null;

      // In 0126, untitled sketches will begin in the temp folder,
      // and then moved to a new location because Save will default to Save As.
//      File sketchbookDir = getSketchbookFolder();
      File newbieParentDir = untitledFolder;

      String prefix = Preferences.get(""editor.untitled.prefix"");

      // Use a generic name like sketch_031008a, the date plus a char
      int index = 0;
      String format = Preferences.get(""editor.untitled.suffix"");
      String suffix = null;
      if (format == null) {
        Calendar cal = Calendar.getInstance();
        int day = cal.get(Calendar.DAY_OF_MONTH);  // 1..31
        int month = cal.get(Calendar.MONTH);  // 0..11
        suffix = months[month] + PApplet.nf(day, 2);
      } else {
        //SimpleDateFormat formatter = new SimpleDateFormat(""yyMMdd"");
        //SimpleDateFormat formatter = new SimpleDateFormat(""MMMdd"");
        //String purty = formatter.format(new Date()).toLowerCase();
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        suffix = formatter.format(new Date());
      }
      do {
        if (index == 26) {
          // In 0159, avoid running past z by sending people outdoors.
          if (!breakTime) {
            Base.showWarning(""Time for a Break"",
                             ""You've reached the limit for auto naming of new sketches\n"" +
                             ""for the day. How about going for a walk instead?"", null);
            breakTime = true;
          } else {
            Base.showWarning(""Sunshine"",
                             ""No really, time for some fresh air for you."", null);
          }
          return;
        }
        newbieName = prefix + suffix + ((char) ('a' + index));
        // Also sanitize the name since it might do strange things on
        // non-English systems that don't use this sort of date format.
        // http://code.google.com/p/processing/issues/detail?id=283
        newbieName = Sketch.sanitizeName(newbieName);
        newbieDir = new File(newbieParentDir, newbieName);
        index++;
        // Make sure it's not in the temp folder *and* it's not in the sketchbook
      } while (newbieDir.exists() || new File(sketchbookFolder, newbieName).exists());

      // Make the directory for the new sketch
      newbieDir.mkdirs();

      // Make an empty pde file
      File newbieFile =
        new File(newbieDir, newbieName + ""."" + nextMode.getDefaultExtension()); //$NON-NLS-1$
      if (!newbieFile.createNewFile()) {
        throw new IOException(newbieFile + "" already exists."");
      }

      // Create sketch properties file if it's not the default mode.
      if (!nextMode.equals(getDefaultMode())) {
        saveModeSettings(new File(newbieDir, ""sketch.properties""), nextMode);
      }

      String path = newbieFile.getAbsolutePath();
      /*Editor editor =*/ handleOpen(path, true);

    } catch (IOException e) {
      Base.showWarning(""That's new to me"",
                       ""A strange and unexplainable error occurred\n"" +
                       ""while trying to create a new sketch."", e);
    }
  }",False
45,"saveModeSettings(File,Mode)",Method,changeMode(Mode) handleNew(),,"processing.app.Settings+Settings(File) processing.app.Settings+set(String,String) processing.app.Settings+set(String,String) processing.app.Mode+getTitle() processing.app.Mode+getTitle() processing.app.Settings+set(String,String) processing.app.Settings+set(String,String) processing.app.Mode+getIdentifier() processing.app.Mode+getIdentifier() processing.app.Settings+save() processing.app.Settings+save() java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage()",java.lang.System+err,385,10,2,,"private void saveModeSettings(final File sketchProps, final Mode mode) {
    try {
      final Settings settings = new Settings(sketchProps);
      settings.set(""mode"", mode.getTitle());
      settings.set(""mode.id"", mode.getIdentifier());
      settings.save();
    } catch (IOException e) {
      System.err.println(""While creating "" + sketchProps + "": "" + e.getMessage());
    }
  }",False
46,getDefaultMode(),Method,"Base(String[]) Base(String[]) handleNew() handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState)",,,processing.app.Base+coreModes,59,3,1,,"public Mode getDefaultMode() {
    return coreModes[0];
  }",False
47,getNextMode(),Method,,processing.app.platform.ThinkDifferent+actionPerformed(ActionEvent),,processing.app.Base+nextMode,123,4,1,"/** 
 * Used by ThinkDifferent so that it can have a Sketchbook menu. 
 */
","/** Used by ThinkDifferent so that it can have a Sketchbook menu. */
  public Mode getNextMode() {
    return nextMode;
  }",False
48,handleOpenPrompt(),Method,,processing.app.Mode+actionPerformed(ActionEvent) processing.app.platform.ThinkDifferent+actionPerformed(ActionEvent) processing.app.ui.Editor+actionPerformed(ActionEvent),"java.util.ArrayList+ArrayList() processing.app.Base+getModeList() processing.app.Base+getModeList() java.util.ArrayList+add(E) java.util.ArrayList+add(E) processing.app.Mode+getDefaultExtension() processing.app.Mode+getDefaultExtension() processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getBoolean(String) java.awt.FileDialog+FileDialog(Frame,String,int) java.awt.FileDialog+setFilenameFilter(FilenameFilter) java.awt.FileDialog+setFilenameFilter(FilenameFilter) +() +accept(File,String)",processing.app.Base+activeEditor java.awt.FileDialog+LOAD,2368,71,1,"/** 
 * Prompt for a sketch to open, and open it in a new window.
 */
","/**
   * Prompt for a sketch to open, and open it in a new window.
   */
  public void handleOpenPrompt() {
    final ArrayList<String> extensions = new ArrayList<String>();
    for (Mode mode : getModeList()) {
      extensions.add(mode.getDefaultExtension());
    }


    final String prompt = Language.text(""open"");

    // don't use native dialogs on Linux (or anyone else w/ override)
    if (Preferences.getBoolean(""chooser.files.native"")) {  //$NON-NLS-1$
      // use the front-most window frame for placing file dialog
      FileDialog openDialog =
        new FileDialog(activeEditor, prompt, FileDialog.LOAD);

      // Only show .pde files as eligible bachelors
      openDialog.setFilenameFilter(new FilenameFilter() {
        public boolean accept(File dir, String name) {
          // confirmed to be working properly [fry 110128]
          for (String ext : extensions) {
            if (name.toLowerCase().endsWith(""."" + ext)) { //$NON-NLS-1$
              return true;
            }
          }
          return false;
        }
      });

      openDialog.setVisible(true);

      String directory = openDialog.getDirectory();
      String filename = openDialog.getFile();
      if (filename != null) {
        File inputFile = new File(directory, filename);
        handleOpen(inputFile.getAbsolutePath());
      }

    } else {
      if (openChooser == null) {
        openChooser = new JFileChooser();
      }
      openChooser.setDialogTitle(prompt);

      openChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
        public boolean accept(File file) {
          // JFileChooser requires you to explicitly say yes to directories
          // as well (unlike the AWT chooser). Useful, but... different.
          // http://code.google.com/p/processing/issues/detail?id=1151
          if (file.isDirectory()) {
            return true;
          }
          for (String ext : extensions) {
            if (file.getName().toLowerCase().endsWith(""."" + ext)) { //$NON-NLS-1$
              return true;
            }
          }
          return false;
        }

        public String getDescription() {
          return ""Processing Sketch"";
        }
      });
      if (openChooser.showOpenDialog(activeEditor) == JFileChooser.APPROVE_OPTION) {
        handleOpen(openChooser.getSelectedFile().getAbsolutePath());
      }
    }
  }",False
49,handleOpen(String),Method,Base(String[]) changeMode(Mode),processing.app.platform.ThinkDifferent+openFiles(OpenFilesEvent) processing.app.SingleInstance+run() processing.app.ui.ExamplesFrame+mouseClicked(MouseEvent) processing.app.ui.ExamplesFrame+keyTyped(KeyEvent) processing.app.ui.Recent+actionPerformed(ActionEvent) processing.app.ui.SketchbookFrame+mouseClicked(MouseEvent) processing.app.ui.SketchbookFrame+keyTyped(KeyEvent),"processing.app.Base+handleOpen(String,boolean) processing.app.Base+handleOpen(String,boolean)",,169,6,1,"/** 
 * Open a sketch from the path specified. Do not use for untitled sketches.
 */
","/**
   * Open a sketch from the path specified. Do not use for untitled sketches.
   */
  public Editor handleOpen(String path) {
    return handleOpen(path, false);
  }",False
50,"handleOpen(String,boolean)",Method,handleNew() handleOpen(String),,"processing.app.Base+handleOpen(String,boolean,EditorState) processing.app.Base+handleOpen(String,boolean,EditorState) processing.app.ui.EditorState+EditorState(List<Editor>)",processing.app.Base+editors,346,9,1,"/** 
 * Open a sketch in a new window.
 * @param path Path to the pde file for the sketch in question
 * @return the Editor object, so that properties (like 'untitled')can be set by the caller
 */
","/**
   * Open a sketch in a new window.
   * @param path Path to the pde file for the sketch in question
   * @return the Editor object, so that properties (like 'untitled')
   *         can be set by the caller
   */
  public Editor handleOpen(String path, boolean untitled) {
    return handleOpen(path, untitled, new EditorState(editors));
  }",False
51,"handleOpen(String,boolean,EditorState)",Method,"handleOpen(String,boolean)",,"java.io.File+File(String) java.io.File+exists() java.io.File+exists() processing.app.Sketch+getCode() processing.app.ui.Editor+getSketch() processing.app.ui.Editor+getSketch() processing.app.Sketch+getCode() java.io.File+equals(Object) processing.app.SketchCode+getFile() processing.app.SketchCode+getFile() java.io.File+equals(Object) java.awt.Window+toFront() java.awt.Window+toFront() processing.app.Base+handleRecent(Editor) processing.app.Base+handleRecent(Editor) processing.app.Sketch+isSanitaryName(String) processing.app.Sketch+isSanitaryName(String) java.io.File+getName() java.io.File+getName() processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) java.io.File+getName() java.io.File+getName() processing.app.Mode+canEdit(File) processing.app.Mode+canEdit(File) processing.app.Base+selectMode(File) processing.app.Base+selectMode(File) processing.app.Mode+createEditor(Base,String,EditorState) processing.app.Mode+createEditor(Base,String,EditorState) processing.app.Sketch+setUntitled(boolean) processing.app.ui.Editor+getSketch() processing.app.ui.Editor+getSketch() processing.app.Sketch+setUntitled(boolean) java.util.List+add(E) java.util.List+add(E) processing.app.Base+handleRecent(Editor) processing.app.Base+handleRecent(Editor) java.awt.Window+setVisible(boolean) java.awt.Window+setVisible(boolean) java.lang.String+equals(Object) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage() java.lang.String+equals(Object) processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage() processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) processing.app.Mode+getTitle() processing.app.Mode+getTitle() java.lang.Object+equals(Object) java.lang.Object+equals(Object) processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode() processing.app.Base+showBadnessTrace(String,String,Throwable,boolean) processing.app.Base+showBadnessTrace(String,String,Throwable,boolean) processing.app.Base+showBadnessTrace(String,String,Throwable,boolean) processing.app.Base+showBadnessTrace(String,String,Throwable,boolean) processing.app.Mode+getTitle() processing.app.Mode+getTitle() processing.app.Base+showBadnessTrace(String,String,Throwable,boolean) processing.app.Base+showBadnessTrace(String,String,Throwable,boolean) processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode()",processing.app.Base+editors processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+editors processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode,4078,101,4,,"protected Editor handleOpen(String path, boolean untitled,
                              EditorState state) {
    try {
      // System.err.println(""entering handleOpen "" + path);

      final File file = new File(path);
      if (!file.exists()) {
        return null;
      }

      // Cycle through open windows to make sure that it's not already open.
      for (Editor editor : editors) {
        // User may have double-clicked any PDE in the sketch folder,
        // so we have to check each open tab (not just the main one).
        // https://github.com/processing/processing/issues/2506
        for (SketchCode tab : editor.getSketch().getCode()) {
          if (tab.getFile().equals(file)) {
            editor.toFront();
            // move back to the top of the recent list
            handleRecent(editor);
            return editor;
          }
        }
      }

      if (!Sketch.isSanitaryName(file.getName())) {
        Base.showWarning(""You're tricky, but not tricky enough"",
                         file.getName() + "" is not a valid name for a sketch.\n"" +
                         ""Better to stick to ASCII, no spaces, and make sure\n"" +
                         ""it doesn't start with a number."", null);
        return null;
      }

      if (!nextMode.canEdit(file)) {
        final Mode mode = selectMode(file);
        if (mode == null) {
          return null;
        }
        nextMode = mode;
      }

      try {
        Editor editor = nextMode.createEditor(this, path, state);

        // opened successfully, let's go to work
        editor.getSketch().setUntitled(untitled);
        editors.add(editor);
        handleRecent(editor);

        // now that we're ready, show the window
        // (don't do earlier, cuz we might move it based on a window being closed)
        editor.setVisible(true);

        return editor;

      } catch (EditorException ee) {
        if (!ee.getMessage().equals("""")) {  // blank if the user canceled
          Base.showWarning(""Error opening sketch"", ee.getMessage(), ee);
        }
      } catch (NoSuchMethodError nsme) {
        Base.showWarning(""Mode out of date"",
                         nextMode.getTitle() + "" is not compatible with this version of Processing.\n"" +
                         ""Try updating the Mode or contact its author for a new version."", nsme);
      } catch (Throwable t) {
        if (nextMode.equals(getDefaultMode())) {
          showBadnessTrace(""Serious Problem"",
                           ""An unexpected, unknown, and unrecoverable error occurred\n"" +
                           ""while opening a new editor window. Please report this."", t, true);
        } else {
          showBadnessTrace(""Mode Problems"",
                           ""A nasty error occurred while trying to use "" + nextMode.getTitle() + "".\n"" +
                           ""It may not be compatible with this version of Processing.\n"" +
                           ""Try updating the Mode or contact its author for a new version."", t, false);
        }
      }
      /*
        if (editors.isEmpty()) {
          // if the bad mode is the default mode, don't go into an infinite loop
          // trying to recreate a window with the default mode.
          Mode defaultMode = getDefaultMode();
          if (nextMode == defaultMode) {
            Base.showError(""Editor Problems"",
                           ""An error occurred while trying to change modes.\n"" +
                           ""We'll have to quit for now because it's an\n"" +
                           ""unfortunate bit of indigestion with the default Mode."",
                           null);
          } else {
            editor = defaultMode.createEditor(this, path, state);
          }
        }
      */

    } catch (Throwable t) {
      showBadnessTrace(""Terrible News"",
                       ""A serious error occurred while "" +
                       ""trying to create a new editor window."", t,
                       nextMode == getDefaultMode());  // quit if default
      nextMode = getDefaultMode();
    }
    return null;
  }",False
52,ModeInfo,MemberClass,,,"processing.app.Base.ModeInfo+ModeInfo(String,String)",processing.app.Base.ModeInfo+title processing.app.Base.ModeInfo+id processing.app.Base.ModeInfo+id processing.app.Base.ModeInfo+title,194,9,10,,"private static class ModeInfo {
    public final String title;
    public final String id;

    public ModeInfo(String id, String title) {
      this.id = id;
      this.title = title;
    }
  }",False
53,modeInfoFor(File),Method,selectMode(File),,"java.io.File+getParentFile() java.io.File+getParentFile() java.io.File+File(File,String) java.io.File+exists() java.io.File+exists() processing.app.Settings+Settings(File) processing.app.Settings+get(String) processing.app.Settings+get(String) processing.app.Settings+get(String) processing.app.Settings+get(String) processing.app.Base.ModeInfo+ModeInfo(String,String) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage()",java.lang.System+err,671,20,10,,"private static ModeInfo modeInfoFor(final File sketch) {
    final File sketchFolder = sketch.getParentFile();
    final File sketchProps = new File(sketchFolder, ""sketch.properties"");
    if (!sketchProps.exists()) {
      return null;
    }
    try {
      final Settings settings = new Settings(sketchProps);
      final String title = settings.get(""mode"");
      final String id = settings.get(""mode.id"");
      if (title == null || id == null) {
        return null;
      }
      return new ModeInfo(id, title);
    } catch (IOException e) {
      System.err.println(""While trying to read "" + sketchProps + "": ""
        + e.getMessage());
    }
    return null;
  }",False
54,"promptForMode(File,ModeInfo)",Method,selectMode(File),,"java.lang.String+substring(int) java.io.File+getName() java.io.File+getName() java.lang.String+substring(int) java.lang.String+lastIndexOf(int) java.io.File+getName() java.io.File+getName() java.lang.String+lastIndexOf(int) java.util.ArrayList+ArrayList() processing.app.Base+getModeList() processing.app.Base+getModeList() processing.app.Mode+canEdit(File) processing.app.Mode+canEdit(File) java.util.List+add(E) java.util.List+add(E) java.util.List+size() java.util.List+size() java.lang.String+equals(Object) processing.app.Mode+getIdentifier() java.util.List+get(int) java.util.List+get(int) processing.app.Mode+getIdentifier() java.lang.String+equals(Object) processing.app.Base+getDefaultModeIdentifier() processing.app.Base+getDefaultModeIdentifier() java.util.List+get(int) java.util.List+get(int) java.util.List+size() java.util.List+size() processing.app.Base+showWarning(String,String) processing.app.Base+showWarning(String,String) processing.app.Base+showWarning(String,String) processing.app.Base+showWarning(String,String) java.util.List+toArray(T[]) java.util.List+toArray(T[]) java.util.List+size() java.util.List+size() processing.app.Mode+getTitle() processing.app.Mode+getTitle() javax.swing.JOptionPane+showInputDialog(Component,Object,String,int,Icon,Object[],Object) javax.swing.JOptionPane+showInputDialog(Component,Object,String,int,Icon,Object[],Object)",processing.app.Base.ModeInfo+title processing.app.Base+nextMode processing.app.Base.ModeInfo+title processing.app.Base.ModeInfo+title javax.swing.JOptionPane+QUESTION_MESSAGE,1936,40,2,,"private Mode promptForMode(final File sketch, final ModeInfo preferredMode) {
    final String extension =
      sketch.getName().substring(sketch.getName().lastIndexOf('.') + 1);
    final List<Mode> possibleModes = new ArrayList<Mode>();
    for (final Mode mode : getModeList()) {
      if (mode.canEdit(sketch)) {
        possibleModes.add(mode);
      }
    }
    if (possibleModes.size() == 1 &&
        possibleModes.get(0).getIdentifier().equals(getDefaultModeIdentifier())) {
      // If default mode can open it, then do so without prompting.
      return possibleModes.get(0);
    }
    if (possibleModes.size() == 0) {
      if (preferredMode == null) {
        Base.showWarning(""Modeless Dialog"",
                         ""I don't know how to open a sketch with the \""""
                         + extension
                         + ""\""\nfile extension. You'll have to install a different""
                         + ""\nProcessing mode for that."");
      } else {
        Base.showWarning(""Modeless Dialog"", ""You'll have to install ""
          + preferredMode.title + "" Mode "" + ""\nin order to open that sketch."");
      }
      return null;
    }
    final Mode[] modes = possibleModes.toArray(new Mode[possibleModes.size()]);
    final String message = preferredMode == null ?
      (nextMode.getTitle() + "" Mode can't open ."" + extension + "" files, "" +
       ""but you have one or more modes\ninstalled that can. "" +
       ""Would you like to try one?"") :
      (""That's a "" + preferredMode.title + "" Mode sketch, "" +
       ""but you don't have "" + preferredMode.title + "" installed.\n"" +
       ""Would you like to try a different mode for opening a "" +
       ""."" + extension + "" sketch?"");
    return (Mode) JOptionPane.showInputDialog(null, message, ""Choose Wisely"",
                                              JOptionPane.QUESTION_MESSAGE,
                                              null, modes, modes[0]);
  }",False
55,selectMode(File),Method,"handleOpen(String,boolean,EditorState)",,"processing.app.Base+modeInfoFor(File) processing.app.Base+modeInfoFor(File) processing.app.Base+findMode(String) processing.app.Base+findMode(String) processing.app.Base+promptForMode(File,ModeInfo) processing.app.Base+promptForMode(File,ModeInfo)",processing.app.Base.ModeInfo+id,290,8,2,,"private Mode selectMode(final File sketch) {
    final ModeInfo modeInfo = modeInfoFor(sketch);
    final Mode specifiedMode = modeInfo == null ? null : findMode(modeInfo.id);
    if (specifiedMode != null) {
      return specifiedMode;
    }
    return promptForMode(sketch, modeInfo);
  }",False
56,findMode(String),Method,selectMode(File),,processing.app.Base+getModeList() processing.app.Base+getModeList() java.lang.String+equals(Object) processing.app.Mode+getIdentifier() processing.app.Mode+getIdentifier() java.lang.String+equals(Object),,175,8,4,,"protected Mode findMode(String id) {
    for (Mode mode : getModeList()) {
      if (mode.getIdentifier().equals(id)) {
        return mode;
      }
    }
    return null;
  }",False
57,"handleClose(Editor,boolean)",Method,changeMode(Mode) changeMode(Mode),processing.app.Sketch+handleDeleteCode() processing.app.ui.Editor+windowClosing(WindowEvent) processing.app.ui.Editor+actionPerformed(ActionEvent),"processing.app.ui.Editor+checkModified() processing.app.ui.Editor+checkModified() processing.app.ui.Editor+internalCloseRunner() processing.app.ui.Editor+internalCloseRunner() java.util.List+size() java.util.List+size() processing.app.Base+isMacOS() processing.app.Base+isMacOS() processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) javax.swing.JOptionPane+showOptionDialog(Component,Object,String,int,int,Icon,Object[],Object) javax.swing.JOptionPane+showOptionDialog(Component,Object,String,int,int,Icon,Object[],Object) processing.app.Preferences+unset(String) processing.app.Preferences+unset(String) processing.app.Preferences+unset(String) processing.app.Preferences+unset(String) java.util.List+remove(Object) java.util.List+remove(Object) processing.app.Preferences+save() processing.app.Preferences+save() java.awt.Window+setVisible(boolean) java.awt.Window+setVisible(boolean) java.awt.Window+dispose() java.awt.Window+dispose() java.util.List+remove(Object) java.util.List+remove(Object) java.lang.System+exit(int) java.lang.System+exit(int) java.awt.Window+setVisible(boolean) java.awt.Window+setVisible(boolean) java.awt.Window+dispose() java.awt.Window+dispose() javax.swing.JMenu+insert(JMenuItem,int) javax.swing.JMenu+insert(JMenuItem,int) processing.app.Base+getRecentMenu() processing.app.Base+getRecentMenu() java.util.List+remove(Object) java.util.List+remove(Object) java.awt.Window+setVisible(boolean) java.awt.Window+setVisible(boolean) java.awt.Window+dispose() java.awt.Window+dispose() java.util.List+remove(Object) java.util.List+remove(Object)",processing.app.Base+editors processing.app.Base+defaultFileMenu javax.swing.JOptionPane+YES_NO_OPTION javax.swing.JOptionPane+QUESTION_MESSAGE javax.swing.JOptionPane+NO_OPTION javax.swing.JOptionPane+CLOSED_OPTION processing.app.Base+editors processing.app.Base+defaultFileMenu processing.app.Base+activeEditor processing.app.Base+editors processing.app.Base+defaultFileMenu processing.app.Base+activeEditor processing.app.Base+editors processing.app.Base+editors,3224,91,1,"/** 
 * Close a sketch as specified by its editor window.
 * @param editor Editor object of the sketch to be closed.
 * @param modeSwitch Whether this close is being done in the context of amode switch.
 * @return true if succeeded in closing, false if canceled.
 */
","/**
   * Close a sketch as specified by its editor window.
   * @param editor Editor object of the sketch to be closed.
   * @param modeSwitch Whether this close is being done in the context of a
   *      mode switch.
   * @return true if succeeded in closing, false if canceled.
   */
  public boolean handleClose(Editor editor, boolean modeSwitch) {
    // Check if modified
//    boolean immediate = editors.size() == 1;
    if (!editor.checkModified()) {
      return false;
    }

    // Close the running window, avoid window boogers with multiple sketches
    editor.internalCloseRunner();

//    System.out.println(""editors size is "" + editors.size());
    if (editors.size() == 1) {
      // For 0158, when closing the last window /and/ it was already an
      // untitled sketch, just give up and let the user quit.
//      if (Preferences.getBoolean(""sketchbook.closing_last_window_quits"") ||
//          (editor.untitled && !editor.getSketch().isModified())) {
      if (Base.isMacOS()) {
        // If the central menubar isn't supported on this OS X JVM,
        // we have to do the old behavior. Yuck!
        if (defaultFileMenu == null) {
          Object[] options = { Language.text(""prompt.ok""), Language.text(""prompt.cancel"") };
          String prompt =
            ""<html> "" +
            ""<head> <style type=\""text/css\"">""+
            ""b { font: 13pt \""Lucida Grande\"" }""+
            ""p { font: 11pt \""Lucida Grande\""; margin-top: 8px; width: 300px }""+
            ""</style> </head>"" +
            ""<b>Are you sure you want to Quit?</b>"" +
            ""<p>Closing the last open sketch will quit Processing."";

          int result = JOptionPane.showOptionDialog(editor,
            prompt,
            ""Quit"",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]);
          if (result == JOptionPane.NO_OPTION ||
              result == JOptionPane.CLOSED_OPTION) {
            return false;
          }
        }
      }

      Preferences.unset(""server.port""); //$NON-NLS-1$
      Preferences.unset(""server.key""); //$NON-NLS-1$

      // This will store the sketch count as zero
      editors.remove(editor);
//      System.out.println(""editors size now "" + editors.size());
//      storeSketches();

      // Save out the current prefs state
      Preferences.save();

      if (defaultFileMenu == null) {
        if (modeSwitch) {
          // need to close this editor, ever so temporarily
          editor.setVisible(false);
          editor.dispose();
          activeEditor = null;
          editors.remove(editor);
        } else {
          // Since this wasn't an actual Quit event, call System.exit()
          System.exit(0);
        }
      } else {  // on OS X, update the default file menu
        editor.setVisible(false);
        editor.dispose();
        defaultFileMenu.insert(getRecentMenu(), 2);
        activeEditor = null;
        editors.remove(editor);
      }

    } else {
      // More than one editor window open,
      // proceed with closing the current window.
      editor.setVisible(false);
      editor.dispose();
      editors.remove(editor);
    }
    return true;
  }",False
58,handleQuit(),Method,,"processing.app.platform.ThinkDifferent+handleQuitRequestWith(QuitEvent,QuitResponse) processing.app.ui.Editor+actionPerformed(ActionEvent)",processing.app.Base+handleQuitEach() processing.app.Base+handleQuitEach() processing.app.ui.Editor+internalCloseRunner() processing.app.ui.Editor+internalCloseRunner() processing.app.Preferences+save() processing.app.Preferences+save() processing.app.Base+isMacOS() processing.app.Base+isMacOS() java.lang.System+exit(int) java.lang.System+exit(int),processing.app.Base+editors,743,26,1,"/** 
 * Handler for File &rarr; Quit.
 * @return false if canceled, true otherwise.
 */
","/**
   * Handler for File &rarr; Quit.
   * @return false if canceled, true otherwise.
   */
  public boolean handleQuit() {
    // If quit is canceled, this will be replaced anyway
    // by a later handleQuit() that is not canceled.
//    storeSketches();

    if (handleQuitEach()) {
      // make sure running sketches close before quitting
      for (Editor editor : editors) {
        editor.internalCloseRunner();
      }
      // Save out the current prefs state
      Preferences.save();

      if (!Base.isMacOS()) {
        // If this was fired from the menu or an AppleEvent (the Finder),
        // then Mac OS X will send the terminate signal itself.
        System.exit(0);
      }
      return true;
    }
    return false;
  }",False
59,handleQuitEach(),Method,handleQuit(),,processing.app.ui.Editor+checkModified() processing.app.ui.Editor+checkModified(),processing.app.Base+editors,529,21,4,"/** 
 * Attempt to close each open sketch in preparation for quitting.
 * @return false if canceled along the way
 */
","/**
   * Attempt to close each open sketch in preparation for quitting.
   * @return false if canceled along the way
   */
  protected boolean handleQuitEach() {
//    int index = 0;
    for (Editor editor : editors) {
//      if (editor.checkModified()) {
//        // Update to the new/final sketch path for this fella
//        storeSketchPath(editor, index);
//        index++;
//
//      } else {
//        return false;
//      }
      if (!editor.checkModified()) {
        return false;
      }
    }
    return true;
  }",False
60,rebuildSketchbookMenusAsync(),Method,,,java.awt.EventQueue+invokeLater(Runnable) java.awt.EventQueue+invokeLater(Runnable) +() +run(),,408,13,4,"/** 
 * Asynchronous version of menu rebuild to be used on save and rename to prevent the interface from locking up until the menus are done.
 */
","/**
   * Asynchronous version of menu rebuild to be used on save and rename
   * to prevent the interface from locking up until the menus are done.
   */
  protected void rebuildSketchbookMenusAsync() {
    //System.out.println(""async enter"");
    //new Exception().printStackTrace();
    EventQueue.invokeLater(new Runnable() {
      public void run() {
        rebuildSketchbookMenus();
      }
    });
  }",False
61,thinkDifferentExamples(),Method,,processing.app.platform.ThinkDifferent+actionPerformed(ActionEvent),processing.app.Mode+showExamplesFrame() processing.app.Mode+showExamplesFrame(),processing.app.Base+nextMode,76,3,1,,"public void thinkDifferentExamples() {
    nextMode.showExamplesFrame();
  }",False
62,rebuildSketchbookMenus(),Method,setSketchbookFolder(File),"processing.app.Sketch+updateInternal(String,File)",processing.app.Base+getModeList() processing.app.Base+getModeList() processing.app.Mode+rebuildImportMenu() processing.app.Mode+rebuildImportMenu() processing.app.Mode+rebuildToolbarMenu() processing.app.Mode+rebuildToolbarMenu() processing.app.Mode+rebuildExamplesFrame() processing.app.Mode+rebuildExamplesFrame() processing.app.Mode+rebuildSketchbookFrame() processing.app.Mode+rebuildSketchbookFrame(),,572,15,4,"/** 
 * Synchronous version of rebuild, used when the sketchbook folder has changed, so that the libraries are properly re-scanned before those menus (and the examples window) are rebuilt.
 */
","/**
   * Synchronous version of rebuild, used when the sketchbook folder has
   * changed, so that the libraries are properly re-scanned before those menus
   * (and the examples window) are rebuilt.
   */
  protected void rebuildSketchbookMenus() {
    // rebuildSketchbookMenu(); // no need to rebuild sketchbook post 3.0
    for (Mode mode : getModeList()) {
      //mode.rebuildLibraryList();
      mode.rebuildImportMenu();  // calls rebuildLibraryList
      mode.rebuildToolbarMenu();
      mode.rebuildExamplesFrame();
      mode.rebuildSketchbookFrame();
    }
  }",False
63,rebuildSketchbookMenu(),Method,,,javax.swing.JMenu+removeAll() javax.swing.JMenu+removeAll() processing.app.Base+populateSketchbookMenu(JMenu) processing.app.Base+populateSketchbookMenu(JMenu),processing.app.Base+sketchbookMenu processing.app.Base+sketchbookMenu,619,17,4,,"protected void rebuildSketchbookMenu() {
//      System.err.println(""sketchbook: "" + sketchbookFolder);
    sketchbookMenu.removeAll();
    populateSketchbookMenu(sketchbookMenu);
//    boolean found = false;
//    try {
//      found = addSketches(sketchbookMenu, sketchbookFolder, false);
//    } catch (IOException e) {
//      Base.showWarning(""Sketchbook Menu Error"",
//                       ""An error occurred while trying to list the sketchbook."", e);
//    }
//    if (!found) {
//      JMenuItem empty = new JMenuItem(""(empty)"");
//      empty.setEnabled(false);
//      sketchbookMenu.add(empty);
//    }
  }",False
64,populateSketchbookMenu(JMenu),Method,rebuildSketchbookMenu(),,"processing.app.Base+addSketches(JMenu,File,boolean) processing.app.Base+addSketches(JMenu,File,boolean) processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) javax.swing.JMenuItem+JMenuItem(String) processing.app.Language+text(String) processing.app.Language+text(String) javax.swing.JMenuItem+setEnabled(boolean) javax.swing.JMenuItem+setEnabled(boolean) javax.swing.JMenu+add(JMenuItem) javax.swing.JMenu+add(JMenuItem)",processing.app.Base+sketchbookFolder,478,14,1,,"public void populateSketchbookMenu(JMenu menu) {
    boolean found = false;
    try {
      found = addSketches(menu, sketchbookFolder, false);
    } catch (IOException e) {
      Base.showWarning(""Sketchbook Menu Error"",
                       ""An error occurred while trying to list the sketchbook."", e);
    }
    if (!found) {
      JMenuItem empty = new JMenuItem(Language.text(""menu.file.sketchbook.empty""));
      empty.setEnabled(false);
      menu.add(empty);
    }
  }",False
65,getRecentMenu(),Method,"handleClose(Editor,boolean)",processing.app.ui.Editor+windowActivated(WindowEvent) processing.app.ui.Editor+windowDeactivated(WindowEvent),processing.app.ui.Recent+getMenu() processing.app.ui.Recent+getMenu(),processing.app.Base+recent,63,3,1,,"public JMenu getRecentMenu() {
    return recent.getMenu();
  }",False
66,getToolbarRecentMenu(),Method,,processing.app.Mode+insertToolbarRecentMenu() processing.app.Mode+removeToolbarRecentMenu(),processing.app.ui.Recent+getToolbarMenu() processing.app.ui.Recent+getToolbarMenu(),processing.app.Base+recent,77,3,1,,"public JMenu getToolbarRecentMenu() {
    return recent.getToolbarMenu();
  }",False
67,handleRecent(Editor),Method,"handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState)",processing.app.ui.Editor+addRecent(),processing.app.ui.Recent+handle(Editor) processing.app.ui.Recent+handle(Editor),processing.app.Base+recent,72,3,1,,"public void handleRecent(Editor editor) {
    recent.handle(editor);
  }",False
68,"handleRecentRename(Editor,String)",Method,,"processing.app.Sketch+updateInternal(String,File)","processing.app.ui.Recent+handleRename(Editor,String) processing.app.ui.Recent+handleRename(Editor,String)",processing.app.Base+recent,106,3,1,,"public void handleRecentRename(Editor editor,String oldPath){
    recent.handleRename(editor,oldPath);
  }",False
69,removeRecent(Editor),Method,,processing.app.ui.Editor+removeRecent(),processing.app.ui.Recent+remove(Editor) processing.app.ui.Recent+remove(Editor),processing.app.Base+recent,175,7,1,"/** 
 * Called before a sketch is renamed so that its old name is no longer in the menu.
 */
","/**
   * Called before a sketch is renamed so that its old name is
   * no longer in the menu.
   */
  public void removeRecent(Editor editor) {
    recent.remove(editor);
  }",False
70,"addSketches(JMenu,File,boolean)",Method,populateSketchbookMenu(JMenu),,"java.io.File+isDirectory() java.io.File+isDirectory() java.lang.String+equals(Object) java.io.File+getName() java.io.File+getName() java.lang.String+equals(Object) java.io.File+list() java.io.File+list() java.util.Arrays+sort(T[],Comparator) java.util.Arrays+sort(T[],Comparator) +() +actionPerformed(ActionEvent)",java.lang.String+CASE_INSENSITIVE_ORDER,2896,85,4,"/** 
 * Scan a folder recursively, and add any sketches found to the menu specified. Set the openReplaces parameter to true when opening the sketch should replace the sketch in the current window, or false when the sketch should open in a new window.
 */
","/**
   * Scan a folder recursively, and add any sketches found to the menu
   * specified. Set the openReplaces parameter to true when opening the sketch
   * should replace the sketch in the current window, or false when the
   * sketch should open in a new window.
   */
  protected boolean addSketches(JMenu menu, File folder,
                                final boolean replaceExisting) throws IOException {
    // skip .DS_Store files, etc (this shouldn't actually be necessary)
    if (!folder.isDirectory()) {
      return false;
    }

    if (folder.getName().equals(""libraries"")) {
      return false;  // let's not go there
    }

    String[] list = folder.list();
    // If a bad folder or unreadable or whatever, this will come back null
    if (list == null) {
      return false;
    }

    // Alphabetize the list, since it's not always alpha order
    Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);

    ActionListener listener = new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          String path = e.getActionCommand();
          if (new File(path).exists()) {
            boolean replace = replaceExisting;
            if ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0) {
              replace = !replace;
            }
//            if (replace) {
//              handleOpenReplace(path);
//            } else {
            handleOpen(path);
//            }
          } else {
            showWarning(""Sketch Disappeared"",
                        ""The selected sketch no longer exists.\n"" +
                        ""You may need to restart Processing to update\n"" +
                        ""the sketchbook menu."", null);
          }
        }
      };
    // offers no speed improvement
    //menu.addActionListener(listener);

    boolean found = false;

//    for (int i = 0; i < list.length; i++) {
//      if ((list[i].charAt(0) == '.') ||
//          list[i].equals(""CVS"")) continue;
    for (String name : list) {
      if (name.charAt(0) == '.') {
        continue;
      }

      File subfolder = new File(folder, name);
      if (subfolder.isDirectory()) {
        File entry = checkSketchFolder(subfolder, name);
        if (entry != null) {

          JMenuItem item = new JMenuItem(name);
          item.addActionListener(listener);
          item.setActionCommand(entry.getAbsolutePath());
          menu.add(item);
          found = true;

        } else {
          // not a sketch folder, but maybe a subfolder containing sketches
          JMenu submenu = new JMenu(name);
          // needs to be separate var otherwise would set ifound to false
          boolean anything = addSketches(submenu, subfolder, replaceExisting);
          if (anything && !name.equals(""old"")) { //Don't add old contributions
            menu.add(submenu);
            found = true;
          }
        }
      }
    }
    return found;
  }",False
71,"addSketches(DefaultMutableTreeNode,File,boolean)",Method,"addSketches(DefaultMutableTreeNode,File,boolean)",processing.app.Mode+buildSketchbookTree() processing.app.ui.ExamplesFrame+buildTree() processing.app.ui.ExamplesFrame+buildTree() processing.app.ui.ExamplesFrame+buildTree() processing.app.ui.ExamplesFrame+buildContribTree(),"java.io.File+isDirectory() java.io.File+isDirectory() java.io.File+getName() java.io.File+getName() java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.io.File+list() java.io.File+list() java.util.Arrays+sort(T[],Comparator) java.util.Arrays+sort(T[],Comparator) java.lang.String+charAt(int) java.lang.String+charAt(int) java.io.File+File(File,String) java.io.File+isDirectory() java.io.File+isDirectory() processing.app.Base+checkSketchFolder(File,String) processing.app.Base+checkSketchFolder(File,String) javax.swing.tree.DefaultMutableTreeNode+DefaultMutableTreeNode(Object) processing.app.SketchReference+SketchReference(String,File) javax.swing.tree.DefaultMutableTreeNode+add(MutableTreeNode) javax.swing.tree.DefaultMutableTreeNode+add(MutableTreeNode) javax.swing.tree.DefaultMutableTreeNode+DefaultMutableTreeNode(Object) processing.app.Base+addSketches(DefaultMutableTreeNode,File,boolean) processing.app.Base+addSketches(DefaultMutableTreeNode,File,boolean) javax.swing.tree.DefaultMutableTreeNode+add(MutableTreeNode) javax.swing.tree.DefaultMutableTreeNode+add(MutableTreeNode)",java.lang.String+CASE_INSENSITIVE_ORDER,2357,69,1,,"public boolean addSketches(DefaultMutableTreeNode node,
                             File folder,
                             boolean examples) throws IOException {
    // skip .DS_Store files, etc (this shouldn't actually be necessary)
    if (!folder.isDirectory()) {
      return false;
    }

    final String folderName = folder.getName();

    // Don't look inside the 'libraries' folders in the sketchbook
    if (folderName.equals(""libraries"")) {
      return false;
    }

    // When building the sketchbook, don't show the contributed 'examples'
    // like it's a subfolder. But when loading examples, allow the folder
    // to be named 'examples'.
    if (!examples && folderName.equals(""examples"")) {
      return false;
    }

//    // Conversely, when looking for examples, ignore the other folders
//    // (to avoid going through hoops with the tree node setup).
//    if (examples && !folderName.equals(""examples"")) {
//      return false;
//    }
//    // Doesn't quite work because the parent will be 'examples', and we want
//    // to walk inside that, but the folder itself will have a different name

    String[] fileList = folder.list();
    // If a bad folder or unreadable or whatever, this will come back null
    if (fileList == null) {
      return false;
    }

    // Alphabetize the list, since it's not always alpha order
    Arrays.sort(fileList, String.CASE_INSENSITIVE_ORDER);

    boolean found = false;
    for (String name : fileList) {
      if (name.charAt(0) == '.') {  // Skip hidden files
        continue;
      }

      File subfolder = new File(folder, name);
      if (subfolder.isDirectory()) {
        File entry = checkSketchFolder(subfolder, name);
        if (entry != null) {
          DefaultMutableTreeNode item =
            new DefaultMutableTreeNode(new SketchReference(name, entry));

          node.add(item);
          found = true;

        } else {
          // not a sketch folder, but maybe a subfolder containing sketches
          DefaultMutableTreeNode subnode = new DefaultMutableTreeNode(name);
          // needs to be separate var otherwise would set ifound to false
          boolean anything = addSketches(subnode, subfolder, examples);
          if (anything) {
            node.add(subnode);
            found = true;
          }
        }
      }
    }
    return found;
  }",False
72,"checkSketchFolder(File,String)",Method,"addSketches(DefaultMutableTreeNode,File,boolean)",,"processing.app.Base+getModeList() processing.app.Base+getModeList() java.io.File+File(File,String) processing.app.Mode+getDefaultExtension() processing.app.Mode+getDefaultExtension() java.io.File+exists() java.io.File+exists()",,537,15,0,"/** 
 * Check through the various modes and see if this is a legit sketch. Because the default mode will be the first in the list, this will always prefer that one over the others.
 */
","/**
   * Check through the various modes and see if this is a legit sketch.
   * Because the default mode will be the first in the list, this will always
   * prefer that one over the others.
   */
  File checkSketchFolder(File subfolder, String item) {
    for (Mode mode : getModeList()) {
      File entry = new File(subfolder, item + ""."" + mode.getDefaultExtension()); //$NON-NLS-1$
      // if a .pde file of the same prefix as the folder exists..
      if (entry.exists()) {
        return entry;
      }
    }
    return null;
  }",False
73,handlePrefs(),Method,,processing.app.platform.ThinkDifferent+handlePreferences(PreferencesEvent) processing.app.ui.Editor+actionPerformed(ActionEvent),processing.app.ui.PreferencesFrame+PreferencesFrame(Base) processing.app.ui.PreferencesFrame+showFrame() processing.app.ui.PreferencesFrame+showFrame(),processing.app.Base+preferencesFrame processing.app.Base+preferencesFrame processing.app.Base+preferencesFrame,206,9,1,"/** 
 * Show the Preferences window.
 */
","/**
   * Show the Preferences window.
   */
  public void handlePrefs() {
    if (preferencesFrame == null) {
      preferencesFrame = new PreferencesFrame(this);
    }
    preferencesFrame.showFrame();
  }",False
74,handleOpenLibraryManager(),Method,,processing.app.Mode+actionPerformed(ActionEvent),"processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType) processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType)",processing.app.Base+contributionManagerFrame processing.app.Base+activeEditor,175,6,1,"/** 
 * Show the library installer window.
 */
","/**
   * Show the library installer window.
   */
  public void handleOpenLibraryManager() {
    contributionManagerFrame.showFrame(activeEditor,ContributionType.LIBRARY);
  }",True
75,handleOpenToolManager(),Method,,processing.app.ui.Editor+actionPerformed(ActionEvent),"processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType) processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType)",processing.app.Base+contributionManagerFrame processing.app.Base+activeEditor,166,6,1,"/** 
 * Show the tool installer window.
 */
","/**
   * Show the tool installer window.
   */
  public void handleOpenToolManager() {
    contributionManagerFrame.showFrame(activeEditor,ContributionType.TOOL);
  }",True
76,handleOpenModeManager(),Method,,processing.app.ui.Editor+actionPerformed(ActionEvent),"processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType) processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType)",processing.app.Base+contributionManagerFrame processing.app.Base+activeEditor,166,6,1,"/** 
 * Show the mode installer window.
 */
","/**
   * Show the mode installer window.
   */
  public void handleOpenModeManager() {
    contributionManagerFrame.showFrame(activeEditor,ContributionType.MODE);
  }",True
77,handleOpenExampleManager(),Method,,processing.app.Mode+actionPerformed(ActionEvent) processing.app.ui.ExamplesFrame+actionPerformed(ActionEvent),"processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType) processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType)",processing.app.Base+contributionManagerFrame processing.app.Base+activeEditor,177,6,1,"/** 
 * Show the examples installer window.
 */
","/**
   * Show the examples installer window.
   */
  public void handleOpenExampleManager() {
    contributionManagerFrame.showFrame(activeEditor,ContributionType.EXAMPLES);
  }",True
78,handleShowUpdates(),Method,,processing.app.UpdateCheck+promptToOpenContributionManager(),"processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType) processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType)",processing.app.Base+contributionManagerFrame processing.app.Base+activeEditor,96,3,1,,"public void handleShowUpdates() {
    contributionManagerFrame.showFrame(activeEditor,null);
  }",True
79,getRevision(),Method,,"processing.app.contrib.ContributionListing+getCompatibleContributionList(List<Contribution>,boolean) processing.app.contrib.ContributionListPanel+StatusRendere.getTableCellRendererComponent(JTable,Object,boolean,boolean,int,int) processing.app.contrib.ContributionListPanel+StatusRendere.getTableCellRendererComponent(JTable,Object,boolean,boolean,int,int) processing.app.contrib.ContributionListPanel+StatusRendere.getTableCellRendererComponent(JTable,Object,boolean,boolean,int,int) processing.app.contrib.ContributionManagerDialog+mousePressed(MouseEvent) processing.app.contrib.ContributionManagerDialog+setContribution(Contribution) processing.app.contrib.UpdateContributionTab+UpdateContribListingPanel.updatePanelOrdering(Set<Contribution>) processing.app.UpdateCheck+updateCheck() processing.app.UpdateCheck+updateCheck() processing.app.UpdateCheck+updateCheck() processing.mode.java.pdex.ErrorCheckerService+ensureMinP5Version()",,processing.app.Base+REVISION,58,3,9,,"static public int getRevision() {
    return REVISION;
  }",True
80,getVersionName(),Method,,processing.app.ui.About+paint(Graphics) processing.app.ui.Editor+updateTitle() processing.mode.java.Commander+printCommandLine(PrintStream) processing.mode.java.JavaBuild+addManifest(ZipOutputStream),,processing.app.Base+VERSION_NAME,182,7,9,"/** 
 * Return the version name, something like 1.5 or 2.0b8 or 0213 if it's not a release version.
 */
","/**
   * Return the version name, something like 1.5 or 2.0b8 or 0213 if it's not
   * a release version.
   */
  static public String getVersionName() {
    return VERSION_NAME;
  }",True
81,getPlatform(),Method,,processing.app.Language+saveLanguage(String) test.processing.mode.java.ProcessingTestUtil+UTCompiler(File),,,63,3,9,,"static public Platform getPlatform() {
    return platform;
  }",True
82,getPlatformName(),Method,,"processing.app.Library+Library(File,String) processing.app.Settings+load(File)",,processing.core.PConstants+platformNames processing.core.PApplet+platform,99,3,9,,"static public String getPlatformName() {
    return PConstants.platformNames[PApplet.platform];
  }",True
83,getNativeBits(),Method,getVariant(),"processing.app.Library+Library(File,String) processing.mode.java.JavaBuild+exportApplication() processing.mode.java.JavaBuild+exportApplication() processing.mode.java.JavaBuild+exportApplication() processing.mode.java.runner.Runner+Runner(JavaBuild,RunnerListener) processing.mode.java.runner.Runner+handleCommonErrors(String,String,RunnerListener,PrintStream)",,processing.app.Base+nativeBits,167,7,9,"/** 
 * Return whether sketches will run as 32- or 64-bits based on the JVM that's in use.
 */
","/**
   * Return whether sketches will run as 32- or 64-bits based
   * on the JVM that's in use.
   */
  static public int getNativeBits() {
    return nativeBits;
  }",True
84,getNativeArch(),Method,"getVariant() getVariant(int,String,int)",processing.mode.java.JavaBuild+exportApplication() processing.mode.java.JavaBuild+exportApplication() processing.mode.java.JavaBuild+exportApplication(),,processing.app.Base+nativeArch,122,6,9,"/** 
 * Return the value of the os.arch propery
 */
","/**
   * Return the value of the os.arch propery
   */
  static public String getNativeArch() {
    return nativeArch;
  }",True
85,getVariant(),Method,,"processing.mode.java.Commander+Commander(String[]) processing.mode.java.runner.Runner+Runner(JavaBuild,RunnerListener)","processing.app.Base+getVariant(int,String,int) processing.app.Base+getVariant(int,String,int) processing.app.Base+getNativeArch() processing.app.Base+getNativeArch() processing.app.Base+getNativeBits() processing.app.Base+getNativeBits()",processing.core.PApplet+platform,114,3,9,,"static public String getVariant() {
    return getVariant(PApplet.platform, getNativeArch(), getNativeBits());
  }",True
86,"getVariant(int,String,int)",Method,getVariant(),,java.lang.String+equals(Object) java.lang.String+equals(Object) processing.app.Base+getNativeArch() processing.app.Base+getNativeArch() java.lang.Integer+toString(int) java.lang.Integer+toString(int),processing.core.PConstants+LINUX,296,9,9,,"static public String getVariant(int platform, String arch, int bits) {
    if (platform == PConstants.LINUX && bits == 32 && ""arm"".equals(Base.getNativeArch())) {
      // assume armv6hf for now
      return ""armv6hf"";
    } else {
      // 32 or 64
      return Integer.toString(bits);
    }
  }",True
87,getPlatformName(int),Method,,,java.util.HashMap+get(Object) java.util.HashMap+get(Object),processing.app.Base+platformNames,270,8,9,"/** 
 * Map a platform constant to its name.
 * @param which PConstants.WINDOWS, PConstants.MACOSX, PConstants.LINUX
 * @return one of ""windows"", ""macosx"", or ""linux""
 */
","/**
   * Map a platform constant to its name.
   * @param which PConstants.WINDOWS, PConstants.MACOSX, PConstants.LINUX
   * @return one of ""windows"", ""macosx"", or ""linux""
   */
  static public String getPlatformName(int which) {
    return platformNames.get(which);
  }",True
88,getPlatformIndex(String),Method,,processing.mode.java.Commander+Commander(String[]) processing.mode.java.JavaBuild+exportApplication(),java.util.HashMap+get(Object) java.util.HashMap+get(Object) java.lang.Integer+intValue() java.lang.Integer+intValue(),processing.app.Base+platformIndices,152,4,9,,"static public int getPlatformIndex(String what) {
    Integer entry = platformIndices.get(what);
    return (entry == null) ? -1 : entry.intValue();
  }",True
89,isMacOS(),Method,"initPlatform() handleClose(Editor,boolean) handleQuit() showWarningTiered(String,String,String,Throwable) showYesNoCancelQuestion(Editor,String,String,String) showYesNoQuestion(Frame,String,String,String) getContentFile(String) getContentFile(String) getJavaHome()","processing.app.contrib.ContributionListPanel+updateColors() processing.app.Sketch+calcModified() processing.app.syntax.JEditTextArea+mouseWheelMoved(MouseWheelEvent) processing.app.syntax.PdeInputHandler+PdeInputHandler() processing.app.syntax.PdeInputHandler+PdeInputHandler() processing.app.syntax.PdeInputHandler+PdeInputHandler() processing.app.syntax.PdeInputHandler+isMnemonic(KeyEvent) processing.app.ui.ColorChooser+createColorFields(String,ActionListener) processing.app.ui.Editor+addInternalTools(JMenu) processing.app.ui.Editor+checkModified() processing.app.ui.EditorConsole+EditorConsole(Editor) processing.app.ui.EditorHeader+actionPerformed(ActionEvent) processing.app.ui.PreferencesFrame+PreferencesFrame(Base) processing.app.ui.Toolkit+setMenuMnemonics(JMenuItem) processing.app.ui.Toolkit+setIcon(Window) processing.app.ui.Toolkit+checkRetina() processing.app.Util+copyDirNative(File,File) processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean) processing.mode.java.JavaEditor+buildHelpMenu() processing.mode.java.pdex.ASTGenerator+loadJars() processing.mode.java.pdex.JavaTextArea+processKeyEvent(KeyEvent) processing.mode.java.pdex.JavaTextArea+processCompletionKeys(KeyEvent) processing.mode.java.pdex.JavaTextAreaPainter+mouseClicked(MouseEvent) processing.mode.java.runner.Runner+Runner(JavaBuild,RunnerListener) processing.mode.java.runner.Runner+getMachineParams()",java.lang.String+indexOf(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.String+indexOf(String),,258,7,9,"/** 
 * returns true if Processing is running on a Mac OS X machine.
 */
","/**
   * returns true if Processing is running on a Mac OS X machine.
   */
  static public boolean isMacOS() {
    //return PApplet.platform == PConstants.MACOSX;
    return System.getProperty(""os.name"").indexOf(""Mac"") != -1; //$NON-NLS-1$ //$NON-NLS-2$
  }",True
90,isWindows(),Method,initPlatform() Base(String[]) getContentFile(String) getJavaPath(),"processing.app.contrib.AvailableContribution+install(Base,File,boolean,StatusPanel) processing.app.syntax.JEditTextArea+MouseHandler.mousePressed(MouseEvent) processing.app.ui.ColorChooser+createColorFields(String,ActionListener) processing.app.ui.ColorChooser+createColorFields(String,ActionListener) processing.app.ui.Editor+buildEditMenu() processing.app.Util+saveFile(String,File) processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean) processing.mode.java.JavaBuild+addDataFolder(ZipOutputStream)",java.lang.String+indexOf(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.String+indexOf(String),,240,7,9,"/** 
 * returns true if running on windows.
 */
","/**
   * returns true if running on windows.
   */
  static public boolean isWindows() {
    //return PApplet.platform == PConstants.WINDOWS;
    return System.getProperty(""os.name"").indexOf(""Windows"") != -1; //$NON-NLS-1$ //$NON-NLS-2$
  }",True
91,isLinux(),Method,initPlatform() getContentFile(String),"processing.app.contrib.ContributionListPanel+ContributionListPanel(ContributionTab,ContributionFilter) processing.app.contrib.UpdateContributionTab+UpdateContribListingPanel.UpdateContribListingPanel(ContributionTab,ContributionFilter) processing.app.Util+copyDirNative(File,File)",java.lang.String+indexOf(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.String+indexOf(String),,224,7,9,"/** 
 * true if running on linux.
 */
","/**
   * true if running on linux.
   */
  static public boolean isLinux() {
    //return PApplet.platform == PConstants.LINUX;
    return System.getProperty(""os.name"").indexOf(""Linux"") != -1; //$NON-NLS-1$ //$NON-NLS-2$
  }",True
92,getSettingsFolder(),Method,,processing.app.ui.PreferencesFrame+mousePressed(MouseEvent),"processing.app.Base+showError(String,String,Throwable) processing.app.Base+showError(String,String,Throwable) java.io.File+exists() java.io.File+exists() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.Base+showError(String,String,Throwable) processing.app.Base+showError(String,String,Throwable)",,1065,31,9,"/** 
 * Get the directory that can store settings. (Library on OS X, App Data or something similar on Windows, a dot folder on Linux.) Removed this as a preference for 3.0a3 because we need this to be stable.
 */
","/**
   * Get the directory that can store settings. (Library on OS X, App Data or
   * something similar on Windows, a dot folder on Linux.) Removed this as a
   * preference for 3.0a3 because we need this to be stable.
   */
  static public File getSettingsFolder() {
    File settingsFolder = null;

//    String preferencesPath = Preferences.get(""settings.path""); //$NON-NLS-1$
//    if (preferencesPath != null) {
//      settingsFolder = new File(preferencesPath);
//
//    } else {
    try {
      settingsFolder = platform.getSettingsFolder();
    } catch (Exception e) {
      showError(""Problem getting the settings folder"",
                ""Error getting the Processing the settings folder."", e);
    }
//    }

    // create the folder if it doesn't exist already
    if (!settingsFolder.exists()) {
      if (!settingsFolder.mkdirs()) {
        showError(""Settings issues"",
                  ""Processing cannot run because it could not\n"" +
                  ""create a folder to store your settings."", null);
      }
    }
    return settingsFolder;
  }",False
93,getSettingsFile(String),Method,,processing.app.contrib.ContributionListing+ContributionListing() processing.app.contrib.ContributionListing+run() processing.app.Preferences+init() processing.app.ui.Recent+Recent(Base) processing.mode.java.JavaMode+initLogger(),"java.io.File+File(File,String) processing.app.Base+getSettingsFolder() processing.app.Base+getSettingsFolder()",,405,9,9,"/** 
 * Convenience method to get a File object for the specified filename inside the settings folder. Used to get preferences and recent sketch files.
 * @param filename A file inside the settings folder.
 * @return filename wrapped as a File object inside the settings folder
 */
","/**
   * Convenience method to get a File object for the specified filename inside
   * the settings folder. Used to get preferences and recent sketch files.
   * @param filename A file inside the settings folder.
   * @return filename wrapped as a File object inside the settings folder
   */
  static public File getSettingsFile(String filename) {
    return new File(getSettingsFolder(), filename);
  }",False
94,"createTempFolder(String,String,File)",Method,createAndShowGUI(String[]),processing.app.Sketch+makeTempFolder(),"java.lang.String+length() java.lang.String+length() java.io.File+createTempFile(String,String,File) java.io.File+createTempFile(String,String,File) java.io.File+delete() java.io.File+delete() java.io.File+mkdirs() java.io.File+mkdirs()",,810,21,9,"/** 
 * Create a temporary folder by using the createTempFile() mechanism, deleting the file it creates, and making a folder using the location that was provided. Unlike createTempFile(), there is no minimum size for prefix. If prefix is less than 3 characters, the remaining characters will be filled with underscores
 */
","/**
   * Create a temporary folder by using the createTempFile() mechanism,
   * deleting the file it creates, and making a folder using the location
   * that was provided.
   *
   * Unlike createTempFile(), there is no minimum size for prefix. If
   * prefix is less than 3 characters, the remaining characters will be
   * filled with underscores
   */
  static public File createTempFolder(String prefix, String suffix, File directory) throws IOException {
    int fillChars = 3 - prefix.length();
    for (int i = 0; i < fillChars; i++) {
      prefix += '_';
    }
    File folder = File.createTempFile(prefix, suffix, directory);
    // Now delete that file and create a folder in its place
    folder.delete();
    folder.mkdirs();
    // And send the folder back to your friends
    return folder;
  }",False
95,getToolsFolder(),Method,,processing.app.ui.Editor+rebuildToolMenu(),processing.app.Base+getContentFile(String) processing.app.Base+getContentFile(String),,77,3,9,,"static public File getToolsFolder() {
    return getContentFile(""tools"");
  }",False
96,locateSketchbookFolder(),Method,createAndShowGUI(String[]),processing.mode.java.Commander+Commander(String[]),"processing.app.Preferences+getSketchbookPath() processing.app.Preferences+getSketchbookPath() java.io.File+File(String) java.io.File+exists() java.io.File+exists() processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+getDefaultSketchbookFolder() processing.app.Base+getDefaultSketchbookFolder() processing.app.Preferences+setSketchbookPath(String) processing.app.Preferences+setSketchbookPath(String) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath() java.io.File+exists() java.io.File+exists() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.Base+makeSketchbookSubfolders() processing.app.Base+makeSketchbookSubfolders()",processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder,1235,27,9,,"static public void locateSketchbookFolder() {
    // If a value is at least set, first check to see if the folder exists.
    // If it doesn't, warn the user that the sketchbook folder is being reset.
    String sketchbookPath = Preferences.getSketchbookPath();
    if (sketchbookPath != null) {
      sketchbookFolder = new File(sketchbookPath);
      if (!sketchbookFolder.exists()) {
        Base.showWarning(""Sketchbook folder disappeared"",
                         ""The sketchbook folder no longer exists.\n"" +
                         ""Processing will switch to the default sketchbook\n"" +
                         ""location, and create a new sketchbook folder if\n"" +
                         ""necessary. Processing will then stop talking\n"" +
                         ""about himself in the third person."", null);
        sketchbookFolder = null;
      }
    }

    // If no path is set, get the default sketchbook folder for this platform
    if (sketchbookFolder == null) {
      sketchbookFolder = getDefaultSketchbookFolder();
      Preferences.setSketchbookPath(sketchbookFolder.getAbsolutePath());
      if (!sketchbookFolder.exists()) {
        sketchbookFolder.mkdirs();
      }
    }
    makeSketchbookSubfolders();
  }",False
97,setSketchbookFolder(File),Method,,processing.app.ui.PreferencesFrame+applyFrame() processing.app.ui.Welcome+sketchbookCallback(File),processing.app.Preferences+setSketchbookPath(String) processing.app.Preferences+setSketchbookPath(String) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath() processing.app.Base+rebuildSketchbookMenus() processing.app.Base+rebuildSketchbookMenus() processing.app.Base+makeSketchbookSubfolders() processing.app.Base+makeSketchbookSubfolders(),processing.app.Base+sketchbookFolder,204,6,1,,"public void setSketchbookFolder(File folder) {
    sketchbookFolder = folder;
    Preferences.setSketchbookPath(folder.getAbsolutePath());
    rebuildSketchbookMenus();
    makeSketchbookSubfolders();
  }",False
98,makeSketchbookSubfolders(),Method,locateSketchbookFolder() setSketchbookFolder(File),,java.io.File+mkdirs() processing.app.Base+getSketchbookLibrariesFolder() processing.app.Base+getSketchbookLibrariesFolder() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.Base+getSketchbookToolsFolder() processing.app.Base+getSketchbookToolsFolder() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.Base+getSketchbookModesFolder() processing.app.Base+getSketchbookModesFolder() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.Base+getSketchbookExamplesFolder() processing.app.Base+getSketchbookExamplesFolder() java.io.File+mkdirs(),,314,9,12,"/** 
 * Create the libraries, modes, tools, examples folders in the sketchbook.
 */
","/**
   * Create the libraries, modes, tools, examples folders in the sketchbook.
   */
  static protected void makeSketchbookSubfolders() {
    getSketchbookLibrariesFolder().mkdirs();
    getSketchbookToolsFolder().mkdirs();
    getSketchbookModesFolder().mkdirs();
    getSketchbookExamplesFolder().mkdirs();
  }",False
99,getSketchbookFolder(),Method,,processing.app.Language+LanguageBundle.LanguageBundle(String) processing.app.Language+LanguageBundle.LanguageBundle(String) processing.app.Mode+buildSketchbookTree() processing.app.ui.Recent+updateMenu(JMenu),,processing.app.Base+sketchbookFolder,75,3,9,,"static public File getSketchbookFolder() {
    return sketchbookFolder;
  }",False
100,getSketchbookLibrariesFolder(),Method,makeSketchbookSubfolders(),processing.app.contrib.ContributionManager+cleanup(Base) processing.app.Mode+rebuildLibraryList(),"java.io.File+File(File,String)",processing.app.Base+sketchbookFolder,107,3,9,,"static public File getSketchbookLibrariesFolder() {
    return new File(sketchbookFolder, ""libraries"");
  }",False
101,getSketchbookToolsFolder(),Method,getInstalledContribs() makeSketchbookSubfolders(),processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+doInBackground() processing.app.ui.Editor+rebuildToolMenu(),"java.io.File+File(File,String)",processing.app.Base+sketchbookFolder,99,3,9,,"static public File getSketchbookToolsFolder() {
    return new File(sketchbookFolder, ""tools"");
  }",False
102,getSketchbookModesFolder(),Method,makeSketchbookSubfolders(),processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ModeContribution+loadMissing(Base),"java.io.File+File(File,String)",processing.app.Base+sketchbookFolder,99,3,9,,"static public File getSketchbookModesFolder() {
    return new File(sketchbookFolder, ""modes"");
  }",False
103,getSketchbookExamplesFolder(),Method,makeSketchbookSubfolders(),"processing.app.contrib.ExamplesContribution+loadMissing(Base) processing.app.ui.ExamplesFrame+ExamplesFrame(Base,Mode)","java.io.File+File(File,String)",processing.app.Base+sketchbookFolder,105,3,9,,"static public File getSketchbookExamplesFolder() {
    return new File(sketchbookFolder, ""examples"");
  }",False
104,getDefaultSketchbookFolder(),Method,locateSketchbookFolder(),,"processing.app.Base+showError(String,String,Throwable) processing.app.Base+showError(String,String,Throwable) java.io.File+exists() java.io.File+exists() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.Base+showError(String,String,Throwable) processing.app.Base+showError(String,String,Throwable)",,741,25,12,,"static protected File getDefaultSketchbookFolder() {
    File sketchbookFolder = null;
    try {
      sketchbookFolder = platform.getDefaultSketchbookFolder();
    } catch (Exception e) { }

    if (sketchbookFolder == null) {
      showError(""No sketchbook"",
                ""Problem while trying to get the sketchbook"", null);
    }

    // create the folder if it doesn't exist already
    boolean result = true;
    if (!sketchbookFolder.exists()) {
      result = sketchbookFolder.mkdirs();
    }

    if (!result) {
      showError(""You forgot your sketchbook"",
                ""Processing cannot run because it could not\n"" +
                ""create a folder to store your sketchbook."", null);
    }

    return sketchbookFolder;
  }",False
105,openURL(String),Method,,processing.app.contrib.ContributionManagerDialog+hyperlinkUpdate(HyperlinkEvent) processing.app.contrib.ModeContribution+hyperlinkUpdate(HyperlinkEvent) processing.app.ui.Editor+showReferenceFile(File) processing.app.ui.Editor+showChanges() processing.app.ui.EditorStatus+mousePressed(MouseEvent) processing.app.ui.WebFrame+handleLink(String) processing.app.UpdateCheck+promptToVisitDownloadPage() processing.mode.java.JavaEditor+actionPerformed(ActionEvent) processing.mode.java.JavaEditor+actionPerformed(ActionEvent) processing.mode.java.JavaEditor+actionPerformed(ActionEvent) processing.mode.java.JavaEditor+actionPerformed(ActionEvent) processing.mode.java.JavaEditor+actionPerformed(ActionEvent) processing.mode.java.JavaEditor+mousePressed(MouseEvent) processing.mode.java.JavaEditor+mousePressed(MouseEvent),"processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable)",,647,18,9,"/** 
 * Implements the cross-platform headache of opening URLs. For 2.0a8 and later, this requires the parameter to be an actual URL, meaning that you can't send it a file:// path without a prefix. It also just calls into Platform, which now uses java.awt.Desktop (where possible, meaning not on Linux) now that we're requiring Java 6. As it happens the URL must also be properly URL-encoded.
 */
","/**
   * Implements the cross-platform headache of opening URLs.
   *
   * For 2.0a8 and later, this requires the parameter to be an actual URL,
   * meaning that you can't send it a file:// path without a prefix. It also
   * just calls into Platform, which now uses java.awt.Desktop (where
   * possible, meaning not on Linux) now that we're requiring Java 6.
   * As it happens the URL must also be properly URL-encoded.
   */
  static public void openURL(String url) {
    try {
      platform.openURL(url);

    } catch (Exception e) {
      showWarning(""Problem Opening URL"",
                  ""Could not open the URL\n"" + url, e);
    }
  }",True
106,openFolderAvailable(),Method,,,,,254,7,9,"/** 
 * Used to determine whether to disable the ""Show Sketch Folder"" option.
 * @return true If a means of opening a folder is known to be available.
 */
","/**
   * Used to determine whether to disable the ""Show Sketch Folder"" option.
   * @return true If a means of opening a folder is known to be available.
   */
  static public boolean openFolderAvailable() {
    return platform.openFolderAvailable();
  }",True
107,openFolder(File),Method,,processing.app.contrib.ContributionManagerDialog+actionPerformed(ActionEvent) processing.app.ui.Editor+actionPerformed(ActionEvent) processing.app.ui.PreferencesFrame+mousePressed(MouseEvent) processing.mode.java.JavaEditor+handleExportApplication(),"processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath()",,371,13,9,"/** 
 * Implements the other cross-platform headache of opening a folder in the machine's native file browser.
 */
","/**
   * Implements the other cross-platform headache of opening
   * a folder in the machine's native file browser.
   */
  static public void openFolder(File file) {
    try {
      platform.openFolder(file);

    } catch (Exception e) {
      showWarning(""Problem Opening Folder"",
                  ""Could not open the folder\n"" + file.getAbsolutePath(), e);
    }
  }",True
108,"showMessage(String,String)",Method,,"processing.app.contrib.LocalContribution+remove(Editor,ContribProgressMonitor,StatusPanel,ContributionListing) processing.app.Library+discover(File) processing.app.Sketch+handleNewCode() processing.app.Sketch+handleRenameCode() processing.app.Sketch+handleRenameCode() processing.app.Sketch+handleRenameCode() processing.app.Sketch+nameCode(String) processing.app.Sketch+handleDeleteCode() processing.app.Sketch+handleDeleteCode() processing.app.Sketch+handleDeleteCode() processing.app.Sketch+save() processing.app.Sketch+saveAs() processing.app.Sketch+saveAs() processing.app.Sketch+handleAddFile() processing.mode.java.JavaEditor+handleExportCheckModified() processing.mode.java.JavaEditor+handleExportCheckModified() processing.mode.java.JavaMode+handleTweak(Sketch,RunnerListener,boolean)","java.io.PrintStream+println(String) java.io.PrintStream+println(String) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) java.awt.Frame+Frame()",processing.app.Base+commandLine java.lang.System+out javax.swing.JOptionPane+INFORMATION_MESSAGE,478,15,9,"/** 
 * ""No cookie for you"" type messages. Nothing fatal or all that much of a bummer, but something to notify the user about.
 */
","/**
   * ""No cookie for you"" type messages. Nothing fatal or all that
   * much of a bummer, but something to notify the user about.
   */
  static public void showMessage(String title, String message) {
    if (title == null) title = ""Message"";

    if (commandLine) {
      System.out.println(title + "": "" + message);

    } else {
      JOptionPane.showMessageDialog(new Frame(), message, title,
                                    JOptionPane.INFORMATION_MESSAGE);
    }
  }",False
109,"showWarning(String,String)",Method,"promptForMode(File,ModeInfo) promptForMode(File,ModeInfo)","processing.app.contrib.ContributionManager+installOnStartUp(Base,AvailableContribution) processing.app.Sketch+nameCode(String) processing.app.Sketch+nameCode(String) processing.app.Sketch+nameCode(String) processing.app.Sketch+nameCode(String) processing.app.Sketch+nameCode(String) processing.app.Sketch+nameCode(String) processing.app.Sketch+nameCode(String) processing.app.ui.ChangeDetector+run()","processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable)",,147,6,9,"/** 
 * Non-fatal error message.
 */
","/**
   * Non-fatal error message.
   */
  static public void showWarning(String title, String message) {
    showWarning(title, message, null);
  }",False
110,"showWarning(String,String,Throwable)",Method,"handleNew() handleNew() handleNew() handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState) populateSketchbookMenu(JMenu) locateSketchbookFolder() openURL(String) openFolder(File) showWarning(String,String)","processing.app.contrib.ContributionManager+installOnStartUp(Base,AvailableContribution) processing.app.Mode+Mode(Base,File) processing.app.platform.LinuxPlatform+init(Base) processing.app.Sketch+nameCode(String) processing.app.Sketch+saveAs() processing.app.Sketch+addFile(File) processing.app.Sketch+addFile(File) processing.app.Sketch+addFile(File) processing.app.Sketch+makeTempFolder() processing.app.Sketch+ensureExistence() processing.app.Sketch+ensureExistence() processing.app.tools.Archiver+run() processing.app.tools.InstallCommander+run() processing.app.tools.InstallCommander+run() processing.app.ui.Editor+FileDropHandler.importData(TransferHandler.TransferSupport) processing.app.ui.Editor+actionPerformed(ActionEvent) processing.app.ui.EditorHeader+actionPerformed(ActionEvent) processing.mode.java.JavaBuild+exportApplication() processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean) processing.mode.java.JavaEditor+actionPerformed(ActionEvent) processing.mode.java.JavaEditor+stopTweakMode(List<List<Handle>>) processing.mode.java.pdex.ErrorCheckerService+ensureMinP5Version() processing.mode.java.preproc.PdePreprocessor+parseSketchSize(String,boolean) processing.mode.java.preproc.SurfaceInfo+hasOldSyntax() processing.mode.java.preproc.SurfaceInfo+hasOldSyntax() processing.mode.java.runner.Runner+run()","java.io.PrintStream+println(String) java.io.PrintStream+println(String) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) java.awt.Frame+Frame() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()",processing.app.Base+commandLine java.lang.System+out javax.swing.JOptionPane+WARNING_MESSAGE,464,15,9,"/** 
 * Non-fatal error message with optional stack trace side dish.
 */
","/**
   * Non-fatal error message with optional stack trace side dish.
   */
  static public void showWarning(String title, String message, Throwable e) {
    if (title == null) title = ""Warning"";

    if (commandLine) {
      System.out.println(title + "": "" + message);

    } else {
      JOptionPane.showMessageDialog(new Frame(), message, title,
                                    JOptionPane.WARNING_MESSAGE);
    }
    if (e != null) e.printStackTrace();
  }",False
111,"showWarningTiered(String,String,String,Throwable)",Method,,processing.app.Mode+getLibrary(String),"java.io.PrintStream+println(String) java.io.PrintStream+println(String) processing.app.Base+isMacOS() processing.app.Base+isMacOS() javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) javax.swing.JFrame+JFrame() javax.swing.JOptionPane+JOptionPane(Object,int) javax.swing.JOptionPane+createDialog(Component,String) javax.swing.JOptionPane+createDialog(Component,String) javax.swing.JFrame+JFrame() java.awt.Dialog+setVisible(boolean) java.awt.Dialog+setVisible(boolean) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()",processing.app.Base+commandLine java.lang.System+out javax.swing.JOptionPane+WARNING_MESSAGE javax.swing.JOptionPane+WARNING_MESSAGE,2208,57,9,"/** 
 * Non-fatal error message with optional stack trace side dish.
 */
","/**
   * Non-fatal error message with optional stack trace side dish.
   */
  static public void showWarningTiered(String title,
                                       String primary, String secondary,
                                       Throwable e) {
    if (title == null) title = ""Warning"";

    final String message = primary + ""\n"" + secondary;
    if (commandLine) {
      System.out.println(title + "": "" + message);

    } else {
//      JOptionPane.showMessageDialog(new Frame(), message,
//                                    title, JOptionPane.WARNING_MESSAGE);
      if (!Base.isMacOS()) {
        JOptionPane.showMessageDialog(new JFrame(),
                                      ""<html><body>"" +
                                      ""<b>"" + primary + ""</b>"" +
                                      ""<br>"" + secondary, title,
                                      JOptionPane.WARNING_MESSAGE);
      } else {
        // Pane formatting adapted from the Quaqua guide
        // http://www.randelshofer.ch/quaqua/guide/joptionpane.html
        JOptionPane pane =
          new JOptionPane(""<html> "" +
                          ""<head> <style type=\""text/css\"">""+
                          ""b { font: 13pt \""Lucida Grande\"" }""+
                          ""p { font: 11pt \""Lucida Grande\""; margin-top: 8px; width: 300px }""+
                          ""</style> </head>"" +
                          ""<b>"" + primary + ""</b>"" +
                          ""<p>"" + secondary + ""</p>"",
                          JOptionPane.WARNING_MESSAGE);

//        String[] options = new String[] {
//            ""Yes"", ""No""
//        };
//        pane.setOptions(options);

        // highlight the safest option ala apple hig
//        pane.setInitialValue(options[0]);

        JDialog dialog = pane.createDialog(new JFrame(), null);
        dialog.setVisible(true);

//        Object result = pane.getValue();
//        if (result == options[0]) {
//          return JOptionPane.YES_OPTION;
//        } else if (result == options[1]) {
//          return JOptionPane.NO_OPTION;
//        } else {
//          return JOptionPane.CLOSED_OPTION;
//        }
      }
    }
    if (e != null) e.printStackTrace();
  }",False
112,"showError(String,String,Throwable)",Method,createAndShowGUI(String[]) initPlatform() getSettingsFolder() getSettingsFolder() getDefaultSketchbookFolder() getDefaultSketchbookFolder(),"processing.app.Mode+setupGUI() processing.app.Preferences+init() processing.app.Preferences+init() processing.app.ui.ChangeDetector+run() processing.app.ui.Toolkit+createFont(String,int) processing.mode.java.runner.Runner+findConnector(String)","java.io.PrintStream+println(String) java.io.PrintStream+println(String) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) java.awt.Frame+Frame() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.lang.System+exit(int) java.lang.System+exit(int)",processing.app.Base+commandLine java.lang.System+err javax.swing.JOptionPane+ERROR_MESSAGE,593,18,9,"/** 
 * Show an error message that's actually fatal to the program. This is an error that can't be recovered. Use showWarning() for errors that allow P5 to continue running.
 */
","/**
   * Show an error message that's actually fatal to the program.
   * This is an error that can't be recovered. Use showWarning()
   * for errors that allow P5 to continue running.
   */
  static public void showError(String title, String message, Throwable e) {
    if (title == null) title = ""Error"";

    if (commandLine) {
      System.err.println(title + "": "" + message);

    } else {
      JOptionPane.showMessageDialog(new Frame(), message, title,
                                    JOptionPane.ERROR_MESSAGE);
    }
    if (e != null) e.printStackTrace();
    System.exit(1);
  }",False
113,"showBadnessTrace(String,String,Throwable,boolean)",Method,"handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState)",,"java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.io.StringWriter+StringWriter() java.lang.Throwable+printStackTrace(PrintWriter) java.lang.Throwable+printStackTrace(PrintWriter) java.io.PrintWriter+PrintWriter(Writer) java.lang.String+replaceAll(String,String) java.lang.String+replaceAll(String,String) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) java.awt.Frame+Frame() java.lang.System+exit(int) java.lang.System+exit(int)",processing.app.Base+commandLine java.lang.System+err javax.swing.JOptionPane+ERROR_MESSAGE javax.swing.JOptionPane+WARNING_MESSAGE,1096,32,10,"/** 
 * Testing a new warning window that includes the stack trace.
 */
","/**
   * Testing a new warning window that includes the stack trace.
   */
  static private void showBadnessTrace(String title, String message,
                                       Throwable t, boolean fatal) {
    if (title == null) title = fatal ? ""Error"" : ""Warning"";

    if (commandLine) {
      System.err.println(title + "": "" + message);
      if (t != null) {
        t.printStackTrace();
      }

    } else {
      StringWriter sw = new StringWriter();
      t.printStackTrace(new PrintWriter(sw));
      // Necessary to replace \n with <br/> (even if pre) otherwise Java
      // treats it as a closed tag and reverts to plain formatting.
      message = (""<html>"" + message +
                 ""<br/><font size=2><br/>"" +
                 sw + ""</html>"").replaceAll(""\n"", ""<br/>"");

      JOptionPane.showMessageDialog(new Frame(), message, title,
                                    fatal ?
                                    JOptionPane.ERROR_MESSAGE :
                                    JOptionPane.WARNING_MESSAGE);

      if (fatal) {
        System.exit(1);
      }
    }
  }",False
114,"showYesNoCancelQuestion(Editor,String,String,String)",Method,,,"processing.app.Base+isMacOS() processing.app.Base+isMacOS() javax.swing.JOptionPane+showConfirmDialog(Component,Object,String,int,int) javax.swing.JOptionPane+showConfirmDialog(Component,Object,String,int,int) javax.swing.JOptionPane+JOptionPane(Object,int) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) javax.swing.JOptionPane+setOptions(Object[]) javax.swing.JOptionPane+setOptions(Object[]) javax.swing.JOptionPane+setInitialValue(Object) javax.swing.JOptionPane+setInitialValue(Object) javax.swing.JComponent+putClientProperty(Object,Object) javax.swing.JComponent+putClientProperty(Object,Object) java.lang.Integer+valueOf(int) java.lang.Integer+valueOf(int) javax.swing.JOptionPane+createDialog(Component,String) javax.swing.JOptionPane+createDialog(Component,String) java.awt.Dialog+setVisible(boolean) java.awt.Dialog+setVisible(boolean) javax.swing.JOptionPane+getValue() javax.swing.JOptionPane+getValue()",javax.swing.JOptionPane+YES_NO_CANCEL_OPTION javax.swing.JOptionPane+QUESTION_MESSAGE javax.swing.JOptionPane+QUESTION_MESSAGE javax.swing.JOptionPane+YES_OPTION javax.swing.JOptionPane+CANCEL_OPTION javax.swing.JOptionPane+NO_OPTION javax.swing.JOptionPane+CLOSED_OPTION,2343,61,9,,"static public int showYesNoCancelQuestion(Editor editor, String title,
                                            String primary, String secondary) {
    if (!Base.isMacOS()) {
      int result =
        JOptionPane.showConfirmDialog(null, primary + ""\n"" + secondary, title,
                                      JOptionPane.YES_NO_CANCEL_OPTION,
                                      JOptionPane.QUESTION_MESSAGE);
      return result;
//    if (result == JOptionPane.YES_OPTION) {
//
//    } else if (result == JOptionPane.NO_OPTION) {
//      return true;  // ok to continue
//
//    } else if (result == JOptionPane.CANCEL_OPTION) {
//      return false;
//
//    } else {
//      throw new IllegalStateException();
//    }

    } else {
      // Pane formatting adapted from the Quaqua guide
      // http://www.randelshofer.ch/quaqua/guide/joptionpane.html
      JOptionPane pane =
        new JOptionPane(""<html> "" +
                        ""<head> <style type=\""text/css\"">""+
                        ""b { font: 13pt \""Lucida Grande\"" }""+
                        ""p { font: 11pt \""Lucida Grande\""; margin-top: 8px; width: 300px }""+
                        ""</style> </head>"" +
                        ""<b>"" + Language.text(""save.title"") + ""</b>"" +
                        ""<p>"" + Language.text(""save.hint"") + ""</p>"",
                        JOptionPane.QUESTION_MESSAGE);

      String[] options = new String[] {
          Language.text(""save.btn.save""), Language.text(""prompt.cancel""), Language.text(""save.btn.dont_save"")
      };
      pane.setOptions(options);

      // highlight the safest option ala apple hig
      pane.setInitialValue(options[0]);

      // on macosx, setting the destructive property places this option
      // away from the others at the lefthand side
      pane.putClientProperty(""Quaqua.OptionPane.destructiveOption"",
                             Integer.valueOf(2));

      JDialog dialog = pane.createDialog(editor, null);
      dialog.setVisible(true);

      Object result = pane.getValue();
      if (result == options[0]) {
        return JOptionPane.YES_OPTION;
      } else if (result == options[1]) {
        return JOptionPane.CANCEL_OPTION;
      } else if (result == options[2]) {
        return JOptionPane.NO_OPTION;
      } else {
        return JOptionPane.CLOSED_OPTION;
      }
    }
  }",False
115,"showYesNoQuestion(Frame,String,String,String)",Method,,"processing.app.contrib.ContributionManagerDialog+actionPerformed(ActionEvent) processing.app.contrib.LocalContribution+copyAndLoad(Base,boolean,StatusPanel) processing.app.contrib.LocalContribution+copyAndLoad(Base,boolean,StatusPanel) processing.app.ui.ChangeDetector+run() processing.mode.java.JavaEditor+downloadImports() processing.mode.java.JavaEditor+stopTweakMode(List<List<Handle>>)","processing.app.Base+isMacOS() processing.app.Base+isMacOS() javax.swing.JOptionPane+showConfirmDialog(Component,Object,String,int,int) javax.swing.JOptionPane+showConfirmDialog(Component,Object,String,int,int) javax.swing.JOptionPane+JOptionPane(Object,int) javax.swing.JOptionPane+setOptions(Object[]) javax.swing.JOptionPane+setOptions(Object[]) javax.swing.JOptionPane+setInitialValue(Object) javax.swing.JOptionPane+setInitialValue(Object) javax.swing.JOptionPane+createDialog(Component,String) javax.swing.JOptionPane+createDialog(Component,String) java.awt.Dialog+setVisible(boolean) java.awt.Dialog+setVisible(boolean) javax.swing.JOptionPane+getValue() javax.swing.JOptionPane+getValue()",javax.swing.JOptionPane+YES_NO_OPTION javax.swing.JOptionPane+QUESTION_MESSAGE javax.swing.JOptionPane+QUESTION_MESSAGE javax.swing.JOptionPane+YES_OPTION javax.swing.JOptionPane+NO_OPTION javax.swing.JOptionPane+CLOSED_OPTION,1721,43,9,,"static public int showYesNoQuestion(Frame editor, String title,
                                      String primary, String secondary) {
    if (!Base.isMacOS()) {
      return JOptionPane.showConfirmDialog(editor,
                                           ""<html><body>"" +
                                           ""<b>"" + primary + ""</b>"" +
                                           ""<br>"" + secondary, title,
                                           JOptionPane.YES_NO_OPTION,
                                           JOptionPane.QUESTION_MESSAGE);
    } else {
      // Pane formatting adapted from the Quaqua guide
      // http://www.randelshofer.ch/quaqua/guide/joptionpane.html
      JOptionPane pane =
        new JOptionPane(""<html> "" +
                        ""<head> <style type=\""text/css\"">""+
                        ""b { font: 13pt \""Lucida Grande\"" }""+
                        ""p { font: 11pt \""Lucida Grande\""; margin-top: 8px; width: 300px }""+
                        ""</style> </head>"" +
                        ""<b>"" + primary + ""</b>"" +
                        ""<p>"" + secondary + ""</p>"",
                        JOptionPane.QUESTION_MESSAGE);

      String[] options = new String[] {
        ""Yes"", ""No""
      };
      pane.setOptions(options);

      // highlight the safest option ala apple hig
      pane.setInitialValue(options[0]);

      JDialog dialog = pane.createDialog(editor, null);
      dialog.setVisible(true);

      Object result = pane.getValue();
      if (result == options[0]) {
        return JOptionPane.YES_OPTION;
      } else if (result == options[1]) {
        return JOptionPane.NO_OPTION;
      } else {
        return JOptionPane.CLOSED_OPTION;
      }
    }
  }",False
116,processingRoot,Field,,,,,37,1,12,,static protected File processingRoot;,True
117,getContentFile(String),Method,createAndShowGUI(String[]) buildCoreModes() getToolsFolder() getJavaHome(),processing.app.Mode+setupGUI() processing.app.tools.InstallCommander+run() processing.app.ui.Toolkit+getLibIcon(String) processing.app.ui.Welcome+getIndexFile(boolean) processing.mode.java.Commander+Commander(String[]) processing.mode.java.JavaMode+getCoreLibrary(),"java.net.URL+getPath() java.security.CodeSource+getLocation() java.security.ProtectionDomain+getCodeSource() java.lang.Class+getProtectionDomain() java.lang.Class+getProtectionDomain() java.security.ProtectionDomain+getCodeSource() java.security.CodeSource+getLocation() java.net.URL+getPath() processing.core.PApplet+urlDecode(String) processing.core.PApplet+urlDecode(String) java.lang.String+contains(CharSequence) java.lang.String+contains(CharSequence) processing.app.Base+isMacOS() processing.app.Base+isMacOS() java.io.File+File(String,String) processing.app.Base+isWindows() processing.app.Base+isWindows() java.io.File+File(String,String) processing.app.Base+isLinux() processing.app.Base+isLinux() java.io.File+File(String,String) java.io.File+getParentFile() java.io.File+File(String) java.io.File+getParentFile() java.lang.String+equals(Object) java.io.File+getName() java.io.File+getName() java.lang.String+equals(Object) java.io.File+getParentFile() java.io.File+getParentFile() processing.app.Base+isMacOS() processing.app.Base+isMacOS() java.io.File+exists() java.io.File+exists() java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath() java.io.File+File(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.io.File+File(File,String)",processing.app.Base+processingRoot processing.app.Base+processingRoot processing.app.Base+processingRoot processing.app.Base+processingRoot processing.app.Base+processingRoot processing.app.Base+processingRoot processing.app.Base+processingRoot processing.app.Base+processingRoot java.lang.System+err processing.app.Base+processingRoot processing.app.Base+processingRoot,2055,44,9,"/** 
 * Get reference to a file adjacent to the executable on Windows and Linux, or inside Contents/Resources/Java on Mac OS X. This will return the local JRE location, *whether or not it is the active JRE*.
 */
","/**
   * Get reference to a file adjacent to the executable on Windows and Linux,
   * or inside Contents/Resources/Java on Mac OS X. This will return the local
   * JRE location, *whether or not it is the active JRE*.
   */
  static public File getContentFile(String name) {
    if (processingRoot == null) {
      // Get the path to the .jar file that contains Base.class
      String path = Base.class.getProtectionDomain().getCodeSource().getLocation().getPath();
      // Path may have URL encoding, so remove it
      String decodedPath = PApplet.urlDecode(path);

      if (decodedPath.contains(""/app/bin"")) {  // This means we're in Eclipse
        if (Base.isMacOS()) {
          processingRoot =
            new File(path, ""../../build/macosx/work/Processing.app/Contents/Java"");
        } else if (Base.isWindows()) {
          processingRoot =  new File(path, ""../../build/windows/work"");
        } else if (Base.isLinux()) {
          processingRoot =  new File(path, ""../../build/linux/work"");
        }
      } else {
        // The .jar file will be in the lib folder
        File jarFolder = new File(decodedPath).getParentFile();
        if (jarFolder.getName().equals(""lib"")) {
          // The main Processing installation directory.
          // This works for Windows, Linux, and Apple's Java 6 on OS X.
          processingRoot = jarFolder.getParentFile();
        } else if (Base.isMacOS()) {
          // This works for Java 8 on OS X. We don't have things inside a 'lib'
          // folder on OS X. Adding it caused more problems than it was worth.
          processingRoot = jarFolder;
        }
        if (processingRoot == null || !processingRoot.exists()) {
          // Try working directory instead (user.dir, different from user.home)
          System.err.println(""Could not find lib folder via "" +
            jarFolder.getAbsolutePath() +
            "", switching to user.dir"");
          processingRoot = new File(System.getProperty(""user.dir""));
        }
      }
    }
    return new File(processingRoot, name);
  }",True
118,getJavaHome(),Method,,"processing.app.ui.Toolkit+createFont(String,int) processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean) processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean) processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean) processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean)","processing.app.Base+isMacOS() processing.app.Base+isMacOS() java.io.File+listFiles(FilenameFilter) processing.app.Base+getContentFile(String) processing.app.Base+getContentFile(String) java.io.File+listFiles(FilenameFilter) +() +accept(File,String)",,569,14,9,,"static public File getJavaHome() {
    if (isMacOS()) {
      //return ""Contents/PlugIns/jdk1.7.0_40.jdk/Contents/Home/jre/bin/java"";
      File[] plugins = getContentFile(""../PlugIns"").listFiles(new FilenameFilter() {
        public boolean accept(File dir, String name) {
          return dir.isDirectory() &&
            name.endsWith("".jdk"") && !name.startsWith(""."");
        }
      });
      return new File(plugins[0], ""Contents/Home/jre"");
    }
    // On all other platforms, it's the 'java' folder adjacent to Processing
    return getContentFile(""java"");
  }",True
119,getJavaPath(),Method,,processing.app.tools.InstallCommander+run() processing.mode.java.runner.Runner+launchVirtualMachine(boolean),"processing.app.Base+isWindows() processing.app.Base+isWindows() java.io.File+File(File,String) processing.app.Base+getJavaHome() processing.app.Base+getJavaHome() java.io.File+getCanonicalPath() java.io.File+getCanonicalPath() java.io.File+getAbsolutePath() java.io.File+getAbsolutePath()",,343,10,9,"/** 
 * Get the path to the embedded Java executable. 
 */
","/** Get the path to the embedded Java executable. */
  static public String getJavaPath() {
    String javaPath = ""bin/java"" + (isWindows() ? "".exe"" : """");
    File javaFile = new File(getJavaHome(), javaPath);
    try {
      return javaFile.getCanonicalPath();
    } catch (IOException e) {
      return javaFile.getAbsolutePath();
    }
  }",True
120,getLibFile(String),Method,,processing.app.Language+LanguageBundle.LanguageBundle(String) processing.app.Language+LanguageBundle.LanguageBundle(String) processing.app.ui.Welcome+getIndexFile(boolean),"java.io.File+File(File,String) processing.app.Base+getContentFile(String) processing.app.Base+getContentFile(String)",,197,6,9,"/** 
 * Return a File from inside the Processing 'lib' folder.
 */
","/**
   * Return a File from inside the Processing 'lib' folder.
   */
  static public File getLibFile(String filename) throws IOException {
    return new File(getContentFile(""lib""), filename);
  }",False
121,getLibStream(String),Method,,processing.app.Preferences+init(),java.io.FileInputStream+FileInputStream(File) processing.app.Base+getLibFile(String) processing.app.Base+getLibFile(String),,218,6,9,"/** 
 * Return an InputStream for a file inside the Processing lib folder.
 */
","/**
   * Return an InputStream for a file inside the Processing lib folder.
   */
  static public InputStream getLibStream(String filename) throws IOException {
    return new FileInputStream(getLibFile(filename));
  }",False
122,"log(Object,String)",Method,,processing.app.SingleInstance+run() processing.app.SingleInstance+run() processing.app.SingleInstance+run() processing.app.SingleInstance+run() processing.app.ui.Recent+load(),java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Class+getName() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getName(),processing.app.Base+DEBUG java.lang.System+out,150,5,9,,"static public void log(Object from, String message) {
    if (DEBUG) {
      System.out.println(from.getClass().getName() + "": "" + message);
    }
  }",False
123,log(String),Method,createAndShowGUI(String[]) Base(String[]),"processing.app.contrib.LocalContribution+LocalContribution(File) processing.app.contrib.LocalContribution+initLoader(String) processing.app.contrib.LocalContribution+initLoader(String) processing.app.contrib.LocalContribution+initLoader(String) processing.app.contrib.ModeContribution+load(Base,File,String) processing.app.contrib.ModeContribution+ModeContribution(Base,File,String) processing.app.contrib.ModeContribution+loadMissing(Base) processing.app.contrib.ModeContribution+initLoader(Base,String) processing.app.contrib.ModeContribution+initLoader(Base,String) processing.app.contrib.ModeContribution+initLoader(Base,String) processing.app.contrib.ModeContribution+initLoader(Base,String) processing.app.contrib.ToolContribution+load(File) processing.app.platform.MacPlatform+saveLanguage(String) processing.app.platform.WindowsPlatform+setAssociations() processing.app.Preferences+getFont(String) processing.app.Settings+getFont(String) processing.app.ui.PreferencesFrame+applyFrame() processing.app.ui.PreferencesFrame+applyFrame() processing.mode.java.debug.LineBreakpoint+classLoaded(ReferenceType) processing.mode.java.debug.LineBreakpoint+classLoaded(ReferenceType) processing.mode.java.JavaEditor+handleRefactor() processing.mode.java.JavaEditor+handleShowUsage() processing.mode.java.JavaEditor+applyPreferences() processing.mode.java.JavaMode+loadPreferences() processing.mode.java.JavaMode+savePreferences() processing.mode.java.pdex.ASTGenerator+valueChanged(TreeSelectionEvent) processing.mode.java.pdex.ASTGenerator+log(Object) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(FieldDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(FieldDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(FieldDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(FieldDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(FieldDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(MethodDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(MethodDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(MethodDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(MethodDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(MethodDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(TypeDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(TypeDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(TypeDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(TypeDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(TypeDeclaration) processing.mode.java.pdex.ASTNodeWrapper+createOffsetMapping(ErrorCheckerService,String,int,int) processing.mode.java.pdex.ASTNodeWrapper+createOffsetMapping(ErrorCheckerService,String,int,int) processing.mode.java.pdex.ASTNodeWrapper+getOffsetMapping(ErrorCheckerService,String) processing.mode.java.pdex.ASTNodeWrapper+getOffsetMapping(ErrorCheckerService,String) processing.mode.java.pdex.ASTNodeWrapper+getOffsetMapping(ErrorCheckerService,String) processing.mode.java.pdex.ASTNodeWrapper+getOffsetMapping(ErrorCheckerService,String) processing.mode.java.pdex.ASTNodeWrapper+getOffsetMapping(ErrorCheckerService,String) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+getPDECodeOffsetForSN(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+getJavaCode(String) processing.mode.java.pdex.ASTNodeWrapper+getJavaCode(String) processing.mode.java.pdex.CompletionPanel+insertSelection(int) processing.mode.java.pdex.CompletionPanel+CustomListRenderer.getListCellRendererComponent(JList<?>,Object,int,boolean,boolean) processing.mode.java.pdex.CompletionPanel+CustomListRenderer.getListCellRendererComponent(JList<?>,Object,int,boolean,boolean) processing.mode.java.pdex.ErrorCheckerService+run() processing.mode.java.pdex.ErrorCheckerService+run() processing.mode.java.pdex.ErrorCheckerService+run() processing.mode.java.pdex.ErrorCheckerService+checkForMissingImports() processing.mode.java.pdex.ErrorCheckerService+checkCode() processing.mode.java.pdex.ErrorCheckerService+checkCode() processing.mode.java.pdex.ErrorCheckerService+calcPdeOffsetsForProbList() processing.mode.java.pdex.ErrorCheckerService+calcPdeOffsetsForProbList() processing.mode.java.pdex.ErrorCheckerService+preprocessCode(String) processing.mode.java.pdex.ErrorCheckerService+highlightNode(ASTNodeWrapper) processing.mode.java.pdex.ErrorCheckerService+highlightNode(ASTNodeWrapper) processing.mode.java.pdex.ErrorCheckerService+scrollToErrorLine(Editor,int,int,int,int) processing.mode.java.pdex.ErrorCheckerService+handleErrorCheckingToggle() processing.mode.java.pdex.ErrorCheckerService+handleErrorCheckingToggle() processing.mode.java.pdex.JavaTextArea+processKeyEvent(KeyEvent) processing.mode.java.pdex.JavaTextArea+processKeyEvent(KeyEvent) processing.mode.java.pdex.JavaTextArea+processKeyEvent(KeyEvent) processing.mode.java.pdex.JavaTextArea+doInBackground() processing.mode.java.pdex.JavaTextArea+doInBackground() processing.mode.java.pdex.JavaTextArea+processCompletionKeys(KeyEvent) processing.mode.java.pdex.JavaTextArea+processCompletionKeys(KeyEvent) processing.mode.java.pdex.JavaTextArea+doInBackground() processing.mode.java.pdex.JavaTextArea+doInBackground() processing.mode.java.pdex.JavaTextArea+doInBackground() processing.mode.java.pdex.JavaTextArea+doInBackground() processing.mode.java.pdex.JavaTextArea+fetchPhrase(MouseEvent) processing.mode.java.pdex.JavaTextArea+fetchPhrase(MouseEvent) processing.mode.java.pdex.JavaTextArea+fetchPhrase(MouseEvent) processing.mode.java.pdex.JavaTextArea+fetchPhrase(KeyEvent) processing.mode.java.pdex.JavaTextArea+fetchPhrase(KeyEvent) processing.mode.java.pdex.JavaTextArea+fetchPhrase(KeyEvent) processing.mode.java.pdex.JavaTextArea+showSuggestion(DefaultListModel<CompletionCandidate>,String) processing.mode.java.pdex.JavaTextAreaPainter+handleCtrlClick(MouseEvent) processing.mode.java.pdex.JavaTextAreaPainter+handleCtrlClick(MouseEvent) processing.mode.java.pdex.JavaTextAreaPainter+handleCtrlClick(MouseEvent) processing.mode.java.pdex.JavaTextAreaPainter+paintLine(Graphics,int,int,TokenMarker) processing.mode.java.pdex.XQErrorTable+mouseClicked(MouseEvent) processing.mode.java.pdex.XQErrorTable+valueChanged(ListSelectionEvent) processing.mode.java.pdex.XQErrorTable+valueChanged(ListSelectionEvent)",java.io.PrintStream+println(String) java.io.PrintStream+println(String),processing.app.Base+DEBUG java.lang.System+out,102,5,9,,"static public void log(String message) {
    if (DEBUG) {
      System.out.println(message);
    }
  }",False
124,"logf(String,Object)",Method,,,"java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.String+format(String,Object[]) java.lang.String+format(String,Object[])",processing.app.Base+DEBUG java.lang.System+out,140,5,9,,"static public void logf(String message, Object... args) {
    if (DEBUG) {
      System.out.println(String.format(message, args));
    }
  }",False
125,"loge(String,Throwable)",Method,createAndShowGUI(String[]),"processing.app.contrib.ModeContribution+load(Base,File,String) processing.app.syntax.JEditTextArea+DragHandler.mouseDragged(MouseEvent) processing.app.ui.Editor+actionPerformed(ActionEvent) processing.app.ui.Editor+addTools(JMenu,List<ToolContribution>) processing.app.ui.Editor+addTools(JMenu,List<ToolContribution>) processing.app.ui.Toolkit+getMonoFont(int,int) processing.app.ui.Toolkit+getSansFont(int,int) processing.mode.java.pdex.ErrorCheckerService+updateErrorTable() processing.mode.java.pdex.ErrorCheckerService+scrollToErrorLine(Problem)",java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),processing.app.Base+DEBUG java.lang.System+err,143,6,9,,"static public void loge(String message, Throwable e) {
    if (DEBUG) {
      System.err.println(message);
      e.printStackTrace();
    }
  }",False
126,loge(String),Method,,"processing.mode.java.JavaEditor+addBreakpointComments(String) processing.mode.java.pdex.ASTGenerator+buildAST(String,CompilationUnit) processing.mode.java.pdex.ASTGenerator+preparePredictions(String,int,int) processing.mode.java.pdex.ASTGenerator+preparePredictions(String,int,int) processing.mode.java.pdex.ASTGenerator+preparePredictions(String,int,int) processing.mode.java.pdex.ASTGenerator+preparePredictions(String,int,int) processing.mode.java.pdex.ASTGenerator+getJavaSourceCodeLine(int) processing.mode.java.pdex.ASTGenerator+getJavaSourceCodeElement(int) processing.mode.java.pdex.ASTGenerator+getASTNodeAt(int,String,int,boolean) processing.mode.java.pdex.ASTGenerator+findAllOccurrences() processing.mode.java.pdex.ASTGenerator+findAllOccurrences() processing.mode.java.pdex.ASTGenerator+isInstanceOfType(ASTNode,ASTNode,String) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.CompletionPanel+insertSelection(int) processing.mode.java.pdex.ErrorCheckerService+run() processing.mode.java.pdex.ErrorCheckerService+highlightNode(ASTNodeWrapper) processing.mode.java.pdex.ErrorCheckerService+stopThread()",java.io.PrintStream+println(String) java.io.PrintStream+println(String),processing.app.Base+DEBUG java.lang.System+out,103,5,9,,"static public void loge(String message) {
    if (DEBUG) {
      System.out.println(message);
    }
  }",False
