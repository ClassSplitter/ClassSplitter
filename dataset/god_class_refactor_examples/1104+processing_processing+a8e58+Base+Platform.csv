index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,code summary
1,REVISION,revision ,Field,,,,,40,1,26,,static private final int REVISION = 242;,False,False,,
2,VERSION_NAME,version name this might be replaced by main if there s a lib version txt file ,Field,,,,,121,2,10,"/** 
 * This might be replaced by main() if there's a lib/version.txt file. 
 */
","/** This might be replaced by main() if there's a lib/version.txt file. */
  static private String VERSION_NAME = ""0242"";",False,False,"/** 
 * This might be replaced by main() if there's a lib/version.txt file. 
 */
","/** 
 * This might be replaced by main() if there's a lib/version.txt file. 
 */
"
3,DEBUG,debug true if heavy debugging error log messages are enabled ,Field,,,,,100,2,9,"/** 
 * True if heavy debugging error/log messages are enabled 
 */
","/** True if heavy debugging error/log messages are enabled */
  static public boolean DEBUG = false;",False,False,"/** 
 * True if heavy debugging error/log messages are enabled 
 */
","/** 
 * True if heavy debugging error/log messages are enabled 
 */
"
4,platformNames,platform names ,Field,,,,,83,2,8,,"static HashMap<Integer, String> platformNames =
    new HashMap<Integer, String>();",False,True,,
5,platformIndices,platform indices ,Field,,,,,81,1,8,,"static HashMap<String, Integer> platformIndices = new HashMap<String, Integer>();",False,True,,
6,nativeBits,native bits how many bits this machine is ,Field,,,,,61,2,8,"/** 
 * How many bits this machine is 
 */
","/** How many bits this machine is */
  static int nativeBits;",True,True,"/** 
 * How many bits this machine is 
 */
","/** 
 * How many bits this machine is 
 */
"
7,nativeArch,native arch ,Field,,,,,57,1,8,,"static String nativeArch = System.getProperty(""os.arch"");",False,True,,
8,commandLine,command line ,Field,,,,,35,1,10,,static private boolean commandLine;,False,False,,
9,preferencesFrame,preferences frame ,Field,,,,,34,1,0,,PreferencesFrame preferencesFrame;,False,False,,
10,contributionManagerFrame,contribution manager frame ,Field,,,,,51,1,0,,ContributionManagerDialog contributionManagerFrame;,False,True,,
11,untitledFolder,untitled folder ,Field,,,,,27,1,8,,static File untitledFolder;,False,False,,
12,editors,editors list of currently active editors ,Field,,,,,134,3,4,"/** 
 * List of currently active editors. 
 */
","/** List of currently active editors. */
  protected List<Editor> editors =
    Collections.synchronizedList(new ArrayList<Editor>());",False,False,"/** 
 * List of currently active editors. 
 */
","/** 
 * List of currently active editors. 
 */
"
13,activeEditor,active editor ,Field,,,,,30,1,4,,protected Editor activeEditor;,False,False,,
14,defaultFileMenu,default file menu a lone file menu to be used when all sketch windows are closed ,Field,,,,,109,2,9,"/** 
 * A lone file menu to be used when all sketch windows are closed. 
 */
","/** A lone file menu to be used when all sketch windows are closed. */
  static public JMenu defaultFileMenu;",False,False,"/** 
 * A lone file menu to be used when all sketch windows are closed. 
 */
","/** 
 * A lone file menu to be used when all sketch windows are closed. 
 */
"
15,nextMode,next mode starts with the last mode used with the environment or the default mode if not used ,Field,,,,,130,5,2,"/** 
 * Starts with the last mode used with the environment, or the default mode if not used.
 */
","/**
   * Starts with the last mode used with the environment,
   * or the default mode if not used.
   */
  private Mode nextMode;",False,False,"/** 
 * Starts with the last mode used with the environment, or the default mode if not used.
 */
","/** 
 * Starts with the last mode used with the environment, or the default mode if not used.
 */
"
16,coreModes,core modes the built in modes core modes 0 will be considered the default ,Field,,,,,101,2,2,"/** 
 * The built-in modes. coreModes[0] will be considered the 'default'. 
 */
","/** The built-in modes. coreModes[0] will be considered the 'default'. */
  private Mode[] coreModes;",False,False,"/** 
 * The built-in modes. coreModes[0] will be considered the 'default'. 
 */
","/** 
 * The built-in modes. coreModes[0] will be considered the 'default'. 
 */
"
17,modeContribs,mode contribs ,Field,,,,,51,1,4,,protected ArrayList<ModeContribution> modeContribs;,False,False,,
18,exampleContribs,example contribs ,Field,,,,,58,1,4,,protected ArrayList<ExamplesContribution> exampleContribs;,False,False,,
19,sketchbookMenu,sketchbook menu ,Field,,,,,29,1,2,,private JMenu sketchbookMenu;,False,False,,
20,recent,recent ,Field,,,,,22,1,2,,private Recent recent;,False,False,,
21,openChooser,open chooser ,Field,,,,,33,1,2,,private JFileChooser openChooser;,False,False,,
22,sketchbookFolder,sketchbook folder ,Field,,,,,39,1,12,,static protected File sketchbookFolder;,False,False,,
23,main(String[]),main args ,Method,,processing.mode.java.JavaMode+main(String[]),java.awt.EventQueue+invokeLater(Runnable) java.awt.EventQueue+invokeLater(Runnable) +() +run(),,479,13,9,,"static public void main(final String[] args) {
    EventQueue.invokeLater(new Runnable() {
        public void run() {
          try {
            createAndShowGUI(args);
          } catch (Throwable t) {
            showBadnessTrace(""It was not meant to be"",
                             ""A serious problem happened during startup. Please report:\n"" +
                             ""http://github.com/processing/processing/issues/new"", t, true);
          }
        }
    });
  }",False,False,"The main method is the entry point of the program. It creates and shows the graphical user interface (GUI) by invoking the createAndShowGUI method. If any error occurs during startup, it displays a badness trace with a message and a link to report the issue.","The code defines a main method that creates and shows a graphical user interface (GUI) using the EventQueue.invokeLater method. If any exception occurs during the startup, a method called showBadnessTrace is called to display an error message with a link to report the issue."
24,createAndShowGUI(String[]),create and show gui args ,Method,,,"processing.app.Base+getContentFile(String) processing.app.Base+getContentFile(String) java.io.File+exists() java.io.File+exists() processing.core.PApplet+loadStrings(File) processing.core.PApplet+loadStrings(File) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() processing.app.Base+initPlatform() processing.app.Base+initPlatform() javax.swing.JPopupMenu+setDefaultLightWeightPopupEnabled(boolean) javax.swing.JPopupMenu+setDefaultLightWeightPopupEnabled(boolean) processing.app.Language+init() processing.app.Language+init() processing.app.Preferences+init() processing.app.Preferences+init() processing.app.SingleInstance+alreadyRunning(String[]) processing.app.SingleInstance+alreadyRunning(String[]) processing.app.Base+loge(String,Throwable) processing.app.Base+loge(String,Throwable) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getOldSketchbookPath() processing.app.Preferences+getOldSketchbookPath() processing.app.Preferences+getSketchbookPath() processing.app.Preferences+getSketchbookPath() java.lang.String+equals(Object) java.lang.String+equals(Object) processing.app.Base+locateSketchbookFolder() processing.app.Base+locateSketchbookFolder() processing.app.Base+createTempFolder(String,String,File) processing.app.Base+createTempFolder(String,String,File) java.io.File+deleteOnExit() java.io.File+deleteOnExit() processing.app.Base+showError(String,String,Throwable) processing.app.Base+showError(String,String,Throwable) processing.app.Base+log(String) processing.app.Base+log(String) processing.app.Base+Base(String[]) processing.app.SingleInstance+startServer(Base) processing.app.SingleInstance+startServer(Base) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getBoolean(String) java.awt.EventQueue+invokeLater(Runnable) java.awt.EventQueue+invokeLater(Runnable) +() +run()",processing.app.Base+VERSION_NAME processing.app.Base+VERSION_NAME processing.app.Base+untitledFolder processing.app.Base+untitledFolder,3951,110,10,,"static private void createAndShowGUI(String[] args) {
    try {
      File versionFile = getContentFile(""lib/version.txt""); //$NON-NLS-1$
      if (versionFile.exists()) {
        String version = PApplet.loadStrings(versionFile)[0];
        if (!version.equals(VERSION_NAME)) {
          VERSION_NAME = version;
//          RELEASE = true;
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    initPlatform();

    // Use native popups so they don't look so crappy on OS X
    JPopupMenu.setDefaultLightWeightPopupEnabled(false);

    // Don't put anything above this line that might make GUI,
    // because the platform has to be inited properly first.

    // Make sure a full JDK is installed
    //initRequirements();

    // Load the languages
    Language.init();

    // run static initialization that grabs all the prefs
    Preferences.init();

    if (!SingleInstance.alreadyRunning(args)) {
      // Set the look and feel before opening the window
      try {
        Platform.setLookAndFeel();
      } catch (Exception e) {
        loge(""Could not set the Look & Feel"", e); //$NON-NLS-1$
      }

      boolean sketchbookPrompt = false;
      if (Preferences.getBoolean(""welcome.show"")) {
        if (!Preferences.getBoolean(""welcome.seen"")) {
          // Check if there's a 2.0 sketchbook present
          String oldPath = Preferences.getOldSketchbookPath();
          if (oldPath != null) {
            String newPath = Preferences.getSketchbookPath();
            // If newPath is null, this is the first run of any 3.x version
            if (newPath == null) {
              sketchbookPrompt = true;

            } else if (oldPath.equals(newPath)) {
              // If both exist and are identical, then the user has been using
              // alpha releases of 3.x and needs to be warned about the larger
              // changes in this release.
              sketchbookPrompt = true;
            }
          }
        }
      }

      // Get the sketchbook path, and make sure it's set properly
      locateSketchbookFolder();


      // Create a location for untitled sketches
      try {
        untitledFolder = Base.createTempFolder(""untitled"", ""sketches"", null);
        untitledFolder.deleteOnExit();
      } catch (IOException e) {
        Base.showError(""Trouble without a name"",
                       ""Could not create a place to store untitled sketches.\n"" +
                       ""That's gonna prevent us from continuing."", e);
      }

      log(""about to create base...""); //$NON-NLS-1$
      try {
        final Base base = new Base(args);
        // Prevent more than one copy of the PDE from running.
        SingleInstance.startServer(base);

        // Needs to be shown after the first editor window opens, so that it
        // shows up on top, and doesn't prevent an editor window from opening.
        if (Preferences.getBoolean(""welcome.show"")) {
          final boolean prompt = sketchbookPrompt;
          EventQueue.invokeLater(new Runnable() {
            public void run() {
              try {
                new Welcome(base, prompt);
              } catch (IOException e) {
                Base.showBadnessTrace(""Unwelcoming"",
                                      ""Please report this error to\n"" +
                                      ""https://github.com/processing/processing/issues"", e, false);
              }
            }
          });
        }

      } catch (Throwable t) {
        // Catch-all to pick up badness during startup.
        if (t.getCause() != null) {
          // Usually this is the more important piece of information. We'll
          // show this one so that it's not truncated in the error window.
          t = t.getCause();
        }
        showBadnessTrace(""We're off on the wrong foot"",
                         ""An error occurred during startup."", t, true);
      }
      log(""done creating base...""); //$NON-NLS-1$
    }
  }",False,False,"This method serves to create and show the graphical user interface (GUI) for the program. It initializes various components, sets the look and feel, checks for the presence of a sketchbook, creates a location for untitled sketches, and handles any errors that occur during startup.","The `createAndShowGUI` method initializes the platform, sets the look and feel of the GUI, checks for the presence of a sketchbook, creates a location for untitled sketches, and creates an instance of the `Base` class to start the Processing Development Environment (PDE) if it is not already running. It also displays a welcome window if it is the first run of the application or if there have been significant changes in the release."
25,setCommandLine(),set command line ,Method,,processing.mode.java.Commander+main(String[]),,processing.app.Base+commandLine,65,3,9,,"public static void setCommandLine() {
    commandLine = true;
  }",False,False,"This method sets the value of the variable ""commandLine"" to true.","The code defines a static method called ""setCommandLine"" that sets a boolean variable ""commandLine"" to true. This method is responsible for indicating that the program is being executed from the command line."
26,isCommandLine(),is command line ,Method,,processing.app.ui.Editor+showChanges(),,processing.app.Base+commandLine,67,3,9,,"static public boolean isCommandLine() {
    return commandLine;
  }",False,False,This method serves to determine whether the program is being run from the command line or not. It returns a boolean value indicating whether the program is being run from the command line or not.,"The code defines a static method named ""isCommandLine"" that returns a boolean value. It checks and returns the value of a variable called ""commandLine"", which is likely used to determine if the program is being run from the command line or not."
27,initPlatform(),init platform ,Method,createAndShowGUI(String[]),processing.app.ui.Welcome+main(String[]) processing.mode.java.Commander+main(String[]),"java.lang.Class+forName(String) java.lang.Class+forName(String) processing.app.Base+isMacOS() processing.app.Base+isMacOS() java.lang.Class+forName(String) java.lang.Class+forName(String) processing.app.Base+isWindows() processing.app.Base+isWindows() java.lang.Class+forName(String) java.lang.Class+forName(String) processing.app.Base+isLinux() processing.app.Base+isLinux() java.lang.Class+forName(String) java.lang.Class+forName(String) java.lang.Class+newInstance() java.lang.Class+newInstance() processing.app.Base+showError(String,String,Throwable) processing.app.Base+showError(String,String,Throwable)",,813,17,9,,"static public void initPlatform() {
    try {
      Class<?> platformClass = Class.forName(""processing.app.Platform""); //$NON-NLS-1$
      if (Base.isMacOS()) {
        platformClass = Class.forName(""processing.app.platform.MacPlatform""); //$NON-NLS-1$
      } else if (Base.isWindows()) {
        platformClass = Class.forName(""processing.app.platform.WindowsPlatform""); //$NON-NLS-1$
      } else if (Base.isLinux()) {
        platformClass = Class.forName(""processing.app.platform.LinuxPlatform""); //$NON-NLS-1$
      }
      platform = (Platform) platformClass.newInstance();
    } catch (Exception e) {
      Base.showError(""Problem Setting the Platform"",
                     ""An unknown error occurred while trying to load\n"" +
                     ""platform-specific code for your machine."", e);
    }
  }",True,True,The function initializes the platform by dynamically loading the appropriate platform-specific code based on the operating system.,"The code initializes the platform based on the operating system by dynamically loading the appropriate platform-specific class. If the platform cannot be set, an error message is displayed."
28,getDefaultModeIdentifier(),get default mode identifier ,Method,"buildCoreModes() promptForMode(File,ModeInfo)",,,,150,4,2,,"private String getDefaultModeIdentifier() {
    //return ""processing.mode.java.pdex.ExperimentalMode"";
    return ""processing.mode.java.JavaMode"";
  }",False,False,"The function of the method is to return a default mode identifier, which is either ""processing.mode.java.pdex.ExperimentalMode"" or ""processing.mode.java.JavaMode"".","The code defines a private method called `getDefaultModeIdentifier()` that returns a string. The method is currently set to return ""processing.mode.java.JavaMode"", but there is a commented out line that suggests an alternative value of ""processing.mode.java.pdex.ExperimentalMode""."
29,buildCoreModes(),build core modes ,Method,Base(String[]),,"processing.app.contrib.ModeContribution+getMode() processing.app.contrib.ModeContribution+load(Base,File,String) processing.app.contrib.ModeContribution+load(Base,File,String) processing.app.Base+getContentFile(String) processing.app.Base+getContentFile(String) processing.app.Base+getDefaultModeIdentifier() processing.app.Base+getDefaultModeIdentifier() processing.app.contrib.ModeContribution+getMode()",processing.app.Base+coreModes,702,18,2,,"private void buildCoreModes() {
    Mode javaMode =
      ModeContribution.load(this, getContentFile(""modes/java""), //$NON-NLS-1$
                            getDefaultModeIdentifier()).getMode(); //$NON-NLS-1$

    // PDE X calls getModeList() while it's loading, so coreModes must be set
    coreModes = new Mode[] { javaMode };

    /*
    Mode pdexMode =
      ModeContribution.load(this, getContentFile(""modes/ExperimentalMode""), //$NON-NLS-1$
                            ""processing.mode.experimental.ExperimentalMode"").getMode(); //$NON-NLS-1$

    // Safe to remove the old Java mode here?
    //coreModes = new Mode[] { pdexMode };
    coreModes = new Mode[] { pdexMode, javaMode };
    */
  }",False,False,"The function ""buildCoreModes"" loads the Java mode and sets it as the core mode. It also loads an experimental mode and adds it to the core modes array.","The code defines a private method called ""buildCoreModes"" that loads a Java mode from a file and sets it as the core mode. There is commented out code that suggests the possibility of adding an experimental mode alongside the Java mode."
30,rebuildContribModes(),rebuild contrib modes instantiates and adds new contributed modes to the contrib modes list checks for duplicates so the same mode isn t instantiates twice does not remove modes because modes can t be removed once they are instantiated ,Method,Base(String[]),,java.util.ArrayList+ArrayList() processing.app.contrib.ModeContribution+loadMissing(Base) processing.app.contrib.ModeContribution+loadMissing(Base),processing.app.Base+modeContribs processing.app.Base+modeContribs,741,21,0,"/** 
 * Instantiates and adds new contributed modes to the contribModes list. Checks for duplicates so the same mode isn't instantiates twice. Does not remove modes because modes can't be removed once they are instantiated.
 */
","/**
   * Instantiates and adds new contributed modes to the contribModes list.
   * Checks for duplicates so the same mode isn't instantiates twice. Does not
   * remove modes because modes can't be removed once they are instantiated.
   */
  void rebuildContribModes() {
    if (modeContribs == null) {
      modeContribs = new ArrayList<ModeContribution>();
    }
    ModeContribution.loadMissing(this);

//    ArrayList<ModeContribution> newContribs =
//      ModeContribution.loadAll(getSketchbookModesFolder());
//    for (ModeContribution contrib : newContribs) {
//      if (!contribModes.contains(contrib)) {
//        if (contrib.instantiateModeClass(this)) {
//          contribModes.add(contrib);
//        }
//      }
//    }
  }",False,False,"The function of this method is to rebuild the list of contributed modes by instantiating and adding new contributed modes to the list, while checking for duplicates. It does not remove modes because they cannot be removed once they are instantiated.","The `rebuildContribModes()` method is responsible for instantiating and adding new contributed modes to the `contribModes` list. It checks for duplicates to avoid instantiating the same mode twice, but it does not remove modes once they are instantiated. The commented out code suggests that there might be an alternative approach to loading and adding new contributions."
31,rebuildContribExamples(),rebuild contrib examples instantiates and adds new contributed modes to the contrib modes list checks for duplicates so the same mode isn t instantiates twice does not remove modes because modes can t be removed once they are instantiated ,Method,Base(String[]),,java.util.ArrayList+ArrayList() processing.app.contrib.ExamplesContribution+loadMissing(Base) processing.app.contrib.ExamplesContribution+loadMissing(Base),processing.app.Base+exampleContribs processing.app.Base+exampleContribs,426,11,0,"/** 
 * Instantiates and adds new contributed modes to the contribModes list. Checks for duplicates so the same mode isn't instantiates twice. Does not remove modes because modes can't be removed once they are instantiated.
 */
","/**
   * Instantiates and adds new contributed modes to the contribModes list.
   * Checks for duplicates so the same mode isn't instantiates twice. Does not
   * remove modes because modes can't be removed once they are instantiated.
   */
  void rebuildContribExamples() {
    if (exampleContribs == null) {
      exampleContribs = new ArrayList<ExamplesContribution>();
    }
    ExamplesContribution.loadMissing(this);
  }",False,False,This method instantiates and adds new contributed modes to the contribModes list. It checks for duplicates to avoid instantiating the same mode twice. It does not remove modes because they cannot be removed once instantiated.,The `rebuildContribExamples` method is responsible for instantiating and adding new contributed modes to the `exampleContribs` list. It ensures that duplicates are not added and does not remove any modes once they are instantiated. The method also calls the `loadMissing` method from the `ExamplesContribution` class to load any missing contributions.
32,Base(String[]),base args ,Method,,,"processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+cleanup(Base) processing.app.Base+buildCoreModes() processing.app.Base+buildCoreModes() processing.app.Base+rebuildContribModes() processing.app.Base+rebuildContribModes() processing.app.Base+rebuildContribExamples() processing.app.Base+rebuildContribExamples() processing.app.ui.Recent+Recent(Base) processing.app.Preferences+get(String) processing.app.Preferences+get(String) processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode() processing.app.Base+log(String) processing.app.Base+log(String) processing.app.Base+getModeList() processing.app.Base+getModeList() java.lang.String+equals(Object) processing.app.Mode+getIdentifier() processing.app.Mode+getIdentifier() java.lang.String+equals(Object) processing.app.Base+logf(String,Object[]) processing.app.Base+logf(String,Object[]) processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode() processing.app.Base+logf(String,Object[]) processing.app.Base+logf(String,Object[]) processing.app.contrib.ContributionManagerDialog+ContributionManagerDialog() processing.app.Mode+rebuildLibraryList() processing.app.Mode+rebuildLibraryList() processing.app.Base+isWindows() processing.app.Base+isWindows() java.io.File+File(String) java.io.File+getCanonicalPath() java.io.File+getCanonicalPath() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() processing.app.Base+handleOpen(String) processing.app.Base+handleOpen(String) processing.app.Base+handleNew() processing.app.Base+handleNew() processing.app.UpdateCheck+UpdateCheck(Base)",processing.app.Base+recent processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+contributionManagerFrame processing.app.Base+nextMode,2527,74,1,,"public Base(String[] args) throws Exception {
    ContributionManager.cleanup(this);
    buildCoreModes();
    rebuildContribModes();
    rebuildContribExamples();

    // Needs to happen after the sketchbook folder has been located.
    // Also relies on the modes to be loaded so it knows what can be
    // marked as an example.
    recent = new Recent(this);

    String lastModeIdentifier = Preferences.get(""mode.last""); //$NON-NLS-1$
    if (lastModeIdentifier == null) {
      nextMode = getDefaultMode();
      log(""Nothing set for last.sketch.mode, using default.""); //$NON-NLS-1$
    } else {
      for (Mode m : getModeList()) {
        if (m.getIdentifier().equals(lastModeIdentifier)) {
          logf(""Setting next mode to %s."", lastModeIdentifier); //$NON-NLS-1$
          nextMode = m;
        }
      }
      if (nextMode == null) {
        nextMode = getDefaultMode();
        logf(""Could not find mode %s, using default."", lastModeIdentifier); //$NON-NLS-1$
      }
    }

    contributionManagerFrame = new ContributionManagerDialog();

    // Make sure ThinkDifferent has library examples too
    nextMode.rebuildLibraryList();

    // Put this after loading the examples, so that building the default file
    // menu works on Mac OS X (since it needs examplesFolder to be set).
    platform.init(this);

//    toolsFolder = getContentFile(""tools"");

//    // Check if there were previously opened sketches to be restored
//    boolean opened = restoreSketches();
    boolean opened = false;

    // Check if any files were passed in on the command line
    for (int i = 0; i < args.length; i++) {
      String path = args[i];
      // Fix a problem with systems that use a non-ASCII languages. Paths are
      // being passed in with 8.3 syntax, which makes the sketch loader code
      // unhappy, since the sketch folder naming doesn't match up correctly.
      // http://dev.processing.org/bugs/show_bug.cgi?id=1089
      if (isWindows()) {
        try {
          File file = new File(args[i]);
          path = file.getCanonicalPath();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
      if (handleOpen(path) != null) {
        opened = true;
      }
    }

    // Create a new empty window (will be replaced with any files to be opened)
    if (!opened) {
//      System.out.println(""opening a new window"");
      handleNew();
//    } else {
//      System.out.println(""something else was opened"");
    }

    // check for updates
    new UpdateCheck(this);
  }",False,False,"The function of this method is to initialize the Base object. It performs various tasks such as cleaning up contributions, building core modes, rebuilding contribution modes and examples, initializing the recent object, setting the next mode based on preferences, creating a ContributionManagerDialog object, rebuilding the library list for the next mode, initializing the platform, checking for previously opened sketches and files passed in on the command line, and checking for updates.","The code initializes the base class by performing various setup tasks such as cleaning up contributions, building core modes, and rebuilding examples. It then sets the next mode based on the last mode identifier, creates a contribution manager dialog, and initializes the platform. Finally, it checks for any files passed in on the command line and handles them accordingly, and checks for updates."
33,getActiveEditor(),get active editor returns the front most active editor window ,Method,,"processing.app.contrib.ContributionListing+countUpdates(Base) processing.app.contrib.ContributionListing+countUpdates(Base) processing.app.contrib.ContributionListing+hasUpdates(Base) processing.app.contrib.ContributionListing+hasUpdates(Base) processing.app.contrib.ContributionManager+run() processing.app.contrib.ContributionManager+run() processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ContributionManager+downloadAndInstallOnImport(Base,List<AvailableContribution>) processing.app.contrib.ExamplesContribution+isCompatible(Base,StringDict) processing.app.contrib.LocalContribution+copyAndLoad(Base,boolean,StatusPanel) processing.app.ui.ExamplesFrame+setVisible() processing.app.ui.SketchbookFrame+run() processing.mode.java.JavaEditor+autoSave()",,processing.app.Base+activeEditor,117,4,1,"/** 
 * Returns the front most, active editor window. 
 */
","/** Returns the front most, active editor window. */
  public Editor getActiveEditor() {
    return activeEditor;
  }",False,False,"The method ""getActiveEditor"" returns the front most, active editor window.","The code defines a method named ""getActiveEditor"" that returns the front most, active editor window. It is expected to return an object of type ""Editor""."
34,getEditors(),get editors get the list of currently active editor windows ,Method,,"processing.app.contrib.ContributionManager+refreshInstalled(Editor) processing.app.contrib.ContributionManagerDialog+actionPerformed(ActionEvent) processing.app.contrib.ContributionManagerDialog+cancel() processing.app.contrib.ContributionManagerDialog+cancel() processing.app.contrib.LocalContribution+remove(Editor,ContribProgressMonitor,StatusPanel,ContributionListing) processing.app.contrib.LocalContribution+remove(Editor,ContribProgressMonitor,StatusPanel,ContributionListing) processing.app.contrib.ToolContribution+clearClassLoader(Base) processing.app.ui.Editor+menuSelected(MenuEvent) processing.app.ui.EditorHeader+actionPerformed(ActionEvent) processing.app.ui.PreferencesFrame+applyFrame() processing.app.ui.PreferencesFrame+applyFrame()",,processing.app.Base+editors,116,4,1,"/** 
 * Get the list of currently active editor windows. 
 */
","/** Get the list of currently active editor windows. */
  public List<Editor> getEditors() {
    return editors;
  }",False,False,This method returns a list of currently active editor windows.,"The code defines a method named ""getEditors()"" that returns a list of currently active editor windows. The method does not take any parameters and simply returns the list of editors."
35,changeMode(Mode),change mode mode the call has already checked to make sure this sketch is not modified now change the mode ,Method,,processing.app.ui.Editor+actionPerformed(ActionEvent),"processing.app.ui.Editor+getMode() processing.app.ui.Editor+getMode() processing.app.ui.Editor+getSketch() processing.app.ui.Editor+getSketch() processing.app.Sketch+isUntitled() processing.app.Sketch+isUntitled() processing.app.Base+handleClose(Editor,boolean) processing.app.Base+handleClose(Editor,boolean) processing.app.Base+handleNew() processing.app.Base+handleNew() processing.app.Sketch+getCode() processing.app.Sketch+getCode() processing.app.Mode+validExtension(String) processing.app.Mode+validExtension(String) processing.app.SketchCode+getExtension() processing.app.SketchCode+getExtension() java.io.File+File(File,String) processing.app.Sketch+getCodeFolder() processing.app.Sketch+getCodeFolder() processing.app.Base+saveModeSettings(File,Mode) processing.app.Base+saveModeSettings(File,Mode) processing.app.Base+handleClose(Editor,boolean) processing.app.Base+handleClose(Editor,boolean) processing.app.Base+handleOpen(String) processing.app.Base+handleOpen(String) processing.app.Sketch+getMainFilePath() processing.app.Sketch+getMainFilePath()",processing.app.Base+activeEditor processing.app.Base+activeEditor processing.app.Base+nextMode processing.app.Base+activeEditor processing.app.Base+nextMode processing.app.Base+activeEditor,1241,34,1,"/** 
 * The call has already checked to make sure this sketch is not modified, now change the mode.
 */
","/**
   * The call has already checked to make sure this sketch is not modified,
   * now change the mode.
   */
  public void changeMode(Mode mode) {
    if (activeEditor.getMode() != mode) {
      Sketch sketch = activeEditor.getSketch();
      nextMode = mode;

      if (sketch.isUntitled()) {
        // If no changes have been made, just close and start fresh.
        // (Otherwise the editor would lose its 'untitled' status.)
        handleClose(activeEditor, true);
        handleNew();

      } else {
        // If the current editor contains file extensions that the new mode can handle, then
        // write a sketch.properties file with the new mode specified, and reopen.
        boolean newModeCanHandleCurrentSource = true;
        for (final SketchCode code: sketch.getCode()) {
          if (!mode.validExtension(code.getExtension())) {
            newModeCanHandleCurrentSource = false;
            break;
          }
        }
        if (newModeCanHandleCurrentSource) {
          final File props = new File(sketch.getCodeFolder(), ""sketch.properties"");
          saveModeSettings(props, nextMode);
          handleClose(activeEditor, true);
          handleOpen(sketch.getMainFilePath());
        }
      }
    }
  }",False,False,"The function of this method is to change the mode of the sketch. It first checks if the current mode is different from the desired mode. If it is, it performs different actions depending on whether the sketch is untitled or not. If untitled, it closes the current editor and starts a new one. If not untitled, it checks if the new mode can handle the current source code. If it can, it saves the mode settings to a file, closes the current editor, and opens the main file of the sketch.","This code defines a method called `changeMode` that is responsible for changing the mode of a sketch. It first checks if the current mode is different from the desired mode, and if so, it determines whether the new mode can handle the current source code. If it can, it saves the new mode settings, closes the current editor, and opens the sketch with the new mode."
36,getModeContribs(),get mode contribs ,Method,getInstalledContribs(),processing.app.contrib.ContributionListing+countUpdates(Base) processing.app.contrib.ContributionListing+hasUpdates(Base) processing.app.contrib.ContributionManager+run() processing.app.contrib.ContributionManager+run() processing.app.contrib.ContributionTab+updateContributionListing() processing.app.contrib.ModeContribution+clearClassLoader(Base) processing.app.contrib.ModeContribution+loadMissing(Base),,processing.app.Base+modeContribs,78,3,1,,"public List<ModeContribution> getModeContribs() {
    return modeContribs;
  }",False,False,This method returns a list of ModeContribution objects.,"The code defines a method named ""getModeContribs"" that returns a list of objects of type ""ModeContribution"". It retrieves and returns the ""modeContribs"" list."
37,getModeList(),get mode list ,Method,"Base(String[]) handleOpenPrompt() promptForMode(File,ModeInfo) findMode(String) rebuildSketchbookMenus() checkSketchFolder(File,String)","processing.app.contrib.ModeContribution+initLoader(Base,String) processing.app.Sketch+isReadOnly() processing.app.ui.Editor+initModeMenu() processing.app.ui.Recent+updateMenuRecord(JMenu,Record,String)",java.util.ArrayList+ArrayList() java.util.ArrayList+addAll(Collection) java.util.ArrayList+addAll(Collection) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) java.util.ArrayList+add(E) java.util.ArrayList+add(E) processing.app.contrib.ModeContribution+getMode() processing.app.contrib.ModeContribution+getMode(),processing.app.Base+coreModes processing.app.Base+modeContribs processing.app.Base+modeContribs,300,10,1,,"public List<Mode> getModeList() {
    ArrayList<Mode> allModes = new ArrayList<Mode>();
    allModes.addAll(Arrays.asList(coreModes));
    if (modeContribs != null) {
      for (ModeContribution contrib : modeContribs) {
        allModes.add(contrib.getMode());
      }
    }
    return allModes;
  }",False,False,"This method returns a list of modes. It creates an ArrayList called allModes and adds all the coreModes to it. If modeContribs is not null, it iterates through modeContribs and adds each mode to allModes. Finally, it returns allModes.","This code defines a method named ""getModeList"" that returns a list of ""Mode"" objects. It creates an ArrayList called ""allModes"" and adds all the elements from an array called ""coreModes"" to it. If there are additional mode contributions, it iterates through them and adds their corresponding modes to the list before returning it."
38,getExampleContribs(),get example contribs ,Method,getInstalledContribs(),processing.app.contrib.ContributionTab+updateContributionListing() processing.app.contrib.ExamplesContribution+loadMissing(Base),,processing.app.Base+exampleContribs,88,3,1,,"public List<ExamplesContribution> getExampleContribs() {
    return exampleContribs;
  }",False,False,This method returns a list of ExamplesContribution objects.,"The code defines a method named ""getExampleContribs"" that returns a list of objects of type ""ExamplesContribution"". The method retrieves and returns the value of the ""exampleContribs"" variable."
39,getInstalledContribs(),get installed contribs ,Method,getInstalledContribsInfo(),,java.util.ArrayList+ArrayList() processing.app.Base+getModeContribs() processing.app.Base+getModeContribs() java.util.List+addAll(Collection) java.util.List+addAll(Collection) processing.app.contrib.ModeContribution+getMode() processing.app.contrib.ModeContribution+getMode() java.util.List+addAll(Collection) java.util.List+addAll(Collection) java.util.ArrayList+ArrayList(Collection) java.util.List+addAll(Collection) java.util.List+addAll(Collection) processing.app.contrib.ToolContribution+loadAll(File) processing.app.contrib.ToolContribution+loadAll(File) processing.app.Base+getSketchbookToolsFolder() processing.app.Base+getSketchbookToolsFolder() java.util.List+addAll(Collection) java.util.List+addAll(Collection) processing.app.Base+getExampleContribs() processing.app.Base+getExampleContribs(),processing.app.Mode+contribLibraries,788,20,2,,"private List<Contribution> getInstalledContribs() {
    List<Contribution> contributions = new ArrayList<Contribution>();

    List<ModeContribution> modeContribs = getModeContribs();
    contributions.addAll(modeContribs);

    for (ModeContribution modeContrib : modeContribs) {
      Mode mode = modeContrib.getMode();
      contributions.addAll(new ArrayList<Library>(mode.contribLibraries));
    }

    // TODO this duplicates code in Editor, but it's not editor-specific
//    List<ToolContribution> toolContribs =
//      ToolContribution.loadAll(Base.getSketchbookToolsFolder());
//    contributions.addAll(toolContribs);
    contributions.addAll(ToolContribution.loadAll(getSketchbookToolsFolder()));

    contributions.addAll(getExampleContribs());
    return contributions;
  }",False,False,"This method returns a list of contributions. It first adds all mode contributions and their associated libraries. Then it adds all tool contributions. Finally, it adds all example contributions.","This code defines a private method called `getInstalledContribs()` that returns a list of contributions. It retrieves mode contributions, extracts the libraries from each mode contribution, loads tool contributions, and adds example contributions to the final list."
40,getInstalledContribsInfo(),get installed contribs info ,Method,,processing.app.contrib.ContributionListing+run(),"processing.app.Base+getInstalledContribs() processing.app.Base+getInstalledContribs() processing.data.StringList+StringList() processing.app.contrib.Contribution+getTypeName() processing.app.contrib.Contribution+getTypeName() processing.core.PApplet+urlEncode(String) processing.core.PApplet+urlEncode(String) java.lang.String+format(Locale,String,Object[]) java.lang.String+format(Locale,String,Object[]) processing.app.contrib.Contribution+getName() processing.app.contrib.Contribution+getName() processing.app.contrib.Contribution+getUrl() processing.app.contrib.Contribution+getUrl() processing.app.contrib.Contribution+getVersion() processing.app.contrib.Contribution+getVersion() processing.app.contrib.Contribution+getPrettyVersion() processing.app.contrib.Contribution+getPrettyVersion() processing.data.StringList+append(String) processing.data.StringList+append(String) processing.app.Preferences+get(String) processing.app.Preferences+get(String) processing.data.StringList+join(String) processing.data.StringList+join(String) java.lang.String+getBytes() java.lang.String+getBytes()",,1274,30,1,,"public byte[] getInstalledContribsInfo() {
    List<Contribution> contribs = getInstalledContribs();
    StringList entries = new StringList();
    for (Contribution c : contribs) {
      String entry = c.getTypeName() + ""="" +
        PApplet.urlEncode(String.format(""name=%s\nurl=%s\nrevision=%d\nversion=%s"",
                                        c.getName(), c.getUrl(),
                                        c.getVersion(), c.getPrettyVersion()));
      entries.append(entry);
    }
    String joined =
      ""id="" + Preferences.get(""update.id"") + ""&"" + entries.join(""&"");
//    StringBuilder sb = new StringBuilder();
//    try {
//      // Truly ridiculous attempt to shove everything into a GET request.
//      // More likely to be seen as part of a grand plot.
//      ByteArrayOutputStream baos = new ByteArrayOutputStream();
//      GZIPOutputStream output = new GZIPOutputStream(baos);
//      PApplet.saveStream(output, new ByteArrayInputStream(joined.getBytes()));
//      output.close();
//      byte[] b = baos.toByteArray();
//      for (int i = 0; i < b.length; i++) {
//        sb.append(PApplet.hex(b[i], 2));
//      }
//    } catch (IOException e) {
//      e.printStackTrace();
//    }
//    return sb.toString();
    return joined.getBytes();
  }",False,False,"The function of this method is to retrieve information about installed contributions, encode it, and return it as a byte array.","The `getInstalledContribsInfo` method retrieves information about installed contributions and returns it as a byte array. The information includes the contribution's type, name, URL, revision, and version. The method also includes commented out code that attempts to compress the information using GZIP, but it is currently not being used."
41,handleActivated(Editor),handle activated which editor ,Method,,processing.app.ui.Editor+windowActivated(WindowEvent),"processing.app.ui.EditorConsole+setEditor(Editor) processing.app.ui.EditorConsole+setEditor(Editor) processing.app.ui.Editor+getMode() processing.app.ui.Editor+getMode() processing.app.Preferences+set(String,String) processing.app.Preferences+set(String,String) processing.app.Mode+getIdentifier() processing.app.Mode+getIdentifier()",processing.app.Base+activeEditor processing.app.Base+activeEditor processing.app.Base+nextMode processing.app.Base+nextMode,356,10,1,,"public void handleActivated(Editor whichEditor) {
    activeEditor = whichEditor;

    // set the current window to be the console that's getting output
    EditorConsole.setEditor(activeEditor);

    // make this the next mode to be loaded
    nextMode = whichEditor.getMode();
    Preferences.set(""mode.last"", nextMode.getIdentifier()); //$NON-NLS-1$
  }",False,False,"This method sets the active editor, sets the current window to be the console for output, sets the next mode to be loaded, and saves the last used mode in preferences.","The `handleActivated` method sets the `activeEditor` to the provided `whichEditor` parameter. It then sets the `activeEditor` as the current window for output in the `EditorConsole`. Finally, it sets the `nextMode` to the mode of the `whichEditor` and saves it in the preferences."
42,breakTime,break time ,Field,,,,,26,1,0,,boolean breakTime = false;,False,False,,
43,months,months ,Field,,,,,115,4,0,,"String[] months = {
    ""jan"", ""feb"", ""mar"", ""apr"", ""may"", ""jun"",
    ""jul"", ""aug"", ""sep"", ""oct"", ""nov"", ""dec""
  };",False,False,,
44,handleNew(),handle new create a new untitled document in a new sketch window ,Method,Base(String[]) changeMode(Mode),processing.app.platform.ThinkDifferent+actionPerformed(ActionEvent) processing.app.SingleInstance+run() processing.app.ui.Editor+actionPerformed(ActionEvent),"processing.app.Preferences+get(String) processing.app.Preferences+get(String) processing.app.Preferences+get(String) processing.app.Preferences+get(String) java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) java.util.Calendar+get(int) processing.core.PApplet+nf(int,int) processing.core.PApplet+nf(int,int) java.text.SimpleDateFormat+SimpleDateFormat(String) java.text.DateFormat+format(Date) java.text.DateFormat+format(Date) java.util.Date+Date() processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) processing.app.Sketch+sanitizeName(String) processing.app.Sketch+sanitizeName(String) java.io.File+File(File,String) java.io.File+exists() java.io.File+exists() java.io.File+exists() java.io.File+File(File,String) java.io.File+exists() java.io.File+mkdirs() java.io.File+mkdirs() java.io.File+File(File,String) processing.app.Mode+getDefaultExtension() processing.app.Mode+getDefaultExtension() java.io.File+createNewFile() java.io.File+createNewFile() java.io.IOException+IOException(String) java.lang.Object+equals(Object) java.lang.Object+equals(Object) processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode() processing.app.Base+saveModeSettings(File,Mode) processing.app.Base+saveModeSettings(File,Mode) java.io.File+File(File,String) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath() processing.app.Base+handleOpen(String,boolean) processing.app.Base+handleOpen(String,boolean) processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable)",processing.app.Base+untitledFolder java.util.Calendar+DAY_OF_MONTH java.util.Calendar+MONTH processing.app.Base+months processing.app.Base+breakTime processing.app.Base+breakTime processing.app.Base+sketchbookFolder processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode,3271,79,1,"/** 
 * Create a new untitled document in a new sketch window.
 */
","/**
   * Create a new untitled document in a new sketch window.
   */
  public void handleNew() {
    try {
      File newbieDir = null;
      String newbieName = null;

      // In 0126, untitled sketches will begin in the temp folder,
      // and then moved to a new location because Save will default to Save As.
//      File sketchbookDir = getSketchbookFolder();
      File newbieParentDir = untitledFolder;

      String prefix = Preferences.get(""editor.untitled.prefix"");

      // Use a generic name like sketch_031008a, the date plus a char
      int index = 0;
      String format = Preferences.get(""editor.untitled.suffix"");
      String suffix = null;
      if (format == null) {
        Calendar cal = Calendar.getInstance();
        int day = cal.get(Calendar.DAY_OF_MONTH);  // 1..31
        int month = cal.get(Calendar.MONTH);  // 0..11
        suffix = months[month] + PApplet.nf(day, 2);
      } else {
        //SimpleDateFormat formatter = new SimpleDateFormat(""yyMMdd"");
        //SimpleDateFormat formatter = new SimpleDateFormat(""MMMdd"");
        //String purty = formatter.format(new Date()).toLowerCase();
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        suffix = formatter.format(new Date());
      }
      do {
        if (index == 26) {
          // In 0159, avoid running past z by sending people outdoors.
          if (!breakTime) {
            Base.showWarning(""Time for a Break"",
                             ""You've reached the limit for auto naming of new sketches\n"" +
                             ""for the day. How about going for a walk instead?"", null);
            breakTime = true;
          } else {
            Base.showWarning(""Sunshine"",
                             ""No really, time for some fresh air for you."", null);
          }
          return;
        }
        newbieName = prefix + suffix + ((char) ('a' + index));
        // Also sanitize the name since it might do strange things on
        // non-English systems that don't use this sort of date format.
        // http://code.google.com/p/processing/issues/detail?id=283
        newbieName = Sketch.sanitizeName(newbieName);
        newbieDir = new File(newbieParentDir, newbieName);
        index++;
        // Make sure it's not in the temp folder *and* it's not in the sketchbook
      } while (newbieDir.exists() || new File(sketchbookFolder, newbieName).exists());

      // Make the directory for the new sketch
      newbieDir.mkdirs();

      // Make an empty pde file
      File newbieFile =
        new File(newbieDir, newbieName + ""."" + nextMode.getDefaultExtension()); //$NON-NLS-1$
      if (!newbieFile.createNewFile()) {
        throw new IOException(newbieFile + "" already exists."");
      }

      // Create sketch properties file if it's not the default mode.
      if (!nextMode.equals(getDefaultMode())) {
        saveModeSettings(new File(newbieDir, ""sketch.properties""), nextMode);
      }

      String path = newbieFile.getAbsolutePath();
      /*Editor editor =*/ handleOpen(path, true);

    } catch (IOException e) {
      Base.showWarning(""That's new to me"",
                       ""A strange and unexplainable error occurred\n"" +
                       ""while trying to create a new sketch."", e);
    }
  }",False,False,"This method creates a new untitled document in a new sketch window. It generates a unique name for the document based on the current date and a prefix, creates a directory for the document, creates an empty file with the generated name and the default file extension, and opens the file in the sketch editor.","This code defines a method called ""handleNew"" that creates a new untitled document in a new sketch window. It generates a unique name for the document based on the current date and saves it in a specified directory. If the document creation fails, it displays a warning message."
45,"saveModeSettings(File,Mode)",save mode settings sketch props mode ,Method,changeMode(Mode) handleNew(),,"processing.app.Settings+Settings(File) processing.app.Settings+set(String,String) processing.app.Settings+set(String,String) processing.app.Mode+getTitle() processing.app.Mode+getTitle() processing.app.Settings+set(String,String) processing.app.Settings+set(String,String) processing.app.Mode+getIdentifier() processing.app.Mode+getIdentifier() processing.app.Settings+save() processing.app.Settings+save() java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage()",java.lang.System+err,385,10,2,,"private void saveModeSettings(final File sketchProps, final Mode mode) {
    try {
      final Settings settings = new Settings(sketchProps);
      settings.set(""mode"", mode.getTitle());
      settings.set(""mode.id"", mode.getIdentifier());
      settings.save();
    } catch (IOException e) {
      System.err.println(""While creating "" + sketchProps + "": "" + e.getMessage());
    }
  }",False,False,"This method saves the mode settings to a file. It creates a new Settings object using the provided file, sets the mode title and identifier, and saves the settings to the file. If an IOException occurs, it prints an error message.","This code defines a private method called ""saveModeSettings"" that takes a File object and a Mode object as parameters. It creates a new Settings object using the File, sets some properties of the Settings object using the Mode object, and then saves the settings to the file. If an IOException occurs during this process, an error message is printed to the console."
46,getDefaultMode(),get default mode ,Method,"Base(String[]) Base(String[]) handleNew() handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState)",,,processing.app.Base+coreModes,59,3,1,,"public Mode getDefaultMode() {
    return coreModes[0];
  }",False,False,"The function of the method is to return the first element of the array ""coreModes"", which represents the default mode.","The code defines a method named ""getDefaultMode"" that returns the first element of an array called ""coreModes"". This method is expected to return the default mode."
47,getNextMode(),get next mode used by think different so that it can have a sketchbook menu ,Method,,processing.app.platform.ThinkDifferent+actionPerformed(ActionEvent),,processing.app.Base+nextMode,123,4,1,"/** 
 * Used by ThinkDifferent so that it can have a Sketchbook menu. 
 */
","/** Used by ThinkDifferent so that it can have a Sketchbook menu. */
  public Mode getNextMode() {
    return nextMode;
  }",False,False,"This method serves to return the next mode for the ThinkDifferent application, allowing it to have a Sketchbook menu.","This code defines a public method called ""getNextMode()"" that returns the value of the variable ""nextMode"". It is used by the ThinkDifferent class to enable a Sketchbook menu."
48,handleOpenPrompt(),handle open prompt prompt for a sketch to open and open it in a new window ,Method,,processing.app.Mode+actionPerformed(ActionEvent) processing.app.platform.ThinkDifferent+actionPerformed(ActionEvent) processing.app.ui.Editor+actionPerformed(ActionEvent),"java.util.ArrayList+ArrayList() processing.app.Base+getModeList() processing.app.Base+getModeList() java.util.ArrayList+add(E) java.util.ArrayList+add(E) processing.app.Mode+getDefaultExtension() processing.app.Mode+getDefaultExtension() processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getBoolean(String) java.awt.FileDialog+FileDialog(Frame,String,int) java.awt.FileDialog+setFilenameFilter(FilenameFilter) java.awt.FileDialog+setFilenameFilter(FilenameFilter) +() +accept(File,String)",processing.app.Base+activeEditor java.awt.FileDialog+LOAD,2368,71,1,"/** 
 * Prompt for a sketch to open, and open it in a new window.
 */
","/**
   * Prompt for a sketch to open, and open it in a new window.
   */
  public void handleOpenPrompt() {
    final ArrayList<String> extensions = new ArrayList<String>();
    for (Mode mode : getModeList()) {
      extensions.add(mode.getDefaultExtension());
    }


    final String prompt = Language.text(""open"");

    // don't use native dialogs on Linux (or anyone else w/ override)
    if (Preferences.getBoolean(""chooser.files.native"")) {  //$NON-NLS-1$
      // use the front-most window frame for placing file dialog
      FileDialog openDialog =
        new FileDialog(activeEditor, prompt, FileDialog.LOAD);

      // Only show .pde files as eligible bachelors
      openDialog.setFilenameFilter(new FilenameFilter() {
        public boolean accept(File dir, String name) {
          // confirmed to be working properly [fry 110128]
          for (String ext : extensions) {
            if (name.toLowerCase().endsWith(""."" + ext)) { //$NON-NLS-1$
              return true;
            }
          }
          return false;
        }
      });

      openDialog.setVisible(true);

      String directory = openDialog.getDirectory();
      String filename = openDialog.getFile();
      if (filename != null) {
        File inputFile = new File(directory, filename);
        handleOpen(inputFile.getAbsolutePath());
      }

    } else {
      if (openChooser == null) {
        openChooser = new JFileChooser();
      }
      openChooser.setDialogTitle(prompt);

      openChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
        public boolean accept(File file) {
          // JFileChooser requires you to explicitly say yes to directories
          // as well (unlike the AWT chooser). Useful, but... different.
          // http://code.google.com/p/processing/issues/detail?id=1151
          if (file.isDirectory()) {
            return true;
          }
          for (String ext : extensions) {
            if (file.getName().toLowerCase().endsWith(""."" + ext)) { //$NON-NLS-1$
              return true;
            }
          }
          return false;
        }

        public String getDescription() {
          return ""Processing Sketch"";
        }
      });
      if (openChooser.showOpenDialog(activeEditor) == JFileChooser.APPROVE_OPTION) {
        handleOpen(openChooser.getSelectedFile().getAbsolutePath());
      }
    }
  }",False,False,"This method handles the prompt for opening a sketch. It allows the user to select a file to open, either using a native file dialog or a JFileChooser. It filters the files based on the default extensions for the available modes.","The `handleOpenPrompt()` method prompts the user to open a sketch file and opens it in a new window. It first checks if native file dialogs should be used, and if so, it displays a file dialog to select the sketch file. Otherwise, it uses a JFileChooser to select the file."
49,handleOpen(String),handle open path open a sketch from the path specified do not use for untitled sketches ,Method,Base(String[]) changeMode(Mode),processing.app.platform.ThinkDifferent+openFiles(OpenFilesEvent) processing.app.SingleInstance+run() processing.app.ui.ExamplesFrame+mouseClicked(MouseEvent) processing.app.ui.ExamplesFrame+keyTyped(KeyEvent) processing.app.ui.Recent+actionPerformed(ActionEvent) processing.app.ui.SketchbookFrame+mouseClicked(MouseEvent) processing.app.ui.SketchbookFrame+keyTyped(KeyEvent),"processing.app.Base+handleOpen(String,boolean) processing.app.Base+handleOpen(String,boolean)",,169,6,1,"/** 
 * Open a sketch from the path specified. Do not use for untitled sketches.
 */
","/**
   * Open a sketch from the path specified. Do not use for untitled sketches.
   */
  public Editor handleOpen(String path) {
    return handleOpen(path, false);
  }",False,False,The function of this method is to open a sketch from a specified path. It returns an Editor object and can be used for sketches that are not untitled.,"The given code is a method named ""handleOpen"" that takes a path as input and returns an Editor object. It is used to open a sketch from the specified path, and there is an overloaded version of this method that can be used for untitled sketches as well."
50,"handleOpen(String,boolean)",handle open path untitled open a sketch in a new window param path path to the pde file for the sketch in question return the editor object so that properties like untitled can be set by the caller ,Method,handleNew() handleOpen(String),,"processing.app.Base+handleOpen(String,boolean,EditorState) processing.app.Base+handleOpen(String,boolean,EditorState) processing.app.ui.EditorState+EditorState(List<Editor>)",processing.app.Base+editors,346,9,1,"/** 
 * Open a sketch in a new window.
 * @param path Path to the pde file for the sketch in question
 * @return the Editor object, so that properties (like 'untitled')can be set by the caller
 */
","/**
   * Open a sketch in a new window.
   * @param path Path to the pde file for the sketch in question
   * @return the Editor object, so that properties (like 'untitled')
   *         can be set by the caller
   */
  public Editor handleOpen(String path, boolean untitled) {
    return handleOpen(path, untitled, new EditorState(editors));
  }",False,False,The function serves to open a sketch in a new window. It takes the path to the pde file and a boolean value indicating whether the sketch is untitled. It returns an Editor object that can be used to set properties.,"The given code is a method called ""handleOpen"" that opens a sketch in a new window. It takes a path to the pde file and a boolean value indicating whether the sketch is untitled. It returns an Editor object, allowing the caller to set properties of the sketch."
51,"handleOpen(String,boolean,EditorState)",handle open path untitled state ,Method,"handleOpen(String,boolean)",,"java.io.File+File(String) java.io.File+exists() java.io.File+exists() processing.app.Sketch+getCode() processing.app.ui.Editor+getSketch() processing.app.ui.Editor+getSketch() processing.app.Sketch+getCode() java.io.File+equals(Object) processing.app.SketchCode+getFile() processing.app.SketchCode+getFile() java.io.File+equals(Object) java.awt.Window+toFront() java.awt.Window+toFront() processing.app.Base+handleRecent(Editor) processing.app.Base+handleRecent(Editor) processing.app.Sketch+isSanitaryName(String) processing.app.Sketch+isSanitaryName(String) java.io.File+getName() java.io.File+getName() processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) java.io.File+getName() java.io.File+getName() processing.app.Mode+canEdit(File) processing.app.Mode+canEdit(File) processing.app.Base+selectMode(File) processing.app.Base+selectMode(File) processing.app.Mode+createEditor(Base,String,EditorState) processing.app.Mode+createEditor(Base,String,EditorState) processing.app.Sketch+setUntitled(boolean) processing.app.ui.Editor+getSketch() processing.app.ui.Editor+getSketch() processing.app.Sketch+setUntitled(boolean) java.util.List+add(E) java.util.List+add(E) processing.app.Base+handleRecent(Editor) processing.app.Base+handleRecent(Editor) java.awt.Window+setVisible(boolean) java.awt.Window+setVisible(boolean) java.lang.String+equals(Object) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage() java.lang.String+equals(Object) processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage() processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) processing.app.Mode+getTitle() processing.app.Mode+getTitle() java.lang.Object+equals(Object) java.lang.Object+equals(Object) processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode() processing.app.Base+showBadnessTrace(String,String,Throwable,boolean) processing.app.Base+showBadnessTrace(String,String,Throwable,boolean) processing.app.Base+showBadnessTrace(String,String,Throwable,boolean) processing.app.Base+showBadnessTrace(String,String,Throwable,boolean) processing.app.Mode+getTitle() processing.app.Mode+getTitle() processing.app.Base+showBadnessTrace(String,String,Throwable,boolean) processing.app.Base+showBadnessTrace(String,String,Throwable,boolean) processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode() processing.app.Base+getDefaultMode()",processing.app.Base+editors processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+editors processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode processing.app.Base+nextMode,4078,101,4,,"protected Editor handleOpen(String path, boolean untitled,
                              EditorState state) {
    try {
      // System.err.println(""entering handleOpen "" + path);

      final File file = new File(path);
      if (!file.exists()) {
        return null;
      }

      // Cycle through open windows to make sure that it's not already open.
      for (Editor editor : editors) {
        // User may have double-clicked any PDE in the sketch folder,
        // so we have to check each open tab (not just the main one).
        // https://github.com/processing/processing/issues/2506
        for (SketchCode tab : editor.getSketch().getCode()) {
          if (tab.getFile().equals(file)) {
            editor.toFront();
            // move back to the top of the recent list
            handleRecent(editor);
            return editor;
          }
        }
      }

      if (!Sketch.isSanitaryName(file.getName())) {
        Base.showWarning(""You're tricky, but not tricky enough"",
                         file.getName() + "" is not a valid name for a sketch.\n"" +
                         ""Better to stick to ASCII, no spaces, and make sure\n"" +
                         ""it doesn't start with a number."", null);
        return null;
      }

      if (!nextMode.canEdit(file)) {
        final Mode mode = selectMode(file);
        if (mode == null) {
          return null;
        }
        nextMode = mode;
      }

      try {
        Editor editor = nextMode.createEditor(this, path, state);

        // opened successfully, let's go to work
        editor.getSketch().setUntitled(untitled);
        editors.add(editor);
        handleRecent(editor);

        // now that we're ready, show the window
        // (don't do earlier, cuz we might move it based on a window being closed)
        editor.setVisible(true);

        return editor;

      } catch (EditorException ee) {
        if (!ee.getMessage().equals("""")) {  // blank if the user canceled
          Base.showWarning(""Error opening sketch"", ee.getMessage(), ee);
        }
      } catch (NoSuchMethodError nsme) {
        Base.showWarning(""Mode out of date"",
                         nextMode.getTitle() + "" is not compatible with this version of Processing.\n"" +
                         ""Try updating the Mode or contact its author for a new version."", nsme);
      } catch (Throwable t) {
        if (nextMode.equals(getDefaultMode())) {
          showBadnessTrace(""Serious Problem"",
                           ""An unexpected, unknown, and unrecoverable error occurred\n"" +
                           ""while opening a new editor window. Please report this."", t, true);
        } else {
          showBadnessTrace(""Mode Problems"",
                           ""A nasty error occurred while trying to use "" + nextMode.getTitle() + "".\n"" +
                           ""It may not be compatible with this version of Processing.\n"" +
                           ""Try updating the Mode or contact its author for a new version."", t, false);
        }
      }
      /*
        if (editors.isEmpty()) {
          // if the bad mode is the default mode, don't go into an infinite loop
          // trying to recreate a window with the default mode.
          Mode defaultMode = getDefaultMode();
          if (nextMode == defaultMode) {
            Base.showError(""Editor Problems"",
                           ""An error occurred while trying to change modes.\n"" +
                           ""We'll have to quit for now because it's an\n"" +
                           ""unfortunate bit of indigestion with the default Mode."",
                           null);
          } else {
            editor = defaultMode.createEditor(this, path, state);
          }
        }
      */

    } catch (Throwable t) {
      showBadnessTrace(""Terrible News"",
                       ""A serious error occurred while "" +
                       ""trying to create a new editor window."", t,
                       nextMode == getDefaultMode());  // quit if default
      nextMode = getDefaultMode();
    }
    return null;
  }",False,False,"This method handles the opening of a file in the editor. It checks if the file exists and if it is already open in another tab. If the file is valid and can be edited, it creates a new editor for the file and adds it to the list of editors. Finally, it displays the editor window and returns the editor object.","The `handleOpen` method is responsible for opening a file in an editor. It checks if the file exists and if it is already open in any editor. If the file is valid and not already open, it creates a new editor for the file and adds it to the list of editors."
52,ModeInfo,mode info ,MemberClass,,,"processing.app.Base.ModeInfo+ModeInfo(String,String)",processing.app.Base.ModeInfo+title processing.app.Base.ModeInfo+id processing.app.Base.ModeInfo+id processing.app.Base.ModeInfo+title,194,9,10,,"private static class ModeInfo {
    public final String title;
    public final String id;

    public ModeInfo(String id, String title) {
      this.id = id;
      this.title = title;
    }
  }",False,False,,
53,modeInfoFor(File),mode info for sketch ,Method,selectMode(File),,"java.io.File+getParentFile() java.io.File+getParentFile() java.io.File+File(File,String) java.io.File+exists() java.io.File+exists() processing.app.Settings+Settings(File) processing.app.Settings+get(String) processing.app.Settings+get(String) processing.app.Settings+get(String) processing.app.Settings+get(String) processing.app.Base.ModeInfo+ModeInfo(String,String) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage()",java.lang.System+err,671,20,10,,"private static ModeInfo modeInfoFor(final File sketch) {
    final File sketchFolder = sketch.getParentFile();
    final File sketchProps = new File(sketchFolder, ""sketch.properties"");
    if (!sketchProps.exists()) {
      return null;
    }
    try {
      final Settings settings = new Settings(sketchProps);
      final String title = settings.get(""mode"");
      final String id = settings.get(""mode.id"");
      if (title == null || id == null) {
        return null;
      }
      return new ModeInfo(id, title);
    } catch (IOException e) {
      System.err.println(""While trying to read "" + sketchProps + "": ""
        + e.getMessage());
    }
    return null;
  }",False,False,"This method returns a ModeInfo object based on the properties of a given sketch file. It checks if the sketch.properties file exists, reads the settings from it, and creates a new ModeInfo object with the extracted title and id. If any error occurs during the process, it returns null.","This code defines a private static method called `modeInfoFor` that takes a `File` object as input. It checks if a file named ""sketch.properties"" exists in the parent directory of the input file. If it exists, it reads the properties from the file, extracts the ""mode"" and ""mode.id"" values, and returns a new `ModeInfo` object with these values. If any error occurs during the process, it prints an error message and returns null."
54,"promptForMode(File,ModeInfo)",prompt for mode sketch preferred mode ,Method,selectMode(File),,"java.lang.String+substring(int) java.io.File+getName() java.io.File+getName() java.lang.String+substring(int) java.lang.String+lastIndexOf(int) java.io.File+getName() java.io.File+getName() java.lang.String+lastIndexOf(int) java.util.ArrayList+ArrayList() processing.app.Base+getModeList() processing.app.Base+getModeList() processing.app.Mode+canEdit(File) processing.app.Mode+canEdit(File) java.util.List+add(E) java.util.List+add(E) java.util.List+size() java.util.List+size() java.lang.String+equals(Object) processing.app.Mode+getIdentifier() java.util.List+get(int) java.util.List+get(int) processing.app.Mode+getIdentifier() java.lang.String+equals(Object) processing.app.Base+getDefaultModeIdentifier() processing.app.Base+getDefaultModeIdentifier() java.util.List+get(int) java.util.List+get(int) java.util.List+size() java.util.List+size() processing.app.Base+showWarning(String,String) processing.app.Base+showWarning(String,String) processing.app.Base+showWarning(String,String) processing.app.Base+showWarning(String,String) java.util.List+toArray(T[]) java.util.List+toArray(T[]) java.util.List+size() java.util.List+size() processing.app.Mode+getTitle() processing.app.Mode+getTitle() javax.swing.JOptionPane+showInputDialog(Component,Object,String,int,Icon,Object[],Object) javax.swing.JOptionPane+showInputDialog(Component,Object,String,int,Icon,Object[],Object)",processing.app.Base.ModeInfo+title processing.app.Base+nextMode processing.app.Base.ModeInfo+title processing.app.Base.ModeInfo+title javax.swing.JOptionPane+QUESTION_MESSAGE,1936,40,2,,"private Mode promptForMode(final File sketch, final ModeInfo preferredMode) {
    final String extension =
      sketch.getName().substring(sketch.getName().lastIndexOf('.') + 1);
    final List<Mode> possibleModes = new ArrayList<Mode>();
    for (final Mode mode : getModeList()) {
      if (mode.canEdit(sketch)) {
        possibleModes.add(mode);
      }
    }
    if (possibleModes.size() == 1 &&
        possibleModes.get(0).getIdentifier().equals(getDefaultModeIdentifier())) {
      // If default mode can open it, then do so without prompting.
      return possibleModes.get(0);
    }
    if (possibleModes.size() == 0) {
      if (preferredMode == null) {
        Base.showWarning(""Modeless Dialog"",
                         ""I don't know how to open a sketch with the \""""
                         + extension
                         + ""\""\nfile extension. You'll have to install a different""
                         + ""\nProcessing mode for that."");
      } else {
        Base.showWarning(""Modeless Dialog"", ""You'll have to install ""
          + preferredMode.title + "" Mode "" + ""\nin order to open that sketch."");
      }
      return null;
    }
    final Mode[] modes = possibleModes.toArray(new Mode[possibleModes.size()]);
    final String message = preferredMode == null ?
      (nextMode.getTitle() + "" Mode can't open ."" + extension + "" files, "" +
       ""but you have one or more modes\ninstalled that can. "" +
       ""Would you like to try one?"") :
      (""That's a "" + preferredMode.title + "" Mode sketch, "" +
       ""but you don't have "" + preferredMode.title + "" installed.\n"" +
       ""Would you like to try a different mode for opening a "" +
       ""."" + extension + "" sketch?"");
    return (Mode) JOptionPane.showInputDialog(null, message, ""Choose Wisely"",
                                              JOptionPane.QUESTION_MESSAGE,
                                              null, modes, modes[0]);
  }",False,False,"This method prompts the user to select a mode for opening a sketch file based on its file extension. It checks if there is a default mode that can open the file without prompting, and if not, it displays a dialog asking the user to choose a mode from the available options. The selected mode is then returned.","This code is a method that prompts the user to select a mode for opening a sketch file based on its extension. It checks if the default mode can open the file, and if not, it displays a dialog asking the user to install a different mode or try a different mode for opening the file. The selected mode is returned."
55,selectMode(File),select mode sketch ,Method,"handleOpen(String,boolean,EditorState)",,"processing.app.Base+modeInfoFor(File) processing.app.Base+modeInfoFor(File) processing.app.Base+findMode(String) processing.app.Base+findMode(String) processing.app.Base+promptForMode(File,ModeInfo) processing.app.Base+promptForMode(File,ModeInfo)",processing.app.Base.ModeInfo+id,290,8,2,,"private Mode selectMode(final File sketch) {
    final ModeInfo modeInfo = modeInfoFor(sketch);
    final Mode specifiedMode = modeInfo == null ? null : findMode(modeInfo.id);
    if (specifiedMode != null) {
      return specifiedMode;
    }
    return promptForMode(sketch, modeInfo);
  }",False,False,"This method selects a mode for a given sketch file. It first checks if a specified mode exists based on the modeInfo. If it does, it returns that mode. If not, it prompts the user to select a mode for the sketch file.","This code defines a private method called ""selectMode"" that takes a File object as a parameter. It first checks if the modeInfo for the given sketch file is available, and if so, it tries to find the corresponding mode. If the specified mode is found, it is returned. Otherwise, it prompts the user to select a mode for the sketch and returns the selected mode."
56,findMode(String),find mode id ,Method,selectMode(File),,processing.app.Base+getModeList() processing.app.Base+getModeList() java.lang.String+equals(Object) processing.app.Mode+getIdentifier() processing.app.Mode+getIdentifier() java.lang.String+equals(Object),,175,8,4,,"protected Mode findMode(String id) {
    for (Mode mode : getModeList()) {
      if (mode.getIdentifier().equals(id)) {
        return mode;
      }
    }
    return null;
  }",False,False,"This method finds and returns a Mode object from a list of modes based on a given identifier. If no mode is found, it returns null.","The code defines a protected method called ""findMode"" that takes a string parameter ""id"". It iterates through a list of ""Mode"" objects and returns the first mode object whose identifier matches the given id. If no match is found, it returns null."
57,"handleClose(Editor,boolean)",handle close editor mode switch close a sketch as specified by its editor window param editor editor object of the sketch to be closed param mode switch whether this close is being done in the context of amode switch return true if succeeded in closing false if canceled ,Method,changeMode(Mode) changeMode(Mode),processing.app.Sketch+handleDeleteCode() processing.app.ui.Editor+windowClosing(WindowEvent) processing.app.ui.Editor+actionPerformed(ActionEvent),"processing.app.ui.Editor+checkModified() processing.app.ui.Editor+checkModified() processing.app.ui.Editor+internalCloseRunner() processing.app.ui.Editor+internalCloseRunner() java.util.List+size() java.util.List+size() processing.app.Base+isMacOS() processing.app.Base+isMacOS() processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) javax.swing.JOptionPane+showOptionDialog(Component,Object,String,int,int,Icon,Object[],Object) javax.swing.JOptionPane+showOptionDialog(Component,Object,String,int,int,Icon,Object[],Object) processing.app.Preferences+unset(String) processing.app.Preferences+unset(String) processing.app.Preferences+unset(String) processing.app.Preferences+unset(String) java.util.List+remove(Object) java.util.List+remove(Object) processing.app.Preferences+save() processing.app.Preferences+save() java.awt.Window+setVisible(boolean) java.awt.Window+setVisible(boolean) java.awt.Window+dispose() java.awt.Window+dispose() java.util.List+remove(Object) java.util.List+remove(Object) java.lang.System+exit(int) java.lang.System+exit(int) java.awt.Window+setVisible(boolean) java.awt.Window+setVisible(boolean) java.awt.Window+dispose() java.awt.Window+dispose() javax.swing.JMenu+insert(JMenuItem,int) javax.swing.JMenu+insert(JMenuItem,int) processing.app.Base+getRecentMenu() processing.app.Base+getRecentMenu() java.util.List+remove(Object) java.util.List+remove(Object) java.awt.Window+setVisible(boolean) java.awt.Window+setVisible(boolean) java.awt.Window+dispose() java.awt.Window+dispose() java.util.List+remove(Object) java.util.List+remove(Object)",processing.app.Base+editors processing.app.Base+defaultFileMenu javax.swing.JOptionPane+YES_NO_OPTION javax.swing.JOptionPane+QUESTION_MESSAGE javax.swing.JOptionPane+NO_OPTION javax.swing.JOptionPane+CLOSED_OPTION processing.app.Base+editors processing.app.Base+defaultFileMenu processing.app.Base+activeEditor processing.app.Base+editors processing.app.Base+defaultFileMenu processing.app.Base+activeEditor processing.app.Base+editors processing.app.Base+editors,3224,91,1,"/** 
 * Close a sketch as specified by its editor window.
 * @param editor Editor object of the sketch to be closed.
 * @param modeSwitch Whether this close is being done in the context of amode switch.
 * @return true if succeeded in closing, false if canceled.
 */
","/**
   * Close a sketch as specified by its editor window.
   * @param editor Editor object of the sketch to be closed.
   * @param modeSwitch Whether this close is being done in the context of a
   *      mode switch.
   * @return true if succeeded in closing, false if canceled.
   */
  public boolean handleClose(Editor editor, boolean modeSwitch) {
    // Check if modified
//    boolean immediate = editors.size() == 1;
    if (!editor.checkModified()) {
      return false;
    }

    // Close the running window, avoid window boogers with multiple sketches
    editor.internalCloseRunner();

//    System.out.println(""editors size is "" + editors.size());
    if (editors.size() == 1) {
      // For 0158, when closing the last window /and/ it was already an
      // untitled sketch, just give up and let the user quit.
//      if (Preferences.getBoolean(""sketchbook.closing_last_window_quits"") ||
//          (editor.untitled && !editor.getSketch().isModified())) {
      if (Base.isMacOS()) {
        // If the central menubar isn't supported on this OS X JVM,
        // we have to do the old behavior. Yuck!
        if (defaultFileMenu == null) {
          Object[] options = { Language.text(""prompt.ok""), Language.text(""prompt.cancel"") };
          String prompt =
            ""<html> "" +
            ""<head> <style type=\""text/css\"">""+
            ""b { font: 13pt \""Lucida Grande\"" }""+
            ""p { font: 11pt \""Lucida Grande\""; margin-top: 8px; width: 300px }""+
            ""</style> </head>"" +
            ""<b>Are you sure you want to Quit?</b>"" +
            ""<p>Closing the last open sketch will quit Processing."";

          int result = JOptionPane.showOptionDialog(editor,
            prompt,
            ""Quit"",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]);
          if (result == JOptionPane.NO_OPTION ||
              result == JOptionPane.CLOSED_OPTION) {
            return false;
          }
        }
      }

      Preferences.unset(""server.port""); //$NON-NLS-1$
      Preferences.unset(""server.key""); //$NON-NLS-1$

      // This will store the sketch count as zero
      editors.remove(editor);
//      System.out.println(""editors size now "" + editors.size());
//      storeSketches();

      // Save out the current prefs state
      Preferences.save();

      if (defaultFileMenu == null) {
        if (modeSwitch) {
          // need to close this editor, ever so temporarily
          editor.setVisible(false);
          editor.dispose();
          activeEditor = null;
          editors.remove(editor);
        } else {
          // Since this wasn't an actual Quit event, call System.exit()
          System.exit(0);
        }
      } else {  // on OS X, update the default file menu
        editor.setVisible(false);
        editor.dispose();
        defaultFileMenu.insert(getRecentMenu(), 2);
        activeEditor = null;
        editors.remove(editor);
      }

    } else {
      // More than one editor window open,
      // proceed with closing the current window.
      editor.setVisible(false);
      editor.dispose();
      editors.remove(editor);
    }
    return true;
  }",False,False,"This method is used to close a sketch in the editor window. It takes an Editor object and a boolean modeSwitch as parameters. It checks if the sketch has been modified and returns false if it hasn't. It then closes the running window and removes the editor from the list of editors. If there is only one editor window open, it performs additional actions such as saving preferences and updating the default file menu. Finally, it returns true.","This code defines a method called ""handleClose"" that is responsible for closing a sketch in the editor window. It checks if the sketch has been modified, closes the running window, and handles different scenarios based on the number of open editor windows. The method returns true if the sketch is successfully closed and false if the operation is canceled."
58,handleQuit(),handle quit handler for file rarr quit return false if canceled true otherwise ,Method,,"processing.app.platform.ThinkDifferent+handleQuitRequestWith(QuitEvent,QuitResponse) processing.app.ui.Editor+actionPerformed(ActionEvent)",processing.app.Base+handleQuitEach() processing.app.Base+handleQuitEach() processing.app.ui.Editor+internalCloseRunner() processing.app.ui.Editor+internalCloseRunner() processing.app.Preferences+save() processing.app.Preferences+save() processing.app.Base+isMacOS() processing.app.Base+isMacOS() java.lang.System+exit(int) java.lang.System+exit(int),processing.app.Base+editors,743,26,1,"/** 
 * Handler for File &rarr; Quit.
 * @return false if canceled, true otherwise.
 */
","/**
   * Handler for File &rarr; Quit.
   * @return false if canceled, true otherwise.
   */
  public boolean handleQuit() {
    // If quit is canceled, this will be replaced anyway
    // by a later handleQuit() that is not canceled.
//    storeSketches();

    if (handleQuitEach()) {
      // make sure running sketches close before quitting
      for (Editor editor : editors) {
        editor.internalCloseRunner();
      }
      // Save out the current prefs state
      Preferences.save();

      if (!Base.isMacOS()) {
        // If this was fired from the menu or an AppleEvent (the Finder),
        // then Mac OS X will send the terminate signal itself.
        System.exit(0);
      }
      return true;
    }
    return false;
  }",False,False,"The function serves as a handler for the ""File -> Quit"" action. It checks if quitting is allowed, closes any running sketches, saves preferences, and exits the program if not running on macOS. It returns true if quitting is allowed, and false otherwise.","The `handleQuit()` method is responsible for handling the action of quitting the program. It first checks if the quitting process is canceled, and if not, it closes any running sketches, saves the current preferences state, and exits the program if it is not running on macOS."
59,handleQuitEach(),handle quit each attempt to close each open sketch in preparation for quitting return false if canceled along the way ,Method,handleQuit(),,processing.app.ui.Editor+checkModified() processing.app.ui.Editor+checkModified(),processing.app.Base+editors,529,21,4,"/** 
 * Attempt to close each open sketch in preparation for quitting.
 * @return false if canceled along the way
 */
","/**
   * Attempt to close each open sketch in preparation for quitting.
   * @return false if canceled along the way
   */
  protected boolean handleQuitEach() {
//    int index = 0;
    for (Editor editor : editors) {
//      if (editor.checkModified()) {
//        // Update to the new/final sketch path for this fella
//        storeSketchPath(editor, index);
//        index++;
//
//      } else {
//        return false;
//      }
      if (!editor.checkModified()) {
        return false;
      }
    }
    return true;
  }",False,False,"The function of this method is to check if each open sketch has been modified, and if not, return true. If any sketch has been modified, it returns false.","The `handleQuitEach()` method attempts to close each open sketch in preparation for quitting. It iterates through a list of editors and checks if each editor has been modified. If any editor has been modified, the method returns false, indicating that the quitting process should be canceled. Otherwise, it returns true, indicating that all sketches have been successfully closed."
60,rebuildSketchbookMenusAsync(),rebuild sketchbook menus async asynchronous version of menu rebuild to be used on save and rename to prevent the interface from locking up until the menus are done ,Method,,,java.awt.EventQueue+invokeLater(Runnable) java.awt.EventQueue+invokeLater(Runnable) +() +run(),,408,13,4,"/** 
 * Asynchronous version of menu rebuild to be used on save and rename to prevent the interface from locking up until the menus are done.
 */
","/**
   * Asynchronous version of menu rebuild to be used on save and rename
   * to prevent the interface from locking up until the menus are done.
   */
  protected void rebuildSketchbookMenusAsync() {
    //System.out.println(""async enter"");
    //new Exception().printStackTrace();
    EventQueue.invokeLater(new Runnable() {
      public void run() {
        rebuildSketchbookMenus();
      }
    });
  }",False,False,"This method serves to rebuild the sketchbook menus asynchronously, preventing the interface from locking up until the menus are done.","The code defines a method called ""rebuildSketchbookMenusAsync"" which is an asynchronous version of a menu rebuild. It uses the EventQueue to invoke the ""rebuildSketchbookMenus"" method, preventing the interface from freezing while the menus are being rebuilt."
61,thinkDifferentExamples(),think different examples ,Method,,processing.app.platform.ThinkDifferent+actionPerformed(ActionEvent),processing.app.Mode+showExamplesFrame() processing.app.Mode+showExamplesFrame(),processing.app.Base+nextMode,76,3,1,,"public void thinkDifferentExamples() {
    nextMode.showExamplesFrame();
  }",False,False,This method serves to display the examples frame for the next mode.,"The code defines a method called ""thinkDifferentExamples"" which calls the ""showExamplesFrame"" method of the ""nextMode"" object. This method is responsible for displaying a frame containing examples related to a different mode of operation."
62,rebuildSketchbookMenus(),rebuild sketchbook menus synchronous version of rebuild used when the sketchbook folder has changed so that the libraries are properly re scanned before those menus and the examples window are rebuilt ,Method,setSketchbookFolder(File),"processing.app.Sketch+updateInternal(String,File)",processing.app.Base+getModeList() processing.app.Base+getModeList() processing.app.Mode+rebuildImportMenu() processing.app.Mode+rebuildImportMenu() processing.app.Mode+rebuildToolbarMenu() processing.app.Mode+rebuildToolbarMenu() processing.app.Mode+rebuildExamplesFrame() processing.app.Mode+rebuildExamplesFrame() processing.app.Mode+rebuildSketchbookFrame() processing.app.Mode+rebuildSketchbookFrame(),,572,15,4,"/** 
 * Synchronous version of rebuild, used when the sketchbook folder has changed, so that the libraries are properly re-scanned before those menus (and the examples window) are rebuilt.
 */
","/**
   * Synchronous version of rebuild, used when the sketchbook folder has
   * changed, so that the libraries are properly re-scanned before those menus
   * (and the examples window) are rebuilt.
   */
  protected void rebuildSketchbookMenus() {
    // rebuildSketchbookMenu(); // no need to rebuild sketchbook post 3.0
    for (Mode mode : getModeList()) {
      //mode.rebuildLibraryList();
      mode.rebuildImportMenu();  // calls rebuildLibraryList
      mode.rebuildToolbarMenu();
      mode.rebuildExamplesFrame();
      mode.rebuildSketchbookFrame();
    }
  }",False,False,"The function of the method ""rebuildSketchbookMenus"" is to rebuild various menus and frames related to the sketchbook folder, including the import menu, toolbar menu, examples frame, and sketchbook frame.","The `rebuildSketchbookMenus()` method is used to rebuild various menus and frames in the sketchbook when the sketchbook folder has changed. It iterates over the list of modes and calls methods to rebuild the import menu, toolbar menu, examples frame, and sketchbook frame for each mode."
63,rebuildSketchbookMenu(),rebuild sketchbook menu ,Method,,,javax.swing.JMenu+removeAll() javax.swing.JMenu+removeAll() processing.app.Base+populateSketchbookMenu(JMenu) processing.app.Base+populateSketchbookMenu(JMenu),processing.app.Base+sketchbookMenu processing.app.Base+sketchbookMenu,619,17,4,,"protected void rebuildSketchbookMenu() {
//      System.err.println(""sketchbook: "" + sketchbookFolder);
    sketchbookMenu.removeAll();
    populateSketchbookMenu(sketchbookMenu);
//    boolean found = false;
//    try {
//      found = addSketches(sketchbookMenu, sketchbookFolder, false);
//    } catch (IOException e) {
//      Base.showWarning(""Sketchbook Menu Error"",
//                       ""An error occurred while trying to list the sketchbook."", e);
//    }
//    if (!found) {
//      JMenuItem empty = new JMenuItem(""(empty)"");
//      empty.setEnabled(false);
//      sketchbookMenu.add(empty);
//    }
  }",False,False,"The function of this method is to rebuild the sketchbook menu by removing all existing items, populating it with new items, and adding an ""(empty)"" item if no sketches are found.","The `rebuildSketchbookMenu` method is responsible for clearing and repopulating a menu with items related to a sketchbook. It removes all existing items from the menu, calls `populateSketchbookMenu` to add new items, and handles any potential errors that may occur during the process."
64,populateSketchbookMenu(JMenu),populate sketchbook menu menu ,Method,rebuildSketchbookMenu(),,"processing.app.Base+addSketches(JMenu,File,boolean) processing.app.Base+addSketches(JMenu,File,boolean) processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) javax.swing.JMenuItem+JMenuItem(String) processing.app.Language+text(String) processing.app.Language+text(String) javax.swing.JMenuItem+setEnabled(boolean) javax.swing.JMenuItem+setEnabled(boolean) javax.swing.JMenu+add(JMenuItem) javax.swing.JMenu+add(JMenuItem)",processing.app.Base+sketchbookFolder,478,14,1,,"public void populateSketchbookMenu(JMenu menu) {
    boolean found = false;
    try {
      found = addSketches(menu, sketchbookFolder, false);
    } catch (IOException e) {
      Base.showWarning(""Sketchbook Menu Error"",
                       ""An error occurred while trying to list the sketchbook."", e);
    }
    if (!found) {
      JMenuItem empty = new JMenuItem(Language.text(""menu.file.sketchbook.empty""));
      empty.setEnabled(false);
      menu.add(empty);
    }
  }",False,False,"This method populates a given menu with sketches. It tries to add sketches to the menu from a sketchbook folder. If an error occurs, it displays a warning. If no sketches are found, it adds a disabled menu item indicating an empty sketchbook.","The `populateSketchbookMenu` method takes a `JMenu` object as a parameter and populates it with sketches. It tries to add sketches to the menu by calling the `addSketches` method, and if an error occurs, it displays a warning message. If no sketches are found, it adds a disabled menu item indicating an empty sketchbook."
65,getRecentMenu(),get recent menu ,Method,"handleClose(Editor,boolean)",processing.app.ui.Editor+windowActivated(WindowEvent) processing.app.ui.Editor+windowDeactivated(WindowEvent),processing.app.ui.Recent+getMenu() processing.app.ui.Recent+getMenu(),processing.app.Base+recent,63,3,1,,"public JMenu getRecentMenu() {
    return recent.getMenu();
  }",False,False,"The function of the given method is to return a JMenu object, which is obtained by calling the getMenu() method on the recent object.","The code defines a method named ""getRecentMenu"" that returns a JMenu object. This method retrieves the menu from a variable named ""recent"" and returns it."
66,getToolbarRecentMenu(),get toolbar recent menu ,Method,,processing.app.Mode+insertToolbarRecentMenu() processing.app.Mode+removeToolbarRecentMenu(),processing.app.ui.Recent+getToolbarMenu() processing.app.ui.Recent+getToolbarMenu(),processing.app.Base+recent,77,3,1,,"public JMenu getToolbarRecentMenu() {
    return recent.getToolbarMenu();
  }",False,False,This method returns the toolbar menu of the recent items.,"The code defines a method named ""getToolbarRecentMenu"" that returns a JMenu object. This method retrieves the toolbar menu from an object named ""recent"" and returns it."
67,handleRecent(Editor),handle recent editor ,Method,"handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState)",processing.app.ui.Editor+addRecent(),processing.app.ui.Recent+handle(Editor) processing.app.ui.Recent+handle(Editor),processing.app.Base+recent,72,3,1,,"public void handleRecent(Editor editor) {
    recent.handle(editor);
  }",False,False,The function of the given method is to handle a recent action performed by an editor. It takes an Editor object as a parameter and calls the handle method on the recent object.,"The code contains a method called ""handleRecent"" that takes an ""Editor"" object as a parameter. This method calls the ""handle"" method of a ""recent"" object, passing the ""Editor"" object as an argument."
68,"handleRecentRename(Editor,String)",handle recent rename editor old path ,Method,,"processing.app.Sketch+updateInternal(String,File)","processing.app.ui.Recent+handleRename(Editor,String) processing.app.ui.Recent+handleRename(Editor,String)",processing.app.Base+recent,106,3,1,,"public void handleRecentRename(Editor editor,String oldPath){
    recent.handleRename(editor,oldPath);
  }",False,False,"This method serves to handle a recent rename by calling the handleRename method on the recent object, passing in the editor and oldPath as parameters.","The code defines a method called ""handleRecentRename"" that takes an ""Editor"" object and a ""String"" representing the old path as parameters. This method calls the ""handleRename"" method of the ""recent"" object, passing the editor and old path as arguments."
69,removeRecent(Editor),remove recent editor called before a sketch is renamed so that its old name is no longer in the menu ,Method,,processing.app.ui.Editor+removeRecent(),processing.app.ui.Recent+remove(Editor) processing.app.ui.Recent+remove(Editor),processing.app.Base+recent,175,7,1,"/** 
 * Called before a sketch is renamed so that its old name is no longer in the menu.
 */
","/**
   * Called before a sketch is renamed so that its old name is
   * no longer in the menu.
   */
  public void removeRecent(Editor editor) {
    recent.remove(editor);
  }",False,False,This method removes the given editor from the list of recent sketches.,"The given code snippet represents a method called ""removeRecent"" which is used to remove a sketch's old name from the menu before it is renamed. It takes an ""Editor"" object as a parameter and removes it from the ""recent"" list."
70,"addSketches(JMenu,File,boolean)",add sketches menu folder replace existing scan a folder recursively and add any sketches found to the menu specified set the open replaces parameter to true when opening the sketch should replace the sketch in the current window or false when the sketch should open in a new window ,Method,populateSketchbookMenu(JMenu),,"java.io.File+isDirectory() java.io.File+isDirectory() java.lang.String+equals(Object) java.io.File+getName() java.io.File+getName() java.lang.String+equals(Object) java.io.File+list() java.io.File+list() java.util.Arrays+sort(T[],Comparator) java.util.Arrays+sort(T[],Comparator) +() +actionPerformed(ActionEvent)",java.lang.String+CASE_INSENSITIVE_ORDER,2896,85,4,"/** 
 * Scan a folder recursively, and add any sketches found to the menu specified. Set the openReplaces parameter to true when opening the sketch should replace the sketch in the current window, or false when the sketch should open in a new window.
 */
","/**
   * Scan a folder recursively, and add any sketches found to the menu
   * specified. Set the openReplaces parameter to true when opening the sketch
   * should replace the sketch in the current window, or false when the
   * sketch should open in a new window.
   */
  protected boolean addSketches(JMenu menu, File folder,
                                final boolean replaceExisting) throws IOException {
    // skip .DS_Store files, etc (this shouldn't actually be necessary)
    if (!folder.isDirectory()) {
      return false;
    }

    if (folder.getName().equals(""libraries"")) {
      return false;  // let's not go there
    }

    String[] list = folder.list();
    // If a bad folder or unreadable or whatever, this will come back null
    if (list == null) {
      return false;
    }

    // Alphabetize the list, since it's not always alpha order
    Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);

    ActionListener listener = new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          String path = e.getActionCommand();
          if (new File(path).exists()) {
            boolean replace = replaceExisting;
            if ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0) {
              replace = !replace;
            }
//            if (replace) {
//              handleOpenReplace(path);
//            } else {
            handleOpen(path);
//            }
          } else {
            showWarning(""Sketch Disappeared"",
                        ""The selected sketch no longer exists.\n"" +
                        ""You may need to restart Processing to update\n"" +
                        ""the sketchbook menu."", null);
          }
        }
      };
    // offers no speed improvement
    //menu.addActionListener(listener);

    boolean found = false;

//    for (int i = 0; i < list.length; i++) {
//      if ((list[i].charAt(0) == '.') ||
//          list[i].equals(""CVS"")) continue;
    for (String name : list) {
      if (name.charAt(0) == '.') {
        continue;
      }

      File subfolder = new File(folder, name);
      if (subfolder.isDirectory()) {
        File entry = checkSketchFolder(subfolder, name);
        if (entry != null) {

          JMenuItem item = new JMenuItem(name);
          item.addActionListener(listener);
          item.setActionCommand(entry.getAbsolutePath());
          menu.add(item);
          found = true;

        } else {
          // not a sketch folder, but maybe a subfolder containing sketches
          JMenu submenu = new JMenu(name);
          // needs to be separate var otherwise would set ifound to false
          boolean anything = addSketches(submenu, subfolder, replaceExisting);
          if (anything && !name.equals(""old"")) { //Don't add old contributions
            menu.add(submenu);
            found = true;
          }
        }
      }
    }
    return found;
  }",False,False,"The function of this method is to scan a folder recursively, and add any sketches found to a specified menu. It also allows for the option to replace existing sketches in the current window or open the sketch in a new window.",This code scans a folder recursively and adds any sketches found to a menu. It allows the user to specify whether the sketch should replace the existing one or open in a new window. The code also handles cases where the sketch folder is not valid or readable.
71,"addSketches(DefaultMutableTreeNode,File,boolean)",add sketches node folder examples ,Method,"addSketches(DefaultMutableTreeNode,File,boolean)",processing.app.Mode+buildSketchbookTree() processing.app.ui.ExamplesFrame+buildTree() processing.app.ui.ExamplesFrame+buildTree() processing.app.ui.ExamplesFrame+buildTree() processing.app.ui.ExamplesFrame+buildContribTree(),"java.io.File+isDirectory() java.io.File+isDirectory() java.io.File+getName() java.io.File+getName() java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.io.File+list() java.io.File+list() java.util.Arrays+sort(T[],Comparator) java.util.Arrays+sort(T[],Comparator) java.lang.String+charAt(int) java.lang.String+charAt(int) java.io.File+File(File,String) java.io.File+isDirectory() java.io.File+isDirectory() processing.app.Base+checkSketchFolder(File,String) processing.app.Base+checkSketchFolder(File,String) javax.swing.tree.DefaultMutableTreeNode+DefaultMutableTreeNode(Object) processing.app.SketchReference+SketchReference(String,File) javax.swing.tree.DefaultMutableTreeNode+add(MutableTreeNode) javax.swing.tree.DefaultMutableTreeNode+add(MutableTreeNode) javax.swing.tree.DefaultMutableTreeNode+DefaultMutableTreeNode(Object) processing.app.Base+addSketches(DefaultMutableTreeNode,File,boolean) processing.app.Base+addSketches(DefaultMutableTreeNode,File,boolean) javax.swing.tree.DefaultMutableTreeNode+add(MutableTreeNode) javax.swing.tree.DefaultMutableTreeNode+add(MutableTreeNode)",java.lang.String+CASE_INSENSITIVE_ORDER,2357,69,1,,"public boolean addSketches(DefaultMutableTreeNode node,
                             File folder,
                             boolean examples) throws IOException {
    // skip .DS_Store files, etc (this shouldn't actually be necessary)
    if (!folder.isDirectory()) {
      return false;
    }

    final String folderName = folder.getName();

    // Don't look inside the 'libraries' folders in the sketchbook
    if (folderName.equals(""libraries"")) {
      return false;
    }

    // When building the sketchbook, don't show the contributed 'examples'
    // like it's a subfolder. But when loading examples, allow the folder
    // to be named 'examples'.
    if (!examples && folderName.equals(""examples"")) {
      return false;
    }

//    // Conversely, when looking for examples, ignore the other folders
//    // (to avoid going through hoops with the tree node setup).
//    if (examples && !folderName.equals(""examples"")) {
//      return false;
//    }
//    // Doesn't quite work because the parent will be 'examples', and we want
//    // to walk inside that, but the folder itself will have a different name

    String[] fileList = folder.list();
    // If a bad folder or unreadable or whatever, this will come back null
    if (fileList == null) {
      return false;
    }

    // Alphabetize the list, since it's not always alpha order
    Arrays.sort(fileList, String.CASE_INSENSITIVE_ORDER);

    boolean found = false;
    for (String name : fileList) {
      if (name.charAt(0) == '.') {  // Skip hidden files
        continue;
      }

      File subfolder = new File(folder, name);
      if (subfolder.isDirectory()) {
        File entry = checkSketchFolder(subfolder, name);
        if (entry != null) {
          DefaultMutableTreeNode item =
            new DefaultMutableTreeNode(new SketchReference(name, entry));

          node.add(item);
          found = true;

        } else {
          // not a sketch folder, but maybe a subfolder containing sketches
          DefaultMutableTreeNode subnode = new DefaultMutableTreeNode(name);
          // needs to be separate var otherwise would set ifound to false
          boolean anything = addSketches(subnode, subfolder, examples);
          if (anything) {
            node.add(subnode);
            found = true;
          }
        }
      }
    }
    return found;
  }",False,False,"This method adds sketches to a tree node based on a given folder. It skips certain folders and hidden files, alphabetizes the list of files, and recursively adds subfolders containing sketches. It returns true if any sketches are found and added, and false otherwise.","This code recursively adds sketches to a tree node by iterating through a given folder and its subfolders. It skips certain folders like ""libraries"" and ""examples"" based on the value of the ""examples"" parameter. The sketches are added to the tree node as child nodes, and the method returns true if at least one sketch is found."
72,"checkSketchFolder(File,String)",check sketch folder subfolder item check through the various modes and see if this is a legit sketch because the default mode will be the first in the list this will always prefer that one over the others ,Method,"addSketches(DefaultMutableTreeNode,File,boolean)",,"processing.app.Base+getModeList() processing.app.Base+getModeList() java.io.File+File(File,String) processing.app.Mode+getDefaultExtension() processing.app.Mode+getDefaultExtension() java.io.File+exists() java.io.File+exists()",,537,15,0,"/** 
 * Check through the various modes and see if this is a legit sketch. Because the default mode will be the first in the list, this will always prefer that one over the others.
 */
","/**
   * Check through the various modes and see if this is a legit sketch.
   * Because the default mode will be the first in the list, this will always
   * prefer that one over the others.
   */
  File checkSketchFolder(File subfolder, String item) {
    for (Mode mode : getModeList()) {
      File entry = new File(subfolder, item + ""."" + mode.getDefaultExtension()); //$NON-NLS-1$
      // if a .pde file of the same prefix as the folder exists..
      if (entry.exists()) {
        return entry;
      }
    }
    return null;
  }",False,False,"The function of this method is to check if a legitimate sketch file exists in a given subfolder. It iterates through a list of modes and checks if a file with the same prefix as the subfolder exists, with the appropriate extension based on the mode. If a file is found, it is returned; otherwise, null is returned.","This code checks if a sketch file exists in a given subfolder by iterating through different modes. It returns the file if it exists, otherwise it returns null."
73,handlePrefs(),handle prefs show the preferences window ,Method,,processing.app.platform.ThinkDifferent+handlePreferences(PreferencesEvent) processing.app.ui.Editor+actionPerformed(ActionEvent),processing.app.ui.PreferencesFrame+PreferencesFrame(Base) processing.app.ui.PreferencesFrame+showFrame() processing.app.ui.PreferencesFrame+showFrame(),processing.app.Base+preferencesFrame processing.app.Base+preferencesFrame processing.app.Base+preferencesFrame,206,9,1,"/** 
 * Show the Preferences window.
 */
","/**
   * Show the Preferences window.
   */
  public void handlePrefs() {
    if (preferencesFrame == null) {
      preferencesFrame = new PreferencesFrame(this);
    }
    preferencesFrame.showFrame();
  }",False,False,"This method serves to handle the action of showing the Preferences window. It checks if the preferencesFrame is null, and if so, creates a new PreferencesFrame object. Then, it calls the showFrame() method of the preferencesFrame object.","This code defines a method called ""handlePrefs"" that is responsible for showing the Preferences window. If the preferencesFrame object is null, it creates a new instance of PreferencesFrame and then calls the showFrame() method on it to display the window."
74,handleOpenLibraryManager(),handle open library manager show the library installer window ,Method,,processing.app.Mode+actionPerformed(ActionEvent),"processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType) processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType)",processing.app.Base+contributionManagerFrame processing.app.Base+activeEditor,175,6,1,"/** 
 * Show the library installer window.
 */
","/**
   * Show the library installer window.
   */
  public void handleOpenLibraryManager() {
    contributionManagerFrame.showFrame(activeEditor,ContributionType.LIBRARY);
  }",False,True,"This method is used to display the library installer window by calling the showFrame() method from the contributionManagerFrame object, passing the activeEditor and ContributionType.LIBRARY as parameters.","The code defines a method called ""handleOpenLibraryManager"" which is responsible for showing the library installer window. It takes no parameters and calls the ""showFrame"" method of the ""contributionManagerFrame"" object, passing the active editor and a contribution type of ""LIBRARY"" as arguments."
75,handleOpenToolManager(),handle open tool manager show the tool installer window ,Method,,processing.app.ui.Editor+actionPerformed(ActionEvent),"processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType) processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType)",processing.app.Base+contributionManagerFrame processing.app.Base+activeEditor,166,6,1,"/** 
 * Show the tool installer window.
 */
","/**
   * Show the tool installer window.
   */
  public void handleOpenToolManager() {
    contributionManagerFrame.showFrame(activeEditor,ContributionType.TOOL);
  }",False,True,This method is used to display the tool installer window by calling the showFrame() method of the contributionManagerFrame object with the activeEditor and ContributionType.TOOL as parameters.,"The code defines a method called ""handleOpenToolManager"" which is responsible for displaying the tool installer window. It calls the ""showFrame"" method of the ""contributionManagerFrame"" object, passing the active editor and the contribution type as arguments."
76,handleOpenModeManager(),handle open mode manager show the mode installer window ,Method,,processing.app.ui.Editor+actionPerformed(ActionEvent),"processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType) processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType)",processing.app.Base+contributionManagerFrame processing.app.Base+activeEditor,166,6,1,"/** 
 * Show the mode installer window.
 */
","/**
   * Show the mode installer window.
   */
  public void handleOpenModeManager() {
    contributionManagerFrame.showFrame(activeEditor,ContributionType.MODE);
  }",False,True,"This method is used to display the mode installer window by calling the showFrame() method from the contributionManagerFrame object, passing the activeEditor and ContributionType.MODE as parameters.","The code defines a method called ""handleOpenModeManager"" which is responsible for showing the mode installer window. It calls the ""showFrame"" method of the ""contributionManagerFrame"" object, passing the active editor and the contribution type as parameters."
77,handleOpenExampleManager(),handle open example manager show the examples installer window ,Method,,processing.app.Mode+actionPerformed(ActionEvent) processing.app.ui.ExamplesFrame+actionPerformed(ActionEvent),"processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType) processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType)",processing.app.Base+contributionManagerFrame processing.app.Base+activeEditor,177,6,1,"/** 
 * Show the examples installer window.
 */
","/**
   * Show the examples installer window.
   */
  public void handleOpenExampleManager() {
    contributionManagerFrame.showFrame(activeEditor,ContributionType.EXAMPLES);
  }",False,True,This method is used to display the examples installer window by calling the showFrame() method of the contributionManagerFrame object with the activeEditor and ContributionType.EXAMPLES as parameters.,"The code defines a method called ""handleOpenExampleManager"" which is responsible for showing the examples installer window. It calls the ""showFrame"" method of the ""contributionManagerFrame"" object, passing the active editor and the contribution type as parameters."
78,handleShowUpdates(),handle show updates ,Method,,processing.app.UpdateCheck+promptToOpenContributionManager(),"processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType) processing.app.contrib.ContributionManagerDialog+showFrame(Editor,ContributionType)",processing.app.Base+contributionManagerFrame processing.app.Base+activeEditor,96,3,1,,"public void handleShowUpdates() {
    contributionManagerFrame.showFrame(activeEditor,null);
  }",False,True,"The function of the method ""handleShowUpdates"" is to display the ""contributionManagerFrame"" frame with the ""activeEditor"" as a parameter.","The method ""handleShowUpdates"" is responsible for displaying the contribution manager frame with the active editor. It does this by calling the ""showFrame"" method from the contributionManagerFrame object, passing the activeEditor as a parameter."
79,getRevision(),get revision ,Method,,"processing.app.contrib.ContributionListing+getCompatibleContributionList(List<Contribution>,boolean) processing.app.contrib.ContributionListPanel+StatusRendere.getTableCellRendererComponent(JTable,Object,boolean,boolean,int,int) processing.app.contrib.ContributionListPanel+StatusRendere.getTableCellRendererComponent(JTable,Object,boolean,boolean,int,int) processing.app.contrib.ContributionListPanel+StatusRendere.getTableCellRendererComponent(JTable,Object,boolean,boolean,int,int) processing.app.contrib.ContributionManagerDialog+mousePressed(MouseEvent) processing.app.contrib.ContributionManagerDialog+setContribution(Contribution) processing.app.contrib.UpdateContributionTab+UpdateContribListingPanel.updatePanelOrdering(Set<Contribution>) processing.app.UpdateCheck+updateCheck() processing.app.UpdateCheck+updateCheck() processing.app.UpdateCheck+updateCheck() processing.mode.java.pdex.ErrorCheckerService+ensureMinP5Version()",,processing.app.Base+REVISION,58,3,9,,"static public int getRevision() {
    return REVISION;
  }",False,True,"This method serves to retrieve the value of the constant variable ""REVISION"" and returns it as an integer.","The code contains a static method named ""getRevision"" that returns an integer value. The method retrieves the value of a constant variable named ""REVISION"" and returns it."
80,getVersionName(),get version name return the version name something like 1 5 or 2 0b8 or 0213 if it s not a release version ,Method,,processing.app.ui.About+paint(Graphics) processing.app.ui.Editor+updateTitle() processing.mode.java.Commander+printCommandLine(PrintStream) processing.mode.java.JavaBuild+addManifest(ZipOutputStream),,processing.app.Base+VERSION_NAME,182,7,9,"/** 
 * Return the version name, something like 1.5 or 2.0b8 or 0213 if it's not a release version.
 */
","/**
   * Return the version name, something like 1.5 or 2.0b8 or 0213 if it's not
   * a release version.
   */
  static public String getVersionName() {
    return VERSION_NAME;
  }",False,True,This method serves to retrieve and return the version name of the software.,"This code defines a static method called ""getVersionName"" that returns a string representing the version name of a software. The version name can be in the format of a release version (e.g., 1.5) or a non-release version (e.g., 2.0b8 or 0213)."
81,getPlatform(),get platform ,Method,,processing.app.Language+saveLanguage(String) test.processing.mode.java.ProcessingTestUtil+UTCompiler(File),,,63,3,9,,"static public Platform getPlatform() {
    return platform;
  }",False,True,This method returns the platform.,"The code defines a static method named ""getPlatform"" that returns an object of type ""Platform"". This method is accessible from anywhere in the codebase and can be used to retrieve the current platform."
82,getPlatformName(),get platform name ,Method,,"processing.app.Library+Library(File,String) processing.app.Settings+load(File)",,processing.core.PConstants+platformNames processing.core.PApplet+platform,99,3,9,,"static public String getPlatformName() {
    return PConstants.platformNames[PApplet.platform];
  }",True,True,This method returns the name of the platform being used by the PApplet.,"The code defines a static method named ""getPlatformName"" that returns a string. The method retrieves the platform name from an array called ""platformNames"" using the current platform index obtained from a variable named ""platform"" in the PApplet class."
83,getNativeBits(),get native bits return whether sketches will run as 32 or 64 bits based on the jvm that s in use ,Method,getVariant(),"processing.app.Library+Library(File,String) processing.mode.java.JavaBuild+exportApplication() processing.mode.java.JavaBuild+exportApplication() processing.mode.java.JavaBuild+exportApplication() processing.mode.java.runner.Runner+Runner(JavaBuild,RunnerListener) processing.mode.java.runner.Runner+handleCommonErrors(String,String,RunnerListener,PrintStream)",,processing.app.Base+nativeBits,167,7,9,"/** 
 * Return whether sketches will run as 32- or 64-bits based on the JVM that's in use.
 */
","/**
   * Return whether sketches will run as 32- or 64-bits based
   * on the JVM that's in use.
   */
  static public int getNativeBits() {
    return nativeBits;
  }",True,True,The function returns the number of bits (either 32 or 64) that the JVM will use to run sketches.,"The given code is a static method named ""getNativeBits"" that returns an integer value. It is used to determine whether sketches will run as 32- or 64-bits based on the JVM (Java Virtual Machine) being used."
84,getNativeArch(),get native arch return the value of the os arch propery ,Method,"getVariant() getVariant(int,String,int)",processing.mode.java.JavaBuild+exportApplication() processing.mode.java.JavaBuild+exportApplication() processing.mode.java.JavaBuild+exportApplication(),,processing.app.Base+nativeArch,122,6,9,"/** 
 * Return the value of the os.arch propery
 */
","/**
   * Return the value of the os.arch propery
   */
  static public String getNativeArch() {
    return nativeArch;
  }",True,True,This method serves to return the value of the os.arch property.,"The given code is a static method named ""getNativeArch()"" that returns the value of the ""os.arch"" property. It is used to retrieve the native architecture of the operating system."
85,getVariant(),get variant ,Method,,"processing.mode.java.Commander+Commander(String[]) processing.mode.java.runner.Runner+Runner(JavaBuild,RunnerListener)","processing.app.Base+getVariant(int,String,int) processing.app.Base+getVariant(int,String,int) processing.app.Base+getNativeArch() processing.app.Base+getNativeArch() processing.app.Base+getNativeBits() processing.app.Base+getNativeBits()",processing.core.PApplet+platform,114,3,9,,"static public String getVariant() {
    return getVariant(PApplet.platform, getNativeArch(), getNativeBits());
  }",True,True,"The function ""getVariant"" returns a string value. It takes no input parameters and internally calls another method ""getVariant"" with three input parameters: PApplet.platform, getNativeArch(), and getNativeBits().","The code defines a static method named ""getVariant"" that returns a string. It calls three other methods to retrieve the platform, native architecture, and native bits, and passes those values as arguments to another overloaded version of ""getVariant"" method, which is not shown in the provided code snippet."
86,"getVariant(int,String,int)",get variant platform arch bits ,Method,getVariant(),,java.lang.String+equals(Object) java.lang.String+equals(Object) processing.app.Base+getNativeArch() processing.app.Base+getNativeArch() java.lang.Integer+toString(int) java.lang.Integer+toString(int),processing.core.PConstants+LINUX,296,9,9,,"static public String getVariant(int platform, String arch, int bits) {
    if (platform == PConstants.LINUX && bits == 32 && ""arm"".equals(Base.getNativeArch())) {
      // assume armv6hf for now
      return ""armv6hf"";
    } else {
      // 32 or 64
      return Integer.toString(bits);
    }
  }",True,True,"This method returns a string representing the variant of a platform based on the given parameters. If the platform is Linux, the architecture is ARM, and the bits are 32, it returns ""armv6hf"". Otherwise, it returns the number of bits as a string.","The given code is a static method named ""getVariant"" that takes three parameters: platform, arch, and bits. It checks if the platform is Linux, bits is 32, and the native architecture is ""arm"". If all conditions are met, it returns ""armv6hf"". Otherwise, it returns the value of bits as a string."
87,getPlatformName(int),get platform name which map a platform constant to its name param which p constants windows p constants macosx p constants linu x return one of windows macosx or linux ,Method,,,java.util.HashMap+get(Object) java.util.HashMap+get(Object),processing.app.Base+platformNames,270,8,9,"/** 
 * Map a platform constant to its name.
 * @param which PConstants.WINDOWS, PConstants.MACOSX, PConstants.LINUX
 * @return one of ""windows"", ""macosx"", or ""linux""
 */
","/**
   * Map a platform constant to its name.
   * @param which PConstants.WINDOWS, PConstants.MACOSX, PConstants.LINUX
   * @return one of ""windows"", ""macosx"", or ""linux""
   */
  static public String getPlatformName(int which) {
    return platformNames.get(which);
  }",True,True,This method maps a platform constant to its corresponding name. It takes an integer parameter representing the platform constant and returns a string representing the name of the platform.,"The code defines a static method called ""getPlatformName"" that takes an integer parameter representing a platform constant (e.g., PConstants.WINDOWS) and returns the corresponding platform name as a string (""windows"", ""macosx"", or ""linux""). The method utilizes a map called ""platformNames"" to retrieve the platform name based on the provided constant."
88,getPlatformIndex(String),get platform index what ,Method,,processing.mode.java.Commander+Commander(String[]) processing.mode.java.JavaBuild+exportApplication(),java.util.HashMap+get(Object) java.util.HashMap+get(Object) java.lang.Integer+intValue() java.lang.Integer+intValue(),processing.app.Base+platformIndices,152,4,9,,"static public int getPlatformIndex(String what) {
    Integer entry = platformIndices.get(what);
    return (entry == null) ? -1 : entry.intValue();
  }",True,True,"This method returns the index of a platform in a collection, given its name. If the platform is not found, it returns -1.","The code defines a static method named ""getPlatformIndex"" that takes a string parameter. It retrieves the corresponding value from a map called ""platformIndices"" using the string as the key. If the value is found, it is returned as an integer, otherwise, -1 is returned."
89,isMacOS(),is mac os returns true if processing is running on a mac os x machine ,Method,"initPlatform() handleClose(Editor,boolean) handleQuit() showWarningTiered(String,String,String,Throwable) showYesNoCancelQuestion(Editor,String,String,String) showYesNoQuestion(Frame,String,String,String) getContentFile(String) getContentFile(String) getJavaHome()","processing.app.contrib.ContributionListPanel+updateColors() processing.app.Sketch+calcModified() processing.app.syntax.JEditTextArea+mouseWheelMoved(MouseWheelEvent) processing.app.syntax.PdeInputHandler+PdeInputHandler() processing.app.syntax.PdeInputHandler+PdeInputHandler() processing.app.syntax.PdeInputHandler+PdeInputHandler() processing.app.syntax.PdeInputHandler+isMnemonic(KeyEvent) processing.app.ui.ColorChooser+createColorFields(String,ActionListener) processing.app.ui.Editor+addInternalTools(JMenu) processing.app.ui.Editor+checkModified() processing.app.ui.EditorConsole+EditorConsole(Editor) processing.app.ui.EditorHeader+actionPerformed(ActionEvent) processing.app.ui.PreferencesFrame+PreferencesFrame(Base) processing.app.ui.Toolkit+setMenuMnemonics(JMenuItem) processing.app.ui.Toolkit+setIcon(Window) processing.app.ui.Toolkit+checkRetina() processing.app.Util+copyDirNative(File,File) processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean) processing.mode.java.JavaEditor+buildHelpMenu() processing.mode.java.pdex.ASTGenerator+loadJars() processing.mode.java.pdex.JavaTextArea+processKeyEvent(KeyEvent) processing.mode.java.pdex.JavaTextArea+processCompletionKeys(KeyEvent) processing.mode.java.pdex.JavaTextAreaPainter+mouseClicked(MouseEvent) processing.mode.java.runner.Runner+Runner(JavaBuild,RunnerListener) processing.mode.java.runner.Runner+getMachineParams()",java.lang.String+indexOf(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.String+indexOf(String),,258,7,9,"/** 
 * returns true if Processing is running on a Mac OS X machine.
 */
","/**
   * returns true if Processing is running on a Mac OS X machine.
   */
  static public boolean isMacOS() {
    //return PApplet.platform == PConstants.MACOSX;
    return System.getProperty(""os.name"").indexOf(""Mac"") != -1; //$NON-NLS-1$ //$NON-NLS-2$
  }",True,True,"This method checks if the current operating system is Mac OS X by comparing the value of the ""os.name"" system property with the string ""Mac"". It returns true if the current OS is Mac OS X, and false otherwise.","This code defines a static method called ""isMacOS"" that returns a boolean value indicating whether the current operating system is Mac OS X. It checks the value of the ""os.name"" system property and returns true if it contains the string ""Mac""."
90,isWindows(),is windows returns true if running on windows ,Method,initPlatform() Base(String[]) getContentFile(String) getJavaPath(),"processing.app.contrib.AvailableContribution+install(Base,File,boolean,StatusPanel) processing.app.syntax.JEditTextArea+MouseHandler.mousePressed(MouseEvent) processing.app.ui.ColorChooser+createColorFields(String,ActionListener) processing.app.ui.ColorChooser+createColorFields(String,ActionListener) processing.app.ui.Editor+buildEditMenu() processing.app.Util+saveFile(String,File) processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean) processing.mode.java.JavaBuild+addDataFolder(ZipOutputStream)",java.lang.String+indexOf(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.String+indexOf(String),,240,7,9,"/** 
 * returns true if running on windows.
 */
","/**
   * returns true if running on windows.
   */
  static public boolean isWindows() {
    //return PApplet.platform == PConstants.WINDOWS;
    return System.getProperty(""os.name"").indexOf(""Windows"") != -1; //$NON-NLS-1$ //$NON-NLS-2$
  }",True,True,"This method checks if the program is running on a Windows operating system by checking the value of the ""os.name"" system property. It returns true if the value contains the word ""Windows"".","The given code is a method named ""isWindows()"" that returns a boolean value indicating whether the current operating system is Windows or not. It checks the value of the ""os.name"" system property and returns true if it contains the word ""Windows""."
91,isLinux(),is linux true if running on linux ,Method,initPlatform() getContentFile(String),"processing.app.contrib.ContributionListPanel+ContributionListPanel(ContributionTab,ContributionFilter) processing.app.contrib.UpdateContributionTab+UpdateContribListingPanel.UpdateContribListingPanel(ContributionTab,ContributionFilter) processing.app.Util+copyDirNative(File,File)",java.lang.String+indexOf(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.String+indexOf(String),,224,7,9,"/** 
 * true if running on linux.
 */
","/**
   * true if running on linux.
   */
  static public boolean isLinux() {
    //return PApplet.platform == PConstants.LINUX;
    return System.getProperty(""os.name"").indexOf(""Linux"") != -1; //$NON-NLS-1$ //$NON-NLS-2$
  }",True,True,"This method checks if the system is running on Linux by comparing the value of the ""os.name"" property with the string ""Linux"". It returns true if the system is running on Linux, and false otherwise.","This code defines a static method named ""isLinux()"" that returns a boolean value indicating whether the current operating system is Linux. It checks the value of the ""os.name"" system property and returns true if it contains the string ""Linux""."
92,getSettingsFolder(),get settings folder get the directory that can store settings library on os x app data or something similar on windows a dot folder on linux removed this as a preference for 3 0a3 because we need this to be stable ,Method,,processing.app.ui.PreferencesFrame+mousePressed(MouseEvent),"processing.app.Base+showError(String,String,Throwable) processing.app.Base+showError(String,String,Throwable) java.io.File+exists() java.io.File+exists() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.Base+showError(String,String,Throwable) processing.app.Base+showError(String,String,Throwable)",,1065,31,9,"/** 
 * Get the directory that can store settings. (Library on OS X, App Data or something similar on Windows, a dot folder on Linux.) Removed this as a preference for 3.0a3 because we need this to be stable.
 */
","/**
   * Get the directory that can store settings. (Library on OS X, App Data or
   * something similar on Windows, a dot folder on Linux.) Removed this as a
   * preference for 3.0a3 because we need this to be stable.
   */
  static public File getSettingsFolder() {
    File settingsFolder = null;

//    String preferencesPath = Preferences.get(""settings.path""); //$NON-NLS-1$
//    if (preferencesPath != null) {
//      settingsFolder = new File(preferencesPath);
//
//    } else {
    try {
      settingsFolder = platform.getSettingsFolder();
    } catch (Exception e) {
      showError(""Problem getting the settings folder"",
                ""Error getting the Processing the settings folder."", e);
    }
//    }

    // create the folder if it doesn't exist already
    if (!settingsFolder.exists()) {
      if (!settingsFolder.mkdirs()) {
        showError(""Settings issues"",
                  ""Processing cannot run because it could not\n"" +
                  ""create a folder to store your settings."", null);
      }
    }
    return settingsFolder;
  }",False,False,"This method is used to retrieve the directory where settings can be stored. It first checks if a preferences path is specified, and if not, it calls the platform's method to get the settings folder. If the folder does not exist, it creates it. Finally, it returns the settings folder.","This code defines a method called ""getSettingsFolder"" that retrieves the directory where settings can be stored. It first checks if a preferences path is specified, and if not, it calls the ""getSettingsFolder"" method from the ""platform"" object. If the folder doesn't exist, it creates it and returns the folder."
93,getSettingsFile(String),get settings file filename convenience method to get a file object for the specified filename inside the settings folder used to get preferences and recent sketch files param filename a file inside the settings folder return filename wrapped as a file object inside the settings folder ,Method,,processing.app.contrib.ContributionListing+ContributionListing() processing.app.contrib.ContributionListing+run() processing.app.Preferences+init() processing.app.ui.Recent+Recent(Base) processing.mode.java.JavaMode+initLogger(),"java.io.File+File(File,String) processing.app.Base+getSettingsFolder() processing.app.Base+getSettingsFolder()",,405,9,9,"/** 
 * Convenience method to get a File object for the specified filename inside the settings folder. Used to get preferences and recent sketch files.
 * @param filename A file inside the settings folder.
 * @return filename wrapped as a File object inside the settings folder
 */
","/**
   * Convenience method to get a File object for the specified filename inside
   * the settings folder. Used to get preferences and recent sketch files.
   * @param filename A file inside the settings folder.
   * @return filename wrapped as a File object inside the settings folder
   */
  static public File getSettingsFile(String filename) {
    return new File(getSettingsFolder(), filename);
  }",False,False,This method returns a File object for a specified filename inside the settings folder. It is used to access preferences and recent sketch files.,"The code defines a static method called ""getSettingsFile"" that takes a filename as input and returns a File object representing that file within the settings folder. This method is used to conveniently access preferences and recent sketch files."
94,"createTempFolder(String,String,File)",create temp folder prefix suffix directory create a temporary folder by using the create temp file mechanism deleting the file it creates and making a folder using the location that was provided unlike create temp file there is no minimum size for prefix if prefix is less than 3 characters the remaining characters will be filled with underscores ,Method,createAndShowGUI(String[]),processing.app.Sketch+makeTempFolder(),"java.lang.String+length() java.lang.String+length() java.io.File+createTempFile(String,String,File) java.io.File+createTempFile(String,String,File) java.io.File+delete() java.io.File+delete() java.io.File+mkdirs() java.io.File+mkdirs()",,810,21,9,"/** 
 * Create a temporary folder by using the createTempFile() mechanism, deleting the file it creates, and making a folder using the location that was provided. Unlike createTempFile(), there is no minimum size for prefix. If prefix is less than 3 characters, the remaining characters will be filled with underscores
 */
","/**
   * Create a temporary folder by using the createTempFile() mechanism,
   * deleting the file it creates, and making a folder using the location
   * that was provided.
   *
   * Unlike createTempFile(), there is no minimum size for prefix. If
   * prefix is less than 3 characters, the remaining characters will be
   * filled with underscores
   */
  static public File createTempFolder(String prefix, String suffix, File directory) throws IOException {
    int fillChars = 3 - prefix.length();
    for (int i = 0; i < fillChars; i++) {
      prefix += '_';
    }
    File folder = File.createTempFile(prefix, suffix, directory);
    // Now delete that file and create a folder in its place
    folder.delete();
    folder.mkdirs();
    // And send the folder back to your friends
    return folder;
  }",False,False,"This method creates a temporary folder by using the createTempFile() mechanism, deleting the file it creates, and making a folder using the provided location. If the prefix is less than 3 characters, the remaining characters will be filled with underscores.","This code defines a method called createTempFolder that creates a temporary folder by using the createTempFile mechanism, deleting the file it creates, and making a folder using the provided location. The method also handles cases where the prefix is less than 3 characters by filling the remaining characters with underscores."
95,getToolsFolder(),get tools folder ,Method,,processing.app.ui.Editor+rebuildToolMenu(),processing.app.Base+getContentFile(String) processing.app.Base+getContentFile(String),,77,3,9,,"static public File getToolsFolder() {
    return getContentFile(""tools"");
  }",False,False,"This method returns the file object for the ""tools"" folder.","The code defines a static method named ""getToolsFolder"" that returns a File object. This method internally calls another method named ""getContentFile"" with the argument ""tools"" and returns the result."
96,locateSketchbookFolder(),locate sketchbook folder ,Method,createAndShowGUI(String[]),processing.mode.java.Commander+Commander(String[]),"processing.app.Preferences+getSketchbookPath() processing.app.Preferences+getSketchbookPath() java.io.File+File(String) java.io.File+exists() java.io.File+exists() processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+getDefaultSketchbookFolder() processing.app.Base+getDefaultSketchbookFolder() processing.app.Preferences+setSketchbookPath(String) processing.app.Preferences+setSketchbookPath(String) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath() java.io.File+exists() java.io.File+exists() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.Base+makeSketchbookSubfolders() processing.app.Base+makeSketchbookSubfolders()",processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder processing.app.Base+sketchbookFolder,1235,27,9,,"static public void locateSketchbookFolder() {
    // If a value is at least set, first check to see if the folder exists.
    // If it doesn't, warn the user that the sketchbook folder is being reset.
    String sketchbookPath = Preferences.getSketchbookPath();
    if (sketchbookPath != null) {
      sketchbookFolder = new File(sketchbookPath);
      if (!sketchbookFolder.exists()) {
        Base.showWarning(""Sketchbook folder disappeared"",
                         ""The sketchbook folder no longer exists.\n"" +
                         ""Processing will switch to the default sketchbook\n"" +
                         ""location, and create a new sketchbook folder if\n"" +
                         ""necessary. Processing will then stop talking\n"" +
                         ""about himself in the third person."", null);
        sketchbookFolder = null;
      }
    }

    // If no path is set, get the default sketchbook folder for this platform
    if (sketchbookFolder == null) {
      sketchbookFolder = getDefaultSketchbookFolder();
      Preferences.setSketchbookPath(sketchbookFolder.getAbsolutePath());
      if (!sketchbookFolder.exists()) {
        sketchbookFolder.mkdirs();
      }
    }
    makeSketchbookSubfolders();
  }",False,False,"The function of this method is to locate the sketchbook folder. It first checks if a value is set for the sketchbook path. If the folder does not exist, it warns the user and resets the sketchbook folder. If no path is set, it gets the default sketchbook folder for the platform and creates it if necessary. Finally, it makes subfolders within the sketchbook folder.","The `locateSketchbookFolder` method checks if the sketchbook folder exists based on the path stored in preferences. If the folder doesn't exist, it displays a warning and resets the sketchbook folder to the default location. Finally, it creates necessary subfolders within the sketchbook folder."
97,setSketchbookFolder(File),set sketchbook folder folder ,Method,,processing.app.ui.PreferencesFrame+applyFrame() processing.app.ui.Welcome+sketchbookCallback(File),processing.app.Preferences+setSketchbookPath(String) processing.app.Preferences+setSketchbookPath(String) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath() processing.app.Base+rebuildSketchbookMenus() processing.app.Base+rebuildSketchbookMenus() processing.app.Base+makeSketchbookSubfolders() processing.app.Base+makeSketchbookSubfolders(),processing.app.Base+sketchbookFolder,204,6,1,,"public void setSketchbookFolder(File folder) {
    sketchbookFolder = folder;
    Preferences.setSketchbookPath(folder.getAbsolutePath());
    rebuildSketchbookMenus();
    makeSketchbookSubfolders();
  }",False,False,"This method sets the sketchbook folder, updates the sketchbook path in preferences, rebuilds the sketchbook menus, and creates subfolders in the sketchbook.","The given code defines a method named ""setSketchbookFolder"" that takes a File object as a parameter. This method sets the sketchbookFolder variable to the provided folder, updates the sketchbook path in the preferences, rebuilds the sketchbook menus, and creates subfolders within the sketchbook."
98,makeSketchbookSubfolders(),make sketchbook subfolders create the libraries modes tools examples folders in the sketchbook ,Method,locateSketchbookFolder() setSketchbookFolder(File),,java.io.File+mkdirs() processing.app.Base+getSketchbookLibrariesFolder() processing.app.Base+getSketchbookLibrariesFolder() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.Base+getSketchbookToolsFolder() processing.app.Base+getSketchbookToolsFolder() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.Base+getSketchbookModesFolder() processing.app.Base+getSketchbookModesFolder() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.Base+getSketchbookExamplesFolder() processing.app.Base+getSketchbookExamplesFolder() java.io.File+mkdirs(),,314,9,12,"/** 
 * Create the libraries, modes, tools, examples folders in the sketchbook.
 */
","/**
   * Create the libraries, modes, tools, examples folders in the sketchbook.
   */
  static protected void makeSketchbookSubfolders() {
    getSketchbookLibrariesFolder().mkdirs();
    getSketchbookToolsFolder().mkdirs();
    getSketchbookModesFolder().mkdirs();
    getSketchbookExamplesFolder().mkdirs();
  }",False,False,"This method creates the folders for libraries, modes, tools, and examples in the sketchbook.","The method ""makeSketchbookSubfolders"" creates four folders (libraries, modes, tools, examples) within the sketchbook directory. It ensures that these folders exist by creating them if they don't already exist."
99,getSketchbookFolder(),get sketchbook folder ,Method,,processing.app.Language+LanguageBundle.LanguageBundle(String) processing.app.Language+LanguageBundle.LanguageBundle(String) processing.app.Mode+buildSketchbookTree() processing.app.ui.Recent+updateMenu(JMenu),,processing.app.Base+sketchbookFolder,75,3,9,,"static public File getSketchbookFolder() {
    return sketchbookFolder;
  }",False,False,This method returns the sketchbook folder as a File object.,"The code defines a static method named ""getSketchbookFolder"" that returns a File object representing the sketchbook folder. The sketchbook folder is a location where sketches or projects are stored."
100,getSketchbookLibrariesFolder(),get sketchbook libraries folder ,Method,makeSketchbookSubfolders(),processing.app.contrib.ContributionManager+cleanup(Base) processing.app.Mode+rebuildLibraryList(),"java.io.File+File(File,String)",processing.app.Base+sketchbookFolder,107,3,9,,"static public File getSketchbookLibrariesFolder() {
    return new File(sketchbookFolder, ""libraries"");
  }",False,False,"This method returns a File object representing the ""libraries"" folder within the sketchbook folder.","The code defines a static method named ""getSketchbookLibrariesFolder"" that returns a File object representing the ""libraries"" folder within the sketchbook folder. The sketchbook folder is obtained from a variable named ""sketchbookFolder""."
101,getSketchbookToolsFolder(),get sketchbook tools folder ,Method,getInstalledContribs() makeSketchbookSubfolders(),processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+doInBackground() processing.app.ui.Editor+rebuildToolMenu(),"java.io.File+File(File,String)",processing.app.Base+sketchbookFolder,99,3,9,,"static public File getSketchbookToolsFolder() {
    return new File(sketchbookFolder, ""tools"");
  }",False,False,"This method returns a File object representing the ""tools"" folder within the sketchbookFolder.","The code defines a static method named ""getSketchbookToolsFolder"" that returns a File object representing the ""tools"" folder within the sketchbook folder. The sketchbook folder is obtained from a variable named ""sketchbookFolder""."
102,getSketchbookModesFolder(),get sketchbook modes folder ,Method,makeSketchbookSubfolders(),processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ContributionManager+cleanup(Base) processing.app.contrib.ModeContribution+loadMissing(Base),"java.io.File+File(File,String)",processing.app.Base+sketchbookFolder,99,3,9,,"static public File getSketchbookModesFolder() {
    return new File(sketchbookFolder, ""modes"");
  }",False,False,"This method returns a File object representing the ""modes"" folder within the sketchbookFolder.","The code defines a static method named ""getSketchbookModesFolder"" that returns a File object representing the ""modes"" folder within the sketchbookFolder. The sketchbookFolder is a variable that is not shown in the code snippet."
103,getSketchbookExamplesFolder(),get sketchbook examples folder ,Method,makeSketchbookSubfolders(),"processing.app.contrib.ExamplesContribution+loadMissing(Base) processing.app.ui.ExamplesFrame+ExamplesFrame(Base,Mode)","java.io.File+File(File,String)",processing.app.Base+sketchbookFolder,105,3,9,,"static public File getSketchbookExamplesFolder() {
    return new File(sketchbookFolder, ""examples"");
  }",False,False,This method returns the folder path for the examples in the sketchbook.,"The code defines a static method named ""getSketchbookExamplesFolder"" that returns a File object representing the ""examples"" folder within the sketchbook folder. The sketchbook folder is obtained from a variable named ""sketchbookFolder""."
104,getDefaultSketchbookFolder(),get default sketchbook folder ,Method,locateSketchbookFolder(),,"processing.app.Base+showError(String,String,Throwable) processing.app.Base+showError(String,String,Throwable) java.io.File+exists() java.io.File+exists() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.Base+showError(String,String,Throwable) processing.app.Base+showError(String,String,Throwable)",,741,25,12,,"static protected File getDefaultSketchbookFolder() {
    File sketchbookFolder = null;
    try {
      sketchbookFolder = platform.getDefaultSketchbookFolder();
    } catch (Exception e) { }

    if (sketchbookFolder == null) {
      showError(""No sketchbook"",
                ""Problem while trying to get the sketchbook"", null);
    }

    // create the folder if it doesn't exist already
    boolean result = true;
    if (!sketchbookFolder.exists()) {
      result = sketchbookFolder.mkdirs();
    }

    if (!result) {
      showError(""You forgot your sketchbook"",
                ""Processing cannot run because it could not\n"" +
                ""create a folder to store your sketchbook."", null);
    }

    return sketchbookFolder;
  }",False,False,"This method returns the default sketchbook folder. If the folder does not exist, it creates it. If there is an error, it shows an error message.","This code defines a method called `getDefaultSketchbookFolder()` that retrieves the default sketchbook folder. It checks if the folder exists and creates it if it doesn't. If the folder cannot be created, it displays an error message. The method returns the sketchbook folder."
105,openURL(String),open url url implements the cross platform headache of opening ur ls for 2 0a8 and later this requires the parameter to be an actual url meaning that you can t send it a file path without a prefix it also just calls into platform which now uses java awt desktop where possible meaning not on linux now that we re requiring java 6 as it happens the url must also be properly url encoded ,Method,,processing.app.contrib.ContributionManagerDialog+hyperlinkUpdate(HyperlinkEvent) processing.app.contrib.ModeContribution+hyperlinkUpdate(HyperlinkEvent) processing.app.ui.Editor+showReferenceFile(File) processing.app.ui.Editor+showChanges() processing.app.ui.EditorStatus+mousePressed(MouseEvent) processing.app.ui.WebFrame+handleLink(String) processing.app.UpdateCheck+promptToVisitDownloadPage() processing.mode.java.JavaEditor+actionPerformed(ActionEvent) processing.mode.java.JavaEditor+actionPerformed(ActionEvent) processing.mode.java.JavaEditor+actionPerformed(ActionEvent) processing.mode.java.JavaEditor+actionPerformed(ActionEvent) processing.mode.java.JavaEditor+actionPerformed(ActionEvent) processing.mode.java.JavaEditor+mousePressed(MouseEvent) processing.mode.java.JavaEditor+mousePressed(MouseEvent),"processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable)",,647,18,9,"/** 
 * Implements the cross-platform headache of opening URLs. For 2.0a8 and later, this requires the parameter to be an actual URL, meaning that you can't send it a file:// path without a prefix. It also just calls into Platform, which now uses java.awt.Desktop (where possible, meaning not on Linux) now that we're requiring Java 6. As it happens the URL must also be properly URL-encoded.
 */
","/**
   * Implements the cross-platform headache of opening URLs.
   *
   * For 2.0a8 and later, this requires the parameter to be an actual URL,
   * meaning that you can't send it a file:// path without a prefix. It also
   * just calls into Platform, which now uses java.awt.Desktop (where
   * possible, meaning not on Linux) now that we're requiring Java 6.
   * As it happens the URL must also be properly URL-encoded.
   */
  static public void openURL(String url) {
    try {
      platform.openURL(url);

    } catch (Exception e) {
      showWarning(""Problem Opening URL"",
                  ""Could not open the URL\n"" + url, e);
    }
  }",True,True,"The function of this method is to open a URL. It calls into the platform to open the URL using java.awt.Desktop, but only if the platform is not Linux. The URL must be properly URL-encoded. If there is an exception while opening the URL, a warning is shown.","The code defines a method called ""openURL"" that is responsible for opening a URL. It uses the ""platform"" object to open the URL, and if an exception occurs, it displays a warning message with the details of the error."
106,openFolderAvailable(),open folder available used to determine whether to disable the show sketch folder option return true if a means of opening a folder is known to be available ,Method,,,,,254,7,9,"/** 
 * Used to determine whether to disable the ""Show Sketch Folder"" option.
 * @return true If a means of opening a folder is known to be available.
 */
","/**
   * Used to determine whether to disable the ""Show Sketch Folder"" option.
   * @return true If a means of opening a folder is known to be available.
   */
  static public boolean openFolderAvailable() {
    return platform.openFolderAvailable();
  }",True,True,"This method serves to determine whether the ""Show Sketch Folder"" option should be disabled. It returns true if there is a means of opening a folder available.","The code contains a static method named ""openFolderAvailable()"" which is used to determine if there is a means of opening a folder available. It returns a boolean value, true if a means of opening a folder is known to be available, and false otherwise."
107,openFolder(File),open folder file implements the other cross platform headache of opening a folder in the machine s native file browser ,Method,,processing.app.contrib.ContributionManagerDialog+actionPerformed(ActionEvent) processing.app.ui.Editor+actionPerformed(ActionEvent) processing.app.ui.PreferencesFrame+mousePressed(MouseEvent) processing.mode.java.JavaEditor+handleExportApplication(),"processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath()",,371,13,9,"/** 
 * Implements the other cross-platform headache of opening a folder in the machine's native file browser.
 */
","/**
   * Implements the other cross-platform headache of opening
   * a folder in the machine's native file browser.
   */
  static public void openFolder(File file) {
    try {
      platform.openFolder(file);

    } catch (Exception e) {
      showWarning(""Problem Opening Folder"",
                  ""Could not open the folder\n"" + file.getAbsolutePath(), e);
    }
  }",True,True,"The function serves to open a folder in the machine's native file browser. It takes a file as input and attempts to open the folder using the platform's openFolder method. If an exception occurs, it shows a warning message with the details of the problem.","The code defines a static method called ""openFolder"" that takes a File object as a parameter. It attempts to open the specified folder in the machine's native file browser using the platform's specific implementation. If an exception occurs, it displays a warning message with the details of the error."
108,"showMessage(String,String)",show message title message no cookie for you type messages nothing fatal or all that much of a bummer but something to notify the user about ,Method,,"processing.app.contrib.LocalContribution+remove(Editor,ContribProgressMonitor,StatusPanel,ContributionListing) processing.app.Library+discover(File) processing.app.Sketch+handleNewCode() processing.app.Sketch+handleRenameCode() processing.app.Sketch+handleRenameCode() processing.app.Sketch+handleRenameCode() processing.app.Sketch+nameCode(String) processing.app.Sketch+handleDeleteCode() processing.app.Sketch+handleDeleteCode() processing.app.Sketch+handleDeleteCode() processing.app.Sketch+save() processing.app.Sketch+saveAs() processing.app.Sketch+saveAs() processing.app.Sketch+handleAddFile() processing.mode.java.JavaEditor+handleExportCheckModified() processing.mode.java.JavaEditor+handleExportCheckModified() processing.mode.java.JavaMode+handleTweak(Sketch,RunnerListener,boolean)","java.io.PrintStream+println(String) java.io.PrintStream+println(String) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) java.awt.Frame+Frame()",processing.app.Base+commandLine java.lang.System+out javax.swing.JOptionPane+INFORMATION_MESSAGE,478,15,9,"/** 
 * ""No cookie for you"" type messages. Nothing fatal or all that much of a bummer, but something to notify the user about.
 */
","/**
   * ""No cookie for you"" type messages. Nothing fatal or all that
   * much of a bummer, but something to notify the user about.
   */
  static public void showMessage(String title, String message) {
    if (title == null) title = ""Message"";

    if (commandLine) {
      System.out.println(title + "": "" + message);

    } else {
      JOptionPane.showMessageDialog(new Frame(), message, title,
                                    JOptionPane.INFORMATION_MESSAGE);
    }
  }",False,False,"This method displays a message to the user. If the title is not provided, it defaults to ""Message"". If running from the command line, it prints the message to the console. Otherwise, it displays a dialog box with the message and title.","The code defines a static method called ""showMessage"" that displays a message to the user. It takes a title and a message as input parameters and shows the message either in the console or as a pop-up window depending on the execution context."
109,"showWarning(String,String)",show warning title message non fatal error message ,Method,"promptForMode(File,ModeInfo) promptForMode(File,ModeInfo)","processing.app.contrib.ContributionManager+installOnStartUp(Base,AvailableContribution) processing.app.Sketch+nameCode(String) processing.app.Sketch+nameCode(String) processing.app.Sketch+nameCode(String) processing.app.Sketch+nameCode(String) processing.app.Sketch+nameCode(String) processing.app.Sketch+nameCode(String) processing.app.Sketch+nameCode(String) processing.app.ui.ChangeDetector+run()","processing.app.Base+showWarning(String,String,Throwable) processing.app.Base+showWarning(String,String,Throwable)",,147,6,9,"/** 
 * Non-fatal error message.
 */
","/**
   * Non-fatal error message.
   */
  static public void showWarning(String title, String message) {
    showWarning(title, message, null);
  }",False,False,The function serves to display a non-fatal error message with a given title and message.,"The code defines a static method called ""showWarning"" that displays a non-fatal error message. It takes in a title and message as parameters and calls another version of the method with an additional parameter set to null."
110,"showWarning(String,String,Throwable)",show warning title message e non fatal error message with optional stack trace side dish ,Method,"handleNew() handleNew() handleNew() handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState) populateSketchbookMenu(JMenu) locateSketchbookFolder() openURL(String) openFolder(File) showWarning(String,String)","processing.app.contrib.ContributionManager+installOnStartUp(Base,AvailableContribution) processing.app.Mode+Mode(Base,File) processing.app.platform.LinuxPlatform+init(Base) processing.app.Sketch+nameCode(String) processing.app.Sketch+saveAs() processing.app.Sketch+addFile(File) processing.app.Sketch+addFile(File) processing.app.Sketch+addFile(File) processing.app.Sketch+makeTempFolder() processing.app.Sketch+ensureExistence() processing.app.Sketch+ensureExistence() processing.app.tools.Archiver+run() processing.app.tools.InstallCommander+run() processing.app.tools.InstallCommander+run() processing.app.ui.Editor+FileDropHandler.importData(TransferHandler.TransferSupport) processing.app.ui.Editor+actionPerformed(ActionEvent) processing.app.ui.EditorHeader+actionPerformed(ActionEvent) processing.mode.java.JavaBuild+exportApplication() processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean) processing.mode.java.JavaEditor+actionPerformed(ActionEvent) processing.mode.java.JavaEditor+stopTweakMode(List<List<Handle>>) processing.mode.java.pdex.ErrorCheckerService+ensureMinP5Version() processing.mode.java.preproc.PdePreprocessor+parseSketchSize(String,boolean) processing.mode.java.preproc.SurfaceInfo+hasOldSyntax() processing.mode.java.preproc.SurfaceInfo+hasOldSyntax() processing.mode.java.runner.Runner+run()","java.io.PrintStream+println(String) java.io.PrintStream+println(String) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) java.awt.Frame+Frame() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()",processing.app.Base+commandLine java.lang.System+out javax.swing.JOptionPane+WARNING_MESSAGE,464,15,9,"/** 
 * Non-fatal error message with optional stack trace side dish.
 */
","/**
   * Non-fatal error message with optional stack trace side dish.
   */
  static public void showWarning(String title, String message, Throwable e) {
    if (title == null) title = ""Warning"";

    if (commandLine) {
      System.out.println(title + "": "" + message);

    } else {
      JOptionPane.showMessageDialog(new Frame(), message, title,
                                    JOptionPane.WARNING_MESSAGE);
    }
    if (e != null) e.printStackTrace();
  }",False,False,"This method displays a non-fatal warning message with an optional stack trace. It can be used to show warnings to the user, either on the command line or using a graphical user interface. If provided, it also prints the stack trace of an exception.","The code defines a static method called ""showWarning"" that displays a non-fatal error message with an optional stack trace. It takes in a title, message, and throwable object as parameters and displays the message using either the command line or a JOptionPane dialog. If a throwable object is provided, it also prints the stack trace."
111,"showWarningTiered(String,String,String,Throwable)",show warning tiered title primary secondary e non fatal error message with optional stack trace side dish ,Method,,processing.app.Mode+getLibrary(String),"java.io.PrintStream+println(String) java.io.PrintStream+println(String) processing.app.Base+isMacOS() processing.app.Base+isMacOS() javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) javax.swing.JFrame+JFrame() javax.swing.JOptionPane+JOptionPane(Object,int) javax.swing.JOptionPane+createDialog(Component,String) javax.swing.JOptionPane+createDialog(Component,String) javax.swing.JFrame+JFrame() java.awt.Dialog+setVisible(boolean) java.awt.Dialog+setVisible(boolean) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()",processing.app.Base+commandLine java.lang.System+out javax.swing.JOptionPane+WARNING_MESSAGE javax.swing.JOptionPane+WARNING_MESSAGE,2208,57,9,"/** 
 * Non-fatal error message with optional stack trace side dish.
 */
","/**
   * Non-fatal error message with optional stack trace side dish.
   */
  static public void showWarningTiered(String title,
                                       String primary, String secondary,
                                       Throwable e) {
    if (title == null) title = ""Warning"";

    final String message = primary + ""\n"" + secondary;
    if (commandLine) {
      System.out.println(title + "": "" + message);

    } else {
//      JOptionPane.showMessageDialog(new Frame(), message,
//                                    title, JOptionPane.WARNING_MESSAGE);
      if (!Base.isMacOS()) {
        JOptionPane.showMessageDialog(new JFrame(),
                                      ""<html><body>"" +
                                      ""<b>"" + primary + ""</b>"" +
                                      ""<br>"" + secondary, title,
                                      JOptionPane.WARNING_MESSAGE);
      } else {
        // Pane formatting adapted from the Quaqua guide
        // http://www.randelshofer.ch/quaqua/guide/joptionpane.html
        JOptionPane pane =
          new JOptionPane(""<html> "" +
                          ""<head> <style type=\""text/css\"">""+
                          ""b { font: 13pt \""Lucida Grande\"" }""+
                          ""p { font: 11pt \""Lucida Grande\""; margin-top: 8px; width: 300px }""+
                          ""</style> </head>"" +
                          ""<b>"" + primary + ""</b>"" +
                          ""<p>"" + secondary + ""</p>"",
                          JOptionPane.WARNING_MESSAGE);

//        String[] options = new String[] {
//            ""Yes"", ""No""
//        };
//        pane.setOptions(options);

        // highlight the safest option ala apple hig
//        pane.setInitialValue(options[0]);

        JDialog dialog = pane.createDialog(new JFrame(), null);
        dialog.setVisible(true);

//        Object result = pane.getValue();
//        if (result == options[0]) {
//          return JOptionPane.YES_OPTION;
//        } else if (result == options[1]) {
//          return JOptionPane.NO_OPTION;
//        } else {
//          return JOptionPane.CLOSED_OPTION;
//        }
      }
    }
    if (e != null) e.printStackTrace();
  }",False,False,"The function serves to display a non-fatal warning message with an optional stack trace side dish. It takes a title, primary and secondary message, and an optional Throwable object as parameters. The method displays the warning message using either the command line or a JOptionPane dialog. If an exception is provided, it also prints the stack trace.","The code defines a static method called ""showWarningTiered"" that displays a non-fatal warning message with an optional stack trace. The method uses different implementations depending on the operating system, either printing the message to the console or showing a dialog box with the message."
112,"showError(String,String,Throwable)",show error title message e show an error message that s actually fatal to the program this is an error that can t be recovered use show warning for errors that allow p5 to continue running ,Method,createAndShowGUI(String[]) initPlatform() getSettingsFolder() getSettingsFolder() getDefaultSketchbookFolder() getDefaultSketchbookFolder(),"processing.app.Mode+setupGUI() processing.app.Preferences+init() processing.app.Preferences+init() processing.app.ui.ChangeDetector+run() processing.app.ui.Toolkit+createFont(String,int) processing.mode.java.runner.Runner+findConnector(String)","java.io.PrintStream+println(String) java.io.PrintStream+println(String) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) java.awt.Frame+Frame() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.lang.System+exit(int) java.lang.System+exit(int)",processing.app.Base+commandLine java.lang.System+err javax.swing.JOptionPane+ERROR_MESSAGE,593,18,9,"/** 
 * Show an error message that's actually fatal to the program. This is an error that can't be recovered. Use showWarning() for errors that allow P5 to continue running.
 */
","/**
   * Show an error message that's actually fatal to the program.
   * This is an error that can't be recovered. Use showWarning()
   * for errors that allow P5 to continue running.
   */
  static public void showError(String title, String message, Throwable e) {
    if (title == null) title = ""Error"";

    if (commandLine) {
      System.err.println(title + "": "" + message);

    } else {
      JOptionPane.showMessageDialog(new Frame(), message, title,
                                    JOptionPane.ERROR_MESSAGE);
    }
    if (e != null) e.printStackTrace();
    System.exit(1);
  }",False,False,"The function showError displays an error message that is fatal to the program. It takes a title, message, and throwable object as parameters. If the program is running from the command line, it prints the error message to the standard error stream. Otherwise, it displays a dialog box with the error message. If a throwable object is provided, it prints the stack trace. Finally, it exits the program with a status code of 1.","The code defines a static method called `showError` that displays an error message and terminates the program. It takes in a title, message, and an optional `Throwable` object for additional information. If running from the command line, the error message is printed to the standard error stream, otherwise, it is displayed in a dialog box."
113,"showBadnessTrace(String,String,Throwable,boolean)",show badness trace title message t fatal testing a new warning window that includes the stack trace ,Method,"handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState) handleOpen(String,boolean,EditorState)",,"java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.io.StringWriter+StringWriter() java.lang.Throwable+printStackTrace(PrintWriter) java.lang.Throwable+printStackTrace(PrintWriter) java.io.PrintWriter+PrintWriter(Writer) java.lang.String+replaceAll(String,String) java.lang.String+replaceAll(String,String) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) javax.swing.JOptionPane+showMessageDialog(Component,Object,String,int) java.awt.Frame+Frame() java.lang.System+exit(int) java.lang.System+exit(int)",processing.app.Base+commandLine java.lang.System+err javax.swing.JOptionPane+ERROR_MESSAGE javax.swing.JOptionPane+WARNING_MESSAGE,1096,32,10,"/** 
 * Testing a new warning window that includes the stack trace.
 */
","/**
   * Testing a new warning window that includes the stack trace.
   */
  static private void showBadnessTrace(String title, String message,
                                       Throwable t, boolean fatal) {
    if (title == null) title = fatal ? ""Error"" : ""Warning"";

    if (commandLine) {
      System.err.println(title + "": "" + message);
      if (t != null) {
        t.printStackTrace();
      }

    } else {
      StringWriter sw = new StringWriter();
      t.printStackTrace(new PrintWriter(sw));
      // Necessary to replace \n with <br/> (even if pre) otherwise Java
      // treats it as a closed tag and reverts to plain formatting.
      message = (""<html>"" + message +
                 ""<br/><font size=2><br/>"" +
                 sw + ""</html>"").replaceAll(""\n"", ""<br/>"");

      JOptionPane.showMessageDialog(new Frame(), message, title,
                                    fatal ?
                                    JOptionPane.ERROR_MESSAGE :
                                    JOptionPane.WARNING_MESSAGE);

      if (fatal) {
        System.exit(1);
      }
    }
  }",False,False,"The function of the method is to display a warning or error message with a stack trace. It can be used to show a warning or error message in a command line environment or in a graphical user interface using a JOptionPane. If the error is fatal, the method also exits the program.","The code defines a method called ""showBadnessTrace"" that displays a warning or error message with a stack trace. It takes in parameters for the title, message, throwable object, and a boolean indicating if it is a fatal error. The method handles the display differently depending on whether it is being run from the command line or not."
114,"showYesNoCancelQuestion(Editor,String,String,String)",show yes no cancel question editor title primary secondary ,Method,,,"processing.app.Base+isMacOS() processing.app.Base+isMacOS() javax.swing.JOptionPane+showConfirmDialog(Component,Object,String,int,int) javax.swing.JOptionPane+showConfirmDialog(Component,Object,String,int,int) javax.swing.JOptionPane+JOptionPane(Object,int) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) processing.app.Language+text(String) javax.swing.JOptionPane+setOptions(Object[]) javax.swing.JOptionPane+setOptions(Object[]) javax.swing.JOptionPane+setInitialValue(Object) javax.swing.JOptionPane+setInitialValue(Object) javax.swing.JComponent+putClientProperty(Object,Object) javax.swing.JComponent+putClientProperty(Object,Object) java.lang.Integer+valueOf(int) java.lang.Integer+valueOf(int) javax.swing.JOptionPane+createDialog(Component,String) javax.swing.JOptionPane+createDialog(Component,String) java.awt.Dialog+setVisible(boolean) java.awt.Dialog+setVisible(boolean) javax.swing.JOptionPane+getValue() javax.swing.JOptionPane+getValue()",javax.swing.JOptionPane+YES_NO_CANCEL_OPTION javax.swing.JOptionPane+QUESTION_MESSAGE javax.swing.JOptionPane+QUESTION_MESSAGE javax.swing.JOptionPane+YES_OPTION javax.swing.JOptionPane+CANCEL_OPTION javax.swing.JOptionPane+NO_OPTION javax.swing.JOptionPane+CLOSED_OPTION,2343,61,9,,"static public int showYesNoCancelQuestion(Editor editor, String title,
                                            String primary, String secondary) {
    if (!Base.isMacOS()) {
      int result =
        JOptionPane.showConfirmDialog(null, primary + ""\n"" + secondary, title,
                                      JOptionPane.YES_NO_CANCEL_OPTION,
                                      JOptionPane.QUESTION_MESSAGE);
      return result;
//    if (result == JOptionPane.YES_OPTION) {
//
//    } else if (result == JOptionPane.NO_OPTION) {
//      return true;  // ok to continue
//
//    } else if (result == JOptionPane.CANCEL_OPTION) {
//      return false;
//
//    } else {
//      throw new IllegalStateException();
//    }

    } else {
      // Pane formatting adapted from the Quaqua guide
      // http://www.randelshofer.ch/quaqua/guide/joptionpane.html
      JOptionPane pane =
        new JOptionPane(""<html> "" +
                        ""<head> <style type=\""text/css\"">""+
                        ""b { font: 13pt \""Lucida Grande\"" }""+
                        ""p { font: 11pt \""Lucida Grande\""; margin-top: 8px; width: 300px }""+
                        ""</style> </head>"" +
                        ""<b>"" + Language.text(""save.title"") + ""</b>"" +
                        ""<p>"" + Language.text(""save.hint"") + ""</p>"",
                        JOptionPane.QUESTION_MESSAGE);

      String[] options = new String[] {
          Language.text(""save.btn.save""), Language.text(""prompt.cancel""), Language.text(""save.btn.dont_save"")
      };
      pane.setOptions(options);

      // highlight the safest option ala apple hig
      pane.setInitialValue(options[0]);

      // on macosx, setting the destructive property places this option
      // away from the others at the lefthand side
      pane.putClientProperty(""Quaqua.OptionPane.destructiveOption"",
                             Integer.valueOf(2));

      JDialog dialog = pane.createDialog(editor, null);
      dialog.setVisible(true);

      Object result = pane.getValue();
      if (result == options[0]) {
        return JOptionPane.YES_OPTION;
      } else if (result == options[1]) {
        return JOptionPane.CANCEL_OPTION;
      } else if (result == options[2]) {
        return JOptionPane.NO_OPTION;
      } else {
        return JOptionPane.CLOSED_OPTION;
      }
    }
  }",False,False,The function serves to display a dialog box with a yes/no/cancel question to the user. The user's response is returned as an integer value representing the chosen option.,"The code defines a method called ""showYesNoCancelQuestion"" that displays a dialog box with a question and three options (Yes, No, and Cancel). The behavior of the dialog box differs depending on the operating system. The method returns the user's selection as an integer value."
115,"showYesNoQuestion(Frame,String,String,String)",show yes no question editor title primary secondary ,Method,,"processing.app.contrib.ContributionManagerDialog+actionPerformed(ActionEvent) processing.app.contrib.LocalContribution+copyAndLoad(Base,boolean,StatusPanel) processing.app.contrib.LocalContribution+copyAndLoad(Base,boolean,StatusPanel) processing.app.ui.ChangeDetector+run() processing.mode.java.JavaEditor+downloadImports() processing.mode.java.JavaEditor+stopTweakMode(List<List<Handle>>)","processing.app.Base+isMacOS() processing.app.Base+isMacOS() javax.swing.JOptionPane+showConfirmDialog(Component,Object,String,int,int) javax.swing.JOptionPane+showConfirmDialog(Component,Object,String,int,int) javax.swing.JOptionPane+JOptionPane(Object,int) javax.swing.JOptionPane+setOptions(Object[]) javax.swing.JOptionPane+setOptions(Object[]) javax.swing.JOptionPane+setInitialValue(Object) javax.swing.JOptionPane+setInitialValue(Object) javax.swing.JOptionPane+createDialog(Component,String) javax.swing.JOptionPane+createDialog(Component,String) java.awt.Dialog+setVisible(boolean) java.awt.Dialog+setVisible(boolean) javax.swing.JOptionPane+getValue() javax.swing.JOptionPane+getValue()",javax.swing.JOptionPane+YES_NO_OPTION javax.swing.JOptionPane+QUESTION_MESSAGE javax.swing.JOptionPane+QUESTION_MESSAGE javax.swing.JOptionPane+YES_OPTION javax.swing.JOptionPane+NO_OPTION javax.swing.JOptionPane+CLOSED_OPTION,1721,43,9,,"static public int showYesNoQuestion(Frame editor, String title,
                                      String primary, String secondary) {
    if (!Base.isMacOS()) {
      return JOptionPane.showConfirmDialog(editor,
                                           ""<html><body>"" +
                                           ""<b>"" + primary + ""</b>"" +
                                           ""<br>"" + secondary, title,
                                           JOptionPane.YES_NO_OPTION,
                                           JOptionPane.QUESTION_MESSAGE);
    } else {
      // Pane formatting adapted from the Quaqua guide
      // http://www.randelshofer.ch/quaqua/guide/joptionpane.html
      JOptionPane pane =
        new JOptionPane(""<html> "" +
                        ""<head> <style type=\""text/css\"">""+
                        ""b { font: 13pt \""Lucida Grande\"" }""+
                        ""p { font: 11pt \""Lucida Grande\""; margin-top: 8px; width: 300px }""+
                        ""</style> </head>"" +
                        ""<b>"" + primary + ""</b>"" +
                        ""<p>"" + secondary + ""</p>"",
                        JOptionPane.QUESTION_MESSAGE);

      String[] options = new String[] {
        ""Yes"", ""No""
      };
      pane.setOptions(options);

      // highlight the safest option ala apple hig
      pane.setInitialValue(options[0]);

      JDialog dialog = pane.createDialog(editor, null);
      dialog.setVisible(true);

      Object result = pane.getValue();
      if (result == options[0]) {
        return JOptionPane.YES_OPTION;
      } else if (result == options[1]) {
        return JOptionPane.NO_OPTION;
      } else {
        return JOptionPane.CLOSED_OPTION;
      }
    }
  }",False,False,"The function serves to display a yes/no question dialog box with a given title, primary message, and secondary message. It returns the user's choice as an integer value: JOptionPane.YES_OPTION, JOptionPane.NO_OPTION, or JOptionPane.CLOSED_OPTION.",This code defines a method called `showYesNoQuestion` that displays a dialog box with a yes/no question. The appearance and behavior of the dialog box is different depending on whether the operating system is macOS or not. The method returns the user's choice as an integer value.
116,processingRoot,processing root ,Field,,,,,37,1,12,,static protected File processingRoot;,True,True,,
117,getContentFile(String),get content file name get reference to a file adjacent to the executable on windows and linux or inside contents resources java on mac os x this will return the local jre location whether or not it is the active jre ,Method,createAndShowGUI(String[]) buildCoreModes() getToolsFolder() getJavaHome(),processing.app.Mode+setupGUI() processing.app.tools.InstallCommander+run() processing.app.ui.Toolkit+getLibIcon(String) processing.app.ui.Welcome+getIndexFile(boolean) processing.mode.java.Commander+Commander(String[]) processing.mode.java.JavaMode+getCoreLibrary(),"java.net.URL+getPath() java.security.CodeSource+getLocation() java.security.ProtectionDomain+getCodeSource() java.lang.Class+getProtectionDomain() java.lang.Class+getProtectionDomain() java.security.ProtectionDomain+getCodeSource() java.security.CodeSource+getLocation() java.net.URL+getPath() processing.core.PApplet+urlDecode(String) processing.core.PApplet+urlDecode(String) java.lang.String+contains(CharSequence) java.lang.String+contains(CharSequence) processing.app.Base+isMacOS() processing.app.Base+isMacOS() java.io.File+File(String,String) processing.app.Base+isWindows() processing.app.Base+isWindows() java.io.File+File(String,String) processing.app.Base+isLinux() processing.app.Base+isLinux() java.io.File+File(String,String) java.io.File+getParentFile() java.io.File+File(String) java.io.File+getParentFile() java.lang.String+equals(Object) java.io.File+getName() java.io.File+getName() java.lang.String+equals(Object) java.io.File+getParentFile() java.io.File+getParentFile() processing.app.Base+isMacOS() processing.app.Base+isMacOS() java.io.File+exists() java.io.File+exists() java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath() java.io.File+File(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.io.File+File(File,String)",processing.app.Base+processingRoot processing.app.Base+processingRoot processing.app.Base+processingRoot processing.app.Base+processingRoot processing.app.Base+processingRoot processing.app.Base+processingRoot processing.app.Base+processingRoot processing.app.Base+processingRoot java.lang.System+err processing.app.Base+processingRoot processing.app.Base+processingRoot,2055,44,9,"/** 
 * Get reference to a file adjacent to the executable on Windows and Linux, or inside Contents/Resources/Java on Mac OS X. This will return the local JRE location, *whether or not it is the active JRE*.
 */
","/**
   * Get reference to a file adjacent to the executable on Windows and Linux,
   * or inside Contents/Resources/Java on Mac OS X. This will return the local
   * JRE location, *whether or not it is the active JRE*.
   */
  static public File getContentFile(String name) {
    if (processingRoot == null) {
      // Get the path to the .jar file that contains Base.class
      String path = Base.class.getProtectionDomain().getCodeSource().getLocation().getPath();
      // Path may have URL encoding, so remove it
      String decodedPath = PApplet.urlDecode(path);

      if (decodedPath.contains(""/app/bin"")) {  // This means we're in Eclipse
        if (Base.isMacOS()) {
          processingRoot =
            new File(path, ""../../build/macosx/work/Processing.app/Contents/Java"");
        } else if (Base.isWindows()) {
          processingRoot =  new File(path, ""../../build/windows/work"");
        } else if (Base.isLinux()) {
          processingRoot =  new File(path, ""../../build/linux/work"");
        }
      } else {
        // The .jar file will be in the lib folder
        File jarFolder = new File(decodedPath).getParentFile();
        if (jarFolder.getName().equals(""lib"")) {
          // The main Processing installation directory.
          // This works for Windows, Linux, and Apple's Java 6 on OS X.
          processingRoot = jarFolder.getParentFile();
        } else if (Base.isMacOS()) {
          // This works for Java 8 on OS X. We don't have things inside a 'lib'
          // folder on OS X. Adding it caused more problems than it was worth.
          processingRoot = jarFolder;
        }
        if (processingRoot == null || !processingRoot.exists()) {
          // Try working directory instead (user.dir, different from user.home)
          System.err.println(""Could not find lib folder via "" +
            jarFolder.getAbsolutePath() +
            "", switching to user.dir"");
          processingRoot = new File(System.getProperty(""user.dir""));
        }
      }
    }
    return new File(processingRoot, name);
  }",False,True,"This method returns a File object that represents a file adjacent to the executable. The location of the file depends on the operating system. It is used to get the local JRE location, regardless of whether it is the active JRE or not.",The `getContentFile` method returns a `File` object that represents a file adjacent to the executable. It determines the location of the executable and constructs the file path based on the operating system and the location of the executable.
118,getJavaHome(),get java home ,Method,,"processing.app.ui.Toolkit+createFont(String,int) processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean) processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean) processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean) processing.mode.java.JavaBuild+exportApplication(File,int,String,boolean)","processing.app.Base+isMacOS() processing.app.Base+isMacOS() java.io.File+listFiles(FilenameFilter) processing.app.Base+getContentFile(String) processing.app.Base+getContentFile(String) java.io.File+listFiles(FilenameFilter) +() +accept(File,String)",,569,14,9,,"static public File getJavaHome() {
    if (isMacOS()) {
      //return ""Contents/PlugIns/jdk1.7.0_40.jdk/Contents/Home/jre/bin/java"";
      File[] plugins = getContentFile(""../PlugIns"").listFiles(new FilenameFilter() {
        public boolean accept(File dir, String name) {
          return dir.isDirectory() &&
            name.endsWith("".jdk"") && !name.startsWith(""."");
        }
      });
      return new File(plugins[0], ""Contents/Home/jre"");
    }
    // On all other platforms, it's the 'java' folder adjacent to Processing
    return getContentFile(""java"");
  }",False,True,"The function `getJavaHome()` returns the path to the Java home directory. On macOS, it searches for the Java home directory within the PlugIns folder. On other platforms, it assumes the Java home directory is located in the adjacent 'java' folder.","The code defines a static method named `getJavaHome()` that returns the path to the Java home directory. If the operating system is macOS, it searches for a JDK plugin in the PlugIns directory and returns the path to the Java home directory within the plugin. Otherwise, it returns the path to the adjacent ""java"" folder."
119,getJavaPath(),get java path get the path to the embedded java executable ,Method,,processing.app.tools.InstallCommander+run() processing.mode.java.runner.Runner+launchVirtualMachine(boolean),"processing.app.Base+isWindows() processing.app.Base+isWindows() java.io.File+File(File,String) processing.app.Base+getJavaHome() processing.app.Base+getJavaHome() java.io.File+getCanonicalPath() java.io.File+getCanonicalPath() java.io.File+getAbsolutePath() java.io.File+getAbsolutePath()",,343,10,9,"/** 
 * Get the path to the embedded Java executable. 
 */
","/** Get the path to the embedded Java executable. */
  static public String getJavaPath() {
    String javaPath = ""bin/java"" + (isWindows() ? "".exe"" : """");
    File javaFile = new File(getJavaHome(), javaPath);
    try {
      return javaFile.getCanonicalPath();
    } catch (IOException e) {
      return javaFile.getAbsolutePath();
    }
  }",True,True,"This method returns the path to the embedded Java executable. It checks if the operating system is Windows and appends "".exe"" to the path if true. It then creates a File object using the Java home directory and the modified path. It tries to return the canonical path, but if an IOException occurs, it returns the absolute path.","This code defines a static method called ""getJavaPath"" that returns the path to the embedded Java executable. It constructs the path by appending "".exe"" if the operating system is Windows, and then returns the canonical path of the Java file if it exists, or the absolute path if an IOException occurs."
120,getLibFile(String),get lib file filename return a file from inside the processing lib folder ,Method,,processing.app.Language+LanguageBundle.LanguageBundle(String) processing.app.Language+LanguageBundle.LanguageBundle(String) processing.app.ui.Welcome+getIndexFile(boolean),"java.io.File+File(File,String) processing.app.Base+getContentFile(String) processing.app.Base+getContentFile(String)",,197,6,9,"/** 
 * Return a File from inside the Processing 'lib' folder.
 */
","/**
   * Return a File from inside the Processing 'lib' folder.
   */
  static public File getLibFile(String filename) throws IOException {
    return new File(getContentFile(""lib""), filename);
  }",False,False,"This method returns a File object from the ""lib"" folder inside the Processing library. It takes a filename as input and uses the getContentFile method to get the path to the ""lib"" folder, then creates a new File object with the given filename.",The given code is a static method that returns a File object from the 'lib' folder inside the Processing library. It takes a filename as input and throws an IOException if the file is not found.
121,getLibStream(String),get lib stream filename return an input stream for a file inside the processing lib folder ,Method,,processing.app.Preferences+init(),java.io.FileInputStream+FileInputStream(File) processing.app.Base+getLibFile(String) processing.app.Base+getLibFile(String),,218,6,9,"/** 
 * Return an InputStream for a file inside the Processing lib folder.
 */
","/**
   * Return an InputStream for a file inside the Processing lib folder.
   */
  static public InputStream getLibStream(String filename) throws IOException {
    return new FileInputStream(getLibFile(filename));
  }",False,False,The function serves to return an InputStream for a file inside the Processing lib folder. It takes a filename as input and throws an IOException if there is an error.,"The code defines a static method named ""getLibStream"" that takes a filename as input and returns an InputStream object. This method is used to retrieve an InputStream for a file located inside the Processing library folder."
122,"log(Object,String)",log from message ,Method,,processing.app.SingleInstance+run() processing.app.SingleInstance+run() processing.app.SingleInstance+run() processing.app.SingleInstance+run() processing.app.ui.Recent+load(),java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Class+getName() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getName(),processing.app.Base+DEBUG java.lang.System+out,150,5,9,,"static public void log(Object from, String message) {
    if (DEBUG) {
      System.out.println(from.getClass().getName() + "": "" + message);
    }
  }",False,False,"This method logs a message with the class name of the object and the message itself, if the DEBUG flag is set to true.","The code defines a static method called ""log"" that takes an object and a string as parameters. If the DEBUG flag is set to true, it prints the name of the object's class followed by the message to the console."
123,log(String),log message ,Method,createAndShowGUI(String[]) Base(String[]),"processing.app.contrib.LocalContribution+LocalContribution(File) processing.app.contrib.LocalContribution+initLoader(String) processing.app.contrib.LocalContribution+initLoader(String) processing.app.contrib.LocalContribution+initLoader(String) processing.app.contrib.ModeContribution+load(Base,File,String) processing.app.contrib.ModeContribution+ModeContribution(Base,File,String) processing.app.contrib.ModeContribution+loadMissing(Base) processing.app.contrib.ModeContribution+initLoader(Base,String) processing.app.contrib.ModeContribution+initLoader(Base,String) processing.app.contrib.ModeContribution+initLoader(Base,String) processing.app.contrib.ModeContribution+initLoader(Base,String) processing.app.contrib.ToolContribution+load(File) processing.app.platform.MacPlatform+saveLanguage(String) processing.app.platform.WindowsPlatform+setAssociations() processing.app.Preferences+getFont(String) processing.app.Settings+getFont(String) processing.app.ui.PreferencesFrame+applyFrame() processing.app.ui.PreferencesFrame+applyFrame() processing.mode.java.debug.LineBreakpoint+classLoaded(ReferenceType) processing.mode.java.debug.LineBreakpoint+classLoaded(ReferenceType) processing.mode.java.JavaEditor+handleRefactor() processing.mode.java.JavaEditor+handleShowUsage() processing.mode.java.JavaEditor+applyPreferences() processing.mode.java.JavaMode+loadPreferences() processing.mode.java.JavaMode+savePreferences() processing.mode.java.pdex.ASTGenerator+valueChanged(TreeSelectionEvent) processing.mode.java.pdex.ASTGenerator+log(Object) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavaCodeOffsets(ErrorCheckerService) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(FieldDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(FieldDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(FieldDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(FieldDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(FieldDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(MethodDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(MethodDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(MethodDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(MethodDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(MethodDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(TypeDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(TypeDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(TypeDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(TypeDeclaration) processing.mode.java.pdex.ASTNodeWrapper+getJavadocOffset(TypeDeclaration) processing.mode.java.pdex.ASTNodeWrapper+createOffsetMapping(ErrorCheckerService,String,int,int) processing.mode.java.pdex.ASTNodeWrapper+createOffsetMapping(ErrorCheckerService,String,int,int) processing.mode.java.pdex.ASTNodeWrapper+getOffsetMapping(ErrorCheckerService,String) processing.mode.java.pdex.ASTNodeWrapper+getOffsetMapping(ErrorCheckerService,String) processing.mode.java.pdex.ASTNodeWrapper+getOffsetMapping(ErrorCheckerService,String) processing.mode.java.pdex.ASTNodeWrapper+getOffsetMapping(ErrorCheckerService,String) processing.mode.java.pdex.ASTNodeWrapper+getOffsetMapping(ErrorCheckerService,String) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+getPDECodeOffsetForSN(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+getJavaCode(String) processing.mode.java.pdex.ASTNodeWrapper+getJavaCode(String) processing.mode.java.pdex.CompletionPanel+insertSelection(int) processing.mode.java.pdex.CompletionPanel+CustomListRenderer.getListCellRendererComponent(JList<?>,Object,int,boolean,boolean) processing.mode.java.pdex.CompletionPanel+CustomListRenderer.getListCellRendererComponent(JList<?>,Object,int,boolean,boolean) processing.mode.java.pdex.ErrorCheckerService+run() processing.mode.java.pdex.ErrorCheckerService+run() processing.mode.java.pdex.ErrorCheckerService+run() processing.mode.java.pdex.ErrorCheckerService+checkForMissingImports() processing.mode.java.pdex.ErrorCheckerService+checkCode() processing.mode.java.pdex.ErrorCheckerService+checkCode() processing.mode.java.pdex.ErrorCheckerService+calcPdeOffsetsForProbList() processing.mode.java.pdex.ErrorCheckerService+calcPdeOffsetsForProbList() processing.mode.java.pdex.ErrorCheckerService+preprocessCode(String) processing.mode.java.pdex.ErrorCheckerService+highlightNode(ASTNodeWrapper) processing.mode.java.pdex.ErrorCheckerService+highlightNode(ASTNodeWrapper) processing.mode.java.pdex.ErrorCheckerService+scrollToErrorLine(Editor,int,int,int,int) processing.mode.java.pdex.ErrorCheckerService+handleErrorCheckingToggle() processing.mode.java.pdex.ErrorCheckerService+handleErrorCheckingToggle() processing.mode.java.pdex.JavaTextArea+processKeyEvent(KeyEvent) processing.mode.java.pdex.JavaTextArea+processKeyEvent(KeyEvent) processing.mode.java.pdex.JavaTextArea+processKeyEvent(KeyEvent) processing.mode.java.pdex.JavaTextArea+doInBackground() processing.mode.java.pdex.JavaTextArea+doInBackground() processing.mode.java.pdex.JavaTextArea+processCompletionKeys(KeyEvent) processing.mode.java.pdex.JavaTextArea+processCompletionKeys(KeyEvent) processing.mode.java.pdex.JavaTextArea+doInBackground() processing.mode.java.pdex.JavaTextArea+doInBackground() processing.mode.java.pdex.JavaTextArea+doInBackground() processing.mode.java.pdex.JavaTextArea+doInBackground() processing.mode.java.pdex.JavaTextArea+fetchPhrase(MouseEvent) processing.mode.java.pdex.JavaTextArea+fetchPhrase(MouseEvent) processing.mode.java.pdex.JavaTextArea+fetchPhrase(MouseEvent) processing.mode.java.pdex.JavaTextArea+fetchPhrase(KeyEvent) processing.mode.java.pdex.JavaTextArea+fetchPhrase(KeyEvent) processing.mode.java.pdex.JavaTextArea+fetchPhrase(KeyEvent) processing.mode.java.pdex.JavaTextArea+showSuggestion(DefaultListModel<CompletionCandidate>,String) processing.mode.java.pdex.JavaTextAreaPainter+handleCtrlClick(MouseEvent) processing.mode.java.pdex.JavaTextAreaPainter+handleCtrlClick(MouseEvent) processing.mode.java.pdex.JavaTextAreaPainter+handleCtrlClick(MouseEvent) processing.mode.java.pdex.JavaTextAreaPainter+paintLine(Graphics,int,int,TokenMarker) processing.mode.java.pdex.XQErrorTable+mouseClicked(MouseEvent) processing.mode.java.pdex.XQErrorTable+valueChanged(ListSelectionEvent) processing.mode.java.pdex.XQErrorTable+valueChanged(ListSelectionEvent)",java.io.PrintStream+println(String) java.io.PrintStream+println(String),processing.app.Base+DEBUG java.lang.System+out,102,5,9,,"static public void log(String message) {
    if (DEBUG) {
      System.out.println(message);
    }
  }",False,False,This method logs a message if the DEBUG flag is set to true.,"The code defines a static method called ""log"" that takes a string message as input. If the DEBUG flag is set to true, the method prints the message to the console. This method is used for logging purposes and can be easily enabled or disabled by changing the DEBUG flag."
124,"logf(String,Object)",logf message args ,Method,,,"java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.String+format(String,Object[]) java.lang.String+format(String,Object[])",processing.app.Base+DEBUG java.lang.System+out,140,5,9,,"static public void logf(String message, Object... args) {
    if (DEBUG) {
      System.out.println(String.format(message, args));
    }
  }",False,False,This method logs a formatted message to the console if the DEBUG flag is set to true. It takes a message string and optional arguments to be formatted into the message.,"The code defines a static method called ""logf"" that takes a message and variable number of arguments. If the DEBUG flag is true, it prints the formatted message to the console using the provided arguments."
125,"loge(String,Throwable)",loge message e ,Method,createAndShowGUI(String[]),"processing.app.contrib.ModeContribution+load(Base,File,String) processing.app.syntax.JEditTextArea+DragHandler.mouseDragged(MouseEvent) processing.app.ui.Editor+actionPerformed(ActionEvent) processing.app.ui.Editor+addTools(JMenu,List<ToolContribution>) processing.app.ui.Editor+addTools(JMenu,List<ToolContribution>) processing.app.ui.Toolkit+getMonoFont(int,int) processing.app.ui.Toolkit+getSansFont(int,int) processing.mode.java.pdex.ErrorCheckerService+updateErrorTable() processing.mode.java.pdex.ErrorCheckerService+scrollToErrorLine(Problem)",java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),processing.app.Base+DEBUG java.lang.System+err,143,6,9,,"static public void loge(String message, Throwable e) {
    if (DEBUG) {
      System.err.println(message);
      e.printStackTrace();
    }
  }",False,False,This method logs an error message and the stack trace of an exception if the DEBUG flag is set to true.,"The given code defines a static method named ""loge"" that takes a message and a Throwable object as parameters. If the DEBUG flag is true, it prints the message to the error stream and then prints the stack trace of the Throwable object."
126,loge(String),loge message ,Method,,"processing.mode.java.JavaEditor+addBreakpointComments(String) processing.mode.java.pdex.ASTGenerator+buildAST(String,CompilationUnit) processing.mode.java.pdex.ASTGenerator+preparePredictions(String,int,int) processing.mode.java.pdex.ASTGenerator+preparePredictions(String,int,int) processing.mode.java.pdex.ASTGenerator+preparePredictions(String,int,int) processing.mode.java.pdex.ASTGenerator+preparePredictions(String,int,int) processing.mode.java.pdex.ASTGenerator+getJavaSourceCodeLine(int) processing.mode.java.pdex.ASTGenerator+getJavaSourceCodeElement(int) processing.mode.java.pdex.ASTGenerator+getASTNodeAt(int,String,int,boolean) processing.mode.java.pdex.ASTGenerator+findAllOccurrences() processing.mode.java.pdex.ASTGenerator+findAllOccurrences() processing.mode.java.pdex.ASTGenerator+isInstanceOfType(ASTNode,ASTNode,String) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.ASTNodeWrapper+highlightNode(ASTGenerator) processing.mode.java.pdex.CompletionPanel+insertSelection(int) processing.mode.java.pdex.ErrorCheckerService+run() processing.mode.java.pdex.ErrorCheckerService+highlightNode(ASTNodeWrapper) processing.mode.java.pdex.ErrorCheckerService+stopThread()",java.io.PrintStream+println(String) java.io.PrintStream+println(String),processing.app.Base+DEBUG java.lang.System+out,103,5,9,,"static public void loge(String message) {
    if (DEBUG) {
      System.out.println(message);
    }
  }",False,False,This method logs a message to the console if the DEBUG flag is set to true.,"The code defines a static method called ""loge"" that takes a string message as input. If the DEBUG flag is set to true, the method prints the message to the console. This method is used for logging purposes in a Java program."
