index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,LOGGER,Field,,,,,80,1,28,,protected static final Logger LOGGER = LoggerFactory.getLogger(BpmnParse.class);,False
2,PROPERTYNAME_DOCUMENTATION,Field,,,,,72,1,25,,"public static final String PROPERTYNAME_DOCUMENTATION = ""documentation"";",False
3,PROPERTYNAME_INITIAL,Field,,,,,60,1,25,,"public static final String PROPERTYNAME_INITIAL = ""initial"";",False
4,PROPERTYNAME_INITIATOR_VARIABLE_NAME,Field,,,,,90,1,25,,"public static final String PROPERTYNAME_INITIATOR_VARIABLE_NAME = ""initiatorVariableName"";",False
5,PROPERTYNAME_CONDITION,Field,,,,,64,1,25,,"public static final String PROPERTYNAME_CONDITION = ""condition"";",False
6,PROPERTYNAME_CONDITION_TEXT,Field,,,,,73,1,25,,"public static final String PROPERTYNAME_CONDITION_TEXT = ""conditionText"";",False
7,PROPERTYNAME_VARIABLE_DECLARATIONS,Field,,,,,87,1,25,,"public static final String PROPERTYNAME_VARIABLE_DECLARATIONS = ""variableDeclarations"";",False
8,PROPERTYNAME_TIMER_DECLARATION,Field,,,,,80,1,25,,"public static final String PROPERTYNAME_TIMER_DECLARATION = ""timerDeclarations"";",False
9,PROPERTYNAME_ISEXPANDED,Field,,,,,66,1,25,,"public static final String PROPERTYNAME_ISEXPANDED = ""isExpanded"";",False
10,PROPERTYNAME_START_TIMER,Field,,,,,67,1,25,,"public static final String PROPERTYNAME_START_TIMER = ""timerStart"";",False
11,PROPERTYNAME_COMPENSATION_HANDLER_ID,Field,,,,,88,1,25,,"public static final String PROPERTYNAME_COMPENSATION_HANDLER_ID = ""compensationHandler"";",False
12,PROPERTYNAME_IS_FOR_COMPENSATION,Field,,,,,82,1,25,,"public static final String PROPERTYNAME_IS_FOR_COMPENSATION = ""isForCompensation"";",False
13,PROPERTYNAME_ERROR_EVENT_DEFINITIONS,Field,,,,,90,1,25,,"public static final String PROPERTYNAME_ERROR_EVENT_DEFINITIONS = ""errorEventDefinitions"";",False
14,PROPERTYNAME_EVENT_SUBSCRIPTION_DECLARATION,Field,,,,,92,1,25,,"public static final String PROPERTYNAME_EVENT_SUBSCRIPTION_DECLARATION = ""eventDefinitions"";",False
15,POTENTIAL_STARTER,Field,,,,,69,1,28,,"protected static final String POTENTIAL_STARTER = ""potentialStarter"";",False
16,CANDIDATE_STARTER_USERS_EXTENSION,Field,,,,,90,1,28,,"protected static final String CANDIDATE_STARTER_USERS_EXTENSION = ""candidateStarterUsers"";",False
17,CANDIDATE_STARTER_GROUPS_EXTENSION,Field,,,,,92,1,28,,"protected static final String CANDIDATE_STARTER_GROUPS_EXTENSION = ""candidateStarterGroups"";",False
18,ATTRIBUTEVALUE_T_FORMAL_EXPRESSION,Field,,,,,111,1,28,,"protected static final String ATTRIBUTEVALUE_T_FORMAL_EXPRESSION = BpmnParser.BPMN20_NS + "":tFormalExpression"";",False
19,name,Field,name(String),,,,22,1,4,,protected String name;,False
20,streamSource,Field,setStreamSource(StreamSource) setStreamSource(StreamSource) setStreamSource(StreamSource),,,,36,1,4,,protected StreamSource streamSource;,False
21,bpmnModel,Field,,,,,30,1,4,,protected BpmnModel bpmnModel;,False
22,targetNamespace,Field,createIOSpecification(org.activiti.bpmn.model.IOSpecification) createIOSpecification(org.activiti.bpmn.model.IOSpecification),,,,33,1,4,,protected String targetNamespace;,False
23,deployment,Field,deployment(DeploymentEntity),,,,117,2,4,"/** 
 * The deployment to which the parsed process definitions will be added. 
 */
","/** The deployment to which the parsed process definitions will be added. */
  protected DeploymentEntity deployment;",False
24,processDefinitions,Field,,,,,172,2,4,"/** 
 * The end result of the parsing: a list of process definition. 
 */
","/** The end result of the parsing: a list of process definition. */
  protected List<ProcessDefinitionEntity> processDefinitions = new ArrayList<ProcessDefinitionEntity>();",False
25,sequenceFlows,Field,,,,,127,2,4,"/** 
 * A map for storing sequence flow based on their id during parsing. 
 */
","/** A map for storing sequence flow based on their id during parsing. */
  protected Map<String, TransitionImpl> sequenceFlows;",False
26,messages,Field,createMessages() createOperations() createOperations() createOperations() createOperations(),,,,417,9,4,"/** 
 * Mapping containing values stored during the first phase of parsing since other elements can reference these messages. All the map's elements are defined outside the process definition(s), which means that this map doesn't need to be re-initialized for each new process definition.
 */
","/**
   * Mapping containing values stored during the first phase of parsing since
   * other elements can reference these messages.
   * 
   * All the map's elements are defined outside the process definition(s), which
   * means that this map doesn't need to be re-initialized for each new process
   * definition.
   */
  protected Map<String, MessageDefinition> messages = new HashMap<String, MessageDefinition>();",False
27,structures,Field,createItemDefinitions() addStructure(StructureDefinition),,,,99,1,4,,"protected Map<String, StructureDefinition> structures = new HashMap<String, StructureDefinition>();",False
28,interfaceImplementations,Field,createOperations() addService(BpmnInterfaceImplementation),,,,129,1,4,,"protected Map<String, BpmnInterfaceImplementation> interfaceImplementations = new HashMap<String, BpmnInterfaceImplementation>();",False
29,operationImplementations,Field,createOperations() addOperation(OperationImplementation),,,,121,1,4,,"protected Map<String, OperationImplementation> operationImplementations = new HashMap<String, OperationImplementation>();",False
30,itemDefinitions,Field,initializeXSDItemDefinitions() createMessages() createMessages() createIOSpecification(org.activiti.bpmn.model.IOSpecification) createIOSpecification(org.activiti.bpmn.model.IOSpecification),,,,94,1,4,,"protected Map<String, ItemDefinition> itemDefinitions = new HashMap<String, ItemDefinition>();",False
31,bpmnInterfaces,Field,,,,,91,1,4,,"protected Map<String, BpmnInterface> bpmnInterfaces = new HashMap<String, BpmnInterface>();",False
32,operations,Field,"createServiceTask(ServiceTask,ScopeImpl) createServiceTask(ServiceTask,ScopeImpl) createSendTask(SendTask,ScopeImpl) createSendTask(SendTask,ScopeImpl)",,,,79,1,4,,"protected Map<String, Operation> operations = new HashMap<String, Operation>();",False
33,importers,Field,getImporter(Import) getImporter(Import) getImporter(Import),,,,82,1,4,,"protected Map<String, XMLImporter> importers = new HashMap<String, XMLImporter>();",False
34,prefixs,Field,,,,,70,1,4,,"protected Map<String, String> prefixs = new HashMap<String, String>();",False
35,expressionManager,Field,BpmnParse(BpmnParser) createDataInputAssociation(DataAssociation) createDataInputAssociation(DataAssociation) createDataOutputAssociation(DataAssociation) parseDataOutputAssociation(Element),,,,46,1,4,,protected ExpressionManager expressionManager;,False
36,parseListeners,Field,BpmnParse(BpmnParser),,,,49,1,4,,protected List<BpmnParseListener> parseListeners;,False
37,activityBehaviorFactory,Field,BpmnParse(BpmnParser) setActivityBehaviorFactory(ActivityBehaviorFactory),,,,58,1,4,,protected ActivityBehaviorFactory activityBehaviorFactory;,False
38,listenerFactory,Field,BpmnParse(BpmnParser) setListenerFactory(ListenerFactory),,,,42,1,4,,protected ListenerFactory listenerFactory;,False
39,BpmnParse(BpmnParser),Method,,,org.activiti.engine.impl.bpmn.parser.BpmnParser+getExpressionManager() org.activiti.engine.impl.bpmn.parser.BpmnParser+getExpressionManager() org.activiti.engine.impl.bpmn.parser.BpmnParser+getParseListeners() org.activiti.engine.impl.bpmn.parser.BpmnParser+getParseListeners() org.activiti.engine.impl.bpmn.parser.BpmnParser+getActivityBehaviorFactory() org.activiti.engine.impl.bpmn.parser.BpmnParser+getActivityBehaviorFactory() org.activiti.engine.impl.bpmn.parser.BpmnParser+getListenerFactory() org.activiti.engine.impl.bpmn.parser.BpmnParser+getListenerFactory() org.activiti.engine.impl.bpmn.parser.BpmnParse+initializeXSDItemDefinitions() org.activiti.engine.impl.bpmn.parser.BpmnParse+initializeXSDItemDefinitions(),org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+listenerFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+listenerFactory,393,10,1,"/** 
 * Constructor to be called by the  {@link BpmnParser}.
 */
","/**
   * Constructor to be called by the {@link BpmnParser}.
   */
  public BpmnParse(BpmnParser parser) {
    this.expressionManager = parser.getExpressionManager();
    this.parseListeners = parser.getParseListeners();
    this.activityBehaviorFactory = parser.getActivityBehaviorFactory();
    this.listenerFactory = parser.getListenerFactory();
    this.initializeXSDItemDefinitions();
  }",False
40,initializeXSDItemDefinitions(),Method,BpmnParse(BpmnParser),,"java.util.Map+put(K,V) java.util.Map+put(K,V) org.activiti.engine.impl.bpmn.data.ItemDefinition+ItemDefinition(String,StructureDefinition) org.activiti.engine.impl.bpmn.data.ClassStructureDefinition+ClassStructureDefinition(Class<?>)",org.activiti.engine.impl.bpmn.parser.BpmnParse+itemDefinitions org.activiti.engine.impl.bpmn.parser.BpmnParse+itemDefinitions,243,4,4,,"protected void initializeXSDItemDefinitions() {
    this.itemDefinitions.put(""http://www.w3.org/2001/XMLSchema:string"", new ItemDefinition(""http://www.w3.org/2001/XMLSchema:string"",
            new ClassStructureDefinition(String.class)));
  }",False
41,deployment(DeploymentEntity),Method,,org.activiti.engine.impl.bpmn.deployer.BpmnDeployer+deploy(DeploymentEntity),,org.activiti.engine.impl.bpmn.parser.BpmnParse+deployment org.activiti.engine.impl.bpmn.parser.BpmnParse+deployment,113,4,1,,"public BpmnParse deployment(DeploymentEntity deployment) {
    this.deployment = deployment;
    return this;
  }",False
42,execute(),Method,,org.activiti.engine.impl.bpmn.deployer.BpmnDeployer+deploy(DeploymentEntity),"org.activiti.bpmn.converter.BpmnXMLConverter+BpmnXMLConverter() javax.xml.stream.XMLInputFactory+newInstance() javax.xml.stream.XMLInputFactory+newInstance() org.activiti.bpmn.converter.BpmnXMLConverter+validateModel(InputStream) org.activiti.bpmn.converter.BpmnXMLConverter+validateModel(InputStream) org.activiti.engine.impl.util.io.StreamSource+getInputStream() org.activiti.engine.impl.util.io.StreamSource+getInputStream() java.io.InputStream+reset() org.activiti.engine.impl.util.io.StreamSource+getInputStream() org.activiti.engine.impl.util.io.StreamSource+getInputStream() java.io.InputStream+reset() java.io.InputStreamReader+InputStreamReader(InputStream,String) org.activiti.engine.impl.util.io.StreamSource+getInputStream() org.activiti.engine.impl.util.io.StreamSource+getInputStream() javax.xml.stream.XMLInputFactory+createXMLStreamReader(Reader) javax.xml.stream.XMLInputFactory+createXMLStreamReader(Reader) org.activiti.bpmn.converter.BpmnXMLConverter+convertToBpmnModel(XMLStreamReader) org.activiti.bpmn.converter.BpmnXMLConverter+convertToBpmnModel(XMLStreamReader) org.activiti.engine.impl.bpmn.parser.BpmnParse+createImports() org.activiti.engine.impl.bpmn.parser.BpmnParse+createImports() org.activiti.engine.impl.bpmn.parser.BpmnParse+createItemDefinitions() org.activiti.engine.impl.bpmn.parser.BpmnParse+createItemDefinitions() org.activiti.engine.impl.bpmn.parser.BpmnParse+createMessages() org.activiti.engine.impl.bpmn.parser.BpmnParse+createMessages() org.activiti.engine.impl.bpmn.parser.BpmnParse+createOperations() org.activiti.engine.impl.bpmn.parser.BpmnParse+createOperations() org.activiti.engine.impl.bpmn.parser.BpmnParse+transformProcessDefinitions() org.activiti.engine.impl.bpmn.parser.BpmnParse+transformProcessDefinitions() org.activiti.engine.ActivitiException+ActivitiException(String,Throwable) java.io.InputStreamReader+close() java.io.InputStreamReader+close() java.util.List+size() org.activiti.bpmn.model.BpmnModel+getProblems() org.activiti.bpmn.model.BpmnModel+getProblems() java.util.List+size() java.lang.StringBuilder+StringBuilder() org.activiti.bpmn.model.BpmnModel+getProblems() org.activiti.bpmn.model.BpmnModel+getProblems() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.activiti.bpmn.model.parse.Problem+toString() org.activiti.bpmn.model.parse.Problem+toString() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.activiti.engine.ActivitiException+ActivitiException(String) java.lang.StringBuilder+toString() java.lang.StringBuilder+toString()",org.activiti.engine.impl.bpmn.parser.BpmnParse+streamSource org.activiti.engine.impl.bpmn.parser.BpmnParse+streamSource org.activiti.engine.impl.bpmn.parser.BpmnParse+streamSource org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+LOGGER org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,1276,38,1,,"public BpmnParse execute() {
    BpmnXMLConverter converter = new BpmnXMLConverter();
    XMLInputFactory xif = XMLInputFactory.newInstance();
    InputStreamReader in = null;
    try {
      converter.validateModel(streamSource.getInputStream());
      streamSource.getInputStream().reset();
      in = new InputStreamReader(streamSource.getInputStream(), ""UTF-8"");
      XMLStreamReader xtr = xif.createXMLStreamReader(in);
      bpmnModel = converter.convertToBpmnModel(xtr);
      createImports();
      createItemDefinitions();
      createMessages();
      createOperations();
      transformProcessDefinitions();
    } catch (Exception e) {
      throw new ActivitiException(""Error parsing XML"", e);
    } finally {
      try {
        if (in != null) {
          in.close();
        }
      } catch (Exception e) {
        LOGGER.info(""Problem closing BPMN input stream"", e);
      }
    }
    
    if (bpmnModel.getProblems().size() > 0) {
      StringBuilder problemBuilder = new StringBuilder();
      for (Problem error : bpmnModel.getProblems()) {
        problemBuilder.append(error.toString());
        problemBuilder.append(""\n"");
      }
      throw new ActivitiException(""Errors while parsing:\n"" + problemBuilder.toString());
    }
    
    return this;
  }",False
43,name(String),Method,"sourceInputStream(InputStream) sourceUrl(URL) sourceResource(String,ClassLoader) sourceString(String)",org.activiti.engine.impl.bpmn.deployer.BpmnDeployer+deploy(DeploymentEntity),,org.activiti.engine.impl.bpmn.parser.BpmnParse+name org.activiti.engine.impl.bpmn.parser.BpmnParse+name,79,4,1,,"public BpmnParse name(String name) {
    this.name = name;
    return this;
  }",False
44,sourceInputStream(InputStream),Method,,org.activiti.engine.impl.bpmn.deployer.BpmnDeployer+deploy(DeploymentEntity),org.activiti.engine.impl.bpmn.parser.BpmnParse+name(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+name(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+setStreamSource(StreamSource) org.activiti.engine.impl.bpmn.parser.BpmnParse+setStreamSource(StreamSource) org.activiti.engine.impl.util.io.InputStreamSource+InputStreamSource(InputStream),org.activiti.engine.impl.bpmn.parser.BpmnParse+name,195,7,1,,"public BpmnParse sourceInputStream(InputStream inputStream) {
    if (name==null) {
      name(""inputStream"");
    }
    setStreamSource(new InputStreamSource(inputStream)); 
    return this;
  }",False
45,sourceResource(String),Method,,,"org.activiti.engine.impl.bpmn.parser.BpmnParse+sourceResource(String,ClassLoader) org.activiti.engine.impl.bpmn.parser.BpmnParse+sourceResource(String,ClassLoader)",,97,3,1,,"public BpmnParse sourceResource(String resource) {
    return sourceResource(resource, null);
  }",False
46,sourceUrl(URL),Method,sourceUrl(String),,org.activiti.engine.impl.bpmn.parser.BpmnParse+name(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+name(String) java.net.URL+toString() java.net.URL+toString() org.activiti.engine.impl.bpmn.parser.BpmnParse+setStreamSource(StreamSource) org.activiti.engine.impl.bpmn.parser.BpmnParse+setStreamSource(StreamSource) org.activiti.engine.impl.util.io.UrlStreamSource+UrlStreamSource(URL),org.activiti.engine.impl.bpmn.parser.BpmnParse+name,161,7,1,,"public BpmnParse sourceUrl(URL url) {
    if (name==null) {
      name(url.toString());
    }
    setStreamSource(new UrlStreamSource(url));
    return this;
  }",False
47,sourceUrl(String),Method,,,"org.activiti.engine.impl.bpmn.parser.BpmnParse+sourceUrl(URL) org.activiti.engine.impl.bpmn.parser.BpmnParse+sourceUrl(URL) java.net.URL+URL(String) org.activiti.engine.ActivitiException+ActivitiException(String,Throwable)",,199,7,1,,"public BpmnParse sourceUrl(String url) {
    try {
      return sourceUrl(new URL(url));
    } catch (MalformedURLException e) {
      throw new ActivitiException(""malformed url: ""+url, e);
    }
  }",False
48,"sourceResource(String,ClassLoader)",Method,sourceResource(String),,"org.activiti.engine.impl.bpmn.parser.BpmnParse+name(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+name(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+setStreamSource(StreamSource) org.activiti.engine.impl.bpmn.parser.BpmnParse+setStreamSource(StreamSource) org.activiti.engine.impl.util.io.ResourceStreamSource+ResourceStreamSource(String,ClassLoader)",org.activiti.engine.impl.bpmn.parser.BpmnParse+name,217,7,1,,"public BpmnParse sourceResource(String resource, ClassLoader classLoader) {
    if (name==null) {
      name(resource);
    }
    setStreamSource(new ResourceStreamSource(resource, classLoader)); 
    return this;
  }",False
49,sourceString(String),Method,,,org.activiti.engine.impl.bpmn.parser.BpmnParse+name(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+name(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+setStreamSource(StreamSource) org.activiti.engine.impl.bpmn.parser.BpmnParse+setStreamSource(StreamSource) org.activiti.engine.impl.util.io.StringStreamSource+StringStreamSource(String),org.activiti.engine.impl.bpmn.parser.BpmnParse+name,171,7,1,,"public BpmnParse sourceString(String string) {
    if (name==null) {
      name(""string"");
    }
    setStreamSource(new StringStreamSource(string)); 
    return this;
  }",False
50,setStreamSource(StreamSource),Method,"sourceInputStream(InputStream) sourceUrl(URL) sourceResource(String,ClassLoader) sourceString(String)",,org.activiti.engine.ActivitiException+ActivitiException(String),org.activiti.engine.impl.bpmn.parser.BpmnParse+streamSource org.activiti.engine.impl.bpmn.parser.BpmnParse+streamSource org.activiti.engine.impl.bpmn.parser.BpmnParse+streamSource org.activiti.engine.impl.bpmn.parser.BpmnParse+streamSource org.activiti.engine.impl.bpmn.parser.BpmnParse+streamSource org.activiti.engine.impl.bpmn.parser.BpmnParse+streamSource,246,6,4,,"protected void setStreamSource(StreamSource streamSource) {
    if (this.streamSource!=null) {
      throw new ActivitiException(""invalid: multiple sources ""+this.streamSource+"" and ""+streamSource);
    }
    this.streamSource = streamSource;
  }",False
51,createImports(),Method,execute(),,"org.activiti.bpmn.model.BpmnModel+getImports() org.activiti.bpmn.model.BpmnModel+getImports() org.activiti.engine.impl.bpmn.parser.BpmnParse+getImporter(Import) org.activiti.engine.impl.bpmn.parser.BpmnParse+getImporter(Import) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.Import+getImportType() org.activiti.bpmn.model.Import+getImportType() org.activiti.engine.impl.bpmn.parser.XMLImporter+importFrom(Import,BpmnParse) org.activiti.engine.impl.bpmn.parser.XMLImporter+importFrom(Import,BpmnParse)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,356,10,4,,"protected void createImports() {
    for (Import theImport : bpmnModel.getImports()) {
      XMLImporter importer = this.getImporter(theImport);
      if (importer == null) {
        bpmnModel.addProblem(""Could not import item of type "" + theImport.getImportType(), theImport);
      } else {
        importer.importFrom(theImport, this);
      }
    }
  }",False
52,getImporter(Import),Method,createImports(),,"java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) org.activiti.bpmn.model.Import+getImportType() org.activiti.bpmn.model.Import+getImportType() java.util.Map+get(Object) java.util.Map+get(Object) org.activiti.bpmn.model.Import+getImportType() org.activiti.bpmn.model.Import+getImportType() java.lang.String+equals(Object) org.activiti.bpmn.model.Import+getImportType() org.activiti.bpmn.model.Import+getImportType() java.lang.String+equals(Object) java.lang.Class+forName(String,boolean,ClassLoader) java.lang.Class+forName(String,boolean,ClassLoader) java.lang.Thread+getContextClassLoader() java.lang.Thread+currentThread() java.lang.Thread+currentThread() java.lang.Thread+getContextClassLoader() java.lang.Class+newInstance() java.lang.Class+newInstance() java.util.Map+put(K,V) java.util.Map+put(K,V) org.activiti.bpmn.model.Import+getImportType() org.activiti.bpmn.model.Import+getImportType() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.Import+getImportType() org.activiti.bpmn.model.Import+getImportType()",org.activiti.engine.impl.bpmn.parser.BpmnParse+importers org.activiti.engine.impl.bpmn.parser.BpmnParse+importers org.activiti.engine.impl.bpmn.parser.BpmnParse+importers org.activiti.engine.impl.bpmn.parser.BpmnParse+importers org.activiti.engine.impl.bpmn.parser.BpmnParse+importers org.activiti.engine.impl.bpmn.parser.BpmnParse+importers org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,849,18,4,,"protected XMLImporter getImporter(Import theImport) {
    if (this.importers.containsKey(theImport.getImportType())) {
      return this.importers.get(theImport.getImportType());
    } else {
      if (theImport.getImportType().equals(""http://schemas.xmlsoap.org/wsdl/"")) {
        Class< ? > wsdlImporterClass;
        try {
          wsdlImporterClass = Class.forName(""org.activiti.engine.impl.webservice.CxfWSDLImporter"", true, Thread.currentThread().getContextClassLoader());
          XMLImporter newInstance = (XMLImporter) wsdlImporterClass.newInstance();
          this.importers.put(theImport.getImportType(), newInstance);
          return newInstance;
        } catch (Exception e) {
          bpmnModel.addProblem(""Could not find importer for type "" + theImport.getImportType(), theImport);
        }
      }
      return null;
    }
  }",False
53,createMessages(),Method,execute(),,"org.activiti.bpmn.model.BpmnModel+getMessages() org.activiti.bpmn.model.BpmnModel+getMessages() org.activiti.engine.impl.bpmn.webservice.MessageDefinition+MessageDefinition(String,String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.Message+getItemRef() org.activiti.bpmn.model.Message+getItemRef() java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) org.activiti.bpmn.model.Message+getItemRef() org.activiti.bpmn.model.Message+getItemRef() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.Message+getItemRef() org.activiti.bpmn.model.Message+getItemRef() java.util.Map+get(Object) java.util.Map+get(Object) org.activiti.bpmn.model.Message+getItemRef() org.activiti.bpmn.model.Message+getItemRef() org.activiti.engine.impl.bpmn.webservice.MessageDefinition+setItemDefinition(ItemDefinition) org.activiti.engine.impl.bpmn.webservice.MessageDefinition+setItemDefinition(ItemDefinition) java.util.Map+put(K,V) java.util.Map+put(K,V) org.activiti.engine.impl.bpmn.webservice.MessageDefinition+getId() org.activiti.engine.impl.bpmn.webservice.MessageDefinition+getId()",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+name org.activiti.engine.impl.bpmn.parser.BpmnParse+itemDefinitions org.activiti.engine.impl.bpmn.parser.BpmnParse+itemDefinitions org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+itemDefinitions org.activiti.engine.impl.bpmn.parser.BpmnParse+itemDefinitions org.activiti.engine.impl.bpmn.parser.BpmnParse+messages org.activiti.engine.impl.bpmn.parser.BpmnParse+messages,727,15,1,,"public void createMessages() {
    for (Message messageElement : bpmnModel.getMessages()) {
      MessageDefinition messageDefinition = new MessageDefinition(messageElement.getId(), name);
      if (StringUtils.isNotEmpty(messageElement.getItemRef())) {
        if (!this.itemDefinitions.containsKey(messageElement.getItemRef())) {
            bpmnModel.addProblem(messageElement.getItemRef() + "" does not exist"", messageElement);          
        } else {
            ItemDefinition itemDefinition = this.itemDefinitions.get(messageElement.getItemRef());
            messageDefinition.setItemDefinition(itemDefinition);
        }
      }
      this.messages.put(messageDefinition.getId(), messageDefinition);
      
    }
  }",False
54,createItemDefinitions(),Method,execute(),,"java.util.Map+values() org.activiti.bpmn.model.BpmnModel+getItemDefinitions() org.activiti.bpmn.model.BpmnModel+getItemDefinitions() java.util.Map+values() org.activiti.engine.impl.util.ReflectUtil+loadClass(String) org.activiti.engine.impl.util.ReflectUtil+loadClass(String) org.activiti.bpmn.model.ItemDefinition+getStructureRef() org.activiti.bpmn.model.ItemDefinition+getStructureRef() org.activiti.engine.impl.bpmn.data.ClassStructureDefinition+ClassStructureDefinition(Class<?>) java.util.Map+get(Object) java.util.Map+get(Object) org.activiti.bpmn.model.ItemDefinition+getStructureRef() org.activiti.bpmn.model.ItemDefinition+getStructureRef() org.activiti.engine.impl.bpmn.data.ItemDefinition+ItemDefinition(String,StructureDefinition) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.ItemDefinition+getItemKind() org.activiti.bpmn.model.ItemDefinition+getItemKind() org.activiti.engine.impl.bpmn.data.ItemDefinition+setItemKind(ItemKind) org.activiti.engine.impl.bpmn.data.ItemDefinition+setItemKind(ItemKind) org.activiti.bpmn.model.ItemDefinition+getItemKind() org.activiti.bpmn.model.ItemDefinition+getItemKind() java.util.Map+put(K,V) java.util.Map+put(K,V) org.activiti.engine.impl.bpmn.data.ItemDefinition+getId() org.activiti.engine.impl.bpmn.data.ItemDefinition+getId()",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+structures org.activiti.engine.impl.bpmn.parser.BpmnParse+structures org.activiti.engine.impl.bpmn.parser.BpmnParse+itemDefinitions,935,20,4,,"protected void createItemDefinitions() {
    for (org.activiti.bpmn.model.ItemDefinition itemDefinitionElement : bpmnModel.getItemDefinitions().values()) {
      StructureDefinition structure = null;

      try {
        // it is a class
        Class< ? > classStructure = ReflectUtil.loadClass(itemDefinitionElement.getStructureRef());
        structure = new ClassStructureDefinition(classStructure);
      } catch (ActivitiException e) {
        // it is a reference to a different structure
        structure = this.structures.get(itemDefinitionElement.getStructureRef());
      }

      ItemDefinition itemDefinition = new ItemDefinition(itemDefinitionElement.getId(), structure);
      if (StringUtils.isNotEmpty(itemDefinitionElement.getItemKind())) {
        itemDefinition.setItemKind(ItemKind.valueOf(itemDefinitionElement.getItemKind()));
      }
      itemDefinitions.put(itemDefinition.getId(), itemDefinition);
    }
  }",False
55,createOperations(),Method,execute(),,"org.activiti.bpmn.model.BpmnModel+getInterfaces() org.activiti.bpmn.model.BpmnModel+getInterfaces() org.activiti.engine.impl.bpmn.webservice.BpmnInterface+BpmnInterface(String,String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.Interface+getName() org.activiti.bpmn.model.Interface+getName() org.activiti.engine.impl.bpmn.webservice.BpmnInterface+setImplementation(BpmnInterfaceImplementation) org.activiti.engine.impl.bpmn.webservice.BpmnInterface+setImplementation(BpmnInterfaceImplementation) java.util.Map+get(Object) java.util.Map+get(Object) org.activiti.bpmn.model.Interface+getImplementationRef() org.activiti.bpmn.model.Interface+getImplementationRef() org.activiti.bpmn.model.Interface+getOperations() org.activiti.bpmn.model.Interface+getOperations() java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) org.activiti.bpmn.model.Operation+getInMessageRef() org.activiti.bpmn.model.Operation+getInMessageRef() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.Operation+getInMessageRef() org.activiti.bpmn.model.Operation+getInMessageRef() java.util.Map+get(Object) java.util.Map+get(Object) org.activiti.bpmn.model.Operation+getInMessageRef() org.activiti.bpmn.model.Operation+getInMessageRef() org.activiti.engine.impl.bpmn.webservice.Operation+Operation(String,String,BpmnInterface,MessageDefinition) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.Operation+getName() org.activiti.bpmn.model.Operation+getName() org.activiti.engine.impl.bpmn.webservice.Operation+setImplementation(OperationImplementation) org.activiti.engine.impl.bpmn.webservice.Operation+setImplementation(OperationImplementation) java.util.Map+get(Object) java.util.Map+get(Object) org.activiti.bpmn.model.Operation+getImplementationRef() org.activiti.bpmn.model.Operation+getImplementationRef() org.activiti.bpmn.model.Operation+getOutMessageRef() org.activiti.bpmn.model.Operation+getOutMessageRef() java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) org.activiti.bpmn.model.Operation+getOutMessageRef() org.activiti.bpmn.model.Operation+getOutMessageRef() java.util.Map+get(Object) java.util.Map+get(Object) org.activiti.bpmn.model.Operation+getOutMessageRef() org.activiti.bpmn.model.Operation+getOutMessageRef() org.activiti.engine.impl.bpmn.webservice.Operation+setOutMessage(MessageDefinition) org.activiti.engine.impl.bpmn.webservice.Operation+setOutMessage(MessageDefinition) java.util.Map+put(K,V) java.util.Map+put(K,V) org.activiti.engine.impl.bpmn.webservice.Operation+getId() org.activiti.engine.impl.bpmn.webservice.Operation+getId()",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+interfaceImplementations org.activiti.engine.impl.bpmn.parser.BpmnParse+interfaceImplementations org.activiti.engine.impl.bpmn.parser.BpmnParse+messages org.activiti.engine.impl.bpmn.parser.BpmnParse+messages org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+messages org.activiti.engine.impl.bpmn.parser.BpmnParse+messages org.activiti.engine.impl.bpmn.parser.BpmnParse+operationImplementations org.activiti.engine.impl.bpmn.parser.BpmnParse+operationImplementations org.activiti.engine.impl.bpmn.parser.BpmnParse+messages org.activiti.engine.impl.bpmn.parser.BpmnParse+messages org.activiti.engine.impl.bpmn.parser.BpmnParse+messages org.activiti.engine.impl.bpmn.parser.BpmnParse+messages org.activiti.engine.impl.bpmn.parser.BpmnParse+operations,1386,25,4,,"protected void createOperations() {
    for (Interface interfaceObject : bpmnModel.getInterfaces()) {
      BpmnInterface bpmnInterface = new BpmnInterface(interfaceObject.getId(), interfaceObject.getName());
      bpmnInterface.setImplementation(this.interfaceImplementations.get(interfaceObject.getImplementationRef()));
      
      for (org.activiti.bpmn.model.Operation operationObject : interfaceObject.getOperations()) {
        if (!this.messages.containsKey(operationObject.getInMessageRef())) {
          bpmnModel.addProblem(operationObject.getInMessageRef() + "" does not exist"", operationObject);
        } else {
          MessageDefinition inMessage = this.messages.get(operationObject.getInMessageRef());
          Operation operation = new Operation(operationObject.getId(), operationObject.getName(), bpmnInterface, inMessage);
          operation.setImplementation(this.operationImplementations.get(operationObject.getImplementationRef()));
    
          if (StringUtils.isNotEmpty(operationObject.getOutMessageRef())) {
            if (this.messages.containsKey(operationObject.getOutMessageRef())) {
              MessageDefinition outMessage = this.messages.get(operationObject.getOutMessageRef());
              operation.setOutMessage(outMessage);
            }
          }
    
          operations.put(operation.getId(), operation);
        }
      }
    }
  }",False
56,transformProcessDefinitions(),Method,execute(),,java.util.HashMap+HashMap() org.activiti.bpmn.model.BpmnModel+getProcesses() org.activiti.bpmn.model.BpmnModel+getProcesses() org.activiti.bpmn.model.Process+isExecutable() org.activiti.bpmn.model.Process+isExecutable() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.util.List+add(E) java.util.List+add(E) org.activiti.engine.impl.bpmn.parser.BpmnParse+transformProcess(Process) org.activiti.engine.impl.bpmn.parser.BpmnParse+transformProcess(Process) java.util.List+size() java.util.List+size() org.activiti.engine.impl.bpmn.parser.BpmnParse+processDI() org.activiti.engine.impl.bpmn.parser.BpmnParse+processDI(),org.activiti.engine.impl.bpmn.parser.BpmnParse+sequenceFlows org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+LOGGER org.activiti.engine.impl.bpmn.parser.BpmnParse+processDefinitions org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners org.activiti.engine.impl.bpmn.parser.BpmnParse+processDefinitions,728,21,4,"/** 
 * Parses the 'definitions' root element
 */
","/**
   * Parses the 'definitions' root element
   */
  protected void transformProcessDefinitions() {
    sequenceFlows = new HashMap<String, TransitionImpl>();
    for (Process process : bpmnModel.getProcesses()) {
      if (process.isExecutable() == false) {
        LOGGER.info(""Ignoring non-executable process with id='"" + process.getId() + ""'. Set the attribute isExecutable=\""true\"" to deploy this process."");
      } else {
        processDefinitions.add(transformProcess(process));
      }
    }
    
    for (BpmnParseListener parseListener : parseListeners) {
      //parseListener.parseRootElement(rootElement, getProcessDefinitions());
    }
    
    if (processDefinitions.size() > 0) {
      processDI();
    }
  }",False
57,transformProcess(Process),Method,transformProcessDefinitions(),,"org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+ProcessDefinitionEntity() org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setKey(String) org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setKey(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+setName(String) org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+setName(String) org.activiti.bpmn.model.Process+getName() org.activiti.bpmn.model.Process+getName() org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setCategory(String) org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setCategory(String) org.activiti.bpmn.model.BpmnModel+getTargetNamespace() org.activiti.bpmn.model.BpmnModel+getTargetNamespace() org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setDescription(String) org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setDescription(String) org.activiti.bpmn.model.Process+getDocumentation() org.activiti.bpmn.model.Process+getDocumentation() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.Process+getDocumentation() org.activiti.bpmn.model.Process+getDocumentation() org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setTaskDefinitions(Map<String,TaskDefinition>) org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setTaskDefinitions(Map<String,TaskDefinition>) java.util.HashMap+HashMap() org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setDeploymentId(String) org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setDeploymentId(String) org.activiti.engine.impl.persistence.entity.DeploymentEntity+getId() org.activiti.engine.impl.persistence.entity.DeploymentEntity+getId() org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.Process+getExecutionListeners() org.activiti.bpmn.model.Process+getExecutionListeners() org.activiti.bpmn.model.Process+getCandidateStarterUsers() org.activiti.bpmn.model.Process+getCandidateStarterUsers() org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+addCandidateStarterUserIdExpression(Expression) org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+addCandidateStarterUserIdExpression(Expression) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.Process+getCandidateStarterGroups() org.activiti.bpmn.model.Process+getCandidateStarterGroups() org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+addCandidateStarterGroupIdExpression(Expression) org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+addCandidateStarterGroupIdExpression(Expression) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+getKey() org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+getKey() org.activiti.engine.impl.bpmn.parser.BpmnParse+processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess) org.activiti.engine.impl.bpmn.parser.BpmnParse+processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess) org.activiti.bpmn.model.FlowElementsContainer+getFlowElements() org.activiti.bpmn.model.FlowElementsContainer+getFlowElements() org.activiti.engine.impl.bpmn.parser.BpmnParse+processArtifacts(Collection<Artifact>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+processArtifacts(Collection<Artifact>,ScopeImpl) org.activiti.bpmn.model.Process+getArtifacts() org.activiti.bpmn.model.Process+getArtifacts() org.activiti.bpmn.model.Process+getIoSpecification() org.activiti.bpmn.model.Process+getIoSpecification() org.activiti.engine.impl.bpmn.parser.BpmnParse+createIOSpecification(IOSpecification) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIOSpecification(IOSpecification) org.activiti.bpmn.model.Process+getIoSpecification() org.activiti.bpmn.model.Process+getIoSpecification() org.activiti.engine.impl.pvm.process.ScopeImpl+setIoSpecification(IOSpecification) org.activiti.engine.impl.pvm.process.ScopeImpl+setIoSpecification(IOSpecification) org.activiti.engine.parser.BpmnParseListener+parseProcess(Process,ProcessDefinitionEntity) org.activiti.engine.parser.BpmnParseListener+parseProcess(Process,ProcessDefinitionEntity)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_DOCUMENTATION org.activiti.engine.impl.bpmn.parser.BpmnParse+deployment org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+LOGGER org.activiti.engine.impl.bpmn.parser.BpmnParse+LOGGER org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,2238,51,1,"/** 
 * Parses one process (ie anything inside a &lt;process&gt; element).
 * @param process The 'process' object.
 * @return The parsed version of the XML: a {@link ProcessDefinitionImpl}object.
 */
","/**
   * Parses one process (ie anything inside a &lt;process&gt; element).
   * 
   * @param process
   *          The 'process' object.
   * @return The parsed version of the XML: a {@link ProcessDefinitionImpl}
   *         object.
   */
  public ProcessDefinitionEntity transformProcess(Process process) {
    ProcessDefinitionEntity processDefinition = new ProcessDefinitionEntity();

    /*
     * Mapping object model - bpmn xml: processDefinition.id -> generated by
     * activiti engine processDefinition.key -> bpmn id (required)
     * processDefinition.name -> bpmn name (optional)
     */
    processDefinition.setKey(process.getId());
    processDefinition.setName(process.getName());
    processDefinition.setCategory(bpmnModel.getTargetNamespace());
    processDefinition.setDescription(process.getDocumentation()); 
    processDefinition.setProperty(PROPERTYNAME_DOCUMENTATION, process.getDocumentation()); // Kept for backwards compatibility. See ACT-1020
    processDefinition.setTaskDefinitions(new HashMap<String, TaskDefinition>());
    processDefinition.setDeploymentId(deployment.getId());
    createExecutionListenersOnScope(process.getExecutionListeners(), processDefinition);
    
    for (String candidateUser : process.getCandidateStarterUsers()) {
      processDefinition.addCandidateStarterUserIdExpression(expressionManager.createExpression(candidateUser));
    }
    
    for (String candidateGroup : process.getCandidateStarterGroups()) {
      processDefinition.addCandidateStarterGroupIdExpression(expressionManager.createExpression(candidateGroup));
    }

    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""Parsing process {}"", processDefinition.getKey());
    }
    
    processFlowElements(process.getFlowElements(), processDefinition, null);
    processArtifacts(process.getArtifacts(), processDefinition);
    
    if (process.getIoSpecification() != null) {
      IOSpecification ioSpecification = createIOSpecification(process.getIoSpecification());
      processDefinition.setIoSpecification(ioSpecification);
    }
    
    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseProcess(process, processDefinition);
    }
    
    return processDefinition;
  }",True
58,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",Method,"transformProcess(Process) createSubProcess(SubProcess,ScopeImpl) createTransaction(Transaction,ScopeImpl)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createStartEvent(StartEvent,ScopeImpl,SubProcess) org.activiti.engine.impl.bpmn.parser.BpmnParse+createStartEvent(StartEvent,ScopeImpl,SubProcess) org.activiti.engine.impl.bpmn.parser.BpmnParse+createEndEvent(EndEvent,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createEndEvent(EndEvent,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createServiceTask(ServiceTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createServiceTask(ServiceTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createUserTask(UserTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createUserTask(UserTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBusinessRuleTask(BusinessRuleTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBusinessRuleTask(BusinessRuleTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createScriptTask(ScriptTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createScriptTask(ScriptTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createTransaction(Transaction,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createTransaction(Transaction,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createSubProcess(SubProcess,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createSubProcess(SubProcess,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createCallActivity(CallActivity,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createCallActivity(CallActivity,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createManualTask(ManualTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createManualTask(ManualTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createReceiveTask(ReceiveTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createReceiveTask(ReceiveTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createSendTask(SendTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createSendTask(SendTask,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createTask(Task,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createTask(Task,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createEventBasedGateway(EventGateway,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createEventBasedGateway(EventGateway,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExclusiveGateway(ExclusiveGateway,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExclusiveGateway(ExclusiveGateway,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createInclusiveGateway(InclusiveGateway,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createInclusiveGateway(InclusiveGateway,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createParallelGateway(ParallelGateway,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createParallelGateway(ParallelGateway,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIntermediateCatchEvent(IntermediateCatchEvent,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIntermediateCatchEvent(IntermediateCatchEvent,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIntermediateThrowEvent(ThrowEvent,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIntermediateThrowEvent(ThrowEvent,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createMultiInstanceLoopCharacteristics(Activity,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createMultiInstanceLoopCharacteristics(Activity,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBoundaryEvent(BoundaryEvent,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBoundaryEvent(BoundaryEvent,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createSequenceFlow(SequenceFlow,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createSequenceFlow(SequenceFlow,ScopeImpl) org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.impl.bpmn.parser.BpmnParse+validateExclusiveGateway(ActivityImpl,ExclusiveGateway) org.activiti.engine.impl.bpmn.parser.BpmnParse+validateExclusiveGateway(ActivityImpl,ExclusiveGateway)",,3665,74,4,,"protected void processFlowElements(Collection<FlowElement> flowElements, ScopeImpl scope, SubProcess subProcess) {
    // activities
    for (FlowElement flowElement : flowElements) {
      
      if (flowElement instanceof SequenceFlow) continue;
      
      ActivityImpl activity = null;
      if (flowElement instanceof StartEvent) {
        createStartEvent((StartEvent) flowElement, scope, subProcess);
      } else if (flowElement instanceof EndEvent) {
        createEndEvent((EndEvent) flowElement, scope);
      } else if (flowElement instanceof ServiceTask) {
        activity = createServiceTask((ServiceTask) flowElement, scope);
      } else if (flowElement instanceof UserTask) {
        activity = createUserTask((UserTask) flowElement, scope);
      } else if (flowElement instanceof BusinessRuleTask) {
        activity = createBusinessRuleTask((BusinessRuleTask) flowElement, scope);
      } else if (flowElement instanceof ScriptTask) {
        activity = createScriptTask((ScriptTask) flowElement, scope);
      } else if (flowElement instanceof Transaction) {
        activity = createTransaction((Transaction) flowElement, scope);
      } else if (flowElement instanceof SubProcess) {
        activity = createSubProcess((SubProcess) flowElement, scope);
      } else if (flowElement instanceof CallActivity) {
        activity = createCallActivity((CallActivity) flowElement, scope);
      } else if (flowElement instanceof ManualTask) {
        activity = createManualTask((ManualTask) flowElement, scope);
      } else if (flowElement instanceof ReceiveTask) {
        activity = createReceiveTask((ReceiveTask) flowElement, scope);
      } else if (flowElement instanceof SendTask) {
        activity = createSendTask((SendTask) flowElement, scope);
      } else if (flowElement instanceof Task) {
        activity = createTask((Task) flowElement, scope);
      } else if (flowElement instanceof EventGateway) {
        activity = createEventBasedGateway((EventGateway) flowElement, scope);
      } else if (flowElement instanceof ExclusiveGateway) {
        activity = createExclusiveGateway((ExclusiveGateway) flowElement, scope);
      } else if (flowElement instanceof InclusiveGateway) {
        activity = createInclusiveGateway((InclusiveGateway) flowElement, scope);
      } else if (flowElement instanceof ParallelGateway) {
        activity = createParallelGateway((ParallelGateway) flowElement, scope);
      } else if (flowElement instanceof IntermediateCatchEvent) {
        activity = createIntermediateCatchEvent((IntermediateCatchEvent) flowElement, scope);
      } else if (flowElement instanceof ThrowEvent) {
        activity = createIntermediateThrowEvent((ThrowEvent) flowElement, scope);
      }
      
      if (flowElement instanceof Activity) {
        createMultiInstanceLoopCharacteristics((org.activiti.bpmn.model.Activity) flowElement, activity);      
      } 
    }
    
    // boundary events
    for (FlowElement flowElement : flowElements) {
      if (flowElement instanceof BoundaryEvent) {
        createBoundaryEvent((BoundaryEvent) flowElement, scope);
      }
    }
    
    // sequence flows
    for (FlowElement flowElement : flowElements) {
      if (flowElement instanceof SequenceFlow) {
        createSequenceFlow((SequenceFlow) flowElement, scope);
      }
    }
    
    // validations after complete model
    for (FlowElement flowElement : flowElements) {
      if (flowElement instanceof ExclusiveGateway) {
        ActivityImpl gatewayActivity = scope.findActivity(flowElement.getId());
        validateExclusiveGateway(gatewayActivity, (ExclusiveGateway) flowElement);
      }
    }
  }",False
59,"processArtifacts(Collection<Artifact>,ScopeImpl)",Method,"transformProcess(Process) createSubProcess(SubProcess,ScopeImpl) createTransaction(Transaction,ScopeImpl)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createAssociation(Association,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createAssociation(Association,ScopeImpl)",,267,8,4,,"protected void processArtifacts(Collection<Artifact> artifacts, ScopeImpl scope) {
    // associations  
    for (Artifact artifact : artifacts) {
      if (artifact instanceof Association) {
        createAssociation((Association) artifact, scope);
      }
    }
  }",False
60,"createStartEvent(StartEvent,ScopeImpl,SubProcess)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createProcessDefinitionStartEvent(ActivityImpl,StartEvent,ProcessDefinitionEntity) org.activiti.engine.impl.bpmn.parser.BpmnParse+createProcessDefinitionStartEvent(ActivityImpl,StartEvent,ProcessDefinitionEntity) org.activiti.engine.impl.bpmn.parser.BpmnParse+createScopeStartEvent(ActivityImpl,StartEvent,ScopeImpl,SubProcess) org.activiti.engine.impl.bpmn.parser.BpmnParse+createScopeStartEvent(ActivityImpl,StartEvent,ScopeImpl,SubProcess) org.activiti.engine.parser.BpmnParseListener+parseStartEvent(StartEvent,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseStartEvent(StartEvent,ScopeImpl,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.impl.bpmn.parser.BpmnParse+selectInitial(ActivityImpl,StartEvent,ProcessDefinitionEntity) org.activiti.engine.impl.bpmn.parser.BpmnParse+selectInitial(ActivityImpl,StartEvent,ProcessDefinitionEntity) org.activiti.engine.impl.bpmn.parser.BpmnParse+createStartFormHandlers(StartEvent,ProcessDefinitionEntity) org.activiti.engine.impl.bpmn.parser.BpmnParse+createStartFormHandlers(StartEvent,ProcessDefinitionEntity)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_EVENT_START org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,1289,30,4,"/** 
 * Parses the start events of a certain level in the process (process, subprocess or another scope).
 * @param parentElement The 'parent' element that contains the start events (process, subprocess).
 * @param scope The  {@link ScopeImpl} to which the start events must be added.
 */
","/**
   * Parses the start events of a certain level in the process (process,
   * subprocess or another scope).
   * 
   * @param parentElement
   *          The 'parent' element that contains the start events (process,
   *          subprocess).
   * @param scope
   *          The {@link ScopeImpl} to which the start events must be added.
   */
  protected void createStartEvent(StartEvent startEvent, ScopeImpl scope, SubProcess subProcess) {
    
    ActivityImpl startEventActivity = createActivityOnScope(startEvent, ELEMENT_EVENT_START, scope);

    if (scope instanceof ProcessDefinitionEntity) {        
      createProcessDefinitionStartEvent(startEventActivity, startEvent, (ProcessDefinitionEntity) scope);
    } else {
      createScopeStartEvent(startEventActivity, startEvent, scope, subProcess);
    }

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseStartEvent(startEvent, scope, startEventActivity);
    }
    createExecutionListenersOnScope(startEvent.getExecutionListeners(), startEventActivity);      
    
    if(scope instanceof ProcessDefinitionEntity) {
      selectInitial(startEventActivity, startEvent, (ProcessDefinitionEntity) scope);
      createStartFormHandlers(startEvent, (ProcessDefinitionEntity) scope);
    }
  }",True
61,"selectInitial(ActivityImpl,StartEvent,ProcessDefinitionEntity)",Method,"createStartEvent(StartEvent,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+getInitial() org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+getInitial() org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+setInitial(ActivityImpl) org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+setInitial(ActivityImpl) java.lang.Object+equals(Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.lang.Object+equals(Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+getInitial() org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+getInitial() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.lang.String+equals(Object) java.lang.String+equals(Object) org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+setInitial(ActivityImpl) org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+setInitial(ActivityImpl) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,818,16,4,,"protected void selectInitial(ActivityImpl startEventActivity, StartEvent startEvent, ProcessDefinitionEntity processDefinition) {
    
    if (processDefinition.getInitial() == null) {
      processDefinition.setInitial(startEventActivity);
    } else {
      // validate that there is s single none start event / timer start event:
      if (startEventActivity.getProperty(""type"").equals(""messageStartEvent"") == false) {
        String currentInitialType = (String) processDefinition.getInitial().getProperty(""type"");
        if (currentInitialType.equals(""messageStartEvent"")) {
          processDefinition.setInitial(startEventActivity);
        } else {
          bpmnModel.addProblem(""multiple none start events or timer start events not supported on process definition."", startEvent);
        }
      }
    }
  }",True
62,"createProcessDefinitionStartEvent(ActivityImpl,StartEvent,ProcessDefinitionEntity)",Method,"createStartEvent(StartEvent,ScopeImpl,SubProcess)",,"org.activiti.bpmn.model.StartEvent+getInitiator() org.activiti.bpmn.model.StartEvent+getInitiator() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.StartEvent+getInitiator() org.activiti.bpmn.model.StartEvent+getInitiator() org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createNoneStartEventActivityBehavior(StartEvent) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createNoneStartEventActivityBehavior(StartEvent) java.util.List+size() org.activiti.bpmn.model.Event+getEventDefinitions() org.activiti.bpmn.model.Event+getEventDefinitions() java.util.List+size() java.util.List+get(int) org.activiti.bpmn.model.Event+getEventDefinitions() org.activiti.bpmn.model.Event+getEventDefinitions() java.util.List+get(int) org.activiti.engine.impl.bpmn.parser.BpmnParse+createTimerStartEventDefinition(TimerEventDefinition,ActivityImpl,ProcessDefinitionEntity) org.activiti.engine.impl.bpmn.parser.BpmnParse+createTimerStartEventDefinition(TimerEventDefinition,ActivityImpl,ProcessDefinitionEntity) org.activiti.bpmn.model.BpmnModel+containsMessageId(String) org.activiti.bpmn.model.BpmnModel+containsMessageId(String) org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.Message+getName() org.activiti.bpmn.model.BpmnModel+getMessage(String) org.activiti.bpmn.model.BpmnModel+getMessage(String) org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.Message+getName() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.MessageEventDefinition+setMessageRef(String) org.activiti.bpmn.model.MessageEventDefinition+setMessageRef(String) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+EventSubscriptionDeclaration(String,String) org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setStartEvent(boolean) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setStartEvent(boolean) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl)",org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_INITIATOR_VARIABLE_NAME org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,1862,30,4,,"protected void createProcessDefinitionStartEvent(ActivityImpl startEventActivity, StartEvent startEvent, ProcessDefinitionEntity processDefinition) {
    if (StringUtils.isNotEmpty(startEvent.getInitiator())) {
      processDefinition.setProperty(PROPERTYNAME_INITIATOR_VARIABLE_NAME, startEvent.getInitiator());
    }

    // all start events share the same behavior:
    startEventActivity.setActivityBehavior(activityBehaviorFactory.createNoneStartEventActivityBehavior(startEvent));
    if (startEvent.getEventDefinitions().size() > 0) {
      EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);
      if (eventDefinition instanceof TimerEventDefinition) {
        createTimerStartEventDefinition((TimerEventDefinition) eventDefinition, startEventActivity, processDefinition);
        
      } else if (eventDefinition instanceof MessageEventDefinition) {
        MessageEventDefinition messageDefinition = (MessageEventDefinition) eventDefinition;
        if (bpmnModel.containsMessageId(messageDefinition.getMessageRef())) {
          String messageName = bpmnModel.getMessage(messageDefinition.getMessageRef()).getName();
          if (StringUtils.isEmpty(messageName)) {
            bpmnModel.addProblem(""messageName is required for a message event"", startEvent);
          }
          messageDefinition.setMessageRef(messageName);
        }
        EventSubscriptionDeclaration eventSubscription = new EventSubscriptionDeclaration(messageDefinition.getMessageRef(), ""message"");
        startEventActivity.setProperty(""type"", ""messageStartEvent"");
        eventSubscription.setActivityId(startEventActivity.getId());
        // create message event subscription:      
        eventSubscription.setStartEvent(true);
        addEventSubscriptionDeclaration(eventSubscription, messageDefinition, processDefinition);
      }
    }
  }",True
63,"createStartFormHandlers(StartEvent,ProcessDefinitionEntity)",Method,"createStartEvent(StartEvent,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+getInitial() org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+getInitial() java.lang.String+equals(Object) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.lang.String+equals(Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+getInitial() org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+getInitial() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.form.DefaultStartFormHandler+DefaultStartFormHandler() org.activiti.engine.impl.form.FormHandler+parseConfiguration(List<FormProperty>,String,DeploymentEntity,ProcessDefinitionEntity) org.activiti.engine.impl.form.FormHandler+parseConfiguration(List<FormProperty>,String,DeploymentEntity,ProcessDefinitionEntity) org.activiti.bpmn.model.StartEvent+getFormProperties() org.activiti.bpmn.model.StartEvent+getFormProperties() org.activiti.bpmn.model.StartEvent+getFormKey() org.activiti.bpmn.model.StartEvent+getFormKey() org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setStartFormHandler(StartFormHandler) org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setStartFormHandler(StartFormHandler)",org.activiti.engine.impl.bpmn.parser.BpmnParse+deployment,526,9,4,,"protected void createStartFormHandlers(StartEvent startEvent, ProcessDefinitionEntity processDefinition) {
    if (processDefinition.getInitial() != null) {
      if (startEvent.getId().equals(processDefinition.getInitial().getId())) {
        StartFormHandler startFormHandler = new DefaultStartFormHandler();
        startFormHandler.parseConfiguration(startEvent.getFormProperties(), startEvent.getFormKey(), deployment, processDefinition);
        processDefinition.setStartFormHandler(startFormHandler);
      }
    }
  }",True
64,"createScopeStartEvent(ActivityImpl,StartEvent,ScopeImpl,SubProcess)",Method,"createStartEvent(StartEvent,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createEventSubProcessStartEventActivityBehavior(StartEvent,String) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createEventSubProcessStartEventActivityBehavior(StartEvent,String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() java.util.List+size() org.activiti.bpmn.model.Event+getEventDefinitions() org.activiti.bpmn.model.Event+getEventDefinitions() java.util.List+size() java.util.List+get(int) org.activiti.bpmn.model.Event+getEventDefinitions() org.activiti.bpmn.model.Event+getEventDefinitions() java.util.List+get(int) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.BpmnModel+containsErrorRef(String) org.activiti.bpmn.model.BpmnModel+containsErrorRef(String) org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() java.util.Map+get(Object) org.activiti.bpmn.model.BpmnModel+getErrors() org.activiti.bpmn.model.BpmnModel+getErrors() java.util.Map+get(Object) org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.ErrorEventDefinition+setErrorCode(String) org.activiti.bpmn.model.ErrorEventDefinition+setErrorCode(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+createErrorStartEventDefinition(ErrorEventDefinition,ActivityImpl,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createErrorStartEventDefinition(ErrorEventDefinition,ActivityImpl,ScopeImpl) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+containsMessageId(String) org.activiti.bpmn.model.BpmnModel+containsMessageId(String) org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.Message+getName() org.activiti.bpmn.model.BpmnModel+getMessage(String) org.activiti.bpmn.model.BpmnModel+getMessage(String) org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.Message+getName() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.MessageEventDefinition+setMessageRef(String) org.activiti.bpmn.model.MessageEventDefinition+setMessageRef(String) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+EventSubscriptionDeclaration(String,String) org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setStartEvent(boolean) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setStartEvent(boolean) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.bpmn.model.BpmnModel+containsSignalId(String) org.activiti.bpmn.model.BpmnModel+containsSignalId(String) org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.Signal+getName() org.activiti.bpmn.model.BpmnModel+getSignal(String) org.activiti.bpmn.model.BpmnModel+getSignal(String) org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.Signal+getName() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.SignalEventDefinition+setSignalRef(String) org.activiti.bpmn.model.SignalEventDefinition+setSignalRef(String) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+EventSubscriptionDeclaration(String,String) org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setStartEvent(boolean) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setStartEvent(boolean) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) java.util.List+size() org.activiti.bpmn.model.Event+getEventDefinitions() org.activiti.bpmn.model.Event+getEventDefinitions() java.util.List+size() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createNoneStartEventActivityBehavior(StartEvent) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createNoneStartEventActivityBehavior(StartEvent) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement)",org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_INITIAL org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_INITIAL org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_INITIAL org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_INITIAL org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,4860,83,4,,"protected void createScopeStartEvent(ActivityImpl startEventActivity, StartEvent startEvent, ScopeImpl scope, SubProcess subProcess) {

    Object triggeredByEvent = scope.getProperty(""triggeredByEvent"");
    boolean isTriggeredByEvent = triggeredByEvent != null && ((Boolean) triggeredByEvent == true);
    
    if (isTriggeredByEvent) { // event subprocess
      
      // all start events of an event subprocess share common behavior
      EventSubProcessStartEventActivityBehavior activityBehavior = 
              activityBehaviorFactory.createEventSubProcessStartEventActivityBehavior(startEvent, startEventActivity.getId()); 
      startEventActivity.setActivityBehavior(activityBehavior);
      
      // the scope of the event subscription is the parent of the event
      // subprocess (subscription must be created when parent is initialized)
      ScopeImpl catchingScope = ((ActivityImpl) scope).getParent();
      
      if (startEvent.getEventDefinitions().size() > 0) {
        EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);
        
        if (eventDefinition instanceof org.activiti.bpmn.model.ErrorEventDefinition) {
          
          if (scope.getProperty(PROPERTYNAME_INITIAL) == null) {
              scope.setProperty(PROPERTYNAME_INITIAL, startEventActivity);
              org.activiti.bpmn.model.ErrorEventDefinition modelErrorEvent = (org.activiti.bpmn.model.ErrorEventDefinition) eventDefinition;
              if (bpmnModel.containsErrorRef(modelErrorEvent.getErrorCode())) {
                String errorCode = bpmnModel.getErrors().get(modelErrorEvent.getErrorCode());
                if (StringUtils.isEmpty(errorCode)) {
                  bpmnModel.addProblem(""errorCode is required for an error event"", startEvent);
                }
                modelErrorEvent.setErrorCode(errorCode);
              }
              createErrorStartEventDefinition(modelErrorEvent, startEventActivity, catchingScope);
            } else {
              bpmnModel.addProblem(""multiple start events not supported for subprocess"", subProcess);
            }
          
        } else if (eventDefinition instanceof MessageEventDefinition) {
          MessageEventDefinition messageDefinition = (MessageEventDefinition) eventDefinition;
          if (bpmnModel.containsMessageId(messageDefinition.getMessageRef())) {
            String messageName = bpmnModel.getMessage(messageDefinition.getMessageRef()).getName();
            if (StringUtils.isEmpty(messageName)) {
              bpmnModel.addProblem(""messageName is required for a message event"", startEvent);
            }
            messageDefinition.setMessageRef(messageName);
          }
          EventSubscriptionDeclaration eventSubscriptionDeclaration = new EventSubscriptionDeclaration(messageDefinition.getMessageRef(), ""message"");
          eventSubscriptionDeclaration.setActivityId(startEventActivity.getId());
          eventSubscriptionDeclaration.setStartEvent(false);
          addEventSubscriptionDeclaration(eventSubscriptionDeclaration, messageDefinition, catchingScope);
          
        } else if (eventDefinition instanceof SignalEventDefinition) {
          SignalEventDefinition signalDefinition = (SignalEventDefinition) eventDefinition;
          if (bpmnModel.containsSignalId(signalDefinition.getSignalRef())) {
            String signalName = bpmnModel.getSignal(signalDefinition.getSignalRef()).getName();
            if (StringUtils.isEmpty(signalName)) {
              bpmnModel.addProblem(""signalName is required for a signal event"", startEvent);
            }
            signalDefinition.setSignalRef(signalName);
          }
          EventSubscriptionDeclaration eventSubscriptionDeclaration = new EventSubscriptionDeclaration(signalDefinition.getSignalRef(), ""signal"");
          eventSubscriptionDeclaration.setActivityId(startEventActivity.getId());
          eventSubscriptionDeclaration.setStartEvent(false);
          addEventSubscriptionDeclaration(eventSubscriptionDeclaration, signalDefinition, catchingScope);
        
        } else {
          bpmnModel.addProblem(""start event of event subprocess must be of type 'error', 'message' or 'signal' "", startEvent);
        }
      }
      
    } else { // ""regular"" subprocess
      
      if(startEvent.getEventDefinitions().size() > 0) {
        bpmnModel.addProblem(""event definitions only allowed on start event if subprocess is an event subprocess"", startEvent);
      }
      if (scope.getProperty(PROPERTYNAME_INITIAL) == null) {
        scope.setProperty(PROPERTYNAME_INITIAL, startEventActivity);
        startEventActivity.setActivityBehavior(activityBehaviorFactory.createNoneStartEventActivityBehavior(startEvent));
      } else {
        bpmnModel.addProblem(""multiple start events not supported for subprocess"", subProcess);
      }
    }

  }",True
65,"createErrorStartEventDefinition(org.activiti.bpmn.model.ErrorEventDefinition,ActivityImpl,ScopeImpl)",Method,,,"org.activiti.engine.impl.bpmn.parser.ErrorEventDefinition+ErrorEventDefinition(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.engine.impl.bpmn.parser.ErrorEventDefinition+setErrorCode(String) org.activiti.engine.impl.bpmn.parser.ErrorEventDefinition+setErrorCode(String) org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.engine.impl.bpmn.parser.ErrorEventDefinition+setPrecedence(Integer) org.activiti.engine.impl.bpmn.parser.ErrorEventDefinition+setPrecedence(Integer) org.activiti.engine.impl.bpmn.parser.BpmnParse+addErrorEventDefinition(ErrorEventDefinition,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addErrorEventDefinition(ErrorEventDefinition,ScopeImpl)",,490,8,4,,"protected void createErrorStartEventDefinition(org.activiti.bpmn.model.ErrorEventDefinition errorEventDefinition, ActivityImpl startEventActivity, ScopeImpl scope) {  
    ErrorEventDefinition definition = new ErrorEventDefinition(startEventActivity.getId());
    if (StringUtils.isNotEmpty(errorEventDefinition.getErrorCode())) {
      definition.setErrorCode(errorEventDefinition.getErrorCode());
    }
    definition.setPrecedence(10);
    addErrorEventDefinition(definition, scope);
  }",True
66,"addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl)",Method,"createProcessDefinitionStartEvent(ActivityImpl,StartEvent,ProcessDefinitionEntity) createScopeStartEvent(ActivityImpl,StartEvent,ScopeImpl,SubProcess) createScopeStartEvent(ActivityImpl,StartEvent,ScopeImpl,SubProcess) createIntermediateMessageEventDefinition(MessageEventDefinition,ActivityImpl,boolean) createIntermediateMessageEventDefinition(MessageEventDefinition,ActivityImpl,boolean) createBoundarySignalEventDefinition(SignalEventDefinition,boolean,ActivityImpl) createBoundaryMessageEventDefinition(MessageEventDefinition,boolean,ActivityImpl) createIntermediateSignalEventDefinition(SignalEventDefinition,ActivityImpl,boolean) createIntermediateSignalEventDefinition(SignalEventDefinition,ActivityImpl,boolean)",,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.util.ArrayList+ArrayList() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) java.lang.String+equals(Object) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+getEventType() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+getEventType() java.lang.String+equals(Object) java.lang.String+equals(Object) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+getEventType() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+getEventType() java.lang.String+equals(Object) java.lang.String+equals(Object) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+getEventName() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+getEventName() java.lang.String+equals(Object) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+getEventName() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+getEventName() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+isStartEvent() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+isStartEvent() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+isStartEvent() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+isStartEvent() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+getEventName() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+getEventName() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() java.util.List+add(E) java.util.List+add(E)",org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_EVENT_SUBSCRIPTION_DECLARATION org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_EVENT_SUBSCRIPTION_DECLARATION org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,1320,22,4,,"@SuppressWarnings(""unchecked"")
  protected void addEventSubscriptionDeclaration(EventSubscriptionDeclaration subscription, EventDefinition parsedEventDefinition, ScopeImpl scope) {
    List<EventSubscriptionDeclaration> eventDefinitions = (List<EventSubscriptionDeclaration>) scope.getProperty(PROPERTYNAME_EVENT_SUBSCRIPTION_DECLARATION);
    if(eventDefinitions == null) {
      eventDefinitions = new ArrayList<EventSubscriptionDeclaration>();
      scope.setProperty(PROPERTYNAME_EVENT_SUBSCRIPTION_DECLARATION, eventDefinitions);
    } else {
      // if this is a message event, validate that it is the only one with the provided name for this scope
      if(subscription.getEventType().equals(""message"")) {
        for (EventSubscriptionDeclaration eventDefinition : eventDefinitions) {
          if(eventDefinition.getEventType().equals(""message"")
            && eventDefinition.getEventName().equals(subscription.getEventName()) 
            && eventDefinition.isStartEvent() == subscription.isStartEvent()) {
            
            bpmnModel.addProblem(""Cannot have more than one message event subscription with name '"" + subscription.getEventName() +
                ""' for scope '""+scope.getId()+""'"", parsedEventDefinition);
          }
        }
      }
    }  
    eventDefinitions.add(subscription);
  }",True
67,"validateExclusiveGateway(ActivityImpl,ExclusiveGateway)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"java.util.List+size() org.activiti.engine.impl.pvm.process.ActivityImpl+getOutgoingTransitions() org.activiti.engine.impl.pvm.process.ActivityImpl+getOutgoingTransitions() java.util.List+size() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() java.util.List+size() org.activiti.engine.impl.pvm.process.ActivityImpl+getOutgoingTransitions() org.activiti.engine.impl.pvm.process.ActivityImpl+getOutgoingTransitions() java.util.List+size() java.util.List+get(int) org.activiti.engine.impl.pvm.process.ActivityImpl+getOutgoingTransitions() org.activiti.engine.impl.pvm.process.ActivityImpl+getOutgoingTransitions() java.util.List+get(int) org.activiti.engine.impl.pvm.PvmProcessElement+getProperty(String) org.activiti.engine.impl.pvm.PvmProcessElement+getProperty(String) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.PvmProcessElement+getId() org.activiti.engine.impl.pvm.PvmProcessElement+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.util.ArrayList+ArrayList() org.activiti.engine.impl.pvm.process.ActivityImpl+getOutgoingTransitions() org.activiti.engine.impl.pvm.process.ActivityImpl+getOutgoingTransitions() org.activiti.engine.impl.pvm.PvmProcessElement+getProperty(String) org.activiti.engine.impl.pvm.PvmProcessElement+getProperty(String) org.activiti.engine.impl.pvm.PvmProcessElement+getId() org.activiti.engine.impl.pvm.PvmProcessElement+getId() java.lang.String+equals(Object) org.activiti.engine.impl.pvm.PvmProcessElement+getId() org.activiti.engine.impl.pvm.PvmProcessElement+getId() java.lang.String+equals(Object) java.util.ArrayList+add(E) java.util.ArrayList+add(E) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.PvmProcessElement+getId() org.activiti.engine.impl.pvm.PvmProcessElement+getId() java.util.ArrayList+size() java.util.ArrayList+size() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.PvmProcessElement+getId() org.activiti.engine.impl.pvm.PvmProcessElement+getId() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) org.activiti.bpmn.model.BpmnModel+addWarning(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addWarning(String,BaseElement) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.PvmProcessElement+getId() org.activiti.engine.impl.pvm.PvmProcessElement+getId()",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_CONDITION org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_CONDITION org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,2920,40,1,,"public void validateExclusiveGateway(ActivityImpl activity, ExclusiveGateway exclusiveGateway) {
    if (activity.getOutgoingTransitions().size() == 0) {
      // TODO: double check if this is valid (I think in Activiti yes, since we need start events we will need an end event as well)
      bpmnModel.addProblem(""Exclusive Gateway '"" + activity.getId() + ""' has no outgoing sequence flows."", exclusiveGateway);      
    } else if (activity.getOutgoingTransitions().size() == 1) {
      PvmTransition flow = activity.getOutgoingTransitions().get(0);
      Condition condition = (Condition) flow.getProperty(BpmnParse.PROPERTYNAME_CONDITION);
      if (condition!=null) {
        bpmnModel.addProblem(""Exclusive Gateway '"" + activity.getId() + ""' has only one outgoing sequence flow ('"" + flow.getId() + ""'). This is not allowed to have a condition."", exclusiveGateway);
      }
    } else {    
      String defaultSequenceFlow = (String) activity.getProperty(""default"");
      boolean hasDefaultFlow = StringUtils.isNotEmpty(defaultSequenceFlow);
      
      ArrayList<PvmTransition> flowsWithoutCondition = new ArrayList<PvmTransition>();
      for (PvmTransition flow : activity.getOutgoingTransitions()) {
        Condition condition = (Condition) flow.getProperty(BpmnParse.PROPERTYNAME_CONDITION);
        boolean isDefaultFlow = flow.getId()!=null && flow.getId().equals(defaultSequenceFlow);
        boolean hasConditon = condition!=null;

        if (!hasConditon && !isDefaultFlow) {
          flowsWithoutCondition.add(flow);
        }
        if (hasConditon && isDefaultFlow) {
          bpmnModel.addProblem(""Exclusive Gateway '"" + activity.getId() + ""' has outgoing sequence flow '"" + flow.getId() + ""' which is the default flow but has a condition too."", exclusiveGateway);
        }
      }
      if (hasDefaultFlow || flowsWithoutCondition.size()>1) {
        // if we either have a default flow (then no flows without conditions are valid at all) or if we have more than one flow without condition this is an error 
        for (PvmTransition flow : flowsWithoutCondition) {          
          bpmnModel.addProblem(""Exclusive Gateway '"" + activity.getId() + ""' has outgoing sequence flow '"" + flow.getId() + ""' without condition which is not the default flow."", exclusiveGateway);
        }        
      } else if (flowsWithoutCondition.size() == 1) {
        // Havinf no default and exactly one flow without condition this is considered the default one now (to not break backward compatibility)
        PvmTransition flow = flowsWithoutCondition.get(0);
        bpmnModel.addWarning(""Exclusive Gateway '"" + activity.getId() + ""' has outgoing sequence flow '"" + flow.getId() + 
            ""' without condition which is not the default flow. We assume it to be the default flow, but it is bad modeling practice, better set the default flow in your gateway."", exclusiveGateway);
      }
    }
  }",False
68,"createIntermediateCatchEvent(IntermediateCatchEvent,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"java.util.List+size() org.activiti.bpmn.model.Event+getEventDefinitions() org.activiti.bpmn.model.Event+getEventDefinitions() java.util.List+size() java.util.List+get(int) org.activiti.bpmn.model.Event+getEventDefinitions() org.activiti.bpmn.model.Event+getEventDefinitions() java.util.List+get(int) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.bpmn.model.FlowNode+getIncomingFlows() org.activiti.bpmn.model.FlowNode+getIncomingFlows() org.activiti.bpmn.model.BpmnModel+getFlowElement(String) org.activiti.bpmn.model.BpmnModel+getFlowElement(String) org.activiti.bpmn.model.SequenceFlow+getSourceRef() org.activiti.bpmn.model.SequenceFlow+getSourceRef() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createIntermediateCatchEventActivityBehavior(IntermediateCatchEvent) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createIntermediateCatchEventActivityBehavior(IntermediateCatchEvent) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIntermediateTimerEventDefinition(TimerEventDefinition,ActivityImpl,boolean) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIntermediateTimerEventDefinition(TimerEventDefinition,ActivityImpl,boolean) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIntermediateSignalEventDefinition(SignalEventDefinition,ActivityImpl,boolean) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIntermediateSignalEventDefinition(SignalEventDefinition,ActivityImpl,boolean) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIntermediateMessageEventDefinition(MessageEventDefinition,ActivityImpl,boolean) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIntermediateMessageEventDefinition(MessageEventDefinition,ActivityImpl,boolean) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseIntermediateCatchEvent(IntermediateCatchEvent,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseIntermediateCatchEvent(IntermediateCatchEvent,ScopeImpl,ActivityImpl)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_EVENT_CATCH org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_EVENT_CATCH org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_EVENT_CATCH org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,2506,52,1,,"public ActivityImpl createIntermediateCatchEvent(IntermediateCatchEvent event, ScopeImpl scopeElement) {
    ActivityImpl nestedActivity = null;
    EventDefinition eventDefinition = null;
    if (event.getEventDefinitions().size() > 0) {
      eventDefinition = event.getEventDefinitions().get(0);
    }
   
    if (eventDefinition == null) {
      bpmnModel.addProblem(""No event definition for intermediate catch event "" + event.getId(), event);
      nestedActivity = createActivityOnScope(event, ELEMENT_EVENT_CATCH, scopeElement);
    } else {
      
      boolean isAfterEventBasedGateway = false;
      String eventBasedGatewayId = null;
      for (SequenceFlow sequenceFlow : event.getIncomingFlows()) {
        FlowElement sourceElement = bpmnModel.getFlowElement(sequenceFlow.getSourceRef());
        if (sourceElement instanceof EventGateway) {
          isAfterEventBasedGateway = true;
          eventBasedGatewayId = sourceElement.getId();
          break;
        }
      }
      
      if (isAfterEventBasedGateway) {
        ActivityImpl gatewayActivity = scopeElement.findActivity(eventBasedGatewayId);
        nestedActivity = createActivityOnScope(event, ELEMENT_EVENT_CATCH, gatewayActivity);
      } else {
        nestedActivity = createActivityOnScope(event, ELEMENT_EVENT_CATCH, scopeElement);
      }
      
      // Catch event behavior is the same for all types
      nestedActivity.setActivityBehavior(activityBehaviorFactory.createIntermediateCatchEventActivityBehavior(event));
      
      if (eventDefinition instanceof TimerEventDefinition) {
        createIntermediateTimerEventDefinition((TimerEventDefinition) eventDefinition, nestedActivity, isAfterEventBasedGateway);
      } else if (eventDefinition instanceof SignalEventDefinition) {
        createIntermediateSignalEventDefinition((SignalEventDefinition) eventDefinition, nestedActivity, isAfterEventBasedGateway);
      } else if (eventDefinition instanceof MessageEventDefinition) {
        createIntermediateMessageEventDefinition((MessageEventDefinition) eventDefinition, nestedActivity, isAfterEventBasedGateway);
      } else {
        bpmnModel.addProblem(""Unsupported intermediate catch event type."", event);
      }
    }
    
    createExecutionListenersOnScope(event.getExecutionListeners(), nestedActivity);
    
    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseIntermediateCatchEvent(event, scopeElement, nestedActivity);
    }
    
    return nestedActivity;
  }",False
69,"createIntermediateMessageEventDefinition(MessageEventDefinition,ActivityImpl,boolean)",Method,"createIntermediateCatchEvent(IntermediateCatchEvent,ScopeImpl)",,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.BpmnModel+containsMessageId(String) org.activiti.bpmn.model.BpmnModel+containsMessageId(String) org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.Message+getName() org.activiti.bpmn.model.BpmnModel+getMessage(String) org.activiti.bpmn.model.BpmnModel+getMessage(String) org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.Message+getName() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.MessageEventDefinition+setMessageRef(String) org.activiti.bpmn.model.MessageEventDefinition+setMessageRef(String) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+EventSubscriptionDeclaration(String,String) org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.parser.BpmnParseListener+parseIntermediateMessageCatchEventDefinition(MessageEventDefinition,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseIntermediateMessageCatchEventDefinition(MessageEventDefinition,ActivityImpl)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,1340,25,4,,"protected void createIntermediateMessageEventDefinition(MessageEventDefinition messageEventDefinition, ActivityImpl nestedActivity, boolean isAfterEventBasedGateway) {
    
    nestedActivity.setProperty(""type"", ""intermediateMessageCatch"");   
    
    if (bpmnModel.containsMessageId(messageEventDefinition.getMessageRef())) {
      String messageName = bpmnModel.getMessage(messageEventDefinition.getMessageRef()).getName();
      if (StringUtils.isEmpty(messageName)) {
        bpmnModel.addProblem(""messageName is required for a message event"", messageEventDefinition);
      }
      messageEventDefinition.setMessageRef(messageName);
    }
    
    EventSubscriptionDeclaration messageDefinition = new EventSubscriptionDeclaration(messageEventDefinition.getMessageRef(), ""message"");
    if(isAfterEventBasedGateway) {
      messageDefinition.setActivityId(nestedActivity.getId());
      addEventSubscriptionDeclaration(messageDefinition, messageEventDefinition, nestedActivity.getParent());      
    } else {
      nestedActivity.setScope(true);
      addEventSubscriptionDeclaration(messageDefinition, messageEventDefinition, nestedActivity);   
    }
    
    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseIntermediateMessageCatchEventDefinition(messageEventDefinition, nestedActivity);
    }
  }",False
70,"createIntermediateThrowEvent(ThrowEvent,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) java.util.List+size() org.activiti.bpmn.model.Event+getEventDefinitions() org.activiti.bpmn.model.Event+getEventDefinitions() java.util.List+size() java.util.List+get(int) org.activiti.bpmn.model.Event+getEventDefinitions() org.activiti.bpmn.model.Event+getEventDefinitions() java.util.List+get(int) org.activiti.bpmn.model.BpmnModel+containsSignalId(String) org.activiti.bpmn.model.BpmnModel+containsSignalId(String) org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.Signal+getName() org.activiti.bpmn.model.BpmnModel+getSignal(String) org.activiti.bpmn.model.BpmnModel+getSignal(String) org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.Signal+getName() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.SignalEventDefinition+setSignalRef(String) org.activiti.bpmn.model.SignalEventDefinition+setSignalRef(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+EventSubscriptionDeclaration(String,String) org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setAsync(boolean) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setAsync(boolean) org.activiti.bpmn.model.SignalEventDefinition+isAsync() org.activiti.bpmn.model.SignalEventDefinition+isAsync() org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createIntermediateThrowSignalEventActivityBehavior(ThrowEvent,EventSubscriptionDeclaration) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createIntermediateThrowSignalEventActivityBehavior(ThrowEvent,EventSubscriptionDeclaration) org.activiti.engine.impl.bpmn.parser.BpmnParse+createCompensateEventDefinition(CompensateEventDefinition,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createCompensateEventDefinition(CompensateEventDefinition,ScopeImpl) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createIntermediateThrowCompensationEventActivityBehavior(ThrowEvent,CompensateEventDefinition) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createIntermediateThrowCompensationEventActivityBehavior(ThrowEvent,CompensateEventDefinition) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createIntermediateThrowNoneEventActivityBehavior(ThrowEvent) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createIntermediateThrowNoneEventActivityBehavior(ThrowEvent) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.ThrowEvent+getExecutionListeners() org.activiti.bpmn.model.ThrowEvent+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseIntermediateThrowEvent(ThrowEvent,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseIntermediateThrowEvent(ThrowEvent,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_EVENT_THROW org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,2525,42,1,,"public ActivityImpl createIntermediateThrowEvent(ThrowEvent intermediateEvent, ScopeImpl scopeElement) {
    ActivityImpl nestedActivityImpl = createActivityOnScope(intermediateEvent, ELEMENT_EVENT_THROW, scopeElement);

    ActivityBehavior activityBehavior = null;
    EventDefinition eventDefinition = null;
    if (intermediateEvent.getEventDefinitions().size() > 0) {
      eventDefinition = intermediateEvent.getEventDefinitions().get(0);
    }
    
    if (eventDefinition instanceof SignalEventDefinition) {
      SignalEventDefinition signalEventDefinition = (SignalEventDefinition) eventDefinition;
      if (bpmnModel.containsSignalId(signalEventDefinition.getSignalRef())) {
        String signalName = bpmnModel.getSignal(signalEventDefinition.getSignalRef()).getName();
        if (StringUtils.isEmpty(signalName)) {
          bpmnModel.addProblem(""signalName is required for a signal event"", intermediateEvent);
        }
        signalEventDefinition.setSignalRef(signalName);
      }
      nestedActivityImpl.setProperty(""type"", ""intermediateSignalThrow"");  
      EventSubscriptionDeclaration signalDefinition = new EventSubscriptionDeclaration(signalEventDefinition.getSignalRef(), ""signal"");
      signalDefinition.setAsync(signalEventDefinition.isAsync());
      activityBehavior = activityBehaviorFactory.createIntermediateThrowSignalEventActivityBehavior(intermediateEvent, signalDefinition); 
    } else if (eventDefinition instanceof org.activiti.bpmn.model.CompensateEventDefinition) {
      CompensateEventDefinition compensateEventDefinition = createCompensateEventDefinition((org.activiti.bpmn.model.CompensateEventDefinition) eventDefinition, scopeElement);
      activityBehavior = activityBehaviorFactory.createIntermediateThrowCompensationEventActivityBehavior(intermediateEvent,compensateEventDefinition); 
      
    } else if (eventDefinition == null) {
      activityBehavior = activityBehaviorFactory.createIntermediateThrowNoneEventActivityBehavior(intermediateEvent); 
    } else { 
      bpmnModel.addProblem(""Unsupported intermediate throw event type "" + eventDefinition, intermediateEvent);
    }
    
    nestedActivityImpl.setActivityBehavior(activityBehavior);
    
    createExecutionListenersOnScope(intermediateEvent.getExecutionListeners(), nestedActivityImpl);
    
    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseIntermediateThrowEvent(intermediateEvent, scopeElement, nestedActivityImpl);
    }
    
    return nestedActivityImpl;
  }",False
71,"createCompensateEventDefinition(org.activiti.bpmn.model.CompensateEventDefinition,ScopeImpl)",Method,,,"org.activiti.bpmn.model.CompensateEventDefinition+getActivityRef() org.activiti.bpmn.model.CompensateEventDefinition+getActivityRef() org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.bpmn.model.CompensateEventDefinition+getActivityRef() org.activiti.bpmn.model.CompensateEventDefinition+getActivityRef() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.CompensateEventDefinition+getActivityRef() org.activiti.bpmn.model.CompensateEventDefinition+getActivityRef() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.bpmn.parser.CompensateEventDefinition+CompensateEventDefinition() org.activiti.engine.impl.bpmn.parser.CompensateEventDefinition+setActivityRef(String) org.activiti.engine.impl.bpmn.parser.CompensateEventDefinition+setActivityRef(String) org.activiti.bpmn.model.CompensateEventDefinition+getActivityRef() org.activiti.bpmn.model.CompensateEventDefinition+getActivityRef() org.activiti.engine.impl.bpmn.parser.CompensateEventDefinition+setWaitForCompletion(boolean) org.activiti.engine.impl.bpmn.parser.CompensateEventDefinition+setWaitForCompletion(boolean) org.activiti.bpmn.model.CompensateEventDefinition+isWaitForCompletion() org.activiti.bpmn.model.CompensateEventDefinition+isWaitForCompletion()",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,845,14,4,,"protected CompensateEventDefinition createCompensateEventDefinition(org.activiti.bpmn.model.CompensateEventDefinition eventDefinition, ScopeImpl scopeElement) {
    if(StringUtils.isNotEmpty(eventDefinition.getActivityRef())) {
      if(scopeElement.findActivity(eventDefinition.getActivityRef()) == null) {
        bpmnModel.addProblem(""Invalid attribute value for 'activityRef': no activity with id '"" + eventDefinition.getActivityRef() +
            ""' in current scope "" + scopeElement.getId(), eventDefinition);
      }
    }
    
    CompensateEventDefinition compensateEventDefinition =  new CompensateEventDefinition();
    compensateEventDefinition.setActivityRef(eventDefinition.getActivityRef());
    compensateEventDefinition.setWaitForCompletion(eventDefinition.isWaitForCompletion());
    
    return compensateEventDefinition;
  }",False
72,"createCatchCompensateEventDefinition(org.activiti.bpmn.model.CompensateEventDefinition,ActivityImpl)",Method,,,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ScopeImpl+getActivities() org.activiti.engine.impl.pvm.process.ScopeImpl+getActivities() java.lang.Object+equals(Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.lang.Object+equals(Object) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,596,10,4,,"protected void createCatchCompensateEventDefinition(org.activiti.bpmn.model.CompensateEventDefinition compensateEventDefinition, ActivityImpl activity) {   
    activity.setProperty(""type"", ""compensationBoundaryCatch"");
    
    ScopeImpl parent = activity.getParent();
    for (ActivityImpl child : parent.getActivities()) {
      if (child.getProperty(""type"").equals(""compensationBoundaryCatch"") && child != activity ) {
        bpmnModel.addProblem(""multiple boundary events with compensateEventDefinition not supported on same activity."", compensateEventDefinition);        
      }
    }
  }",False
73,"createBoundaryCancelEventDefinition(CancelEventDefinition,ActivityImpl)",Method,"createBoundaryEvent(BoundaryEvent,ScopeImpl)",,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() java.lang.Object+equals(Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.lang.Object+equals(Object) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.pvm.process.ScopeImpl+getActivities() org.activiti.engine.impl.pvm.process.ScopeImpl+getActivities() java.lang.Object+equals(Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.lang.Object+equals(Object) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createCancelBoundaryEventActivityBehavior(CancelEventDefinition) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createCancelBoundaryEventActivityBehavior(CancelEventDefinition)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory,908,17,4,,"protected ActivityBehavior createBoundaryCancelEventDefinition(CancelEventDefinition cancelEventDefinition, ActivityImpl activity) {
    activity.setProperty(""type"", ""cancelBoundaryCatch"");
    
    ActivityImpl parent = (ActivityImpl) activity.getParent();
    if(!parent.getProperty(""type"").equals(""transaction"")) {
      bpmnModel.addProblem(""boundary event with cancelEventDefinition only supported on transaction subprocesses."", cancelEventDefinition);
    }
    
    for (ActivityImpl child : parent.getActivities()) {
      if(child.getProperty(""type"").equals(""cancelBoundaryCatch"")
        && child != activity ) {
        bpmnModel.addProblem(""multiple boundary events with cancelEventDefinition not supported on same transaction subprocess."", cancelEventDefinition);        
      }
    }
    
    return activityBehaviorFactory.createCancelBoundaryEventActivityBehavior(cancelEventDefinition);
  }",True
74,"createMultiInstanceLoopCharacteristics(org.activiti.bpmn.model.Activity,ActivityImpl)",Method,,,"org.activiti.bpmn.model.Activity+getLoopCharacteristics() org.activiti.bpmn.model.Activity+getLoopCharacteristics() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+isSequential() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+isSequential() org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createSequentialMultiInstanceBehavior(ActivityImpl,AbstractBpmnActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createSequentialMultiInstanceBehavior(ActivityImpl,AbstractBpmnActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+getActivityBehavior() org.activiti.engine.impl.pvm.process.ActivityImpl+getActivityBehavior() org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createParallelMultiInstanceBehavior(ActivityImpl,AbstractBpmnActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createParallelMultiInstanceBehavior(ActivityImpl,AbstractBpmnActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+getActivityBehavior() org.activiti.engine.impl.pvm.process.ActivityImpl+getActivityBehavior() org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+isSequential() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+isSequential() org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getLoopCardinality() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getLoopCardinality() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+setLoopCardinalityExpression(Expression) org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+setLoopCardinalityExpression(Expression) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getLoopCardinality() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getLoopCardinality() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getCompletionCondition() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getCompletionCondition() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+setCompletionConditionExpression(Expression) org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+setCompletionConditionExpression(Expression) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getCompletionCondition() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getCompletionCondition() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getInputDataItem() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getInputDataItem() java.lang.String+contains(CharSequence) org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getInputDataItem() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getInputDataItem() java.lang.String+contains(CharSequence) org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+setCollectionExpression(Expression) org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+setCollectionExpression(Expression) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getInputDataItem() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getInputDataItem() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+setCollectionVariable(String) org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+setCollectionVariable(String) org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getInputDataItem() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getInputDataItem() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getElementVariable() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getElementVariable() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+setCollectionElementVariable(String) org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+setCollectionElementVariable(String) org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getElementVariable() org.activiti.bpmn.model.MultiInstanceLoopCharacteristics+getElementVariable() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+getLoopCardinalityExpression() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+getLoopCardinalityExpression() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+getCollectionExpression() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+getCollectionExpression() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+getCollectionVariable() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+getCollectionVariable() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+getCollectionExpression() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+getCollectionExpression() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+getCollectionVariable() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+getCollectionVariable() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+getCollectionElementVariable() org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior+getCollectionElementVariable() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.parser.BpmnParseListener+parseMultiInstanceLoopCharacteristics(Activity,MultiInstanceLoopCharacteristics,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseMultiInstanceLoopCharacteristics(Activity,MultiInstanceLoopCharacteristics,ActivityImpl)",org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,3196,69,1,"/** 
 * Parses loopCharacteristics (standardLoop/Multi-instance) of an activity, if any is defined.
 */
","/**
   * Parses loopCharacteristics (standardLoop/Multi-instance) of an activity, if
   * any is defined.
   */
  public void createMultiInstanceLoopCharacteristics(org.activiti.bpmn.model.Activity modelActivity, ActivityImpl activity) {
    
    MultiInstanceActivityBehavior miActivityBehavior = null;
    
    MultiInstanceLoopCharacteristics loopCharacteristics = modelActivity.getLoopCharacteristics();
    if (loopCharacteristics == null) {
      // nothing to do
      return;
    }
    
    // Activity Behavior
    if (loopCharacteristics.isSequential()) {
      miActivityBehavior = activityBehaviorFactory.createSequentialMultiInstanceBehavior(
              activity, (AbstractBpmnActivityBehavior) activity.getActivityBehavior()); 
    } else {
      miActivityBehavior = activityBehaviorFactory.createParallelMultiInstanceBehavior(
              activity, (AbstractBpmnActivityBehavior) activity.getActivityBehavior());
    }
    
    // ActivityImpl settings
    activity.setScope(true);
    activity.setProperty(""multiInstance"", loopCharacteristics.isSequential() ? ""sequential"" : ""parallel"");
    activity.setActivityBehavior(miActivityBehavior);
    
    
    // loopcardinality
    if (StringUtils.isNotEmpty(loopCharacteristics.getLoopCardinality())) {
      miActivityBehavior.setLoopCardinalityExpression(expressionManager.createExpression(loopCharacteristics.getLoopCardinality()));
    }
    
    // completion condition
    if (StringUtils.isNotEmpty(loopCharacteristics.getCompletionCondition())) {
      miActivityBehavior.setCompletionConditionExpression(expressionManager.createExpression(loopCharacteristics.getCompletionCondition()));
    }
    
    // activiti:collection
    if (StringUtils.isNotEmpty(loopCharacteristics.getInputDataItem())) {
      if (loopCharacteristics.getInputDataItem().contains(""{"")) {
        miActivityBehavior.setCollectionExpression(expressionManager.createExpression(loopCharacteristics.getInputDataItem()));
      } else {
        miActivityBehavior.setCollectionVariable(loopCharacteristics.getInputDataItem());
      }
    }

    // activiti:elementVariable
    if (StringUtils.isNotEmpty(loopCharacteristics.getElementVariable())) {
      miActivityBehavior.setCollectionElementVariable(loopCharacteristics.getElementVariable());
    }

    // Validation
    if (miActivityBehavior.getLoopCardinalityExpression() == null && miActivityBehavior.getCollectionExpression() == null
            && miActivityBehavior.getCollectionVariable() == null) {
      bpmnModel.addProblem(""Either loopCardinality or loopDataInputRef/activiti:collection must been set."", loopCharacteristics);
    }

    // Validation
    if (miActivityBehavior.getCollectionExpression() == null && miActivityBehavior.getCollectionVariable() == null
            && miActivityBehavior.getCollectionElementVariable() != null) {
      bpmnModel.addProblem(""LoopDataInputRef/activiti:collection must be set when using inputDataItem or activiti:elementVariable."", loopCharacteristics);
    }

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseMultiInstanceLoopCharacteristics(modelActivity, loopCharacteristics, activity);
    }
  }",True
75,"createActivityOnScope(FlowElement,String,ScopeImpl)",Method,"createStartEvent(StartEvent,ScopeImpl,SubProcess) createIntermediateCatchEvent(IntermediateCatchEvent,ScopeImpl) createIntermediateCatchEvent(IntermediateCatchEvent,ScopeImpl) createIntermediateCatchEvent(IntermediateCatchEvent,ScopeImpl) createIntermediateThrowEvent(ThrowEvent,ScopeImpl) createExclusiveGateway(ExclusiveGateway,ScopeImpl) createInclusiveGateway(InclusiveGateway,ScopeImpl) createEventBasedGateway(EventGateway,ScopeImpl) createParallelGateway(ParallelGateway,ScopeImpl) createScriptTask(ScriptTask,ScopeImpl) createServiceTask(ServiceTask,ScopeImpl) createBusinessRuleTask(BusinessRuleTask,ScopeImpl) createSendTask(SendTask,ScopeImpl) createTask(Task,ScopeImpl) createManualTask(ManualTask,ScopeImpl) createReceiveTask(ReceiveTask,ScopeImpl) createUserTask(UserTask,ScopeImpl) createEndEvent(EndEvent,ScopeImpl) createBoundaryEvent(BoundaryEvent,ScopeImpl) createSubProcess(SubProcess,ScopeImpl) createTransaction(Transaction,ScopeImpl) createCallActivity(CallActivity,ScopeImpl)",,"org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.impl.pvm.process.ScopeImpl+createActivity(String) org.activiti.engine.impl.pvm.process.ScopeImpl+createActivity(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.FlowElement+getName() org.activiti.bpmn.model.FlowElement+getName() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.FlowElement+getDocumentation() org.activiti.bpmn.model.FlowElement+getDocumentation() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.Activity+getDefaultFlow() org.activiti.bpmn.model.Activity+getDefaultFlow() org.activiti.bpmn.model.Activity+isForCompensation() org.activiti.bpmn.model.Activity+isForCompensation() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.Gateway+getDefaultFlow() org.activiti.bpmn.model.Gateway+getDefaultFlow() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object)",org.activiti.engine.impl.bpmn.parser.BpmnParse+LOGGER org.activiti.engine.impl.bpmn.parser.BpmnParse+LOGGER org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_IS_FOR_COMPENSATION,1130,27,1,"/** 
 * Parses the generic information of an activity element (id, name, documentation, etc.), and creates a new  {@link ActivityImpl} on the givenscope element.
 */
","/**
   * Parses the generic information of an activity element (id, name,
   * documentation, etc.), and creates a new {@link ActivityImpl} on the given
   * scope element.
   */
  public ActivityImpl createActivityOnScope(FlowElement flowElement, String xmlLocalName, ScopeImpl scopeElement) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""Parsing activity {}"", flowElement.getId());
    }
    
    ActivityImpl activity = scopeElement.createActivity(flowElement.getId());

    activity.setProperty(""name"", flowElement.getName());
    activity.setProperty(""documentation"", flowElement.getDocumentation());
    if (flowElement instanceof Activity) {
      Activity modelActivity = (Activity) flowElement;
      activity.setProperty(""default"", modelActivity.getDefaultFlow());
      if(modelActivity.isForCompensation()) {
        activity.setProperty(PROPERTYNAME_IS_FOR_COMPENSATION, true);        
      }
    } else if (flowElement instanceof Gateway) {
      activity.setProperty(""default"", ((Gateway) flowElement).getDefaultFlow());
    }
    activity.setProperty(""type"", xmlLocalName);
    
    return activity;
  }",True
76,parseDocumentation(Element),Method,,,org.activiti.engine.impl.util.xml.Element+elements(String) org.activiti.engine.impl.util.xml.Element+elements(String) java.util.List+isEmpty() java.util.List+isEmpty() java.lang.StringBuilder+StringBuilder() java.lang.StringBuilder+length() java.lang.StringBuilder+length() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.String+trim() org.activiti.engine.impl.util.xml.Element+getText() org.activiti.engine.impl.util.xml.Element+getText() java.lang.String+trim() java.lang.StringBuilder+toString() java.lang.StringBuilder+toString(),,435,17,1,,"public String parseDocumentation(Element element) {
    List<Element> docElements = element.elements(""documentation"");
    if (docElements.isEmpty()) {
      return null;
    }
    
    StringBuilder builder = new StringBuilder();
    for (Element e: docElements) {
      if (builder.length() != 0) {
        builder.append(""\n\n"");
      }
      
      builder.append(e.getText().trim());
    }
    
    return builder.toString();
  }",True
77,"createExclusiveGateway(ExclusiveGateway,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createExclusiveGatewayActivityBehavior(ExclusiveGateway) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createExclusiveGatewayActivityBehavior(ExclusiveGateway) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseExclusiveGateway(ExclusiveGateway,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseExclusiveGateway(ExclusiveGateway,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_GATEWAY_EXCLUSIVE org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,589,14,1,"/** 
 * Parses an exclusive gateway declaration.
 */
","/**
   * Parses an exclusive gateway declaration.
   */
  public ActivityImpl createExclusiveGateway(ExclusiveGateway gateway, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(gateway, ELEMENT_GATEWAY_EXCLUSIVE, scope);
    activity.setActivityBehavior(activityBehaviorFactory.createExclusiveGatewayActivityBehavior(gateway));

    createExecutionListenersOnScope(gateway.getExecutionListeners(), activity);

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseExclusiveGateway(gateway, scope, activity);
    }
    return activity;
  }",True
78,"createInclusiveGateway(InclusiveGateway,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createInclusiveGatewayActivityBehavior(InclusiveGateway) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createInclusiveGatewayActivityBehavior(InclusiveGateway) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseInclusiveGateway(InclusiveGateway,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseInclusiveGateway(InclusiveGateway,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_GATEWAY_INCLUSIVE org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,589,14,1,"/** 
 * Parses an inclusive gateway declaration.
 */
","/**
   * Parses an inclusive gateway declaration.
   */
  public ActivityImpl createInclusiveGateway(InclusiveGateway gateway, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(gateway, ELEMENT_GATEWAY_INCLUSIVE, scope);
    activity.setActivityBehavior(activityBehaviorFactory.createInclusiveGatewayActivityBehavior(gateway));

    createExecutionListenersOnScope(gateway.getExecutionListeners(), activity);

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseInclusiveGateway(gateway, scope, activity);
    }
    return activity;
  }",True
79,"createEventBasedGateway(EventGateway,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createEventBasedGatewayActivityBehavior(EventGateway) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createEventBasedGatewayActivityBehavior(EventGateway) org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseEventBasedGateway(EventGateway,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseEventBasedGateway(EventGateway,ScopeImpl,ActivityImpl) org.activiti.bpmn.model.FlowNode+getOutgoingFlows() org.activiti.bpmn.model.FlowNode+getOutgoingFlows() org.activiti.bpmn.model.BpmnModel+getFlowElement(String) org.activiti.bpmn.model.BpmnModel+getFlowElement(String) org.activiti.bpmn.model.SequenceFlow+getTargetRef() org.activiti.bpmn.model.SequenceFlow+getTargetRef() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_GATEWAY_EVENT org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,999,21,1,,"public ActivityImpl createEventBasedGateway(EventGateway gateway, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(gateway, ELEMENT_GATEWAY_EVENT, scope);   
    activity.setActivityBehavior(activityBehaviorFactory.createEventBasedGatewayActivityBehavior(gateway));
    activity.setScope(true);

    createExecutionListenersOnScope(gateway.getExecutionListeners(), activity);

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseEventBasedGateway(gateway, scope, activity);
    }
    
    // find all outgoing sequence flows
    for (SequenceFlow sequenceFlow : gateway.getOutgoingFlows()) {
      FlowElement flowElement = bpmnModel.getFlowElement(sequenceFlow.getTargetRef());
      if (flowElement != null && flowElement instanceof IntermediateCatchEvent == false) {
        bpmnModel.addProblem(""Event based gateway can only be connected to elements of type intermediateCatchEvent."", flowElement);
      }
    }
    
    return activity;
  }",True
80,"createParallelGateway(ParallelGateway,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createParallelGatewayActivityBehavior(ParallelGateway) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createParallelGatewayActivityBehavior(ParallelGateway) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseParallelGateway(ParallelGateway,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseParallelGateway(ParallelGateway,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_GATEWAY_PARALLEL org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,582,14,1,"/** 
 * Parses a parallel gateway declaration.
 */
","/**
   * Parses a parallel gateway declaration.
   */
  public ActivityImpl createParallelGateway(ParallelGateway gateway, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(gateway, ELEMENT_GATEWAY_PARALLEL, scope);
    activity.setActivityBehavior(activityBehaviorFactory.createParallelGatewayActivityBehavior(gateway));

    createExecutionListenersOnScope(gateway.getExecutionListeners(), activity);

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseParallelGateway(gateway, scope, activity);
    }
    return activity;
  }",True
81,"createScriptTask(ScriptTask,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createScriptTaskActivityBehavior(ScriptTask) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createScriptTaskActivityBehavior(ScriptTask) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseScriptTask(ScriptTask,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseScriptTask(ScriptTask,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_TASK_SCRIPT org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,681,18,1,"/** 
 * Parses a scriptTask declaration.
 */
","/**
   * Parses a scriptTask declaration.
   */
  public ActivityImpl createScriptTask(ScriptTask scriptTask, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(scriptTask, ELEMENT_TASK_SCRIPT, scope);
    
    activity.setAsync(scriptTask.isAsynchronous());
    activity.setExclusive(!scriptTask.isNotExclusive());

    activity.setActivityBehavior(activityBehaviorFactory.createScriptTaskActivityBehavior(scriptTask));

    createExecutionListenersOnScope(scriptTask.getExecutionListeners(), activity);

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseScriptTask(scriptTask, scope, activity);
    }
    return activity;
  }",True
82,"createServiceTask(ServiceTask,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.bpmn.model.ServiceTask+getType() org.activiti.bpmn.model.ServiceTask+getType() java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.ServiceTask+getType() org.activiti.bpmn.model.ServiceTask+getType() java.lang.String+equalsIgnoreCase(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+validateFieldDeclarationsForEmail(Task,List<FieldExtension>) org.activiti.engine.impl.bpmn.parser.BpmnParse+validateFieldDeclarationsForEmail(Task,List<FieldExtension>) org.activiti.bpmn.model.ServiceTask+getFieldExtensions() org.activiti.bpmn.model.ServiceTask+getFieldExtensions() org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createMailActivityBehavior(ServiceTask) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createMailActivityBehavior(ServiceTask) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.ServiceTask+getType() org.activiti.bpmn.model.ServiceTask+getType() java.lang.String+equalsIgnoreCase(String) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createMuleActivityBehavior(ServiceTask,BpmnModel) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createMuleActivityBehavior(ServiceTask,BpmnModel) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.ServiceTask+getType() org.activiti.bpmn.model.ServiceTask+getType() java.lang.String+equalsIgnoreCase(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+validateFieldDeclarationsForShell(Task,List<FieldExtension>) org.activiti.engine.impl.bpmn.parser.BpmnParse+validateFieldDeclarationsForShell(Task,List<FieldExtension>) org.activiti.bpmn.model.ServiceTask+getFieldExtensions() org.activiti.bpmn.model.ServiceTask+getFieldExtensions() org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createShellActivityBehavior(ServiceTask) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createShellActivityBehavior(ServiceTask) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.ServiceTask+getType() org.activiti.bpmn.model.ServiceTask+getType() java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.ServiceTask+getImplementationType() org.activiti.bpmn.model.ServiceTask+getImplementationType() org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createClassDelegateServiceTask(ServiceTask) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createClassDelegateServiceTask(ServiceTask) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.ServiceTask+getImplementationType() org.activiti.bpmn.model.ServiceTask+getImplementationType() org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createServiceTaskDelegateExpressionActivityBehavior(ServiceTask) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createServiceTaskDelegateExpressionActivityBehavior(ServiceTask) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.ServiceTask+getImplementationType() org.activiti.bpmn.model.ServiceTask+getImplementationType() org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createServiceTaskExpressionActivityBehavior(ServiceTask) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createServiceTaskExpressionActivityBehavior(ServiceTask) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.ServiceTask+getImplementationType() org.activiti.bpmn.model.ServiceTask+getImplementationType() org.activiti.bpmn.model.ServiceTask+getOperationRef() org.activiti.bpmn.model.ServiceTask+getOperationRef() java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) org.activiti.bpmn.model.ServiceTask+getOperationRef() org.activiti.bpmn.model.ServiceTask+getOperationRef() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.ServiceTask+getOperationRef() org.activiti.bpmn.model.ServiceTask+getOperationRef() org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createWebServiceActivityBehavior(ServiceTask) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createWebServiceActivityBehavior(ServiceTask) org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+setOperation(Operation) org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+setOperation(Operation) java.util.Map+get(Object) java.util.Map+get(Object) org.activiti.bpmn.model.ServiceTask+getOperationRef() org.activiti.bpmn.model.ServiceTask+getOperationRef() org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.engine.impl.bpmn.parser.BpmnParse+createIOSpecification(IOSpecification) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIOSpecification(IOSpecification) org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+setIoSpecification(IOSpecification) org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+setIoSpecification(IOSpecification) org.activiti.bpmn.model.Activity+getDataInputAssociations() org.activiti.bpmn.model.Activity+getDataInputAssociations() org.activiti.engine.impl.bpmn.parser.BpmnParse+createDataInputAssociation(DataAssociation) org.activiti.engine.impl.bpmn.parser.BpmnParse+createDataInputAssociation(DataAssociation) org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+addDataInputAssociation(AbstractDataAssociation) org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+addDataInputAssociation(AbstractDataAssociation) org.activiti.bpmn.model.Activity+getDataOutputAssociations() org.activiti.bpmn.model.Activity+getDataOutputAssociations() org.activiti.engine.impl.bpmn.parser.BpmnParse+createDataOutputAssociation(DataAssociation) org.activiti.engine.impl.bpmn.parser.BpmnParse+createDataOutputAssociation(DataAssociation) org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+addDataOutputAssociation(AbstractDataAssociation) org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+addDataOutputAssociation(AbstractDataAssociation) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseServiceTask(ServiceTask,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseServiceTask(ServiceTask,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_TASK_SERVICE org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.bpmn.model.ImplementationType+IMPLEMENTATION_TYPE_CLASS org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.bpmn.model.ImplementationType+IMPLEMENTATION_TYPE_DELEGATEEXPRESSION org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.bpmn.model.ImplementationType+IMPLEMENTATION_TYPE_EXPRESSION org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.bpmn.model.ImplementationType+IMPLEMENTATION_TYPE_WEBSERVICE org.activiti.engine.impl.bpmn.parser.BpmnParse+operations org.activiti.engine.impl.bpmn.parser.BpmnParse+operations org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+operations org.activiti.engine.impl.bpmn.parser.BpmnParse+operations org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,4106,77,1,"/** 
 * Parses a serviceTask declaration.
 */
","/**
   * Parses a serviceTask declaration.
   */
  public ActivityImpl createServiceTask(ServiceTask serviceTask, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(serviceTask, ELEMENT_TASK_SERVICE, scope);
    activity.setAsync(serviceTask.isAsynchronous());
    activity.setExclusive(!serviceTask.isNotExclusive());

    // Email, Mule and Shell service tasks
    if (StringUtils.isNotEmpty(serviceTask.getType())) {
      
      if (serviceTask.getType().equalsIgnoreCase(""mail"")) {
        validateFieldDeclarationsForEmail(serviceTask, serviceTask.getFieldExtensions());
        activity.setActivityBehavior(activityBehaviorFactory.createMailActivityBehavior(serviceTask));
        
      } else if (serviceTask.getType().equalsIgnoreCase(""mule"")) {
        activity.setActivityBehavior(activityBehaviorFactory.createMuleActivityBehavior(serviceTask, bpmnModel));
        
      } else if (serviceTask.getType().equalsIgnoreCase(""shell"")) {
        validateFieldDeclarationsForShell(serviceTask, serviceTask.getFieldExtensions());
        activity.setActivityBehavior(activityBehaviorFactory.createShellActivityBehavior(serviceTask));
        
      } else {
        bpmnModel.addProblem(""Invalid usage of type attribute: '"" + serviceTask.getType() + ""'."", serviceTask);
      }

    // activiti:class
    } else if (ImplementationType.IMPLEMENTATION_TYPE_CLASS.equalsIgnoreCase(serviceTask.getImplementationType())) {
      activity.setActivityBehavior(activityBehaviorFactory.createClassDelegateServiceTask(serviceTask));
      
    // activiti:delegateExpression
    } else if (ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equalsIgnoreCase(serviceTask.getImplementationType())) {
      activity.setActivityBehavior(activityBehaviorFactory.createServiceTaskDelegateExpressionActivityBehavior(serviceTask));

    // activiti:expression      
    } else if (ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION.equalsIgnoreCase(serviceTask.getImplementationType())) {
      activity.setActivityBehavior(activityBehaviorFactory.createServiceTaskExpressionActivityBehavior(serviceTask));

    // Webservice   
    } else if (ImplementationType.IMPLEMENTATION_TYPE_WEBSERVICE.equalsIgnoreCase(serviceTask.getImplementationType()) && 
        StringUtils.isNotEmpty(serviceTask.getOperationRef())) {
      
      if (!this.operations.containsKey(serviceTask.getOperationRef())) {
        bpmnModel.addProblem(serviceTask.getOperationRef() + "" does not exist"", serviceTask);
      } else {
        
        WebServiceActivityBehavior webServiceActivityBehavior = activityBehaviorFactory.createWebServiceActivityBehavior(serviceTask);
        webServiceActivityBehavior.setOperation(this.operations.get(serviceTask.getOperationRef()));

        if (serviceTask.getIoSpecification() != null) {
          IOSpecification ioSpecification = this.createIOSpecification(serviceTask.getIoSpecification());
          webServiceActivityBehavior.setIoSpecification(ioSpecification);
        }

        for (DataAssociation dataAssociationElement : serviceTask.getDataInputAssociations()) {
          AbstractDataAssociation dataAssociation = this.createDataInputAssociation(dataAssociationElement);
          webServiceActivityBehavior.addDataInputAssociation(dataAssociation);
        }

        for (DataAssociation dataAssociationElement : serviceTask.getDataOutputAssociations()) {
          AbstractDataAssociation dataAssociation = this.createDataOutputAssociation(dataAssociationElement);
          webServiceActivityBehavior.addDataOutputAssociation(dataAssociation);
        }

        activity.setActivityBehavior(webServiceActivityBehavior);
      }
    } else {
      bpmnModel.addProblem(""One of the attributes 'class', 'delegateExpression', 'type', 'operation', or 'expression' is mandatory on serviceTask."", serviceTask);
    }

    createExecutionListenersOnScope(serviceTask.getExecutionListeners(), activity);

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseServiceTask(serviceTask, scope, activity);
    }
    return activity;
  }",True
83,createIOSpecification(org.activiti.bpmn.model.IOSpecification),Method,,,"org.activiti.engine.impl.bpmn.data.IOSpecification+IOSpecification() org.activiti.bpmn.model.IOSpecification+getDataInputs() org.activiti.bpmn.model.IOSpecification+getDataInputs() java.util.Map+get(Object) java.util.Map+get(Object) org.activiti.bpmn.model.DataSpec+getItemSubjectRef() org.activiti.bpmn.model.DataSpec+getItemSubjectRef() org.activiti.engine.impl.bpmn.data.Data+Data(String,String,ItemDefinition) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.impl.bpmn.data.IOSpecification+addInput(Data) org.activiti.engine.impl.bpmn.data.IOSpecification+addInput(Data) org.activiti.bpmn.model.IOSpecification+getDataOutputs() org.activiti.bpmn.model.IOSpecification+getDataOutputs() java.util.Map+get(Object) java.util.Map+get(Object) org.activiti.bpmn.model.DataSpec+getItemSubjectRef() org.activiti.bpmn.model.DataSpec+getItemSubjectRef() org.activiti.engine.impl.bpmn.data.Data+Data(String,String,ItemDefinition) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.impl.bpmn.data.IOSpecification+addOutput(Data) org.activiti.engine.impl.bpmn.data.IOSpecification+addOutput(Data) org.activiti.bpmn.model.IOSpecification+getDataInputRefs() org.activiti.bpmn.model.IOSpecification+getDataInputRefs() org.activiti.engine.impl.bpmn.data.DataRef+DataRef(String) org.activiti.engine.impl.bpmn.data.IOSpecification+addInputRef(DataRef) org.activiti.engine.impl.bpmn.data.IOSpecification+addInputRef(DataRef) org.activiti.bpmn.model.IOSpecification+getDataOutputRefs() org.activiti.bpmn.model.IOSpecification+getDataOutputRefs() org.activiti.engine.impl.bpmn.data.DataRef+DataRef(String) org.activiti.engine.impl.bpmn.data.IOSpecification+addOutputRef(DataRef) org.activiti.engine.impl.bpmn.data.IOSpecification+addOutputRef(DataRef)",org.activiti.engine.impl.bpmn.parser.BpmnParse+itemDefinitions org.activiti.engine.impl.bpmn.parser.BpmnParse+itemDefinitions org.activiti.engine.impl.bpmn.parser.BpmnParse+targetNamespace org.activiti.engine.impl.bpmn.parser.BpmnParse+targetNamespace org.activiti.engine.impl.bpmn.parser.BpmnParse+itemDefinitions org.activiti.engine.impl.bpmn.parser.BpmnParse+itemDefinitions org.activiti.engine.impl.bpmn.parser.BpmnParse+targetNamespace org.activiti.engine.impl.bpmn.parser.BpmnParse+targetNamespace,1277,27,4,,"protected IOSpecification createIOSpecification(org.activiti.bpmn.model.IOSpecification specificationModel) {
    IOSpecification ioSpecification = new IOSpecification();

    for (DataSpec dataInputElement : specificationModel.getDataInputs()) {
      ItemDefinition itemDefinition = this.itemDefinitions.get(dataInputElement.getItemSubjectRef());
      Data dataInput = new Data(this.targetNamespace + "":"" + dataInputElement.getId(), dataInputElement.getId(), itemDefinition);
      ioSpecification.addInput(dataInput);
    }

    for (DataSpec dataOutputElement : specificationModel.getDataOutputs()) {
      ItemDefinition itemDefinition = this.itemDefinitions.get(dataOutputElement.getItemSubjectRef());
      Data dataOutput = new Data(this.targetNamespace + "":"" + dataOutputElement.getId(), dataOutputElement.getId(), itemDefinition);
      ioSpecification.addOutput(dataOutput);
    }

    for (String dataInputRef : specificationModel.getDataInputRefs()) {
      DataRef dataRef = new DataRef(dataInputRef);
      ioSpecification.addInputRef(dataRef);
    }

    for (String dataOutputRef : specificationModel.getDataOutputRefs()) {
      DataRef dataRef = new DataRef(dataOutputRef);
      ioSpecification.addOutputRef(dataRef);
    }

    return ioSpecification;
  }",False
84,createDataInputAssociation(DataAssociation),Method,"createServiceTask(ServiceTask,ScopeImpl) createSendTask(SendTask,ScopeImpl)",,"org.activiti.bpmn.model.DataAssociation+getTargetRef() org.activiti.bpmn.model.DataAssociation+getTargetRef() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) java.util.List+isEmpty() org.activiti.bpmn.model.DataAssociation+getAssignments() org.activiti.bpmn.model.DataAssociation+getAssignments() java.util.List+isEmpty() org.activiti.engine.impl.bpmn.webservice.MessageImplicitDataInputAssociation+MessageImplicitDataInputAssociation(String,String) org.activiti.bpmn.model.DataAssociation+getSourceRef() org.activiti.bpmn.model.DataAssociation+getSourceRef() org.activiti.bpmn.model.DataAssociation+getTargetRef() org.activiti.bpmn.model.DataAssociation+getTargetRef() org.activiti.engine.impl.bpmn.data.SimpleDataInputAssociation+SimpleDataInputAssociation(String,String) org.activiti.bpmn.model.DataAssociation+getSourceRef() org.activiti.bpmn.model.DataAssociation+getSourceRef() org.activiti.bpmn.model.DataAssociation+getTargetRef() org.activiti.bpmn.model.DataAssociation+getTargetRef() org.activiti.bpmn.model.DataAssociation+getAssignments() org.activiti.bpmn.model.DataAssociation+getAssignments() org.activiti.bpmn.model.Assignment+getFrom() org.activiti.bpmn.model.Assignment+getFrom() org.activiti.bpmn.model.Assignment+getTo() org.activiti.bpmn.model.Assignment+getTo() org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.Assignment+getFrom() org.activiti.bpmn.model.Assignment+getFrom() org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.Assignment+getTo() org.activiti.bpmn.model.Assignment+getTo() org.activiti.engine.impl.bpmn.data.Assignment+Assignment(Expression,Expression) org.activiti.engine.impl.bpmn.data.SimpleDataInputAssociation+addAssignment(Assignment) org.activiti.engine.impl.bpmn.data.SimpleDataInputAssociation+addAssignment(Assignment)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager,1226,22,4,,"protected AbstractDataAssociation createDataInputAssociation(DataAssociation dataAssociationElement) {
    if (StringUtils.isEmpty(dataAssociationElement.getTargetRef())) {
      bpmnModel.addProblem(""targetRef is required"", dataAssociationElement);
    }
    
    if (dataAssociationElement.getAssignments().isEmpty()) {
      return new MessageImplicitDataInputAssociation(dataAssociationElement.getSourceRef(), dataAssociationElement.getTargetRef());
    } else {
      SimpleDataInputAssociation dataAssociation = new SimpleDataInputAssociation(
          dataAssociationElement.getSourceRef(), dataAssociationElement.getTargetRef());

      for (org.activiti.bpmn.model.Assignment assigmentElement : dataAssociationElement.getAssignments()) {
        if (StringUtils.isNotEmpty(assigmentElement.getFrom()) && StringUtils.isNotEmpty(assigmentElement.getTo())) {
          Expression from = this.expressionManager.createExpression(assigmentElement.getFrom());
          Expression to = this.expressionManager.createExpression(assigmentElement.getTo());
          Assignment assignment = new Assignment(from, to);
          dataAssociation.addAssignment(assignment);
        }
      }
      return dataAssociation;
    }
  }",False
85,createDataOutputAssociation(DataAssociation),Method,"createServiceTask(ServiceTask,ScopeImpl) createSendTask(SendTask,ScopeImpl)",,"org.activiti.bpmn.model.DataAssociation+getSourceRef() org.activiti.bpmn.model.DataAssociation+getSourceRef() org.activiti.engine.impl.bpmn.webservice.MessageImplicitDataOutputAssociation+MessageImplicitDataOutputAssociation(String,String) org.activiti.bpmn.model.DataAssociation+getTargetRef() org.activiti.bpmn.model.DataAssociation+getTargetRef() org.activiti.bpmn.model.DataAssociation+getSourceRef() org.activiti.bpmn.model.DataAssociation+getSourceRef() org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.DataAssociation+getTransformation() org.activiti.bpmn.model.DataAssociation+getTransformation() org.activiti.engine.impl.bpmn.data.TransformationDataOutputAssociation+TransformationDataOutputAssociation(String,String,Expression) org.activiti.bpmn.model.DataAssociation+getTargetRef() org.activiti.bpmn.model.DataAssociation+getTargetRef()",org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager,643,9,4,,"protected AbstractDataAssociation createDataOutputAssociation(DataAssociation dataAssociationElement) {
    if (StringUtils.isNotEmpty(dataAssociationElement.getSourceRef())) {
      return new MessageImplicitDataOutputAssociation(dataAssociationElement.getTargetRef(), dataAssociationElement.getSourceRef());
    } else {
      Expression transformation = this.expressionManager.createExpression(dataAssociationElement.getTransformation());
      AbstractDataAssociation dataOutputAssociation = new TransformationDataOutputAssociation(null, dataAssociationElement.getTargetRef(), transformation);
      return dataOutputAssociation;
    }
  }",False
86,"createBusinessRuleTask(BusinessRuleTask,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createBusinessRuleTaskActivityBehavior(BusinessRuleTask) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createBusinessRuleTaskActivityBehavior(BusinessRuleTask) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseBusinessRuleTask(BusinessRuleTask,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseBusinessRuleTask(BusinessRuleTask,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_TASK_BUSINESSRULE org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,769,18,1,"/** 
 * Parses a businessRuleTask declaration.
 */
","/**
   * Parses a businessRuleTask declaration.
   */
  public ActivityImpl createBusinessRuleTask(BusinessRuleTask businessRuleTask, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(businessRuleTask, ELEMENT_TASK_BUSINESSRULE, scope);
      
    activity.setAsync(businessRuleTask.isAsynchronous());
    activity.setExclusive(!businessRuleTask.isNotExclusive());
    activity.setActivityBehavior(activityBehaviorFactory.createBusinessRuleTaskActivityBehavior(businessRuleTask));
    
    createExecutionListenersOnScope(businessRuleTask.getExecutionListeners(), activity);

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseBusinessRuleTask(businessRuleTask, scope, activity);
    }
    
    return activity;
  }",False
87,"createSendTask(SendTask,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.bpmn.model.SendTask+getType() org.activiti.bpmn.model.SendTask+getType() java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.SendTask+getType() org.activiti.bpmn.model.SendTask+getType() java.lang.String+equalsIgnoreCase(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+validateFieldDeclarationsForEmail(Task,List<FieldExtension>) org.activiti.engine.impl.bpmn.parser.BpmnParse+validateFieldDeclarationsForEmail(Task,List<FieldExtension>) org.activiti.bpmn.model.SendTask+getFieldExtensions() org.activiti.bpmn.model.SendTask+getFieldExtensions() org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createMailActivityBehavior(SendTask) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createMailActivityBehavior(SendTask) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.SendTask+getType() org.activiti.bpmn.model.SendTask+getType() java.lang.String+equalsIgnoreCase(String) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createMuleActivityBehavior(SendTask,BpmnModel) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createMuleActivityBehavior(SendTask,BpmnModel) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.SendTask+getType() org.activiti.bpmn.model.SendTask+getType() java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.SendTask+getImplementationType() org.activiti.bpmn.model.SendTask+getImplementationType() org.activiti.bpmn.model.SendTask+getOperationRef() org.activiti.bpmn.model.SendTask+getOperationRef() java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) org.activiti.bpmn.model.SendTask+getOperationRef() org.activiti.bpmn.model.SendTask+getOperationRef() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.SendTask+getOperationRef() org.activiti.bpmn.model.SendTask+getOperationRef() org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createWebServiceActivityBehavior(SendTask) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createWebServiceActivityBehavior(SendTask) java.util.Map+get(Object) java.util.Map+get(Object) org.activiti.bpmn.model.SendTask+getOperationRef() org.activiti.bpmn.model.SendTask+getOperationRef() org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+setOperation(Operation) org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+setOperation(Operation) org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.engine.impl.bpmn.parser.BpmnParse+createIOSpecification(IOSpecification) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIOSpecification(IOSpecification) org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+setIoSpecification(IOSpecification) org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+setIoSpecification(IOSpecification) org.activiti.bpmn.model.Activity+getDataInputAssociations() org.activiti.bpmn.model.Activity+getDataInputAssociations() org.activiti.engine.impl.bpmn.parser.BpmnParse+createDataInputAssociation(DataAssociation) org.activiti.engine.impl.bpmn.parser.BpmnParse+createDataInputAssociation(DataAssociation) org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+addDataInputAssociation(AbstractDataAssociation) org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+addDataInputAssociation(AbstractDataAssociation) org.activiti.bpmn.model.Activity+getDataOutputAssociations() org.activiti.bpmn.model.Activity+getDataOutputAssociations() org.activiti.engine.impl.bpmn.parser.BpmnParse+createDataOutputAssociation(DataAssociation) org.activiti.engine.impl.bpmn.parser.BpmnParse+createDataOutputAssociation(DataAssociation) org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+addDataOutputAssociation(AbstractDataAssociation) org.activiti.engine.impl.bpmn.behavior.WebServiceActivityBehavior+addDataOutputAssociation(AbstractDataAssociation) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseSendTask(SendTask,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseSendTask(SendTask,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_TASK_SEND org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.bpmn.model.ImplementationType+IMPLEMENTATION_TYPE_WEBSERVICE org.activiti.engine.impl.bpmn.parser.BpmnParse+operations org.activiti.engine.impl.bpmn.parser.BpmnParse+operations org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+operations org.activiti.engine.impl.bpmn.parser.BpmnParse+operations org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,2864,59,1,"/** 
 * Parses a sendTask declaration.
 */
","/**
   * Parses a sendTask declaration.
   */
  public ActivityImpl createSendTask(SendTask sendTask, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(sendTask, ELEMENT_TASK_SEND, scope);
    
    activity.setAsync(sendTask.isAsynchronous());
    activity.setExclusive(!sendTask.isNotExclusive());

    // for e-mail
    if (StringUtils.isNotEmpty(sendTask.getType())) {
      if (sendTask.getType().equalsIgnoreCase(""mail"")) {
        validateFieldDeclarationsForEmail(sendTask, sendTask.getFieldExtensions());
        activity.setActivityBehavior(activityBehaviorFactory.createMailActivityBehavior(sendTask));
      } else if (sendTask.getType().equalsIgnoreCase(""mule"")) {
        activity.setActivityBehavior(activityBehaviorFactory.createMuleActivityBehavior(sendTask, bpmnModel));
      } else {
        bpmnModel.addProblem(""Invalid usage of type attribute: '"" + sendTask.getType() + ""'."", sendTask);
      }

      // for web service
    } else if (ImplementationType.IMPLEMENTATION_TYPE_WEBSERVICE.equalsIgnoreCase(sendTask.getImplementationType()) && 
        StringUtils.isNotEmpty(sendTask.getOperationRef())) {
      
      if (!this.operations.containsKey(sendTask.getOperationRef())) {
        bpmnModel.addProblem(sendTask.getOperationRef() + "" does not exist"", sendTask);
      } else {
        WebServiceActivityBehavior webServiceActivityBehavior = activityBehaviorFactory.createWebServiceActivityBehavior(sendTask);
        Operation operation = this.operations.get(sendTask.getOperationRef());
        webServiceActivityBehavior.setOperation(operation);

        if (sendTask.getIoSpecification() != null) {
          IOSpecification ioSpecification = this.createIOSpecification(sendTask.getIoSpecification());
          webServiceActivityBehavior.setIoSpecification(ioSpecification);
        }

        for (DataAssociation dataAssociationElement : sendTask.getDataInputAssociations()) {
          AbstractDataAssociation dataAssociation = this.createDataInputAssociation(dataAssociationElement);
          webServiceActivityBehavior.addDataInputAssociation(dataAssociation);
        }

        for (DataAssociation dataAssociationElement : sendTask.getDataOutputAssociations()) {
          AbstractDataAssociation dataAssociation = this.createDataOutputAssociation(dataAssociationElement);
          webServiceActivityBehavior.addDataOutputAssociation(dataAssociation);
        }

        activity.setActivityBehavior(webServiceActivityBehavior);
      }
    } else {
      bpmnModel.addProblem(""One of the attributes 'type' or 'operation' is mandatory on sendTask."", sendTask);
    }

    createExecutionListenersOnScope(sendTask.getExecutionListeners(), activity);

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseSendTask(sendTask, scope, activity);
    }
    return activity;
  }",True
88,parseDataOutputAssociation(Element),Method,,,"org.activiti.engine.impl.util.xml.Element+getText() org.activiti.engine.impl.util.xml.Element+element(String) org.activiti.engine.impl.util.xml.Element+element(String) org.activiti.engine.impl.util.xml.Element+getText() org.activiti.engine.impl.util.xml.Element+element(String) org.activiti.engine.impl.util.xml.Element+element(String) org.activiti.engine.impl.util.xml.Element+getText() org.activiti.engine.impl.util.xml.Element+element(String) org.activiti.engine.impl.util.xml.Element+element(String) org.activiti.engine.impl.util.xml.Element+getText() org.activiti.engine.impl.bpmn.webservice.MessageImplicitDataOutputAssociation+MessageImplicitDataOutputAssociation(String,String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.util.xml.Element+getText() org.activiti.engine.impl.util.xml.Element+element(String) org.activiti.engine.impl.util.xml.Element+element(String) org.activiti.engine.impl.util.xml.Element+getText() org.activiti.engine.impl.bpmn.data.TransformationDataOutputAssociation+TransformationDataOutputAssociation(String,String,Expression)",org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager,715,12,4,,"protected AbstractDataAssociation parseDataOutputAssociation(Element dataAssociationElement) {
    String targetRef = dataAssociationElement.element(""targetRef"").getText();

    if (dataAssociationElement.element(""sourceRef"") != null) {
      String sourceRef = dataAssociationElement.element(""sourceRef"").getText();
      return new MessageImplicitDataOutputAssociation(targetRef, sourceRef);
    } else {
      Expression transformation = this.expressionManager.createExpression(dataAssociationElement.element(""transformation"").getText());
      AbstractDataAssociation dataOutputAssociation = new TransformationDataOutputAssociation(null, targetRef, transformation);
      return dataOutputAssociation;
    }
  }",False
89,"validateFieldDeclarationsForEmail(Task,List<FieldExtension>)",Method,"createServiceTask(ServiceTask,ScopeImpl) createSendTask(SendTask,ScopeImpl)",,"java.lang.String+equals(Object) org.activiti.bpmn.model.FieldExtension+getFieldName() org.activiti.bpmn.model.FieldExtension+getFieldName() java.lang.String+equals(Object) java.lang.String+equals(Object) org.activiti.bpmn.model.FieldExtension+getFieldName() org.activiti.bpmn.model.FieldExtension+getFieldName() java.lang.String+equals(Object) java.lang.String+equals(Object) org.activiti.bpmn.model.FieldExtension+getFieldName() org.activiti.bpmn.model.FieldExtension+getFieldName() java.lang.String+equals(Object) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,756,23,4,,"protected void validateFieldDeclarationsForEmail(Task task, List<FieldExtension> fieldExtensions) {
    boolean toDefined = false;
    boolean textOrHtmlDefined = false;
    
    for (FieldExtension fieldExtension : fieldExtensions) {
      if (fieldExtension.getFieldName().equals(""to"")) {
        toDefined = true;
      }
      if (fieldExtension.getFieldName().equals(""html"")) {
        textOrHtmlDefined = true;
      }
      if (fieldExtension.getFieldName().equals(""text"")) {
        textOrHtmlDefined = true;
      }
    }

    if (!toDefined) {
      bpmnModel.addProblem(""No recipient is defined on the mail activity"", task);
    }
    if (!textOrHtmlDefined) {
      bpmnModel.addProblem(""Text or html field should be provided"", task);
    }
  }",True
90,"validateFieldDeclarationsForShell(Task,List<FieldExtension>)",Method,"createServiceTask(ServiceTask,ScopeImpl)",,"org.activiti.bpmn.model.FieldExtension+getFieldName() org.activiti.bpmn.model.FieldExtension+getFieldName() org.activiti.bpmn.model.FieldExtension+getStringValue() org.activiti.bpmn.model.FieldExtension+getStringValue() java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+toLowerCase() java.lang.String+toLowerCase() java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+toLowerCase() java.lang.String+toLowerCase() java.lang.String+equals(Object) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) java.lang.String+toString() java.lang.String+toString() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,858,20,4,,"protected void validateFieldDeclarationsForShell(Task task, List<FieldExtension> fieldExtensions) {
    boolean shellCommandDefined = false;

    for (FieldExtension fieldExtension : fieldExtensions) {
      String fieldName = fieldExtension.getFieldName();
      String fieldValue = fieldExtension.getStringValue();

      shellCommandDefined |= fieldName.equals(""command"");

      if ((fieldName.equals(""wait"") || fieldName.equals(""redirectError"") || fieldName.equals(""cleanEnv"")) && !fieldValue.toLowerCase().equals(""true"")
              && !fieldValue.toLowerCase().equals(""false"")) {
        bpmnModel.addProblem(""undefined value for shell "" + fieldName + "" parameter :"" + fieldValue.toString() + ""."", task);
      }

    }

    if (!shellCommandDefined) {
      bpmnModel.addProblem(""No shell command is defined on the shell activity"", task);
    }
  }",True
91,"createTask(Task,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createTaskActivityBehavior(Task) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createTaskActivityBehavior(Task) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseTask(Task,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseTask(Task,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_TASK org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,636,17,1,"/** 
 * Parses a task with no specific type (behaves as passthrough).
 */
","/**
   * Parses a task with no specific type (behaves as passthrough).
   */
  public ActivityImpl createTask(Task task, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(task, ELEMENT_TASK, scope);
    activity.setActivityBehavior(activityBehaviorFactory.createTaskActivityBehavior(task));
    
    activity.setAsync(task.isAsynchronous());
    activity.setExclusive(!task.isNotExclusive());

    createExecutionListenersOnScope(task.getExecutionListeners(), activity);

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseTask(task, scope, activity);
    }
    return activity;
  }",True
92,"createManualTask(ManualTask,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createManualTaskActivityBehavior(ManualTask) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createManualTaskActivityBehavior(ManualTask) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseManualTask(ManualTask,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseManualTask(ManualTask,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_TASK_MANUAL org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,669,17,1,"/** 
 * Parses a manual task.
 */
","/**
   * Parses a manual task.
   */
  public ActivityImpl createManualTask(ManualTask manualTask, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(manualTask, ELEMENT_TASK_MANUAL, scope);
    activity.setActivityBehavior(activityBehaviorFactory.createManualTaskActivityBehavior(manualTask));
    
    activity.setAsync(manualTask.isAsynchronous());
    activity.setExclusive(!manualTask.isNotExclusive());

    createExecutionListenersOnScope(manualTask.getExecutionListeners(), activity);

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseManualTask(manualTask, scope, activity);
    }
    return activity;
  }",True
93,"createReceiveTask(ReceiveTask,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createReceiveTaskActivityBehavior(ReceiveTask) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createReceiveTaskActivityBehavior(ReceiveTask) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseReceiveTask(ReceiveTask,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseReceiveTask(ReceiveTask,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_TASK_RECEIVE org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,682,17,1,"/** 
 * Parses a receive task.
 */
","/**
   * Parses a receive task.
   */
  public ActivityImpl createReceiveTask(ReceiveTask receiveTask, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(receiveTask, ELEMENT_TASK_RECEIVE, scope);
    activity.setActivityBehavior(activityBehaviorFactory.createReceiveTaskActivityBehavior(receiveTask));
    
    activity.setAsync(receiveTask.isAsynchronous());
    activity.setExclusive(!receiveTask.isNotExclusive());

    createExecutionListenersOnScope(receiveTask.getExecutionListeners(), activity);

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseReceiveTask(receiveTask, scope, activity);
    }
    return activity;
  }",True
94,"createUserTask(UserTask,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.engine.impl.bpmn.parser.BpmnParse+parseTaskDefinition(UserTask,String,ProcessDefinitionEntity) org.activiti.engine.impl.bpmn.parser.BpmnParse+parseTaskDefinition(UserTask,String,ProcessDefinitionEntity) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProcessDefinition() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProcessDefinition() org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createUserTaskActivityBehavior(UserTask,TaskDefinition) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createUserTaskActivityBehavior(UserTask,TaskDefinition) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseUserTask(UserTask,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseUserTask(UserTask,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_TASK_USER org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,867,20,1,"/** 
 * Parses a userTask declaration.
 */
","/**
   * Parses a userTask declaration.
   */
  public ActivityImpl createUserTask(UserTask userTask, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(userTask, ELEMENT_TASK_USER, scope);
    
    activity.setAsync(userTask.isAsynchronous());
    activity.setExclusive(!userTask.isNotExclusive()); 
    
    TaskDefinition taskDefinition = parseTaskDefinition(userTask, userTask.getId(), (ProcessDefinitionEntity) scope.getProcessDefinition());
    activity.setActivityBehavior(activityBehaviorFactory.createUserTaskActivityBehavior(userTask, taskDefinition));

    //parseProperties(userTaskElement, activity);
    createExecutionListenersOnScope(userTask.getExecutionListeners(), activity);

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseUserTask(userTask, scope, activity);
    }
    return activity;
  }",True
95,"parseTaskDefinition(UserTask,String,ProcessDefinitionEntity)",Method,"createUserTask(UserTask,ScopeImpl)",,"org.activiti.engine.impl.form.DefaultTaskFormHandler+DefaultTaskFormHandler() org.activiti.engine.impl.form.FormHandler+parseConfiguration(List<FormProperty>,String,DeploymentEntity,ProcessDefinitionEntity) org.activiti.engine.impl.form.FormHandler+parseConfiguration(List<FormProperty>,String,DeploymentEntity,ProcessDefinitionEntity) org.activiti.bpmn.model.UserTask+getFormProperties() org.activiti.bpmn.model.UserTask+getFormProperties() org.activiti.bpmn.model.UserTask+getFormKey() org.activiti.bpmn.model.UserTask+getFormKey() org.activiti.engine.impl.task.TaskDefinition+TaskDefinition(TaskFormHandler) org.activiti.engine.impl.task.TaskDefinition+setKey(String) org.activiti.engine.impl.task.TaskDefinition+setKey(String) java.util.Map+put(K,V) org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+getTaskDefinitions() org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+getTaskDefinitions() java.util.Map+put(K,V) org.activiti.bpmn.model.FlowElement+getName() org.activiti.bpmn.model.FlowElement+getName() org.activiti.engine.impl.task.TaskDefinition+setNameExpression(Expression) org.activiti.engine.impl.task.TaskDefinition+setNameExpression(Expression) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.FlowElement+getName() org.activiti.bpmn.model.FlowElement+getName() org.activiti.bpmn.model.FlowElement+getDocumentation() org.activiti.bpmn.model.FlowElement+getDocumentation() org.activiti.engine.impl.task.TaskDefinition+setDescriptionExpression(Expression) org.activiti.engine.impl.task.TaskDefinition+setDescriptionExpression(Expression) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.FlowElement+getDocumentation() org.activiti.bpmn.model.FlowElement+getDocumentation() org.activiti.bpmn.model.UserTask+getAssignee() org.activiti.bpmn.model.UserTask+getAssignee() org.activiti.engine.impl.task.TaskDefinition+setAssigneeExpression(Expression) org.activiti.engine.impl.task.TaskDefinition+setAssigneeExpression(Expression) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.UserTask+getAssignee() org.activiti.bpmn.model.UserTask+getAssignee() org.activiti.bpmn.model.UserTask+getCandidateUsers() org.activiti.bpmn.model.UserTask+getCandidateUsers() org.activiti.engine.impl.task.TaskDefinition+addCandidateUserIdExpression(Expression) org.activiti.engine.impl.task.TaskDefinition+addCandidateUserIdExpression(Expression) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.UserTask+getCandidateGroups() org.activiti.bpmn.model.UserTask+getCandidateGroups() org.activiti.engine.impl.task.TaskDefinition+addCandidateGroupIdExpression(Expression) org.activiti.engine.impl.task.TaskDefinition+addCandidateGroupIdExpression(Expression) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.UserTask+getTaskListeners() org.activiti.bpmn.model.UserTask+getTaskListeners() org.activiti.engine.impl.task.TaskDefinition+addTaskListener(String,TaskListener) org.activiti.engine.impl.task.TaskDefinition+addTaskListener(String,TaskListener) org.activiti.bpmn.model.ActivitiListener+getEvent() org.activiti.bpmn.model.ActivitiListener+getEvent() org.activiti.engine.impl.bpmn.parser.BpmnParse+createTaskListener(ActivitiListener,String) org.activiti.engine.impl.bpmn.parser.BpmnParse+createTaskListener(ActivitiListener,String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.UserTask+getDueDate() org.activiti.bpmn.model.UserTask+getDueDate() org.activiti.engine.impl.task.TaskDefinition+setDueDateExpression(Expression) org.activiti.engine.impl.task.TaskDefinition+setDueDateExpression(Expression) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.UserTask+getDueDate() org.activiti.bpmn.model.UserTask+getDueDate() org.activiti.bpmn.model.UserTask+getPriority() org.activiti.bpmn.model.UserTask+getPriority() org.activiti.engine.impl.task.TaskDefinition+setPriorityExpression(Expression) org.activiti.engine.impl.task.TaskDefinition+setPriorityExpression(Expression) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.UserTask+getPriority() org.activiti.bpmn.model.UserTask+getPriority()",org.activiti.engine.impl.bpmn.parser.BpmnParse+deployment org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager,2044,46,1,,"public TaskDefinition parseTaskDefinition(UserTask userTask, String taskDefinitionKey, ProcessDefinitionEntity processDefinition) {
    TaskFormHandler taskFormHandler = new DefaultTaskFormHandler();
    taskFormHandler.parseConfiguration(userTask.getFormProperties(), userTask.getFormKey(), deployment, processDefinition);

    TaskDefinition taskDefinition = new TaskDefinition(taskFormHandler);

    taskDefinition.setKey(taskDefinitionKey);
    processDefinition.getTaskDefinitions().put(taskDefinitionKey, taskDefinition);

    if (StringUtils.isNotEmpty(userTask.getName())) {
      taskDefinition.setNameExpression(expressionManager.createExpression(userTask.getName()));
    }

    if (StringUtils.isNotEmpty(userTask.getDocumentation())) {
      taskDefinition.setDescriptionExpression(expressionManager.createExpression(userTask.getDocumentation()));
    }

    if (StringUtils.isNotEmpty(userTask.getAssignee())) {
      taskDefinition.setAssigneeExpression(expressionManager.createExpression(userTask.getAssignee()));
    }
    for (String candidateUser : userTask.getCandidateUsers()) {
      taskDefinition.addCandidateUserIdExpression(expressionManager.createExpression(candidateUser));
    }
    for (String candidateGroup : userTask.getCandidateGroups()) {
      taskDefinition.addCandidateGroupIdExpression(expressionManager.createExpression(candidateGroup));
    }
    
    // Activiti custom extension
    
    // Task listeners
    for (ActivitiListener taskListener : userTask.getTaskListeners()) {
      taskDefinition.addTaskListener(taskListener.getEvent(), createTaskListener(taskListener, userTask.getId()));
    }

    // Due date
    if (StringUtils.isNotEmpty(userTask.getDueDate())) {
      taskDefinition.setDueDateExpression(expressionManager.createExpression(userTask.getDueDate()));
    }
    
    // Priority
    if (StringUtils.isNotEmpty(userTask.getPriority())) {
      taskDefinition.setPriorityExpression(expressionManager.createExpression(userTask.getPriority()));
    }

    return taskDefinition;
  }",True
96,"createTaskListener(ActivitiListener,String)",Method,"parseTaskDefinition(UserTask,String,ProcessDefinitionEntity)",,"java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.ActivitiListener+getImplementationType() org.activiti.bpmn.model.ActivitiListener+getImplementationType() org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory+createClassDelegateTaskListener(ActivitiListener) org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory+createClassDelegateTaskListener(ActivitiListener) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.ActivitiListener+getImplementationType() org.activiti.bpmn.model.ActivitiListener+getImplementationType() org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory+createExpressionTaskListener(ActivitiListener) org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory+createExpressionTaskListener(ActivitiListener) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.ActivitiListener+getImplementationType() org.activiti.bpmn.model.ActivitiListener+getImplementationType() org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory+createDelegateExpressionTaskListener(ActivitiListener) org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory+createDelegateExpressionTaskListener(ActivitiListener) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement)",org.activiti.bpmn.model.ImplementationType+IMPLEMENTATION_TYPE_CLASS org.activiti.engine.impl.bpmn.parser.BpmnParse+listenerFactory org.activiti.bpmn.model.ImplementationType+IMPLEMENTATION_TYPE_EXPRESSION org.activiti.engine.impl.bpmn.parser.BpmnParse+listenerFactory org.activiti.bpmn.model.ImplementationType+IMPLEMENTATION_TYPE_DELEGATEEXPRESSION org.activiti.engine.impl.bpmn.parser.BpmnParse+listenerFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,965,14,4,,"protected TaskListener createTaskListener(ActivitiListener activitiListener, String taskId) {
    TaskListener taskListener = null;

    if (ImplementationType.IMPLEMENTATION_TYPE_CLASS.equalsIgnoreCase(activitiListener.getImplementationType())) {
      taskListener = listenerFactory.createClassDelegateTaskListener(activitiListener); 
    } else if (ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION.equalsIgnoreCase(activitiListener.getImplementationType())) {
      taskListener = listenerFactory.createExpressionTaskListener(activitiListener);
    } else if (ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equalsIgnoreCase(activitiListener.getImplementationType())) {
      taskListener = listenerFactory.createDelegateExpressionTaskListener(activitiListener);
    } else {
      bpmnModel.addProblem(""Element 'class', 'expression' or 'delegateExpression' is mandatory on taskListener for task"", activitiListener);
    }
    return taskListener;
  }",True
97,"createEndEvent(EndEvent,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) java.util.List+size() org.activiti.bpmn.model.Event+getEventDefinitions() org.activiti.bpmn.model.Event+getEventDefinitions() java.util.List+size() java.util.List+get(int) org.activiti.bpmn.model.Event+getEventDefinitions() org.activiti.bpmn.model.Event+getEventDefinitions() java.util.List+get(int) org.activiti.bpmn.model.BpmnModel+containsErrorRef(String) org.activiti.bpmn.model.BpmnModel+containsErrorRef(String) org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() java.util.Map+get(Object) org.activiti.bpmn.model.BpmnModel+getErrors() org.activiti.bpmn.model.BpmnModel+getErrors() java.util.Map+get(Object) org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.ErrorEventDefinition+setErrorCode(String) org.activiti.bpmn.model.ErrorEventDefinition+setErrorCode(String) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createErrorEndEventActivityBehavior(EndEvent,ErrorEventDefinition) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createErrorEndEventActivityBehavior(EndEvent,ErrorEventDefinition) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.lang.Object+equals(Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.lang.Object+equals(Object) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createCancelEndEventActivityBehavior(EndEvent) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createCancelEndEventActivityBehavior(EndEvent) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createTerminateEndEventActivityBehavior(EndEvent) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createTerminateEndEventActivityBehavior(EndEvent) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createNoneEndEventActivityBehavior(EndEvent) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createNoneEndEventActivityBehavior(EndEvent) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseEndEvent(EndEvent,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseEndEvent(EndEvent,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_EVENT_END org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,2587,54,1,"/** 
 * Parses the end events of a certain level in the process (process, subprocess or another scope).
 * @param parentElement The 'parent' element that contains the end events (process, subprocess).
 * @param scope The  {@link ScopeImpl} to which the end events must be added.
 */
","/**
   * Parses the end events of a certain level in the process (process,
   * subprocess or another scope).
   * 
   * @param parentElement
   *          The 'parent' element that contains the end events (process,
   *          subprocess).
   * @param scope
   *          The {@link ScopeImpl} to which the end events must be added.
   */
  public void createEndEvent(EndEvent endEvent, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(endEvent, ELEMENT_EVENT_END, scope);
    EventDefinition eventDefinition = null;
    if (endEvent.getEventDefinitions().size() > 0) {
      eventDefinition = endEvent.getEventDefinitions().get(0);
    }
    
    // Error end event
    if (eventDefinition instanceof org.activiti.bpmn.model.ErrorEventDefinition) {
      org.activiti.bpmn.model.ErrorEventDefinition errorDefinition = (org.activiti.bpmn.model.ErrorEventDefinition) eventDefinition;
      if (bpmnModel.containsErrorRef(errorDefinition.getErrorCode())) {
        String errorCode = bpmnModel.getErrors().get(errorDefinition.getErrorCode());
        if (StringUtils.isEmpty(errorCode)) {
          bpmnModel.addProblem(""errorCode is required for an error event"", errorDefinition);
        }
        activity.setProperty(""type"", ""errorEndEvent"");
        errorDefinition.setErrorCode(errorCode);
      }
      activity.setActivityBehavior(activityBehaviorFactory.createErrorEndEventActivityBehavior(endEvent, errorDefinition));
      
    // Cancel end event      
    } else if (eventDefinition instanceof CancelEventDefinition) {
      if (scope.getProperty(""type"")==null || !scope.getProperty(""type"").equals(""transaction"")) {
        bpmnModel.addProblem(""end event with cancelEventDefinition only supported inside transaction subprocess"", endEvent);
      } else {
        activity.setProperty(""type"", ""cancelEndEvent"");
        activity.setActivityBehavior(activityBehaviorFactory.createCancelEndEventActivityBehavior(endEvent));
      }
    
    // Terminate end event  
    } else if (eventDefinition instanceof TerminateEventDefinition) {
      activity.setActivityBehavior(activityBehaviorFactory.createTerminateEndEventActivityBehavior(endEvent));
      
    // None end event  
    } else if (eventDefinition == null) {
      activity.setActivityBehavior(activityBehaviorFactory.createNoneEndEventActivityBehavior(endEvent));
    }
    
    createExecutionListenersOnScope(endEvent.getExecutionListeners(), activity);
    
    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseEndEvent(endEvent, scope, activity);
    }
  }",True
98,"createBoundaryEvent(BoundaryEvent,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.bpmn.model.BoundaryEvent+getAttachedToRefId() org.activiti.bpmn.model.BoundaryEvent+getAttachedToRefId() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) java.util.List+size() org.activiti.bpmn.model.Event+getEventDefinitions() org.activiti.bpmn.model.Event+getEventDefinitions() java.util.List+size() java.util.List+get(int) org.activiti.bpmn.model.Event+getEventDefinitions() org.activiti.bpmn.model.Event+getEventDefinitions() java.util.List+get(int) org.activiti.bpmn.model.BoundaryEvent+isCancelActivity() org.activiti.bpmn.model.BoundaryEvent+isCancelActivity() org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createBoundaryEventActivityBehavior(BoundaryEvent,boolean,ActivityImpl) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createBoundaryEventActivityBehavior(BoundaryEvent,boolean,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBoundaryTimerEventDefinition(TimerEventDefinition,boolean,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBoundaryTimerEventDefinition(TimerEventDefinition,boolean,ActivityImpl) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createBoundaryEventActivityBehavior(BoundaryEvent,boolean,ActivityImpl) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createBoundaryEventActivityBehavior(BoundaryEvent,boolean,ActivityImpl) org.activiti.bpmn.model.BpmnModel+containsErrorRef(String) org.activiti.bpmn.model.BpmnModel+containsErrorRef(String) org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() java.util.Map+get(Object) org.activiti.bpmn.model.BpmnModel+getErrors() org.activiti.bpmn.model.BpmnModel+getErrors() java.util.Map+get(Object) org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.ErrorEventDefinition+setErrorCode(String) org.activiti.bpmn.model.ErrorEventDefinition+setErrorCode(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBoundaryErrorEventDefinition(ErrorEventDefinition,boolean,ActivityImpl,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBoundaryErrorEventDefinition(ErrorEventDefinition,boolean,ActivityImpl,ActivityImpl) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createBoundaryEventActivityBehavior(BoundaryEvent,boolean,ActivityImpl) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createBoundaryEventActivityBehavior(BoundaryEvent,boolean,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBoundarySignalEventDefinition(SignalEventDefinition,boolean,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBoundarySignalEventDefinition(SignalEventDefinition,boolean,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBoundaryCancelEventDefinition(CancelEventDefinition,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBoundaryCancelEventDefinition(CancelEventDefinition,ActivityImpl) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createBoundaryEventActivityBehavior(BoundaryEvent,boolean,ActivityImpl) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createBoundaryEventActivityBehavior(BoundaryEvent,boolean,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createCatchCompensateEventDefinition(CompensateEventDefinition,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createCatchCompensateEventDefinition(CompensateEventDefinition,ActivityImpl) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createBoundaryEventActivityBehavior(BoundaryEvent,boolean,ActivityImpl) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createBoundaryEventActivityBehavior(BoundaryEvent,boolean,ActivityImpl) org.activiti.bpmn.model.BpmnModel+containsMessageId(String) org.activiti.bpmn.model.BpmnModel+containsMessageId(String) org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.Message+getName() org.activiti.bpmn.model.BpmnModel+getMessage(String) org.activiti.bpmn.model.BpmnModel+getMessage(String) org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.Message+getName() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.MessageEventDefinition+setMessageRef(String) org.activiti.bpmn.model.MessageEventDefinition+setMessageRef(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBoundaryMessageEventDefinition(MessageEventDefinition,boolean,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBoundaryMessageEventDefinition(MessageEventDefinition,boolean,ActivityImpl) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.parser.BpmnParseListener+parseBoundaryEvent(BoundaryEvent,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseBoundaryEvent(BoundaryEvent,ScopeImpl,ActivityImpl)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_EVENT_BOUNDARY org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,4538,77,1,"/** 
 * Parses the boundary events of a certain 'level' (process, subprocess or other scope). Note that the boundary events are not parsed during the parsing of the bpmn activities, since the semantics are different (boundaryEvent needs to be added as nested activity to the reference activity on PVM level).
 * @param parentElement The 'parent' element that contains the activities (process, subprocess).
 * @param scopeElement The  {@link ScopeImpl} to which the activities must be added.
 */
","/**
   * Parses the boundary events of a certain 'level' (process, subprocess or
   * other scope).
   * 
   * Note that the boundary events are not parsed during the parsing of the bpmn
   * activities, since the semantics are different (boundaryEvent needs to be
   * added as nested activity to the reference activity on PVM level).
   * 
   * @param parentElement
   *          The 'parent' element that contains the activities (process,
   *          subprocess).
   * @param scopeElement
   *          The {@link ScopeImpl} to which the activities must be added.
   */
  public void createBoundaryEvent(BoundaryEvent boundaryEvent, ScopeImpl scopeElement) {
    ActivityImpl parentActivity = scopeElement.findActivity(boundaryEvent.getAttachedToRefId());
    if (parentActivity == null) {
      bpmnModel.addProblem(""Invalid reference in boundary event. Make sure that the referenced activity is defined in the same scope as the boundary event"", 
              boundaryEvent);
      return;
    }
   
    ActivityImpl nestedActivity = createActivityOnScope(boundaryEvent, ELEMENT_EVENT_BOUNDARY, parentActivity);

    EventDefinition eventDefinition = null;
    if (boundaryEvent.getEventDefinitions().size() > 0) {
      eventDefinition = boundaryEvent.getEventDefinitions().get(0);
    }
    
    boolean interrupting = boundaryEvent.isCancelActivity();
    ActivityBehavior behavior = null;
    
    if (eventDefinition instanceof TimerEventDefinition) {
      behavior = activityBehaviorFactory.createBoundaryEventActivityBehavior(boundaryEvent, interrupting, nestedActivity); 
      createBoundaryTimerEventDefinition((TimerEventDefinition) eventDefinition, interrupting, nestedActivity);
    } else if (eventDefinition instanceof org.activiti.bpmn.model.ErrorEventDefinition) {
      interrupting = true; // non-interrupting not yet supported
      behavior = activityBehaviorFactory.createBoundaryEventActivityBehavior(boundaryEvent, interrupting, nestedActivity);
      org.activiti.bpmn.model.ErrorEventDefinition modelErrorEvent = (org.activiti.bpmn.model.ErrorEventDefinition) eventDefinition;
      if (bpmnModel.containsErrorRef(modelErrorEvent.getErrorCode())) {
        String errorCode = bpmnModel.getErrors().get(modelErrorEvent.getErrorCode());
        if (StringUtils.isEmpty(errorCode)) {
          bpmnModel.addProblem(""errorCode is required for an error event"", boundaryEvent);
        }
        modelErrorEvent.setErrorCode(errorCode);
      }
      createBoundaryErrorEventDefinition(modelErrorEvent, interrupting, parentActivity, nestedActivity);
    } else if (eventDefinition instanceof SignalEventDefinition) {
      behavior = activityBehaviorFactory.createBoundaryEventActivityBehavior(boundaryEvent, interrupting, nestedActivity);
      createBoundarySignalEventDefinition((SignalEventDefinition) eventDefinition, interrupting, nestedActivity);
    } else if (eventDefinition instanceof CancelEventDefinition) {
      // always interrupting
      behavior = createBoundaryCancelEventDefinition((CancelEventDefinition) eventDefinition, nestedActivity);
    } else if (eventDefinition instanceof org.activiti.bpmn.model.CompensateEventDefinition) {
      behavior = activityBehaviorFactory.createBoundaryEventActivityBehavior(boundaryEvent, interrupting, nestedActivity);
      createCatchCompensateEventDefinition((org.activiti.bpmn.model.CompensateEventDefinition) eventDefinition, nestedActivity);      
    } else if (eventDefinition instanceof MessageEventDefinition) {
      behavior = activityBehaviorFactory.createBoundaryEventActivityBehavior(boundaryEvent, interrupting, nestedActivity);
      MessageEventDefinition modelMessageEvent = (MessageEventDefinition) eventDefinition;
      if (bpmnModel.containsMessageId(modelMessageEvent.getMessageRef())) {
        String messageName = bpmnModel.getMessage(modelMessageEvent.getMessageRef()).getName();
        if (StringUtils.isEmpty(messageName)) {
          bpmnModel.addProblem(""messageName is required for a message event"", boundaryEvent);
        }
        modelMessageEvent.setMessageRef(messageName);
      }
      createBoundaryMessageEventDefinition((MessageEventDefinition) eventDefinition, interrupting, nestedActivity);
    } else {
      bpmnModel.addProblem(""Unsupported boundary event type"", boundaryEvent);
    }
    
    nestedActivity.setActivityBehavior(behavior);
    
    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseBoundaryEvent(boundaryEvent, scopeElement, nestedActivity);
    }
  }",True
99,"createBoundaryTimerEventDefinition(TimerEventDefinition,boolean,ActivityImpl)",Method,"createBoundaryEvent(BoundaryEvent,ScopeImpl)",,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.bpmn.parser.BpmnParse+createTimer(TimerEventDefinition,ScopeImpl,String) org.activiti.engine.impl.bpmn.parser.BpmnParse+createTimer(TimerEventDefinition,ScopeImpl,String) org.activiti.engine.impl.jobexecutor.TimerDeclarationImpl+setInterruptingTimer(boolean) org.activiti.engine.impl.jobexecutor.TimerDeclarationImpl+setInterruptingTimer(boolean) org.activiti.engine.impl.bpmn.parser.BpmnParse+addTimerDeclaration(ScopeImpl,TimerDeclarationImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addTimerDeclaration(ScopeImpl,TimerDeclarationImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.parser.BpmnParseListener+parseBoundaryTimerEventDefinition(TimerEventDefinition,boolean,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseBoundaryTimerEventDefinition(TimerEventDefinition,boolean,ActivityImpl)",org.activiti.engine.impl.jobexecutor.TimerExecuteNestedActivityJobHandler+TYPE org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,1515,33,1,"/** 
 * Parses a boundary timer event. The end-result will be that the given nested activity will get the appropriate  {@link ActivityBehavior}.
 * @param timerEventDefinition The XML element corresponding with the timer event details
 * @param interrupting Indicates whether this timer is interrupting.
 * @param timerActivity The activity which maps to the structure of the timer event on the boundary of another activity. Note that this is NOT the activity onto which the boundary event is attached, but a nested activity inside this activity, specifically created for this event.
 */
","/**
   * Parses a boundary timer event. The end-result will be that the given nested
   * activity will get the appropriate {@link ActivityBehavior}.
   * 
   * @param timerEventDefinition
   *          The XML element corresponding with the timer event details
   * @param interrupting
   *          Indicates whether this timer is interrupting.
   * @param timerActivity
   *          The activity which maps to the structure of the timer event on the
   *          boundary of another activity. Note that this is NOT the activity
   *          onto which the boundary event is attached, but a nested activity
   *          inside this activity, specifically created for this event.
   */
  public void createBoundaryTimerEventDefinition(TimerEventDefinition timerEventDefinition, boolean interrupting, ActivityImpl timerActivity) {
    timerActivity.setProperty(""type"", ""boundaryTimer"");
    TimerDeclarationImpl timerDeclaration = createTimer(timerEventDefinition, timerActivity, TimerExecuteNestedActivityJobHandler.TYPE);
    
    // ACT-1427
    if (interrupting) {
      timerDeclaration.setInterruptingTimer(true);
    }
    
    addTimerDeclaration(timerActivity.getParent(), timerDeclaration);

    if (timerActivity.getParent() instanceof ActivityImpl) {
      ((ActivityImpl) timerActivity.getParent()).setScope(true);
    }

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseBoundaryTimerEventDefinition(timerEventDefinition, interrupting, timerActivity);
    }
  }",True
100,"createBoundarySignalEventDefinition(SignalEventDefinition,boolean,ActivityImpl)",Method,"createBoundaryEvent(BoundaryEvent,ScopeImpl)",,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.BpmnModel+containsSignalId(String) org.activiti.bpmn.model.BpmnModel+containsSignalId(String) org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.Signal+getName() org.activiti.bpmn.model.BpmnModel+getSignal(String) org.activiti.bpmn.model.BpmnModel+getSignal(String) org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.Signal+getName() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.SignalEventDefinition+setSignalRef(String) org.activiti.bpmn.model.SignalEventDefinition+setSignalRef(String) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+EventSubscriptionDeclaration(String,String) org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.parser.BpmnParseListener+parseBoundarySignalEventDefinition(SignalEventDefinition,boolean,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseBoundarySignalEventDefinition(SignalEventDefinition,boolean,ActivityImpl)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,1229,24,1,,"public void createBoundarySignalEventDefinition(SignalEventDefinition signalEventDefinition, boolean interrupting, ActivityImpl signalActivity) {
    signalActivity.setProperty(""type"", ""boundarySignal"");
    
    if (bpmnModel.containsSignalId(signalEventDefinition.getSignalRef())) {
      String signalName = bpmnModel.getSignal(signalEventDefinition.getSignalRef()).getName();
      if (StringUtils.isEmpty(signalName)) {
        bpmnModel.addProblem(""signalName is required for a signal event"", signalEventDefinition);
      }
      signalEventDefinition.setSignalRef(signalName);
    }
    
    EventSubscriptionDeclaration signalDefinition = new EventSubscriptionDeclaration(signalEventDefinition.getSignalRef(), ""signal"");
    signalDefinition.setActivityId(signalActivity.getId());
    addEventSubscriptionDeclaration(signalDefinition, signalEventDefinition, signalActivity.getParent());
    
    if (signalActivity.getParent() instanceof ActivityImpl) {     
      ((ActivityImpl) signalActivity.getParent()).setScope(true);
    }
    
    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseBoundarySignalEventDefinition(signalEventDefinition, interrupting, signalActivity);
    }
    
  }",True
101,"createBoundaryMessageEventDefinition(MessageEventDefinition,boolean,ActivityImpl)",Method,"createBoundaryEvent(BoundaryEvent,ScopeImpl)",,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+EventSubscriptionDeclaration(String,String) org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.bpmn.model.MessageEventDefinition+getMessageRef() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.parser.BpmnParseListener+parseBoundaryMessageEventDefinition(MessageEventDefinition,boolean,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseBoundaryMessageEventDefinition(MessageEventDefinition,boolean,ActivityImpl)",org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,862,16,1,,"public void createBoundaryMessageEventDefinition(MessageEventDefinition messageEventDefinition, boolean interrupting, ActivityImpl messageActivity) {
    messageActivity.setProperty(""type"", ""boundaryMessage"");
    
    EventSubscriptionDeclaration messageDefinition = new EventSubscriptionDeclaration(messageEventDefinition.getMessageRef(), ""message"");
    messageDefinition.setActivityId(messageActivity.getId());
    addEventSubscriptionDeclaration(messageDefinition, messageEventDefinition, messageActivity.getParent());
    
    if (messageActivity.getParent() instanceof ActivityImpl) {     
      ((ActivityImpl) messageActivity.getParent()).setScope(true);
    }
    
    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseBoundaryMessageEventDefinition(messageEventDefinition, interrupting, messageActivity);
    }
    
  }",True
102,"createTimerStartEventDefinition(TimerEventDefinition,ActivityImpl,ProcessDefinitionEntity)",Method,"createProcessDefinitionStartEvent(ActivityImpl,StartEvent,ProcessDefinitionEntity)",,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.bpmn.parser.BpmnParse+createTimer(TimerEventDefinition,ScopeImpl,String) org.activiti.engine.impl.bpmn.parser.BpmnParse+createTimer(TimerEventDefinition,ScopeImpl,String) org.activiti.engine.impl.jobexecutor.TimerDeclarationImpl+setJobHandlerConfiguration(String) org.activiti.engine.impl.jobexecutor.TimerDeclarationImpl+setJobHandlerConfiguration(String) org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+getKey() org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+getKey() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.util.ArrayList+ArrayList() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) java.util.List+add(E) java.util.List+add(E)",org.activiti.engine.impl.jobexecutor.TimerStartEventJobHandler+TYPE org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_START_TIMER org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_START_TIMER,837,13,4,,"@SuppressWarnings(""unchecked"")
  protected void createTimerStartEventDefinition(TimerEventDefinition timerEventDefinition, ActivityImpl timerActivity, ProcessDefinitionEntity processDefinition) {
    timerActivity.setProperty(""type"", ""startTimerEvent"");
    TimerDeclarationImpl timerDeclaration = createTimer(timerEventDefinition, timerActivity, TimerStartEventJobHandler.TYPE);
    timerDeclaration.setJobHandlerConfiguration(processDefinition.getKey());    

    List<TimerDeclarationImpl> timerDeclarations = (List<TimerDeclarationImpl>) processDefinition.getProperty(PROPERTYNAME_START_TIMER);
    if (timerDeclarations == null) {
      timerDeclarations = new ArrayList<TimerDeclarationImpl>();
      processDefinition.setProperty(PROPERTYNAME_START_TIMER, timerDeclarations);
    }
    timerDeclarations.add(timerDeclaration);
  }",True
103,"createIntermediateSignalEventDefinition(SignalEventDefinition,ActivityImpl,boolean)",Method,"createIntermediateCatchEvent(IntermediateCatchEvent,ScopeImpl)",,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.BpmnModel+containsSignalId(String) org.activiti.bpmn.model.BpmnModel+containsSignalId(String) org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.Signal+getName() org.activiti.bpmn.model.BpmnModel+getSignal(String) org.activiti.bpmn.model.BpmnModel+getSignal(String) org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.Signal+getName() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.SignalEventDefinition+setSignalRef(String) org.activiti.bpmn.model.SignalEventDefinition+setSignalRef(String) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+EventSubscriptionDeclaration(String,String) org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.bpmn.model.SignalEventDefinition+getSignalRef() org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.bpmn.parser.EventSubscriptionDeclaration+setActivityId(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addEventSubscriptionDeclaration(EventSubscriptionDeclaration,EventDefinition,ScopeImpl) org.activiti.engine.parser.BpmnParseListener+parseIntermediateSignalCatchEventDefinition(SignalEventDefinition,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseIntermediateSignalCatchEventDefinition(SignalEventDefinition,ActivityImpl)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,1305,24,4,,"protected void createIntermediateSignalEventDefinition(SignalEventDefinition signalEventDefinition, ActivityImpl signalActivity, boolean isAfterEventBasedGateway) {
    signalActivity.setProperty(""type"", ""intermediateSignalCatch"");   
  
    if (bpmnModel.containsSignalId(signalEventDefinition.getSignalRef())) {
      String signalName = bpmnModel.getSignal(signalEventDefinition.getSignalRef()).getName();
      if (StringUtils.isEmpty(signalName)) {
        bpmnModel.addProblem(""signalName is required for a signal event"", signalEventDefinition);
      }
      signalEventDefinition.setSignalRef(signalName);
    }
    
    EventSubscriptionDeclaration signalDefinition = new EventSubscriptionDeclaration(signalEventDefinition.getSignalRef(), ""signal"");
    if (isAfterEventBasedGateway) {
      signalDefinition.setActivityId(signalActivity.getId());
      addEventSubscriptionDeclaration(signalDefinition, signalEventDefinition, signalActivity.getParent());      
    } else {
      signalActivity.setScope(true);
      addEventSubscriptionDeclaration(signalDefinition, signalEventDefinition, signalActivity);   
    }
    
    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseIntermediateSignalCatchEventDefinition(signalEventDefinition, signalActivity);
    }
  }",True
104,"createIntermediateTimerEventDefinition(TimerEventDefinition,ActivityImpl,boolean)",Method,"createIntermediateCatchEvent(IntermediateCatchEvent,ScopeImpl)",,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.bpmn.parser.BpmnParse+createTimer(TimerEventDefinition,ScopeImpl,String) org.activiti.engine.impl.bpmn.parser.BpmnParse+createTimer(TimerEventDefinition,ScopeImpl,String) org.activiti.engine.impl.bpmn.parser.BpmnParse+addTimerDeclaration(ScopeImpl,TimerDeclarationImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addTimerDeclaration(ScopeImpl,TimerDeclarationImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.bpmn.parser.BpmnParse+addTimerDeclaration(ScopeImpl,TimerDeclarationImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addTimerDeclaration(ScopeImpl,TimerDeclarationImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.parser.BpmnParseListener+parseIntermediateTimerEventDefinition(TimerEventDefinition,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseIntermediateTimerEventDefinition(TimerEventDefinition,ActivityImpl)",org.activiti.engine.impl.jobexecutor.TimerCatchIntermediateEventJobHandler+TYPE org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,748,13,4,,"protected void createIntermediateTimerEventDefinition(TimerEventDefinition timerEventDefinition, ActivityImpl timerActivity, boolean isAfterEventBasedGateway) {
    timerActivity.setProperty(""type"", ""intermediateTimer"");
    TimerDeclarationImpl timerDeclaration = createTimer(timerEventDefinition, timerActivity, TimerCatchIntermediateEventJobHandler.TYPE);
    if (isAfterEventBasedGateway) {
      addTimerDeclaration(timerActivity.getParent(), timerDeclaration);
    } else {
      addTimerDeclaration(timerActivity, timerDeclaration);
      timerActivity.setScope(true);
    }
    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseIntermediateTimerEventDefinition(timerEventDefinition, timerActivity);
    }
  }",True
105,"createTimer(TimerEventDefinition,ScopeImpl,String)",Method,"createBoundaryTimerEventDefinition(TimerEventDefinition,boolean,ActivityImpl) createTimerStartEventDefinition(TimerEventDefinition,ActivityImpl,ProcessDefinitionEntity) createIntermediateTimerEventDefinition(TimerEventDefinition,ActivityImpl,boolean)",,"org.activiti.bpmn.model.TimerEventDefinition+getTimeDate() org.activiti.bpmn.model.TimerEventDefinition+getTimeDate() org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.TimerEventDefinition+getTimeDate() org.activiti.bpmn.model.TimerEventDefinition+getTimeDate() org.activiti.bpmn.model.TimerEventDefinition+getTimeCycle() org.activiti.bpmn.model.TimerEventDefinition+getTimeCycle() org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.TimerEventDefinition+getTimeCycle() org.activiti.bpmn.model.TimerEventDefinition+getTimeCycle() org.activiti.bpmn.model.TimerEventDefinition+getTimeDuration() org.activiti.bpmn.model.TimerEventDefinition+getTimeDuration() org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.TimerEventDefinition+getTimeDuration() org.activiti.bpmn.model.TimerEventDefinition+getTimeDuration() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.jobexecutor.TimerDeclarationImpl+TimerDeclarationImpl(Expression,TimerDeclarationType,String) org.activiti.engine.impl.jobexecutor.TimerDeclarationImpl+setJobHandlerConfiguration(String) org.activiti.engine.impl.jobexecutor.TimerDeclarationImpl+setJobHandlerConfiguration(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.jobexecutor.TimerDeclarationImpl+setExclusive(boolean) org.activiti.engine.impl.jobexecutor.TimerDeclarationImpl+setExclusive(boolean)",org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,1528,30,4,,"protected TimerDeclarationImpl createTimer(TimerEventDefinition timerEventDefinition, ScopeImpl timerActivity, String jobHandlerType) {
    TimerDeclarationType type = null;
    Expression expression = null;
    if (StringUtils.isNotEmpty(timerEventDefinition.getTimeDate())) {
      // TimeDate
      type = TimerDeclarationType.DATE;
      expression = expressionManager.createExpression(timerEventDefinition.getTimeDate());
    } else if (StringUtils.isNotEmpty(timerEventDefinition.getTimeCycle())) {
      // TimeCycle
      type = TimerDeclarationType.CYCLE;
      expression = expressionManager.createExpression(timerEventDefinition.getTimeCycle());
    } else if (StringUtils.isNotEmpty(timerEventDefinition.getTimeDuration())) {
      // TimeDuration
      type = TimerDeclarationType.DURATION;
      expression = expressionManager.createExpression(timerEventDefinition.getTimeDuration());
    }    
    
    // neither date, cycle or duration configured!
    if (expression == null) {
      bpmnModel.addProblem(""Timer needs configuration (either timeDate, timeCycle or timeDuration is needed)."", timerEventDefinition);      
    }    

    // Parse the timer declaration
    // TODO move the timer declaration into the bpmn activity or next to the
    // TimerSession
    TimerDeclarationImpl timerDeclaration = new TimerDeclarationImpl(expression, type, jobHandlerType);
    timerDeclaration.setJobHandlerConfiguration(timerActivity.getId());
    timerDeclaration.setExclusive(true);
    return timerDeclaration;
  }",True
106,"createBoundaryErrorEventDefinition(org.activiti.bpmn.model.ErrorEventDefinition,boolean,ActivityImpl,ActivityImpl)",Method,,,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+getParent() org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.bpmn.parser.ErrorEventDefinition+ErrorEventDefinition(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.bpmn.parser.ErrorEventDefinition+setErrorCode(String) org.activiti.engine.impl.bpmn.parser.ErrorEventDefinition+setErrorCode(String) org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.bpmn.model.ErrorEventDefinition+getErrorCode() org.activiti.engine.impl.bpmn.parser.BpmnParse+addErrorEventDefinition(ErrorEventDefinition,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+addErrorEventDefinition(ErrorEventDefinition,ScopeImpl) org.activiti.engine.parser.BpmnParseListener+parseBoundaryErrorEventDefinition(ErrorEventDefinition,boolean,ActivityImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseBoundaryErrorEventDefinition(ErrorEventDefinition,boolean,ActivityImpl,ActivityImpl)",org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,824,16,1,,"public void createBoundaryErrorEventDefinition(org.activiti.bpmn.model.ErrorEventDefinition errorEventDefinition, 
      boolean interrupting, ActivityImpl activity, ActivityImpl nestedErrorEventActivity) {

    nestedErrorEventActivity.setProperty(""type"", ""boundaryError"");
    ScopeImpl catchingScope = nestedErrorEventActivity.getParent();
    ((ActivityImpl) catchingScope).setScope(true);

    ErrorEventDefinition definition = new ErrorEventDefinition(nestedErrorEventActivity.getId());
    definition.setErrorCode(errorEventDefinition.getErrorCode());
    
    addErrorEventDefinition(definition, catchingScope);    
  
    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseBoundaryErrorEventDefinition(errorEventDefinition, interrupting, activity, nestedErrorEventActivity);
    }
  }",True
107,"isChildActivity(ActivityImpl,ActivityImpl)",Method,"isChildActivity(ActivityImpl,ActivityImpl)",,"org.activiti.engine.impl.pvm.process.ScopeImpl+getActivities() org.activiti.engine.impl.pvm.process.ScopeImpl+getActivities() java.lang.String+equals(Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() java.lang.String+equals(Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.bpmn.parser.BpmnParse+isChildActivity(ActivityImpl,ActivityImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+isChildActivity(ActivityImpl,ActivityImpl)",,435,12,4,"/** 
 * Checks if the given activity is a child activity of the possibleParentActivity.
 */
","/**
   * Checks if the given activity is a child activity of the
   * possibleParentActivity.
   */
  protected boolean isChildActivity(ActivityImpl activityToCheck, ActivityImpl possibleParentActivity) {
    for (ActivityImpl child : possibleParentActivity.getActivities()) {
      if (child.getId().equals(activityToCheck.getId()) || isChildActivity(activityToCheck, child)) {
        return true;
      }
    }
    return false;
  }",True
108,"addTimerDeclaration(ScopeImpl,TimerDeclarationImpl)",Method,"createBoundaryTimerEventDefinition(TimerEventDefinition,boolean,ActivityImpl) createIntermediateTimerEventDefinition(TimerEventDefinition,ActivityImpl,boolean) createIntermediateTimerEventDefinition(TimerEventDefinition,ActivityImpl,boolean)",,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.util.ArrayList+ArrayList() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) java.util.List+add(E) java.util.List+add(E)",org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_TIMER_DECLARATION org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_TIMER_DECLARATION,489,9,4,,"@SuppressWarnings(""unchecked"")
  protected void addTimerDeclaration(ScopeImpl scope, TimerDeclarationImpl timerDeclaration) {
    List<TimerDeclarationImpl> timerDeclarations = (List<TimerDeclarationImpl>) scope.getProperty(PROPERTYNAME_TIMER_DECLARATION);
    if (timerDeclarations == null) {
      timerDeclarations = new ArrayList<TimerDeclarationImpl>();
      scope.setProperty(PROPERTYNAME_TIMER_DECLARATION, timerDeclarations);
    }
    timerDeclarations.add(timerDeclaration);
  }",True
109,"addVariableDeclaration(ScopeImpl,VariableDeclaration)",Method,,,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.util.ArrayList+ArrayList() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) java.util.List+add(E) java.util.List+add(E)",org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_VARIABLE_DECLARATIONS org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_VARIABLE_DECLARATIONS,517,9,4,,"@SuppressWarnings(""unchecked"")
  protected void addVariableDeclaration(ScopeImpl scope, VariableDeclaration variableDeclaration) {
    List<VariableDeclaration> variableDeclarations = (List<VariableDeclaration>) scope.getProperty(PROPERTYNAME_VARIABLE_DECLARATIONS);
    if (variableDeclarations == null) {
      variableDeclarations = new ArrayList<VariableDeclaration>();
      scope.setProperty(PROPERTYNAME_VARIABLE_DECLARATIONS, variableDeclarations);
    }
    variableDeclarations.add(variableDeclaration);
  }",True
110,"createSubProcess(SubProcess,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createSubprocActivityBehavior(SubProcess) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createSubprocActivityBehavior(SubProcess) org.activiti.engine.impl.bpmn.parser.BpmnParse+processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess) org.activiti.engine.impl.bpmn.parser.BpmnParse+processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess) org.activiti.bpmn.model.SubProcess+getFlowElements() org.activiti.bpmn.model.SubProcess+getFlowElements() org.activiti.engine.impl.bpmn.parser.BpmnParse+processArtifacts(Collection<Artifact>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+processArtifacts(Collection<Artifact>,ScopeImpl) org.activiti.bpmn.model.SubProcess+getArtifacts() org.activiti.bpmn.model.SubProcess+getArtifacts() org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.engine.impl.bpmn.parser.BpmnParse+createIOSpecification(IOSpecification) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIOSpecification(IOSpecification) org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.engine.impl.pvm.process.ScopeImpl+setIoSpecification(IOSpecification) org.activiti.engine.impl.pvm.process.ScopeImpl+setIoSpecification(IOSpecification) org.activiti.engine.parser.BpmnParseListener+parseSubProcess(SubProcess,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseSubProcess(SubProcess,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_SUBPROCESS org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,1509,38,1,"/** 
 * Parses a subprocess (formally known as an embedded subprocess): a subprocess defined within another process definition.
 * @param subProcessElement The XML element corresponding with the subprocess definition
 * @param scope The current scope on which the subprocess is defined.
 */
","/**
   * Parses a subprocess (formally known as an embedded subprocess): a subprocess
   * defined within another process definition.
   * 
   * @param subProcessElement
   *          The XML element corresponding with the subprocess definition
   * @param scope
   *          The current scope on which the subprocess is defined.
   */
  public ActivityImpl createSubProcess(SubProcess subProcess, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(subProcess, ELEMENT_SUBPROCESS, scope);
    
    activity.setAsync(subProcess.isAsynchronous());
    activity.setExclusive(!subProcess.isNotExclusive());

    boolean triggeredByEvent = false;
    if (subProcess instanceof EventSubProcess) {
      triggeredByEvent = true;
    }
    activity.setProperty(""triggeredByEvent"", triggeredByEvent);
    
    // event subprocesses are not scopes
    activity.setScope(!triggeredByEvent);
    activity.setActivityBehavior(activityBehaviorFactory.createSubprocActivityBehavior(subProcess));
    
    processFlowElements(subProcess.getFlowElements(), activity, subProcess);
    processArtifacts(subProcess.getArtifacts(), activity);
    
    if (subProcess.getIoSpecification() != null) {
      IOSpecification ioSpecification = createIOSpecification(subProcess.getIoSpecification());
      activity.setIoSpecification(ioSpecification);
    }

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseSubProcess(subProcess, scope, activity);
    }
    return activity;
  }",True
111,"createTransaction(Transaction,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setAsync(boolean) org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.bpmn.model.Activity+isAsynchronous() org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setExclusive(boolean) org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.bpmn.model.Activity+isNotExclusive() org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createTransactionActivityBehavior(Transaction) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createTransactionActivityBehavior(Transaction) org.activiti.engine.impl.bpmn.parser.BpmnParse+processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess) org.activiti.engine.impl.bpmn.parser.BpmnParse+processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess) org.activiti.bpmn.model.SubProcess+getFlowElements() org.activiti.bpmn.model.SubProcess+getFlowElements() org.activiti.engine.impl.bpmn.parser.BpmnParse+processArtifacts(Collection<Artifact>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+processArtifacts(Collection<Artifact>,ScopeImpl) org.activiti.bpmn.model.SubProcess+getArtifacts() org.activiti.bpmn.model.SubProcess+getArtifacts() org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.engine.impl.bpmn.parser.BpmnParse+createIOSpecification(IOSpecification) org.activiti.engine.impl.bpmn.parser.BpmnParse+createIOSpecification(IOSpecification) org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.bpmn.model.Activity+getIoSpecification() org.activiti.engine.impl.pvm.process.ScopeImpl+setIoSpecification(IOSpecification) org.activiti.engine.impl.pvm.process.ScopeImpl+setIoSpecification(IOSpecification) org.activiti.engine.parser.BpmnParseListener+parseTransaction(Transaction,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseTransaction(Transaction,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_TRANSACTION org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,949,22,4,,"protected ActivityImpl createTransaction(Transaction transaction, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(transaction, ELEMENT_TRANSACTION, scope);
    
    activity.setAsync(transaction.isAsynchronous());
    activity.setExclusive(!transaction.isNotExclusive());
    
    activity.setScope(true);
    activity.setActivityBehavior(activityBehaviorFactory.createTransactionActivityBehavior(transaction));
    
    processFlowElements(transaction.getFlowElements(), activity, transaction);
    processArtifacts(transaction.getArtifacts(), activity);
    
    if (transaction.getIoSpecification() != null) {
      IOSpecification ioSpecification = createIOSpecification(transaction.getIoSpecification());
      activity.setIoSpecification(ioSpecification);
    }

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseTransaction(transaction, scope, activity);
    }
    return activity;
  }",True
112,"createCallActivity(CallActivity,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createActivityOnScope(FlowElement,String,ScopeImpl) org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setScope(boolean) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.pvm.process.ActivityImpl+setActivityBehavior(ActivityBehavior) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createCallActivityBehavior(CallActivity) org.activiti.engine.impl.bpmn.parser.factory.ActivityBehaviorFactory+createCallActivityBehavior(CallActivity) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseCallActivity(CallActivity,ScopeImpl,ActivityImpl) org.activiti.engine.parser.BpmnParseListener+parseCallActivity(CallActivity,ScopeImpl,ActivityImpl)",org.activiti.bpmn.constants.BpmnXMLConstants+ELEMENT_CALL_ACTIVITY org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,831,20,1,"/** 
 * Parses a call activity (currently only supporting calling subprocesses).
 * @param callActivityElement The XML element defining the call activity
 * @param scope The current scope on which the call activity is defined.
 */
","/**
   * Parses a call activity (currently only supporting calling subprocesses).
   * 
   * @param callActivityElement
   *          The XML element defining the call activity
   * @param scope
   *          The current scope on which the call activity is defined.
   */
  public ActivityImpl createCallActivity(CallActivity callActivity, ScopeImpl scope) {
    ActivityImpl activity = createActivityOnScope(callActivity, ELEMENT_CALL_ACTIVITY, scope);
    activity.setScope(true);
    activity.setActivityBehavior(activityBehaviorFactory.createCallActivityBehavior(callActivity));

    createExecutionListenersOnScope(callActivity.getExecutionListeners(), activity);

    for (BpmnParseListener parseListener : parseListeners) {
      parseListener.parseCallActivity(callActivity, scope, activity);
    }
    return activity;
  }",True
113,"createSequenceFlow(SequenceFlow,ScopeImpl)",Method,"processFlowElements(Collection<FlowElement>,ScopeImpl,SubProcess)",,"org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.bpmn.model.SequenceFlow+getSourceRef() org.activiti.bpmn.model.SequenceFlow+getSourceRef() org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.bpmn.model.SequenceFlow+getTargetRef() org.activiti.bpmn.model.SequenceFlow+getTargetRef() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.SequenceFlow+getSourceRef() org.activiti.bpmn.model.SequenceFlow+getSourceRef() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.ActivitiException+ActivitiException(String) org.activiti.bpmn.model.SequenceFlow+getTargetRef() org.activiti.bpmn.model.SequenceFlow+getTargetRef() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.impl.pvm.process.ActivityImpl+getActivityBehavior() org.activiti.engine.impl.pvm.process.ActivityImpl+getActivityBehavior() org.activiti.engine.impl.pvm.process.ActivityImpl+getActivityBehavior() org.activiti.engine.impl.pvm.process.ActivityImpl+getActivityBehavior() org.activiti.engine.impl.pvm.process.ActivityImpl+getParentActivity() org.activiti.engine.impl.pvm.process.ActivityImpl+getParentActivity() org.activiti.engine.impl.pvm.process.ActivityImpl+getActivityBehavior() org.activiti.engine.impl.pvm.process.ActivityImpl+getParentActivity() org.activiti.engine.impl.pvm.process.ActivityImpl+getParentActivity() org.activiti.engine.impl.pvm.process.ActivityImpl+getActivityBehavior() org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ActivityImpl+createOutgoingTransition(String) org.activiti.engine.impl.pvm.process.ActivityImpl+createOutgoingTransition(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.util.Map+put(K,V) java.util.Map+put(K,V) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.FlowElement+getName() org.activiti.bpmn.model.FlowElement+getName() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.FlowElement+getDocumentation() org.activiti.bpmn.model.FlowElement+getDocumentation() org.activiti.engine.impl.pvm.process.TransitionImpl+setDestination(ActivityImpl) org.activiti.engine.impl.pvm.process.TransitionImpl+setDestination(ActivityImpl) org.activiti.bpmn.model.SequenceFlow+getConditionExpression() org.activiti.bpmn.model.SequenceFlow+getConditionExpression() org.activiti.engine.impl.el.UelExpressionCondition+UelExpressionCondition(Expression) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.engine.impl.el.ExpressionManager+createExpression(String) org.activiti.bpmn.model.SequenceFlow+getConditionExpression() org.activiti.bpmn.model.SequenceFlow+getConditionExpression() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.bpmn.model.SequenceFlow+getConditionExpression() org.activiti.bpmn.model.SequenceFlow+getConditionExpression() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnTransition(List<ActivitiListener>,TransitionImpl) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListenersOnTransition(List<ActivitiListener>,TransitionImpl) org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.bpmn.model.FlowElement+getExecutionListeners() org.activiti.engine.parser.BpmnParseListener+parseSequenceFlow(SequenceFlow,ScopeImpl,TransitionImpl) org.activiti.engine.parser.BpmnParseListener+parseSequenceFlow(SequenceFlow,ScopeImpl,TransitionImpl)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+sequenceFlows org.activiti.engine.impl.bpmn.parser.BpmnParse+expressionManager org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_CONDITION_TEXT org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_CONDITION org.activiti.engine.impl.bpmn.parser.BpmnParse+parseListeners,2683,46,1,"/** 
 * Parses all sequence flow of a scope.
 * @param processElement The 'process' element wherein the sequence flow are defined.
 * @param scope The scope to which the sequence flow must be added.
 */
","/**
   * Parses all sequence flow of a scope.
   * 
   * @param processElement
   *          The 'process' element wherein the sequence flow are defined.
   * @param scope
   *          The scope to which the sequence flow must be added.
   */
  public void createSequenceFlow(SequenceFlow sequenceFlow, ScopeImpl scope) {
    // Implicit check: sequence flow cannot cross (sub) process boundaries: we
    // don't do a processDefinition.findActivity here
    ActivityImpl sourceActivity = scope.findActivity(sequenceFlow.getSourceRef());
    ActivityImpl destinationActivity = scope.findActivity(sequenceFlow.getTargetRef());
    
    if (sourceActivity == null) {
      bpmnModel.addProblem(""Invalid source '"" + sequenceFlow.getSourceRef() + ""' of sequence flow '"" + sequenceFlow.getId() + ""'"", sequenceFlow);
    } else if (destinationActivity == null) {
      throw new ActivitiException(""Invalid destination '"" + sequenceFlow.getTargetRef() + ""' of sequence flow '"" + sequenceFlow.getId() + ""'"");
    } else if(!(sourceActivity.getActivityBehavior() instanceof EventBasedGatewayActivityBehavior)
            && destinationActivity.getActivityBehavior() instanceof IntermediateCatchEventActivityBehavior
            && (destinationActivity.getParentActivity() != null)
            && (destinationActivity.getParentActivity().getActivityBehavior() instanceof EventBasedGatewayActivityBehavior)) {
      
      bpmnModel.addProblem(""Invalid incoming sequenceflow "" + sequenceFlow.getId() + "" for intermediateCatchEvent with id '""
            +destinationActivity.getId()+""' connected to an event-based gateway."", sequenceFlow);        
    } else {       
      
      TransitionImpl transition = sourceActivity.createOutgoingTransition(sequenceFlow.getId());
      sequenceFlows.put(sequenceFlow.getId(), transition);
      transition.setProperty(""name"", sequenceFlow.getName());
      transition.setProperty(""documentation"", sequenceFlow.getDocumentation());
      transition.setDestination(destinationActivity);
      
      if (StringUtils.isNotEmpty(sequenceFlow.getConditionExpression())) {
        Condition expressionCondition = new UelExpressionCondition(expressionManager.createExpression(sequenceFlow.getConditionExpression()));
        transition.setProperty(PROPERTYNAME_CONDITION_TEXT, sequenceFlow.getConditionExpression());
        transition.setProperty(PROPERTYNAME_CONDITION, expressionCondition);
      }
      
      createExecutionListenersOnTransition(sequenceFlow.getExecutionListeners(), transition);

      for (BpmnParseListener parseListener : parseListeners) {
        parseListener.parseSequenceFlow(sequenceFlow, scope, transition);
      }
    }
  }",True
114,"createAssociation(Association,ScopeImpl)",Method,"processArtifacts(Collection<Artifact>,ScopeImpl)",,"org.activiti.bpmn.model.BpmnModel+getArtifact(String) org.activiti.bpmn.model.BpmnModel+getArtifact(String) org.activiti.bpmn.model.Association+getSourceRef() org.activiti.bpmn.model.Association+getSourceRef() org.activiti.bpmn.model.BpmnModel+getArtifact(String) org.activiti.bpmn.model.BpmnModel+getArtifact(String) org.activiti.bpmn.model.Association+getTargetRef() org.activiti.bpmn.model.Association+getTargetRef() org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.bpmn.model.Association+getSourceRef() org.activiti.bpmn.model.Association+getSourceRef() org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.bpmn.model.Association+getTargetRef() org.activiti.bpmn.model.Association+getTargetRef() java.lang.Object+equals(Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.lang.Object+equals(Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.bpmn.model.BpmnModel+addProblem(String,BaseElement) org.activiti.engine.impl.pvm.process.ActivityImpl+getParentActivity() org.activiti.engine.impl.pvm.process.ActivityImpl+getParentActivity() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId() org.activiti.engine.impl.pvm.process.ProcessElementImpl+getId()",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_IS_FOR_COMPENSATION org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_COMPENSATION_HANDLER_ID,1797,30,4,,"protected void createAssociation(Association association, ScopeImpl parentScope) {
    if (bpmnModel.getArtifact(association.getSourceRef()) != null ||
        bpmnModel.getArtifact(association.getTargetRef()) != null) {
      
      // connected to a text annotation so skipping it
      return;
    }
    
    ActivityImpl sourceActivity = parentScope.findActivity(association.getSourceRef());
    ActivityImpl targetActivity = parentScope.findActivity(association.getTargetRef());
    
    // an association may reference elements that are not parsed as activities (like for instance 
    // text annotations so do not throw an exception if sourceActivity or targetActivity are null)
    // However, we make sure they reference 'something':
    if(sourceActivity == null) {
      //bpmnModel.addProblem(""Invalid reference sourceRef '"" + association.getSourceRef() + ""' of association element "", association.getId());
    } else if(targetActivity == null) {
      //bpmnModel.addProblem(""Invalid reference targetRef '"" + association.getTargetRef() + ""' of association element "", association.getId());
    } else {      
      if(sourceActivity != null && sourceActivity.getProperty(""type"").equals(""compensationBoundaryCatch"")) {
        Object isForCompensation = targetActivity.getProperty(PROPERTYNAME_IS_FOR_COMPENSATION);          
        if(isForCompensation == null || !(Boolean) isForCompensation) {
          bpmnModel.addProblem(""compensation boundary catch must be connected to element with isForCompensation=true"", association);
        } else {            
          ActivityImpl compensatedActivity = sourceActivity.getParentActivity();
          compensatedActivity.setProperty(PROPERTYNAME_COMPENSATION_HANDLER_ID, targetActivity.getId());            
        }
      }
    }
  }",True
115,"createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl)",Method,"transformProcess(Process) createStartEvent(StartEvent,ScopeImpl,SubProcess) createIntermediateCatchEvent(IntermediateCatchEvent,ScopeImpl) createIntermediateThrowEvent(ThrowEvent,ScopeImpl) createExclusiveGateway(ExclusiveGateway,ScopeImpl) createInclusiveGateway(InclusiveGateway,ScopeImpl) createEventBasedGateway(EventGateway,ScopeImpl) createParallelGateway(ParallelGateway,ScopeImpl) createScriptTask(ScriptTask,ScopeImpl) createServiceTask(ServiceTask,ScopeImpl) createBusinessRuleTask(BusinessRuleTask,ScopeImpl) createSendTask(SendTask,ScopeImpl) createTask(Task,ScopeImpl) createManualTask(ManualTask,ScopeImpl) createReceiveTask(ReceiveTask,ScopeImpl) createUserTask(UserTask,ScopeImpl) createEndEvent(EndEvent,ScopeImpl) createCallActivity(CallActivity,ScopeImpl)",,"org.activiti.engine.impl.pvm.process.ScopeImpl+addExecutionListener(String,ExecutionListener) org.activiti.engine.impl.pvm.process.ScopeImpl+addExecutionListener(String,ExecutionListener) org.activiti.bpmn.model.ActivitiListener+getEvent() org.activiti.bpmn.model.ActivitiListener+getEvent() org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListener(ActivitiListener) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListener(ActivitiListener)",,292,5,1,,"public void createExecutionListenersOnScope(List<ActivitiListener> activitiListenerList, ScopeImpl scope) {
    for (ActivitiListener activitiListener : activitiListenerList) {
      scope.addExecutionListener(activitiListener.getEvent(), createExecutionListener(activitiListener));
    }
  }",True
116,"createExecutionListenersOnTransition(List<ActivitiListener>,TransitionImpl)",Method,"createSequenceFlow(SequenceFlow,ScopeImpl)",,org.activiti.engine.impl.pvm.process.TransitionImpl+addExecutionListener(ExecutionListener) org.activiti.engine.impl.pvm.process.TransitionImpl+addExecutionListener(ExecutionListener) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListener(ActivitiListener) org.activiti.engine.impl.bpmn.parser.BpmnParse+createExecutionListener(ActivitiListener),,283,5,1,,"public void createExecutionListenersOnTransition(List<ActivitiListener> activitiListenerList, TransitionImpl transition) {
    for (ActivitiListener activitiListener : activitiListenerList) {
      transition.addExecutionListener(createExecutionListener(activitiListener));
    }
  }",True
117,createExecutionListener(ActivitiListener),Method,"createExecutionListenersOnScope(List<ActivitiListener>,ScopeImpl) createExecutionListenersOnTransition(List<ActivitiListener>,TransitionImpl)",,java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.ActivitiListener+getImplementationType() org.activiti.bpmn.model.ActivitiListener+getImplementationType() org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory+createClassDelegateExecutionListener(ActivitiListener) org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory+createClassDelegateExecutionListener(ActivitiListener) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.ActivitiListener+getImplementationType() org.activiti.bpmn.model.ActivitiListener+getImplementationType() org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory+createExpressionExecutionListener(ActivitiListener) org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory+createExpressionExecutionListener(ActivitiListener) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) org.activiti.bpmn.model.ActivitiListener+getImplementationType() org.activiti.bpmn.model.ActivitiListener+getImplementationType() org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory+createDelegateExpressionExecutionListener(ActivitiListener) org.activiti.engine.impl.bpmn.parser.factory.ListenerFactory+createDelegateExpressionExecutionListener(ActivitiListener),org.activiti.bpmn.model.ImplementationType+IMPLEMENTATION_TYPE_CLASS org.activiti.engine.impl.bpmn.parser.BpmnParse+listenerFactory org.activiti.bpmn.model.ImplementationType+IMPLEMENTATION_TYPE_EXPRESSION org.activiti.engine.impl.bpmn.parser.BpmnParse+listenerFactory org.activiti.bpmn.model.ImplementationType+IMPLEMENTATION_TYPE_DELEGATEEXPRESSION org.activiti.engine.impl.bpmn.parser.BpmnParse+listenerFactory,1083,19,1,"/** 
 * Parses an  {@link ExecutionListener} implementation for the givenexecutionListener element.
 * @param executionListenerElement the XML element containing the executionListener definition.
 */
","/**
   * Parses an {@link ExecutionListener} implementation for the given
   * executionListener element.
   * 
   * @param executionListenerElement
   *          the XML element containing the executionListener definition.
   */
  public ExecutionListener createExecutionListener(ActivitiListener activitiListener) {
    ExecutionListener executionListener = null;
  
    if (ImplementationType.IMPLEMENTATION_TYPE_CLASS.equalsIgnoreCase(activitiListener.getImplementationType())) {
      executionListener = listenerFactory.createClassDelegateExecutionListener(activitiListener);  
    } else if (ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION.equalsIgnoreCase(activitiListener.getImplementationType())) {
      executionListener = listenerFactory.createExpressionExecutionListener(activitiListener);
    } else if (ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equalsIgnoreCase(activitiListener.getImplementationType())) {
      executionListener = listenerFactory.createDelegateExpressionExecutionListener(activitiListener);
    }
    return executionListener;
  }",True
118,"addErrorEventDefinition(ErrorEventDefinition,ScopeImpl)",Method,"createErrorStartEventDefinition(org.activiti.bpmn.model.ErrorEventDefinition,ActivityImpl,ScopeImpl) createBoundaryErrorEventDefinition(org.activiti.bpmn.model.ErrorEventDefinition,boolean,ActivityImpl,ActivityImpl)",,"org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) org.activiti.engine.impl.pvm.process.ProcessElementImpl+getProperty(String) java.util.ArrayList+ArrayList() org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) org.activiti.engine.impl.pvm.process.ProcessElementImpl+setProperty(String,Object) java.util.List+add(E) java.util.List+add(E) java.util.Collections+sort(List,Comparator) java.util.Collections+sort(List,Comparator)",org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_ERROR_EVENT_DEFINITIONS org.activiti.engine.impl.bpmn.parser.BpmnParse+PROPERTYNAME_ERROR_EVENT_DEFINITIONS org.activiti.engine.impl.bpmn.parser.ErrorEventDefinition+comparator,601,9,4,,"protected void addErrorEventDefinition(ErrorEventDefinition errorEventDefinition, ScopeImpl catchingScope) {
    List<ErrorEventDefinition> errorEventDefinitions = (List<ErrorEventDefinition>) catchingScope.getProperty(PROPERTYNAME_ERROR_EVENT_DEFINITIONS);
    if(errorEventDefinitions == null) {
      errorEventDefinitions = new ArrayList<ErrorEventDefinition>();
      catchingScope.setProperty(PROPERTYNAME_ERROR_EVENT_DEFINITIONS, errorEventDefinitions);
    }
    errorEventDefinitions.add(errorEventDefinition);
    Collections.sort(errorEventDefinitions, ErrorEventDefinition.comparator);
  }",True
119,processDI(),Method,transformProcessDefinitions(),,"java.util.Map+size() org.activiti.bpmn.model.BpmnModel+getLocationMap() org.activiti.bpmn.model.BpmnModel+getLocationMap() java.util.Map+size() org.activiti.bpmn.model.BpmnModel+getProcesses() org.activiti.bpmn.model.BpmnModel+getProcesses() org.activiti.bpmn.model.Process+isExecutable() org.activiti.bpmn.model.Process+isExecutable() org.activiti.engine.impl.bpmn.parser.BpmnParse+getProcessDefinition(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+getProcessDefinition(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setGraphicalNotationDefined(boolean) org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+setGraphicalNotationDefined(boolean) java.util.Map+keySet() org.activiti.bpmn.model.BpmnModel+getLocationMap() org.activiti.bpmn.model.BpmnModel+getLocationMap() java.util.Map+keySet() org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBPMNShape(String,GraphicInfo,ProcessDefinitionEntity) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBPMNShape(String,GraphicInfo,ProcessDefinitionEntity) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) java.util.Map+keySet() org.activiti.bpmn.model.BpmnModel+getFlowLocationMap() org.activiti.bpmn.model.BpmnModel+getFlowLocationMap() java.util.Map+keySet() org.activiti.bpmn.model.BpmnModel+getFlowElement(String) org.activiti.bpmn.model.BpmnModel+getFlowElement(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBPMNEdge(String,List<GraphicInfo>) org.activiti.engine.impl.bpmn.parser.BpmnParse+createBPMNEdge(String,List<GraphicInfo>) org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,918,22,1,,"public void processDI() {
    if (bpmnModel.getLocationMap().size() > 0) {
      for (Process process : bpmnModel.getProcesses()) {
        if (process.isExecutable() == false) continue;
        ProcessDefinitionEntity processDefinition = getProcessDefinition(process.getId());
        if (processDefinition != null) {
          processDefinition.setGraphicalNotationDefined(true);
          for (String shapeId : bpmnModel.getLocationMap().keySet()) {
            if (processDefinition.findActivity(shapeId) != null) {
              createBPMNShape(shapeId, bpmnModel.getGraphicInfo(shapeId), processDefinition);
            }
          }
      
          for (String edgeId : bpmnModel.getFlowLocationMap().keySet()) {
            if (bpmnModel.getFlowElement(edgeId) != null) {
              createBPMNEdge(edgeId, bpmnModel.getFlowLocationGraphicInfo(edgeId));
            }
          }
        }
      }
    }
  }",False
120,"createBPMNShape(String,GraphicInfo,ProcessDefinitionEntity)",Method,processDI(),,"org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.engine.impl.pvm.process.ScopeImpl+findActivity(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+createDIBounds(GraphicInfo,HasDIBounds) org.activiti.engine.impl.bpmn.parser.BpmnParse+createDIBounds(GraphicInfo,HasDIBounds) org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+getLaneForId(String) org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl+getLaneForId(String) org.activiti.engine.impl.bpmn.parser.BpmnParse+createDIBounds(GraphicInfo,HasDIBounds) org.activiti.engine.impl.bpmn.parser.BpmnParse+createDIBounds(GraphicInfo,HasDIBounds) org.activiti.bpmn.model.BpmnModel+addProblem(String,GraphicInfo) org.activiti.bpmn.model.BpmnModel+addProblem(String,GraphicInfo)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,628,16,1,,"public void createBPMNShape(String key, GraphicInfo graphicInfo, ProcessDefinitionEntity processDefinition) {
    ActivityImpl activity = processDefinition.findActivity(key);
    if (activity != null) {
      createDIBounds(graphicInfo, activity);
      
    } else {
      org.activiti.engine.impl.pvm.process.Lane lane = processDefinition.getLaneForId(key);
     
      if(lane != null) {
        // The shape represents a lane
        createDIBounds(graphicInfo, lane);
      } else {
        bpmnModel.addProblem(""Invalid reference in 'bpmnElement' attribute, activity "" + key + "" not found"", graphicInfo);
      }
    }
  }",False
121,"createDIBounds(GraphicInfo,HasDIBounds)",Method,"createBPMNShape(String,GraphicInfo,ProcessDefinitionEntity) createBPMNShape(String,GraphicInfo,ProcessDefinitionEntity)",,org.activiti.engine.impl.pvm.process.HasDIBounds+setX(int) org.activiti.engine.impl.pvm.process.HasDIBounds+setX(int) org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.engine.impl.pvm.process.HasDIBounds+setY(int) org.activiti.engine.impl.pvm.process.HasDIBounds+setY(int) org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.engine.impl.pvm.process.HasDIBounds+setWidth(int) org.activiti.engine.impl.pvm.process.HasDIBounds+setWidth(int) org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.engine.impl.pvm.process.HasDIBounds+setHeight(int) org.activiti.engine.impl.pvm.process.HasDIBounds+setHeight(int) org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getHeight(),,270,6,4,,"protected void createDIBounds(GraphicInfo graphicInfo, HasDIBounds target) {
    target.setX((int) graphicInfo.getX());
    target.setY((int) graphicInfo.getY());
    target.setWidth((int) graphicInfo.getWidth());
    target.setHeight((int) graphicInfo.getHeight());
  }",False
122,"createBPMNEdge(String,List<GraphicInfo>)",Method,processDI(),,"org.activiti.bpmn.model.BpmnModel+getFlowElement(String) org.activiti.bpmn.model.BpmnModel+getFlowElement(String) java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.ArrayList+ArrayList() java.util.List+add(int,E) java.util.List+add(int,E) org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+getX() java.util.List+add(int,E) java.util.List+add(int,E) org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.engine.impl.pvm.process.TransitionImpl+setWaypoints(List<Integer>) org.activiti.engine.impl.pvm.process.TransitionImpl+setWaypoints(List<Integer>) org.activiti.bpmn.model.BpmnModel+getArtifact(String) org.activiti.bpmn.model.BpmnModel+getArtifact(String) java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) org.activiti.bpmn.model.GraphicInfo+GraphicInfo() org.activiti.bpmn.model.BpmnModel+addProblem(String,GraphicInfo) org.activiti.bpmn.model.BpmnModel+addProblem(String,GraphicInfo)",org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+sequenceFlows org.activiti.engine.impl.bpmn.parser.BpmnParse+sequenceFlows org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel org.activiti.engine.impl.bpmn.parser.BpmnParse+bpmnModel,972,22,1,,"public void createBPMNEdge(String key, List<GraphicInfo> graphicList) {
    FlowElement flowElement = bpmnModel.getFlowElement(key);
    if (flowElement != null && sequenceFlows.containsKey(key)) {
      TransitionImpl sequenceFlow = sequenceFlows.get(key);
      List<Integer> waypoints = new ArrayList<Integer>();
      for (GraphicInfo waypointInfo : graphicList) {
        waypoints.add((int) waypointInfo.getX());
        waypoints.add((int) waypointInfo.getY());
      }
      sequenceFlow.setWaypoints(waypoints);
    } else if (bpmnModel.getArtifact(key) != null) {
      // it's an association, so nothing to do
    } else { 
      GraphicInfo graphicInfo = null;
      if (graphicList != null && graphicList.size() > 0) {
        graphicInfo = graphicList.get(0);
      } else {
        graphicInfo = new GraphicInfo();
      }
      bpmnModel.addProblem(""Invalid reference in 'bpmnElement' attribute, sequenceFlow "" + key + "" not found"", graphicInfo);
    }
  }",False
123,getProcessDefinitions(),Method,,org.activiti.engine.impl.bpmn.deployer.BpmnDeployer+deploy(DeploymentEntity),,org.activiti.engine.impl.bpmn.parser.BpmnParse+processDefinitions,97,3,1,,"public List<ProcessDefinitionEntity> getProcessDefinitions() {
    return processDefinitions;
  }",False
124,getProcessDefinition(String),Method,processDI(),,java.lang.String+equals(Object) org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+getKey() org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity+getKey() java.lang.String+equals(Object),org.activiti.engine.impl.bpmn.parser.BpmnParse+processDefinitions,295,8,1,,"public ProcessDefinitionEntity getProcessDefinition(String processDefinitionKey) {
    for (ProcessDefinitionEntity processDefinition : processDefinitions) {
      if (processDefinition.getKey().equals(processDefinitionKey)) {
        return processDefinition;
      }
    }
    return null;
  }",False
125,addStructure(StructureDefinition),Method,,org.activiti.engine.impl.webservice.CxfWSDLImporter+transferImportsToParse(BpmnParse) org.activiti.engine.impl.webservice.WSDLImporter+transferImportsToParse(BpmnParse),"java.util.Map+put(K,V) java.util.Map+put(K,V) org.activiti.engine.impl.bpmn.data.StructureDefinition+getId() org.activiti.engine.impl.bpmn.data.StructureDefinition+getId()",org.activiti.engine.impl.bpmn.parser.BpmnParse+structures org.activiti.engine.impl.bpmn.parser.BpmnParse+structures,116,3,1,,"public void addStructure(StructureDefinition structure) {
    this.structures.put(structure.getId(), structure);
  }",False
126,addService(BpmnInterfaceImplementation),Method,,org.activiti.engine.impl.webservice.CxfWSDLImporter+transferImportsToParse(BpmnParse) org.activiti.engine.impl.webservice.WSDLImporter+transferImportsToParse(BpmnParse),"java.util.Map+put(K,V) java.util.Map+put(K,V) org.activiti.engine.impl.bpmn.webservice.BpmnInterfaceImplementation+getName() org.activiti.engine.impl.bpmn.webservice.BpmnInterfaceImplementation+getName()",org.activiti.engine.impl.bpmn.parser.BpmnParse+interfaceImplementations org.activiti.engine.impl.bpmn.parser.BpmnParse+interfaceImplementations,192,3,1,,"public void addService(BpmnInterfaceImplementation bpmnInterfaceImplementation) {
    this.interfaceImplementations.put(bpmnInterfaceImplementation.getName(), bpmnInterfaceImplementation);
  }",False
127,addOperation(OperationImplementation),Method,,org.activiti.engine.impl.webservice.CxfWSDLImporter+transferImportsToParse(BpmnParse) org.activiti.engine.impl.webservice.WSDLImporter+transferImportsToParse(BpmnParse),"java.util.Map+put(K,V) java.util.Map+put(K,V) org.activiti.engine.impl.bpmn.webservice.OperationImplementation+getId() org.activiti.engine.impl.bpmn.webservice.OperationImplementation+getId()",org.activiti.engine.impl.bpmn.parser.BpmnParse+operationImplementations org.activiti.engine.impl.bpmn.parser.BpmnParse+operationImplementations,176,3,1,,"public void addOperation(OperationImplementation operationImplementation) {
    this.operationImplementations.put(operationImplementation.getId(), operationImplementation);
  }",False
128,getActivityBehaviorFactory(),Method,,,,org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory,101,3,1,,"public ActivityBehaviorFactory getActivityBehaviorFactory() {
    return activityBehaviorFactory;
  }",False
129,setActivityBehaviorFactory(ActivityBehaviorFactory),Method,,,,org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+activityBehaviorFactory,153,3,1,,"public void setActivityBehaviorFactory(ActivityBehaviorFactory activityBehaviorFactory) {
    this.activityBehaviorFactory = activityBehaviorFactory;
  }",False
130,getListenerFactory(),Method,,,,org.activiti.engine.impl.bpmn.parser.BpmnParse+listenerFactory,77,3,1,,"public ListenerFactory getListenerFactory() {
    return listenerFactory;
  }",False
131,setListenerFactory(ListenerFactory),Method,,,,org.activiti.engine.impl.bpmn.parser.BpmnParse+listenerFactory org.activiti.engine.impl.bpmn.parser.BpmnParse+listenerFactory,113,3,1,,"public void setListenerFactory(ListenerFactory listenerFactory) {
    this.listenerFactory = listenerFactory;
  }",False
