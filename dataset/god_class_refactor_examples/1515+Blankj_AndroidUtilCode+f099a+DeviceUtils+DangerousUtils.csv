index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,DeviceUtils(),device utils ,Method,,,java.lang.UnsupportedOperationException+UnsupportedOperationException(String),,107,3,2,,"private DeviceUtils() {
        throw new UnsupportedOperationException(""u can't instantiate me..."");
    }",False,False,"The function of this method is to prevent the instantiation of the DeviceUtils class by throwing an UnsupportedOperationException with the message ""u can't instantiate me..."".",False,"The code defines a private constructor for a class called DeviceUtils, which throws an exception to prevent instantiation of the class. This is typically used to create utility classes that only contain static methods and should not be instantiated."
2,isDeviceRooted(),is device rooted return whether device is rooted return code true yes code false no ,Method,,,java.io.File+exists() java.io.File+File(String) java.io.File+exists(),,614,17,9,"/** 
 * Return whether device is rooted.
 * @return {@code true}: yes<br> {@code false}: no
 */
","/**
     * Return whether device is rooted.
     *
     * @return {@code true}: yes<br>{@code false}: no
     */
    public static boolean isDeviceRooted() {
        String su = ""su"";
        String[] locations = {""/system/bin/"", ""/system/xbin/"", ""/sbin/"", ""/system/sd/xbin/"",
                ""/system/bin/failsafe/"", ""/data/local/xbin/"", ""/data/local/bin/"", ""/data/local/"",
                ""/system/sbin/"", ""/usr/bin/"", ""/vendor/bin/""};
        for (String location : locations) {
            if (new File(location + su).exists()) {
                return true;
            }
        }
        return false;
    }",False,False,"This method checks if the device is rooted by searching for the presence of the ""su"" file in various system directories. If the file is found in any of the directories, it returns true indicating that the device is rooted. Otherwise, it returns false.",True,"This code defines a method called `isDeviceRooted()` that checks if a device is rooted by searching for the presence of the ""su"" binary file in various system directories. It returns `true` if the file is found in any of the directories, indicating that the device is rooted, otherwise it returns `false`."
3,isAdbEnabled(),is adb enabled return whether adb is enabled return code true yes code false no ,Method,,,com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.Utils+getApp(),,372,12,9,"/** 
 * Return whether ADB is enabled.
 * @return {@code true}: yes<br> {@code false}: no
 */
","/**
     * Return whether ADB is enabled.
     *
     * @return {@code true}: yes<br>{@code false}: no
     */
    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)
    public static boolean isAdbEnabled() {
        return Settings.Secure.getInt(
                Utils.getApp().getContentResolver(),
                Settings.Global.ADB_ENABLED, 0
        ) > 0;
    }",False,False,"This method checks if ADB (Android Debug Bridge) is enabled by retrieving the value of the ADB_ENABLED setting from the device's global settings. It returns true if ADB is enabled, and false otherwise.",True,"This code defines a method called ""isAdbEnabled()"" that checks whether ADB (Android Debug Bridge) is enabled on the device. It uses the Settings.Secure class to retrieve the value of the ADB_ENABLED setting and returns true if it is greater than 0, indicating that ADB is enabled, and false otherwise."
4,getSDKVersionName(),get sdk version name return the version name of device s system return the version name of device s system ,Method,,,,,222,8,9,"/** 
 * Return the version name of device's system.
 * @return the version name of device's system
 */
","/**
     * Return the version name of device's system.
     *
     * @return the version name of device's system
     */
    public static String getSDKVersionName() {
        return android.os.Build.VERSION.RELEASE;
    }",False,False,This method returns the version name of the device's system.,True,"This code defines a method called ""getSDKVersionName"" that returns the version name of the device's system. It retrieves the version name from the ""android.os.Build.VERSION.RELEASE"" property."
5,getSDKVersionCode(),get sdk version code return version code of device s system return version code of device s system ,Method,,,,,211,8,9,"/** 
 * Return version code of device's system.
 * @return version code of device's system
 */
","/**
     * Return version code of device's system.
     *
     * @return version code of device's system
     */
    public static int getSDKVersionCode() {
        return android.os.Build.VERSION.SDK_INT;
    }",False,False,This method returns the version code of the device's system.,True,"This code defines a method called ""getSDKVersionCode"" that returns the version code of the device's system. It uses the ""android.os.Build.VERSION.SDK_INT"" property to retrieve the version code."
6,getAndroidID(),get android id return the android id of device return the android id of device ,Method,,,com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.Utils+getApp(),,370,13,9,"/** 
 * Return the android id of device.
 * @return the android id of device
 */
","/**
     * Return the android id of device.
     *
     * @return the android id of device
     */
    @SuppressLint(""HardwareIds"")
    public static String getAndroidID() {
        String id = Settings.Secure.getString(
                Utils.getApp().getContentResolver(),
                Settings.Secure.ANDROID_ID
        );
        return id == null ? """" : id;
    }",False,False,"This method serves to retrieve the Android ID of the device. It uses the Settings.Secure class to get the Android ID and returns it as a string. If the ID is null, it returns an empty string.",True,"This code defines a method called ""getAndroidID"" that retrieves the unique Android ID of the device. It uses the Settings.Secure class to access the Android ID and returns it as a string. The method also handles the case where the ID is null by returning an empty string."
7,getMacAddress(),get mac address return the mac address must hold code uses permission android name android permission access wifi state code uses permission android name android permission internet return the mac address ,Method,,,com.blankj.utilcode.util.DeviceUtils+getMacAddress(String[]) com.blankj.utilcode.util.DeviceUtils+getMacAddress(String[]),,422,11,9,"/** 
 * Return the MAC address. <p>Must hold  {@code <uses-permission android:name=""android.permission.ACCESS_WIFI_STATE"" />}, {@code <uses-permission android:name=""android.permission.INTERNET"" />}</p>
 * @return the MAC address
 */
","/**
     * Return the MAC address.
     * <p>Must hold {@code <uses-permission android:name=""android.permission.ACCESS_WIFI_STATE"" />},
     * {@code <uses-permission android:name=""android.permission.INTERNET"" />}</p>
     *
     * @return the MAC address
     */
    @RequiresPermission(allOf = {ACCESS_WIFI_STATE, INTERNET})
    public static String getMacAddress() {
        return getMacAddress((String[]) null);
    }",False,False,This method returns the MAC address. It requires the permissions ACCESS_WIFI_STATE and INTERNET. It calls another method to get the MAC address.,True,"This code defines a method called ""getMacAddress"" that returns the MAC address of the device. It requires the permissions ""ACCESS_WIFI_STATE"" and ""INTERNET"" to be granted. The method internally calls another overloaded version of ""getMacAddress"" with a null argument."
8,getMacAddress(String),get mac address excepts return the mac address must hold code uses permission android name android permission access wifi state code uses permission android name android permission internet return the mac address ,Method,,,"com.blankj.utilcode.util.DeviceUtils+getMacAddressByNetworkInterface() com.blankj.utilcode.util.DeviceUtils+getMacAddressByNetworkInterface() com.blankj.utilcode.util.DeviceUtils+isAddressNotInExcepts(String,String[]) com.blankj.utilcode.util.DeviceUtils+isAddressNotInExcepts(String,String[]) com.blankj.utilcode.util.DeviceUtils+getMacAddressByInetAddress() com.blankj.utilcode.util.DeviceUtils+getMacAddressByInetAddress() com.blankj.utilcode.util.DeviceUtils+isAddressNotInExcepts(String,String[]) com.blankj.utilcode.util.DeviceUtils+isAddressNotInExcepts(String,String[]) com.blankj.utilcode.util.DeviceUtils+getMacAddressByWifiInfo() com.blankj.utilcode.util.DeviceUtils+getMacAddressByWifiInfo() com.blankj.utilcode.util.DeviceUtils+isAddressNotInExcepts(String,String[]) com.blankj.utilcode.util.DeviceUtils+isAddressNotInExcepts(String,String[]) com.blankj.utilcode.util.DeviceUtils+getMacAddressByFile() com.blankj.utilcode.util.DeviceUtils+getMacAddressByFile() com.blankj.utilcode.util.DeviceUtils+isAddressNotInExcepts(String,String[]) com.blankj.utilcode.util.DeviceUtils+isAddressNotInExcepts(String,String[])",,1019,27,9,"/** 
 * Return the MAC address. <p>Must hold  {@code <uses-permission android:name=""android.permission.ACCESS_WIFI_STATE"" />}, {@code <uses-permission android:name=""android.permission.INTERNET"" />}</p>
 * @return the MAC address
 */
","/**
     * Return the MAC address.
     * <p>Must hold {@code <uses-permission android:name=""android.permission.ACCESS_WIFI_STATE"" />},
     * {@code <uses-permission android:name=""android.permission.INTERNET"" />}</p>
     *
     * @return the MAC address
     */
    @RequiresPermission(allOf = {ACCESS_WIFI_STATE, INTERNET})
    public static String getMacAddress(final String... excepts) {
        String macAddress = getMacAddressByNetworkInterface();
        if (isAddressNotInExcepts(macAddress, excepts)) {
            return macAddress;
        }
        macAddress = getMacAddressByInetAddress();
        if (isAddressNotInExcepts(macAddress, excepts)) {
            return macAddress;
        }
        macAddress = getMacAddressByWifiInfo();
        if (isAddressNotInExcepts(macAddress, excepts)) {
            return macAddress;
        }
        macAddress = getMacAddressByFile();
        if (isAddressNotInExcepts(macAddress, excepts)) {
            return macAddress;
        }
        return """";
    }",False,False,"This method returns the MAC address of the device. It first tries to get the MAC address using different methods, and if the address is not in the list of exceptions, it returns the address. If none of the methods return a valid address, it returns an empty string.",True,"This code defines a method called ""getMacAddress"" that returns the MAC address of the device. It uses different methods to retrieve the MAC address, such as through network interface, internet address, wifi information, and file. It requires specific permissions and allows exceptions to be specified."
9,"isAddressNotInExcepts(String,String)",is address not in excepts address excepts ,Method,,,java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object),,377,11,10,,"private static boolean isAddressNotInExcepts(final String address, final String... excepts) {
        if (excepts == null || excepts.length == 0) {
            return !""02:00:00:00:00:00"".equals(address);
        }
        for (String filter : excepts) {
            if (address.equals(filter)) {
                return false;
            }
        }
        return true;
    }",False,False,"This method checks if a given address is not present in a list of exceptions. It returns true if the address is not in the exceptions list, and false otherwise.",False,"The code defines a method named ""isAddressNotInExcepts"" that takes a string address and a variable number of string exceptions as parameters. It checks if the address is not equal to any of the exceptions and returns true if it is not, otherwise it returns false."
10,getMacAddressByWifiInfo(),get mac address by wifi info ,Method,getMacAddress(String),,com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.Utils+getApp() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,560,14,10,,"@SuppressLint({""MissingPermission"", ""HardwareIds""})
    private static String getMacAddressByWifiInfo() {
        try {
            final WifiManager wifi = (WifiManager) Utils.getApp()
                    .getApplicationContext().getSystemService(Context.WIFI_SERVICE);
            if (wifi != null) {
                final WifiInfo info = wifi.getConnectionInfo();
                if (info != null) return info.getMacAddress();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ""02:00:00:00:00:00"";
    }",False,False,"This method retrieves the MAC address of the device's Wi-Fi interface. If the Wi-Fi is enabled and connected, it returns the MAC address. Otherwise, it returns a default MAC address.",False,"This code is a method that retrieves the MAC address of the device's Wi-Fi interface. It uses the WifiManager and WifiInfo classes to access the Wi-Fi information and returns the MAC address as a string. If any exceptions occur during the process, it returns a default MAC address of ""02:00:00:00:00:00""."
11,getMacAddressByNetworkInterface(),get mac address by network interface ,Method,getMacAddress(String),,"java.net.NetworkInterface+getNetworkInterfaces() java.net.NetworkInterface+getNetworkInterfaces() java.util.Enumeration+hasMoreElements() java.util.Enumeration+hasMoreElements() java.util.Enumeration+nextElement() java.util.Enumeration+nextElement() java.lang.String+equalsIgnoreCase(String) java.net.NetworkInterface+getName() java.net.NetworkInterface+getName() java.lang.String+equalsIgnoreCase(String) java.net.NetworkInterface+getHardwareAddress() java.net.NetworkInterface+getHardwareAddress() java.lang.StringBuilder+StringBuilder() java.lang.StringBuilder+append(Object) java.lang.StringBuilder+append(Object) java.lang.String+format(String,Object[]) java.lang.String+format(String,Object[]) java.lang.StringBuilder+substring(int,int) java.lang.StringBuilder+substring(int,int) java.lang.StringBuilder+length() java.lang.StringBuilder+length() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()",,868,20,10,,"private static String getMacAddressByNetworkInterface() {
        try {
            Enumeration<NetworkInterface> nis = NetworkInterface.getNetworkInterfaces();
            while (nis.hasMoreElements()) {
                NetworkInterface ni = nis.nextElement();
                if (ni == null || !ni.getName().equalsIgnoreCase(""wlan0"")) continue;
                byte[] macBytes = ni.getHardwareAddress();
                if (macBytes != null && macBytes.length > 0) {
                    StringBuilder sb = new StringBuilder();
                    for (byte b : macBytes) {
                        sb.append(String.format(""%02x:"", b));
                    }
                    return sb.substring(0, sb.length() - 1);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ""02:00:00:00:00:00"";
    }",False,False,"This method is used to retrieve the MAC address of the device's network interface named ""wlan0"". If the MAC address is found, it is formatted and returned as a string. If not found, a default MAC address of ""02:00:00:00:00:00"" is returned.",False,"This code is a method that retrieves the MAC address of the device's wireless network interface (wlan0) using the NetworkInterface class. It iterates through the available network interfaces, checks for the wlan0 interface, and returns the MAC address in the format xx:xx:xx:xx:xx:xx. If an exception occurs or no MAC address is found, it returns a default value of ""02:00:00:00:00:00""."
12,getMacAddressByInetAddress(),get mac address by inet address ,Method,getMacAddress(String),,"com.blankj.utilcode.util.DeviceUtils+getInetAddress() com.blankj.utilcode.util.DeviceUtils+getInetAddress() java.net.NetworkInterface+getByInetAddress(InetAddress) java.net.NetworkInterface+getByInetAddress(InetAddress) java.net.NetworkInterface+getHardwareAddress() java.net.NetworkInterface+getHardwareAddress() java.lang.StringBuilder+StringBuilder() java.lang.StringBuilder+append(Object) java.lang.StringBuilder+append(Object) java.lang.String+format(String,Object[]) java.lang.String+format(String,Object[]) java.lang.StringBuilder+substring(int,int) java.lang.StringBuilder+substring(int,int) java.lang.StringBuilder+length() java.lang.StringBuilder+length() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()",,853,21,10,,"private static String getMacAddressByInetAddress() {
        try {
            InetAddress inetAddress = getInetAddress();
            if (inetAddress != null) {
                NetworkInterface ni = NetworkInterface.getByInetAddress(inetAddress);
                if (ni != null) {
                    byte[] macBytes = ni.getHardwareAddress();
                    if (macBytes != null && macBytes.length > 0) {
                        StringBuilder sb = new StringBuilder();
                        for (byte b : macBytes) {
                            sb.append(String.format(""%02x:"", b));
                        }
                        return sb.substring(0, sb.length() - 1);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ""02:00:00:00:00:00"";
    }",False,False,"This method retrieves the MAC address of the device by using the device's IP address. If the MAC address is found, it is formatted and returned. If not found, a default MAC address is returned.",False,"This code is a method that retrieves the MAC address of the device by using the InetAddress class and NetworkInterface class. It returns the MAC address as a formatted string, or a default value if the MAC address cannot be obtained."
13,getInetAddress(),get inet address ,Method,getMacAddressByInetAddress(),,java.net.NetworkInterface+getNetworkInterfaces() java.net.NetworkInterface+getNetworkInterfaces() java.util.Enumeration+hasMoreElements() java.util.Enumeration+hasMoreElements() java.util.Enumeration+nextElement() java.util.Enumeration+nextElement() java.net.NetworkInterface+isUp() java.net.NetworkInterface+isUp() java.net.NetworkInterface+getInetAddresses() java.net.NetworkInterface+getInetAddresses() java.util.Enumeration+hasMoreElements() java.util.Enumeration+hasMoreElements() java.util.Enumeration+nextElement() java.util.Enumeration+nextElement() java.net.InetAddress+isLoopbackAddress() java.net.InetAddress+isLoopbackAddress() java.net.InetAddress+getHostAddress() java.net.InetAddress+getHostAddress() java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,932,21,10,,"private static InetAddress getInetAddress() {
        try {
            Enumeration<NetworkInterface> nis = NetworkInterface.getNetworkInterfaces();
            while (nis.hasMoreElements()) {
                NetworkInterface ni = nis.nextElement();
                // To prevent phone of xiaomi return ""10.0.2.15""
                if (!ni.isUp()) continue;
                Enumeration<InetAddress> addresses = ni.getInetAddresses();
                while (addresses.hasMoreElements()) {
                    InetAddress inetAddress = addresses.nextElement();
                    if (!inetAddress.isLoopbackAddress()) {
                        String hostAddress = inetAddress.getHostAddress();
                        if (hostAddress.indexOf(':') < 0) return inetAddress;
                    }
                }
            }
        } catch (SocketException e) {
            e.printStackTrace();
        }
        return null;
    }",False,False,This method returns the first non-loopback IPv4 address of the device by iterating through the network interfaces and their addresses. It skips interfaces that are not up and addresses that contain a colon.,False,This code retrieves the IP address of the device by iterating through the network interfaces and returning the first non-loopback IPv4 address found. It excludes addresses with colons to avoid returning a potentially incorrect address for Xiaomi phones.
14,getMacAddressByFile(),get mac address by file ,Method,getMacAddress(String),,"com.blankj.utilcode.util.ShellUtils+execCmd(String,boolean) com.blankj.utilcode.util.ShellUtils+execCmd(String,boolean) com.blankj.utilcode.util.ShellUtils+execCmd(String,boolean) com.blankj.utilcode.util.ShellUtils+execCmd(String,boolean) java.lang.String+length() java.lang.String+length()",com.blankj.utilcode.util.ShellUtils.CommandResult+result com.blankj.utilcode.util.ShellUtils.CommandResult+successMsg com.blankj.utilcode.util.ShellUtils.CommandResult+result com.blankj.utilcode.util.ShellUtils.CommandResult+successMsg,657,16,10,,"private static String getMacAddressByFile() {
        ShellUtils.CommandResult result = ShellUtils.execCmd(""getprop wifi.interface"", false);
        if (result.result == 0) {
            String name = result.successMsg;
            if (name != null) {
                result = ShellUtils.execCmd(""cat /sys/class/net/"" + name + ""/address"", false);
                if (result.result == 0) {
                    String address = result.successMsg;
                    if (address != null && address.length() > 0) {
                        return address;
                    }
                }
            }
        }
        return ""02:00:00:00:00:00"";
    }",False,False,"The function of this method is to retrieve the MAC address of the device by reading a file. If the MAC address is successfully obtained, it is returned. Otherwise, a default MAC address of ""02:00:00:00:00:00"" is returned.",False,"This code is a method that retrieves the MAC address of the device by executing shell commands. It first gets the name of the wifi interface, then reads the MAC address from the corresponding file. If successful, it returns the MAC address; otherwise, it returns a default value of ""02:00:00:00:00:00""."
15,getManufacturer(),get manufacturer return the manufacturer of the product hardware e g xiaomi return the manufacturer of the product hardware ,Method,,,,,242,9,9,"/** 
 * Return the manufacturer of the product/hardware. <p>e.g. Xiaomi</p>
 * @return the manufacturer of the product/hardware
 */
","/**
     * Return the manufacturer of the product/hardware.
     * <p>e.g. Xiaomi</p>
     *
     * @return the manufacturer of the product/hardware
     */
    public static String getManufacturer() {
        return Build.MANUFACTURER;
    }",False,False,This method returns the manufacturer of the product/hardware. It uses the Build.MANUFACTURER variable to retrieve the manufacturer information.,True,"This code defines a method called ""getManufacturer"" that returns the manufacturer of the product or hardware. It utilizes the ""Build.MANUFACTURER"" property to retrieve the manufacturer information. The method's purpose is to provide a convenient way to access the manufacturer details."
16,getModel(),get model return the model of device e g m i2 sc return the model of device ,Method,,,"java.lang.String+replaceAll(String,String) java.lang.String+trim() java.lang.String+trim() java.lang.String+replaceAll(String,String)",,352,15,9,"/** 
 * Return the model of device. <p>e.g. MI2SC</p>
 * @return the model of device
 */
","/**
     * Return the model of device.
     * <p>e.g. MI2SC</p>
     *
     * @return the model of device
     */
    public static String getModel() {
        String model = Build.MODEL;
        if (model != null) {
            model = model.trim().replaceAll(""\\s*"", """");
        } else {
            model = """";
        }
        return model;
    }",False,False,This method returns the model of the device. It trims and removes any whitespace from the model string before returning it.,True,"This code defines a method called ""getModel()"" that returns the model of the device. It retrieves the model from the Build class, trims any leading or trailing spaces, and returns the resulting string."
17,getABIs(),get ab is return an ordered list of ab is supported by this device the most preferred abi is the first element in the list return an ordered list of ab is supported by this device ,Method,,,,,576,16,9,"/** 
 * Return an ordered list of ABIs supported by this device. The most preferred ABI is the first element in the list.
 * @return an ordered list of ABIs supported by this device
 */
","/**
     * Return an ordered list of ABIs supported by this device. The most preferred ABI is the first
     * element in the list.
     *
     * @return an ordered list of ABIs supported by this device
     */
    public static String[] getABIs() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            return Build.SUPPORTED_ABIS;
        } else {
            if (!TextUtils.isEmpty(Build.CPU_ABI2)) {
                return new String[]{Build.CPU_ABI, Build.CPU_ABI2};
            }
            return new String[]{Build.CPU_ABI};
        }
    }",False,False,This method returns an ordered list of ABIs (Application Binary Interfaces) supported by the device. The most preferred ABI is the first element in the list.,True,"This code defines a method called ""getABIs"" that returns an ordered list of ABIs (Application Binary Interfaces) supported by the device. It checks the Android version and returns the appropriate list of ABIs based on the version."
18,shutdown(),shutdown shutdown the device requires root permission or hold code android shared user id android uid system code uses permission android name android permission shutdown in manifest ,Method,,,"com.blankj.utilcode.util.ShellUtils+execCmd(String,boolean) com.blankj.utilcode.util.ShellUtils+execCmd(String,boolean) com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.Utils+getApp()",,567,13,9,"/** 
 * Shutdown the device <p>Requires root permission or hold  {@code android:sharedUserId=""android.uid.system""}, {@code <uses-permission android:name=""android.permission.SHUTDOWN/>}in manifest.</p>
 */
","/**
     * Shutdown the device
     * <p>Requires root permission
     * or hold {@code android:sharedUserId=""android.uid.system""},
     * {@code <uses-permission android:name=""android.permission.SHUTDOWN/>}
     * in manifest.</p>
     */
    public static void shutdown() {
        ShellUtils.execCmd(""reboot -p"", true);
        Intent intent = new Intent(""android.intent.action.ACTION_REQUEST_SHUTDOWN"");
        intent.putExtra(""android.intent.extra.KEY_CONFIRM"", false);
        Utils.getApp().startActivity(intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
    }",True,True,"This method shuts down the device by executing a shell command to reboot and then starting an intent to request a shutdown. It requires root permission or the ""android.uid.system"" shared user ID and the ""android.permission.SHUTDOWN"" permission in the manifest.",False,"This code defines a method called ""shutdown"" that is used to shut down the device. It requires root permission or the ""android.permission.SHUTDOWN"" permission in the manifest. It uses the ShellUtils class to execute the ""reboot -p"" command and then starts an intent to request a shutdown."
19,reboot(),reboot reboot the device requires root permission or hold code android shared user id android uid system in manifest ,Method,,,"com.blankj.utilcode.util.ShellUtils+execCmd(String,boolean) com.blankj.utilcode.util.ShellUtils+execCmd(String,boolean) java.lang.Object+Object() com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.Utils+getApp()",,458,13,9,"/** 
 * Reboot the device. <p>Requires root permission or hold  {@code android:sharedUserId=""android.uid.system""} in manifest.</p>
 */
","/**
     * Reboot the device.
     * <p>Requires root permission
     * or hold {@code android:sharedUserId=""android.uid.system""} in manifest.</p>
     */
    public static void reboot() {
        ShellUtils.execCmd(""reboot"", true);
        Intent intent = new Intent(Intent.ACTION_REBOOT);
        intent.putExtra(""nowait"", 1);
        intent.putExtra(""interval"", 1);
        intent.putExtra(""window"", 0);
        Utils.getApp().sendBroadcast(intent);
    }",True,True,"This method reboots the device by executing a shell command and sending a broadcast intent. It requires root permission or the ""android.uid.system"" shared user ID in the manifest.",False,"This code defines a method called ""reboot"" that reboots the device. It uses the ShellUtils class to execute the ""reboot"" command, and then sends a broadcast intent to initiate the reboot process. Root permission or holding the ""android.uid.system"" shared user ID in the manifest is required for this method to work."
20,reboot(String),reboot reason reboot the device requires root permission or hold code android shared user id android uid system code uses permission android name android permission reboot param reason code to pass to the kernel e g recovery torequest special boot modes or null ,Method,,,com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.Utils+getApp(),,578,14,9,"/** 
 * Reboot the device. <p>Requires root permission or hold  {@code android:sharedUserId=""android.uid.system""}, {@code <uses-permission android:name=""android.permission.REBOOT"" />}</p>
 * @param reason code to pass to the kernel (e.g., ""recovery"") torequest special boot modes, or null.
 */
","/**
     * Reboot the device.
     * <p>Requires root permission
     * or hold {@code android:sharedUserId=""android.uid.system""},
     * {@code <uses-permission android:name=""android.permission.REBOOT"" />}</p>
     *
     * @param reason code to pass to the kernel (e.g., ""recovery"") to
     *               request special boot modes, or null.
     */
    public static void reboot(final String reason) {
        PowerManager pm = (PowerManager) Utils.getApp().getSystemService(Context.POWER_SERVICE);
        //noinspection ConstantConditions
        pm.reboot(reason);
    }",True,True,"The function of this method is to reboot the device. It requires root permission or the shared user ID ""android.uid.system"" and the permission ""android.permission.REBOOT"". It takes a reason code as a parameter to request special boot modes, or null.",False,"This code defines a method called ""reboot"" that allows the device to be rebooted. It requires root permission or the shared user ID ""android.uid.system"" and the ""android.permission.REBOOT"" permission. The method takes a reason parameter that can be passed to the kernel for special boot modes."
21,reboot2Recovery(),reboot2 recovery reboot the device to recovery requires root permission ,Method,,,"com.blankj.utilcode.util.ShellUtils+execCmd(String,boolean) com.blankj.utilcode.util.ShellUtils+execCmd(String,boolean)",,191,7,9,"/** 
 * Reboot the device to recovery. <p>Requires root permission.</p>
 */
","/**
     * Reboot the device to recovery.
     * <p>Requires root permission.</p>
     */
    public static void reboot2Recovery() {
        ShellUtils.execCmd(""reboot recovery"", true);
    }",True,True,"This method reboots the device to recovery mode by executing the command ""reboot recovery"" using ShellUtils. It requires root permission.",False,"This code defines a method called ""reboot2Recovery"" that reboots the device into recovery mode. It requires root permission and uses the ""ShellUtils.execCmd"" method to execute the command ""reboot recovery""."
22,reboot2Bootloader(),reboot2 bootloader reboot the device to bootloader requires root permission ,Method,,,"com.blankj.utilcode.util.ShellUtils+execCmd(String,boolean) com.blankj.utilcode.util.ShellUtils+execCmd(String,boolean)",,197,7,9,"/** 
 * Reboot the device to bootloader. <p>Requires root permission.</p>
 */
","/**
     * Reboot the device to bootloader.
     * <p>Requires root permission.</p>
     */
    public static void reboot2Bootloader() {
        ShellUtils.execCmd(""reboot bootloader"", true);
    }",True,True,"This method reboots the device to the bootloader. It requires root permission and uses the ShellUtils class to execute the command ""reboot bootloader"".",False,"This code defines a method called ""reboot2Bootloader"" that reboots the device to the bootloader. It requires root permission and uses the ShellUtils class to execute the command ""reboot bootloader""."
23,isTablet(),is tablet return whether device is tablet return code true yes code false no ,Method,,,com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.Utils+getApp(),,349,10,9,"/** 
 * Return whether device is tablet.
 * @return {@code true}: yes<br> {@code false}: no
 */
","/**
     * Return whether device is tablet.
     *
     * @return {@code true}: yes<br>{@code false}: no
     */
    public static boolean isTablet() {
        return (Utils.getApp().getResources().getConfiguration().screenLayout
                & Configuration.SCREENLAYOUT_SIZE_MASK)
                >= Configuration.SCREENLAYOUT_SIZE_LARGE;
    }",False,False,This method returns a boolean value indicating whether the device is a tablet or not. It checks the screen layout size of the device and compares it to the size of a large screen layout.,True,"This code defines a method called ""isTablet()"" that determines whether the device running the application is a tablet or not. It does this by checking the screen layout size of the device and comparing it to the size of a large screen layout. The method returns true if the device is a tablet and false otherwise."
24,isEmulator(),is emulator return whether device is emulator return code true yes code false no ,Method,,,java.lang.String+equals(Object) java.lang.String+equals(Object) com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.Utils+getApp() java.lang.String+equals(Object) java.lang.String+toLowerCase() java.lang.String+toLowerCase() java.lang.String+equals(Object) com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.Utils+getApp(),,1802,42,9,"/** 
 * Return whether device is emulator.
 * @return {@code true}: yes<br> {@code false}: no
 */
","/**
     * Return whether device is emulator.
     *
     * @return {@code true}: yes<br>{@code false}: no
     */
    public static boolean isEmulator() {
        boolean checkProperty = Build.FINGERPRINT.startsWith(""generic"")
                || Build.FINGERPRINT.toLowerCase().contains(""vbox"")
                || Build.FINGERPRINT.toLowerCase().contains(""test-keys"")
                || Build.MODEL.contains(""google_sdk"")
                || Build.MODEL.contains(""Emulator"")
                || Build.SERIAL.equalsIgnoreCase(""unknown"")
                || Build.SERIAL.equalsIgnoreCase(""android"")
                || Build.MODEL.contains(""Android SDK built for x86"")
                || Build.MANUFACTURER.contains(""Genymotion"")
                || (Build.BRAND.startsWith(""generic"") && Build.DEVICE.startsWith(""generic""))
                || ""google_sdk"".equals(Build.PRODUCT);
        if (checkProperty) return true;

        boolean checkDebuggerConnected = Debug.isDebuggerConnected();
        if (checkDebuggerConnected) return true;

        String operatorName = """";
        TelephonyManager tm = (TelephonyManager) Utils.getApp().getSystemService(Context.TELEPHONY_SERVICE);
        if (tm != null) {
            String name = tm.getNetworkOperatorName();
            if (name != null) {
                operatorName = name;
            }
        }
        boolean checkOperatorName = operatorName.toLowerCase().equals(""android"");
        if (checkOperatorName) return true;

        String url = ""tel:"" + ""123456"";
        Intent intent = new Intent();
        intent.setData(Uri.parse(url));
        intent.setAction(Intent.ACTION_DIAL);
        boolean checkDial = intent.resolveActivity(Utils.getApp().getPackageManager()) != null;
        if (checkDial) return true;

        return false;
    }",False,False,"The function checks if the device is an emulator by examining various properties such as the build fingerprint, model, serial, manufacturer, brand, and device. It also checks if a debugger is connected, the network operator name is ""android"", and if the device can handle the dial action.",True,"The code is a method that checks whether the device is an emulator by examining various properties such as the build fingerprint, model, serial number, manufacturer, and network operator name. It also checks if a debugger is connected and if the device can perform a dial action. The method returns true if any of these checks indicate that the device is an emulator, otherwise it returns false."
