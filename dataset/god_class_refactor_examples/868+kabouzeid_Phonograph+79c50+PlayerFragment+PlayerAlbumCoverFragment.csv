index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,TAG,tag ,Field,,,,,70,1,25,,public static final String TAG = PlayerFragment.class.getSimpleName();,False,False,,False,
2,FAB_CIRCULAR_REVEAL_ANIMATION_TIME,fab circular reveal animation time ,Field,,,,,67,1,26,,private static final int FAB_CIRCULAR_REVEAL_ANIMATION_TIME = 1000;,True,True,,False,
3,playPauseFab,play pause fab ,Field,,,,,72,2,0,,"@Bind(R.id.player_play_pause_fab)
    FloatingActionButton playPauseFab;",True,True,,False,
4,songTitle,song title ,Field,,,,,48,2,0,,"@Bind(R.id.player_title)
    TextView songTitle;",True,True,,False,
5,songText,song text ,Field,,,,,46,2,0,,"@Bind(R.id.player_text)
    TextView songText;",True,True,,False,
6,footer,footer ,Field,,,,,50,2,0,,"@Bind(R.id.player_footer)
    LinearLayout footer;",True,True,,False,
7,playbackControllerCard,playback controller card ,Field,,,,,80,2,0,,"@Bind(R.id.player_playback_controller_card)
    CardView playbackControllerCard;",True,True,,False,
8,prevButton,prev button ,Field,,,,,58,2,0,,"@Bind(R.id.player_prev_button)
    ImageButton prevButton;",True,True,,False,
9,nextButton,next button ,Field,,,,,58,2,0,,"@Bind(R.id.player_next_button)
    ImageButton nextButton;",True,True,,False,
10,repeatButton,repeat button ,Field,,,,,62,2,0,,"@Bind(R.id.player_repeat_button)
    ImageButton repeatButton;",True,True,,False,
11,shuffleButton,shuffle button ,Field,,,,,64,2,0,,"@Bind(R.id.player_shuffle_button)
    ImageButton shuffleButton;",True,True,,False,
12,mediaControllerContainer,media controller container ,Field,,,,,90,2,0,,"@Bind(R.id.player_media_controller_container)
    RelativeLayout mediaControllerContainer;",True,True,,False,
13,mediaControllerContainerBackground,media controller container background ,Field,,,,,101,2,0,,"@Bind(R.id.player_media_controller_container_background)
    View mediaControllerContainerBackground;",True,True,,False,
14,albumArt,album art ,Field,,,,,61,2,0,,"@Bind(R.id.player_image)
    SquareIfPlaceImageView albumArt;",True,True,,False,
15,statusbar,statusbar ,Field,,,,,49,2,0,,"@Bind(R.id.player_status_bar)
    View statusbar;",False,False,,False,
16,toolbar,toolbar ,Field,,,,,47,2,0,,"@Bind(R.id.player_toolbar)
    Toolbar toolbar;",False,False,,False,
17,favoriteIcon,favorite icon ,Field,,,,,60,2,0,,"@Bind(R.id.player_favorite_icon)
    ImageView favoriteIcon;",True,True,,False,
18,albumArtFrame,album art frame ,Field,,,,,65,2,0,,"@Bind(R.id.player_album_art_frame)
    FrameLayout albumArtFrame;",True,True,,False,
19,songCurrentProgress,song current progress ,Field,,,,,29,1,0,,TextView songCurrentProgress;,False,True,,False,
20,songTotalTime,song total time ,Field,,,,,23,1,0,,TextView songTotalTime;,False,True,,False,
21,progressSlider,progress slider ,Field,,,,,23,1,0,,SeekBar progressSlider;,False,True,,False,
22,lastFooterColor,last footer color ,Field,,,,,28,1,2,,private int lastFooterColor;,True,True,,False,
23,lastPlaybackControlsColor,last playback controls color ,Field,,,,,38,1,2,,private int lastPlaybackControlsColor;,False,False,,False,
24,lastTitleTextColor,last title text color ,Field,,,,,31,1,2,,private int lastTitleTextColor;,True,True,,False,
25,lastCaptionTextColor,last caption text color ,Field,,,,,33,1,2,,private int lastCaptionTextColor;,True,True,,False,
26,progressViewUpdateHelper,progress view update helper ,Field,,,,,63,1,2,,private MusicProgressViewUpdateHelper progressViewUpdateHelper;,False,True,,False,
27,opaqueStatusBar,opaque status bar ,Field,,,,,32,1,2,,private boolean opaqueStatusBar;,False,True,,False,
28,opaqueToolBar,opaque tool bar ,Field,,,,,30,1,2,,private boolean opaqueToolBar;,False,True,,False,
29,forceSquareAlbumArt,force square album art ,Field,,,,,36,1,2,,private boolean forceSquareAlbumArt;,True,True,,False,
30,largerTitleBox,larger title box ,Field,,,,,31,1,2,,private boolean largerTitleBox;,False,True,,False,
31,alternativeProgressSlider,alternative progress slider ,Field,,,,,42,1,2,,private boolean alternativeProgressSlider;,False,True,,False,
32,showPlaybackControllerCard,show playback controller card ,Field,,,,,43,1,2,,private boolean showPlaybackControllerCard;,False,True,,False,
33,colorPlaybackControls,color playback controls ,Field,,,,,38,1,2,,private boolean colorPlaybackControls;,False,True,,False,
34,song,song ,Field,,,,,18,1,2,,private Song song;,False,False,,False,
35,playerFabPlayPauseDrawable,player fab play pause drawable ,Field,,,,,53,1,2,,private PlayPauseDrawable playerFabPlayPauseDrawable;,True,True,,False,
36,colorTransitionAnimator,color transition animator ,Field,,,,,44,1,2,,private AnimatorSet colorTransitionAnimator;,False,True,,False,
37,activity,activity ,Field,,,,,41,1,2,,private AbsMusicServiceActivity activity;,False,False,,False,
38,callbacks,callbacks ,Field,,,,,28,1,2,,private Callbacks callbacks;,False,False,,False,
39,onAttach(Context),on attach context ,Method,,,android.support.v4.app.Fragment+onAttach(Activity) java.lang.RuntimeException+RuntimeException(String) java.lang.Class+getSimpleName() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getSimpleName() java.lang.Class+getSimpleName() java.lang.Class+getSimpleName() java.lang.Class+getSimpleName() java.lang.Class+getSimpleName(),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+callbacks,467,10,1,,"@Override
    public void onAttach(Context context) {
        super.onAttach(context);
        try {
            activity = (AbsMusicServiceActivity) context;
            callbacks = (Callbacks) context;
        } catch (ClassCastException e) {
            throw new RuntimeException(context.getClass().getSimpleName() + "" must be an instance of "" + AbsMusicServiceActivity.class.getSimpleName() + "" and implement "" + Callbacks.class.getSimpleName());
        }
    }",False,False,"This method is used to attach the current fragment to its parent activity. It checks if the parent activity is an instance of a specific class and implements a specific interface, and throws an exception if it doesn't.",False,"This code is an implementation of the `onAttach` method in an Android class. It assigns the `context` parameter to the `activity` and `callbacks` variables, but throws a `RuntimeException` if the `context` is not an instance of `AbsMusicServiceActivity` and does not implement the `Callbacks` interface."
40,onDetach(),on detach ,Method,,,android.support.v4.app.Fragment+onDetach(),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+callbacks,121,6,1,,"@Override
    public void onDetach() {
        super.onDetach();
        activity = null;
        callbacks = null;
    }",False,False,"This method is used to detach the current fragment from its parent activity. It sets the activity and callbacks variables to null, indicating that the fragment is no longer associated with any activity.",False,"The code snippet is an implementation of the `onDetach()` method, which is typically used in Android fragments. It is called when the fragment is being detached from its hosting activity. In this case, the method sets the `activity` and `callbacks` variables to null, potentially releasing any references to them."
41,onCreate(Bundle),on create saved instance state ,Method,,,android.support.v4.app.Fragment+onCreate(Bundle) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+initAppearanceVarsFromSharedPrefs() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+initAppearanceVarsFromSharedPrefs() com.kabouzeid.gramophone.helper.MusicProgressViewUpdateHelper+MusicProgressViewUpdateHelper(Callback),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+progressViewUpdateHelper,234,6,1,,"@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        initAppearanceVarsFromSharedPrefs();
        progressViewUpdateHelper = new MusicProgressViewUpdateHelper(this);
    }",False,False,This method is used to initialize the appearance variables from shared preferences and create a new instance of the MusicProgressViewUpdateHelper class.,False,"The code is part of an Android activity's `onCreate` method. It initializes appearance variables from shared preferences and creates an instance of `MusicProgressViewUpdateHelper` class, passing the activity as a parameter."
42,"onCreateView(LayoutInflater,ViewGroup,Bundle)",on create view inflater container saved instance state ,Method,,,"android.view.LayoutInflater+inflate(XmlPullParser,ViewGroup,boolean) android.view.LayoutInflater+inflate(XmlPullParser,ViewGroup,boolean)",,225,5,1,,"@Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_player, container, false);
    }",False,False,"This method is used to create and return the view for a fragment. It inflates the layout file ""fragment_player"" using the provided inflater, and attaches it to the specified container.",False,"The given code is an implementation of the `onCreateView` method, which is used in Android development to create and return the layout for a fragment. In this case, it inflates the layout resource `R.layout.fragment_player` using the provided `LayoutInflater`, and attaches it to the specified `ViewGroup` container."
43,"onViewCreated(View,Bundle)",on view created view saved instance state ,Method,,,"android.support.v4.app.Fragment+onViewCreated(View,Bundle) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+resetShowControlsAnimation() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+resetShowControlsAnimation() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlayPauseFab() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlayPauseFab() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+adjustTitleBoxSize() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+adjustTitleBoxSize() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlaybackControllerCard() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlaybackControllerCard() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpMusicControllers() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpMusicControllers() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpAlbumArtViews() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpAlbumArtViews() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlayerToolbar() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlayerToolbar() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlayerStatusBarElevation() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlayerStatusBarElevation() com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.ui.activities.base.AbsMusicServiceActivity+addMusicServiceEventListener(MusicServiceEventListener) com.kabouzeid.gramophone.ui.activities.base.AbsMusicServiceActivity+addMusicServiceEventListener(MusicServiceEventListener)",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity,601,17,1,,"@Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        ButterKnife.bind(this, view);

        resetShowControlsAnimation();
        setUpPlayPauseFab();
        adjustTitleBoxSize();
        setUpPlaybackControllerCard();
        setUpMusicControllers();
        setUpAlbumArtViews();
        setUpPlayerToolbar();
        setUpPlayerStatusBarElevation();

        PreferenceUtil.getInstance(getContext()).registerOnSharedPreferenceChangedListener(this);
        activity.addMusicServiceEventListener(this);
    }",False,False,"The function of the method is to set up various components and listeners for a music player interface, including binding views, initializing animations, setting up playback controls, album art, toolbar, and status bar, and registering preference and event listeners.",False,This code is the implementation of the `onViewCreated` method in an Android fragment. It initializes various UI elements and sets up listeners and event handlers for a music player interface.
44,onDestroyView(),on destroy view ,Method,,,android.support.v4.app.Fragment+onDestroyView() com.kabouzeid.gramophone.ui.activities.base.AbsMusicServiceActivity+removeMusicServiceEventListener(MusicServiceEventListener) com.kabouzeid.gramophone.ui.activities.base.AbsMusicServiceActivity+removeMusicServiceEventListener(MusicServiceEventListener) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity,266,7,1,,"@Override
    public void onDestroyView() {
        super.onDestroyView();
        activity.removeMusicServiceEventListener(this);
        PreferenceUtil.getInstance(activity).unregisterOnSharedPreferenceChangedListener(this);
        ButterKnife.unbind(this);
    }",False,False,"This method is called when the view associated with the fragment is being destroyed. It performs various cleanup tasks such as removing event listeners, unregistering preference change listeners, and unbinding views.",False,"The code is an implementation of the `onDestroyView()` method in an Android fragment. It performs cleanup tasks by removing a music service event listener, unregistering a shared preference change listener, and unbinding ButterKnife views."
45,onResume(),on resume ,Method,,,android.support.v4.app.Fragment+onResume() com.kabouzeid.gramophone.helper.MusicProgressViewUpdateHelper+start() com.kabouzeid.gramophone.helper.MusicProgressViewUpdateHelper+start(),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+progressViewUpdateHelper,112,5,1,,"@Override
    public void onResume() {
        super.onResume();
        progressViewUpdateHelper.start();
    }",False,False,This method is called when the activity is resumed. It calls the parent's onResume method and then starts the progress view update helper.,False,"The code snippet overrides the onResume() method in an Android activity or fragment. It calls the super.onResume() method to ensure the parent implementation is executed, and then starts a progress view update helper."
46,onPause(),on pause ,Method,,,android.support.v4.app.Fragment+onPause() com.kabouzeid.gramophone.helper.MusicProgressViewUpdateHelper+stop() com.kabouzeid.gramophone.helper.MusicProgressViewUpdateHelper+stop(),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+progressViewUpdateHelper,109,5,1,,"@Override
    public void onPause() {
        super.onPause();
        progressViewUpdateHelper.stop();
    }",False,False,This method is used to override the onPause() method from the parent class. It calls the onPause() method of the parent class and then stops the progressViewUpdateHelper.,False,"The code is overriding the onPause() method in an Android activity. It calls the super.onPause() method to perform the default onPause() behavior, and then it stops a progress view update helper."
47,onPlayingMetaChanged(),on playing meta changed ,Method,,,com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateCurrentSong() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateCurrentSong(),,85,4,1,,"@Override
    public void onPlayingMetaChanged() {
        updateCurrentSong();
    }",False,False,This method is an override of the onPlayingMetaChanged() function. It serves to update the current song being played.,False,"The method ""onPlayingMetaChanged()"" is an overridden method that is called when the metadata of the currently playing song changes. It is responsible for updating the information about the current song."
48,onRepeatModeChanged(),on repeat mode changed ,Method,,,com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateRepeatState() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateRepeatState(),,84,4,1,,"@Override
    public void onRepeatModeChanged() {
        updateRepeatState();
    }",True,True,"This method is an overridden function that is called when the repeat mode is changed. It calls the ""updateRepeatState()"" method to update the repeat state.",False,"The code snippet is an implementation of the `onRepeatModeChanged()` method, which is likely part of a larger class or interface. It calls the `updateRepeatState()` method, which is responsible for updating the repeat state of something. The purpose of this code is to handle the event when the repeat mode changes and trigger the necessary actions."
49,onShuffleModeChanged(),on shuffle mode changed ,Method,,,com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateShuffleState() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateShuffleState(),,86,4,1,,"@Override
    public void onShuffleModeChanged() {
        updateShuffleState();
    }",True,False,"This method is used to handle the event when the shuffle mode is changed. It calls the ""updateShuffleState()"" method to update the shuffle state accordingly.",False,The code snippet is an implementation of the `onShuffleModeChanged()` method. It overrides a method and calls the `updateShuffleState()` function. This method is likely used to handle changes in the shuffle mode and update the state accordingly.
50,onMediaStoreChanged(),on media store changed ,Method,,,,,56,4,1,,"@Override
    public void onMediaStoreChanged() {

    }",False,False,This method serves as an override for the onMediaStoreChanged function. It does not return any value and does not take any parameters.,False,"The code snippet represents an overridden method called ""onMediaStoreChanged()"" which does not contain any implementation. It is likely a callback method that is triggered when changes occur in the media store, allowing for custom actions to be performed in response to those changes."
51,"onSharedPreferenceChanged(SharedPreferences,String)",on shared preference changed shared preferences key ,Method,,,com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlayerStatusBarElevation() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlayerStatusBarElevation() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+animateColorChange(int) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+animateColorChange(int) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alignAlbumArtToToolbar() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alignAlbumArtToToolbar() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alignAlbumArtToStatusBar() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alignAlbumArtToStatusBar() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alignAlbumArtToTop() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alignAlbumArtToTop() com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.views.SquareIfPlaceImageView+forceSquare(boolean) com.kabouzeid.gramophone.views.SquareIfPlaceImageView+forceSquare(boolean) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+adjustTitleBoxSize() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+adjustTitleBoxSize() com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpProgressSlider() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpProgressSlider() com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlaybackControllerCard() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlaybackControllerCard() com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateRepeatState() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateRepeatState() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateShuffleState() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateShuffleState() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpProgressSliderTint() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpProgressSliderTint() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlayerPlayPauseFabTint() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlayerPlayPauseFabTint(),com.kabouzeid.gramophone.util.PreferenceUtil+OPAQUE_STATUSBAR_NOW_PLAYING com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueStatusBar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.util.PreferenceUtil+OPAQUE_TOOLBAR_NOW_PLAYING com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueToolBar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueStatusBar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastFooterColor com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueStatusBar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueToolBar com.kabouzeid.gramophone.util.PreferenceUtil+FORCE_SQUARE_ALBUM_ART com.kabouzeid.gramophone.ui.fragments.PlayerFragment+forceSquareAlbumArt com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+albumArt com.kabouzeid.gramophone.ui.fragments.PlayerFragment+forceSquareAlbumArt com.kabouzeid.gramophone.util.PreferenceUtil+LARGER_TITLE_BOX_NOW_PLAYING com.kabouzeid.gramophone.ui.fragments.PlayerFragment+largerTitleBox com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.util.PreferenceUtil+ALTERNATIVE_PROGRESS_SLIDER_NOW_PLAYING com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alternativeProgressSlider com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.util.PreferenceUtil+PLAYBACK_CONTROLLER_CARD_NOW_PLAYING com.kabouzeid.gramophone.ui.fragments.PlayerFragment+showPlaybackControllerCard com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.util.PreferenceUtil+COLOR_PLAYBACK_CONTROLS_NOW_PLAYING com.kabouzeid.gramophone.ui.fragments.PlayerFragment+colorPlaybackControls com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity,2298,45,1,,"@Override
    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
        switch (key) {
            case PreferenceUtil.OPAQUE_STATUSBAR_NOW_PLAYING:
                opaqueStatusBar = PreferenceUtil.getInstance(activity).opaqueStatusbarNowPlaying();
                // do not break here
            case PreferenceUtil.OPAQUE_TOOLBAR_NOW_PLAYING:
                opaqueToolBar = opaqueStatusBar && PreferenceUtil.getInstance(activity).opaqueToolbarNowPlaying();
                setUpPlayerStatusBarElevation();
                animateColorChange(lastFooterColor);
                if (opaqueStatusBar) {
                    if (opaqueToolBar) {
                        alignAlbumArtToToolbar();
                    } else {
                        alignAlbumArtToStatusBar();
                    }
                } else {
                    alignAlbumArtToTop();
                }
                break;
            case PreferenceUtil.FORCE_SQUARE_ALBUM_ART:
                forceSquareAlbumArt = PreferenceUtil.getInstance(activity).forceAlbumArtSquared();
                albumArt.forceSquare(forceSquareAlbumArt);
                break;
            case PreferenceUtil.LARGER_TITLE_BOX_NOW_PLAYING:
                largerTitleBox = PreferenceUtil.getInstance(activity).largerTitleBoxNowPlaying();
                adjustTitleBoxSize();
                break;
            case PreferenceUtil.ALTERNATIVE_PROGRESS_SLIDER_NOW_PLAYING:
                alternativeProgressSlider = PreferenceUtil.getInstance(activity).alternativeProgressSliderNowPlaying();
                setUpProgressSlider();
                break;
            case PreferenceUtil.PLAYBACK_CONTROLLER_CARD_NOW_PLAYING:
                showPlaybackControllerCard = PreferenceUtil.getInstance(activity).playbackControllerCardNowPlaying();
                setUpPlaybackControllerCard();
                break;
            case PreferenceUtil.COLOR_PLAYBACK_CONTROLS_NOW_PLAYING:
                colorPlaybackControls = PreferenceUtil.getInstance(activity).colorPlaybackControlsNowPlaying();
                updateRepeatState();
                updateShuffleState();
                setUpProgressSliderTint();
                setUpPlayerPlayPauseFabTint();
                break;
        }
    }",False,False,This method is an event listener that is triggered when a shared preference is changed. It performs different actions based on the key of the preference that was changed.,False,"This code is an implementation of the `onSharedPreferenceChanged` method, which is called when a shared preference is changed. It handles different preference changes and performs corresponding actions, such as updating UI elements, adjusting sizes, and setting up color schemes based on the changed preference key."
52,setUpPlayPauseFab(),set up play pause fab ,Method,"onViewCreated(View,Bundle)",,com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updatePlayPauseDrawableState(boolean) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updatePlayPauseDrawableState(boolean) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlayerPlayPauseFabTint() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPlayerPlayPauseFabTint() com.kabouzeid.gramophone.helper.PlayPauseButtonOnClickHandler+PlayPauseButtonOnClickHandler() +() +run(),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playPauseFab com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playerFabPlayPauseDrawable com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playPauseFab com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playPauseFab,531,13,2,,"private void setUpPlayPauseFab() {
        updatePlayPauseDrawableState(false);
        playPauseFab.setImageDrawable(playerFabPlayPauseDrawable);
        setUpPlayerPlayPauseFabTint();
        playPauseFab.setOnClickListener(new PlayPauseButtonOnClickHandler());
        playPauseFab.post(new Runnable() {
            @Override
            public void run() {
                playPauseFab.setPivotX(playPauseFab.getWidth() / 2);
                playPauseFab.setPivotY(playPauseFab.getHeight() / 2);
            }
        });
    }",True,True,"The function of the method is to set up the play/pause button by updating its drawable state, setting its image drawable, setting up its tint, setting a click listener, and adjusting its pivot point.",True,"The `setUpPlayPauseFab()` method is responsible for setting up the play/pause button in a user interface. It initializes the button's initial state, sets its image drawable, sets up its tint, adds a click listener, and adjusts its pivot point for animation purposes."
53,setUpPlayerPlayPauseFabTint(),set up player play pause fab tint ,Method,"onSharedPreferenceChanged(SharedPreferences,String) setUpPlayPauseFab()",,com.kabouzeid.gramophone.ui.activities.base.AbsThemeActivity+getThemeColorAccent() com.kabouzeid.gramophone.ui.activities.base.AbsThemeActivity+getThemeColorAccent(),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+colorPlaybackControls com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastPlaybackControlsColor com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.misc.FloatingActionButtonProperties+COLOR com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playPauseFab,231,4,2,,"private void setUpPlayerPlayPauseFabTint() {
        int fabColor = colorPlaybackControls ? lastPlaybackControlsColor : activity.getThemeColorAccent();
        FloatingActionButtonProperties.COLOR.set(playPauseFab, fabColor);
    }",True,True,This method sets up the color of a FloatingActionButton used for play/pause controls. It determines the color based on a boolean flag and either uses the last color used or the accent color of the activity's theme.,False,"The method `setUpPlayerPlayPauseFabTint()` is a private method that sets the color of a FloatingActionButton based on a condition. It retrieves the color from either a stored value or the theme color accent of the activity, and then applies the color to the FloatingActionButton."
54,updatePlayPauseDrawableState(boolean),update play pause drawable state animate ,Method,setUpPlayPauseFab() onPlayStateChanged(),,com.kabouzeid.gramophone.views.PlayPauseDrawable+PlayPauseDrawable(Context) com.kabouzeid.gramophone.helper.MusicPlayerRemote+isPlaying() com.kabouzeid.gramophone.helper.MusicPlayerRemote+isPlaying() com.kabouzeid.gramophone.views.PlayPauseDrawable+setPause(boolean) com.kabouzeid.gramophone.views.PlayPauseDrawable+setPause(boolean) com.kabouzeid.gramophone.views.PlayPauseDrawable+setPlay(boolean) com.kabouzeid.gramophone.views.PlayPauseDrawable+setPlay(boolean),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playerFabPlayPauseDrawable com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playerFabPlayPauseDrawable com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playerFabPlayPauseDrawable com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playerFabPlayPauseDrawable,389,10,4,,"protected void updatePlayPauseDrawableState(boolean animate) {
        if (playerFabPlayPauseDrawable == null) {
            playerFabPlayPauseDrawable = new PlayPauseDrawable(activity);
        }
        if (MusicPlayerRemote.isPlaying()) {
            playerFabPlayPauseDrawable.setPause(animate);
        } else {
            playerFabPlayPauseDrawable.setPlay(animate);
        }
    }",True,True,This method updates the state of a play/pause drawable based on whether the music player is currently playing or not. It also allows for animation of the state change.,False,"The code defines a method called ""updatePlayPauseDrawableState"" that updates the state of a play/pause drawable based on the current playback status. If the playback is currently playing, the method sets the drawable to the pause state, otherwise it sets it to the play state. The method also has an optional parameter to animate the state change."
55,onPlayStateChanged(),on play state changed ,Method,,,com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updatePlayPauseDrawableState(boolean) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updatePlayPauseDrawableState(boolean),,98,4,1,,"@Override
    public void onPlayStateChanged() {
        updatePlayPauseDrawableState(true);
    }",True,True,This method is an overridden function that is called when the play state changes. It updates the state of the play/pause drawable to indicate that the media is currently playing.,False,"The given code snippet is an implementation of the `onPlayStateChanged` method. It calls the `updatePlayPauseDrawableState` function with a boolean parameter set to `true`, indicating that the play/pause drawable state should be updated."
56,initAppearanceVarsFromSharedPrefs(),init appearance vars from shared prefs ,Method,onCreate(Bundle),,com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueStatusBar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueToolBar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueStatusBar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+forceSquareAlbumArt com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+largerTitleBox com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alternativeProgressSlider com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+showPlaybackControllerCard com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+colorPlaybackControls com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity,762,9,2,,"private void initAppearanceVarsFromSharedPrefs() {
        opaqueStatusBar = PreferenceUtil.getInstance(activity).opaqueStatusbarNowPlaying();
        opaqueToolBar = opaqueStatusBar && PreferenceUtil.getInstance(activity).opaqueToolbarNowPlaying();
        forceSquareAlbumArt = PreferenceUtil.getInstance(activity).forceAlbumArtSquared();
        largerTitleBox = PreferenceUtil.getInstance(activity).largerTitleBoxNowPlaying();
        alternativeProgressSlider = PreferenceUtil.getInstance(activity).alternativeProgressSliderNowPlaying();
        showPlaybackControllerCard = PreferenceUtil.getInstance(activity).playbackControllerCardNowPlaying();
        colorPlaybackControls = PreferenceUtil.getInstance(activity).colorPlaybackControlsNowPlaying();
    }",False,False,"This method initializes appearance variables by retrieving values from shared preferences. It sets the values of opaqueStatusBar, opaqueToolBar, forceSquareAlbumArt, largerTitleBox, alternativeProgressSlider, showPlaybackControllerCard, and colorPlaybackControls.",False,The method `initAppearanceVarsFromSharedPrefs()` initializes several boolean variables by retrieving corresponding values from shared preferences using the `PreferenceUtil` class. These variables are used to determine the appearance settings for a now playing screen in an application.
57,initProgressSliderDependentViews(),init progress slider dependent views ,Method,setUpProgressSlider(),,android.support.v4.app.Fragment+getView() android.support.v4.app.Fragment+getView() android.view.View+findViewById(int) android.support.v4.app.Fragment+getView() android.support.v4.app.Fragment+getView() android.view.View+findViewById(int) android.view.View+findViewById(int) android.support.v4.app.Fragment+getView() android.support.v4.app.Fragment+getView() android.view.View+findViewById(int) android.view.View+findViewById(int) android.support.v4.app.Fragment+getView() android.support.v4.app.Fragment+getView() android.view.View+findViewById(int) android.view.View+findViewById(int) android.support.v4.app.Fragment+getView() android.support.v4.app.Fragment+getView() android.view.View+findViewById(int) android.view.View+findViewById(int) android.support.v4.app.Fragment+getView() android.support.v4.app.Fragment+getView() android.view.View+findViewById(int) android.view.View+findViewById(int) android.support.v4.app.Fragment+getView() android.support.v4.app.Fragment+getView() android.view.View+findViewById(int) android.view.View+findViewById(int) android.support.v4.app.Fragment+getView() android.support.v4.app.Fragment+getView() android.view.View+findViewById(int) android.view.View+findViewById(int) android.support.v4.app.Fragment+getView() android.support.v4.app.Fragment+getView() android.view.View+findViewById(int) android.view.View+findViewById(int) android.support.v4.app.Fragment+getView() android.support.v4.app.Fragment+getView() android.view.View+findViewById(int) android.view.View+findViewById(int) android.support.v4.app.Fragment+getView() android.support.v4.app.Fragment+getView() android.view.View+findViewById(int) android.view.View+findViewById(int) android.support.v4.app.Fragment+getView() android.support.v4.app.Fragment+getView() android.view.View+findViewById(int) android.view.View+findViewById(int) android.support.v4.app.Fragment+getView() android.support.v4.app.Fragment+getView() android.view.View+findViewById(int),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alternativeProgressSlider android.view.View+GONE android.view.View+GONE android.view.View+VISIBLE com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songCurrentProgress com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songTotalTime com.kabouzeid.gramophone.ui.fragments.PlayerFragment+progressSlider android.view.View+VISIBLE android.view.View+VISIBLE android.view.View+GONE com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songCurrentProgress com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songTotalTime com.kabouzeid.gramophone.ui.fragments.PlayerFragment+progressSlider,1417,20,2,,"private void initProgressSliderDependentViews() {
        if (getView() == null) return;
        if (alternativeProgressSlider) {
            getView().findViewById(R.id.player_default_progress_container).setVisibility(View.GONE);
            getView().findViewById(R.id.player_default_progress_slider).setVisibility(View.GONE);
            getView().findViewById(R.id.player_alternative_progress_container).setVisibility(View.VISIBLE);

            songCurrentProgress = (TextView) getView().findViewById(R.id.player_alternative_song_current_progress);
            songTotalTime = (TextView) getView().findViewById(R.id.player_alternative_song_total_time);
            progressSlider = (SeekBar) getView().findViewById(R.id.player_alternative_progress_slider);
        } else {
            getView().findViewById(R.id.player_default_progress_container).setVisibility(View.VISIBLE);
            getView().findViewById(R.id.player_default_progress_slider).setVisibility(View.VISIBLE);
            getView().findViewById(R.id.player_alternative_progress_container).setVisibility(View.GONE);

            songCurrentProgress = (TextView) getView().findViewById(R.id.player_default_song_current_progress);
            songTotalTime = (TextView) getView().findViewById(R.id.player_default_song_total_time);
            progressSlider = (SeekBar) getView().findViewById(R.id.player_default_progress_slider);
        }
    }",False,False,"This method initializes the views that are dependent on the progress slider. It sets the visibility of certain views based on a boolean variable, and assigns the appropriate views to variables for later use.",False,"The `initProgressSliderDependentViews` method initializes the views related to the progress slider based on a boolean flag. If the flag is true, it hides the default progress container and slider views and shows the alternative progress container view, and vice versa. It also assigns the appropriate views to variables for displaying the current song progress and total time, as well as the progress slider."
58,moveProgressSliderIntoPlace(),move progress slider into place ,Method,setUpProgressSlider(),,"android.view.View+getLayoutParams() android.view.View+getLayoutParams() android.view.View+measure(int,int) android.view.View+measure(int,int) android.content.res.Resources+getDimensionPixelSize(int) android.support.v4.app.Fragment+getResources() android.support.v4.app.Fragment+getResources() android.content.res.Resources+getDimensionPixelSize(int) android.view.ViewGroup.MarginLayoutParams+setMargins(int,int,int,int) android.view.ViewGroup.MarginLayoutParams+setMargins(int,int,int,int) android.view.View+getMeasuredHeight() android.view.View+getMeasuredHeight() android.view.View+setLayoutParams(LayoutParams) android.view.View+setLayoutParams(LayoutParams)",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alternativeProgressSlider com.kabouzeid.gramophone.ui.fragments.PlayerFragment+progressSlider com.kabouzeid.gramophone.ui.fragments.PlayerFragment+progressSlider android.view.View.MeasureSpec+UNSPECIFIED android.view.View.MeasureSpec+UNSPECIFIED com.kabouzeid.gramophone.ui.fragments.PlayerFragment+progressSlider com.kabouzeid.gramophone.ui.fragments.PlayerFragment+progressSlider,597,9,2,,"private void moveProgressSliderIntoPlace() {
        if (!alternativeProgressSlider) {
            RelativeLayout.LayoutParams lp = (RelativeLayout.LayoutParams) progressSlider.getLayoutParams();
            progressSlider.measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED);
            final int seekBarMarginLeftRight = getResources().getDimensionPixelSize(R.dimen.seek_bar_margin_left_right);
            lp.setMargins(seekBarMarginLeftRight, 0, seekBarMarginLeftRight, -(progressSlider.getMeasuredHeight() / 2));
            progressSlider.setLayoutParams(lp);
        }
    }",False,False,This method moves the progress slider into place by adjusting its layout parameters and margins.,False,"The `moveProgressSliderIntoPlace()` method is used to adjust the position of a progress slider in a RelativeLayout. It checks if an alternative progress slider is not being used, then it calculates the margins and height of the slider and sets the appropriate layout parameters to position it correctly."
59,adjustTitleBoxSize(),adjust title box size ,Method,"onViewCreated(View,Bundle) onSharedPreferenceChanged(SharedPreferences,String)",,"android.content.res.Resources+getDimensionPixelSize(int) android.support.v4.app.Fragment+getResources() android.support.v4.app.Fragment+getResources() android.content.res.Resources+getDimensionPixelSize(int) android.content.res.Resources+getDimensionPixelSize(int) android.support.v4.app.Fragment+getResources() android.support.v4.app.Fragment+getResources() android.content.res.Resources+getDimensionPixelSize(int) android.view.ViewGroup+setPadding(int,int,int,int) android.view.ViewGroup+setPadding(int,int,int,int) android.view.View+getPaddingLeft() android.view.View+getPaddingLeft() android.view.View+getPaddingRight() android.view.View+getPaddingRight() android.widget.TextView+setPadding(int,int,int,int) android.widget.TextView+setPadding(int,int,int,int) android.view.View+getPaddingLeft() android.view.View+getPaddingLeft() android.view.View+getPaddingTop() android.view.View+getPaddingTop() android.view.View+getPaddingRight() android.view.View+getPaddingRight() android.content.res.Resources+getDimensionPixelSize(int) android.support.v4.app.Fragment+getResources() android.support.v4.app.Fragment+getResources() android.content.res.Resources+getDimensionPixelSize(int) android.content.res.Resources+getDimensionPixelSize(int) android.support.v4.app.Fragment+getResources() android.support.v4.app.Fragment+getResources() android.content.res.Resources+getDimensionPixelSize(int) android.widget.TextView+setPadding(int,int,int,int) android.widget.TextView+setPadding(int,int,int,int) android.view.View+getPaddingLeft() android.view.View+getPaddingLeft() android.content.res.Resources+getDimensionPixelSize(int) android.support.v4.app.Fragment+getResources() android.support.v4.app.Fragment+getResources() android.content.res.Resources+getDimensionPixelSize(int) android.content.res.Resources+getDimensionPixelSize(int) android.support.v4.app.Fragment+getResources() android.support.v4.app.Fragment+getResources() android.content.res.Resources+getDimensionPixelSize(int) android.view.View+getPaddingRight() android.view.View+getPaddingRight() android.view.View+getPaddingBottom() android.view.View+getPaddingBottom() android.widget.TextView+setTextSize(int,float) android.widget.TextView+setTextSize(int,float) android.content.res.Resources+getDimensionPixelSize(int) android.support.v4.app.Fragment+getResources() android.support.v4.app.Fragment+getResources() android.content.res.Resources+getDimensionPixelSize(int) android.content.res.Resources+getDimensionPixelSize(int) android.support.v4.app.Fragment+getResources() android.support.v4.app.Fragment+getResources() android.content.res.Resources+getDimensionPixelSize(int) android.widget.TextView+setTextSize(int,float) android.widget.TextView+setTextSize(int,float) android.content.res.Resources+getDimensionPixelSize(int) android.support.v4.app.Fragment+getResources() android.support.v4.app.Fragment+getResources() android.content.res.Resources+getDimensionPixelSize(int) android.content.res.Resources+getDimensionPixelSize(int) android.support.v4.app.Fragment+getResources() android.support.v4.app.Fragment+getResources() android.content.res.Resources+getDimensionPixelSize(int)",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+largerTitleBox com.kabouzeid.gramophone.ui.fragments.PlayerFragment+footer com.kabouzeid.gramophone.ui.fragments.PlayerFragment+footer com.kabouzeid.gramophone.ui.fragments.PlayerFragment+footer com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songTitle com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songTitle com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songTitle com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songTitle com.kabouzeid.gramophone.ui.fragments.PlayerFragment+largerTitleBox com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songText com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songText com.kabouzeid.gramophone.ui.fragments.PlayerFragment+largerTitleBox com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songText com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songText com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songTitle android.util.TypedValue+COMPLEX_UNIT_PX com.kabouzeid.gramophone.ui.fragments.PlayerFragment+largerTitleBox com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songText android.util.TypedValue+COMPLEX_UNIT_PX com.kabouzeid.gramophone.ui.fragments.PlayerFragment+largerTitleBox,1388,10,2,,"private void adjustTitleBoxSize() {
        int paddingTopBottom = largerTitleBox ? getResources().getDimensionPixelSize(R.dimen.title_box_padding_large) : getResources().getDimensionPixelSize(R.dimen.title_box_padding_small);
        footer.setPadding(footer.getPaddingLeft(), paddingTopBottom, footer.getPaddingRight(), paddingTopBottom);

        songTitle.setPadding(songTitle.getPaddingLeft(), songTitle.getPaddingTop(), songTitle.getPaddingRight(), largerTitleBox ? getResources().getDimensionPixelSize(R.dimen.title_box_text_spacing_large) : getResources().getDimensionPixelSize(R.dimen.title_box_text_spacing_small));
        songText.setPadding(songText.getPaddingLeft(), largerTitleBox ? getResources().getDimensionPixelSize(R.dimen.title_box_text_spacing_large) : getResources().getDimensionPixelSize(R.dimen.title_box_text_spacing_small), songText.getPaddingRight(), songText.getPaddingBottom());

        songTitle.setTextSize(TypedValue.COMPLEX_UNIT_PX, largerTitleBox ? getResources().getDimensionPixelSize(R.dimen.title_box_title_text_size_large) : getResources().getDimensionPixelSize(R.dimen.title_box_title_text_size_small));
        songText.setTextSize(TypedValue.COMPLEX_UNIT_PX, largerTitleBox ? getResources().getDimensionPixelSize(R.dimen.title_box_caption_text_size_large) : getResources().getDimensionPixelSize(R.dimen.title_box_caption_text_size_small));
    }",True,True,"The function of the method ""adjustTitleBoxSize"" is to adjust the size and padding of various elements in the UI based on a condition called ""largerTitleBox"".",False,"The `adjustTitleBoxSize()` method adjusts the padding and text size of the `footer`, `songTitle`, and `songText` views based on the value of the `largerTitleBox` variable. It uses dimension resources to determine the padding and text size values."
60,setUpPlaybackControllerCard(),set up playback controller card ,Method,"onViewCreated(View,Bundle) onSharedPreferenceChanged(SharedPreferences,String)",,android.view.View+setVisibility(int) android.view.View+setVisibility(int),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playbackControllerCard com.kabouzeid.gramophone.ui.fragments.PlayerFragment+showPlaybackControllerCard android.view.View+VISIBLE android.view.View+GONE com.kabouzeid.gramophone.ui.fragments.PlayerFragment+mediaControllerContainerBackground com.kabouzeid.gramophone.ui.fragments.PlayerFragment+showPlaybackControllerCard android.view.View+GONE android.view.View+VISIBLE,264,4,2,,"private void setUpPlaybackControllerCard() {
        playbackControllerCard.setVisibility(showPlaybackControllerCard ? View.VISIBLE : View.GONE);
        mediaControllerContainerBackground.setVisibility(showPlaybackControllerCard ? View.GONE : View.VISIBLE);
    }",True,True,This method sets up the visibility of the playback controller card and the media controller container background based on the value of the showPlaybackControllerCard variable.,False,"The method `setUpPlaybackControllerCard` is responsible for setting the visibility of two views (`playbackControllerCard` and `mediaControllerContainerBackground`) based on the value of the boolean variable `showPlaybackControllerCard`. If `showPlaybackControllerCard` is true, the `playbackControllerCard` view is set to visible and the `mediaControllerContainerBackground` view is set to gone, otherwise, it's the opposite."
61,setUpMusicControllers(),set up music controllers ,Method,"onViewCreated(View,Bundle)",,com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPrevNext() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpPrevNext() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpRepeatButton() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpRepeatButton() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpShuffleButton() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpShuffleButton() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpProgressSlider() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpProgressSlider(),,159,6,2,,"private void setUpMusicControllers() {
        setUpPrevNext();
        setUpRepeatButton();
        setUpShuffleButton();
        setUpProgressSlider();
    }",True,True,"The function of the method ""setUpMusicControllers"" is to set up the previous and next buttons, the repeat button, the shuffle button, and the progress slider for controlling music playback.",True,"The method `setUpMusicControllers()` is responsible for setting up various music control features such as previous/next buttons, repeat button, shuffle button, and progress slider. It is a private method that is likely called during the initialization or setup phase of a music controller class."
62,setUpProgressSliderTint(),set up progress slider tint ,Method,"onSharedPreferenceChanged(SharedPreferences,String) setUpProgressSlider()",,"com.kabouzeid.gramophone.util.ColorUtil+useDarkTextColorOnBackground(int) com.kabouzeid.gramophone.util.ColorUtil+useDarkTextColorOnBackground(int) com.kabouzeid.gramophone.util.ColorUtil+shiftColor(int,float) com.kabouzeid.gramophone.util.ColorUtil+shiftColor(int,float) com.kabouzeid.gramophone.util.ColorUtil+shiftColor(int,float) com.kabouzeid.gramophone.util.ColorUtil+shiftColor(int,float) com.kabouzeid.gramophone.ui.activities.base.AbsThemeActivity+getThemeColorAccent() com.kabouzeid.gramophone.ui.activities.base.AbsThemeActivity+getThemeColorAccent() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setSeekBarTint(SeekBar,int,int) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setSeekBarTint(SeekBar,int,int)",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alternativeProgressSlider com.kabouzeid.gramophone.ui.fragments.PlayerFragment+colorPlaybackControls com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastPlaybackControlsColor android.graphics.Color+TRANSPARENT com.kabouzeid.gramophone.ui.fragments.PlayerFragment+colorPlaybackControls com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastPlaybackControlsColor com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastPlaybackControlsColor com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastPlaybackControlsColor com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+progressSlider,979,24,2,,"private void setUpProgressSliderTint() {
        int thumbColor;
        int progressColor;
        if (alternativeProgressSlider) {
            if (colorPlaybackControls) {
                thumbColor = lastPlaybackControlsColor;
            } else {
                thumbColor = ThemeSingleton.get().positiveColor.getDefaultColor();
            }
            progressColor = Color.TRANSPARENT;
        } else {
            if (colorPlaybackControls) {
                if (ColorUtil.useDarkTextColorOnBackground(lastPlaybackControlsColor)) {
                    thumbColor = ColorUtil.shiftColor(lastPlaybackControlsColor, 1.2f);
                } else {
                    thumbColor = ColorUtil.shiftColor(lastPlaybackControlsColor, 0.8f);
                }
            } else {
                thumbColor = activity.getThemeColorAccent();
            }
            progressColor = thumbColor;
        }
        setSeekBarTint(progressSlider, thumbColor, progressColor);
    }",False,False,"The function of this method is to set up the tint color for a progress slider. The method determines the thumb color and progress color based on certain conditions, and then sets the tint using the determined colors.",False,The method `setUpProgressSliderTint()` sets the color of a progress slider based on certain conditions. It determines the colors for the thumb and progress based on whether an alternative progress slider is being used and whether playback controls are being colored. It then calls the `setSeekBarTint()` method to apply the colors to the progress slider.
63,"setSeekBarTint(SeekBar,int,int)",set seek bar tint seek bar thumb color progress color ,Method,setUpProgressSliderTint(),,"android.content.res.ColorStateList+valueOf(int) android.content.res.ColorStateList+valueOf(int) android.graphics.drawable.Drawable+setColorFilter(int,Mode) android.graphics.drawable.Drawable+mutate() android.widget.ProgressBar+getProgressDrawable() android.widget.ProgressBar+getProgressDrawable() android.graphics.drawable.Drawable+mutate() android.graphics.drawable.Drawable+setColorFilter(int,Mode)",android.graphics.PorterDuff.Mode+SRC_IN android.os.Build.VERSION+SDK_INT android.graphics.PorterDuff.Mode+SRC_IN,553,9,10,,"private static void setSeekBarTint(SeekBar seekBar, @ColorInt int thumbColor, @ColorInt int progressColor) {
        seekBar.getThumb().mutate().setColorFilter(thumbColor, PorterDuff.Mode.SRC_IN);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            // this will only tint the left part of the progress bar
            seekBar.setProgressTintList(ColorStateList.valueOf(progressColor));
        } else {
            seekBar.getProgressDrawable().mutate().setColorFilter(progressColor, PorterDuff.Mode.SRC_IN);
        }
    }",False,False,"This method sets the color of the thumb and progress bar of a SeekBar. If the device is running on Android Lollipop or higher, it tints only the left part of the progress bar. Otherwise, it tints the entire progress bar.",False,"This code defines a method called ""setSeekBarTint"" that takes a SeekBar, thumb color, and progress color as parameters. It sets the thumb color and progress color of the SeekBar by applying color filters and tint lists, depending on the Android version."
64,setUpProgressSlider(),set up progress slider ,Method,"onSharedPreferenceChanged(SharedPreferences,String) setUpMusicControllers()",,"com.kabouzeid.gramophone.ui.fragments.PlayerFragment+initProgressSliderDependentViews() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+initProgressSliderDependentViews() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+moveProgressSliderIntoPlace() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+moveProgressSliderIntoPlace() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpProgressSliderTint() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpProgressSliderTint() android.widget.SeekBar+setOnSeekBarChangeListener(OnSeekBarChangeListener) android.widget.SeekBar+setOnSeekBarChangeListener(OnSeekBarChangeListener) +() +onProgressChanged(SeekBar,int,boolean)",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+progressSlider,624,14,2,,"private void setUpProgressSlider() {
        initProgressSliderDependentViews();
        moveProgressSliderIntoPlace();
        setUpProgressSliderTint();
        progressSlider.setOnSeekBarChangeListener(new SimpleOnSeekbarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                if (fromUser) {
                    MusicPlayerRemote.seekTo(progress);
                    onUpdateProgressViews(MusicPlayerRemote.getSongProgressMillis(), MusicPlayerRemote.getSongDurationMillis());
                }
            }
        });
    }",False,False,"The function of this method is to set up a progress slider by initializing dependent views, moving the slider into place, setting up the slider tint, and adding a listener to handle changes in progress.",True,"The code sets up a progress slider by initializing dependent views, positioning the slider, and applying a tint. It also adds a listener to the slider that updates the song progress and duration when the user interacts with the slider."
65,setUpPrevNext(),set up prev next ,Method,setUpMusicControllers(),,"com.kabouzeid.gramophone.util.ColorUtil+resolveColor(Context,int) com.kabouzeid.gramophone.util.ColorUtil+resolveColor(Context,int) android.widget.ImageView+setImageDrawable(Drawable) android.widget.ImageView+setImageDrawable(Drawable) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) android.widget.ImageView+setImageDrawable(Drawable) android.widget.ImageView+setImageDrawable(Drawable) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) android.view.View+setOnClickListener(OnClickListener) android.view.View+setOnClickListener(OnClickListener) +() +onClick(View)",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity android.R.attr+textColorSecondary com.kabouzeid.gramophone.ui.fragments.PlayerFragment+nextButton com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+prevButton com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+nextButton,837,19,2,,"private void setUpPrevNext() {
        int themedDrawableColor = ColorUtil.resolveColor(activity, android.R.attr.textColorSecondary);
        nextButton.setImageDrawable(Util.getTintedDrawable(activity,
                R.drawable.ic_skip_next_white_36dp, themedDrawableColor));
        prevButton.setImageDrawable(Util.getTintedDrawable(activity,
                R.drawable.ic_skip_previous_white_36dp, themedDrawableColor));
        nextButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                MusicPlayerRemote.playNextSong();
            }
        });
        prevButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                MusicPlayerRemote.back();
            }
        });
    }",True,True,"The function of the method is to set up the previous and next buttons in an activity. It sets the image drawable for the buttons, sets the tint color, and adds click listeners to play the next song or go back to the previous song using the MusicPlayerRemote class.",False,"The code sets up the previous and next buttons in an activity by tinting their drawables with a themed color. It also assigns click listeners to the buttons, where the next button plays the next song and the previous button goes back to the previous song using the MusicPlayerRemote class."
66,setUpShuffleButton(),set up shuffle button ,Method,setUpMusicControllers(),,com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateShuffleState() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateShuffleState() android.view.View+setOnClickListener(OnClickListener) android.view.View+setOnClickListener(OnClickListener) +() +onClick(View),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+shuffleButton,286,9,2,,"private void setUpShuffleButton() {
        updateShuffleState();
        shuffleButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                MusicPlayerRemote.toggleShuffleMode();
            }
        });
    }",True,True,"The function of the method is to set up a shuffle button. It updates the shuffle state, and when the button is clicked, it toggles the shuffle mode of the music player.",False,"The code defines a private method called `setUpShuffleButton()` that sets up a click listener for a shuffle button. When the button is clicked, it toggles the shuffle mode of a music player."
67,updateShuffleState(),update shuffle state ,Method,"onShuffleModeChanged() onSharedPreferenceChanged(SharedPreferences,String) setUpShuffleButton()",,"com.kabouzeid.gramophone.helper.MusicPlayerRemote+getShuffleMode() com.kabouzeid.gramophone.helper.MusicPlayerRemote+getShuffleMode() android.widget.ImageView+setImageDrawable(Drawable) android.widget.ImageView+setImageDrawable(Drawable) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+getActivatedIconColor() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+getActivatedIconColor() android.widget.ImageView+setImageDrawable(Drawable) android.widget.ImageView+setImageDrawable(Drawable) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+getDeactivatedIconColor() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+getDeactivatedIconColor()",com.kabouzeid.gramophone.service.MusicService+SHUFFLE_MODE_SHUFFLE com.kabouzeid.gramophone.ui.fragments.PlayerFragment+shuffleButton com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+shuffleButton com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity,556,12,2,,"private void updateShuffleState() {
        switch (MusicPlayerRemote.getShuffleMode()) {
            case MusicService.SHUFFLE_MODE_SHUFFLE:
                shuffleButton.setImageDrawable(Util.getTintedDrawable(activity, R.drawable.ic_shuffle_white_36dp,
                        getActivatedIconColor()));
                break;
            default:
                shuffleButton.setImageDrawable(Util.getTintedDrawable(activity, R.drawable.ic_shuffle_white_36dp,
                        getDeactivatedIconColor()));
                break;
        }
    }",True,True,The function of the method is to update the state of the shuffle button based on the current shuffle mode of the music player.,False,"The `updateShuffleState()` method updates the state of a shuffle button based on the current shuffle mode of a music player. If the shuffle mode is set to ""shuffle"", the button is displayed with an activated icon color, otherwise it is displayed with a deactivated icon color."
68,setUpRepeatButton(),set up repeat button ,Method,setUpMusicControllers(),,com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateRepeatState() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateRepeatState() android.view.View+setOnClickListener(OnClickListener) android.view.View+setOnClickListener(OnClickListener) +() +onClick(View),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+repeatButton,281,9,2,,"private void setUpRepeatButton() {
        updateRepeatState();
        repeatButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                MusicPlayerRemote.cycleRepeatMode();
            }
        });
    }",True,True,The function of the method is to set up a repeat button. It updates the repeat state and sets an onClickListener for the repeat button that cycles the repeat mode of the music player.,False,"The code sets up a repeat button by updating its initial state and adding a click listener. When the button is clicked, it calls a method to cycle through different repeat modes in a music player."
69,updateRepeatState(),update repeat state ,Method,"onRepeatModeChanged() onSharedPreferenceChanged(SharedPreferences,String) setUpRepeatButton()",,"com.kabouzeid.gramophone.helper.MusicPlayerRemote+getRepeatMode() com.kabouzeid.gramophone.helper.MusicPlayerRemote+getRepeatMode() android.widget.ImageView+setImageDrawable(Drawable) android.widget.ImageView+setImageDrawable(Drawable) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+getActivatedIconColor() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+getActivatedIconColor() android.widget.ImageView+setImageDrawable(Drawable) android.widget.ImageView+setImageDrawable(Drawable) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+getActivatedIconColor() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+getActivatedIconColor() android.widget.ImageView+setImageDrawable(Drawable) android.widget.ImageView+setImageDrawable(Drawable) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+getDeactivatedIconColor() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+getDeactivatedIconColor()",com.kabouzeid.gramophone.service.MusicService+REPEAT_MODE_ALL com.kabouzeid.gramophone.ui.fragments.PlayerFragment+repeatButton com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.service.MusicService+REPEAT_MODE_THIS com.kabouzeid.gramophone.ui.fragments.PlayerFragment+repeatButton com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+repeatButton com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity,783,16,2,,"private void updateRepeatState() {
        switch (MusicPlayerRemote.getRepeatMode()) {
            case MusicService.REPEAT_MODE_ALL:
                repeatButton.setImageDrawable(Util.getTintedDrawable(activity, R.drawable.ic_repeat_white_36dp,
                        getActivatedIconColor()));
                break;
            case MusicService.REPEAT_MODE_THIS:
                repeatButton.setImageDrawable(Util.getTintedDrawable(activity, R.drawable.ic_repeat_one_white_36dp,
                        getActivatedIconColor()));
                break;
            default:
                repeatButton.setImageDrawable(Util.getTintedDrawable(activity, R.drawable.ic_repeat_white_36dp,
                        getDeactivatedIconColor()));
                break;
        }
    }",True,True,The function of the method is to update the state of the repeat button based on the current repeat mode of the music player.,False,"The `updateRepeatState()` method updates the image of a repeat button based on the current repeat mode obtained from the `MusicPlayerRemote` class. If the repeat mode is set to ""all"", it sets the image to a repeat icon, if it is set to ""this"", it sets the image to a repeat one icon, and for any other mode, it sets the image to a deactivated repeat icon."
70,getActivatedIconColor(),get activated icon color ,Method,updateShuffleState() updateRepeatState() updateRepeatState(),,com.kabouzeid.gramophone.ui.fragments.PlayerFragment+ensureActivatedColorVisibleIfNecessary(int) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+ensureActivatedColorVisibleIfNecessary(int),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+colorPlaybackControls com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastPlaybackControlsColor,266,7,2,,"private int getActivatedIconColor() {
        if (colorPlaybackControls) {
            return ensureActivatedColorVisibleIfNecessary(lastPlaybackControlsColor);
        } else {
            return ThemeSingleton.get().positiveColor.getDefaultColor();
        }
    }",True,True,"This method returns the color of an activated icon. If the ""colorPlaybackControls"" variable is true, it returns the color of the last playback controls. Otherwise, it returns the default positive color from the theme.",False,"The `getActivatedIconColor()` method returns the color of an activated icon. If `colorPlaybackControls` is true, it ensures the visibility of the last playback controls color. Otherwise, it returns the default positive color from the current theme."
71,getDeactivatedIconColor(),get deactivated icon color ,Method,updateShuffleState() updateRepeatState(),,"com.kabouzeid.gramophone.util.ColorUtil+resolveColor(Context,int) com.kabouzeid.gramophone.util.ColorUtil+resolveColor(Context,int)",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity android.R.attr+textColorSecondary,129,3,2,,"private int getDeactivatedIconColor() {
        return ColorUtil.resolveColor(activity, android.R.attr.textColorSecondary);
    }",True,True,This method returns the color of the deactivated icon by resolving the secondary text color attribute from the activity's color utility.,False,"The method ""getDeactivatedIconColor()"" returns the resolved color value for the deactivated icon. It uses the ""ColorUtil.resolveColor()"" method to resolve the color based on the provided activity and the attribute ""textColorSecondary"" from the Android system resources."
72,ensureActivatedColorVisibleIfNecessary(int),ensure activated color visible if necessary activated color return if the activated color wont have enough difference to the deactivated color color white color black depending on the theme else the unmodified accent color ,Method,getActivatedIconColor(),,"android.graphics.Color+argb(int,int,int,int) android.graphics.Color+argb(int,int,int,int) android.graphics.Color+argb(int,int,int,int) android.graphics.Color+argb(int,int,int,int) com.kabouzeid.gramophone.util.ColorUtil+getColorDifference(int,int) com.kabouzeid.gramophone.util.ColorUtil+getColorDifference(int,int)",android.graphics.Color+WHITE android.graphics.Color+BLACK,759,12,2,"/** 
 * @return If the activated color wont have enough difference to the deactivated color Color.WHITE / Color.BLACK (depending on the theme),else the unmodified accentColor.
 */
","/**
     * @return If the activated color wont have enough difference to the deactivated color Color.WHITE / Color.BLACK (depending on the theme),
     * else the unmodified accentColor.
     */
    private int ensureActivatedColorVisibleIfNecessary(int activatedColor) {
        // Not optimal, but much easier then computing the opaque deactivated color on the background color every time.
        int preBlendedDeactivatedIconColor = ThemeSingleton.get().darkTheme ? Color.argb(255, 188, 188, 188) : Color.argb(255, 115, 115, 115);
        if (ColorUtil.getColorDifference(activatedColor, preBlendedDeactivatedIconColor) <= 30d) {
            return ThemeSingleton.get().darkTheme ? Color.WHITE : Color.BLACK;
        }
        return activatedColor;
    }",True,True,"The function ensures that the activated color is visible by comparing its difference with the pre-blended deactivated icon color. If the difference is less than or equal to 30, it returns either Color.WHITE or Color.BLACK depending on the theme. Otherwise, it returns the original activated color.",False,"This code is a private method that ensures the visibility of an activated color by comparing its difference with a pre-blended deactivated color. If the difference is below a certain threshold, the method returns either Color.WHITE or Color.BLACK (depending on the theme), otherwise it returns the original activated color."
73,setUpAlbumArtViews(),set up album art views ,Method,"onViewCreated(View,Bundle)",,com.kabouzeid.gramophone.views.SquareIfPlaceImageView+forceSquare(boolean) com.kabouzeid.gramophone.views.SquareIfPlaceImageView+forceSquare(boolean) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alignAlbumArtToToolbar() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alignAlbumArtToToolbar() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alignAlbumArtToStatusBar() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alignAlbumArtToStatusBar() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alignAlbumArtToTop() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+alignAlbumArtToTop(),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+albumArt com.kabouzeid.gramophone.ui.fragments.PlayerFragment+forceSquareAlbumArt com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueStatusBar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueToolBar,338,12,2,,"private void setUpAlbumArtViews() {
        albumArt.forceSquare(forceSquareAlbumArt);
        if (opaqueStatusBar) {
            if (opaqueToolBar) {
                alignAlbumArtToToolbar();
            } else {
                alignAlbumArtToStatusBar();
            }
        } else {
            alignAlbumArtToTop();
        }
    }",False,True,"This method sets up the views for album art. It forces the album art to be square, aligns it to the toolbar or status bar based on their opacity, or aligns it to the top if neither is opaque.",True,"The `setUpAlbumArtViews()` method is responsible for setting up the album art views. It applies a square shape to the album art, aligns it to the toolbar or status bar based on certain conditions, and if neither condition is met, it aligns the album art to the top."
74,alignAlbumArtToTop(),align album art to top ,Method,"onSharedPreferenceChanged(SharedPreferences,String) setUpAlbumArtViews()",,"android.view.View+getLayoutParams() android.view.View+getLayoutParams() android.widget.RelativeLayout.LayoutParams+LayoutParams(int,int) android.widget.RelativeLayout.LayoutParams+addRule(int,int) android.widget.RelativeLayout.LayoutParams+addRule(int,int)",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+albumArtFrame android.os.Build.VERSION+SDK_INT android.widget.RelativeLayout+BELOW android.view.ViewGroup.LayoutParams+MATCH_PARENT android.view.ViewGroup.LayoutParams+MATCH_PARENT android.widget.RelativeLayout+ABOVE,495,10,2,,"private void alignAlbumArtToTop() {
        RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) albumArtFrame.getLayoutParams();
        if (Build.VERSION.SDK_INT > 16) {
            params.removeRule(RelativeLayout.BELOW);
        } else {
            params = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.MATCH_PARENT);
            params.addRule(RelativeLayout.ABOVE, R.id.player_footer_frame);
        }
    }",False,True,"This method aligns the album art to the top of the layout by modifying the layout parameters. If the device's SDK version is greater than 16, it removes the rule for positioning below another view. Otherwise, it creates new layout parameters and adds a rule to position above a specific view.",False,"The code defines a private method called ""alignAlbumArtToTop"" that adjusts the layout parameters of an album art frame. It checks the Android version and removes a specific rule if it is above version 16, otherwise it sets new layout parameters and adds a rule to position the album art frame above a specific view."
75,alignAlbumArtToToolbar(),align album art to toolbar ,Method,"onSharedPreferenceChanged(SharedPreferences,String) setUpAlbumArtViews()",,"android.view.View+getLayoutParams() android.view.View+getLayoutParams() android.widget.RelativeLayout.LayoutParams+addRule(int,int) android.widget.RelativeLayout.LayoutParams+addRule(int,int)",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+albumArtFrame android.widget.RelativeLayout+BELOW,220,4,2,,"private void alignAlbumArtToToolbar() {
        RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) albumArtFrame.getLayoutParams();
        params.addRule(RelativeLayout.BELOW, R.id.player_toolbar);
    }",False,True,This method aligns the album art frame below the player toolbar by setting the layout parameters of the album art frame to be below the player toolbar in a relative layout.,False,"The method ""alignAlbumArtToToolbar"" adjusts the position of the album art frame by setting a rule to position it below the player toolbar in a RelativeLayout."
76,alignAlbumArtToStatusBar(),align album art to status bar ,Method,"onSharedPreferenceChanged(SharedPreferences,String) setUpAlbumArtViews()",,"android.view.View+getLayoutParams() android.view.View+getLayoutParams() android.widget.RelativeLayout.LayoutParams+addRule(int,int) android.widget.RelativeLayout.LayoutParams+addRule(int,int)",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+albumArtFrame android.widget.RelativeLayout+BELOW,225,4,2,,"private void alignAlbumArtToStatusBar() {
        RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) albumArtFrame.getLayoutParams();
        params.addRule(RelativeLayout.BELOW, R.id.player_status_bar);
    }",False,True,This method aligns the album art frame below the player status bar by setting the layout parameters of the album art frame to be below the player status bar.,False,"The code defines a private method called ""alignAlbumArtToStatusBar"" that adjusts the layout parameters of an album art frame to position it below a player status bar in a RelativeLayout. It does this by retrieving the current layout parameters and adding a rule to position the album art frame below the specified view ID."
77,setUpPlayerToolbar(),set up player toolbar ,Method,"onViewCreated(View,Bundle)",,+() +onClick(View),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+toolbar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+toolbar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+toolbar,413,11,2,,"private void setUpPlayerToolbar() {
        toolbar.inflateMenu(R.menu.menu_player);
        toolbar.setNavigationIcon(R.drawable.ic_close_white_24dp);
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                activity.onBackPressed();
            }
        });
        toolbar.setOnMenuItemClickListener(this);
    }",False,False,"This method sets up the player toolbar by inflating the menu, setting the navigation icon, setting the navigation click listener to go back, and setting the menu item click listener.",True,"The code sets up a player toolbar by inflating a menu, setting a navigation icon, and defining an onClickListener for the navigation icon. It also sets the toolbar's onMenuItemClickListener to the current class."
78,setUpPlayerStatusBarElevation(),set up player status bar elevation ,Method,"onViewCreated(View,Bundle) onSharedPreferenceChanged(SharedPreferences,String)",,android.content.res.Resources+getDimensionPixelSize(int) android.support.v4.app.Fragment+getResources() android.support.v4.app.Fragment+getResources() android.content.res.Resources+getDimensionPixelSize(int),android.os.Build.VERSION+SDK_INT com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueToolBar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+statusbar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+statusbar,347,9,2,,"private void setUpPlayerStatusBarElevation() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            if (opaqueToolBar) {
                statusbar.setElevation(getResources().getDimensionPixelSize(R.dimen.toolbar_elevation));
            } else {
                statusbar.setElevation(0);
            }
        }
    }",False,True,"This method sets the elevation of the status bar based on the version of Android and the value of the opaqueToolBar variable. If opaqueToolBar is true, it sets the elevation to the dimension specified in the resources file, otherwise it sets it to 0.",False,"This code sets up the elevation of the status bar for the player. If the device's SDK version is at least LOLLIPOP and the toolbar is opaque, the status bar elevation is set to a specific dimension. Otherwise, the status bar elevation is set to 0."
79,updatePlayerMenu(),update player menu ,Method,updateCurrentSong() onMenuItemClick(MenuItem),,"com.kabouzeid.gramophone.util.MusicUtil+isFavorite(Context,Song) com.kabouzeid.gramophone.util.MusicUtil+isFavorite(Context,Song) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.util.Util+getTintedDrawable(Context,int,int) com.kabouzeid.gramophone.util.ViewUtil+getToolbarIconColor(Context,boolean) com.kabouzeid.gramophone.util.ViewUtil+getToolbarIconColor(Context,boolean) com.kabouzeid.gramophone.util.ColorUtil+useDarkTextColorOnBackground(int) com.kabouzeid.gramophone.util.ColorUtil+useDarkTextColorOnBackground(int) android.support.v4.app.Fragment+getString(int) android.support.v4.app.Fragment+getString(int) android.support.v4.app.Fragment+getString(int) android.support.v4.app.Fragment+getString(int)",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+song com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueToolBar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastFooterColor com.kabouzeid.gramophone.ui.fragments.PlayerFragment+toolbar,617,7,2,,"private void updatePlayerMenu() {
        boolean isFavorite = MusicUtil.isFavorite(activity, song);
        Drawable favoriteIcon = Util.getTintedDrawable(activity, isFavorite ? R.drawable.ic_favorite_white_24dp : R.drawable.ic_favorite_outline_white_24dp, ViewUtil.getToolbarIconColor(activity, opaqueToolBar && ColorUtil.useDarkTextColorOnBackground(lastFooterColor)));
        toolbar.getMenu().findItem(R.id.action_toggle_favorite)
                .setIcon(favoriteIcon)
                .setTitle(isFavorite ? getString(R.string.action_remove_from_favorites) : getString(R.string.action_add_to_favorites));
    }",False,False,"The function of the method is to update the player menu by setting the icon and title of the ""toggle favorite"" menu item based on whether the current song is a favorite or not.",True,"The `updatePlayerMenu()` method updates the player menu by checking if the current song is marked as a favorite or not. It then sets the appropriate icon and title for the ""toggle favorite"" menu item based on the result."
80,updateCurrentSong(),update current song ,Method,onPlayingMetaChanged(),,com.kabouzeid.gramophone.ui.fragments.PlayerFragment+getCurrentSong() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+getCurrentSong() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateMetaTexts() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updateMetaTexts() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpAlbumArtAndApplyPalette() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+setUpAlbumArtAndApplyPalette() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updatePlayerMenu() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updatePlayerMenu(),,161,6,2,,"private void updateCurrentSong() {
        getCurrentSong();
        updateMetaTexts();
        setUpAlbumArtAndApplyPalette();
        updatePlayerMenu();
    }",False,False,"The function of the method is to update the current song by performing the following actions: getting the current song, updating the meta texts, setting up the album art and applying the palette, and updating the player menu.",False,"The `updateCurrentSong()` method is responsible for updating the current song in a music player. It calls other methods to retrieve the current song, update the metadata texts, set up the album art and apply a color palette, and update the player menu."
81,getCurrentSong(),get current song ,Method,updateCurrentSong(),,com.kabouzeid.gramophone.helper.MusicPlayerRemote+getCurrentSong() com.kabouzeid.gramophone.helper.MusicPlayerRemote+getCurrentSong(),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+song,88,3,2,,"private void getCurrentSong() {
        song = MusicPlayerRemote.getCurrentSong();
    }",False,False,"This method serves to retrieve the current song from the MusicPlayerRemote and assign it to the variable ""song"".",False,The code defines a private method called `getCurrentSong()` that retrieves the current song from a remote music player. The retrieved song is then assigned to a variable called `song`.
82,updateMetaTexts(),update meta texts ,Method,updateCurrentSong(),,android.widget.TextView+setText(CharSequence) android.widget.TextView+setText(CharSequence) android.widget.TextView+setText(CharSequence) android.widget.TextView+setText(CharSequence),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songTitle com.kabouzeid.gramophone.ui.fragments.PlayerFragment+song com.kabouzeid.gramophone.model.Song+title com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songText com.kabouzeid.gramophone.ui.fragments.PlayerFragment+song com.kabouzeid.gramophone.model.Song+artistName,120,4,2,,"private void updateMetaTexts() {
        songTitle.setText(song.title);
        songText.setText(song.artistName);
    }",True,True,"This method updates the text of two UI elements, songTitle and songText, with the title and artist name of a song, respectively.",False,The `updateMetaTexts()` method is a private method that updates the text of two UI elements (`songTitle` and `songText`) with the title and artist name of a `song` object. It is likely used to display the metadata of the currently playing song in a user interface.
83,getPaletteColor(),get palette color ,Method,,com.kabouzeid.gramophone.ui.activities.base.AbsSlidingMusicPanelActivity+onPanelExpanded(View) com.kabouzeid.gramophone.ui.activities.base.AbsSlidingMusicPanelActivity+onPaletteColorChanged(),,com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastFooterColor,96,5,1,,"@Override
    @ColorInt
    public int getPaletteColor() {
        return lastFooterColor;
    }",False,False,This method serves to return the last footer color as an integer value.,False,"The code snippet defines a method named ""getPaletteColor"" that returns an integer value representing the last footer color. The method is annotated with ""@ColorInt"" to indicate that the returned value represents a color."
84,"onUpdateProgressViews(int,int)",on update progress views progress total ,Method,,,android.widget.AbsSeekBar+setMax(int) android.widget.AbsSeekBar+setMax(int) android.widget.ProgressBar+setProgress(int) android.widget.ProgressBar+setProgress(int) android.widget.TextView+setText(CharSequence) android.widget.TextView+setText(CharSequence) com.kabouzeid.gramophone.util.MusicUtil+getReadableDurationString(long) com.kabouzeid.gramophone.util.MusicUtil+getReadableDurationString(long) android.widget.TextView+setText(CharSequence) android.widget.TextView+setText(CharSequence) com.kabouzeid.gramophone.util.MusicUtil+getReadableDurationString(long) com.kabouzeid.gramophone.util.MusicUtil+getReadableDurationString(long),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+progressSlider com.kabouzeid.gramophone.ui.fragments.PlayerFragment+progressSlider com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songTotalTime com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songCurrentProgress,323,7,1,,"@Override
    public void onUpdateProgressViews(int progress, int total) {
        progressSlider.setMax(total);
        progressSlider.setProgress(progress);
        songTotalTime.setText(MusicUtil.getReadableDurationString(total));
        songCurrentProgress.setText(MusicUtil.getReadableDurationString(progress));
    }",False,False,"This method updates the progress views of a music player. It sets the maximum value and current progress of a progress slider, and updates the displayed total time and current progress time of the song.",False,"This code is an implementation of the `onUpdateProgressViews` method. It updates the progress views, such as a slider and text views, with the given progress and total values. It also sets the maximum value of the progress slider and displays the total and current progress time in a readable format."
85,ColorHolder,color holder ,MemberClass,,,,com.kabouzeid.gramophone.ui.fragments.PlayerFragment.ColorHolder+color,84,4,10,,"private static class ColorHolder {
        @ColorInt
        public int color;
    }",False,False,,False,
86,setUpAlbumArtAndApplyPalette(),set up album art and apply palette ,Method,updateCurrentSong(),,com.kabouzeid.gramophone.ui.fragments.PlayerFragment.ColorHolder+ColorHolder() com.kabouzeid.gramophone.util.MusicUtil+getSongImageLoaderString(Song) com.kabouzeid.gramophone.util.MusicUtil+getSongImageLoaderString(Song) +process(Bitmap),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+song com.kabouzeid.gramophone.ui.fragments.PlayerFragment+albumArt,2011,39,2,,"private void setUpAlbumArtAndApplyPalette() {
        final ColorHolder colorHolder = new ColorHolder();
        ImageLoader.getInstance().displayImage(
                MusicUtil.getSongImageLoaderString(song),
                albumArt,
                new DisplayImageOptions.Builder()
                        .cacheInMemory(true)
                        .showImageOnFail(R.drawable.default_album_art)
                        .postProcessor(new BitmapProcessor() {
                            @Override
                            public Bitmap process(Bitmap bitmap) {
                                colorHolder.color = ColorUtil.generateColor(activity, bitmap);
                                return bitmap;
                            }
                        })
                        .displayer(new FadeInBitmapDisplayer(ViewUtil.DEFAULT_COLOR_ANIMATION_DURATION) {
                            @Override
                            public void display(Bitmap bitmap, ImageAware imageAware, LoadedFrom loadedFrom) {
                                super.display(bitmap, imageAware, loadedFrom);
                                setColors(colorHolder.color);
                            }
                        })
                        .build(),
                new SimpleImageLoadingListener() {
                    @Override
                    public void onLoadingFailed(String imageUri, View view, @Nullable FailReason failReason) {
                        FadeInBitmapDisplayer.animate(view, ViewUtil.DEFAULT_COLOR_ANIMATION_DURATION);
                        setColors(ColorUtil.resolveColor(activity, R.attr.default_bar_color));
                    }

                    @Override
                    public void onLoadingComplete(String imageUri, View view, @Nullable Bitmap loadedImage) {
                        if (loadedImage == null) {
                            onLoadingFailed(imageUri, view, null);
                        }
                    }
                }
        );
    }",True,True,"The function of the method is to set up the album art and apply a color palette to it. It uses an image loader to display the album art, and applies a post processor to generate a color from the bitmap. It also sets the colors of the album art using a fade-in bitmap displayer. If the loading fails or the loaded image is null, it handles the failure by animating the view and setting a default color.",False,"This code sets up the album art for a music player by loading an image using ImageLoader, applying a color palette to the image, and displaying it with a fade-in animation. If the image fails to load, a default album art is shown and a default color is applied."
87,setColors(int),set colors color ,Method,,,com.kabouzeid.gramophone.ui.fragments.PlayerFragment+animateColorChange(int) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+animateColorChange(int) com.kabouzeid.gramophone.ui.fragments.PlayerFragment.Callbacks+onPaletteColorChanged() com.kabouzeid.gramophone.ui.fragments.PlayerFragment.Callbacks+onPaletteColorChanged(),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+callbacks,119,4,2,,"private void setColors(int color) {
        animateColorChange(color);
        callbacks.onPaletteColorChanged();
    }",False,False,"The function of the method is to set the colors by calling the animateColorChange method with the given color parameter, and then calling the onPaletteColorChanged method through the callbacks.",False,The `setColors` method is a private method that takes an integer `color` as a parameter. It calls the `animateColorChange` method with the given color and then invokes the `onPaletteColorChanged` method from the `callbacks` object.
88,animateColorChange(int),animate color change new color ,Method,"onSharedPreferenceChanged(SharedPreferences,String) setColors(int)",,"android.animation.AnimatorSet+isStarted() android.animation.AnimatorSet+isStarted() android.animation.AnimatorSet+cancel() android.animation.AnimatorSet+cancel() android.animation.AnimatorSet+AnimatorSet() android.animation.AnimatorSet+play(Animator) android.animation.AnimatorSet+play(Animator) com.kabouzeid.gramophone.util.ViewUtil+createBackgroundColorTransition(View,int,int) com.kabouzeid.gramophone.util.ViewUtil+createBackgroundColorTransition(View,int,int) android.animation.AnimatorSet.Builder+with(Animator) android.animation.AnimatorSet.Builder+with(Animator) com.kabouzeid.gramophone.util.ViewUtil+createBackgroundColorTransition(View,int,int) com.kabouzeid.gramophone.util.ViewUtil+createBackgroundColorTransition(View,int,int) com.kabouzeid.gramophone.util.ViewUtil+setToolbarContentColorForBackground(Context,Toolbar,int) com.kabouzeid.gramophone.util.ViewUtil+setToolbarContentColorForBackground(Context,Toolbar,int) com.kabouzeid.gramophone.util.ViewUtil+setToolbarContentDark(Context,Toolbar,boolean) com.kabouzeid.gramophone.util.ViewUtil+setToolbarContentDark(Context,Toolbar,boolean) com.kabouzeid.gramophone.util.ColorUtil+shiftColorDown(int) com.kabouzeid.gramophone.util.ColorUtil+shiftColorDown(int) com.kabouzeid.gramophone.util.ColorUtil+shiftColorDown(int) com.kabouzeid.gramophone.util.ColorUtil+shiftColorDown(int) android.animation.AnimatorSet.Builder+with(Animator) android.animation.AnimatorSet.Builder+with(Animator) com.kabouzeid.gramophone.util.ViewUtil+createBackgroundColorTransition(View,int,int) com.kabouzeid.gramophone.util.ViewUtil+createBackgroundColorTransition(View,int,int) android.view.View+setBackgroundColor(int) android.view.View+setBackgroundColor(int) com.kabouzeid.gramophone.util.ColorUtil+getPrimaryTextColorForBackground(Context,int) com.kabouzeid.gramophone.util.ColorUtil+getPrimaryTextColorForBackground(Context,int) com.kabouzeid.gramophone.util.ColorUtil+getSecondaryTextColorForBackground(Context,int) com.kabouzeid.gramophone.util.ColorUtil+getSecondaryTextColorForBackground(Context,int) android.animation.AnimatorSet.Builder+with(Animator) android.animation.AnimatorSet.Builder+with(Animator) com.kabouzeid.gramophone.util.ViewUtil+createTextColorTransition(TextView,int,int) com.kabouzeid.gramophone.util.ViewUtil+createTextColorTransition(TextView,int,int) android.animation.AnimatorSet.Builder+with(Animator) android.animation.AnimatorSet.Builder+with(Animator) com.kabouzeid.gramophone.util.ViewUtil+createTextColorTransition(TextView,int,int) com.kabouzeid.gramophone.util.ViewUtil+createTextColorTransition(TextView,int,int) android.animation.Animator+addListener(AnimatorListener) android.animation.Animator+addListener(AnimatorListener) +() +onAnimationStart(Animator)",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+colorTransitionAnimator com.kabouzeid.gramophone.ui.fragments.PlayerFragment+colorTransitionAnimator com.kabouzeid.gramophone.ui.fragments.PlayerFragment+colorTransitionAnimator com.kabouzeid.gramophone.ui.fragments.PlayerFragment+colorTransitionAnimator com.kabouzeid.gramophone.ui.fragments.PlayerFragment+colorTransitionAnimator com.kabouzeid.gramophone.ui.fragments.PlayerFragment+footer com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastFooterColor com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueToolBar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+toolbar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastFooterColor com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+toolbar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+toolbar android.graphics.Color+TRANSPARENT com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+toolbar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+opaqueStatusBar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastFooterColor android.os.Build.VERSION+SDK_INT com.kabouzeid.gramophone.ui.fragments.PlayerFragment+statusbar com.kabouzeid.gramophone.ui.fragments.PlayerFragment+statusbar android.graphics.Color+TRANSPARENT com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songTitle com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastTitleTextColor com.kabouzeid.gramophone.ui.fragments.PlayerFragment+songText com.kabouzeid.gramophone.ui.fragments.PlayerFragment+lastCaptionTextColor com.kabouzeid.gramophone.ui.fragments.PlayerFragment+colorTransitionAnimator,2636,54,2,,"private void animateColorChange(final int newColor) {
        if (colorTransitionAnimator != null && colorTransitionAnimator.isStarted()) {
            colorTransitionAnimator.cancel();
        }
        colorTransitionAnimator = new AnimatorSet();
        AnimatorSet.Builder animatorSetBuilder = colorTransitionAnimator.play(ViewUtil.createBackgroundColorTransition(footer, lastFooterColor, newColor));

        if (opaqueToolBar) {
            animatorSetBuilder.with(ViewUtil.createBackgroundColorTransition(toolbar, lastFooterColor, newColor));
            ViewUtil.setToolbarContentColorForBackground(activity, toolbar, newColor);
        } else {
            toolbar.setBackgroundColor(Color.TRANSPARENT);
            ViewUtil.setToolbarContentDark(activity, toolbar, false);
        }

        if (opaqueStatusBar) {
            int newStatusbarColor = newColor;
            int oldStatusbarColor = lastFooterColor;
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                newStatusbarColor = ColorUtil.shiftColorDown(newStatusbarColor);
                oldStatusbarColor = ColorUtil.shiftColorDown(oldStatusbarColor);
            }
            animatorSetBuilder.with(ViewUtil.createBackgroundColorTransition(statusbar, oldStatusbarColor, newStatusbarColor));
        } else {
            statusbar.setBackgroundColor(Color.TRANSPARENT);
        }

        int titleTextColor = ColorUtil.getPrimaryTextColorForBackground(activity, newColor);
        int captionTextColor = ColorUtil.getSecondaryTextColorForBackground(activity, newColor);

        animatorSetBuilder.with(ViewUtil.createTextColorTransition(songTitle, lastTitleTextColor, titleTextColor));
        animatorSetBuilder.with(ViewUtil.createTextColorTransition(songText, lastCaptionTextColor, captionTextColor));

        colorTransitionAnimator.addListener(new SimpleAnimatorListener() {
            @Override
            public void onAnimationStart(Animator animation) {
                if (newColor == ColorUtil.resolveColor(activity, R.attr.default_bar_color) && ThemeSingleton.get().darkTheme) {
                    lastPlaybackControlsColor = Color.WHITE;
                } else {
                    lastPlaybackControlsColor = newColor;
                }
                updateRepeatState();
                updateShuffleState();
                setUpProgressSliderTint();
                setUpPlayerPlayPauseFabTint();
            }
        });

        colorTransitionAnimator.start();

        lastFooterColor = newColor;
        lastTitleTextColor = titleTextColor;
        lastCaptionTextColor = captionTextColor;
    }",False,False,"The function of this method is to animate a color change for various views in the UI, such as the footer, toolbar, status bar, song title, and song text. It also updates the playback controls color and performs other UI-related tasks.",True,"The `animateColorChange` method is responsible for animating the color change of various UI elements, such as the footer, toolbar, status bar, song title, and song text. It also updates the playback controls color and performs other UI-related tasks when the animation starts."
89,onMenuItemClick(MenuItem),on menu item click item ,Method,,,"android.view.MenuItem+getItemId() android.view.MenuItem+getItemId() android.support.v4.app.DialogFragment+show(FragmentManager,String) com.kabouzeid.gramophone.dialogs.SleepTimerDialog+SleepTimerDialog() android.support.v4.app.DialogFragment+show(FragmentManager,String) android.support.v4.app.Fragment+getFragmentManager() android.support.v4.app.Fragment+getFragmentManager() com.kabouzeid.gramophone.util.MusicUtil+toggleFavorite(Context,Song) com.kabouzeid.gramophone.util.MusicUtil+toggleFavorite(Context,Song) com.kabouzeid.gramophone.util.MusicUtil+isFavorite(Context,Song) com.kabouzeid.gramophone.util.MusicUtil+isFavorite(Context,Song) com.kabouzeid.gramophone.ui.fragments.PlayerFragment+animateSetFavorite() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+animateSetFavorite() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updatePlayerMenu() com.kabouzeid.gramophone.ui.fragments.PlayerFragment+updatePlayerMenu() android.support.v4.app.DialogFragment+show(FragmentManager,String) com.kabouzeid.gramophone.dialogs.SongShareDialog+create(Song) com.kabouzeid.gramophone.dialogs.SongShareDialog+create(Song) android.support.v4.app.DialogFragment+show(FragmentManager,String) android.support.v4.app.Fragment+getFragmentManager() android.support.v4.app.Fragment+getFragmentManager() com.kabouzeid.gramophone.util.NavigationUtil+openEqualizer(Activity) com.kabouzeid.gramophone.util.NavigationUtil+openEqualizer(Activity) com.kabouzeid.gramophone.helper.MusicPlayerRemote+openAndShuffleQueue(ArrayList<Song>,boolean) com.kabouzeid.gramophone.helper.MusicPlayerRemote+openAndShuffleQueue(ArrayList<Song>,boolean) com.kabouzeid.gramophone.loader.SongLoader+getAllSongs(Context) com.kabouzeid.gramophone.loader.SongLoader+getAllSongs(Context) android.support.v4.app.DialogFragment+show(FragmentManager,String) com.kabouzeid.gramophone.dialogs.AddToPlaylistDialog+create(Song) com.kabouzeid.gramophone.dialogs.AddToPlaylistDialog+create(Song) android.support.v4.app.DialogFragment+show(FragmentManager,String) android.support.v4.app.Fragment+getFragmentManager() android.support.v4.app.Fragment+getFragmentManager() android.support.v4.app.DialogFragment+show(FragmentManager,String) com.kabouzeid.gramophone.dialogs.PlayingQueueDialog+create() com.kabouzeid.gramophone.dialogs.PlayingQueueDialog+create() android.support.v4.app.DialogFragment+show(FragmentManager,String) android.support.v4.app.Fragment+getFragmentManager() android.support.v4.app.Fragment+getFragmentManager() android.content.Intent+Intent() android.content.Intent+putExtra(String,int) android.content.Intent+putExtra(String,int) android.support.v4.app.Fragment+startActivity(Intent) android.support.v4.app.Fragment+startActivity(Intent) android.support.v4.app.DialogFragment+show(FragmentManager,String) com.kabouzeid.gramophone.dialogs.SongDetailDialog+create(Song) com.kabouzeid.gramophone.dialogs.SongDetailDialog+create(Song) android.support.v4.app.DialogFragment+show(FragmentManager,String) android.support.v4.app.Fragment+getFragmentManager() android.support.v4.app.Fragment+getFragmentManager() com.kabouzeid.gramophone.util.NavigationUtil+goToAlbum(Activity,int,Pair[]) com.kabouzeid.gramophone.util.NavigationUtil+goToAlbum(Activity,int,Pair[]) com.kabouzeid.gramophone.util.NavigationUtil+goToArtist(Activity,int,Pair[]) com.kabouzeid.gramophone.util.NavigationUtil+goToArtist(Activity,int,Pair[])",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+song com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+song com.kabouzeid.gramophone.ui.fragments.PlayerFragment+song com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+song com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.activities.tageditor.AbsTagEditorActivity+EXTRA_ID com.kabouzeid.gramophone.ui.fragments.PlayerFragment+song com.kabouzeid.gramophone.model.Song+id com.kabouzeid.gramophone.ui.fragments.PlayerFragment+song com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+song com.kabouzeid.gramophone.model.Song+albumId com.kabouzeid.gramophone.ui.fragments.PlayerFragment+activity com.kabouzeid.gramophone.ui.fragments.PlayerFragment+song com.kabouzeid.gramophone.model.Song+artistId,2049,45,1,,"@Override
    public boolean onMenuItemClick(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_sleep_timer:
                new SleepTimerDialog().show(getFragmentManager(), ""SET_SLEEP_TIMER"");
                return true;
            case R.id.action_toggle_favorite:
                MusicUtil.toggleFavorite(activity, song);
                if (MusicUtil.isFavorite(activity, song)) {
                    animateSetFavorite();
                }
                updatePlayerMenu();
                return true;
            case R.id.action_share:
                SongShareDialog.create(song).show(getFragmentManager(), ""SHARE_SONG"");
                return true;
            case R.id.action_equalizer:
                NavigationUtil.openEqualizer(activity);
                return true;
            case R.id.action_shuffle_all:
                MusicPlayerRemote.openAndShuffleQueue(SongLoader.getAllSongs(activity), true);
                return true;
            case R.id.action_add_to_playlist:
                AddToPlaylistDialog.create(song).show(getFragmentManager(), ""ADD_PLAYLIST"");
                return true;
            case R.id.action_playing_queue:
                PlayingQueueDialog.create().show(getFragmentManager(), ""PLAY_QUEUE"");
                return true;
            case R.id.action_tag_editor:
                Intent intent = new Intent(activity, SongTagEditorActivity.class);
                intent.putExtra(AbsTagEditorActivity.EXTRA_ID, song.id);
                startActivity(intent);
                return true;
            case R.id.action_details:
                SongDetailDialog.create(song).show(getFragmentManager(), ""SONG_DETAIL"");
                return true;
            case R.id.action_go_to_album:
                NavigationUtil.goToAlbum(activity, song.albumId);
                return true;
            case R.id.action_go_to_artist:
                NavigationUtil.goToArtist(activity, song.artistId);
                return true;
        }
        return false;
    }",False,False,"The function of this method is to handle the click events of various menu items. It performs different actions based on the selected menu item, such as showing a dialog, toggling favorite status, sharing a song, opening the equalizer, shuffling the queue, adding a song to a playlist, showing the playing queue, opening a tag editor, showing song details, and navigating to an album or artist.",False,"This code defines an `onMenuItemClick` method that handles different menu item clicks. Depending on the clicked item, it performs various actions such as showing dialogs, opening activities, or navigating to different screens within the app."
90,animateSetFavorite(),animate set favorite ,Method,onMenuItemClick(MenuItem),,android.view.View+clearAnimation() android.view.View+clearAnimation() android.widget.ImageView+setAlpha(int) android.widget.ImageView+setAlpha(int) android.view.View+setVisibility(int) android.view.View+setVisibility(int) android.view.View+getWidth() android.view.View+getWidth() android.view.View+getHeight() android.view.View+getHeight() android.view.animation.OvershootInterpolator+OvershootInterpolator() +() +onAnimationCancel(Animator),com.kabouzeid.gramophone.ui.fragments.PlayerFragment+favoriteIcon com.kabouzeid.gramophone.ui.fragments.PlayerFragment+favoriteIcon com.kabouzeid.gramophone.ui.fragments.PlayerFragment+favoriteIcon com.kabouzeid.gramophone.ui.fragments.PlayerFragment+favoriteIcon com.kabouzeid.gramophone.ui.fragments.PlayerFragment+favoriteIcon android.view.View+VISIBLE com.kabouzeid.gramophone.ui.fragments.PlayerFragment+favoriteIcon com.kabouzeid.gramophone.ui.fragments.PlayerFragment+favoriteIcon com.kabouzeid.gramophone.ui.fragments.PlayerFragment+favoriteIcon com.kabouzeid.gramophone.ui.fragments.PlayerFragment+favoriteIcon com.kabouzeid.gramophone.ui.fragments.PlayerFragment+favoriteIcon,1289,34,2,,"private void animateSetFavorite() {
        favoriteIcon.clearAnimation();

        favoriteIcon.setAlpha(0f);
        favoriteIcon.setScaleX(0f);
        favoriteIcon.setScaleY(0f);
        favoriteIcon.setVisibility(View.VISIBLE);
        favoriteIcon.setPivotX(favoriteIcon.getWidth() / 2);
        favoriteIcon.setPivotY(favoriteIcon.getHeight() / 2);

        favoriteIcon.animate()
                .setDuration(600)
                .setInterpolator(new OvershootInterpolator())
                .scaleX(1f)
                .scaleY(1f)
                .alpha(1f)
                .setListener(new SimpleAnimatorListener() {
                    @Override
                    public void onAnimationCancel(Animator animation) {
                        favoriteIcon.setVisibility(View.INVISIBLE);
                    }
                })
                .withEndAction(new Runnable() {
                    @Override
                    public void run() {
                        favoriteIcon.animate()
                                .setDuration(300)
                                .setInterpolator(new DecelerateInterpolator())
                                .alpha(0f)
                                .start();
                    }
                })
                .start();
    }",True,True,"The function of this method is to animate the favorite icon by scaling it up, fading it in, and then fading it out.",False,"The `animateSetFavorite()` method animates the scaling and fading in of a favorite icon. It starts by setting the initial state of the icon, then animates it to full size and opacity. After that, it animates the icon to fade out."
91,showControls(),show controls ,Method,,com.kabouzeid.gramophone.ui.activities.base.AbsSlidingMusicPanelActivity+onPanelExpanded(View),"android.view.animation.DecelerateInterpolator+DecelerateInterpolator() android.view.View+getVisibility() android.view.View+getVisibility() java.lang.Math+max(int,int) java.lang.Math+max(int,int) android.view.View+getWidth() android.view.View+getWidth() android.view.View+getHeight() android.view.View+getHeight() android.animation.Animator+setInterpolator(TimeInterpolator) android.animation.Animator+setInterpolator(TimeInterpolator) android.view.animation.DecelerateInterpolator+DecelerateInterpolator() android.animation.Animator+setDuration(long) android.animation.Animator+setDuration(long) android.animation.Animator+start() android.animation.Animator+start() android.view.View+setVisibility(int) android.view.View+setVisibility(int)",com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playPauseFab android.os.Build.VERSION+SDK_INT com.kabouzeid.gramophone.ui.fragments.PlayerFragment+mediaControllerContainer android.view.View+INVISIBLE com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playPauseFab com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playPauseFab com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playPauseFab com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playPauseFab com.kabouzeid.gramophone.ui.fragments.PlayerFragment+mediaControllerContainer com.kabouzeid.gramophone.ui.fragments.PlayerFragment+mediaControllerContainer com.kabouzeid.gramophone.ui.fragments.PlayerFragment+mediaControllerContainer com.kabouzeid.gramophone.ui.fragments.PlayerFragment+FAB_CIRCULAR_REVEAL_ANIMATION_TIME com.kabouzeid.gramophone.ui.fragments.PlayerFragment+mediaControllerContainer android.view.View+VISIBLE,1079,22,1,,"public void showControls() {
        playPauseFab.animate()
                .scaleX(1f)
                .scaleY(1f)
                .rotation(360f)
                .setInterpolator(new DecelerateInterpolator())
                .start();

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            if (mediaControllerContainer.getVisibility() == View.INVISIBLE) {
                int cx = (playPauseFab.getLeft() + playPauseFab.getRight()) / 2;
                int cy = (playPauseFab.getTop() + playPauseFab.getBottom()) / 2;
                int finalRadius = Math.max(mediaControllerContainer.getWidth(), mediaControllerContainer.getHeight());

                final Animator animator = ViewAnimationUtils.createCircularReveal(mediaControllerContainer, cx, cy, 0, finalRadius);
                animator.setInterpolator(new DecelerateInterpolator());
                animator.setDuration(FAB_CIRCULAR_REVEAL_ANIMATION_TIME);
                animator.start();
                mediaControllerContainer.setVisibility(View.VISIBLE);
            }
        }
    }",False,False,"The function of this method is to show the controls for a media player. It animates the play/pause button, and if the device's version is Lollipop or higher, it also animates the circular reveal of the media controller container.",False,"The `showControls()` method animates the play/pause button by scaling it, rotating it, and applying a decelerate interpolator. If the device's SDK version is at least LOLLIPOP and the media controller container is currently invisible, a circular reveal animation is created to show the media controller container."
92,resetShowControlsAnimation(),reset show controls animation ,Method,"onViewCreated(View,Bundle)",com.kabouzeid.gramophone.ui.activities.base.AbsSlidingMusicPanelActivity+onPanelCollapsed(View),android.view.View+setVisibility(int) android.view.View+setVisibility(int),android.os.Build.VERSION+SDK_INT com.kabouzeid.gramophone.ui.fragments.PlayerFragment+mediaControllerContainer android.view.View+INVISIBLE com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playPauseFab com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playPauseFab com.kabouzeid.gramophone.ui.fragments.PlayerFragment+playPauseFab,305,8,1,,"public void resetShowControlsAnimation() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            mediaControllerContainer.setVisibility(View.INVISIBLE);
        }
        playPauseFab.setScaleX(0f);
        playPauseFab.setScaleY(0f);
        playPauseFab.setRotation(0f);
    }",False,False,The function of this method is to reset the animation for showing controls. It hides the media controller container if the device's SDK version is at least LOLLIPOP. It also resets the scale and rotation of the play/pause FloatingActionButton.,False,"The code defines a method called ""resetShowControlsAnimation"" that is used to reset the animation for showing controls. It hides the media controller container if the device's SDK version is at least LOLLIPOP, and resets the scale and rotation of the play/pause FloatingActionButton."
93,Callbacks,callbacks ,MemberClass,,,com.kabouzeid.gramophone.ui.fragments.PlayerFragment.Callbacks+onPaletteColorChanged(),,72,3,1,,"public interface Callbacks {
        void onPaletteColorChanged();
    }",False,False,,False,
