index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,logger,logger the logger ,Field,,,,,99,4,18,"/** 
 * The logger.
 */
","/**
     * The logger.
     */
    private final Logger logger = Logger.getLogger(MainFrame.class);",False,False,"/** 
 * The logger.
 */
",False,"/** 
 * The logger.
 */
"
2,mainPanel,main panel the main container ,Field,init() init() initPluginComponents(),,,,139,5,18,"/** 
 * The main container.
 */
","/**
     * The main container.
     */
    private final TransparentPanel mainPanel
        = new TransparentPanel(new BorderLayout(0, 0));",False,False,"/** 
 * The main container.
 */
",False,"/** 
 * The main container.
 */
"
3,statusBarPanel,status bar panel the status bar panel ,Field,"removePluginComponent(Component,Container,Object)",,,,142,5,18,"/** 
 * The status bar panel.
 */
","/**
     * The status bar panel.
     */
    private final TransparentPanel statusBarPanel
        = new TransparentPanel(new BorderLayout());",False,False,"/** 
 * The status bar panel.
 */
",False,"/** 
 * The status bar panel.
 */
"
4,centerPanel,center panel the center panel containing the contact list ,Field,,,,,168,5,18,"/** 
 * The center panel, containing the contact list.
 */
","/**
     * The center panel, containing the contact list.
     */
    private final TransparentPanel centerPanel
        = new TransparentPanel(new BorderLayout(0, 0));",False,False,"/** 
 * The center panel, containing the contact list.
 */
",False,"/** 
 * The center panel, containing the contact list.
 */
"
5,menu,menu the main menu ,Field,,,,,60,4,2,"/** 
 * The main menu.
 */
","/**
     * The main menu.
     */
    private MainMenu menu;",False,False,"/** 
 * The main menu.
 */
",False,"/** 
 * The main menu.
 */
"
6,searchField,search field the search field shown above the contact list ,Field,MainFrame(),,,,108,4,18,"/** 
 * The search field shown above the contact list.
 */
","/**
     * The search field shown above the contact list.
     */
    private final SearchField searchField;",False,False,"/** 
 * The search field shown above the contact list.
 */
",False,"/** 
 * The search field shown above the contact list.
 */
"
7,protocolProviders,protocol providers a mapping of protocol provider service s and their indexes ,Field,addProtocolProvider(ProtocolProviderService) removeProtocolProvider(ProtocolProviderService),,,,227,5,18,"/** 
 * A mapping of <tt>ProtocolProviderService</tt>s and their indexes.
 */
","/**
     * A mapping of <tt>ProtocolProviderService</tt>s and their indexes.
     */
    private final HashMap<ProtocolProviderService, Integer> protocolProviders
        = new LinkedHashMap<ProtocolProviderService, Integer>();",False,False,"/** 
 * A mapping of <tt>ProtocolProviderService</tt>s and their indexes.
 */
",False,"/** 
 * A mapping of <tt>ProtocolProviderService</tt>s and their indexes.
 */
"
8,accountStatusPanel,account status panel the panel containing the accounts status menu ,Field,MainFrame(),,,,116,4,2,"/** 
 * The panel containing the accounts status menu.
 */
","/**
     * The panel containing the accounts status menu.
     */
    private AccountStatusPanel accountStatusPanel;",False,False,"/** 
 * The panel containing the accounts status menu.
 */
",False,"/** 
 * The panel containing the accounts status menu.
 */
"
9,unknownContactPanel,unknown contact panel the panel replacing the contact list shown when no matching is found for the search filter ,Field,,,,,171,5,2,"/** 
 * The panel replacing the contact list, shown when no matching is found for the search filter.
 */
","/**
     * The panel replacing the contact list, shown when no matching is found
     * for the search filter.
     */
    private UnknownContactPanel unknownContactPanel;",False,False,"/** 
 * The panel replacing the contact list, shown when no matching is found for the search filter.
 */
",False,"/** 
 * The panel replacing the contact list, shown when no matching is found for the search filter.
 */
"
10,providerContactHandlers,provider contact handlers a mapping of protocol provider service s and corresponding contact event handler s ,Field,,,,,298,7,18,"/** 
 * A mapping of <tt>ProtocolProviderService</tt>s and corresponding <tt>ContactEventHandler</tt>s.
 */
","/**
     * A mapping of <tt>ProtocolProviderService</tt>s and corresponding
     * <tt>ContactEventHandler</tt>s.
     */
    private final Map<ProtocolProviderService, ContactEventHandler>
        providerContactHandlers =
            new Hashtable<ProtocolProviderService, ContactEventHandler>();",False,False,"/** 
 * A mapping of <tt>ProtocolProviderService</tt>s and corresponding <tt>ContactEventHandler</tt>s.
 */
",False,"/** 
 * A mapping of <tt>ProtocolProviderService</tt>s and corresponding <tt>ContactEventHandler</tt>s.
 */
"
11,nativePluginsTable,native plugins table a mapping of plug in components and their corresponding native components ,Field,pluginComponentAdded(PluginComponentEvent) addNativePlugins(),,,,217,5,18,"/** 
 * A mapping of plug-in components and their corresponding native components.
 */
","/**
     * A mapping of plug-in components and their corresponding native components.
     */
    private final Map<PluginComponent, Component> nativePluginsTable =
        new Hashtable<PluginComponent, Component>();",False,False,"/** 
 * A mapping of plug-in components and their corresponding native components.
 */
",False,"/** 
 * A mapping of plug-in components and their corresponding native components.
 */
"
12,pluginPanelNorth,plugin panel north the north plug in panel ,Field,,,,,111,4,18,"/** 
 * The north plug-in panel.
 */
","/**
     * The north plug-in panel.
     */
    private final JPanel pluginPanelNorth = new TransparentPanel();",False,False,"/** 
 * The north plug-in panel.
 */
",False,"/** 
 * The north plug-in panel.
 */
"
13,pluginPanelSouth,plugin panel south the south plug in panel ,Field,,,,,111,4,18,"/** 
 * The south plug-in panel.
 */
","/**
     * The south plug-in panel.
     */
    private final JPanel pluginPanelSouth = new TransparentPanel();",False,False,"/** 
 * The south plug-in panel.
 */
",False,"/** 
 * The south plug-in panel.
 */
"
14,pluginPanelWest,plugin panel west the west plug in panel ,Field,,,,,109,4,18,"/** 
 * The west plug-in panel.
 */
","/**
     * The west plug-in panel.
     */
    private final JPanel pluginPanelWest = new TransparentPanel();",False,False,"/** 
 * The west plug-in panel.
 */
",False,"/** 
 * The west plug-in panel.
 */
"
15,pluginPanelEast,plugin panel east the east plug in panel ,Field,,,,,109,4,18,"/** 
 * The east plug-in panel.
 */
","/**
     * The east plug-in panel.
     */
    private final JPanel pluginPanelEast = new TransparentPanel();",False,False,"/** 
 * The east plug-in panel.
 */
",False,"/** 
 * The east plug-in panel.
 */
"
16,contactListPanel,contact list panel the container containing the contact list ,Field,MainFrame() addAccount(ProtocolProviderService) getContactListPanel(),,,,107,4,2,"/** 
 * The container containing the contact list.
 */
","/**
     * The container containing the contact list.
     */
    private ContactListPane contactListPanel;",False,False,"/** 
 * The container containing the contact list.
 */
",False,"/** 
 * The container containing the contact list.
 */
"
17,MainFrame(),main frame invoked when a window has been opened ,Method,,,net.java.sip.communicator.impl.gui.utils.ConfigurationManager+isWindowDecorated() net.java.sip.communicator.impl.gui.utils.ConfigurationManager+isWindowDecorated() java.awt.Frame+setUndecorated(boolean) java.awt.Frame+setUndecorated(boolean) net.java.sip.communicator.impl.gui.main.contactlist.SearchField+SearchField(MainFrame) net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+ContactListPane(MainFrame) net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+AccountStatusPanel(MainFrame) net.java.sip.communicator.impl.gui.main.menus.MainMenu+MainMenu(MainFrame) java.awt.Window+addWindowListener(WindowListener) java.awt.Window+addWindowListener(WindowListener) +() +windowClosed(WindowEvent),net.java.sip.communicator.impl.gui.main.MainFrame+searchField net.java.sip.communicator.impl.gui.main.MainFrame+searchField net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel net.java.sip.communicator.impl.gui.main.MainFrame+accountStatusPanel net.java.sip.communicator.impl.gui.main.MainFrame+accountStatusPanel net.java.sip.communicator.impl.gui.main.MainFrame+menu,1739,60,1,"/** 
 * Invoked when a window has been opened.
 */
","/**
     * Creates an instance of <tt>MainFrame</tt>.
     */
    public MainFrame()
    {
        if (!ConfigurationManager.isWindowDecorated())
        {
            this.setUndecorated(true);
        }

        this.searchField = new SearchField(this);

        this.contactListPanel = new ContactListPane(this);

        this.accountStatusPanel = new AccountStatusPanel(this);

        menu = new MainMenu(this);

        /*
         * If the application is configured to quit when this frame is closed,
         * do so.
         */
        this.addWindowListener(new WindowAdapter()
        {
            /**
             * Invoked when a window has been closed.
             */
            public void windowClosed(WindowEvent event)
            {
                MainFrame.this.windowClosed(event);
            }
            /**
             * Invoked when a window has been opened.
             */
            public void windowOpened(WindowEvent e)
            {
                GuiActivator.getContactList().requestFocusInWindow();
            }
        });

        this.initTitleFont();

        ResourceManagementService resources = GuiActivator.getResources();
        String applicationName
            = resources.getSettingsString(""service.gui.APPLICATION_NAME"");

        this.setTitle(applicationName);

        this.mainPanel.setBackground(new Color(
                GuiActivator.getResources()
                    .getColor(""service.gui.MAIN_WINDOW_BACKGROUND"")));

        KeyboardFocusManager keyManager
            = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        keyManager.addKeyEventDispatcher(new MainKeyDispatcher(keyManager));

        this.init();

        this.initPluginComponents();
    }",False,False,"The function of this method is to create an instance of the MainFrame class. It sets the window decoration based on the configuration, initializes various panels and components, sets the title of the frame, sets the background color, adds a window listener to handle window closing and opening events, adds a key event dispatcher, and calls the init and initPluginComponents methods.",False,"The code defines a constructor for the MainFrame class. It initializes various components of the frame, sets the window decoration based on a configuration, adds a window listener to handle closing events, sets the title of the frame, sets the background color, adds a key event dispatcher, and initializes plugin components."
18,requestFocusInCenterPanel(),request focus in center panel requests the focus in the center panel which contains either the contact list or the unknown contact panel ,Method,,net.java.sip.communicator.impl.gui.main.contactlist.SearchField+actionPerformed(ActionEvent),javax.swing.JComponent+requestFocusInWindow() javax.swing.JComponent+requestFocusInWindow(),net.java.sip.communicator.impl.gui.main.MainFrame+centerPanel,234,8,1,"/** 
 * Requests the focus in the center panel, which contains either the contact list or the unknown contact panel.
 */
","/**
     * Requests the focus in the center panel, which contains either the
     * contact list or the unknown contact panel.
     */
    public void requestFocusInCenterPanel()
    {
        centerPanel.requestFocusInWindow();
    }",False,False,"This method requests the focus in the center panel, which can contain either the contact list or the unknown contact panel.",True,"The method ""requestFocusInCenterPanel"" is used to request focus on the center panel of a user interface. This panel can contain either a contact list or an unknown contact panel. The method achieves this by calling the ""requestFocusInWindow"" method on the center panel."
19,init(),init initiates the content of this frame ,Method,,,"javax.swing.JFrame+setDefaultCloseOperation(int) javax.swing.JFrame+setDefaultCloseOperation(int) net.java.sip.communicator.impl.gui.UIServiceImpl+getExitOnMainWindowClose() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getExitOnMainWindowClose() net.java.sip.communicator.util.swing.SIPCommFrame+addKeybindingAction(String,Action) net.java.sip.communicator.util.swing.SIPCommFrame+addKeybindingAction(String,Action) net.java.sip.communicator.impl.gui.main.MainFrame.RenameAction+RenameAction() javax.swing.InputMap+remove(KeyStroke) javax.swing.JComponent+getInputMap(int) javax.swing.JFrame+getRootPane() javax.swing.JFrame+getRootPane() javax.swing.JComponent+getInputMap(int) javax.swing.InputMap+remove(KeyStroke) javax.swing.KeyStroke+getKeyStroke(int,int) javax.swing.KeyStroke+getKeyStroke(int,int) net.java.sip.communicator.util.swing.TransparentPanel+TransparentPanel(LayoutManager) java.awt.BorderLayout+BorderLayout(int,int) javax.swing.JFrame+setJMenuBar(JMenuBar) javax.swing.JFrame+setJMenuBar(JMenuBar) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) net.java.sip.communicator.util.swing.TransparentPanel+TransparentPanel(LayoutManager) java.awt.BorderLayout+BorderLayout(int,int) javax.swing.JComponent+setBorder(Border) javax.swing.JComponent+setBorder(Border) javax.swing.BorderFactory+createEmptyBorder(int,int,int,int) javax.swing.BorderFactory+createEmptyBorder(int,int,int,int) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) net.java.sip.communicator.impl.gui.main.call.CallHistoryButton+CallHistoryButton() java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) javax.swing.JFrame+getContentPane() javax.swing.JFrame+getContentPane() java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object)",javax.swing.WindowConstants+DISPOSE_ON_CLOSE javax.swing.WindowConstants+HIDE_ON_CLOSE javax.swing.JComponent+WHEN_ANCESTOR_OF_FOCUSED_COMPONENT java.awt.event.KeyEvent+VK_ESCAPE net.java.sip.communicator.impl.gui.main.MainFrame+menu net.java.sip.communicator.impl.gui.main.MainFrame+accountStatusPanel java.awt.BorderLayout+CENTER net.java.sip.communicator.impl.gui.main.MainFrame+searchField java.awt.BorderLayout+EAST net.java.sip.communicator.impl.gui.main.MainFrame+centerPanel java.awt.BorderLayout+NORTH net.java.sip.communicator.impl.gui.main.MainFrame+centerPanel net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel java.awt.BorderLayout+CENTER net.java.sip.communicator.impl.gui.main.MainFrame+mainPanel net.java.sip.communicator.impl.gui.main.MainFrame+mainPanel java.awt.BorderLayout+NORTH net.java.sip.communicator.impl.gui.main.MainFrame+mainPanel net.java.sip.communicator.impl.gui.main.MainFrame+mainPanel net.java.sip.communicator.impl.gui.main.MainFrame+centerPanel java.awt.BorderLayout+CENTER net.java.sip.communicator.impl.gui.main.MainFrame+mainPanel java.awt.BorderLayout+CENTER net.java.sip.communicator.impl.gui.main.MainFrame+statusBarPanel java.awt.BorderLayout+SOUTH,1627,43,2,"/** 
 * Initiates the content of this frame.
 */
","/**
     * Initiates the content of this frame.
     */
    private void init()
    {
        setDefaultCloseOperation(
            GuiActivator.getUIService().getExitOnMainWindowClose()
                ? JFrame.DISPOSE_ON_CLOSE
                : JFrame.HIDE_ON_CLOSE);

        this.setKeybindingInput(KeybindingSet.Category.MAIN);
        this.addKeybindingAction(""main-rename"",
                                new RenameAction());

        // Remove the default escape key mapping as its a special
        // one for the main frame and the contactlist
        getRootPane().getInputMap(
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT)
                .remove(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0));

        TransparentPanel northPanel
            = new TransparentPanel(new BorderLayout(0, 0));

        this.setJMenuBar(menu);

        northPanel.add(accountStatusPanel, BorderLayout.CENTER);

        TransparentPanel searchPanel
            = new TransparentPanel(new BorderLayout(2, 0));
        searchPanel.setBorder(BorderFactory.createEmptyBorder(0, 5, 5, 5));
        searchPanel.add(searchField);
        searchPanel.add(new CallHistoryButton(), BorderLayout.EAST);

        centerPanel.add(searchPanel, BorderLayout.NORTH);
        centerPanel.add(contactListPanel, BorderLayout.CENTER);

        this.mainPanel.add(northPanel, BorderLayout.NORTH);
        this.mainPanel.add(centerPanel, BorderLayout.CENTER);

        java.awt.Container contentPane = getContentPane();
        contentPane.add(mainPanel, BorderLayout.CENTER);
        contentPane.add(statusBarPanel, BorderLayout.SOUTH);
    }",False,False,"The function of this method is to initialize the content of a frame by setting the default close operation, setting keybindings, adding panels and components to the frame, and setting the content pane.",False,"The `init()` method initializes the content of a frame by setting the default close operation, adding keybindings, creating panels for the north and center sections, adding components to these panels, and finally adding the panels to the main panel and the content pane of the frame."
20,initBounds(),init bounds sets frame size and position ,Method,,net.java.sip.communicator.impl.gui.UIServiceImpl+loadApplicationGui(),"net.java.sip.communicator.service.resources.ResourceManagementService+getSettingsInt(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.service.resources.ResourceManagementService+getSettingsInt(String) net.java.sip.communicator.service.resources.ResourceManagementService+getSettingsInt(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.service.resources.ResourceManagementService+getSettingsInt(String) net.java.sip.communicator.service.resources.ResourceManagementService+getSettingsInt(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.service.resources.ResourceManagementService+getSettingsInt(String) net.java.sip.communicator.service.resources.ResourceManagementService+getSettingsInt(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.service.resources.ResourceManagementService+getSettingsInt(String) java.awt.Component+setMinimumSize(Dimension) javax.swing.JFrame+getContentPane() javax.swing.JFrame+getContentPane() java.awt.Component+setMinimumSize(Dimension) java.awt.Dimension+Dimension(int,int) java.awt.Window+setSize(int,int) java.awt.Window+setSize(int,int) java.awt.Window+setLocation(int,int) java.awt.Window+setLocation(int,int) java.awt.Toolkit+getScreenSize() java.awt.Toolkit+getDefaultToolkit() java.awt.Toolkit+getDefaultToolkit() java.awt.Toolkit+getScreenSize() java.awt.Component+getWidth() java.awt.Component+getWidth()",java.awt.Dimension+width java.awt.Dimension+width,775,24,1,"/** 
 * Sets frame size and position.
 */
","/**
     * Sets frame size and position.
     */
    public void initBounds()
    {
        int width = GuiActivator.getResources()
            .getSettingsInt(""impl.gui.MAIN_WINDOW_WIDTH"");

        int height = GuiActivator.getResources()
            .getSettingsInt(""impl.gui.MAIN_WINDOW_HEIGHT"");

        int minWidth = GuiActivator.getResources()
            .getSettingsInt(""impl.gui.MAIN_WINDOW_MIN_WIDTH"");

        int minHeight = GuiActivator.getResources()
            .getSettingsInt(""impl.gui.MAIN_WINDOW_MIN_HEIGHT"");

        this.getContentPane().setMinimumSize(new Dimension(minWidth, minHeight));

        this.setSize(width, height);

        this.setLocation(Toolkit.getDefaultToolkit().getScreenSize().width
                - this.getWidth(), 50);
    }",False,False,"This method sets the size and position of a frame in a GUI application. It retrieves the width, height, minimum width, and minimum height from the application's resources. It then sets the minimum size of the frame's content pane, sets the size of the frame, and positions it at the top right corner of the screen.",False,"The `initBounds()` method sets the size and position of a frame. It retrieves the width, height, minimum width, and minimum height values from the resources. It then sets the minimum size, size, and location of the frame accordingly."
21,initTitleFont(),init title font initialize main window font ,Method,,,"javax.swing.JFrame+getLayeredPane() javax.swing.JFrame+getLayeredPane() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.service.resources.ResourceManagementService+getSettingsString(String) net.java.sip.communicator.service.resources.ResourceManagementService+getSettingsString(String) net.java.sip.communicator.service.resources.ResourceManagementService+getSettingsString(String) net.java.sip.communicator.service.resources.ResourceManagementService+getSettingsString(String) java.awt.Font+Font(String,int,int) java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String) java.awt.Container+getComponentCount() java.awt.Container+getComponentCount() java.awt.Component+setFont(Font) java.awt.Container+getComponent(int) java.awt.Container+getComponent(int) java.awt.Component+setFont(Font)",java.awt.Font+BOLD,759,24,2,"/** 
 * Initialize main window font.
 */
","/**
     * Initialize main window font.
     */
    private void initTitleFont()
    {
        JComponent layeredPane = this.getLayeredPane();

        ResourceManagementService resources = GuiActivator.getResources();
        String fontName
            = resources.getSettingsString(""service.gui.FONT_NAME"");

        String titleFontSize
            = resources.getSettingsString(""service.gui.FONT_SIZE"");

        Font font = new Font(   fontName,
                                Font.BOLD,
                                Integer.parseInt(titleFontSize));

        final int componentCount = layeredPane.getComponentCount();
        for (int i = 0; i < componentCount; i++)
        {
            layeredPane.getComponent(i).setFont(font);
        }
    }",False,False,This method initializes the font for the main window by setting the font of all components in the layered pane to a specified font and size.,False,This code initializes the font for the main window by retrieving the font name and size from the resource settings. It then sets the font for all components in the layered pane of the window to the specified font.
22,enableUnknownContactView(boolean),enable unknown contact view is enabled enters or exits the unknown contact view this view will propose to the user some specific operations if the current filter doesn t match any contacts param is enabled true to enable the unknown contact view false otherwise ,Method,,net.java.sip.communicator.impl.gui.main.contactlist.SearchField+run(),"net.java.sip.communicator.impl.gui.main.contactlist.UnknownContactPanel+UnknownContactPanel(MainFrame) java.awt.Component+getParent() java.awt.Component+getParent() javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Component+getParent() java.awt.Component+getParent() javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) java.awt.Container+remove(Component) java.awt.Container+remove(Component) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) javax.swing.JComponent+revalidate() javax.swing.JComponent+revalidate() java.awt.Component+repaint() java.awt.Component+repaint()",net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel net.java.sip.communicator.impl.gui.main.MainFrame+centerPanel net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel net.java.sip.communicator.impl.gui.main.MainFrame+centerPanel net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel net.java.sip.communicator.impl.gui.main.MainFrame+centerPanel net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel java.awt.BorderLayout+CENTER net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel net.java.sip.communicator.impl.gui.main.MainFrame+centerPanel net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel net.java.sip.communicator.impl.gui.main.MainFrame+centerPanel net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel net.java.sip.communicator.impl.gui.main.MainFrame+centerPanel net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel java.awt.BorderLayout+CENTER net.java.sip.communicator.impl.gui.main.MainFrame+centerPanel net.java.sip.communicator.impl.gui.main.MainFrame+centerPanel,1369,38,1,"/** 
 * Enters or exits the ""unknown contact"" view. This view will propose to the user some specific operations if the current filter doesn't match any contacts.
 * @param isEnabled <tt>true</tt> to enable the ""unknown contact"" view,<tt>false</tt> - otherwise.
 */
","/**
     * Enters or exits the ""unknown contact"" view. This view will propose to
     * the user some specific operations if the current filter doesn't match
     * any contacts.
     * @param isEnabled <tt>true</tt> to enable the ""unknown contact"" view,
     * <tt>false</tt> - otherwise.
     */
    public void enableUnknownContactView(boolean isEnabled)
    {
        if (isEnabled)
        {
            if (unknownContactPanel == null)
                unknownContactPanel = new UnknownContactPanel(this);

            if (unknownContactPanel.getParent() != centerPanel)
            {
                contactListPanel.setVisible(false);
                unknownContactPanel.setVisible(true);
                centerPanel.remove(contactListPanel);
                centerPanel.add(unknownContactPanel, BorderLayout.CENTER);
            }
        }
        else
        {
            if (contactListPanel.getParent() != centerPanel)
            {
                if (unknownContactPanel != null)
                {
                    unknownContactPanel.setVisible(false);
                    centerPanel.remove(unknownContactPanel);
                }
                contactListPanel.setVisible(true);
                centerPanel.add(contactListPanel, BorderLayout.CENTER);
            }
        }
        centerPanel.revalidate();
        centerPanel.repaint();
    }",False,False,"This method enables or disables the ""unknown contact"" view. If enabled, it creates the view if it doesn't exist and adds it to the center panel. If disabled, it removes the ""unknown contact"" view from the center panel and adds the contact list view. Finally, it revalidates and repaints the center panel.",True,"This code defines a method called ""enableUnknownContactView"" that toggles the visibility of a panel based on a boolean parameter. If the parameter is true, the method creates and displays an ""unknown contact"" panel, otherwise it displays a contact list panel. The method also updates the center panel to reflect the changes."
23,setContactList(MetaContactListService),set contact list contact list initializes the contact list panel param contact list the meta contact list service containingthe contact list data ,Method,,net.java.sip.communicator.impl.gui.UIServiceImpl+loadApplicationGui(),net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+initList(MetaContactListService) net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+initList(MetaContactListService),net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel,291,10,1,"/** 
 * Initializes the contact list panel.
 * @param contactList The <tt>MetaContactListService</tt> containingthe contact list data.
 */
","/**
     * Initializes the contact list panel.
     *
     * @param contactList The <tt>MetaContactListService</tt> containing
     * the contact list data.
     */
    public void setContactList(MetaContactListService contactList)
    {
        contactListPanel.initList(contactList);
    }",False,False,This method initializes the contact list panel by passing the contact list data to the contactListPanel object.,True,"The method ""setContactList"" initializes the contact list panel by passing a MetaContactListService object as a parameter. It then calls the ""initList"" method of the contactListPanel object to initialize the contact list with the provided data."
24,addProtocolSupportedOperationSets(ProtocolProviderService),add protocol supported operation sets protocol provider adds all protocol supported operation sets param protocol provider the protocol provider ,Method,addProtocolProvider(ProtocolProviderService),,net.java.sip.communicator.service.protocol.ProtocolProviderService+getSupportedOperationSets() net.java.sip.communicator.service.protocol.ProtocolProviderService+getSupportedOperationSets() java.lang.Class+getName() java.lang.Class+getName() java.lang.Class+getName() java.lang.Class+getName() java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.service.protocol.OperationSetPresence+addProviderPresenceStatusListener(ProviderPresenceStatusListener) net.java.sip.communicator.service.protocol.OperationSetPresence+addProviderPresenceStatusListener(ProviderPresenceStatusListener) net.java.sip.communicator.impl.gui.main.MainFrame.GUIProviderPresenceStatusListener+GUIProviderPresenceStatusListener() net.java.sip.communicator.service.protocol.OperationSetPresence+addContactPresenceStatusListener(ContactPresenceStatusListener) net.java.sip.communicator.service.protocol.OperationSetPresence+addContactPresenceStatusListener(ContactPresenceStatusListener) net.java.sip.communicator.impl.gui.GuiActivator+getContactList() net.java.sip.communicator.impl.gui.GuiActivator+getContactList() java.lang.Class+getName() java.lang.Class+getName() java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+addMessageListener(MessageListener) net.java.sip.communicator.service.protocol.OperationSetBasicInstantMessaging+addMessageListener(MessageListener) net.java.sip.communicator.impl.gui.main.MainFrame+getContactListPanel() net.java.sip.communicator.impl.gui.main.MainFrame+getContactListPanel() java.lang.Class+getName() java.lang.Class+getName() java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.service.protocol.OperationSetTypingNotifications+addTypingNotificationsListener(TypingNotificationsListener) net.java.sip.communicator.service.protocol.OperationSetTypingNotifications+addTypingNotificationsListener(TypingNotificationsListener) net.java.sip.communicator.impl.gui.main.MainFrame+getContactListPanel() net.java.sip.communicator.impl.gui.main.MainFrame+getContactListPanel() java.lang.Class+getName() java.lang.Class+getName() java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.service.protocol.OperationSetBasicTelephony+addCallListener(CallListener) net.java.sip.communicator.service.protocol.OperationSetBasicTelephony+addCallListener(CallListener) net.java.sip.communicator.impl.gui.main.call.CallManager.GuiCallListener+GuiCallListener() java.lang.Class+getName() java.lang.Class+getName() java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.impl.gui.UIServiceImpl+getConferenceChatManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getConferenceChatManager() net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+addInvitationListener(ChatRoomInvitationListener) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+addInvitationListener(ChatRoomInvitationListener) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+addInvitationRejectionListener(ChatRoomInvitationRejectionListener) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+addInvitationRejectionListener(ChatRoomInvitationRejectionListener) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+addPresenceListener(LocalUserChatRoomPresenceListener) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+addPresenceListener(LocalUserChatRoomPresenceListener) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.impl.gui.UIServiceImpl+getConferenceChatManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getConferenceChatManager() net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+addInvitationListener(AdHocChatRoomInvitationListener) net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+addInvitationListener(AdHocChatRoomInvitationListener) net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+addInvitationRejectionListener(AdHocChatRoomInvitationRejectionListener) net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+addInvitationRejectionListener(AdHocChatRoomInvitationRejectionListener) net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+addPresenceListener(LocalUserAdHocChatRoomPresenceListener) net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+addPresenceListener(LocalUserAdHocChatRoomPresenceListener) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.OperationSetFileTransfer+addFileTransferListener(FileTransferListener) net.java.sip.communicator.service.protocol.OperationSetFileTransfer+addFileTransferListener(FileTransferListener) net.java.sip.communicator.impl.gui.main.MainFrame+getContactListPanel() net.java.sip.communicator.impl.gui.main.MainFrame+getContactListPanel(),,4794,118,1,"/** 
 * Adds all protocol supported operation sets.
 * @param protocolProvider The protocol provider.
 */
","/**
     * Adds all protocol supported operation sets.
     *
     * @param protocolProvider The protocol provider.
     */
    public void addProtocolSupportedOperationSets(
            ProtocolProviderService protocolProvider)
    {
        Map<String, OperationSet> supportedOperationSets
            = protocolProvider.getSupportedOperationSets();

        String ppOpSetClassName = OperationSetPersistentPresence
                                    .class.getName();
        String pOpSetClassName = OperationSetPresence.class.getName();

        // Obtain the presence operation set.
        if (supportedOperationSets.containsKey(ppOpSetClassName)
                || supportedOperationSets.containsKey(pOpSetClassName))
        {
            OperationSetPresence presence = (OperationSetPresence)
                supportedOperationSets.get(ppOpSetClassName);

            if(presence == null) {
                presence = (OperationSetPresence)
                    supportedOperationSets.get(pOpSetClassName);
            }

            presence.addProviderPresenceStatusListener(
                        new GUIProviderPresenceStatusListener());
            presence.addContactPresenceStatusListener(
                        GuiActivator.getContactList());
        }

        // Obtain the basic instant messaging operation set.
        String imOpSetClassName = OperationSetBasicInstantMessaging
                                    .class.getName();

        if (supportedOperationSets.containsKey(imOpSetClassName))
        {
            OperationSetBasicInstantMessaging im
                = (OperationSetBasicInstantMessaging)
                    supportedOperationSets.get(imOpSetClassName);

            //Add to all instant messaging operation sets the Message
            //listener implemented in the ContactListPanel, which handles
            //all received messages.
            im.addMessageListener(getContactListPanel());
        }

        // Obtain the typing notifications operation set.
        String tnOpSetClassName = OperationSetTypingNotifications
                                    .class.getName();

        if (supportedOperationSets.containsKey(tnOpSetClassName))
        {
            OperationSetTypingNotifications tn
                = (OperationSetTypingNotifications)
                    supportedOperationSets.get(tnOpSetClassName);

            //Add to all typing notification operation sets the Message
            //listener implemented in the ContactListPanel, which handles
            //all received messages.
            tn.addTypingNotificationsListener(this.getContactListPanel());
        }

        // Obtain the basic telephony operation set.
        String telOpSetClassName = OperationSetBasicTelephony.class.getName();

        if (supportedOperationSets.containsKey(telOpSetClassName))
        {
            OperationSetBasicTelephony telephony
                = (OperationSetBasicTelephony)
                    supportedOperationSets.get(telOpSetClassName);

            telephony.addCallListener(new CallManager.GuiCallListener());
        }

        // Obtain the multi user chat operation set.
        String multiChatClassName = OperationSetMultiUserChat.class.getName();

        if (supportedOperationSets.containsKey(multiChatClassName))
        {
            OperationSetMultiUserChat multiUserChat
                = (OperationSetMultiUserChat)
                    supportedOperationSets.get(multiChatClassName);

            ConferenceChatManager conferenceManager
                = GuiActivator.getUIService().getConferenceChatManager();

            multiUserChat.addInvitationListener(conferenceManager);
            multiUserChat.addInvitationRejectionListener(conferenceManager);
            multiUserChat.addPresenceListener(conferenceManager);
        }

        // Obtain the ad-hoc multi user chat operation set.
        OperationSetAdHocMultiUserChat adHocMultiChatOpSet
            = protocolProvider
                .getOperationSet(OperationSetAdHocMultiUserChat.class);

        if (adHocMultiChatOpSet != null)
        {
            ConferenceChatManager conferenceManager
                = GuiActivator.getUIService().getConferenceChatManager();

            adHocMultiChatOpSet.addInvitationListener(conferenceManager);
            adHocMultiChatOpSet.addInvitationRejectionListener(conferenceManager);
            adHocMultiChatOpSet.addPresenceListener(conferenceManager);
        }

        // Obtain file transfer operation set.
        OperationSetFileTransfer fileTransferOpSet
            = protocolProvider.getOperationSet(OperationSetFileTransfer.class);

        if (fileTransferOpSet != null)
        {
            fileTransferOpSet.addFileTransferListener(getContactListPanel());
        }
    }",False,False,"This method adds various operation sets to a protocol provider. These operation sets include presence, instant messaging, typing notifications, telephony, multi-user chat, ad-hoc multi-user chat, and file transfer.",True,"This code adds various operation sets to a protocol provider. It obtains and adds operation sets for presence, instant messaging, typing notifications, telephony, multi-user chat, ad-hoc multi-user chat, and file transfer."
25,getProtocolProviders(),get protocol providers returns a set of all protocol providers return a set of all protocol providers ,Method,,net.java.sip.communicator.impl.gui.main.call.conference.ConferenceInviteDialog+initAccountListData() net.java.sip.communicator.impl.gui.main.chatroomslist.createforms.CreateChatRoomWizard+CreateChatRoomWizard(MainFrame) net.java.sip.communicator.impl.gui.main.contactlist.AddContactDialog+initAccountCombo() net.java.sip.communicator.impl.gui.main.presence.GlobalStatusSelectorBox+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.presence.GlobalStatusSelectorBox+updateGlobalStatus(),java.util.AbstractSequentialList+iterator() java.util.LinkedList+LinkedList(Collection) java.util.HashMap+keySet() java.util.HashMap+keySet() java.util.AbstractSequentialList+iterator(),net.java.sip.communicator.impl.gui.main.MainFrame+protocolProviders,339,11,1,"/** 
 * Returns a set of all protocol providers.
 * @return a set of all protocol providers.
 */
","/**
     * Returns a set of all protocol providers.
     *
     * @return a set of all protocol providers.
     */
    public Iterator<ProtocolProviderService> getProtocolProviders()
    {
        return new LinkedList<ProtocolProviderService>(
                        protocolProviders.keySet())
                        .iterator();
    }",False,False,This method returns an iterator that provides a set of all protocol providers.,True,"This code defines a method called ""getProtocolProviders"" that returns an iterator of all protocol providers. It creates a new LinkedList containing the keys of the protocolProviders map and returns an iterator for that list."
26,getProtocolProviderForAccount(String),get protocol provider for account account name returns the protocol provider associated to the account given by the account user identifier param account name the account user identifier return the protocol provider associated to the given account ,Method,,,java.util.HashMap+keySet() java.util.HashMap+keySet() java.lang.String+equals(Object) net.java.sip.communicator.service.protocol.AccountID+getUserID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getUserID() java.lang.String+equals(Object),net.java.sip.communicator.impl.gui.main.MainFrame+protocolProviders,596,19,1,"/** 
 * Returns the protocol provider associated to the account given by the account user identifier.
 * @param accountName The account user identifier.
 * @return The protocol provider associated to the given account.
 */
","/**
     * Returns the protocol provider associated to the account given
     * by the account user identifier.
     *
     * @param accountName The account user identifier.
     * @return The protocol provider associated to the given account.
     */
    public ProtocolProviderService getProtocolProviderForAccount(
            String accountName)
    {
        for (ProtocolProviderService pps : protocolProviders.keySet())
        {
            if (pps.getAccountID().getUserID().equals(accountName))
            {
               return pps;
            }
        }
        return null;
    }",False,False,"This method returns the protocol provider associated with a given account user identifier. It searches for the protocol provider in a map of protocol providers using the account user identifier as a key. If found, it returns the protocol provider; otherwise, it returns null.",True,"This code defines a method named ""getProtocolProviderForAccount"" that takes an account name as input and returns the protocol provider associated with that account. It iterates through a collection of protocol providers and checks if the account name matches the user identifier of each provider's account. If a match is found, the corresponding protocol provider is returned; otherwise, null is returned."
27,addProtocolProvider(ProtocolProviderService),add protocol provider protocol provider adds a protocol provider param protocol provider the protocol provider to add ,Method,,net.java.sip.communicator.impl.gui.main.login.LoginManager+runLogin(MainFrame) net.java.sip.communicator.impl.gui.main.login.LoginManager+handleProviderAdded(ProtocolProviderService),"net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.service.protocol.AccountID+getAccountAddress() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getAccountAddress() java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) net.java.sip.communicator.impl.gui.main.MainFrame+initiateProviderIndex(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.MainFrame+initiateProviderIndex(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.MainFrame+addProtocolSupportedOperationSets(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.MainFrame+addProtocolSupportedOperationSets(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.MainFrame+addAccount(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.MainFrame+addAccount(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.MainFrame+getContactHandlerForProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.MainFrame+getContactHandlerForProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.DefaultContactEventHandler+DefaultContactEventHandler(MainFrame) net.java.sip.communicator.impl.gui.main.MainFrame+addProviderContactHandler(ProtocolProviderService,ContactEventHandler) net.java.sip.communicator.impl.gui.main.MainFrame+addProviderContactHandler(ProtocolProviderService,ContactEventHandler)",net.java.sip.communicator.impl.gui.main.MainFrame+logger net.java.sip.communicator.impl.gui.main.MainFrame+logger net.java.sip.communicator.impl.gui.main.MainFrame+protocolProviders net.java.sip.communicator.impl.gui.main.MainFrame+protocolProviders,889,25,1,"/** 
 * Adds a protocol provider.
 * @param protocolProvider The protocol provider to add.
 */
","/**
     * Adds a protocol provider.
     * @param protocolProvider The protocol provider to add.
     */
    public void addProtocolProvider(ProtocolProviderService protocolProvider)
    {
        if (logger.isTraceEnabled())
            logger.trace(""Add the following protocol provider to the gui: ""
            + protocolProvider.getAccountID().getAccountAddress());

        this.protocolProviders.put(protocolProvider,
                initiateProviderIndex(protocolProvider));

        this.addProtocolSupportedOperationSets(protocolProvider);

        this.addAccount(protocolProvider);

        ContactEventHandler contactHandler
            = this.getContactHandlerForProvider(protocolProvider);

        if (contactHandler == null)
            contactHandler = new DefaultContactEventHandler(this);

        this.addProviderContactHandler(protocolProvider, contactHandler);
    }",False,False,"The function of this method is to add a protocol provider to the system. It updates the protocol provider map, initiates the provider index, adds supported operation sets, adds the account, creates a contact handler if necessary, and adds the provider contact handler.",False,"This code defines a method called ""addProtocolProvider"" that adds a protocol provider to the GUI. It initializes the provider index, adds supported operation sets, adds the account, and sets up a contact handler for the provider. If no contact handler is specified, it creates a default one."
28,getProviderIndex(ProtocolProviderService),get provider index protocol provider returns the index of the given protocol provider param protocol provider the protocol provider to search for return the index of the given protocol provider ,Method,,"net.java.sip.communicator.impl.gui.utils.ImageLoader+badgeImageWithProtocolIndex(Image,ProtocolProviderService)",java.util.HashMap+get(Object) java.util.HashMap+get(Object),net.java.sip.communicator.impl.gui.main.MainFrame+protocolProviders,375,11,1,"/** 
 * Returns the index of the given protocol provider.
 * @param protocolProvider the protocol provider to search for
 * @return the index of the given protocol provider
 */
","/**
     * Returns the index of the given protocol provider.
     * @param protocolProvider the protocol provider to search for
     * @return the index of the given protocol provider
     */
    public int getProviderIndex(ProtocolProviderService protocolProvider)
    {
        Integer o = protocolProviders.get(protocolProvider);

        return (o != null) ? o : 0;
    }",False,False,"This method returns the index of a given protocol provider. If the provider is found in the protocolProviders map, its index is returned. Otherwise, 0 is returned.",True,"This code defines a method called ""getProviderIndex"" that takes a ProtocolProviderService object as input and returns the index of that object in a map called ""protocolProviders"". If the object is not found in the map, it returns 0."
29,addAccount(ProtocolProviderService),add account protocol provider adds an account to the application param protocol provider the protocol provider of the account ,Method,addProtocolProvider(ProtocolProviderService),,net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+containsAccount(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+containsAccount(ProtocolProviderService) net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.service.protocol.AccountID+getAccountAddress() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getAccountAddress() net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+addAccount(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+addAccount(ProtocolProviderService) javax.swing.JComponent+requestFocus() net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+getContactList() net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+getContactList() javax.swing.JComponent+requestFocus(),net.java.sip.communicator.impl.gui.main.MainFrame+accountStatusPanel net.java.sip.communicator.impl.gui.main.MainFrame+logger net.java.sip.communicator.impl.gui.main.MainFrame+logger net.java.sip.communicator.impl.gui.main.MainFrame+accountStatusPanel net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel,756,21,1,"/** 
 * Adds an account to the application.
 * @param protocolProvider The protocol provider of the account.
 */
","/**
     * Adds an account to the application.
     *
     * @param protocolProvider The protocol provider of the account.
     */
    public void addAccount(ProtocolProviderService protocolProvider)
    {
        if (!accountStatusPanel.containsAccount(protocolProvider))
        {
            if (logger.isTraceEnabled())
                logger.trace(""Add the following account to the status bar: ""
                + protocolProvider.getAccountID().getAccountAddress());

            accountStatusPanel.addAccount(protocolProvider);

            //request the focus in the contact list panel, which
            //permits to search in the contact list
            this.contactListPanel.getContactList()
                    .requestFocus();
        }
    }",False,False,This method adds an account to the application if it is not already present. It also logs the addition of the account and requests focus on the contact list panel.,True,"This code defines a method called ""addAccount"" that adds a new account to the application. It takes a protocol provider as a parameter and checks if the account is already present in the status bar. If not, it adds the account to the status bar and requests focus on the contact list panel."
30,removeProtocolProvider(ProtocolProviderService),remove protocol provider protocol provider adds an account to the application param protocol provider the protocol provider of the account ,Method,,net.java.sip.communicator.impl.gui.main.login.LoginManager+handleProviderRemoved(ProtocolProviderService),java.util.HashMap+remove(Object) java.util.HashMap+remove(Object) net.java.sip.communicator.impl.gui.main.MainFrame+updateProvidersIndexes(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.MainFrame+updateProvidersIndexes(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+containsAccount(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+containsAccount(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+removeAccount(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+removeAccount(ProtocolProviderService),net.java.sip.communicator.impl.gui.main.MainFrame+protocolProviders net.java.sip.communicator.impl.gui.main.MainFrame+protocolProviders net.java.sip.communicator.impl.gui.main.MainFrame+accountStatusPanel net.java.sip.communicator.impl.gui.main.MainFrame+accountStatusPanel,486,15,1,"/** 
 * Adds an account to the application.
 * @param protocolProvider The protocol provider of the account.
 */
","/**
     * Adds an account to the application.
     *
     * @param protocolProvider The protocol provider of the account.
     */
    public void removeProtocolProvider(ProtocolProviderService protocolProvider)
    {
        this.protocolProviders.remove(protocolProvider);
        this.updateProvidersIndexes(protocolProvider);

        if (accountStatusPanel.containsAccount(protocolProvider))
        {
            accountStatusPanel.removeAccount(protocolProvider);
        }
    }",False,False,"This method removes a protocol provider account from the application. It removes the provider from the list of protocol providers, updates the indexes of the providers, and removes the account from the account status panel if it is present.",True,"This code defines a method called ""removeProtocolProvider"" that removes a specified protocol provider from the application. It updates the list of protocol providers and removes the account from the account status panel if it is currently displayed."
31,getAccount(ProtocolProviderService),get account protocol provider returns the account user id for the given protocol provider param protocol provider the protocol provider corresponding to theaccount to add return the account user id for the given protocol provider ,Method,,"net.java.sip.communicator.impl.gui.main.chat.ChatPanel+processHistory(Collection<Object>,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+processHistory(Collection<Object>,String) net.java.sip.communicator.impl.gui.main.chat.history.HistoryWindow+createHistory(Collection<Object>) net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+messageDelivered(MessageDeliveredEvent)",net.java.sip.communicator.service.protocol.AccountID+getUserID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getUserID(),,386,10,1,"/** 
 * Returns the account user id for the given protocol provider.
 * @param protocolProvider the protocol provider corresponding to theaccount to add
 * @return The account user id for the given protocol provider.
 */
","/**
     * Returns the account user id for the given protocol provider.
     * @param protocolProvider the protocol provider corresponding to the
     * account to add
     * @return The account user id for the given protocol provider.
     */
    public String getAccount(ProtocolProviderService protocolProvider)
    {
        return protocolProvider.getAccountID().getUserID();
    }",False,False,This method returns the account user id for a given protocol provider.,False,"This code defines a method called ""getAccount"" that takes a protocol provider as input and returns the account user id associated with that provider. The method retrieves the user id by accessing the account id of the protocol provider and then retrieving the user id from it."
32,getProtocolPresenceOpSet(ProtocolProviderService),get protocol presence op set protocol provider returns the presence operation set for the given protocol provider param protocol provider the protocol provider for which thepresence operation set is searched return the presence operation set for the given protocol provider ,Method,getProtocolProviderLastStatus(ProtocolProviderService),net.java.sip.communicator.impl.gui.main.login.LoginManager+registrationStateChanged(RegistrationStateChangeEvent) net.java.sip.communicator.impl.gui.main.presence.PresenceStatusMenu+updateStatus(PresenceStatus),net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>),,651,18,9,"/** 
 * Returns the presence operation set for the given protocol provider.
 * @param protocolProvider The protocol provider for which thepresence operation set is searched.
 * @return the presence operation set for the given protocol provider.
 */
","/**
     * Returns the presence operation set for the given protocol provider.
     *
     * @param protocolProvider The protocol provider for which the
     * presence operation set is searched.
     * @return the presence operation set for the given protocol provider.
     */
    public static OperationSetPresence getProtocolPresenceOpSet(
            ProtocolProviderService protocolProvider)
    {
        OperationSet opSet
            = protocolProvider.getOperationSet(OperationSetPresence.class);

        return
            (opSet instanceof OperationSetPresence)
                ? (OperationSetPresence) opSet
                : null;
    }",False,False,"This method returns the presence operation set for a given protocol provider. It takes a protocol provider as input and returns the presence operation set associated with that provider, or null if no such set exists.",False,"This code defines a method called ""getProtocolPresenceOpSet"" that takes a ProtocolProviderService object as a parameter. It retrieves the presence operation set for the given protocol provider and returns it as an OperationSetPresence object. If the operation set is not found, it returns null."
33,getWebContactInfoOpSet(ProtocolProviderService),get web contact info op set protocol provider returns the web contact info operation set for the given protocol provider param protocol provider the protocol provider for which the t nis searched return operation set web contact info the web contact info operationset for the given protocol provider ,Method,,,net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>),,683,19,1,"/** 
 * Returns the Web Contact Info operation set for the given protocol provider.
 * @param protocolProvider The protocol provider for which the TNis searched.
 * @return OperationSetWebContactInfo The Web Contact Info operationset for the given protocol provider.
 */
","/**
     * Returns the Web Contact Info operation set for the given
     * protocol provider.
     *
     * @param protocolProvider The protocol provider for which the TN
     * is searched.
     * @return OperationSetWebContactInfo The Web Contact Info operation
     * set for the given protocol provider.
     */
    public OperationSetWebContactInfo getWebContactInfoOpSet(
            ProtocolProviderService protocolProvider)
    {
        OperationSet opSet
            = protocolProvider.getOperationSet(OperationSetWebContactInfo.class);

        return (opSet instanceof OperationSetWebContactInfo)
            ? (OperationSetWebContactInfo) opSet
            : null;
    }",True,True,"This method returns the Web Contact Info operation set for a given protocol provider. It takes a protocol provider as a parameter and returns the OperationSetWebContactInfo for that provider, or null if it doesn't exist.",False,"This code defines a method called ""getWebContactInfoOpSet"" that takes a protocol provider as a parameter and returns the Web Contact Info operation set for that provider. It retrieves the operation set from the protocol provider and checks if it is an instance of OperationSetWebContactInfo before returning it, otherwise it returns null."
34,getTelephonyOpSet(ProtocolProviderService),get telephony op set protocol provider returns the telephony operation set for the given protocol provider param protocol provider the protocol provider for which the telephonyoperation set is about return operation set basic telephony the telephony operationset for the given protocol provider ,Method,,,net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>),,675,18,1,"/** 
 * Returns the telephony operation set for the given protocol provider.
 * @param protocolProvider The protocol provider for which the telephonyoperation set is about.
 * @return OperationSetBasicTelephony The telephony operationset for the given protocol provider.
 */
","/**
     * Returns the telephony operation set for the given protocol provider.
     *
     * @param protocolProvider The protocol provider for which the telephony
     * operation set is about.
     * @return OperationSetBasicTelephony The telephony operation
     * set for the given protocol provider.
     */
    public OperationSetBasicTelephony getTelephonyOpSet(
            ProtocolProviderService protocolProvider)
    {
        OperationSet opSet
            = protocolProvider.getOperationSet(OperationSetBasicTelephony.class);

        return (opSet instanceof OperationSetBasicTelephony)
            ? (OperationSetBasicTelephony) opSet
            : null;
    }",True,True,"This method returns the telephony operation set for a given protocol provider. It takes a ProtocolProviderService as input and returns an OperationSetBasicTelephony. If the operation set is not an instance of OperationSetBasicTelephony, it returns null.",False,"This code defines a method called ""getTelephonyOpSet"" that takes a ProtocolProviderService object as a parameter. It retrieves the OperationSetBasicTelephony object associated with the given protocol provider and returns it. If the retrieved object is not an instance of OperationSetBasicTelephony, it returns null."
35,getAdHocMultiUserChatOpSet(ProtocolProviderService),get ad hoc multi user chat op set protocol provider returns the multi user chat operation set for the given protocol provider param protocol provider the protocol provider for which the multi userchat operation set is about return operation set ad hoc multi user chat the telephony operationset for the given protocol provider ,Method,,,net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>),,737,19,1,"/** 
 * Returns the multi user chat operation set for the given protocol provider.
 * @param protocolProvider The protocol provider for which the multi userchat operation set is about.
 * @return OperationSetAdHocMultiUserChat The telephony operationset for the given protocol provider.
 */
","/**
     * Returns the multi user chat operation set for the given protocol provider.
     *
     * @param protocolProvider The protocol provider for which the multi user
     * chat operation set is about.
     * @return OperationSetAdHocMultiUserChat The telephony operation
     * set for the given protocol provider.
     */
    public OperationSetAdHocMultiUserChat getAdHocMultiUserChatOpSet(
            ProtocolProviderService protocolProvider)
    {
        OperationSet opSet
            = protocolProvider.getOperationSet(
                    OperationSetAdHocMultiUserChat.class);

        return (opSet instanceof OperationSetAdHocMultiUserChat)
            ? (OperationSetAdHocMultiUserChat) opSet
            : null;
    }",True,True,"This method returns the multi user chat operation set for a given protocol provider. It checks if the operation set is an instance of OperationSetAdHocMultiUserChat and returns it, otherwise it returns null.",False,"This code defines a method called ""getAdHocMultiUserChatOpSet"" that takes a protocol provider as input and returns the operation set for ad hoc multi-user chat. It retrieves the operation set from the protocol provider and checks if it is an instance of ""OperationSetAdHocMultiUserChat"" before returning it, otherwise it returns null."
36,getMultiUserChatOpSet(ProtocolProviderService),get multi user chat op set protocol provider returns the multi user chat operation set for the given protocol provider param protocol provider the protocol provider for which the multi userchat operation set is about return operation set multi user chat the telephony operationset for the given protocol provider ,Method,,net.java.sip.communicator.impl.gui.main.login.LoginManager+registrationStateChanged(RegistrationStateChangeEvent),net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>),,686,18,1,"/** 
 * Returns the multi user chat operation set for the given protocol provider.
 * @param protocolProvider The protocol provider for which the multi userchat operation set is about.
 * @return OperationSetMultiUserChat The telephony operationset for the given protocol provider.
 */
","/**
     * Returns the multi user chat operation set for the given protocol provider.
     *
     * @param protocolProvider The protocol provider for which the multi user
     * chat operation set is about.
     * @return OperationSetMultiUserChat The telephony operation
     * set for the given protocol provider.
     */
    public OperationSetMultiUserChat getMultiUserChatOpSet(
            ProtocolProviderService protocolProvider)
    {
        OperationSet opSet
            = protocolProvider.getOperationSet(OperationSetMultiUserChat.class);

        return (opSet instanceof OperationSetMultiUserChat)
            ? (OperationSetMultiUserChat) opSet
            : null;
    }",True,True,"This method returns the multi user chat operation set for a given protocol provider. It takes a protocol provider as a parameter and returns the operation set if it is of type OperationSetMultiUserChat, otherwise it returns null.",False,"This code defines a method called ""getMultiUserChatOpSet"" that takes a protocol provider as input and returns the multi user chat operation set for that provider. It retrieves the operation set from the protocol provider and checks if it is an instance of OperationSetMultiUserChat before returning it, otherwise it returns null."
37,GUIProviderPresenceStatusListener,gui provider presence status listener listens for all provider status changed and provider status message changed events in order to refresh the account status panel when a status is changed ,MemberClass,,,"net.java.sip.communicator.impl.gui.main.MainFrame.GUIProviderPresenceStatusListener+providerStatusChanged(ProviderPresenceStatusChangeEvent) net.java.sip.communicator.service.protocol.event.ProviderPresenceStatusChangeEvent+getProvider() net.java.sip.communicator.service.protocol.event.ProviderPresenceStatusChangeEvent+getProvider() net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+updateStatus(ProtocolProviderService,PresenceStatus) net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+updateStatus(ProtocolProviderService,PresenceStatus) net.java.sip.communicator.service.protocol.event.ProviderPresenceStatusChangeEvent+getNewStatus() net.java.sip.communicator.service.protocol.event.ProviderPresenceStatusChangeEvent+getNewStatus() net.java.sip.communicator.impl.gui.main.MainFrame.GUIProviderPresenceStatusListener+providerStatusMessageChanged(PropertyChangeEvent)",net.java.sip.communicator.impl.gui.main.MainFrame+accountStatusPanel,607,17,2,"/** 
 * Listens for all providerStatusChanged and providerStatusMessageChanged events in order to refresh the account status panel, when a status is changed.
 */
","/**
     * Listens for all providerStatusChanged and providerStatusMessageChanged
     * events in order to refresh the account status panel, when a status is
     * changed.
     */
    private class GUIProviderPresenceStatusListener
        implements ProviderPresenceStatusListener
    {
        public void providerStatusChanged(ProviderPresenceStatusChangeEvent evt)
        {
            ProtocolProviderService pps = evt.getProvider();

            accountStatusPanel.updateStatus(pps, evt.getNewStatus());
        }

        public void providerStatusMessageChanged(PropertyChangeEvent evt) {}
    }",False,True,"/** 
 * Listens for all providerStatusChanged and providerStatusMessageChanged events in order to refresh the account status panel, when a status is changed.
 */
",False,"/** 
 * Listens for all providerStatusChanged and providerStatusMessageChanged events in order to refresh the account status panel, when a status is changed.
 */
"
38,getContactListPanel(),get contact list panel returns the panel containing the contact list return contact list panel the panel containing the contact list ,Method,addProtocolSupportedOperationSets(ProtocolProviderService) addProtocolSupportedOperationSets(ProtocolProviderService) addProtocolSupportedOperationSets(ProtocolProviderService) close(boolean) MainKeyDispatcher.dispatchKeyEvent(KeyEvent),,,net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel,232,8,1,"/** 
 * Returns the panel containing the ContactList.
 * @return ContactListPanel the panel containing the ContactList
 */
","/**
     * Returns the panel containing the ContactList.
     * @return ContactListPanel the panel containing the ContactList
     */
    public ContactListPane getContactListPanel()
    {
        return this.contactListPanel;
    }",True,True,This method returns the panel that contains the ContactList.,True,"This code defines a method called ""getContactListPanel"" that returns the ContactListPane object. The method is used to retrieve the panel containing the ContactList. The method has a summary description and specifies the return type."
39,getCurrentSearchText(),get current search text returns the text currently shown in the search field return the text currently shown in the search field ,Method,,net.java.sip.communicator.impl.gui.main.contactlist.TreeContactList+applyDefaultFilter() net.java.sip.communicator.impl.gui.main.contactlist.UnknownContactPanel+UnknownContactPanel(MainFrame) net.java.sip.communicator.impl.gui.main.contactlist.UnknownContactPanel+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.contactlist.UnknownContactPanel+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.contactlist.UnknownContactPanel+textInserted() net.java.sip.communicator.impl.gui.main.contactlist.UnknownContactPanel+textRemoved(),net.java.sip.communicator.util.swing.SIPCommTextField+getText() net.java.sip.communicator.util.swing.SIPCommTextField+getText(),net.java.sip.communicator.impl.gui.main.MainFrame+searchField,223,8,1,"/** 
 * Returns the text currently shown in the search field.
 * @return the text currently shown in the search field
 */
","/**
     * Returns the text currently shown in the search field.
     * @return the text currently shown in the search field
     */
    public String getCurrentSearchText()
    {
        return searchField.getText();
    }",True,True,This method returns the text currently shown in the search field.,True,The code defines a method called getCurrentSearchText() that returns the text currently displayed in the search field. It is a public method that returns a String value.
40,clearCurrentSearchText(),clear current search text clears the current text in the search field ,Method,,net.java.sip.communicator.impl.gui.main.contactlist.TreeContactList+run(),net.java.sip.communicator.util.swing.SIPCommTextField+setText(String) net.java.sip.communicator.util.swing.SIPCommTextField+setText(String),net.java.sip.communicator.impl.gui.main.MainFrame+searchField,149,7,1,"/** 
 * Clears the current text in the search field.
 */
","/**
     * Clears the current text in the search field.
     */
    public void clearCurrentSearchText()
    {
        searchField.setText("""");
    }",True,True,This method clears the text in the search field by setting it to an empty string.,True,"The code defines a method called ""clearCurrentSearchText"" which is used to clear the text in a search field. It achieves this by setting the text of the search field to an empty string."
41,addSearchFieldListener(TextFieldChangeListener),add search field listener l adds the given text field change listener to listen for any changes that occur in the search field param l the text field change listener to add ,Method,,net.java.sip.communicator.impl.gui.main.contactlist.UnknownContactPanel+initTextArea(String),net.java.sip.communicator.util.swing.SIPCommTextField+addTextChangeListener(TextFieldChangeListener) net.java.sip.communicator.util.swing.SIPCommTextField+addTextChangeListener(TextFieldChangeListener),net.java.sip.communicator.impl.gui.main.MainFrame+searchField,315,9,1,"/** 
 * Adds the given <tt>TextFieldChangeListener</tt> to listen for any changes that occur in the search field.
 * @param l the <tt>TextFieldChangeListener</tt> to add
 */
","/**
     * Adds the given <tt>TextFieldChangeListener</tt> to listen for any changes
     * that occur in the search field.
     * @param l the <tt>TextFieldChangeListener</tt> to add
     */
    public void addSearchFieldListener(TextFieldChangeListener l)
    {
        searchField.addTextChangeListener(l);
    }",True,True,This method adds a given TextFieldChangeListener to listen for any changes that occur in the search field.,True,This code adds a given TextFieldChangeListener to listen for any changes that occur in the search field. The addSearchFieldListener method takes the TextFieldChangeListener as a parameter and adds it to the searchField.
42,removeSearchFieldListener(TextFieldChangeListener),remove search field listener l removes the given text field change listener that listens for any changes that occur in the search field param l the text field change listener to remove ,Method,,,net.java.sip.communicator.util.swing.SIPCommTextField+addTextChangeListener(TextFieldChangeListener) net.java.sip.communicator.util.swing.SIPCommTextField+addTextChangeListener(TextFieldChangeListener),net.java.sip.communicator.impl.gui.main.MainFrame+searchField,327,9,1,"/** 
 * Removes the given <tt>TextFieldChangeListener</tt> that listens for any changes that occur in the search field.
 * @param l the <tt>TextFieldChangeListener</tt> to remove
 */
","/**
     * Removes the given <tt>TextFieldChangeListener</tt> that listens for any
     * changes that occur in the search field.
     * @param l the <tt>TextFieldChangeListener</tt> to remove
     */
    public void removeSearchFieldListener(TextFieldChangeListener l)
    {
        searchField.addTextChangeListener(l);
    }",True,True,"This method removes a given TextFieldChangeListener from the search field, which listens for any changes that occur in the search field.",True,"The code defines a method called ""removeSearchFieldListener"" which takes a TextFieldChangeListener as a parameter. This method removes the given listener from the searchField, which is a TextField component."
43,initiateProviderIndex(ProtocolProviderService),initiate provider index protocol provider checks in the configuration xml if there is already stored index for this provider and if yes returns it otherwise creates a new account index and stores it param protocol provider the protocol provider return the protocol provider index ,Method,addProtocolProvider(ProtocolProviderService),,"net.java.sip.communicator.impl.gui.GuiActivator+getConfigurationService() net.java.sip.communicator.impl.gui.GuiActivator+getConfigurationService() net.java.sip.communicator.service.configuration.ConfigurationService+getPropertyNamesByPrefix(String,boolean) net.java.sip.communicator.service.configuration.ConfigurationService+getPropertyNamesByPrefix(String,boolean) net.java.sip.communicator.service.configuration.ConfigurationService+getString(String) net.java.sip.communicator.service.configuration.ConfigurationService+getString(String) java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() net.java.sip.communicator.service.configuration.ConfigurationService+getString(String) net.java.sip.communicator.service.configuration.ConfigurationService+getString(String) java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String) net.java.sip.communicator.impl.gui.main.MainFrame+createAccountIndex(ProtocolProviderService,String) net.java.sip.communicator.impl.gui.main.MainFrame+createAccountIndex(ProtocolProviderService,String) java.lang.Long+toString(long) java.lang.Long+toString(long) java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() net.java.sip.communicator.impl.gui.main.MainFrame+createAccountIndex(ProtocolProviderService,String) net.java.sip.communicator.impl.gui.main.MainFrame+createAccountIndex(ProtocolProviderService,String)",,2121,59,2,"/** 
 * Checks in the configuration xml if there is already stored index for this provider and if yes, returns it, otherwise creates a new account index and stores it.
 * @param protocolProvider the protocol provider
 * @return the protocol provider index
 */
","/**
     * Checks in the configuration xml if there is already stored index for
     * this provider and if yes, returns it, otherwise creates a new account
     * index and stores it.
     *
     * @param protocolProvider the protocol provider
     * @return the protocol provider index
     */
    private int initiateProviderIndex(
            ProtocolProviderService protocolProvider)
    {
        ConfigurationService configService
            = GuiActivator.getConfigurationService();

        String prefix = ""net.java.sip.communicator.impl.gui.accounts"";

        List<String> accounts = configService
                .getPropertyNamesByPrefix(prefix, true);

        for (String accountRootPropName : accounts) {
            String accountUID
                = configService.getString(accountRootPropName);

            if(accountUID.equals(protocolProvider
                    .getAccountID().getAccountUniqueID()))
            {
                String  index = configService.getString(
                        accountRootPropName + "".accountIndex"");

                if(index != null) {
                    //if we have found the accountIndex for this protocol provider
                    //return this index
                    return Integer.parseInt(index);
                }
                else
                {
                    //if there's no stored accountIndex for this protocol
                    //provider, calculate the index, set it in the configuration
                    //service and return it.

                    return createAccountIndex(protocolProvider,
                            accountRootPropName);
                }
            }
        }

        String accNodeName
            = ""acc"" + Long.toString(System.currentTimeMillis());

        String accountPackage
            = ""net.java.sip.communicator.impl.gui.accounts.""
                    + accNodeName;

        configService.setProperty(accountPackage,
                protocolProvider.getAccountID().getAccountUniqueID());

        return createAccountIndex(protocolProvider,
                accountPackage);
    }",True,True,"This method checks if there is already a stored index for a given protocol provider in the configuration xml. If there is, it returns the index. If not, it creates a new account index and stores it.",False,"This code is a method called `initiateProviderIndex` that checks if there is already a stored index for a given protocol provider in the configuration xml. If an index exists, it is returned. Otherwise, a new account index is created and stored."
44,"createAccountIndex(ProtocolProviderService,String)",create account index protocol provider account root prop name creates and calculates the account index for the given protocol provider param protocol provider the protocol provider param account root prop name the path to where the index should be savedin the configuration xml return the created index ,Method,initiateProviderIndex(ProtocolProviderService) initiateProviderIndex(ProtocolProviderService),,"net.java.sip.communicator.impl.gui.GuiActivator+getConfigurationService() net.java.sip.communicator.impl.gui.GuiActivator+getConfigurationService() java.util.HashMap+keySet() java.util.HashMap+keySet() java.lang.String+equals(Object) net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolDisplayName() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolDisplayName() java.lang.String+equals(Object) net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolDisplayName() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolDisplayName() java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.util.HashMap+get(Object) java.util.HashMap+get(Object) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object)",net.java.sip.communicator.impl.gui.main.MainFrame+protocolProviders net.java.sip.communicator.impl.gui.main.MainFrame+protocolProviders,1151,35,2,"/** 
 * Creates and calculates the account index for the given protocol provider.
 * @param protocolProvider the protocol provider
 * @param accountRootPropName the path to where the index should be savedin the configuration xml
 * @return the created index
 */
","/**
     * Creates and calculates the account index for the given protocol
     * provider.
     * @param protocolProvider the protocol provider
     * @param accountRootPropName the path to where the index should be saved
     * in the configuration xml
     * @return the created index
     */
    private int createAccountIndex(ProtocolProviderService protocolProvider,
            String accountRootPropName)
    {
        ConfigurationService configService
            = GuiActivator.getConfigurationService();
        int accountIndex = -1;

        for (ProtocolProviderService pps : protocolProviders.keySet())
        {
            if (pps.getProtocolDisplayName().equals(
                protocolProvider.getProtocolDisplayName())
                && !pps.equals(protocolProvider))
            {

                int index = protocolProviders.get(pps);

                if (accountIndex < index)
                    accountIndex = index;
            }
        }
        accountIndex++;
        configService.setProperty(
                accountRootPropName + "".accountIndex"",
                accountIndex);

        return accountIndex;
    }",True,True,"This method creates and calculates the account index for a given protocol provider. It iterates through a map of protocol providers, compares their display names, and updates the account index if a higher index is found. Finally, it sets the account index in the configuration xml and returns it.",False,"This code creates and calculates an account index for a given protocol provider. It iterates through a map of protocol providers, compares their display names, and updates the account index based on the highest index found. The final account index is then saved in the configuration xml."
45,updateProvidersIndexes(ProtocolProviderService),update providers indexes removed provider updates the indexes in the configuration xml when a provider has been removed param removed provider the removed protocol provider ,Method,removeProtocolProvider(ProtocolProviderService),,"net.java.sip.communicator.impl.gui.GuiActivator+getConfigurationService() net.java.sip.communicator.impl.gui.GuiActivator+getConfigurationService() java.util.HashMap+keySet() java.util.HashMap+keySet() java.lang.String+equals(Object) net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolDisplayName() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolDisplayName() java.lang.String+equals(Object) net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolDisplayName() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolDisplayName() java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) net.java.sip.communicator.service.configuration.ConfigurationService+getPropertyNamesByPrefix(String,boolean) net.java.sip.communicator.service.configuration.ConfigurationService+getPropertyNamesByPrefix(String,boolean) net.java.sip.communicator.service.configuration.ConfigurationService+getString(String) net.java.sip.communicator.service.configuration.ConfigurationService+getString(String) java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getAccountUniqueID() net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object) net.java.sip.communicator.service.configuration.ConfigurationService+setProperty(String,Object)",net.java.sip.communicator.impl.gui.main.MainFrame+protocolProviders net.java.sip.communicator.impl.gui.main.MainFrame+protocolProviders,1611,47,2,"/** 
 * Updates the indexes in the configuration xml, when a provider has been removed.
 * @param removedProvider the removed protocol provider
 */
","/**
     * Updates the indexes in the configuration xml, when a provider has been
     * removed.
     * @param removedProvider the removed protocol provider
     */
    private void updateProvidersIndexes(ProtocolProviderService removedProvider)
    {
        ConfigurationService configService
            = GuiActivator.getConfigurationService();

        String prefix = ""net.java.sip.communicator.impl.gui.accounts"";

        ProtocolProviderService currentProvider = null;
        int sameProtocolProvidersCount = 0;

        for (ProtocolProviderService pps : protocolProviders.keySet()) {
            if(pps.getProtocolDisplayName().equals(
                    removedProvider.getProtocolDisplayName())) {

                sameProtocolProvidersCount++;
                if(sameProtocolProvidersCount > 1) {
                    break;
                }
                currentProvider = pps;
            }
        }

        if(sameProtocolProvidersCount < 2 && currentProvider != null) {
            protocolProviders.put(currentProvider, 0);

            List<String> accounts = configService
                .getPropertyNamesByPrefix(prefix, true);

            for (String rootPropName : accounts) {
                String accountUID
                    = configService.getString(rootPropName);

                if(accountUID.equals(currentProvider
                        .getAccountID().getAccountUniqueID())) {

                    configService.setProperty(
                            rootPropName + "".accountIndex"",
                            0);
                }
            }
        }
    }",True,True,"This method updates the indexes in the configuration xml when a provider has been removed. It checks if there are any other providers with the same protocol display name, and if not, it sets the index of the current provider to 0 in the configuration xml.",False,"This code updates the indexes in the configuration XML when a provider is removed. It checks if there are multiple providers with the same protocol and if not, it sets the index to 0 for the corresponding account in the configuration."
46,getProtocolProviderLastStatus(ProtocolProviderService),get protocol provider last status protocol provider if the protocol provider supports presence operation set searches the last status which was selected otherwise returns null param protocol provider the protocol provider we re interested in return the last protocol provider presence status or null if thisprovider doesn t support presence operation set ,Method,,net.java.sip.communicator.impl.gui.main.login.LoginManager+runLogin(MainFrame) net.java.sip.communicator.impl.gui.main.login.LoginManager+handleProviderAdded(ProtocolProviderService),net.java.sip.communicator.impl.gui.main.MainFrame+getProtocolPresenceOpSet(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.MainFrame+getProtocolPresenceOpSet(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+getLastPresenceStatus(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+getLastPresenceStatus(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+getLastStatusString(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+getLastStatusString(ProtocolProviderService),net.java.sip.communicator.impl.gui.main.MainFrame+accountStatusPanel net.java.sip.communicator.impl.gui.main.MainFrame+accountStatusPanel,709,16,1,"/** 
 * If the protocol provider supports presence operation set searches the last status which was selected, otherwise returns null.
 * @param protocolProvider the protocol provider we're interested in.
 * @return the last protocol provider presence status, or null if thisprovider doesn't support presence operation set
 */
","/**
     * If the protocol provider supports presence operation set searches the
     * last status which was selected, otherwise returns null.
     *
     * @param protocolProvider the protocol provider we're interested in.
     * @return the last protocol provider presence status, or null if this
     * provider doesn't support presence operation set
     */
    public Object getProtocolProviderLastStatus(
            ProtocolProviderService protocolProvider)
    {
        if(getProtocolPresenceOpSet(protocolProvider) != null)
            return accountStatusPanel.getLastPresenceStatus(protocolProvider);
        else
            return accountStatusPanel.getLastStatusString(protocolProvider);
    }",True,True,"This method returns the last presence status of a protocol provider if it supports presence operation set searches, otherwise it returns null.",True,"This code defines a method called ""getProtocolProviderLastStatus"" that takes a ProtocolProviderService object as a parameter. It checks if the protocol provider supports presence operation set and returns the last presence status if it does, otherwise it returns the last status string."
47,RenameAction,rename action rename action is invoked when user presses the f2 key depending on the selection opens the appropriate form for renaming ,MemberClass,,,"net.java.sip.communicator.impl.gui.main.MainFrame.RenameAction+actionPerformed(ActionEvent) javax.swing.tree.TreePath+getLastPathComponent() javax.swing.JTree+getSelectionPath() net.java.sip.communicator.impl.gui.GuiActivator+getContactList() net.java.sip.communicator.impl.gui.GuiActivator+getContactList() javax.swing.JTree+getSelectionPath() javax.swing.tree.TreePath+getLastPathComponent() net.java.sip.communicator.impl.gui.main.contactlist.RenameContactDialog+RenameContactDialog(MainFrame,MetaContact) java.awt.Window+setLocation(int,int) java.awt.Window+setLocation(int,int) java.awt.Toolkit+getScreenSize() java.awt.Toolkit+getDefaultToolkit() java.awt.Toolkit+getDefaultToolkit() java.awt.Toolkit+getScreenSize() java.awt.Toolkit+getScreenSize() java.awt.Toolkit+getDefaultToolkit() java.awt.Toolkit+getDefaultToolkit() java.awt.Toolkit+getScreenSize() net.java.sip.communicator.util.swing.SIPCommDialog+setVisible(boolean) net.java.sip.communicator.util.swing.SIPCommDialog+setVisible(boolean) net.java.sip.communicator.impl.gui.main.contactlist.RenameContactDialog+requestFocusInFiled() net.java.sip.communicator.impl.gui.main.contactlist.RenameContactDialog+requestFocusInFiled() net.java.sip.communicator.impl.gui.main.contactlist.RenameGroupDialog+RenameGroupDialog(MainFrame,MetaContactGroup) java.awt.Toolkit+getScreenSize() java.awt.Toolkit+getDefaultToolkit() java.awt.Toolkit+getDefaultToolkit() java.awt.Toolkit+getScreenSize() java.awt.Window+setLocation(int,int) java.awt.Window+setLocation(int,int) net.java.sip.communicator.util.swing.SIPCommDialog+setVisible(boolean) net.java.sip.communicator.util.swing.SIPCommDialog+setVisible(boolean) net.java.sip.communicator.impl.gui.main.contactlist.RenameGroupDialog+requestFocusInFiled() net.java.sip.communicator.impl.gui.main.contactlist.RenameGroupDialog+requestFocusInFiled()",net.java.sip.communicator.impl.gui.main.MainFrame.RenameAction+serialVersionUID java.awt.Dimension+width java.awt.Dimension+height java.awt.Dimension+width java.awt.Dimension+height,1610,45,2,"/** 
 * <tt>RenameAction</tt> is invoked when user presses the F2 key. Depending on the selection opens the appropriate form for renaming.
 */
","/**
     * <tt>RenameAction</tt> is invoked when user presses the F2 key. Depending
     * on the selection opens the appropriate form for renaming.
     */
    private class RenameAction extends AbstractAction
    {
        private static final long serialVersionUID = 0L;

        public void actionPerformed(ActionEvent e)
        {
            Object selectedObject
                = GuiActivator.getContactList().getSelectionPath()
                    .getLastPathComponent();

            if(selectedObject instanceof MetaContact) {
                RenameContactDialog dialog = new RenameContactDialog(
                        MainFrame.this, (MetaContact)selectedObject);

                dialog.setLocation(
                        Toolkit.getDefaultToolkit().getScreenSize().width/2
                            - 200,
                        Toolkit.getDefaultToolkit().getScreenSize().height/2
                            - 50
                        );

                dialog.setVisible(true);

                dialog.requestFocusInFiled();
            }
            else if(selectedObject instanceof MetaContactGroup) {

                RenameGroupDialog dialog = new RenameGroupDialog(
                        MainFrame.this, (MetaContactGroup)selectedObject);

                Dimension screenSize =
                    Toolkit.getDefaultToolkit().getScreenSize();
                dialog.setLocation(screenSize.width / 2 - 200,
                    screenSize.height / 2 - 50);

                dialog.setVisible(true);

                dialog.requestFocusInFiled();
            }
        }
    }",False,True,"/** 
 * <tt>RenameAction</tt> is invoked when user presses the F2 key. Depending on the selection opens the appropriate form for renaming.
 */
",False,"/** 
 * <tt>RenameAction</tt> is invoked when user presses the F2 key. Depending on the selection opens the appropriate form for renaming.
 */
"
48,close(boolean),close is escaped overwrites the sip comm frame close method this method is invoked when user presses the escape key param is escaped indicates if this window has been closed by pressingthe escape key ,Method,,,net.java.sip.communicator.impl.gui.GuiActivator+getContactList() net.java.sip.communicator.impl.gui.GuiActivator+getContactList() net.java.sip.communicator.impl.gui.main.contactlist.TreeContactList+getRightButtonMenu() net.java.sip.communicator.impl.gui.main.contactlist.TreeContactList+getRightButtonMenu() net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+getCommonRightButtonMenu() net.java.sip.communicator.impl.gui.main.MainFrame+getContactListPanel() net.java.sip.communicator.impl.gui.main.MainFrame+getContactListPanel() net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+getCommonRightButtonMenu() java.awt.Component+isVisible() java.awt.Component+isVisible() java.awt.Component+setVisible(boolean) java.awt.Component+setVisible(boolean) javax.swing.JPopupMenu+isVisible() javax.swing.JPopupMenu+isVisible() javax.swing.JPopupMenu+setVisible(boolean) javax.swing.JPopupMenu+setVisible(boolean) net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+hasSelectedMenus() net.java.sip.communicator.impl.gui.main.presence.AccountStatusPanel+hasSelectedMenus() net.java.sip.communicator.impl.gui.main.menus.MainMenu+hasSelectedMenus() net.java.sip.communicator.impl.gui.main.menus.MainMenu+hasSelectedMenus() javax.swing.MenuSelectionManager+defaultManager() javax.swing.MenuSelectionManager+defaultManager() javax.swing.MenuSelectionManager+clearSelectedPath() javax.swing.MenuSelectionManager+clearSelectedPath(),net.java.sip.communicator.impl.gui.main.MainFrame+accountStatusPanel net.java.sip.communicator.impl.gui.main.MainFrame+menu,1121,33,4,"/** 
 * Overwrites the <tt>SIPCommFrame</tt> close method. This method is invoked when user presses the Escape key.
 * @param isEscaped indicates if this window has been closed by pressingthe escape key
 */
","/**
     * Overwrites the <tt>SIPCommFrame</tt> close method. This method is
     * invoked when user presses the Escape key.
     * @param isEscaped indicates if this window has been closed by pressing
     * the escape key
     */
    protected void close(boolean isEscaped)
    {
        TreeContactList contactList = GuiActivator.getContactList();

        Component contactListRightMenu
            = contactList.getRightButtonMenu();

        CommonRightButtonMenu commonPopupMenu
            = getContactListPanel().getCommonRightButtonMenu();

        if(contactListRightMenu != null && contactListRightMenu.isVisible())
        {
            contactListRightMenu.setVisible(false);
        }
        else if(commonPopupMenu != null && commonPopupMenu.isVisible())
        {
            commonPopupMenu.setVisible(false);
        }
        else if(accountStatusPanel.hasSelectedMenus()
                || menu.hasSelectedMenus())
        {
            MenuSelectionManager selectionManager
                = MenuSelectionManager.defaultManager();

            selectionManager.clearSelectedPath();
        }
    }",True,True,This method serves to handle the closing of a SIPCommFrame when the user presses the Escape key. It checks if certain menus or components are visible and closes them if necessary. It also clears any selected menus.,False,"This code defines a method called ""close"" that is invoked when the user presses the Escape key. It checks if certain menus or components are visible and hides them if necessary. It also clears any selected menus in the account status panel and the main menu."
49,getMainMenu(),get main menu returns the main menu in the application window return the main menu in the application window ,Method,,,,net.java.sip.communicator.impl.gui.main.MainFrame+menu,189,8,1,"/** 
 * Returns the main menu in the application window.
 * @return the main menu in the application window
 */
","/**
     * Returns the main menu in the application window.
     * @return the main menu in the application window
     */
    public MainMenu getMainMenu()
    {
        return menu;
    }",False,True,This method returns the main menu in the application window.,True,"This code defines a method named ""getMainMenu()"" that returns the main menu in the application window. The method has a return type of ""MainMenu"". The method does not take any parameters."
50,"addProviderContactHandler(ProtocolProviderService,ContactEventHandler)",add provider contact handler protocol provider contact handler param protocol provider param contact handler ,Method,addProtocolProvider(ProtocolProviderService),,"java.util.Map+put(K,V) java.util.Map+put(K,V)",net.java.sip.communicator.impl.gui.main.MainFrame+providerContactHandlers,298,11,1,"/** 
 * @param protocolProvider
 * @param contactHandler
 */
","/**
     *
     * @param protocolProvider
     * @param contactHandler
     */
    public void addProviderContactHandler(
        ProtocolProviderService protocolProvider,
        ContactEventHandler contactHandler)
    {
        providerContactHandlers.put(protocolProvider, contactHandler);
    }",True,True,This method adds a contact handler for a specific protocol provider to a map called providerContactHandlers.,True,"This code defines a method called ""addProviderContactHandler"" that takes a protocol provider and a contact handler as parameters. It adds the protocol provider and contact handler to a map called ""providerContactHandlers""."
51,getContactHandler(ProtocolProviderService),get contact handler protocol provider returns the contact event handler registered for this protocol provider param protocol provider the protocol provider service for whichwe are searching a contact event handler return the contact event handler registered for this protocolprovider ,Method,,net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+contactClicked(ContactListEvent),java.util.Map+get(Object) java.util.Map+get(Object),net.java.sip.communicator.impl.gui.main.MainFrame+providerContactHandlers,513,14,1,"/** 
 * Returns the <tt>ContactEventHandler</tt> registered for this protocol provider.
 * @param protocolProvider the <tt>ProtocolProviderService</tt> for whichwe are searching a <tt>ContactEventHandler</tt>.
 * @return the <tt>ContactEventHandler</tt> registered for this protocolprovider
 */
","/**
     * Returns the <tt>ContactEventHandler</tt> registered for this protocol
     * provider.
     *
     * @param protocolProvider the <tt>ProtocolProviderService</tt> for which
     * we are searching a <tt>ContactEventHandler</tt>.
     * @return the <tt>ContactEventHandler</tt> registered for this protocol
     * provider
     */
    public ContactEventHandler getContactHandler(
        ProtocolProviderService protocolProvider)
    {
        return providerContactHandlers.get(protocolProvider);
    }",True,True,This method returns the ContactEventHandler registered for a given ProtocolProviderService. It takes a ProtocolProviderService as a parameter and returns the ContactEventHandler associated with it.,True,"This code defines a method called ""getContactHandler"" that takes a ProtocolProviderService as a parameter and returns the ContactEventHandler registered for that protocol provider. The method retrieves the ContactEventHandler from a map called ""providerContactHandlers"" using the protocol provider as the key."
52,getContactHandlerForProvider(ProtocolProviderService),get contact handler for provider protocol provider returns the contact event handler for contacts given by the protocol provider the contact event handler is meant to be used from other bundles in order to change the default behavior of events generated when clicking a contact param protocol provider the protocol provider for which we want to obtaina contact event handler return the contact event handler for contacts given by the protocol provider ,Method,addProtocolProvider(ProtocolProviderService),,"net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() org.osgi.framework.BundleContext+getServiceReferences(String,String) org.osgi.framework.BundleContext+getServiceReferences(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.util.Logger+error(Object) net.java.sip.communicator.util.Logger+error(Object) org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.BundleContext+getService(ServiceReference)",net.java.sip.communicator.service.protocol.ProtocolProviderFactory+PROTOCOL net.java.sip.communicator.impl.gui.GuiActivator+bundleContext net.java.sip.communicator.impl.gui.main.MainFrame+logger net.java.sip.communicator.impl.gui.GuiActivator+bundleContext,1245,34,2,"/** 
 * Returns the <tt>ContactEventHandler</tt> for contacts given by the <tt>protocolProvider</tt>. The <tt>ContactEventHandler</tt> is meant to be used from other bundles in order to change the default behavior of events generated when clicking a contact.
 * @param protocolProvider the protocol provider for which we want to obtaina contact event handler
 * @return the <tt>ContactEventHandler</tt> for contacts given by the<tt>protocolProvider</tt>
 */
","/**
     * Returns the <tt>ContactEventHandler</tt> for contacts given by the
     * <tt>protocolProvider</tt>. The <tt>ContactEventHandler</tt> is meant to
     * be used from other bundles in order to change the default behavior of
     * events generated when clicking a contact.
     * @param protocolProvider the protocol provider for which we want to obtain
     * a contact event handler
     * @return the <tt>ContactEventHandler</tt> for contacts given by the
     * <tt>protocolProvider</tt>
     */
    private ContactEventHandler getContactHandlerForProvider(
        ProtocolProviderService protocolProvider)
    {
        ServiceReference[] serRefs = null;

        String osgiFilter = ""(""
            + ProtocolProviderFactory.PROTOCOL
            + ""="" + protocolProvider.getProtocolName()+"")"";

        try
        {
            serRefs = GuiActivator.bundleContext.getServiceReferences(
                ContactEventHandler.class.getName(), osgiFilter);
        }
        catch (InvalidSyntaxException ex){
            logger.error(""GuiActivator : "" + ex);
        }

        if(serRefs == null)
            return null;

        return (ContactEventHandler) GuiActivator.bundleContext
            .getService(serRefs[0]);
    }",True,True,This method returns the ContactEventHandler for a given protocol provider. The ContactEventHandler is used to change the default behavior of events generated when clicking a contact.,True,"This code defines a private method called ""getContactHandlerForProvider"" that takes a ProtocolProviderService as a parameter and returns a ContactEventHandler. It retrieves the ContactEventHandler service reference using the protocol name from the ProtocolProviderService and returns the first service reference found."
53,initPluginComponents(),init plugin components initialize plugin components already registered for this container ,Method,,,"java.awt.Container+setLayout(LayoutManager) java.awt.Container+setLayout(LayoutManager) javax.swing.BoxLayout+BoxLayout(Container,int) java.awt.Container+setLayout(LayoutManager) java.awt.Container+setLayout(LayoutManager) javax.swing.BoxLayout+BoxLayout(Container,int) java.awt.Container+setLayout(LayoutManager) java.awt.Container+setLayout(LayoutManager) javax.swing.BoxLayout+BoxLayout(Container,int) java.awt.Container+setLayout(LayoutManager) java.awt.Container+setLayout(LayoutManager) javax.swing.BoxLayout+BoxLayout(Container,int) javax.swing.JFrame+getContentPane() javax.swing.JFrame+getContentPane() java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) org.osgi.framework.BundleContext+getServiceReferences(String,String) org.osgi.framework.BundleContext+getServiceReferences(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.service.gui.Container+getID() net.java.sip.communicator.service.gui.Container+getID() net.java.sip.communicator.service.gui.Container+getID() net.java.sip.communicator.service.gui.Container+getID() net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.BundleContext+getService(ServiceReference) net.java.sip.communicator.service.gui.PluginComponent+isNativeComponent() net.java.sip.communicator.service.gui.PluginComponent+isNativeComponent() java.util.Map+put(K,V) java.util.Map+put(K,V) javax.swing.JPanel+JPanel() net.java.sip.communicator.service.gui.PluginComponent+getConstraints() net.java.sip.communicator.service.gui.PluginComponent+getConstraints() net.java.sip.communicator.impl.gui.UIServiceImpl+getBorderLayoutConstraintsFromContainer(Object) net.java.sip.communicator.impl.gui.UIServiceImpl+getBorderLayoutConstraintsFromContainer(Object) net.java.sip.communicator.impl.gui.main.MainFrame+addPluginComponent(Component,Container,Object) net.java.sip.communicator.impl.gui.main.MainFrame+addPluginComponent(Component,Container,Object) net.java.sip.communicator.service.gui.PluginComponent+getComponent() net.java.sip.communicator.service.gui.PluginComponent+getComponent() net.java.sip.communicator.service.gui.PluginComponent+getContainer() net.java.sip.communicator.service.gui.PluginComponent+getContainer() net.java.sip.communicator.impl.gui.UIServiceImpl+addPluginComponentListener(PluginComponentListener) net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+addPluginComponentListener(PluginComponentListener)",net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelSouth net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelSouth javax.swing.BoxLayout+Y_AXIS net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelNorth net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelNorth javax.swing.BoxLayout+Y_AXIS net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelEast net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelEast javax.swing.BoxLayout+Y_AXIS net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelWest net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelWest javax.swing.BoxLayout+Y_AXIS net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelNorth java.awt.BorderLayout+NORTH net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelEast java.awt.BorderLayout+EAST net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelWest java.awt.BorderLayout+WEST net.java.sip.communicator.impl.gui.main.MainFrame+mainPanel net.java.sip.communicator.impl.gui.main.MainFrame+mainPanel net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelSouth java.awt.BorderLayout+SOUTH net.java.sip.communicator.impl.gui.GuiActivator+bundleContext net.java.sip.communicator.service.gui.Container+CONTAINER_ID net.java.sip.communicator.service.gui.Container+CONTAINER_MAIN_WINDOW net.java.sip.communicator.service.gui.Container+CONTAINER_ID net.java.sip.communicator.service.gui.Container+CONTAINER_STATUS_BAR net.java.sip.communicator.impl.gui.main.MainFrame+logger net.java.sip.communicator.impl.gui.GuiActivator+bundleContext net.java.sip.communicator.impl.gui.main.MainFrame+nativePluginsTable java.awt.BorderLayout+SOUTH,2886,77,2,"/** 
 * Initialize plugin components already registered for this container.
 */
","/**
     * Initialize plugin components already registered for this container.
     */
    private void initPluginComponents()
    {
        pluginPanelSouth.setLayout(
            new BoxLayout(pluginPanelSouth, BoxLayout.Y_AXIS));
        pluginPanelNorth.setLayout(
            new BoxLayout(pluginPanelNorth, BoxLayout.Y_AXIS));
        pluginPanelEast.setLayout(
            new BoxLayout(pluginPanelEast, BoxLayout.Y_AXIS));
        pluginPanelWest.setLayout(
            new BoxLayout(pluginPanelWest, BoxLayout.Y_AXIS));

        java.awt.Container contentPane = getContentPane();
        contentPane.add(pluginPanelNorth, BorderLayout.NORTH);
        contentPane.add(pluginPanelEast, BorderLayout.EAST);
        contentPane.add(pluginPanelWest, BorderLayout.WEST);
        this.mainPanel.add(pluginPanelSouth, BorderLayout.SOUTH);

        // Search for plugin components registered through the OSGI bundle
        // context.
        ServiceReference[] serRefs = null;

        try
        {
            serRefs
                = GuiActivator
                    .bundleContext
                        .getServiceReferences(
                            PluginComponent.class.getName(),
                            ""(|(""
                                + Container.CONTAINER_ID
                                + ""=""
                                + Container.CONTAINER_MAIN_WINDOW.getID()
                                + "")(""
                                + Container.CONTAINER_ID
                                + ""=""
                                + Container.CONTAINER_STATUS_BAR.getID()
                                + ""))"");
        }
        catch (InvalidSyntaxException exc)
        {
            logger.error(""Could not obtain plugin reference."", exc);
        }

        if (serRefs != null)
        {
            for (ServiceReference serRef : serRefs)
            {
                PluginComponent c
                    = (PluginComponent)
                        GuiActivator.bundleContext.getService(serRef);

                if (c.isNativeComponent())
                    nativePluginsTable.put(c, new JPanel());
                else
                {
                    String pluginConstraints = c.getConstraints();
                    Object constraints;

                    if (pluginConstraints != null)
                        constraints
                            = UIServiceImpl
                                .getBorderLayoutConstraintsFromContainer(
                                    pluginConstraints);
                    else
                        constraints = BorderLayout.SOUTH;

                    this.addPluginComponent((Component) c.getComponent(), c
                        .getContainer(), constraints);
                }
            }
        }

        GuiActivator.getUIService().addPluginComponentListener(this);
    }",True,True,"The function of this method is to initialize the plugin components that have been registered for a specific container. It sets the layout for the plugin panels, adds them to the content pane of the container, searches for plugin components registered through the OSGI bundle context, and adds them to the main panel. Finally, it adds a plugin component listener to the UI service.",False,"This code initializes plugin components for a container by setting up the layout for different panels and adding them to the content pane. It then searches for plugin components registered through the OSGI bundle context and adds them to the container based on their constraints. Finally, it adds a listener for plugin component changes."
54,pluginComponentAdded(PluginComponentEvent),plugin component added event adds the associated with this plugin component event component to the appropriate container param event the plugin component event that has notified us ofthe add of a plugin component ,Method,,,"net.java.sip.communicator.impl.gui.event.PluginComponentEvent+getPluginComponent() net.java.sip.communicator.impl.gui.event.PluginComponentEvent+getPluginComponent() net.java.sip.communicator.service.gui.PluginComponent+getContainer() net.java.sip.communicator.service.gui.PluginComponent+getContainer() net.java.sip.communicator.service.gui.Container+equals(Object) net.java.sip.communicator.service.gui.Container+equals(Object) net.java.sip.communicator.service.gui.Container+equals(Object) net.java.sip.communicator.service.gui.Container+equals(Object) net.java.sip.communicator.service.gui.PluginComponent+getConstraints() net.java.sip.communicator.service.gui.PluginComponent+getConstraints() net.java.sip.communicator.impl.gui.UIServiceImpl+getBorderLayoutConstraintsFromContainer(Object) net.java.sip.communicator.impl.gui.UIServiceImpl+getBorderLayoutConstraintsFromContainer(Object) net.java.sip.communicator.service.gui.PluginComponent+isNativeComponent() net.java.sip.communicator.service.gui.PluginComponent+isNativeComponent() java.util.Map+put(K,V) java.util.Map+put(K,V) javax.swing.JPanel+JPanel() net.java.sip.communicator.impl.gui.main.MainFrame+isVisible() net.java.sip.communicator.impl.gui.main.MainFrame+isVisible() javax.swing.SwingUtilities+invokeLater(Runnable) javax.swing.SwingUtilities+invokeLater(Runnable) +() +run()",net.java.sip.communicator.service.gui.Container+CONTAINER_MAIN_WINDOW net.java.sip.communicator.service.gui.Container+CONTAINER_STATUS_BAR java.awt.BorderLayout+SOUTH net.java.sip.communicator.impl.gui.main.MainFrame+nativePluginsTable net.java.sip.communicator.impl.gui.main.MainFrame+nativePluginsTable,1639,46,1,"/** 
 * Adds the associated with this <tt>PluginComponentEvent</tt> component to the appropriate container.
 * @param event the <tt>PluginComponentEvent</tt> that has notified us ofthe add of a plugin component
 */
","/**
     * Adds the associated with this <tt>PluginComponentEvent</tt> component to
     * the appropriate container.
     * @param event the <tt>PluginComponentEvent</tt> that has notified us of
     * the add of a plugin component
     */
    public void pluginComponentAdded(PluginComponentEvent event)
    {
        PluginComponent pluginComponent = event.getPluginComponent();
        Container pluginContainer = pluginComponent.getContainer();

        if (pluginContainer.equals(Container.CONTAINER_MAIN_WINDOW)
            || pluginContainer.equals(Container.CONTAINER_STATUS_BAR))
        {
            String pluginConstraints = pluginComponent.getConstraints();
            Object constraints;

            if (pluginConstraints != null)
                constraints =
                    UIServiceImpl
                        .getBorderLayoutConstraintsFromContainer(pluginConstraints);
            else
                constraints = BorderLayout.SOUTH;

            if (pluginComponent.isNativeComponent())
            {
                this.nativePluginsTable.put(pluginComponent, new JPanel());

                if (isVisible())
                {
                    SwingUtilities.invokeLater(new Runnable()
                    {
                        public void run()
                        {
                            addNativePlugins();
                        }
                    });
                }
            }
            else
            {
                this.addPluginComponent((Component) pluginComponent
                    .getComponent(), pluginContainer, constraints);
            }
        }
    }",True,True,"This method adds a plugin component to the appropriate container. If the container is the main window or status bar, it determines the constraints for the component and adds it to the container. If the component is a native component, it adds it to a table and invokes the addNativePlugins method.",True,"This method is called when a plugin component is added to the appropriate container. It checks if the container is the main window or status bar, and then adds the component to the container with the specified constraints. If the component is a native component, it adds it to a table and updates the UI in a separate thread."
55,pluginComponentRemoved(PluginComponentEvent),plugin component removed event removes the associated with this plugin component event component from this container param event the plugin component event that notified us of theremove of a plugin component ,Method,,,net.java.sip.communicator.impl.gui.event.PluginComponentEvent+getPluginComponent() net.java.sip.communicator.impl.gui.event.PluginComponentEvent+getPluginComponent() net.java.sip.communicator.service.gui.PluginComponent+getContainer() net.java.sip.communicator.service.gui.PluginComponent+getContainer() net.java.sip.communicator.service.gui.Container+equals(Object) net.java.sip.communicator.service.gui.Container+equals(Object) net.java.sip.communicator.impl.gui.UIServiceImpl+getBorderLayoutConstraintsFromContainer(Object) net.java.sip.communicator.impl.gui.UIServiceImpl+getBorderLayoutConstraintsFromContainer(Object) net.java.sip.communicator.service.gui.PluginComponent+getConstraints() net.java.sip.communicator.service.gui.PluginComponent+getConstraints() net.java.sip.communicator.service.gui.PluginComponent+isNativeComponent() net.java.sip.communicator.service.gui.PluginComponent+isNativeComponent() java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+get(Object) java.util.Map+get(Object) javax.swing.SwingUtilities+invokeLater(Runnable) javax.swing.SwingUtilities+invokeLater(Runnable) +() +run(),net.java.sip.communicator.service.gui.Container+CONTAINER_MAIN_WINDOW java.awt.BorderLayout+SOUTH net.java.sip.communicator.impl.gui.main.MainFrame+nativePluginsTable net.java.sip.communicator.impl.gui.main.MainFrame+nativePluginsTable,1747,48,1,"/** 
 * Removes the associated with this <tt>PluginComponentEvent</tt> component from this container.
 * @param event the <tt>PluginComponentEvent</tt> that notified us of theremove of a plugin component
 */
","/**
     * Removes the associated with this <tt>PluginComponentEvent</tt> component
     * from this container.
     * @param event the <tt>PluginComponentEvent</tt> that notified us of the
     * remove of a plugin component
     */
    public void pluginComponentRemoved(PluginComponentEvent event)
    {
        final PluginComponent pluginComponent = event.getPluginComponent();
        final Container containerID = pluginComponent.getContainer();

        if (containerID.equals(Container.CONTAINER_MAIN_WINDOW))
        {
            Object constraints = UIServiceImpl
                    .getBorderLayoutConstraintsFromContainer(
                        pluginComponent.getConstraints());

            if (constraints == null)
                constraints = BorderLayout.SOUTH;

            if (pluginComponent.isNativeComponent())
            {
                if (nativePluginsTable.containsKey(pluginComponent))
                {
                    final Component c = nativePluginsTable.get(pluginComponent);
                    final Object finalConstraints = constraints;

                    SwingUtilities.invokeLater(new Runnable()
                    {
                        public void run()
                        {
                            removePluginComponent(c, containerID,
                                finalConstraints);

                            getContentPane().repaint();
                        }
                    });
                }
            }
            else
            {
                this.removePluginComponent((Component) pluginComponent
                    .getComponent(), containerID, constraints);
            }

            nativePluginsTable.remove(pluginComponent);
        }
    }",True,True,"This method removes a plugin component from a container. If the container is the main window, it checks if the component is a native component and removes it accordingly. Finally, it removes the plugin component from a table.",True,"This code defines a method called ""pluginComponentRemoved"" that is responsible for removing a plugin component from a container. It checks if the container is the main window, and if so, it removes the component either by directly removing it or by using SwingUtilities.invokeLater to remove it later."
56,removeNativePlugins(),remove native plugins removes all native plugins from this container ,Method,addNativePlugins(),,"java.util.Map+entrySet() java.util.Map+entrySet() java.util.Map.Entry+getKey() java.util.Map.Entry+getKey() java.util.Map.Entry+getValue() java.util.Map.Entry+getValue() net.java.sip.communicator.impl.gui.UIServiceImpl+getBorderLayoutConstraintsFromContainer(Object) net.java.sip.communicator.impl.gui.UIServiceImpl+getBorderLayoutConstraintsFromContainer(Object) net.java.sip.communicator.service.gui.PluginComponent+getConstraints() net.java.sip.communicator.service.gui.PluginComponent+getConstraints() net.java.sip.communicator.impl.gui.main.MainFrame+removePluginComponent(Component,Container,Object) net.java.sip.communicator.impl.gui.main.MainFrame+removePluginComponent(Component,Container,Object) net.java.sip.communicator.service.gui.PluginComponent+getContainer() net.java.sip.communicator.service.gui.PluginComponent+getContainer() java.awt.Component+repaint() javax.swing.JFrame+getContentPane() javax.swing.JFrame+getContentPane() java.awt.Component+repaint()",net.java.sip.communicator.impl.gui.main.MainFrame+nativePluginsTable java.awt.BorderLayout+SOUTH,773,25,2,"/** 
 * Removes all native plugins from this container.
 */
","/**
     * Removes all native plugins from this container.
     */
    private void removeNativePlugins()
    {
        for (Map.Entry<PluginComponent, Component> entry
                : nativePluginsTable.entrySet())
        {
            PluginComponent pluginComponent = entry.getKey();
            Component c = entry.getValue();

            Object constraints
                = UIServiceImpl
                    .getBorderLayoutConstraintsFromContainer(pluginComponent
                        .getConstraints());

            if (constraints == null)
                constraints = BorderLayout.SOUTH;

            this.removePluginComponent(c, pluginComponent.getContainer(),
                constraints);

            this.getContentPane().repaint();
        }
    }",True,True,"The function of this method is to remove all native plugins from a container. It iterates through the nativePluginsTable, retrieves the plugin component and its associated constraints, removes the plugin component from its container using the specified constraints, and repaints the container's content pane.",False,"The `removeNativePlugins()` method removes all native plugins from a container. It iterates over the entries in a map of native plugins, retrieves the plugin component and its associated component, removes the plugin component from its container using the specified constraints, and repaints the container's content pane."
57,addNativePlugins(),add native plugins adds all native plugins to this container ,Method,,,"net.java.sip.communicator.impl.gui.main.MainFrame+removeNativePlugins() net.java.sip.communicator.impl.gui.main.MainFrame+removeNativePlugins() java.util.Map+entrySet() java.util.Map+entrySet() java.util.Map.Entry+getKey() java.util.Map.Entry+getKey() net.java.sip.communicator.impl.gui.UIServiceImpl+getBorderLayoutConstraintsFromContainer(Object) net.java.sip.communicator.impl.gui.UIServiceImpl+getBorderLayoutConstraintsFromContainer(Object) net.java.sip.communicator.service.gui.PluginComponent+getConstraints() net.java.sip.communicator.service.gui.PluginComponent+getConstraints() net.java.sip.communicator.service.gui.PluginComponent+getComponent() net.java.sip.communicator.service.gui.PluginComponent+getComponent() net.java.sip.communicator.impl.gui.main.MainFrame+addPluginComponent(Component,Container,Object) net.java.sip.communicator.impl.gui.main.MainFrame+addPluginComponent(Component,Container,Object) net.java.sip.communicator.service.gui.PluginComponent+getContainer() net.java.sip.communicator.service.gui.PluginComponent+getContainer() java.util.Map+put(K,V) java.util.Map+put(K,V)",net.java.sip.communicator.impl.gui.main.MainFrame+nativePluginsTable net.java.sip.communicator.impl.gui.main.MainFrame+nativePluginsTable net.java.sip.communicator.impl.gui.main.MainFrame+nativePluginsTable,703,23,1,"/** 
 * Adds all native plugins to this container.
 */
","/**
     * Adds all native plugins to this container.
     */
    public void addNativePlugins()
    {
        this.removeNativePlugins();

        for (Map.Entry<PluginComponent, Component> pluginEntry
                : nativePluginsTable.entrySet())
        {
            PluginComponent plugin = pluginEntry.getKey();
            Object constraints
                = UIServiceImpl
                    .getBorderLayoutConstraintsFromContainer(
                        plugin.getConstraints());

            Component c = (Component) plugin.getComponent();

            this.addPluginComponent(c, plugin.getContainer(), constraints);

            this.nativePluginsTable.put(plugin, c);
        }
    }",True,True,This method adds all native plugins to a container by iterating through a table of plugins and adding each plugin's component to the container with specified constraints.,True,"The `addNativePlugins()` method removes any existing native plugins from the container and then iterates over a map of native plugins. For each plugin, it retrieves the constraints for its container, adds the plugin component to the container with the retrieved constraints, and updates the native plugins table with the plugin and its corresponding component."
58,bringToFront(),bring to front brings this window to front ,Method,,,java.awt.Window+toFront() java.awt.Window+toFront(),,114,7,1,"/** 
 * Brings this window to front.
 */
","/**
     * Brings this window to front.
     */
    public void bringToFront()
    {
        this.toFront();
    }",True,True,The function of the method is to bring the window to the front.,True,"The given code defines a method called ""bringToFront()"" which is used to bring a window to the front. It simply calls the ""toFront()"" method on the current window instance to achieve this functionality."
59,getIdentifier(),get identifier returns the identifier of this window return the identifier of this window ,Method,,,,net.java.sip.communicator.service.gui.ExportedWindow+MAIN_WINDOW,193,8,1,"/** 
 * Returns the identifier of this window.
 * @return the identifier of this window
 */
","/**
     * Returns the identifier of this window.
     * @return the identifier of this window
     */
    public WindowID getIdentifier()
    {
        return ExportedWindow.MAIN_WINDOW;
    }",True,True,"The function of this method is to return the identifier of a window, specifically the identifier of the main window.",True,"This code defines a method named ""getIdentifier"" that returns the identifier of a window. The identifier is of type WindowID and the method always returns the identifier for the main window."
60,getSource(),get source returns this window return this window ,Method,,,,,129,8,1,"/** 
 * Returns this window.
 * @return this window
 */
","/**
     * Returns this window.
     * @return this window
     */
    public Object getSource()
    {
        return this;
    }",True,True,The function of this method is to return the current window object.,True,The code defines a method called `getSource()` that returns the current window object. The method is documented with a summary description stating that it returns the window itself.
61,maximize(),maximize maximizes this window ,Method,,net.java.sip.communicator.impl.gui.UIServiceImpl+maximize(),java.awt.Frame+setExtendedState(int) java.awt.Frame+setExtendedState(int),java.awt.Frame+MAXIMIZED_BOTH,134,7,1,"/** 
 * Maximizes this window.
 */
","/**
     * Maximizes this window.
     */
    public void maximize()
    {
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }",True,True,The function of the method is to maximize the window by setting its extended state to JFrame.MAXIMIZED_BOTH.,True,"The given code defines a method called ""maximize"" that maximizes a window. It achieves this by setting the extended state of the JFrame object to ""MAXIMIZED_BOTH"", which maximizes the window to fill the entire screen."
62,minimize(),minimize minimizes this window ,Method,,net.java.sip.communicator.impl.gui.UIServiceImpl+minimize(),java.awt.Frame+setExtendedState(int) java.awt.Frame+setExtendedState(int),java.awt.Frame+ICONIFIED,129,7,1,"/** 
 * Minimizes this window.
 */
","/**
     * Minimizes this window.
     */
    public void minimize()
    {
        this.setExtendedState(JFrame.ICONIFIED);
    }",True,True,The function of the method is to minimize the window by setting its extended state to JFrame.ICONIFIED.,True,"The given code defines a method called ""minimize"" that belongs to a window class. This method sets the state of the window to ""ICONIFIED"", effectively minimizing it."
63,isVisible(),is visible implements is visible in the ui service interface checks if the main application window is visible return true if main application window is visible false otherwise see ui service is visible ,Method,pluginComponentAdded(PluginComponentEvent),net.java.sip.communicator.impl.gui.UIServiceImpl+isVisible() net.java.sip.communicator.impl.gui.UIServiceImpl+restore(),java.awt.Component+isVisible() java.awt.Frame+getExtendedState(),java.awt.Frame+ICONIFIED,433,13,1,"/** 
 * Implements <code>isVisible</code> in the UIService interface. Checks if the main application window is visible.
 * @return <code>true</code> if main application window is visible,<code>false</code> otherwise
 * @see UIService#isVisible()
 */
","/**
     * Implements <code>isVisible</code> in the UIService interface. Checks if
     * the main application window is visible.
     *
     * @return <code>true</code> if main application window is visible,
     *         <code>false</code> otherwise
     * @see UIService#isVisible()
     */
    public boolean isVisible()
    {
        return super.isVisible()
            && (super.getExtendedState() != JFrame.ICONIFIED);
    }",True,True,"This method checks if the main application window is visible by calling the superclass's isVisible method and checking if the extended state is not set to ICONIFIED. It returns true if the window is visible, false otherwise.",True,"This code implements the `isVisible` method in the `UIService` interface. It checks if the main application window is visible by calling the `isVisible` method from the superclass and also checks if the window is not minimized. It returns `true` if the window is visible and not minimized, and `false` otherwise."
64,setVisible(boolean),set visible is visible implements set visible in the ui service interface shows or hides the main application window depending on the parameter visible param is visible true if we are to show the main application frame andfalse otherwise see ui service set visible boolean ,Method,,net.java.sip.communicator.impl.gui.UIServiceImpl+loadApplicationGui() net.java.sip.communicator.impl.gui.UIServiceImpl+setVisible(boolean) net.java.sip.communicator.impl.gui.UIServiceImpl+restore(),javax.swing.SwingUtilities+invokeLater(Runnable) javax.swing.SwingUtilities+invokeLater(Runnable) +() +run(),,945,29,1,"/** 
 * Implements <code>setVisible</code> in the UIService interface. Shows or hides the main application window depending on the parameter <code>visible</code>.
 * @param isVisible true if we are to show the main application frame andfalse otherwise.
 * @see UIService#setVisible(boolean)
 */
","/**
     * Implements <code>setVisible</code> in the UIService interface. Shows or
     * hides the main application window depending on the parameter
     * <code>visible</code>.
     *
     * @param isVisible true if we are to show the main application frame and
     * false otherwise.
     *
     * @see UIService#setVisible(boolean)
     */
    public void setVisible(final boolean isVisible)
    {
        SwingUtilities.invokeLater(new Runnable(){
            public void run()
            {
                if(isVisible)
                {
                    MainFrame.this.addNativePlugins();
                    MainFrame.super.setVisible(isVisible);
                    MainFrame.super.setExtendedState(MainFrame.NORMAL);
                    MainFrame.super.toFront();
                }
                else
                {
                    MainFrame.super.setVisible(isVisible);
                }
            }
        });
    }",True,True,"The function of this method is to show or hide the main application window based on the value of the parameter ""isVisible"".",True,"This code implements the `setVisible` method in the `UIService` interface. It shows or hides the main application window based on the `isVisible` parameter. If `isVisible` is true, it adds native plugins, sets the window state to normal, and brings the window to the front. If `isVisible` is false, it simply hides the window."
65,"addPluginComponent(Component,Container,Object)",add plugin component c container constraints adds the given component with to the container corresponding to the given constraints param c the component to add param container the container to which to add the given component param constraints the constraints determining the container ,Method,initPluginComponents() addNativePlugins(),,net.java.sip.communicator.service.gui.Container+equals(Object) net.java.sip.communicator.service.gui.Container+equals(Object) java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Component+repaint() java.awt.Component+repaint() java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Component+repaint() java.awt.Component+repaint() java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Component+repaint() java.awt.Component+repaint() java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Component+repaint() java.awt.Component+repaint() net.java.sip.communicator.service.gui.Container+equals(Object) net.java.sip.communicator.service.gui.Container+equals(Object) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Component+repaint() javax.swing.JFrame+getContentPane() javax.swing.JFrame+getContentPane() java.awt.Component+repaint() java.awt.Container+validate() javax.swing.JFrame+getContentPane() javax.swing.JFrame+getContentPane() java.awt.Container+validate(),net.java.sip.communicator.service.gui.Container+CONTAINER_MAIN_WINDOW java.awt.BorderLayout+NORTH net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelNorth net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelNorth java.awt.BorderLayout+SOUTH net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelSouth net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelSouth java.awt.BorderLayout+WEST net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelWest net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelWest java.awt.BorderLayout+EAST net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelEast net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelEast net.java.sip.communicator.service.gui.Container+CONTAINER_STATUS_BAR net.java.sip.communicator.impl.gui.main.MainFrame+statusBarPanel,1446,43,2,"/** 
 * Adds the given component with to the container corresponding to the given constraints.
 * @param c the component to add
 * @param container the container to which to add the given component
 * @param constraints the constraints determining the container
 */
","/**
     * Adds the given component with to the container corresponding to the
     * given constraints.
     *
     * @param c the component to add
     * @param container the container to which to add the given component
     * @param constraints the constraints determining the container
     */
    private void addPluginComponent(Component c,
                                    Container container,
                                    Object constraints)
    {
        if (container.equals(Container.CONTAINER_MAIN_WINDOW))
        {
            if (constraints.equals(BorderLayout.NORTH))
            {
                pluginPanelNorth.add(c);
                pluginPanelNorth.repaint();
            }
            else if (constraints.equals(BorderLayout.SOUTH))
            {
                pluginPanelSouth.add(c);
                pluginPanelSouth.repaint();
            }
            else if (constraints.equals(BorderLayout.WEST))
            {
                pluginPanelWest.add(c);
                pluginPanelWest.repaint();
            }
            else if (constraints.equals(BorderLayout.EAST))
            {
                pluginPanelEast.add(c);
                pluginPanelEast.repaint();
            }
        }
        else if (container.equals(Container.CONTAINER_STATUS_BAR))
        {
            statusBarPanel.add(c);
        }

        this.getContentPane().repaint();
        this.getContentPane().validate();
    }",True,True,"This method adds a given component to a container based on the given constraints. If the container is the main window, the component is added to the corresponding panel based on the constraints (north, south, west, east). If the container is the status bar, the component is added to the status bar panel. Finally, the content pane is repainted and validated.",False,"This code defines a private method called ""addPluginComponent"" that adds a given component to a container based on the provided constraints. If the container is the main window, the component is added to the corresponding panel (north, south, west, or east), and if the container is the status bar, the component is added to the status bar panel. The method then repaints and validates the content pane of the current frame."
66,"removePluginComponent(Component,Container,Object)",remove plugin component c container constraints removes the given component from the container corresponding to the given constraints param c the component to remove param container the container from which to remove the given component param constraints the constraints determining the container ,Method,removeNativePlugins(),,net.java.sip.communicator.service.gui.Container+equals(Object) net.java.sip.communicator.service.gui.Container+equals(Object) java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.lang.Object+equals(Object) java.lang.Object+equals(Object) java.awt.Container+remove(Component) java.awt.Container+remove(Component) net.java.sip.communicator.service.gui.Container+equals(Object) net.java.sip.communicator.service.gui.Container+equals(Object) java.awt.Container+remove(Component) java.awt.Container+remove(Component),net.java.sip.communicator.service.gui.Container+CONTAINER_MAIN_WINDOW java.awt.BorderLayout+NORTH net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelNorth java.awt.BorderLayout+SOUTH net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelSouth java.awt.BorderLayout+WEST net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelWest java.awt.BorderLayout+EAST net.java.sip.communicator.impl.gui.main.MainFrame+pluginPanelEast net.java.sip.communicator.service.gui.Container+CONTAINER_STATUS_BAR net.java.sip.communicator.impl.gui.main.MainFrame+statusBarPanel net.java.sip.communicator.impl.gui.main.MainFrame+statusBarPanel,1116,28,2,"/** 
 * Removes the given component from the container corresponding to the given constraints.
 * @param c the component to remove
 * @param container the container from which to remove the given component
 * @param constraints the constraints determining the container
 */
","/**
     * Removes the given component from the container corresponding to the given
     * constraints.
     *
     * @param c the component to remove
     * @param container the container from which to remove the given component
     * @param constraints the constraints determining the container
     */
    private void removePluginComponent( Component c,
                                        Container container,
                                        Object constraints)
    {
        if (container.equals(Container.CONTAINER_MAIN_WINDOW))
        {
            if (constraints.equals(BorderLayout.NORTH))
                pluginPanelNorth.remove(c);
            else if (constraints.equals(BorderLayout.SOUTH))
                pluginPanelSouth.remove(c);
            else if (constraints.equals(BorderLayout.WEST))
                pluginPanelWest.remove(c);
            else if (constraints.equals(BorderLayout.EAST))
                pluginPanelEast.remove(c);
        }
        else if (container.equals(Container.CONTAINER_STATUS_BAR))
        {
            this.statusBarPanel.remove(c);
        }
    }",True,True,"This method serves to remove a given component from a container based on the given constraints. It checks the container and constraints, and removes the component from the corresponding panel.",False,"This code defines a private method called ""removePluginComponent"" that removes a given component from a container based on the provided constraints. It checks if the container is the main window and removes the component from the corresponding panel (north, south, west, or east), or if the container is the status bar and removes the component from the status bar panel."
67,getAccountStatusPanel(),get account status panel returns the account status panel return the account status panel ,Method,,net.java.sip.communicator.impl.gui.main.login.LoginManager+login(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.login.LoginManager+registrationStateChanged(RegistrationStateChangeEvent),,net.java.sip.communicator.impl.gui.main.MainFrame+accountStatusPanel,194,8,1,"/** 
 * Returns the account status panel.
 * @return the account status panel.
 */
","/**
     * Returns the account status panel.
     * @return the account status panel.
     */
    public AccountStatusPanel getAccountStatusPanel()
    {
        return accountStatusPanel;
    }",True,True,This method returns the account status panel.,True,"This code defines a method named ""getAccountStatusPanel"" that returns an instance of the ""AccountStatusPanel"" class. The method is used to retrieve the account status panel, which is likely used for displaying information about the account's status."
68,setParams(Object[]),set params window params implementation of link exported window set params object ,Method,,,,,132,4,1,"/** 
 * Implementation of  {@link ExportedWindow#setParams(Object[])}.
 */
","/**
     * Implementation of {@link ExportedWindow#setParams(Object[])}.
     */
    public void setParams(Object[] windowParams) {}",True,True,This method serves as an implementation of the setParams method in the ExportedWindow interface. It takes an array of Object parameters and does not return anything.,False,"The code defines a method called ""setParams"" which takes an array of objects as a parameter. The purpose of this method is not specified in the given code snippet."
69,windowClosed(WindowEvent),window closed event param event currently not used ,Method,,,"net.java.sip.communicator.impl.gui.UIServiceImpl+getExitOnMainWindowClose() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getExitOnMainWindowClose() org.osgi.framework.Bundle+stop() org.osgi.framework.BundleContext+getBundle(long) org.osgi.framework.BundleContext+getBundle(long) org.osgi.framework.Bundle+stop() net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) java.lang.System+exit(int) java.lang.System+exit(int)",net.java.sip.communicator.impl.gui.GuiActivator+bundleContext net.java.sip.communicator.impl.gui.main.MainFrame+logger,851,24,4,"/** 
 * @param event Currently not used
 */
","/**
     * @param event Currently not used
     */
    protected void windowClosed(WindowEvent event)
    {
        if(GuiActivator.getUIService().getExitOnMainWindowClose())
        {
            try
            {
                GuiActivator.bundleContext.getBundle(0).stop();
            }
            catch (BundleException ex)
            {
                logger.error(""Failed to gently shutdown Felix"", ex);
                System.exit(0);
            }
            //stopping a bundle doesn't leave the time to the felix thread to
            //properly end all bundles and call their Activator.stop() methods.
            //if this causes problems don't uncomment the following line but
            //try and see why felix isn't exiting (suggesting: is it running
            //in embedded mode?)
            //System.exit(0);
        }
    }",True,True,"This method is called when a window is closed. It checks if the application should exit when the main window is closed. If so, it stops the main bundle and exits the application.",False,"The `windowClosed` method is called when a window is closed. If the application is configured to exit when the main window is closed, it attempts to stop the Felix bundle and if it fails, it logs an error and exits the system."
70,windowClosing(WindowEvent),window closing event overrides sip comm frame window closing window event reflects the closed state of this main frame in the configuration in order to make it accessible to interested parties displays the warning that the application will not quit param event the window event that notified us ,Method,,,net.java.sip.communicator.util.swing.SIPCommFrame+windowClosing(WindowEvent) net.java.sip.communicator.impl.gui.UIServiceImpl+getExitOnMainWindowClose() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getExitOnMainWindowClose() javax.swing.SwingUtilities+invokeLater(Runnable) javax.swing.SwingUtilities+invokeLater(Runnable) +() +run(),,1384,35,4,"/** 
 * Overrides SIPCommFrame#windowClosing(WindowEvent). Reflects the closed state of this MainFrame in the configuration in order to make it accessible to interested parties, displays the warning that the application will not quit.
 * @param event the <tt>WindowEvent</tt> that notified us
 */
","/**
     * Overrides SIPCommFrame#windowClosing(WindowEvent). Reflects the closed
     * state of this MainFrame in the configuration in order to make it
     * accessible to interested parties, displays the warning that the
     * application will not quit.
     * @param event the <tt>WindowEvent</tt> that notified us
     */
    protected void windowClosing(WindowEvent event)
    {
        super.windowClosing(event);

        if (!GuiActivator.getUIService().getExitOnMainWindowClose())
        {
            SwingUtilities.invokeLater(new Runnable()
            {
                public void run()
                {
                    if (ConfigurationManager.isQuitWarningShown())
                    {
                        MessageDialog dialog =
                            new MessageDialog(null,
                                GuiActivator.getResources().getI18NString(
                                ""service.gui.CLOSE""),
                                GuiActivator.getResources().getI18NString(
                                ""service.gui.HIDE_MAIN_WINDOW""), false);

                        if (dialog.showDialog() == MessageDialog.OK_DONT_ASK_CODE)
                            ConfigurationManager.setQuitWarningShown(false);
                    }
                }
            });

            ConfigurationManager.setApplicationVisible(false);
        }
    }",False,True,"This method is called when the window is closing. It reflects the closed state of the MainFrame in the configuration, displays a warning if necessary, and sets the application to be not visible.",False,"This code overrides the windowClosing method in the SIPCommFrame class. It reflects the closed state of the MainFrame in the configuration, displays a warning message if the application will not quit, and updates the visibility of the application accordingly."
71,MainKeyDispatcher,main key dispatcher the main key dispatcher is added to pre listen key events before they re delivered to the current focus owner in order to introduce a specific behavior for the search field on top of the contact list ,MemberClass,,,"net.java.sip.communicator.impl.gui.main.MainFrame.MainKeyDispatcher+MainKeyDispatcher(KeyboardFocusManager) net.java.sip.communicator.impl.gui.main.MainFrame.MainKeyDispatcher+dispatchKeyEvent(KeyEvent) java.awt.Window+isFocused() java.awt.Window+isFocused() java.awt.AWTEvent+getID() java.awt.AWTEvent+getID() java.awt.AWTEvent+getID() java.awt.AWTEvent+getID() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.InputEvent+isControlDown() java.awt.event.InputEvent+isControlDown() java.awt.event.InputEvent+isMetaDown() java.awt.event.InputEvent+isMetaDown() net.java.sip.communicator.impl.gui.main.MainFrame+ctrlEnterKeyTyped() net.java.sip.communicator.impl.gui.main.MainFrame+ctrlEnterKeyTyped() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.lang.Object+equals(Object) java.awt.KeyboardFocusManager+getFocusOwner() java.awt.KeyboardFocusManager+getFocusOwner() java.lang.Object+equals(Object) java.awt.KeyboardFocusManager+getPermanentFocusOwner() java.awt.KeyboardFocusManager+getPermanentFocusOwner() net.java.sip.communicator.impl.gui.main.MainFrame+enterKeyTyped() net.java.sip.communicator.impl.gui.main.MainFrame+enterKeyTyped() net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+getContactList() net.java.sip.communicator.impl.gui.main.MainFrame+getContactListPanel() net.java.sip.communicator.impl.gui.main.MainFrame+getContactListPanel() net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+getContactList() java.awt.Component+isFocusOwner() java.awt.Component+isFocusOwner() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() net.java.sip.communicator.impl.gui.main.contactlist.TreeContactList+selectFirstContact() net.java.sip.communicator.impl.gui.main.contactlist.TreeContactList+selectFirstContact() javax.swing.JComponent+requestFocus() javax.swing.JComponent+requestFocus() java.awt.Component+isFocusOwner() java.awt.Component+isFocusOwner() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() javax.swing.JTree+removeSelectionRows(int[]) javax.swing.JTree+removeSelectionRows(int[]) javax.swing.JTree+getSelectionRows() javax.swing.JTree+getSelectionRows() net.java.sip.communicator.util.swing.SIPCommTextField+getText() net.java.sip.communicator.util.swing.SIPCommTextField+getText() javax.swing.JComponent+requestFocus() javax.swing.JComponent+requestFocus() javax.swing.JTree+getSelectionPath() javax.swing.JTree+getSelectionPath() java.awt.event.KeyEvent+getKeyChar() java.awt.event.KeyEvent+getKeyChar() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() javax.swing.tree.TreePath+getLastPathComponent() javax.swing.tree.TreePath+getLastPathComponent() java.awt.event.KeyEvent+getKeyChar() java.awt.event.KeyEvent+getKeyChar() java.awt.event.KeyEvent+getKeyChar() java.awt.event.KeyEvent+getKeyChar() java.awt.Component+isFocusOwner() java.awt.Component+isFocusOwner() java.awt.KeyboardFocusManager+getFocusOwner() java.awt.KeyboardFocusManager+getFocusOwner() java.lang.Object+equals(Object) java.awt.KeyboardFocusManager+getFocusOwner() java.awt.KeyboardFocusManager+getFocusOwner() java.lang.Object+equals(Object) java.awt.KeyboardFocusManager+getPermanentFocusOwner() java.awt.KeyboardFocusManager+getPermanentFocusOwner() javax.swing.JComponent+requestFocusInWindow() javax.swing.JComponent+requestFocusInWindow() java.awt.KeyboardFocusManager+redispatchEvent(Component,AWTEvent) java.awt.KeyboardFocusManager+redispatchEvent(Component,AWTEvent)",net.java.sip.communicator.impl.gui.main.MainFrame.MainKeyDispatcher+keyManager net.java.sip.communicator.impl.gui.main.MainFrame.MainKeyDispatcher+keyManager java.awt.event.KeyEvent+KEY_PRESSED java.awt.event.KeyEvent+KEY_TYPED java.awt.event.KeyEvent+VK_ENTER java.awt.event.KeyEvent+VK_ENTER net.java.sip.communicator.impl.gui.main.MainFrame.MainKeyDispatcher+keyManager net.java.sip.communicator.impl.gui.main.MainFrame.MainKeyDispatcher+keyManager net.java.sip.communicator.impl.gui.main.MainFrame+searchField java.awt.event.KeyEvent+VK_UP java.awt.event.KeyEvent+VK_DOWN java.awt.event.KeyEvent+VK_PAGE_UP java.awt.event.KeyEvent+VK_PAGE_DOWN java.awt.event.KeyEvent+VK_ESCAPE net.java.sip.communicator.impl.gui.main.MainFrame+searchField net.java.sip.communicator.impl.gui.main.MainFrame+searchField java.awt.event.KeyEvent+CHAR_UNDEFINED java.awt.event.KeyEvent+VK_ENTER java.awt.event.KeyEvent+VK_DELETE java.awt.event.KeyEvent+VK_BACK_SPACE java.awt.event.KeyEvent+VK_TAB java.awt.event.KeyEvent+VK_SPACE net.java.sip.communicator.impl.gui.main.MainFrame+searchField net.java.sip.communicator.impl.gui.main.MainFrame.MainKeyDispatcher+keyManager net.java.sip.communicator.impl.gui.main.MainFrame.MainKeyDispatcher+keyManager net.java.sip.communicator.impl.gui.main.MainFrame.MainKeyDispatcher+keyManager net.java.sip.communicator.impl.gui.main.MainFrame+searchField net.java.sip.communicator.impl.gui.main.MainFrame.MainKeyDispatcher+keyManager net.java.sip.communicator.impl.gui.main.MainFrame+searchField,4934,122,2,"/** 
 * The <tt>MainKeyDispatcher</tt> is added to pre-listen KeyEvents before they're delivered to the current focus owner in order to introduce a specific behavior for the <tt>SearchField</tt> on top of the contact list.
 */
","/**
     * The <tt>MainKeyDispatcher</tt> is added to pre-listen KeyEvents before
     * they're delivered to the current focus owner in order to introduce a
     * specific behavior for the <tt>SearchField</tt> on top of the contact
     * list.
     */
    private class MainKeyDispatcher implements KeyEventDispatcher
    {
        private KeyboardFocusManager keyManager;

        /**
         * Creates an instance of <tt>MainKeyDispatcher</tt>.
         * @param keyManager the parent <tt>KeyboardFocusManager</tt>
         */
        public MainKeyDispatcher(KeyboardFocusManager keyManager)
        {
            this.keyManager = keyManager;
        }

        /**
         * Dispatches the given <tt>KeyEvent</tt>.
         * @param e the <tt>KeyEvent</tt> to dispatch
         * @return <tt>true</tt> if the KeyboardFocusManager should take no
         * further action with regard to the KeyEvent; <tt>false</tt>
         * otherwise
         */
        public boolean dispatchKeyEvent(KeyEvent e)
        {
            // If this window is not the focus window  or if the event is not
            // of type PRESSED we have nothing more to do here.
            if (!isFocused()
                || (e.getID() != KeyEvent.KEY_PRESSED
                    && e.getID() != KeyEvent.KEY_TYPED))
                return false;

            // Ctrl-Enter || Cmd-Enter typed when this window is the focused
            // window.
            //
            // Tried to make this with key bindings first, but has a problem
            // with enter key binding. When the popup menu containing call
            // contacts was opened the default keyboard manager was prioritizing
            // the window ENTER key, which will open a chat and we wanted that
            // the enter starts a call with the selected contact from the menu.
            // This is why we need to do it here and to check if the
            // permanent focus owner is equal to the focus owner, which is not
            // the case when a popup menu is opened.
            if (e.getKeyCode() == KeyEvent.VK_ENTER
                && (e.isControlDown() || e.isMetaDown()))
            {
                ctrlEnterKeyTyped();
                return false;
            }
            else if (e.getKeyCode() == KeyEvent.VK_ENTER
                && keyManager.getFocusOwner()
                .equals(keyManager.getPermanentFocusOwner()))
            {
                enterKeyTyped();
                return false;
            }

            TreeContactList contactList
                = getContactListPanel().getContactList();

            // If the search field is the focus owner.
            if (searchField.isFocusOwner()
                && (e.getKeyCode() == KeyEvent.VK_UP
                    || e.getKeyCode() == KeyEvent.VK_DOWN
                    || e.getKeyCode() == KeyEvent.VK_PAGE_UP
                    || e.getKeyCode() == KeyEvent.VK_PAGE_DOWN))
            {
                contactList.selectFirstContact();
                contactList.requestFocus();
                return false;
            }

            // If the contact list is the focus owner.
            if (contactList.isFocusOwner()
                && e.getKeyCode() == KeyEvent.VK_ESCAPE)
            {
                // Removes all current selections.
                contactList.removeSelectionRows(contactList.getSelectionRows());

                if (searchField.getText() != null)
                {
                    searchField.requestFocus();
                }
                return false;
            }
            TreePath selectionPath = contactList.getSelectionPath();

            // No matter who is the focus owner.
            if (e.getKeyChar() == KeyEvent.CHAR_UNDEFINED
                || e.getKeyCode() == KeyEvent.VK_ENTER
                || e.getKeyCode() == KeyEvent.VK_DELETE
                || e.getKeyCode() == KeyEvent.VK_BACK_SPACE
                || e.getKeyCode() == KeyEvent.VK_TAB
                || e.getKeyCode() == KeyEvent.VK_SPACE
                || (selectionPath != null
                    && selectionPath.getLastPathComponent() instanceof GroupNode
                    && (e.getKeyChar() == '+'
                        || e.getKeyChar() == '-')))
            {
                return false;
            }

            if (!searchField.isFocusOwner()
                && keyManager.getFocusOwner() != null
                && keyManager.getFocusOwner()
                    .equals(keyManager.getPermanentFocusOwner()))
            {
                // Request the focus in the search field if a letter is typed.
                searchField.requestFocusInWindow();

                // We re-dispatch the event to search field.
                keyManager.redispatchEvent(searchField, e);

                // We don't want to dispatch further this event.
                return true;
            }
            return false;
        }
    }",False,True,"/** 
 * The <tt>MainKeyDispatcher</tt> is added to pre-listen KeyEvents before they're delivered to the current focus owner in order to introduce a specific behavior for the <tt>SearchField</tt> on top of the contact list.
 */
",False,"/** 
 * The <tt>MainKeyDispatcher</tt> is added to pre-listen KeyEvents before they're delivered to the current focus owner in order to introduce a specific behavior for the <tt>SearchField</tt> on top of the contact list.
 */
"
72,enterKeyTyped(),enter key typed called when the enter key was typed when this window was the focused window performs the appropriate actions depending on the current state of the contact list ,Method,MainKeyDispatcher.dispatchKeyEvent(KeyEvent),,java.awt.Component+isVisible() java.awt.Component+isVisible() net.java.sip.communicator.impl.gui.main.contactlist.UnknownContactPanel+addUnknownContact() net.java.sip.communicator.impl.gui.main.contactlist.UnknownContactPanel+addUnknownContact() java.awt.Component+isVisible() java.awt.Component+isVisible() net.java.sip.communicator.impl.gui.main.contactlist.TreeContactList+startSelectedContactChat() net.java.sip.communicator.impl.gui.GuiActivator+getContactList() net.java.sip.communicator.impl.gui.GuiActivator+getContactList() net.java.sip.communicator.impl.gui.main.contactlist.TreeContactList+startSelectedContactChat(),net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel,591,17,2,"/** 
 * Called when the ENTER key was typed when this window was the focused window. Performs the appropriate actions depending on the current state of the contact list.
 */
","/**
     * Called when the ENTER key was typed when this window was the focused
     * window. Performs the appropriate actions depending on the current state
     * of the contact list.
     */
    private void enterKeyTyped()
    {
        if (unknownContactPanel != null && unknownContactPanel.isVisible())
        {
            unknownContactPanel.addUnknownContact();
        }
        else if (contactListPanel.isVisible())
        {
            // Starts a chat with the currently selected contact.
            GuiActivator.getContactList().startSelectedContactChat();
        }
    }",True,True,"This method is called when the ENTER key is typed in a window. It performs different actions depending on the current state of the contact list. If the unknown contact panel is visible, it adds an unknown contact. If the contact list panel is visible, it starts a chat with the currently selected contact.",False,"The `enterKeyTyped()` method is called when the ENTER key is pressed in a window. It performs different actions depending on the current state of the contact list. If the unknown contact panel is visible, it adds an unknown contact. Otherwise, it starts a chat with the currently selected contact in the contact list panel."
73,ctrlEnterKeyTyped(),ctrl enter key typed called when the ctrl enter or cmd enter keys were typed when this window was the focused window performs the appropriate actions depending on the current state of the contact list ,Method,MainKeyDispatcher.dispatchKeyEvent(KeyEvent),,java.awt.Component+isVisible() java.awt.Component+isVisible() net.java.sip.communicator.impl.gui.main.contactlist.UnknownContactPanel+startCall() net.java.sip.communicator.impl.gui.main.contactlist.UnknownContactPanel+startCall() java.awt.Component+isVisible() java.awt.Component+isVisible() net.java.sip.communicator.impl.gui.main.contactlist.TreeContactList+startSelectedContactCall() net.java.sip.communicator.impl.gui.GuiActivator+getContactList() net.java.sip.communicator.impl.gui.GuiActivator+getContactList() net.java.sip.communicator.impl.gui.main.contactlist.TreeContactList+startSelectedContactCall(),net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel net.java.sip.communicator.impl.gui.main.MainFrame+unknownContactPanel net.java.sip.communicator.impl.gui.main.MainFrame+contactListPanel,606,17,1,"/** 
 * Called when the CTRL-ENTER or CMD-ENTER keys were typed when this window was the focused window. Performs the appropriate actions depending on the current state of the contact list.
 */
","/**
     * Called when the CTRL-ENTER or CMD-ENTER keys were typed when this window
     * was the focused window. Performs the appropriate actions depending on the
     * current state of the contact list.
     */
    public void ctrlEnterKeyTyped()
    {
        if (unknownContactPanel != null && unknownContactPanel.isVisible())
        {
            unknownContactPanel.startCall();
        }
        else if (contactListPanel.isVisible())
        {
            // Starts a chat with the currently selected contact.
            GuiActivator.getContactList().startSelectedContactCall();
        }
    }",True,True,"This method is called when the CTRL-ENTER or CMD-ENTER keys are typed. It performs different actions depending on the current state of the contact list. If the unknown contact panel is visible, it starts a call. If the contact list panel is visible, it starts a chat with the currently selected contact.",False,"The method `ctrlEnterKeyTyped()` is called when the user presses the CTRL-ENTER or CMD-ENTER keys. It performs different actions depending on the current state of the contact list. If the unknown contact panel is visible, it starts a call. Otherwise, if the contact list panel is visible, it starts a chat with the currently selected contact."
