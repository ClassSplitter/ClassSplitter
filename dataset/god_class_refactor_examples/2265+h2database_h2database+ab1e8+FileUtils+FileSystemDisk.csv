index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,MEMORY_PREFIX,memory prefix ,Field,,,,,83,1,25,,"public static final String MEMORY_PREFIX = ""memFS:"", MEMORY_PREFIX_LZF = ""memLZF:"";",True,True,,False,
2,MEMORY_PREFIX_LZF,memory prefix lzf ,Field,,,,,83,1,25,,"public static final String MEMORY_PREFIX = ""memFS:"", MEMORY_PREFIX_LZF = ""memLZF:"";",True,True,,False,
3,MEMORY_FILES,memory files ,Field,,,,,58,1,26,,private static final HashMap MEMORY_FILES = new HashMap();,False,False,,False,
4,IS_FILE_SYSTEM_CASE_INSENSITIVE,is file system case insensitive ,Field,,,,,92,1,26,,private static final boolean IS_FILE_SYSTEM_CASE_INSENSITIVE = (File.separatorChar == '\\');,False,True,,False,
5,"openRandomAccessFile(String,String)",open random access file file name mode ,Method,,"org.h2.store.FileStore+FileStore(DataHandler,String,String,byte[]) org.h2.store.FileStore+openFile()","org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) java.io.RandomAccessFile+RandomAccessFile(String,String) org.h2.util.FileUtils+trace(String,String,Object) org.h2.util.FileUtils+trace(String,String,Object) org.h2.util.FileUtils+freeMemoryAndFinalize() org.h2.util.FileUtils+freeMemoryAndFinalize() java.io.RandomAccessFile+RandomAccessFile(String,String)",,476,11,9,,"public static RandomAccessFile openRandomAccessFile(String fileName, String mode) throws IOException {
        fileName = translateFileName(fileName);
        try {
            RandomAccessFile file = new RandomAccessFile(fileName, mode);
            trace(""openRandomAccessFile"", fileName, file);
            return file;
        } catch (IOException e) {
            freeMemoryAndFinalize();
            return new RandomAccessFile(fileName, mode);
        }
    }",True,True,The function of the method is to open a RandomAccessFile with the specified file name and mode. It also handles any IOException that may occur during the process.,True,"The code defines a method named `openRandomAccessFile` that takes a file name and a mode as input parameters and returns a `RandomAccessFile` object. It attempts to open the file using the provided file name and mode, and if an `IOException` occurs, it frees memory and finalizes before retrying to open the file."
6,"setLength(RandomAccessFile,long)",set length file new length ,Method,,org.h2.store.FileStore+setLength(long) org.h2.store.FileStore+setLength(long) org.h2.store.FileStore+length() org.h2.test.poweroff.Test+testFile(DataOutputStream),"org.h2.util.FileUtils+trace(String,String,Object) org.h2.util.FileUtils+trace(String,String,Object) java.io.RandomAccessFile+setLength(long) java.io.RandomAccessFile+setLength(long) java.io.RandomAccessFile+length() java.io.RandomAccessFile+length() java.io.RandomAccessFile+getFilePointer() java.io.RandomAccessFile+getFilePointer() java.io.RandomAccessFile+seek(long) java.io.RandomAccessFile+seek(long) java.lang.Math+min(long,long) java.lang.Math+min(long,long) java.lang.Math+min(long,long) java.lang.Math+min(long,long) java.io.RandomAccessFile+write(byte[],int,int) java.io.RandomAccessFile+write(byte[],int,int) java.io.RandomAccessFile+seek(long) java.io.RandomAccessFile+seek(long)",,939,24,9,,"public static void setLength(RandomAccessFile file, long newLength) throws IOException {
        try {
            trace(""setLength"", null, file);
            file.setLength(newLength);
        } catch (IOException e) {
            long length = file.length();
            if (newLength < length) {
                throw e;
            } else {
                long pos = file.getFilePointer();
                file.seek(length);
                long remaining = newLength - length;
                int maxSize = 1024 * 1024;
                int block = (int) Math.min(remaining, maxSize);
                byte[] buffer = new byte[block];
                while (remaining > 0) {
                    int write = (int) Math.min(remaining, maxSize);
                    file.write(buffer, 0, write);
                    remaining -= write;
                }
                file.seek(pos);
            }
        }
    }",False,False,"The function of this method is to set the length of a RandomAccessFile object to a specified value. If the new length is greater than the current length, it fills the gap with empty bytes.",True,"The code defines a method called ""setLength"" that takes a RandomAccessFile object and a new length as parameters. It attempts to set the length of the file to the new length, but if an IOException occurs, it handles it by appending null bytes to the end of the file until the new length is reached."
7,"openFileWriter(String,boolean)",open file writer file name append ,Method,,"org.h2.command.dml.ScriptCommand+combineClob(Connection,int) org.h2.message.TraceObject+logAndConvert(Throwable) org.h2.message.TraceSystem+openWriter() org.h2.tools.ConvertTraceFile+convertFile(String,String,String) org.h2.tools.ConvertTraceFile+convertFile(String,String,String) org.h2.tools.Recover+getWriter(String,String) org.h2.tools.Script+execute(String,String,String,String)","org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) java.io.FileWriter+FileWriter(String,boolean) org.h2.util.FileUtils+freeMemoryAndFinalize() org.h2.util.FileUtils+freeMemoryAndFinalize() java.io.FileWriter+FileWriter(String,boolean)",,356,9,9,,"public static FileWriter openFileWriter(String fileName, boolean append) throws IOException {
        fileName = translateFileName(fileName);
        try {
            return new FileWriter(fileName, append);
        } catch (IOException e) {
            freeMemoryAndFinalize();
            return new FileWriter(fileName, append);
        }
    }",False,True,"This method opens a FileWriter for a given file name, with an option to append to the existing file. It translates the file name, handles any IOExceptions, and returns the FileWriter object.",True,"The code defines a method named ""openFileWriter"" that takes a file name and a boolean value indicating whether to append to the file. It attempts to create a FileWriter object with the given file name and append value, and if an IOException occurs, it frees memory and finalizes before retrying the creation of the FileWriter object."
8,"fileStartsWith(String,String)",file starts with file name prefix ,Method,,"org.h2.engine.Database+reserveLobFileObjectIds() org.h2.engine.Database+deleteOldTempFiles() org.h2.log.LogFile+openIfLogFile(LogSystem,String,String) org.h2.store.FileLister+getDatabaseFiles(String,String,boolean)",org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.StringUtils+toUpperEnglish(String) org.h2.util.StringUtils+toUpperEnglish(String) org.h2.util.StringUtils+toUpperEnglish(String) org.h2.util.StringUtils+toUpperEnglish(String) java.lang.String+startsWith(String) java.lang.String+startsWith(String),org.h2.util.FileUtils+IS_FILE_SYSTEM_CASE_INSENSITIVE,350,8,9,,"public static boolean fileStartsWith(String fileName, String prefix) {
        fileName = translateFileName(fileName);
        if (IS_FILE_SYSTEM_CASE_INSENSITIVE) {
            fileName = StringUtils.toUpperEnglish(fileName);
            prefix = StringUtils.toUpperEnglish(prefix);
        }
        return fileName.startsWith(prefix);
    }",False,True,"This method checks if a file name starts with a given prefix. It first translates the file name, then converts both the file name and prefix to uppercase if the file system is case-insensitive. Finally, it checks if the file name starts with the prefix and returns a boolean value.",True,"This code defines a method named ""fileStartsWith"" that takes in a file name and a prefix as parameters. It translates the file name, converts both the file name and prefix to uppercase if the file system is case-insensitive, and then checks if the file name starts with the given prefix. It returns a boolean value indicating the result."
9,openFileInputStream(String),open file input stream file name ,Method,"copy(String,String)","org.h2.command.dml.BackupCommand+backupFile(ZipOutputStream,String,String) org.h2.command.dml.ScriptBase+openInput() org.h2.command.dml.ScriptCommand+combineBlob(Connection,int) org.h2.engine.Database+isTextStorage(String,boolean) org.h2.security.SecureSocketFactory+setKeystore() org.h2.server.ftp.FileObjectNative+read(long,OutputStream) org.h2.tools.Backup+execute(String,String,String,boolean) org.h2.tools.Csv+initRead() org.h2.tools.Restore+getOriginalDbName(String,String) org.h2.tools.Restore+execute(String,String,String,boolean) org.h2.tools.RunScript+execute(Connection,String,boolean,String)","java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.net.URL+URL(String) java.net.URL+openStream() java.net.URL+openStream() org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) java.io.FileInputStream+FileInputStream(String) org.h2.util.FileUtils+trace(String,String,Object) org.h2.util.FileUtils+trace(String,String,Object)",,571,13,9,,"public static InputStream openFileInputStream(String fileName) throws IOException {
        if (fileName.indexOf(':') > 1) {
            // if the : is in position 1, a windows file access is assumed: C:.. or D:
            // otherwise a URL is assumed
            URL url = new URL(fileName);
            InputStream in = url.openStream();
            return in;
        }
        fileName = translateFileName(fileName);
        FileInputStream in = new FileInputStream(fileName);
        trace(""openFileInputStream"", fileName, in);
        return in;
    }",False,True,"This method opens an input stream for a file specified by the given file name. It first checks if the file name contains a colon (':'), in which case it assumes it is a URL and opens a stream to that URL. Otherwise, it assumes it is a local file and opens a stream to that file.",True,"The code defines a method named `openFileInputStream` that takes a `fileName` as input and returns an `InputStream`. It first checks if the `fileName` represents a URL or a Windows file access, and accordingly opens an `InputStream` from the URL or a local file. It also includes a trace statement for debugging purposes."
10,openFileOutputStream(String),open file output stream file name ,Method,"copy(String,String)","org.h2.command.dml.BackupCommand+backupTo(String) org.h2.command.dml.ScriptBase+openOutput() org.h2.command.dml.ScriptCommand+combineBlob(Connection,int) org.h2.security.SecureSocketFactory+setKeystore() org.h2.server.ftp.FileObjectNative+write(InputStream) org.h2.server.ftp.FtpServer+StreamRedirect.openOutput() org.h2.server.web.WebServer+saveSettings() org.h2.store.FileLock+save() org.h2.tools.Backup+execute(String,String,String,boolean) org.h2.tools.Recover+dumpLob(String,boolean) org.h2.tools.Restore+execute(String,String,String,boolean)","org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) java.io.File+File(String) org.h2.util.FileUtils+createDirs(String) org.h2.util.FileUtils+createDirs(String) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath() java.io.FileOutputStream+FileOutputStream(String) org.h2.util.FileUtils+trace(String,String,Object) org.h2.util.FileUtils+trace(String,String,Object) org.h2.util.FileUtils+freeMemoryAndFinalize() org.h2.util.FileUtils+freeMemoryAndFinalize() java.io.FileOutputStream+FileOutputStream(String)",,578,13,9,,"public static FileOutputStream openFileOutputStream(String fileName) throws IOException, SQLException {
        fileName = translateFileName(fileName);
        try {
            File file = new File(fileName);
            FileUtils.createDirs(file.getAbsolutePath());
            FileOutputStream out = new FileOutputStream(fileName);
            trace(""openFileOutputStream"", fileName, out);
            return out;            
        } catch (IOException e) {
            freeMemoryAndFinalize();
            return new FileOutputStream(fileName);
        }
    }",True,True,"The function of this method is to open a FileOutputStream for a given file name. It first translates the file name, creates any necessary directories, and then opens the FileOutputStream. If an IOException occurs, it frees memory and finalizes before retrying to open the FileOutputStream.",True,"The code defines a method named `openFileOutputStream` that takes a file name as input and returns a `FileOutputStream` object. It first translates the file name, creates necessary directories, and then opens the file output stream. If an exception occurs, it frees memory and finalizes before retrying to open the stream."
11,freeMemoryAndFinalize(),free memory and finalize ,Method,"openRandomAccessFile(String,String) openFileWriter(String,boolean) openFileOutputStream(String)",,"org.h2.util.FileUtils+trace(String,String,Object) org.h2.util.FileUtils+trace(String,String,Object) java.lang.Runtime+getRuntime() java.lang.Runtime+getRuntime() java.lang.Runtime+freeMemory() java.lang.Runtime+freeMemory() java.lang.Runtime+gc() java.lang.Runtime+gc() java.lang.Runtime+freeMemory() java.lang.Runtime+freeMemory() java.lang.Runtime+runFinalization() java.lang.Runtime+runFinalization()",,429,14,10,,"private static void freeMemoryAndFinalize() {
        trace(""freeMemoryAndFinalize"", null, null);
        Runtime rt = Runtime.getRuntime();
        long mem = rt.freeMemory();
        for (int i = 0; i < 16; i++) {
            rt.gc();
            long now = rt.freeMemory();
            rt.runFinalization();
            if (now == mem) {
                break;
            }
            mem = now;
        }
    }",True,True,"The function of the method is to free up memory and finalize objects by invoking the garbage collector, running finalization methods, and checking if the memory has been successfully freed.",False,"The code defines a method called ""freeMemoryAndFinalize"" that frees up memory and runs finalization on objects. It uses the Runtime class to get the current amount of free memory, runs garbage collection and finalization multiple times until the amount of free memory remains constant."
12,"rename(String,String)",rename old name new name ,Method,,"org.h2.log.LogSystem+loadActiveLogFiles() org.h2.message.TraceSystem+writeFile(String,Throwable) org.h2.tools.ChangePassword+execute(String,String,String,byte[],byte[],boolean) org.h2.tools.ChangePassword+execute(String,String,String,byte[],byte[],boolean) org.h2.tools.ChangePassword+copy(String,boolean,FileStore,byte[]) org.h2.value.ValueLob+renameFile(DataHandler,String,String)","org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+getMemoryFile(String) org.h2.util.FileUtils+getMemoryFile(String) org.h2.util.MemoryFile+setName(String) org.h2.util.MemoryFile+setName(String) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.io.File+File(String) java.io.File+File(String) java.lang.String+equals(Object) java.io.File+getName() java.io.File+getName() java.lang.String+equals(Object) java.io.File+getName() java.io.File+getName() org.h2.message.Message+getInternalError(String) org.h2.message.Message+getInternalError(String) java.io.File+exists() java.io.File+exists() org.h2.message.Message+getSQLException(int,String[]) org.h2.message.Message+getSQLException(int,String[]) java.io.File+exists() java.io.File+exists() org.h2.message.Message+getSQLException(int,String[]) org.h2.message.Message+getSQLException(int,String[]) org.h2.util.FileUtils+trace(String,String,Object) org.h2.util.FileUtils+trace(String,String,Object) java.io.File+renameTo(File) java.io.File+renameTo(File) org.h2.util.FileUtils+wait(int) org.h2.util.FileUtils+wait(int) org.h2.message.Message+getSQLException(int,String[]) org.h2.message.Message+getSQLException(int,String[])",org.h2.util.FileUtils+MEMORY_FILES org.h2.util.FileUtils+MEMORY_FILES org.h2.constant.ErrorCode+FILE_RENAME_FAILED_2 org.h2.constant.ErrorCode+FILE_RENAME_FAILED_2 org.h2.constant.SysProperties+MAX_FILE_RETRY org.h2.constant.ErrorCode+FILE_RENAME_FAILED_2,1428,34,9,,"public static void rename(String oldName, String newName) throws SQLException {
        oldName = translateFileName(oldName);
        newName = translateFileName(newName);
        if (isInMemory(oldName)) {
            MemoryFile f = getMemoryFile(oldName);
            f.setName(newName);
            synchronized (MEMORY_FILES) {
                MEMORY_FILES.put(newName, f);
            }
            return;
        }
        File oldFile = new File(oldName);
        File newFile = new File(newName);
        if (oldFile.getName().equals(newFile.getName())) {
            throw Message.getInternalError(""rename file old=new"");
        }
        if (!oldFile.exists()) {
            throw Message.getSQLException(ErrorCode.FILE_RENAME_FAILED_2, new String[] { oldName + "" (not found)"",
                    newName });
        }
        if (newFile.exists()) {
            throw Message.getSQLException(ErrorCode.FILE_RENAME_FAILED_2,
                    new String[] { oldName, newName + "" (exists)"" });
        }
        for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {
            trace(""rename"", oldName + "" >"" + newName, null);
            boolean ok = oldFile.renameTo(newFile);
            if (ok) {
                return;
            }
            wait(i);
        }
        throw Message.getSQLException(ErrorCode.FILE_RENAME_FAILED_2, new String[]{oldName, newName});
    }",False,True,"This method renames a file or memory file from the old name to the new name. It first translates the file names, checks if the old file is in memory, and if so, updates the name in memory. If the old file is not in memory, it checks if the old and new file names are the same, and throws an error if they are. It then checks if the old file exists and if the new file already exists, throwing errors if either condition is true. If none of these conditions are met, it attempts to rename the file using the old and new file names, retrying a certain number of times if necessary. If the rename is successful, the method returns, otherwise it throws an error.",True,"The given code is a method named ""rename"" that is used to rename a file. It first checks if the file is in memory and if so, updates the name in the memory. If the file is not in memory, it checks if the old file exists, if the new file already exists, and then attempts to rename the file using a loop with a maximum number of retries."
13,loadProperties(String),load properties file name ,Method,,"org.h2.server.web.WebServer+loadProperties() org.h2.store.FileLock+load() org.h2.tools.i18n.PrepareTranslation+buildHtml(String,String,String) org.h2.tools.i18n.PrepareTranslation+buildHtml(String,String,String) org.h2.tools.i18n.PrepareTranslation+extract(String,File,String) org.h2.tools.i18n.PrepareTranslation+prepare(String,String) org.h2.tools.i18n.PrepareTranslation+prepare(String,String) org.h2.tools.i18n.PrepareTranslation+prepare(Properties,Properties,File) org.h2.tools.i18n.PropertiesToUTF8+propertiesToTextUTF8(String,String)",org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.SortedProperties+SortedProperties() java.io.File+File(String) java.io.File+exists() java.io.File+exists() java.io.FileInputStream+FileInputStream(File) java.util.Properties+load(InputStream) java.util.Properties+load(InputStream) java.io.FileInputStream+close() java.io.FileInputStream+close(),,482,14,41,,"public static synchronized Properties loadProperties(String fileName) throws IOException {
        fileName = translateFileName(fileName);
        Properties prop = new SortedProperties();
        File file = new File(fileName);
        if (file.exists()) {
            FileInputStream in = new FileInputStream(file);
            try {
                prop.load(in);
            } finally {
                in.close();
            }
        }
        return prop;
    }",False,False,"This method loads properties from a file specified by the fileName parameter. It translates the fileName, creates a SortedProperties object, checks if the file exists, and if so, loads the properties from the file into the prop object. Finally, it returns the prop object.",True,"This code defines a method called ""loadProperties"" that takes a file name as input and returns a Properties object. It reads the contents of the specified file, if it exists, and loads them into the Properties object. The method is synchronized to ensure thread safety."
14,"getBooleanProperty(Properties,String,boolean)",get boolean property prop key def ,Method,,org.h2.server.web.WebServer+init(String[]) org.h2.server.web.WebServer+init(String[]),"java.util.Properties+getProperty(String,String) java.util.Properties+getProperty(String,String) java.lang.Boolean+booleanValue() java.lang.Boolean+valueOf(String) java.lang.Boolean+valueOf(String) java.lang.Boolean+booleanValue() org.h2.message.TraceSystem+traceThrowable(Throwable) org.h2.message.TraceSystem+traceThrowable(Throwable)",,333,9,9,,"public static boolean getBooleanProperty(Properties prop, String key, boolean def) {
        String value = prop.getProperty(key, """"+def);
        try {
            return Boolean.valueOf(value).booleanValue();
        } catch (Exception e) {
            TraceSystem.traceThrowable(e);
            return def;
        }
    }",False,False,"This method retrieves a boolean property value from a given Properties object using a specified key. If the value is not found or cannot be converted to a boolean, it returns a default value.",True,"This code defines a method named ""getBooleanProperty"" that takes in a Properties object, a key, and a default boolean value. It retrieves the value associated with the key from the Properties object and attempts to convert it to a boolean. If any exception occurs during the conversion, the method logs the exception and returns the default boolean value."
15,"getIntProperty(Properties,String,int)",get int property prop key def ,Method,,org.h2.server.web.WebServer+init(String[]),"java.util.Properties+getProperty(String,String) java.util.Properties+getProperty(String,String) org.h2.util.MathUtils+decodeInt(String) org.h2.util.MathUtils+decodeInt(String) org.h2.message.TraceSystem+traceThrowable(Throwable) org.h2.message.TraceSystem+traceThrowable(Throwable)",,310,9,9,,"public static int getIntProperty(Properties prop, String key, int def) {
        String value = prop.getProperty(key, """"+def);
        try {
            return MathUtils.decodeInt(value);
        } catch (Exception e) {
            TraceSystem.traceThrowable(e);
            return def;
        }
    }",False,False,"This method retrieves an integer property value from a given Properties object using a specified key. If the value is not found or cannot be converted to an integer, it returns a default value.",True,"The code defines a method named `getIntProperty` that takes in a `Properties` object, a key, and a default value. It retrieves the value associated with the key from the `Properties` object and attempts to decode it into an integer using `MathUtils.decodeInt()`. If an exception occurs during the decoding process, the method logs the exception and returns the default value."
16,createDirs(String),create dirs file name ,Method,openFileOutputStream(String),"org.h2.message.TraceSystem+openWriter() org.h2.store.FileStore+FileStore(DataHandler,String,String,byte[])","org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) java.io.File+File(String) java.io.File+exists() java.io.File+exists() java.io.File+getParent() java.io.File+getParent() java.io.File+File(String) java.io.File+exists() java.io.File+exists() java.io.File+mkdirs() java.io.File+mkdirs() org.h2.util.FileUtils+wait(int) org.h2.util.FileUtils+wait(int) org.h2.message.Message+getSQLException(int,String) org.h2.message.Message+getSQLException(int,String)",org.h2.constant.SysProperties+MAX_FILE_RETRY org.h2.constant.ErrorCode+FILE_CREATION_FAILED_1,660,18,9,,"public static void createDirs(String fileName) throws SQLException {
        fileName = translateFileName(fileName);
        File f = new File(fileName);
        if (!f.exists()) {
            String parent = f.getParent();
            if (parent == null) {
                return;
            }
            File dir = new File(parent);
            for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {
                if (dir.exists() || dir.mkdirs()) {
                    return;
                }
                wait(i);
            }
            throw Message.getSQLException(ErrorCode.FILE_CREATION_FAILED_1, parent);
        }
    }",False,True,"This method creates directories for a given file path. It translates the file name, checks if the file exists, and creates the necessary directories if they don't exist. If the directories cannot be created, it throws an exception.",True,"The code defines a method called `createDirs` that takes a `fileName` as input and attempts to create the necessary directories for the file. If the directories already exist, it returns. If the directories cannot be created after multiple attempts, it throws a `SQLException` with an appropriate error message."
17,createNewFile(String),create new file file name ,Method,,org.h2.store.FileLock+lockFile() org.h2.store.FileLock+lockFile() org.h2.store.FileLock+lockSocket() org.h2.store.FileLock+lockSocket(),org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+exists(String) org.h2.util.FileUtils+exists(String) org.h2.util.FileUtils+getMemoryFile(String) org.h2.util.FileUtils+getMemoryFile(String) java.io.File+File(String) java.io.File+createNewFile() java.io.File+createNewFile() org.h2.util.FileUtils+wait(int) org.h2.util.FileUtils+wait(int),org.h2.constant.SysProperties+MAX_FILE_RETRY,793,22,9,,"public static boolean createNewFile(String fileName) throws SQLException {
        fileName = translateFileName(fileName);
        if (isInMemory(fileName)) {
            if (exists(fileName)) {
                return false;
            }
            // creates the file (not thread safe)
            getMemoryFile(fileName);
            return true;
        }
        File file = new File(fileName);
        for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {
            try {
                return file.createNewFile();
            } catch (IOException e) {
                // TODO file lock: check if 'access denied' exceptions are
                // really a concurrent access problem
                wait(i);
            }
        }
        return false;
    }",True,True,"The function of this method is to create a new file with the given file name. It first translates the file name, checks if the file is in memory, and if it exists. If the file is in memory and does not exist, it creates the file. If the file is not in memory, it creates a new File object and attempts to create the file. If there are IOExceptions, it retries a certain number of times before returning false.",True,"This code defines a method called `createNewFile` that takes a file name as input and attempts to create a new file with that name. It first checks if the file is in memory, and if so, it creates the file in memory. If the file is not in memory, it creates a new file on disk, with a maximum number of retries in case of failure."
18,delete(String),delete file name ,Method,deleteRecursive(String),"org.h2.command.dml.ScriptBase+deleteStore() org.h2.command.dml.ScriptCommand+combineBlob(Connection,int) org.h2.log.LogFile+close(boolean) org.h2.message.TraceSystem+enableIfRequired() org.h2.message.TraceSystem+writeFile(String,Throwable) org.h2.store.DiskFile+delete() org.h2.store.FileLock+unlock() org.h2.store.FileLock+lockFile() org.h2.store.FileLock+lockSocket() org.h2.tools.Backup+execute(String,String,String,boolean) org.h2.tools.ChangePassword+execute(String,String,String,byte[],byte[],boolean) org.h2.tools.ChangePassword+copy(String,boolean,FileStore,byte[]) org.h2.tools.ChangePassword+copy(String,boolean,FileStore,byte[]) org.h2.tools.CreateCluster+execute(String,String,String,String,String) org.h2.tools.DeleteDbFiles+process(String,boolean) org.h2.tools.Recover+dumpLob(String,boolean) org.h2.util.TempFileDeleter+deleteFile(Reference,String) org.h2.value.ValueLob+deleteFile(DataHandler,String) org.h2.test.db.TestPowerOff+testNoIndexFile() org.h2.test.unit.TestFile+doTest(boolean) org.h2.test.unit.TestFile+doTest(boolean) org.h2.test.unit.TestFile+doTest(boolean) org.h2.test.unit.TestFile+doTest(boolean)","org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+isInMemory(String) java.util.HashMap+remove(Object) java.util.HashMap+remove(Object) java.io.File+File(String) java.io.File+exists() java.io.File+exists() org.h2.util.FileUtils+trace(String,String,Object) org.h2.util.FileUtils+trace(String,String,Object) java.io.File+delete() java.io.File+delete() org.h2.util.FileUtils+wait(int) org.h2.util.FileUtils+wait(int) org.h2.message.Message+getSQLException(int,String) org.h2.message.Message+getSQLException(int,String)",org.h2.util.FileUtils+MEMORY_FILES org.h2.util.FileUtils+MEMORY_FILES org.h2.constant.SysProperties+MAX_FILE_RETRY org.h2.constant.ErrorCode+FILE_DELETE_FAILED_1,744,21,9,,"public static void delete(String fileName) throws SQLException {
        fileName = translateFileName(fileName);
        if (isInMemory(fileName)) {
            synchronized (MEMORY_FILES) {
                MEMORY_FILES.remove(fileName);
            }
            return;
        }
        File file = new File(fileName);
        if (file.exists()) {
            for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {
                trace(""delete"", fileName, null);
                boolean ok = file.delete();
                if (ok) {
                    return;
                }
                wait(i);
            }
            throw Message.getSQLException(ErrorCode.FILE_DELETE_FAILED_1, fileName);
        }
    }",False,True,"The function of this method is to delete a file. It first translates the file name, checks if the file is in memory, and if so, removes it from memory. If the file is not in memory, it checks if the file exists and attempts to delete it. If the deletion fails, it retries a certain number of times before throwing an exception.",True,"This code defines a method called ""delete"" that takes a file name as input and attempts to delete the corresponding file. If the file is in memory, it is removed from a synchronized list. If the file exists on disk, multiple attempts are made to delete it, and if unsuccessful, an exception is thrown."
19,wait(int),wait i ,Method,"rename(String,String) createDirs(String) createNewFile(String) delete(String)",,"java.lang.System+gc() java.lang.System+gc() java.lang.Math+min(int,int) java.lang.Math+min(int,int) java.lang.Thread+sleep(long) java.lang.Thread+sleep(long)",,311,12,10,,"private static void wait(int i) {
        if (i > 8) {
            System.gc();
        }
        try {
            // sleep at most 256 ms
            long sleep = Math.min(256, i * i);
            Thread.sleep(sleep);
        } catch (InterruptedException e) {
            // ignore
        }
    }",True,True,"The function of this method is to pause the execution of the current thread for a certain amount of time, specified by the input parameter ""i"". If ""i"" is greater than 8, it also suggests the garbage collector to run.",True,"The code defines a private static method called ""wait"" that takes an integer parameter. If the parameter is greater than 8, it calls the garbage collector. Then, it sleeps for a duration calculated based on the parameter, with a maximum sleep time of 256 milliseconds."
20,getFileName(String),get file name name ,Method,,"org.h2.command.dml.BackupCommand+backupTo(String) org.h2.command.dml.BackupCommand+backupDiskFile(ZipOutputStream,String,DiskFile) org.h2.engine.Database+close(boolean)",org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) org.h2.util.FileUtils+getParent(String) org.h2.util.FileUtils+getParent(String) java.lang.String+endsWith(String) java.lang.String+endsWith(String) org.h2.util.FileUtils+normalize(String) org.h2.util.FileUtils+normalize(String) java.lang.String+startsWith(String) java.lang.String+startsWith(String) org.h2.message.Message+getInternalError(String) org.h2.message.Message+getInternalError(String) java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+length() java.lang.String+length(),,615,14,9,,"public static String getFileName(String name) throws SQLException {
        name = translateFileName(name);
        String separator = System.getProperty(""file.separator"");
        String path = getParent(name);
        if (!path.endsWith(separator)) {
            path += separator;
        }
        String fullFileName = normalize(name);
        if (!fullFileName.startsWith(path)) {
            throw Message.getInternalError(""file utils error: "" + fullFileName+"" does not start with ""+path);
        }
        String fileName = fullFileName.substring(path.length());
        return fileName;
    }",False,False,"This method takes a file name as input and returns the file name without the path. It first translates the file name, then gets the parent path, adds a separator if necessary, normalizes the file name, and finally returns the file name without the path.",False,"The code defines a method called ""getFileName"" that takes a string parameter and returns a string. It first translates the input name, then extracts the file name from the given path, and finally returns the file name. If the full file name does not start with the path, it throws an internal error."
21,getFileInUserHome(String),get file in user home file name ,Method,,org.h2.security.SecureSocketFactory+setKeystore() org.h2.server.web.WebServer+getPropertiesFileName(),"java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.io.File+File(String,String) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath()",,286,8,9,,"public static String getFileInUserHome(String fileName) {
        String userDir = System.getProperty(""user.home"");
        if (userDir == null) {
            return fileName;
        }
        File file = new File(userDir, fileName);
        return file.getAbsolutePath();
    }",False,False,"This method returns the absolute path of a file located in the user's home directory. If the user's home directory cannot be determined, it returns the provided file name.",False,"This code defines a method named ""getFileInUserHome"" that takes a file name as input. It retrieves the user's home directory path using the ""user.home"" system property, and if it is not null, it creates a File object with the specified file name in the user's home directory and returns its absolute path. If the user's home directory path is null, it simply returns the input file name."
22,normalize(String),normalize file name ,Method,getFileName(String),"org.h2.engine.ConnectionInfo+getName() org.h2.engine.ConnectionInfo+getName() org.h2.engine.Database+reserveLobFileObjectIds() org.h2.engine.Database+deleteOldTempFiles() org.h2.store.FileLister+getDatabaseFiles(String,String,boolean)","org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+isInMemory(String) java.io.File+File(String) java.io.File+getCanonicalPath() java.io.File+getCanonicalPath() org.h2.message.Message+convertIOException(IOException,String) org.h2.message.Message+convertIOException(IOException,String)",,404,12,9,,"public static String normalize(String fileName) throws SQLException {
        fileName = translateFileName(fileName);
        if (isInMemory(fileName)) {
            return fileName;
        }
        File f = new File(fileName);
        try {
            return f.getCanonicalPath();
        } catch (IOException e) {
            throw Message.convertIOException(e, fileName);
        }
    }",False,False,"This method takes a file name as input and returns the normalized path of the file. It first translates the file name, checks if it is in memory, and then returns the canonical path of the file. If an IOException occurs, it converts it to a SQLException.",False,"The `normalize` method takes a file name as input and returns the normalized version of the file name. It first translates the file name, checks if it is in memory, and then obtains the canonical path of the file. If an IOException occurs during this process, it is converted and thrown as a SQLException."
23,tryDelete(String),try delete file name ,Method,,"org.h2.engine.Database+deleteOldTempFiles() org.h2.tools.DeleteDbFiles+process(String,boolean)","org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+isInMemory(String) java.util.HashMap+remove(Object) java.util.HashMap+remove(Object) org.h2.util.FileUtils+trace(String,String,Object) org.h2.util.FileUtils+trace(String,String,Object) java.io.File+delete() java.io.File+File(String) java.io.File+delete()",org.h2.util.FileUtils+MEMORY_FILES org.h2.util.FileUtils+MEMORY_FILES,361,11,9,,"public static void tryDelete(String fileName) {
        fileName = translateFileName(fileName);
        if (isInMemory(fileName)) {
            synchronized (MEMORY_FILES) {
                MEMORY_FILES.remove(fileName);
            }
            return;
        }
        trace(""tryDelete"", fileName, null);
        new File(fileName).delete();
    }",False,False,"The function of this method is to attempt to delete a file. It first translates the file name, checks if the file is in memory, and if so, removes it from memory. If the file is not in memory, it traces the deletion attempt and deletes the file from the file system.",False,"The code defines a method called ""tryDelete"" that takes a file name as input. It first translates the file name, checks if the file is in memory, and if so, removes it from the memory. If the file is not in memory, it traces the deletion attempt and deletes the file from the file system."
24,isReadOnly(String),is read only file name ,Method,,"org.h2.engine.Database+open(int,int) org.h2.message.TraceSystem+openWriter()",org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+isInMemory(String) java.io.File+File(String) java.io.File+exists() java.io.File+exists() java.io.File+canWrite() java.io.File+canWrite(),,265,8,9,,"public static boolean isReadOnly(String fileName) {
        fileName = translateFileName(fileName);
        if (isInMemory(fileName)) {
            return false;
        }
        File f = new File(fileName);
        return f.exists() && !f.canWrite();
    }",False,False,"This method checks if a file is read-only. It translates the file name, checks if it is in memory, creates a File object, and returns true if the file exists and cannot be written to.",True,"The given code defines a method named ""isReadOnly"" that takes a file name as input. It checks if the file is in memory, and if so, returns false. Otherwise, it creates a File object using the translated file name, checks if the file exists, and returns true if it exists but cannot be written to."
25,exists(String),exists file name ,Method,"createNewFile(String) createTempFile(String,String,boolean,boolean)","org.h2.engine.Database+exists(String) org.h2.engine.Database+openFile(String,String,boolean) org.h2.engine.Database+open(int,int) org.h2.engine.SessionRemote+openFile(String,String,boolean) org.h2.message.TraceSystem+enableIfRequired() org.h2.message.TraceSystem+writeFile(String,Throwable) org.h2.message.TraceSystem+openWriter() org.h2.security.SecureSocketFactory+setKeystore() org.h2.store.DiskFile+DiskFile(Database,String,String,boolean,boolean,int) org.h2.store.FileLock+run() org.h2.store.FileStore+FileStore(DataHandler,String,String,byte[]) org.h2.tools.Backup+execute(String,String,String,boolean) org.h2.tools.Restore+execute(String,String,String,boolean) org.h2.util.TempFileDeleter+deleteFile(Reference,String)",org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+isInMemory(String) java.util.HashMap+get(Object) java.util.HashMap+get(Object) java.io.File+exists() java.io.File+File(String) java.io.File+exists(),org.h2.util.FileUtils+MEMORY_FILES org.h2.util.FileUtils+MEMORY_FILES,314,9,9,,"public static boolean exists(String fileName) {
        fileName = translateFileName(fileName);
        if (isInMemory(fileName)) {
            synchronized (MEMORY_FILES) {
                return MEMORY_FILES.get(fileName) != null;
            }
        }
        return new File(fileName).exists();
    }",False,False,"This method checks if a file exists. It first translates the file name, then checks if it is in memory. If it is, it checks if the file exists in memory. If not, it checks if the file exists on disk.",True,"The code defines a method called ""exists"" that takes a file name as input and returns a boolean value indicating whether the file exists. It first translates the file name, checks if the file is in memory, and if so, checks if it exists in the memory files. If not in memory, it checks if the file exists in the file system."
26,getMemoryFile(String),get memory file file name ,Method,"rename(String,String) createNewFile(String) length(String) createTempFile(String,String,boolean,boolean)","org.h2.engine.Database+isTextStorage(String,boolean) org.h2.store.MemoryFileStore+MemoryFileStore(DataHandler,String,byte[])","java.util.HashMap+get(Object) java.util.HashMap+get(Object) java.lang.String+startsWith(String) java.lang.String+startsWith(String) org.h2.util.MemoryFile+MemoryFile(String,boolean) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V)",org.h2.util.FileUtils+MEMORY_FILES org.h2.util.FileUtils+MEMORY_FILES org.h2.util.FileUtils+MEMORY_PREFIX_LZF org.h2.util.FileUtils+MEMORY_FILES,432,11,9,,"public static MemoryFile getMemoryFile(String fileName) {
        synchronized (MEMORY_FILES) {
            MemoryFile m = (MemoryFile) MEMORY_FILES.get(fileName);
            if (m == null) {
                boolean compress = fileName.startsWith(MEMORY_PREFIX_LZF);
                m = new MemoryFile(fileName, compress);
                MEMORY_FILES.put(fileName, m);
            }
            return m;
        }
    }",True,True,"This method returns a MemoryFile object based on the given fileName. If the MemoryFile does not exist, it creates a new one and adds it to a synchronized map before returning it.",True,"The code defines a method named ""getMemoryFile"" that returns a MemoryFile object. It first checks if the MemoryFile object with the given fileName already exists in a synchronized map called MEMORY_FILES. If not, it creates a new MemoryFile object and adds it to the map before returning it."
27,length(String),length file name ,Method,,"org.h2.message.TraceSystem+writeFile(String,Throwable) org.h2.security.SecureSocketFactory+setKeystore()",org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.MemoryFile+length() org.h2.util.FileUtils+getMemoryFile(String) org.h2.util.FileUtils+getMemoryFile(String) org.h2.util.MemoryFile+length() java.io.File+length() java.io.File+File(String) java.io.File+length(),,247,7,9,,"public static long length(String fileName) {
        fileName = translateFileName(fileName);
        if (isInMemory(fileName)) {
            return getMemoryFile(fileName).length();
        }
        return new File(fileName).length();
    }",False,False,"This method returns the length of a file. It first translates the file name, then checks if the file is in memory. If it is, it returns the length of the memory file. If not, it returns the length of the file on disk.",True,"The given code defines a method named ""length"" that takes a file name as input. It first translates the file name, checks if the file is in memory, and returns the length of the file either from memory or from the file system."
28,isInMemory(String),is in memory file name ,Method,"rename(String,String) createNewFile(String) delete(String) normalize(String) tryDelete(String) isReadOnly(String) exists(String) length(String) createTempFile(String,String,boolean,boolean) getParent(String) listFiles(String) isDirectory(String)","org.h2.engine.Database+isTextStorage(String,boolean) org.h2.engine.Database+open(int,int) org.h2.store.FileLister+getDatabaseFiles(String,String,boolean) org.h2.store.FileStore+open(DataHandler,String,String,byte[],String,byte[],int)",java.lang.String+startsWith(String) java.lang.String+startsWith(String) java.lang.String+startsWith(String) java.lang.String+startsWith(String),org.h2.util.FileUtils+MEMORY_PREFIX org.h2.util.FileUtils+MEMORY_PREFIX_LZF,152,3,9,,"public static boolean isInMemory(String fileName) {
        return fileName.startsWith(MEMORY_PREFIX) || fileName.startsWith(MEMORY_PREFIX_LZF);
    }",False,False,"This method checks if a given file name starts with either ""MEMORY_PREFIX"" or ""MEMORY_PREFIX_LZF"" and returns true if it does, otherwise it returns false.",True,"The code defines a method named ""isInMemory"" that takes a string parameter ""fileName"". It checks if the fileName starts with either ""MEMORY_PREFIX"" or ""MEMORY_PREFIX_LZF"" and returns a boolean value indicating whether it is in memory or not."
29,"createTempFile(String,String,boolean,boolean)",create temp file name suffix delete on exit in temp dir ,Method,,org.h2.engine.Database+createTempFile() org.h2.engine.SessionRemote+connect() org.h2.engine.SessionRemote+createTempFile(),"org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+exists(String) org.h2.util.FileUtils+exists(String) org.h2.util.FileUtils+getMemoryFile(String) org.h2.util.FileUtils+getMemoryFile(String) java.io.File+getName() java.io.File+File(String) java.io.File+getName() java.io.File+getParentFile() java.io.File+getAbsoluteFile() java.io.File+File(String) java.io.File+getAbsoluteFile() java.io.File+getParentFile() java.io.File+mkdirs() java.io.File+mkdirs() java.io.File+createTempFile(String,String,File) java.io.File+createTempFile(String,String,File) java.io.File+deleteOnExit() java.io.File+deleteOnExit() java.io.File+getCanonicalPath() java.io.File+getCanonicalPath()",,995,29,9,,"public static String createTempFile(String name, String suffix, boolean deleteOnExit, boolean inTempDir)
            throws IOException, SQLException {
        name = translateFileName(name);
        name += ""."";
        if (isInMemory(name)) {
            for (int i = 0;; i++) {
                String n = name + i + suffix;
                if (!exists(n)) {
                    // creates the file (not thread safe)
                    getMemoryFile(n);
                    return n;
                }
            }
        }
        String prefix = new File(name).getName();
        File dir;
        if (inTempDir) {
            dir = null;
        } else {
            dir = new File(name).getAbsoluteFile().getParentFile();
            dir.mkdirs();
        }
        File f = File.createTempFile(prefix, suffix, dir);
        if (deleteOnExit) {
            f.deleteOnExit();
        }
        // return f.getPath();
        return f.getCanonicalPath();
    }",False,False,This method creates a temporary file with the given name and suffix. It can be configured to delete the file on exit and specify whether the file should be created in the temporary directory. The method returns the path of the created file.,True,"This code defines a method called `createTempFile` that takes in a name, suffix, deleteOnExit flag, and inTempDir flag. It creates a temporary file with the given name and suffix, either in the system's temporary directory or in the specified directory. If the file is to be deleted on exit, it sets the deleteOnExit flag. The method returns the path of the created file."
30,getParent(String),get parent file name ,Method,getFileName(String),"org.h2.command.dml.BackupCommand+backupTo(String) org.h2.command.dml.BackupCommand+backupTo(String) org.h2.engine.Database+close(boolean) org.h2.engine.Database+reserveLobFileObjectIds() org.h2.engine.Database+deleteOldTempFiles() org.h2.log.LogSystem+loadActiveLogFiles() org.h2.tools.Backup+execute(String,String,String,boolean) org.h2.tools.RunScript+execute(Connection,String,boolean,String) org.h2.value.ValueLob+removeAllForTable(DataHandler,int)",org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+isInMemory(String) java.io.File+getParent() java.io.File+File(String) java.io.File+getParent(),org.h2.util.FileUtils+MEMORY_PREFIX,236,7,9,,"public static String getParent(String fileName) {
        fileName = translateFileName(fileName);
        if (isInMemory(fileName)) {
            return MEMORY_PREFIX;
        }
        return new File(fileName).getParent();
    }",False,False,"This method takes a file name as input, translates the file name, checks if it is in memory, and returns the parent directory of the file.",True,"The given code defines a method named ""getParent"" that takes a file name as input. It first translates the file name, checks if the file is in memory, and returns a prefix indicating it is in memory. If not in memory, it creates a new File object and returns the parent directory of the file."
31,listFiles(String),list files path ,Method,deleteRecursive(String),"org.h2.engine.Database+reserveLobFileObjectIds() org.h2.engine.Database+deleteOldTempFiles() org.h2.log.LogSystem+loadActiveLogFiles() org.h2.store.FileLister+getDatabaseFiles(String,String,boolean) org.h2.value.ValueLob+getNewObjectId(DataHandler) org.h2.value.ValueLob+removeAllForTable(DataHandler,int) org.h2.value.ValueLob+removeAllForTable(DataHandler,String,int)","org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+isInMemory(String) java.util.HashMap+size() java.util.HashMap+size() java.util.HashMap+size() java.util.HashMap+size() java.util.Collection+toArray(T[]) java.util.HashMap+values() java.util.HashMap+values() java.util.Collection+toArray(T[]) org.h2.util.MemoryFile+getName() org.h2.util.MemoryFile+getName() java.io.File+File(String) java.io.File+list() java.io.File+list() java.io.File+getCanonicalPath() java.io.File+getCanonicalPath() java.lang.String+endsWith(String) java.lang.String+endsWith(String) org.h2.message.Message+convertIOException(IOException,String) org.h2.message.Message+convertIOException(IOException,String)",org.h2.util.FileUtils+MEMORY_FILES org.h2.util.FileUtils+MEMORY_FILES org.h2.util.FileUtils+MEMORY_FILES org.h2.util.FileUtils+MEMORY_FILES java.io.File+separator java.io.File+separator,1128,31,9,,"public static String[] listFiles(String path) throws SQLException {
        path = translateFileName(path);
        if (isInMemory(path)) {
            synchronized (MEMORY_FILES) {
                String[] list = new String[MEMORY_FILES.size()];
                MemoryFile[] l = new MemoryFile[MEMORY_FILES.size()];
                MEMORY_FILES.values().toArray(l);
                for (int i = 0; i < list.length; i++) {
                    list[i] = l[i].getName();
                }
                return list;
            }
        }
        File f = new File(path);
        try {
            String[] list = f.list();
            if (list == null) {
                return new String[0];
            }
            String base = f.getCanonicalPath();
            if (!base.endsWith(File.separator)) {
                base += File.separator;
            }
            for (int i = 0; i < list.length; i++) {
                list[i] = base + list[i];
            }
            return list;
        } catch (IOException e) {
            throw Message.convertIOException(e, path);
        }
    }",False,False,"This method lists the files in a given directory path. It first checks if the path is in memory, and if so, retrieves the list of files from memory. If not in memory, it retrieves the list of files from the file system and returns it.",True,"This code defines a method called `listFiles` that takes a file path as input and returns an array of file names. It first checks if the file path is in memory and retrieves the file names from memory if so. Otherwise, it retrieves the file names from the file system and appends the base path to each file name."
32,isDirectory(String),is directory file name ,Method,deleteRecursive(String),"org.h2.value.ValueLob+removeAllForTable(DataHandler,String,int)",org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+isInMemory(String) org.h2.util.FileUtils+isInMemory(String) java.io.File+isDirectory() java.io.File+File(String) java.io.File+isDirectory(),,314,8,9,,"public static boolean isDirectory(String fileName) {
        fileName = translateFileName(fileName);
        if (isInMemory(fileName)) {
            // TODO in memory file system currently doesn't support directories
            return false;
        }
        return new File(fileName).isDirectory();
    }",False,False,"This method checks if a given file name represents a directory. It first translates the file name, then checks if it is in memory. If it is in memory, it returns false because the in-memory file system does not support directories. Otherwise, it creates a new File object with the translated file name and checks if it is a directory.",True,"The given code is a method named ""isDirectory"" that takes a file name as input and returns a boolean value indicating whether the file is a directory or not. It first translates the file name, checks if it is in memory (which doesn't support directories), and then uses the File class to determine if the file is a directory."
33,"copy(String,String)",copy original copy ,Method,,"org.h2.value.ValueLob+copyFile(DataHandler,String,String)","org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+openFileOutputStream(String) org.h2.util.FileUtils+openFileOutputStream(String) org.h2.util.FileUtils+openFileInputStream(String) org.h2.util.FileUtils+openFileInputStream(String) java.io.InputStream+read(byte[]) java.io.InputStream+read(byte[]) java.io.FileOutputStream+write(byte[],int,int) java.io.FileOutputStream+write(byte[],int,int) org.h2.message.Message+convertIOException(IOException,String) org.h2.message.Message+convertIOException(IOException,String) org.h2.util.IOUtils+closeSilently(InputStream) org.h2.util.IOUtils+closeSilently(InputStream) org.h2.util.IOUtils+closeSilently(OutputStream) org.h2.util.IOUtils+closeSilently(OutputStream)",org.h2.engine.Constants+IO_BUFFER_SIZE,870,23,9,,"public static void copy(String original, String copy) throws SQLException {
        original = translateFileName(original);
        copy = translateFileName(copy);
        FileOutputStream out = null;
        InputStream in = null;
        try {
            out = openFileOutputStream(copy);
            in = openFileInputStream(original);
            byte[] buffer = new byte[Constants.IO_BUFFER_SIZE];
            while (true) {
                int len = in.read(buffer);
                if (len < 0) {
                    break;
                }
                out.write(buffer, 0, len);
            }
        } catch (IOException e) {
            throw Message.convertIOException(e, ""original: "" + original + "" copy: "" + copy);
        } finally {
            IOUtils.closeSilently(in);
            IOUtils.closeSilently(out);
        }
    }",True,True,"The function of this method is to copy the contents of one file to another file, after translating their file names and handling any potential exceptions that may occur during the process.",True,"The given code is a method named ""copy"" that takes two file names as input and copies the contents of the original file to the copy file. It uses input and output streams to read and write the file data, and handles exceptions related to file operations."
34,deleteRecursive(String),delete recursive file name ,Method,deleteRecursive(String),org.h2.test.TestAll+beforeTest() org.h2.test.TestAll+afterTest(),org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+isDirectory(String) org.h2.util.FileUtils+isDirectory(String) org.h2.util.FileUtils+listFiles(String) org.h2.util.FileUtils+listFiles(String) org.h2.util.FileUtils+deleteRecursive(String) org.h2.util.FileUtils+deleteRecursive(String) org.h2.util.FileUtils+delete(String) org.h2.util.FileUtils+delete(String),,420,10,9,,"public static void deleteRecursive(String fileName) throws SQLException {
        fileName = translateFileName(fileName);        
        if (FileUtils.isDirectory(fileName)) {
            String[] list = FileUtils.listFiles(fileName);
            for (int i = 0; list != null && i < list.length; i++) {
                deleteRecursive(list[i]);
            }
        }
        FileUtils.delete(fileName);
    }",True,True,"This method is used to delete a file or directory recursively. It first translates the file name, then checks if it is a directory. If it is, it recursively calls itself for each file in the directory. Finally, it deletes the file or directory.",True,"This code defines a method called `deleteRecursive` that takes a file name as input and recursively deletes all files and directories within that directory. It uses the `FileUtils` class to check if the given file is a directory, retrieve a list of files within the directory, and delete the files. It throws a `SQLException` if an error occurs during the deletion process."
35,translateFileName(String),translate file name file name ,Method,"openRandomAccessFile(String,String) openFileWriter(String,boolean) fileStartsWith(String,String) openFileInputStream(String) openFileOutputStream(String) rename(String,String) rename(String,String) loadProperties(String) createDirs(String) createNewFile(String) delete(String) getFileName(String) normalize(String) tryDelete(String) isReadOnly(String) exists(String) length(String) createTempFile(String,String,boolean,boolean) getParent(String) listFiles(String) isDirectory(String) copy(String,String) copy(String,String) deleteRecursive(String) isAbsolute(String) getAbsolutePath(String) getLastModified(String) openFileReader(String) canWrite(String)","org.h2.server.ftp.FileObjectNative+get(String) org.h2.server.ftp.FtpServer+init(String[]) org.h2.store.FileLister+getDatabaseFiles(String,String,boolean) org.h2.tools.Backup+execute(String,String,String,boolean)",java.lang.String+startsWith(String) java.lang.String+startsWith(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.String+substring(int) java.lang.String+substring(int),,282,7,9,,"public static String translateFileName(String fileName) {
        if (fileName != null && fileName.startsWith(""~"")) {
            String userDir = System.getProperty(""user.home"");
            fileName = userDir + fileName.substring(1);
        }
        return fileName;
    }",True,True,"This method translates a file name by checking if it starts with ""~"" and if so, replaces it with the user's home directory. It then returns the translated file name.",True,"The code defines a method called ""translateFileName"" that takes a file name as input and returns the translated file name. If the input file name starts with a tilde (~), it replaces the tilde with the user's home directory path and returns the modified file name."
36,isAbsolute(String),is absolute file name ,Method,,"org.h2.tools.RunScript+execute(Connection,boolean,String,Reader,String)",org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) java.io.File+File(String) java.io.File+isAbsolute() java.io.File+isAbsolute(),,191,5,9,,"public static boolean isAbsolute(String fileName) {
        fileName = translateFileName(fileName);        
        File file = new File(fileName);
        return file.isAbsolute();
    }",False,False,"This method takes a file name as input, translates it, creates a File object with the translated file name, and returns a boolean indicating whether the file path is absolute or not.",True,"The given code defines a method named ""isAbsolute"" that takes a file name as input. It translates the file name using a separate method, creates a File object with the translated file name, and returns a boolean value indicating whether the file path is absolute or not."
37,getAbsolutePath(String),get absolute path file name ,Method,,"org.h2.command.dml.BackupCommand+backupFile(ZipOutputStream,String,String) org.h2.command.dml.BackupCommand+backupFile(ZipOutputStream,String,String) org.h2.engine.Database+getDatabasePath() org.h2.security.SecureSocketFactory+setKeystore() org.h2.tools.Backup+execute(String,String,String,boolean)",org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) java.io.File+getAbsoluteFile() java.io.File+File(String) java.io.File+getAbsoluteFile() java.io.File+getAbsolutePath() java.io.File+getAbsolutePath(),,226,5,9,,"public static String getAbsolutePath(String fileName) {
        fileName = translateFileName(fileName);        
        File parent = new File(fileName).getAbsoluteFile();
        return parent.getAbsolutePath();    
    }",False,True,"This method takes a file name as input, translates the file name, creates a File object with the translated file name, gets the absolute file path of the parent directory, and returns the absolute file path as a string.",True,"This code defines a method named ""getAbsolutePath"" that takes a file name as input. It translates the file name and retrieves the absolute path of the file's parent directory, returning it as a string."
38,getLastModified(String),get last modified file name ,Method,,org.h2.store.FileLock+save() org.h2.store.FileLock+waitUntilOld() org.h2.store.FileLock+run() org.h2.store.FileLock+lockSocket() org.h2.store.FileLock+lockSocket(),org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) java.io.File+lastModified() java.io.File+File(String) java.io.File+lastModified(),,165,4,9,,"public static long getLastModified(String fileName) {
        fileName = translateFileName(fileName);     
        return new File(fileName).lastModified();
    }",True,True,"This method takes a file name as input, translates the file name, creates a File object using the translated file name, and returns the last modified timestamp of the file.",True,"The code defines a method named ""getLastModified"" that takes a file name as input and returns the last modified timestamp of the file. It first translates the file name using a helper method and then creates a File object to retrieve the last modified timestamp."
39,openFileReader(String),open file reader file name ,Method,,"org.h2.command.dml.ScriptCommand+combineClob(Connection,int) org.h2.tools.ConvertTraceFile+convertFile(String,String,String)",org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) java.io.FileReader+FileReader(String),,176,4,9,,"public static Reader openFileReader(String fileName) throws IOException {
        fileName = translateFileName(fileName);     
        return new FileReader(fileName);
    }",False,True,"This method takes a file name as input, translates the file name, and returns a FileReader object that can be used to read the contents of the file.",True,The given code is a method named `openFileReader` that takes a `fileName` as input and returns a `Reader` object. It first translates the `fileName` and then creates a new `FileReader` object using the translated `fileName`. It throws an `IOException` if there is an error while opening the file.
40,canWrite(String),can write file name ,Method,,"org.h2.store.FileStore+FileStore(DataHandler,String,String,byte[])",org.h2.util.FileUtils+translateFileName(String) org.h2.util.FileUtils+translateFileName(String) java.io.File+canWrite() java.io.File+File(String) java.io.File+canWrite(),,157,4,9,,"public static boolean canWrite(String fileName) {
        fileName = translateFileName(fileName);     
        return new File(fileName).canWrite();
    }",True,True,"This method takes a file name as input, translates the file name, and checks if the translated file can be written to. It returns a boolean value indicating whether or not the file can be written.",True,"The given code is a method named ""canWrite"" that takes a file name as input and returns a boolean value indicating whether the file is writable or not. It first translates the file name and then checks if the file can be written to using the ""canWrite"" method of the File class."
41,"trace(String,String,Object)",trace method file name o ,Method,"openRandomAccessFile(String,String) setLength(RandomAccessFile,long) openFileInputStream(String) openFileOutputStream(String) freeMemoryAndFinalize() rename(String,String) delete(String) tryDelete(String)","org.h2.util.TempFileDeleter+addFile(String,Object) org.h2.util.TempFileDeleter+deleteFile(Reference,String) org.h2.util.TempFileDeleter+stopAutoDelete(Reference,String)",java.io.PrintStream+println(String) java.io.PrintStream+println(String),org.h2.constant.SysProperties+TRACE_IO java.lang.System+out,201,5,8,,"static void trace(String method, String fileName, Object o) {
        if (SysProperties.TRACE_IO) {
            System.out.println(""FileUtils."" + method + "" "" + fileName + "" "" + o);
        }
    }",False,True,"This method is used to print a trace message if the TRACE_IO flag is enabled. It takes in three parameters: method (String), fileName (String), and o (Object).",False,"The given code defines a static method called ""trace"" that takes in three parameters: a method name, a file name, and an object. If the system property ""TRACE_IO"" is set to true, the method prints a trace message to the console, indicating the method name, file name, and object."
