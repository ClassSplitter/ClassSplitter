index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,Log,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,25,1,18,,private final Logger Log;,True
2,enabled,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,30,1,18,,private final boolean enabled;,False
3,type,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,34,1,18,,private final ConnectionType type;,False
4,maxThreadPoolSize,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,36,1,18,,private final int maxThreadPoolSize;,False
5,maxBufferSize,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,32,1,18,,private final int maxBufferSize;,False
6,clientAuth,Field,,,,,47,1,18,,private final Connection.ClientAuth clientAuth;,False
7,bindAddress,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,38,1,18,,private final InetAddress bindAddress;,False
8,port,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,23,1,18,,private final int port;,False
9,tlsPolicy,Field,,,,,45,1,18,,private final Connection.TLSPolicy tlsPolicy;,False
10,identityStoreConfiguration,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,71,1,18,,private final CertificateStoreConfiguration identityStoreConfiguration;,False
11,trustStoreConfiguration,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,68,1,18,,private final CertificateStoreConfiguration trustStoreConfiguration;,False
12,acceptSelfSignedCertificates,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,51,1,18,,private final boolean acceptSelfSignedCertificates;,False
13,verifyCertificateValidity,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,48,1,18,,private final boolean verifyCertificateValidity;,False
14,encryptionProtocolsEnabled,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,53,1,18,,private final Set<String> encryptionProtocolsEnabled;,False
15,encryptionProtocolsDisabled,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,54,1,18,,private final Set<String> encryptionProtocolsDisabled;,False
16,cipherSuitesEnabled,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,46,1,18,,private final Set<String> cipherSuitesEnabled;,False
17,cipherSuitesDisabled,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,47,1,18,,private final Set<String> cipherSuitesDisabled;,False
18,identityStore,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,42,1,18,,private final IdentityStore identityStore;,False
19,trustStore,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,36,1,18,,private final TrustStore trustStore;,False
20,keyManagerFactory,Field,,,,,54,1,130,,private transient KeyManagerFactory keyManagerFactory;,True
21,sslContext,Field,,,,,40,1,130,,private transient SSLContext sslContext;,True
22,sslContextFactory,Field,,,,,54,1,130,,private transient SslContextFactory sslContextFactory;,True
23,getKeyManagers(),Method,getSSLContext(),,"javax.net.ssl.KeyManagerFactory+getInstance(String) javax.net.ssl.KeyManagerFactory+getInstance(String) javax.net.ssl.KeyManagerFactory+getDefaultAlgorithm() javax.net.ssl.KeyManagerFactory+getDefaultAlgorithm() javax.net.ssl.KeyManagerFactory+init(KeyStore,char[]) javax.net.ssl.KeyManagerFactory+init(KeyStore,char[]) org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.jivesoftware.openfire.spi.ConnectionConfiguration+getIdentityStore() org.jivesoftware.openfire.spi.ConnectionConfiguration+getIdentityStore() org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.jivesoftware.openfire.keystore.CertificateStoreConfiguration+getPassword() org.jivesoftware.openfire.keystore.CertificateStoreConfiguration+getPassword() javax.net.ssl.KeyManagerFactory+getKeyManagers() javax.net.ssl.KeyManagerFactory+getKeyManagers()",org.jivesoftware.openfire.spi.ConnectionConfiguration+keyManagerFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+keyManagerFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+keyManagerFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+keyManagerFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+keyManagerFactory,786,19,33,,"public synchronized KeyManager[] getKeyManagers() throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException
    {
        try
        {
            if ( keyManagerFactory == null )
            {
                keyManagerFactory = KeyManagerFactory.getInstance( KeyManagerFactory.getDefaultAlgorithm() );
                keyManagerFactory.init( getIdentityStore().getStore(), identityStoreConfiguration.getPassword() );
            }

            return keyManagerFactory.getKeyManagers();
        }
        catch ( UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException | RuntimeException ex )
        {
            // Allow initialization to restart upon next iteration.
            keyManagerFactory = null;
            throw ex;
        }
    }",True
24,getTrustManagers(),Method,getSSLContext(),,"org.jivesoftware.openfire.keystore.OpenfireX509TrustManager+OpenfireX509TrustManager(KeyStore,boolean,boolean) org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.jivesoftware.openfire.spi.ConnectionConfiguration+isAcceptSelfSignedCertificates() org.jivesoftware.openfire.spi.ConnectionConfiguration+isAcceptSelfSignedCertificates() org.jivesoftware.openfire.spi.ConnectionConfiguration+isVerifyCertificateValidity() org.jivesoftware.openfire.spi.ConnectionConfiguration+isVerifyCertificateValidity()",org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStore,274,4,33,,"public synchronized TrustManager[] getTrustManagers() throws KeyStoreException, NoSuchAlgorithmException
    {
        return new TrustManager[] { new OpenfireX509TrustManager( trustStore.getStore(), isAcceptSelfSignedCertificates(), isVerifyCertificateValidity() ) };
    }",True
25,getSSLContext(),Method,createSSLEngine() createServerModeSslFilter() createClientModeSslFilter(),,"javax.net.ssl.SSLContext+getInstance(String) javax.net.ssl.SSLContext+getInstance(String) javax.net.ssl.SSLContext+init(KeyManager[],TrustManager[],SecureRandom) javax.net.ssl.SSLContext+init(KeyManager[],TrustManager[],SecureRandom) org.jivesoftware.openfire.spi.ConnectionConfiguration+getKeyManagers() org.jivesoftware.openfire.spi.ConnectionConfiguration+getKeyManagers() org.jivesoftware.openfire.spi.ConnectionConfiguration+getTrustManagers() org.jivesoftware.openfire.spi.ConnectionConfiguration+getTrustManagers() java.security.SecureRandom+SecureRandom()",org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContext org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContext org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContext org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContext org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContext,670,18,33,,"public synchronized SSLContext getSSLContext( ) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException
    {
        if ( sslContext == null )
        {
            sslContext = SSLContext.getInstance( ""TLSv1"" );
            try
            {
                sslContext.init( getKeyManagers(), getTrustManagers(), new SecureRandom() );
            }
            catch ( UnrecoverableKeyException | RuntimeException ex )
            {
                // Allow initialization to restart upon next iteration.
                sslContext = null;
                throw ex;
            }
        }
        return sslContext;
    }",True
26,createSSLEngine(),Method,createServerModeSSLEngine() createClientModeSSLEngine(),,org.jivesoftware.openfire.spi.ConnectionConfiguration+getSSLContext() org.jivesoftware.openfire.spi.ConnectionConfiguration+getSSLContext() javax.net.ssl.SSLContext+createSSLEngine() javax.net.ssl.SSLContext+createSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() java.util.Set+isEmpty() java.util.Set+isEmpty() javax.net.ssl.SSLEngine+setEnabledProtocols(String[]) javax.net.ssl.SSLEngine+setEnabledProtocols(String[]) java.util.Set+toArray(T[]) java.util.Set+toArray(T[]) java.util.Set+size() java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsDisabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsDisabled() javax.net.ssl.SSLEngine+getSupportedProtocols() javax.net.ssl.SSLEngine+getSupportedProtocols() java.util.Set+contains(Object) java.util.Set+contains(Object) java.util.ArrayList+add(E) java.util.ArrayList+add(E) javax.net.ssl.SSLEngine+setEnabledProtocols(String[]) javax.net.ssl.SSLEngine+setEnabledProtocols(String[]) java.util.ArrayList+toArray(T[]) java.util.ArrayList+toArray(T[]) java.util.ArrayList+size() java.util.ArrayList+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() java.util.Set+isEmpty() java.util.Set+isEmpty() javax.net.ssl.SSLEngine+setEnabledCipherSuites(String[]) javax.net.ssl.SSLEngine+setEnabledCipherSuites(String[]) java.util.Set+toArray(T[]) java.util.Set+toArray(T[]) java.util.Set+size() java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesDisabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesDisabled() javax.net.ssl.SSLEngine+getSupportedCipherSuites() javax.net.ssl.SSLEngine+getSupportedCipherSuites() java.util.Set+contains(Object) java.util.Set+contains(Object) java.util.ArrayList+add(E) java.util.ArrayList+add(E) javax.net.ssl.SSLEngine+setEnabledCipherSuites(String[]) javax.net.ssl.SSLEngine+setEnabledCipherSuites(String[]) java.util.ArrayList+toArray(T[]) java.util.ArrayList+toArray(T[]) java.util.ArrayList+size() java.util.ArrayList+size(),,2899,65,2,"/** 
 * A utility method that implements the shared functionality of getClientModeSSLEngine and getServerModeSSLEngine. This method is used to initialize and pre-configure an instance of SSLEngine for a particular connection type. The returned value lacks further configuration. In most cases, developers will want to use getClientModeSSLEngine or getServerModeSSLEngine instead of this method.
 * @return A new pre-configured SSLEngine instance (never null).
 */
","/**
     * A utility method that implements the shared functionality of getClientModeSSLEngine and getServerModeSSLEngine.
     *
     * This method is used to initialize and pre-configure an instance of SSLEngine for a particular connection type.
     * The returned value lacks further configuration. In most cases, developers will want to use getClientModeSSLEngine
     * or getServerModeSSLEngine instead of this method.
     *
     * @return A new pre-configured SSLEngine instance (never null).
     */
    private SSLEngine createSSLEngine( ) throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException
    {
        final SSLContext sslContext = getSSLContext();

        final SSLEngine sslEngine = sslContext.createSSLEngine();

        // Configure protocol support.
        final Set<String> protocolsEnabled = getEncryptionProtocolsEnabled();
        if ( !protocolsEnabled.isEmpty() )
        {
            // When an explicit list of enabled protocols is defined, use only those.
            sslEngine.setEnabledProtocols( protocolsEnabled.toArray( new String[ protocolsEnabled.size() ] ) );
        }
        else
        {
            // Otherwise, use all supported protocols (except for the ones that are explicitly disabled).
            final Set<String> disabled = getEncryptionProtocolsDisabled();
            final ArrayList<String> supported = new ArrayList<>();
            for ( final String candidate : sslEngine.getSupportedProtocols() )
            {
                if ( !disabled.contains( candidate ) )
                {
                    supported.add( candidate );
                }
            }

            sslEngine.setEnabledProtocols( supported.toArray( new String[ supported.size()] ) );
        }

        // Configure cipher suite support.
        final Set<String> cipherSuitesEnabled = getCipherSuitesEnabled();
        if ( !cipherSuitesEnabled.isEmpty() )
        {
            // When an explicit list of enabled protocols is defined, use only those.
            sslEngine.setEnabledCipherSuites( cipherSuitesEnabled.toArray( new String[ cipherSuitesEnabled.size() ] ) );
        }
        else
        {
            // Otherwise, use all supported cipher suites (except for the ones that are explicitly disabled).
            final Set<String> disabled = getCipherSuitesDisabled();
            final ArrayList<String> supported = new ArrayList<>();
            for ( final String candidate : sslEngine.getSupportedCipherSuites() )
            {
                if ( !disabled.contains( candidate ) )
                {
                    supported.add( candidate );
                }
            }

            sslEngine.setEnabledCipherSuites( supported.toArray( new String[ supported.size() ] ) );
        }

        // TODO: Set policy for checking client certificates

        return sslEngine;
    }",True
27,createServerModeSSLEngine(),Method,createServerModeSslFilter(),"org.jivesoftware.openfire.net.TLSWrapper+TLSWrapper(ConnectionConfiguration,boolean)",org.jivesoftware.openfire.spi.ConnectionConfiguration+createSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+createSSLEngine() javax.net.ssl.SSLEngine+setUseClientMode(boolean) javax.net.ssl.SSLEngine+setUseClientMode(boolean) javax.net.ssl.SSLEngine+setNeedClientAuth(boolean) javax.net.ssl.SSLEngine+setNeedClientAuth(boolean) javax.net.ssl.SSLEngine+setWantClientAuth(boolean) javax.net.ssl.SSLEngine+setWantClientAuth(boolean) javax.net.ssl.SSLEngine+setWantClientAuth(boolean) javax.net.ssl.SSLEngine+setWantClientAuth(boolean),,941,29,1,"/** 
 * Creates a new SSL Engine that is configured to use server mode when handshaking. For Openfire, an engine is of this mode used for most purposes (as Openfire is a server by nature).
 * @return A new, initialized SSLEngine instance (never null).
 */
","/**
     * Creates a new SSL Engine that is configured to use server mode when handshaking.
     *
     * For Openfire, an engine is of this mode used for most purposes (as Openfire is a server by nature).
     *
     * @return A new, initialized SSLEngine instance (never null).
     */
    public SSLEngine createServerModeSSLEngine() throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException
    {
        final SSLEngine sslEngine = createSSLEngine();
        sslEngine.setUseClientMode( false );

        switch ( getClientAuth() )
        {
            case needed:
                sslEngine.setNeedClientAuth( true );
                break;

            case wanted:
                sslEngine.setWantClientAuth( true );
                break;

            case disabled:
                sslEngine.setWantClientAuth( false );
                break;
        }

        return sslEngine;
    }",True
28,createClientModeSSLEngine(),Method,createClientModeSslFilter(),"org.jivesoftware.openfire.net.TLSWrapper+TLSWrapper(ConnectionConfiguration,boolean)",org.jivesoftware.openfire.spi.ConnectionConfiguration+createSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+createSSLEngine() javax.net.ssl.SSLEngine+setUseClientMode(boolean) javax.net.ssl.SSLEngine+setUseClientMode(boolean),,577,14,1,"/** 
 * Creates an SSL Engine that is configured to use client mode when handshaking. For Openfire, an engine of this mode is typically used when the server tries to connect to another server.
 * @return An initialized SSLEngine instance (never null).
 */
","/**
     * Creates an SSL Engine that is configured to use client mode when handshaking.
     *
     * For Openfire, an engine of this mode is typically used when the server tries to connect to another server.
     *
     * @return An initialized SSLEngine instance (never null).
     */
    public SSLEngine createClientModeSSLEngine( ) throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException
    {
        final SSLEngine sslEngine = createSSLEngine();
        sslEngine.setUseClientMode( true );

        return sslEngine;
    }",True
29,getSslContextFactory(),Method,,"org.jivesoftware.openfire.container.AdminConsolePlugin+startup() org.jivesoftware.openfire.http.HttpBindManager+createSSLConnector(int,int)",org.slf4j.Logger+info(String) org.slf4j.Logger+info(String) org.eclipse.jetty.util.ssl.SslContextFactory+SslContextFactory() org.eclipse.jetty.util.ssl.SslContextFactory+setTrustStore(KeyStore) org.eclipse.jetty.util.ssl.SslContextFactory+setTrustStore(KeyStore) org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.eclipse.jetty.util.ssl.SslContextFactory+setTrustStorePassword(String) org.eclipse.jetty.util.ssl.SslContextFactory+setTrustStorePassword(String) java.lang.String+String(char[]) org.jivesoftware.openfire.keystore.CertificateStoreConfiguration+getPassword() org.jivesoftware.openfire.keystore.CertificateStoreConfiguration+getPassword() org.eclipse.jetty.util.ssl.SslContextFactory+setKeyStore(KeyStore) org.eclipse.jetty.util.ssl.SslContextFactory+setKeyStore(KeyStore) org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.eclipse.jetty.util.ssl.SslContextFactory+setKeyStorePassword(String) org.eclipse.jetty.util.ssl.SslContextFactory+setKeyStorePassword(String) java.lang.String+String(char[]) org.jivesoftware.openfire.keystore.CertificateStoreConfiguration+getPassword() org.jivesoftware.openfire.keystore.CertificateStoreConfiguration+getPassword() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() java.util.Set+isEmpty() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() java.util.Set+isEmpty() org.eclipse.jetty.util.ssl.SslContextFactory+setIncludeProtocols(String[]) org.eclipse.jetty.util.ssl.SslContextFactory+setIncludeProtocols(String[]) java.util.Set+toArray(T[]) org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() java.util.Set+toArray(T[]) java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() java.util.Set+size() org.eclipse.jetty.util.ssl.SslContextFactory+setExcludeProtocols(String[]) org.eclipse.jetty.util.ssl.SslContextFactory+setExcludeProtocols(String[]) java.util.Set+toArray(T[]) org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsDisabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsDisabled() java.util.Set+toArray(T[]) java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsDisabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsDisabled() java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() java.util.Set+isEmpty() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() java.util.Set+isEmpty() org.eclipse.jetty.util.ssl.SslContextFactory+setIncludeCipherSuites(String[]) org.eclipse.jetty.util.ssl.SslContextFactory+setIncludeCipherSuites(String[]) java.util.Set+toArray(T[]) org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() java.util.Set+toArray(T[]) java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() java.util.Set+size() org.eclipse.jetty.util.ssl.SslContextFactory+setExcludeCipherSuites(String[]) org.eclipse.jetty.util.ssl.SslContextFactory+setExcludeCipherSuites(String[]) java.util.Set+toArray(T[]) org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesDisabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesDisabled() java.util.Set+toArray(T[]) java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesDisabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesDisabled() java.util.Set+size() org.eclipse.jetty.util.ssl.SslContextFactory+setNeedClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setNeedClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setWantClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setWantClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setNeedClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setNeedClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setWantClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setWantClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setNeedClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setNeedClientAuth(boolean),org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+Log org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStore org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStore org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory,2460,56,33,,"public synchronized SslContextFactory getSslContextFactory()
    {
        if ( sslContextFactory != null )
        {
            return sslContextFactory;
        }

        Log.info( ""Creating new SslContextFactory instance"" );
        try
        {
            sslContextFactory = new SslContextFactory();

            sslContextFactory.setTrustStore( trustStore.getStore() );
            sslContextFactory.setTrustStorePassword( new String( trustStoreConfiguration.getPassword() ) );

            sslContextFactory.setKeyStore( identityStore.getStore() );
            sslContextFactory.setKeyStorePassword( new String( identityStoreConfiguration.getPassword() ) );

            // Configure protocol support
            if ( getEncryptionProtocolsEnabled() != null && !getEncryptionProtocolsEnabled().isEmpty() )
            {
                sslContextFactory.setIncludeProtocols( getEncryptionProtocolsEnabled().toArray( new String[ getEncryptionProtocolsEnabled().size() ] ) );
            }
            sslContextFactory.setExcludeProtocols( getEncryptionProtocolsDisabled().toArray( new String[ getEncryptionProtocolsDisabled().size() ] ) );

            // Configure cipher suite support.
            if ( getCipherSuitesEnabled() != null && !getCipherSuitesEnabled().isEmpty() )
            {
                sslContextFactory.setIncludeCipherSuites( getCipherSuitesEnabled().toArray( new String[ getCipherSuitesEnabled().size() ] ) );
            }
            sslContextFactory.setExcludeCipherSuites( getCipherSuitesDisabled().toArray( new String[ getCipherSuitesDisabled().size() ] ) );

            //Set policy for checking client certificates
            switch ( clientAuth )
            {
                case disabled:
                    sslContextFactory.setNeedClientAuth( false );
                    sslContextFactory.setWantClientAuth( false );
                    break;
                case wanted:
                    sslContextFactory.setNeedClientAuth( false );
                    sslContextFactory.setWantClientAuth( true );
                    break;
                case needed:
                    sslContextFactory.setNeedClientAuth( true );
                    break;
            }
            return sslContextFactory;
        }
        catch ( RuntimeException ex )
        {
            // Allow initialization to restart upon next iteration.
            sslContextFactory = null;
            throw ex;
        }
    }",True
30,createServerModeSslFilter(),Method,,org.jivesoftware.openfire.nio.NIOConnection+startTLS(boolean) org.jivesoftware.openfire.spi.ClientRoute+start(),"org.jivesoftware.openfire.spi.ConnectionConfiguration+getSSLContext() org.jivesoftware.openfire.spi.ConnectionConfiguration+getSSLContext() org.jivesoftware.openfire.spi.ConnectionConfiguration+createServerModeSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+createServerModeSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+createSslFilter(SSLContext,SSLEngine) org.jivesoftware.openfire.spi.ConnectionConfiguration+createSslFilter(SSLContext,SSLEngine)",,826,17,1,"/** 
 * Creates an Apache MINA SslFilter that is configured to use server mode when handshaking. For Openfire, an engine is of this mode used for most purposes (as Openfire is a server by nature). Instead of an SSLContext or SSLEngine, Apache MINA uses an SslFilter instance. It is generally not needed to create both SSLContext/SSLEngine as well as SslFilter instances.
 * @return An initialized SslFilter instance (never null)
 */
","/**
     * Creates an Apache MINA SslFilter that is configured to use server mode when handshaking.
     *
     * For Openfire, an engine is of this mode used for most purposes (as Openfire is a server by nature).
     *
     * Instead of an SSLContext or SSLEngine, Apache MINA uses an SslFilter instance. It is generally not needed to
     * create both SSLContext/SSLEngine as well as SslFilter instances.
     *
     * @return An initialized SslFilter instance (never null)
     */
    public SslFilter createServerModeSslFilter() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException, UnrecoverableKeyException
    {
        final SSLContext sslContext = getSSLContext();
        final SSLEngine sslEngine = createServerModeSSLEngine();

        return createSslFilter( sslContext, sslEngine );
    }",True
31,createClientModeSslFilter(),Method,,org.jivesoftware.openfire.nio.NIOConnection+startTLS(boolean),"org.jivesoftware.openfire.spi.ConnectionConfiguration+getSSLContext() org.jivesoftware.openfire.spi.ConnectionConfiguration+getSSLContext() org.jivesoftware.openfire.spi.ConnectionConfiguration+createClientModeSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+createClientModeSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+createSslFilter(SSLContext,SSLEngine) org.jivesoftware.openfire.spi.ConnectionConfiguration+createSslFilter(SSLContext,SSLEngine)",,832,17,1,"/** 
 * Creates an Apache MINA SslFilter that is configured to use client mode when handshaking. For Openfire, a filter of this mode is typically used when the server tries to connect to another server. Instead of an SSLContext or SSLEngine, Apache MINA uses an SslFilter instance. It is generally not needed to create both SSLContext/SSLEngine as well as SslFilter instances.
 * @return An initialized SslFilter instance (never null)
 */
","/**
     * Creates an Apache MINA SslFilter that is configured to use client mode when handshaking.
     *
     * For Openfire, a filter of this mode is typically used when the server tries to connect to another server.
     *
     * Instead of an SSLContext or SSLEngine, Apache MINA uses an SslFilter instance. It is generally not needed to
     * create both SSLContext/SSLEngine as well as SslFilter instances.
     *
     * @return An initialized SslFilter instance (never null)
     */
    public SslFilter createClientModeSslFilter() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException, UnrecoverableKeyException
    {
        final SSLContext sslContext = getSSLContext();
        final SSLEngine sslEngine = createClientModeSSLEngine();

        return createSslFilter( sslContext, sslEngine );
    }",True
32,"createSslFilter(SSLContext,SSLEngine)",Method,createServerModeSslFilter() createClientModeSslFilter(),,org.apache.mina.filter.ssl.SslFilter+SslFilter(SSLContext) org.apache.mina.filter.ssl.SslFilter+setUseClientMode(boolean) org.apache.mina.filter.ssl.SslFilter+setUseClientMode(boolean) javax.net.ssl.SSLEngine+getUseClientMode() javax.net.ssl.SSLEngine+getUseClientMode() org.apache.mina.filter.ssl.SslFilter+setEnabledProtocols(String[]) org.apache.mina.filter.ssl.SslFilter+setEnabledProtocols(String[]) javax.net.ssl.SSLEngine+getEnabledProtocols() javax.net.ssl.SSLEngine+getEnabledProtocols() org.apache.mina.filter.ssl.SslFilter+setEnabledCipherSuites(String[]) org.apache.mina.filter.ssl.SslFilter+setEnabledCipherSuites(String[]) javax.net.ssl.SSLEngine+getEnabledCipherSuites() javax.net.ssl.SSLEngine+getEnabledCipherSuites() javax.net.ssl.SSLEngine+getNeedClientAuth() javax.net.ssl.SSLEngine+getNeedClientAuth() org.apache.mina.filter.ssl.SslFilter+setNeedClientAuth(boolean) org.apache.mina.filter.ssl.SslFilter+setNeedClientAuth(boolean) javax.net.ssl.SSLEngine+getWantClientAuth() javax.net.ssl.SSLEngine+getWantClientAuth() org.apache.mina.filter.ssl.SslFilter+setWantClientAuth(boolean) org.apache.mina.filter.ssl.SslFilter+setWantClientAuth(boolean),,1417,30,10,"/** 
 * A utility method that implements the shared functionality of getServerModeSslFilter and getClientModeSslFilter. This method is used to initialize and configure an instance of SslFilter for a particular pre-configured SSLContext and SSLEngine. In most cases, developers will want to use getServerModeSslFilter or getClientModeSslFilter instead of this method.
 * @param sslContext a pre-configured SSL Context instance (cannot be null).
 * @param sslEngine a pre-configured SSL Engine instance (cannot be null).
 * @return A SslFilter instance (never null).
 */
","/**
     * A utility method that implements the shared functionality of getServerModeSslFilter and getClientModeSslFilter.
     *
     * This method is used to initialize and configure an instance of SslFilter for a particular pre-configured
     * SSLContext and SSLEngine. In most cases, developers will want to use getServerModeSslFilter or
     * getClientModeSslFilter instead of this method.
     *
     * @param sslContext a pre-configured SSL Context instance (cannot be null).
     * @param sslEngine a pre-configured SSL Engine instance (cannot be null).
     * @return A SslFilter instance (never null).
     */
    private static SslFilter createSslFilter( SSLContext sslContext, SSLEngine sslEngine ) {
        final SslFilter filter = new SslFilter( sslContext );

        // Copy configuration from the SSL Engine into the filter.
        filter.setUseClientMode( sslEngine.getUseClientMode() );
        filter.setEnabledProtocols( sslEngine.getEnabledProtocols() );
        filter.setEnabledCipherSuites( sslEngine.getEnabledCipherSuites() );

        // Note that the setters for 'need' and 'want' influence each-other. Invoke only one of them!
        if ( sslEngine.getNeedClientAuth() )
        {
            filter.setNeedClientAuth( true );
        }
        else if ( sslEngine.getWantClientAuth() )
        {
            filter.setWantClientAuth( true );
        }
        return filter;
    }",True
33,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",Method,,,java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.IllegalArgumentException+IllegalArgumentException(String) java.util.Set+addAll(Collection) java.util.Set+addAll(Collection) java.util.Set+removeAll(Collection) java.util.Set+removeAll(Collection) java.util.Collections+unmodifiableSet(Set) java.util.Collections+unmodifiableSet(Set) java.util.Collections+unmodifiableSet(Set) java.util.Collections+unmodifiableSet(Set) java.util.Set+addAll(Collection) java.util.Set+addAll(Collection) java.util.Set+removeAll(Collection) java.util.Set+removeAll(Collection) java.util.Collections+unmodifiableSet(Set) java.util.Collections+unmodifiableSet(Set) java.util.Collections+unmodifiableSet(Set) java.util.Collections+unmodifiableSet(Set) org.jivesoftware.openfire.XMPPServer+getCertificateStoreManager() org.jivesoftware.openfire.XMPPServer+getInstance() org.jivesoftware.openfire.XMPPServer+getInstance() org.jivesoftware.openfire.XMPPServer+getCertificateStoreManager() org.jivesoftware.openfire.keystore.CertificateStoreManager+getIdentityStore(ConnectionType) org.jivesoftware.openfire.keystore.CertificateStoreManager+getIdentityStore(ConnectionType) org.jivesoftware.openfire.keystore.CertificateStoreManager+getTrustStore(ConnectionType) org.jivesoftware.openfire.keystore.CertificateStoreManager+getTrustStore(ConnectionType) org.slf4j.LoggerFactory+getLogger(String) org.slf4j.LoggerFactory+getLogger(String) java.lang.Class+getName() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getName(),org.jivesoftware.openfire.spi.ConnectionConfiguration+enabled org.jivesoftware.openfire.spi.ConnectionConfiguration+enabled org.jivesoftware.openfire.spi.ConnectionConfiguration+type org.jivesoftware.openfire.spi.ConnectionConfiguration+type org.jivesoftware.openfire.spi.ConnectionConfiguration+maxThreadPoolSize org.jivesoftware.openfire.spi.ConnectionConfiguration+maxThreadPoolSize org.jivesoftware.openfire.spi.ConnectionConfiguration+maxBufferSize org.jivesoftware.openfire.spi.ConnectionConfiguration+maxBufferSize org.jivesoftware.openfire.spi.ConnectionConfiguration+bindAddress org.jivesoftware.openfire.spi.ConnectionConfiguration+bindAddress org.jivesoftware.openfire.spi.ConnectionConfiguration+port org.jivesoftware.openfire.spi.ConnectionConfiguration+port org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+acceptSelfSignedCertificates org.jivesoftware.openfire.spi.ConnectionConfiguration+acceptSelfSignedCertificates org.jivesoftware.openfire.spi.ConnectionConfiguration+verifyCertificateValidity org.jivesoftware.openfire.spi.ConnectionConfiguration+verifyCertificateValidity org.jivesoftware.openfire.spi.ConnectionConfiguration+encryptionProtocolsEnabled org.jivesoftware.openfire.spi.ConnectionConfiguration+encryptionProtocolsEnabled org.jivesoftware.openfire.spi.ConnectionConfiguration+encryptionProtocolsDisabled org.jivesoftware.openfire.spi.ConnectionConfiguration+encryptionProtocolsDisabled org.jivesoftware.openfire.spi.ConnectionConfiguration+cipherSuitesEnabled org.jivesoftware.openfire.spi.ConnectionConfiguration+cipherSuitesEnabled org.jivesoftware.openfire.spi.ConnectionConfiguration+cipherSuitesDisabled org.jivesoftware.openfire.spi.ConnectionConfiguration+cipherSuitesDisabled org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStore org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStore org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStore org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStore org.jivesoftware.openfire.spi.ConnectionConfiguration+Log org.jivesoftware.openfire.spi.ConnectionConfiguration+Log,3501,53,1,"/** 
 * @param type
 * @param enabled
 * @param maxThreadPoolSize The maximum number of threads that are to be used to processing network activity. Must be equal to or larger than one.
 * @param maxBufferSize The maximum amount of bytes of the read buffer that I/O processor allocates per each read, or a non-positive value to configure no maximum.
 * @param clientAuth specification if peers should be authenticated ('mutual authentication') (cannot be null).
 * @param bindAddress The network address on which connections are accepted, or null when any local address can be used.
 * @param port The TCP port number on which connections are accepted (must be a valid TCP port number).
 * @param tlsPolicy The TLS policy that is applied to connections (cannot be null).
 */
","/**
     * @param type
     * @param enabled
     * @param maxThreadPoolSize The maximum number of threads that are to be used to processing network activity. Must be equal to or larger than one.
     * @param maxBufferSize The maximum amount of bytes of the read buffer that I/O processor allocates per each read, or a non-positive value to configure no maximum.
     * @param clientAuth specification if peers should be authenticated ('mutual authentication') (cannot be null).
     * @param bindAddress The network address on which connections are accepted, or null when any local address can be used.
     * @param port The TCP port number on which connections are accepted (must be a valid TCP port number).
     * @param tlsPolicy The TLS policy that is applied to connections (cannot be null).
     */
    // TODO input validation
    public ConnectionConfiguration( ConnectionType type, boolean enabled, int maxThreadPoolSize, int maxBufferSize, Connection.ClientAuth clientAuth, InetAddress bindAddress, int port, Connection.TLSPolicy tlsPolicy, CertificateStoreConfiguration identityStoreConfiguration, CertificateStoreConfiguration trustStoreConfiguration, boolean acceptSelfSignedCertificates, boolean verifyCertificateValidity, Set<String> encryptionProtocolsEnabled, Set<String> encryptionProtocolsDisabled, Set<String> cipherSuitesEnabled, Set<String> cipherSuitesDisabled )
    {
        if ( maxThreadPoolSize <= 0 ) {
            throw new IllegalArgumentException( ""Argument 'maxThreadPoolSize' must be equal to or greater than one."" );
        }
        if ( clientAuth == null ) {
            throw new IllegalArgumentException( ""Argument 'clientAuth' cannot be null."" );
        }

        this.enabled = enabled;
        this.tlsPolicy = tlsPolicy;
        this.type = type;
        this.maxThreadPoolSize = maxThreadPoolSize;
        this.maxBufferSize = maxBufferSize;
        this.clientAuth = clientAuth;
        this.bindAddress = bindAddress;
        this.port = port;
        this.identityStoreConfiguration = identityStoreConfiguration;
        this.trustStoreConfiguration = trustStoreConfiguration;
        this.acceptSelfSignedCertificates = acceptSelfSignedCertificates;
        this.verifyCertificateValidity = verifyCertificateValidity;

        // Remove all disabled protocols from the enabled ones.
        final Set<String> protocolsEnabled = new HashSet<>();
        protocolsEnabled.addAll( encryptionProtocolsEnabled );
        protocolsEnabled.removeAll( encryptionProtocolsDisabled );
        this.encryptionProtocolsEnabled = Collections.unmodifiableSet( protocolsEnabled );
        this.encryptionProtocolsDisabled = Collections.unmodifiableSet( encryptionProtocolsDisabled );

        // Remove all disabled suites from the enabled ones.
        final Set<String> suitesEnabled = new HashSet<>();
        suitesEnabled.addAll( cipherSuitesEnabled );
        suitesEnabled.removeAll( cipherSuitesDisabled );
        this.cipherSuitesEnabled = Collections.unmodifiableSet( suitesEnabled );
        this.cipherSuitesDisabled = Collections.unmodifiableSet( cipherSuitesDisabled );

        final CertificateStoreManager certificateStoreManager = XMPPServer.getInstance().getCertificateStoreManager();
        this.identityStore = certificateStoreManager.getIdentityStore( type );
        this.trustStore = certificateStoreManager.getTrustStore( type );

        this.Log = LoggerFactory.getLogger( this.getClass().getName() + ""[""+port+""-""+type+""]"" );
    }",False
34,getTlsPolicy(),Method,,,,,80,4,1,,"public Connection.TLSPolicy getTlsPolicy()
    {
        return tlsPolicy;
    }",False
35,getType(),Method,,org.jivesoftware.openfire.spi.ClientRoute+ConnectionAcceptor(ConnectionConfiguration) org.jivesoftware.openfire.spi.ClientRoute+ConnectionAcceptor(ConnectionConfiguration) org.jivesoftware.openfire.spi.ClientRoute+ConnectionAcceptor(ConnectionConfiguration),,org.jivesoftware.openfire.spi.ConnectionConfiguration+type,64,4,1,,"public ConnectionType getType()
    {
        return type;
    }",False
36,getMaxThreadPoolSize(),Method,,org.jivesoftware.openfire.spi.ClientRoute+start() org.jivesoftware.openfire.spi.ClientRoute+start(),,org.jivesoftware.openfire.spi.ConnectionConfiguration+maxThreadPoolSize,79,4,1,,"public int getMaxThreadPoolSize()
    {
        return maxThreadPoolSize;
    }",False
37,getMaxBufferSize(),Method,,org.jivesoftware.openfire.spi.ClientRoute+start() org.jivesoftware.openfire.spi.ClientRoute+start() org.jivesoftware.openfire.spi.ClientRoute+start(),,org.jivesoftware.openfire.spi.ConnectionConfiguration+maxBufferSize,71,4,1,,"public int getMaxBufferSize()
    {
        return maxBufferSize;
    }",False
38,getClientAuth(),Method,,,,,83,4,1,,"public Connection.ClientAuth getClientAuth()
    {
        return clientAuth;
    }",False
39,getBindAddress(),Method,,org.jivesoftware.openfire.spi.ClientRoute+start(),,org.jivesoftware.openfire.spi.ConnectionConfiguration+bindAddress,75,4,1,,"public InetAddress getBindAddress()
    {
        return bindAddress;
    }",False
40,getPort(),Method,,org.jivesoftware.openfire.spi.ClientRoute+start() org.jivesoftware.openfire.spi.ClientRoute+start() org.jivesoftware.openfire.spi.ClientRoute+start() org.jivesoftware.openfire.spi.ClientRoute+getPort(),,org.jivesoftware.openfire.spi.ConnectionConfiguration+port,53,4,1,,"public int getPort()
    {
        return port;
    }",False
41,getIdentityStoreConfiguration(),Method,,,,org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStoreConfiguration,123,4,1,,"public CertificateStoreConfiguration getIdentityStoreConfiguration()
    {
        return identityStoreConfiguration;
    }",False
42,getTrustStoreConfiguration(),Method,,,,org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStoreConfiguration,117,4,1,,"public CertificateStoreConfiguration getTrustStoreConfiguration()
    {
        return trustStoreConfiguration;
    }",False
43,isAcceptSelfSignedCertificates(),Method,,,,org.jivesoftware.openfire.spi.ConnectionConfiguration+acceptSelfSignedCertificates,323,9,1,"/** 
 * A boolean that indicates if self-signed peer certificates can be used to establish an encrypted connection.
 * @return true when self-signed certificates are accepted, otherwise false.
 */
","/**
     * A boolean that indicates if self-signed peer certificates can be used to establish an encrypted connection.
     *
     * @return true when self-signed certificates are accepted, otherwise false.
     */
    public boolean isAcceptSelfSignedCertificates()
    {
        return acceptSelfSignedCertificates;
    }",False
44,isVerifyCertificateValidity(),Method,,,,org.jivesoftware.openfire.spi.ConnectionConfiguration+verifyCertificateValidity,441,10,1,"/** 
 * A boolean that indicates if the current validity of certificates (based on their 'notBefore' and 'notAfter' property values) is used when they are used to establish an encrypted connection..
 * @return true when certificates are required to be valid to establish a secured connection, otherwise false.
 */
","/**
     * A boolean that indicates if the current validity of certificates (based on their 'notBefore' and 'notAfter'
     * property values) is used when they are used to establish an encrypted connection..
     *
     * @return true when certificates are required to be valid to establish a secured connection, otherwise false.
     */
    public boolean isVerifyCertificateValidity()
    {
        return verifyCertificateValidity;
    }",False
45,getEncryptionProtocolsEnabled(),Method,createSSLEngine() getSslContextFactory() getSslContextFactory() getSslContextFactory() getSslContextFactory(),,,org.jivesoftware.openfire.spi.ConnectionConfiguration+encryptionProtocolsEnabled,816,17,1,"/** 
 * A collection of protocol names that can be used for encryption of connections. When non-empty, the list is intended to specify those protocols (from a larger collection of implementation- supported protocols) that can be used to establish encryption. Values returned by  {@link #getEncryptionProtocolsDisabled()} are not included in the result of this method.The order over which values are iterated in the result is equal to the order of values in the comma-separated configuration string. This can, but is not guaranteed to, indicate preference.
 * @return An (ordered) set of protocols, never null but possibly empty.
 */
","/**
     * A collection of protocol names that can be used for encryption of connections.
     *
     * When non-empty, the list is intended to specify those protocols (from a larger collection of implementation-
     * supported protocols) that can be used to establish encryption.
     *
     * Values returned by {@link #getEncryptionProtocolsDisabled()} are not included in the result of this method.
     *
     * The order over which values are iterated in the result is equal to the order of values in the comma-separated
     * configuration string. This can, but is not guaranteed to, indicate preference.
     *
     * @return An (ordered) set of protocols, never null but possibly empty.
     */
    public Set<String> getEncryptionProtocolsEnabled()
    {
        return encryptionProtocolsEnabled;
    }",False
46,getEncryptionProtocolsDisabled(),Method,createSSLEngine() getSslContextFactory() getSslContextFactory(),,,org.jivesoftware.openfire.spi.ConnectionConfiguration+encryptionProtocolsDisabled,644,15,1,"/** 
 * A collection of protocols that must not be used for encryption of connections. When non-empty, the list is intended to specify those protocols (from a larger collection of implementation- supported protocols) that must not be used to establish encryption. The order over which values are iterated in the result is equal to the order of values in the comma-separated configuration string.
 * @return An (ordered) set of protocols, never null but possibly empty.
 */
","/**
     * A collection of protocols that must not be used for encryption of connections.
     *
     * When non-empty, the list is intended to specify those protocols (from a larger collection of implementation-
     * supported protocols) that must not be used to establish encryption.
     *
     * The order over which values are iterated in the result is equal to the order of values in the comma-separated
     * configuration string.
     *
     * @return An (ordered) set of protocols, never null but possibly empty.
     */
    public Set<String> getEncryptionProtocolsDisabled()
    {
        return encryptionProtocolsDisabled;
    }",False
47,getCipherSuitesEnabled(),Method,createSSLEngine() getSslContextFactory() getSslContextFactory() getSslContextFactory() getSslContextFactory(),,,org.jivesoftware.openfire.spi.ConnectionConfiguration+cipherSuitesEnabled,811,17,1,"/** 
 * A collection of cipher suite names that can be used for encryption of connections. When non-empty, the list is intended to specify those cipher suites (from a larger collection of implementation- supported cipher suties) that can be used to establish encryption. Values returned by  {@link #getCipherSuitesDisabled()} are not included in the result of this method.The order over which values are iterated in the result is equal to the order of values in the comma-separated configuration string. This can, but is not guaranteed to, indicate preference.
 * @return An (ordered) set of cipher suites, never null but possibly empty.
 */
","/**
     * A collection of cipher suite names that can be used for encryption of connections.
     *
     * When non-empty, the list is intended to specify those cipher suites (from a larger collection of implementation-
     * supported cipher suties) that can be used to establish encryption.
     *
     * Values returned by {@link #getCipherSuitesDisabled()} are not included in the result of this method.
     *
     * The order over which values are iterated in the result is equal to the order of values in the comma-separated
     * configuration string. This can, but is not guaranteed to, indicate preference.
     *
     * @return An (ordered) set of cipher suites, never null but possibly empty.
     */
    public Set<String> getCipherSuitesEnabled()
    {
        return cipherSuitesEnabled;
    }",False
48,getCipherSuitesDisabled(),Method,createSSLEngine() getSslContextFactory() getSslContextFactory(),,,org.jivesoftware.openfire.spi.ConnectionConfiguration+cipherSuitesDisabled,646,15,1,"/** 
 * A collection of cipher suites that must not be used for encryption of connections. When non-empty, the list is intended to specify those cipher suites (from a larger collection of implementation- supported cipher suites) that must not be used to establish encryption. The order over which values are iterated in the result is equal to the order of values in the comma-separated configuration string.
 * @return An (ordered) set of cipher suites, never null but possibly empty.
 */
","/**
     * A collection of cipher suites that must not be used for encryption of connections.
     *
     * When non-empty, the list is intended to specify those cipher suites (from a larger collection of implementation-
     * supported cipher suites) that must not be used to establish encryption.
     *
     * The order over which values are iterated in the result is equal to the order of values in the comma-separated
     * configuration string.
     *
     * @return An (ordered) set of cipher suites, never null but possibly empty.
     */
    public Set<String> getCipherSuitesDisabled()
    {
        return cipherSuitesDisabled;
    }",False
49,getIdentityStore(),Method,getKeyManagers(),"org.jivesoftware.openfire.net.SASLAuthentication+getSASLMechanismsElement(Session) org.jivesoftware.openfire.net.SASLAuthentication+doExternalAuthentication(LocalSession,Element) org.jivesoftware.openfire.session.LocalClientSession+createSession(String,XmlPullParser,Connection)",,org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStore,81,4,1,,"public IdentityStore getIdentityStore()
    {
        return identityStore;
    }",False
50,getTrustStore(),Method,,"org.jivesoftware.openfire.net.SASLAuthentication+getSASLMechanismsElement(Session) org.jivesoftware.openfire.net.SASLAuthentication+doExternalAuthentication(LocalSession,Element)",,org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStore,72,4,1,,"public TrustStore getTrustStore()
    {
        return trustStore;
    }",False
51,isEnabled(),Method,,,,org.jivesoftware.openfire.spi.ConnectionConfiguration+enabled,62,4,1,,"public boolean isEnabled()
    {
        return enabled;
    }",False
