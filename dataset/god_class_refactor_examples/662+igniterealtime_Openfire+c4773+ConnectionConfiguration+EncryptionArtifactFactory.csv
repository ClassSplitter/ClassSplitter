index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,Log,log ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,25,1,18,,private final Logger Log;,True,True,,False,
2,enabled,enabled ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,30,1,18,,private final boolean enabled;,False,False,,False,
3,type,type ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,34,1,18,,private final ConnectionType type;,False,False,,False,
4,maxThreadPoolSize,max thread pool size ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,36,1,18,,private final int maxThreadPoolSize;,False,False,,False,
5,maxBufferSize,max buffer size ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,32,1,18,,private final int maxBufferSize;,False,False,,False,
6,clientAuth,client auth ,Field,,,,,47,1,18,,private final Connection.ClientAuth clientAuth;,False,False,,False,
7,bindAddress,bind address ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,38,1,18,,private final InetAddress bindAddress;,False,False,,False,
8,port,port ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,23,1,18,,private final int port;,False,False,,False,
9,tlsPolicy,tls policy ,Field,,,,,45,1,18,,private final Connection.TLSPolicy tlsPolicy;,False,False,,False,
10,identityStoreConfiguration,identity store configuration ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,71,1,18,,private final CertificateStoreConfiguration identityStoreConfiguration;,False,False,,False,
11,trustStoreConfiguration,trust store configuration ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,68,1,18,,private final CertificateStoreConfiguration trustStoreConfiguration;,False,False,,False,
12,acceptSelfSignedCertificates,accept self signed certificates ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,51,1,18,,private final boolean acceptSelfSignedCertificates;,False,False,,False,
13,verifyCertificateValidity,verify certificate validity ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,48,1,18,,private final boolean verifyCertificateValidity;,False,False,,False,
14,encryptionProtocolsEnabled,encryption protocols enabled ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,53,1,18,,private final Set<String> encryptionProtocolsEnabled;,False,False,,False,
15,encryptionProtocolsDisabled,encryption protocols disabled ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,54,1,18,,private final Set<String> encryptionProtocolsDisabled;,False,False,,False,
16,cipherSuitesEnabled,cipher suites enabled ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,46,1,18,,private final Set<String> cipherSuitesEnabled;,False,False,,False,
17,cipherSuitesDisabled,cipher suites disabled ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,47,1,18,,private final Set<String> cipherSuitesDisabled;,False,False,,False,
18,identityStore,identity store ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,42,1,18,,private final IdentityStore identityStore;,False,False,,False,
19,trustStore,trust store ,Field,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",,,,36,1,18,,private final TrustStore trustStore;,False,False,,False,
20,keyManagerFactory,key manager factory ,Field,,,,,54,1,130,,private transient KeyManagerFactory keyManagerFactory;,True,True,,False,
21,sslContext,ssl context ,Field,,,,,40,1,130,,private transient SSLContext sslContext;,False,True,,False,
22,sslContextFactory,ssl context factory ,Field,,,,,54,1,130,,private transient SslContextFactory sslContextFactory;,True,True,,False,
23,getKeyManagers(),get key managers ,Method,getSSLContext(),,"javax.net.ssl.KeyManagerFactory+getInstance(String) javax.net.ssl.KeyManagerFactory+getInstance(String) javax.net.ssl.KeyManagerFactory+getDefaultAlgorithm() javax.net.ssl.KeyManagerFactory+getDefaultAlgorithm() javax.net.ssl.KeyManagerFactory+init(KeyStore,char[]) javax.net.ssl.KeyManagerFactory+init(KeyStore,char[]) org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.jivesoftware.openfire.spi.ConnectionConfiguration+getIdentityStore() org.jivesoftware.openfire.spi.ConnectionConfiguration+getIdentityStore() org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.jivesoftware.openfire.keystore.CertificateStoreConfiguration+getPassword() org.jivesoftware.openfire.keystore.CertificateStoreConfiguration+getPassword() javax.net.ssl.KeyManagerFactory+getKeyManagers() javax.net.ssl.KeyManagerFactory+getKeyManagers()",org.jivesoftware.openfire.spi.ConnectionConfiguration+keyManagerFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+keyManagerFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+keyManagerFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+keyManagerFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+keyManagerFactory,786,19,33,,"public synchronized KeyManager[] getKeyManagers() throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException
    {
        try
        {
            if ( keyManagerFactory == null )
            {
                keyManagerFactory = KeyManagerFactory.getInstance( KeyManagerFactory.getDefaultAlgorithm() );
                keyManagerFactory.init( getIdentityStore().getStore(), identityStoreConfiguration.getPassword() );
            }

            return keyManagerFactory.getKeyManagers();
        }
        catch ( UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException | RuntimeException ex )
        {
            // Allow initialization to restart upon next iteration.
            keyManagerFactory = null;
            throw ex;
        }
    }",True,True,"This method returns an array of KeyManagers. It first checks if the keyManagerFactory is null, and if so, initializes it with the default algorithm and the identity store's password. It then returns the KeyManagers from the keyManagerFactory. If any exceptions occur, it resets the keyManagerFactory to null and rethrows the exception.",True,"This code defines a synchronized method called `getKeyManagers()` that returns an array of `KeyManager` objects. It first checks if the `keyManagerFactory` is null and initializes it if necessary. Then, it retrieves the key managers from the factory and returns them. If any exception occurs during the process, the factory is reset and the exception is rethrown."
24,getTrustManagers(),get trust managers ,Method,getSSLContext(),,"org.jivesoftware.openfire.keystore.OpenfireX509TrustManager+OpenfireX509TrustManager(KeyStore,boolean,boolean) org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.jivesoftware.openfire.spi.ConnectionConfiguration+isAcceptSelfSignedCertificates() org.jivesoftware.openfire.spi.ConnectionConfiguration+isAcceptSelfSignedCertificates() org.jivesoftware.openfire.spi.ConnectionConfiguration+isVerifyCertificateValidity() org.jivesoftware.openfire.spi.ConnectionConfiguration+isVerifyCertificateValidity()",org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStore,274,4,33,,"public synchronized TrustManager[] getTrustManagers() throws KeyStoreException, NoSuchAlgorithmException
    {
        return new TrustManager[] { new OpenfireX509TrustManager( trustStore.getStore(), isAcceptSelfSignedCertificates(), isVerifyCertificateValidity() ) };
    }",True,True,"This method returns an array of TrustManagers. It creates a new instance of OpenfireX509TrustManager using the trustStore, and the values of isAcceptSelfSignedCertificates() and isVerifyCertificateValidity().",True,"The code defines a synchronized method named ""getTrustManagers"" that returns an array of TrustManagers. It creates a new instance of the OpenfireX509TrustManager class, passing in the trustStore, a flag indicating whether to accept self-signed certificates, and a flag indicating whether to verify certificate validity. The method may throw KeyStoreException and NoSuchAlgorithmException."
25,getSSLContext(),get ssl context ,Method,createSSLEngine() createServerModeSslFilter() createClientModeSslFilter(),,"javax.net.ssl.SSLContext+getInstance(String) javax.net.ssl.SSLContext+getInstance(String) javax.net.ssl.SSLContext+init(KeyManager[],TrustManager[],SecureRandom) javax.net.ssl.SSLContext+init(KeyManager[],TrustManager[],SecureRandom) org.jivesoftware.openfire.spi.ConnectionConfiguration+getKeyManagers() org.jivesoftware.openfire.spi.ConnectionConfiguration+getKeyManagers() org.jivesoftware.openfire.spi.ConnectionConfiguration+getTrustManagers() org.jivesoftware.openfire.spi.ConnectionConfiguration+getTrustManagers() java.security.SecureRandom+SecureRandom()",org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContext org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContext org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContext org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContext org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContext,670,18,33,,"public synchronized SSLContext getSSLContext( ) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException
    {
        if ( sslContext == null )
        {
            sslContext = SSLContext.getInstance( ""TLSv1"" );
            try
            {
                sslContext.init( getKeyManagers(), getTrustManagers(), new SecureRandom() );
            }
            catch ( UnrecoverableKeyException | RuntimeException ex )
            {
                // Allow initialization to restart upon next iteration.
                sslContext = null;
                throw ex;
            }
        }
        return sslContext;
    }",True,True,"This method returns an SSLContext object. If the sslContext object is null, it initializes it with the TLSv1 protocol and the provided key and trust managers. If an exception occurs during initialization, it sets sslContext to null and throws the exception.",True,"This code defines a synchronized method called `getSSLContext()` that returns an SSLContext object. If the sslContext object is null, it initializes it with the TLSv1 protocol and the provided key and trust managers. If an exception occurs during initialization, the sslContext object is set to null and the exception is thrown."
26,createSSLEngine(),create ssl engine a utility method that implements the shared functionality of get client mode ssl engine and get server mode ssl engine this method is used to initialize and pre configure an instance of ssl engine for a particular connection type the returned value lacks further configuration in most cases developers will want to use get client mode ssl engine or get server mode ssl engine instead of this method return a new pre configured ssl engine instance never null ,Method,createServerModeSSLEngine() createClientModeSSLEngine(),,org.jivesoftware.openfire.spi.ConnectionConfiguration+getSSLContext() org.jivesoftware.openfire.spi.ConnectionConfiguration+getSSLContext() javax.net.ssl.SSLContext+createSSLEngine() javax.net.ssl.SSLContext+createSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() java.util.Set+isEmpty() java.util.Set+isEmpty() javax.net.ssl.SSLEngine+setEnabledProtocols(String[]) javax.net.ssl.SSLEngine+setEnabledProtocols(String[]) java.util.Set+toArray(T[]) java.util.Set+toArray(T[]) java.util.Set+size() java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsDisabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsDisabled() javax.net.ssl.SSLEngine+getSupportedProtocols() javax.net.ssl.SSLEngine+getSupportedProtocols() java.util.Set+contains(Object) java.util.Set+contains(Object) java.util.ArrayList+add(E) java.util.ArrayList+add(E) javax.net.ssl.SSLEngine+setEnabledProtocols(String[]) javax.net.ssl.SSLEngine+setEnabledProtocols(String[]) java.util.ArrayList+toArray(T[]) java.util.ArrayList+toArray(T[]) java.util.ArrayList+size() java.util.ArrayList+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() java.util.Set+isEmpty() java.util.Set+isEmpty() javax.net.ssl.SSLEngine+setEnabledCipherSuites(String[]) javax.net.ssl.SSLEngine+setEnabledCipherSuites(String[]) java.util.Set+toArray(T[]) java.util.Set+toArray(T[]) java.util.Set+size() java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesDisabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesDisabled() javax.net.ssl.SSLEngine+getSupportedCipherSuites() javax.net.ssl.SSLEngine+getSupportedCipherSuites() java.util.Set+contains(Object) java.util.Set+contains(Object) java.util.ArrayList+add(E) java.util.ArrayList+add(E) javax.net.ssl.SSLEngine+setEnabledCipherSuites(String[]) javax.net.ssl.SSLEngine+setEnabledCipherSuites(String[]) java.util.ArrayList+toArray(T[]) java.util.ArrayList+toArray(T[]) java.util.ArrayList+size() java.util.ArrayList+size(),,2899,65,2,"/** 
 * A utility method that implements the shared functionality of getClientModeSSLEngine and getServerModeSSLEngine. This method is used to initialize and pre-configure an instance of SSLEngine for a particular connection type. The returned value lacks further configuration. In most cases, developers will want to use getClientModeSSLEngine or getServerModeSSLEngine instead of this method.
 * @return A new pre-configured SSLEngine instance (never null).
 */
","/**
     * A utility method that implements the shared functionality of getClientModeSSLEngine and getServerModeSSLEngine.
     *
     * This method is used to initialize and pre-configure an instance of SSLEngine for a particular connection type.
     * The returned value lacks further configuration. In most cases, developers will want to use getClientModeSSLEngine
     * or getServerModeSSLEngine instead of this method.
     *
     * @return A new pre-configured SSLEngine instance (never null).
     */
    private SSLEngine createSSLEngine( ) throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException
    {
        final SSLContext sslContext = getSSLContext();

        final SSLEngine sslEngine = sslContext.createSSLEngine();

        // Configure protocol support.
        final Set<String> protocolsEnabled = getEncryptionProtocolsEnabled();
        if ( !protocolsEnabled.isEmpty() )
        {
            // When an explicit list of enabled protocols is defined, use only those.
            sslEngine.setEnabledProtocols( protocolsEnabled.toArray( new String[ protocolsEnabled.size() ] ) );
        }
        else
        {
            // Otherwise, use all supported protocols (except for the ones that are explicitly disabled).
            final Set<String> disabled = getEncryptionProtocolsDisabled();
            final ArrayList<String> supported = new ArrayList<>();
            for ( final String candidate : sslEngine.getSupportedProtocols() )
            {
                if ( !disabled.contains( candidate ) )
                {
                    supported.add( candidate );
                }
            }

            sslEngine.setEnabledProtocols( supported.toArray( new String[ supported.size()] ) );
        }

        // Configure cipher suite support.
        final Set<String> cipherSuitesEnabled = getCipherSuitesEnabled();
        if ( !cipherSuitesEnabled.isEmpty() )
        {
            // When an explicit list of enabled protocols is defined, use only those.
            sslEngine.setEnabledCipherSuites( cipherSuitesEnabled.toArray( new String[ cipherSuitesEnabled.size() ] ) );
        }
        else
        {
            // Otherwise, use all supported cipher suites (except for the ones that are explicitly disabled).
            final Set<String> disabled = getCipherSuitesDisabled();
            final ArrayList<String> supported = new ArrayList<>();
            for ( final String candidate : sslEngine.getSupportedCipherSuites() )
            {
                if ( !disabled.contains( candidate ) )
                {
                    supported.add( candidate );
                }
            }

            sslEngine.setEnabledCipherSuites( supported.toArray( new String[ supported.size() ] ) );
        }

        // TODO: Set policy for checking client certificates

        return sslEngine;
    }",True,True,The function of the createSSLEngine method is to initialize and pre-configure an instance of SSLEngine for a particular connection type. It configures the protocol support and cipher suite support for the SSLEngine instance.,True,"This code defines a private method called `createSSLEngine()` that initializes and configures an instance of `SSLEngine` for a specific connection type. It sets the enabled protocols and cipher suites based on the provided configuration, and returns the pre-configured `SSLEngine` instance. The method also includes a TODO comment for setting the policy for checking client certificates."
27,createServerModeSSLEngine(),create server mode ssl engine creates a new ssl engine that is configured to use server mode when handshaking for openfire an engine is of this mode used for most purposes as openfire is a server by nature return a new initialized ssl engine instance never null ,Method,createServerModeSslFilter(),"org.jivesoftware.openfire.net.TLSWrapper+TLSWrapper(ConnectionConfiguration,boolean)",org.jivesoftware.openfire.spi.ConnectionConfiguration+createSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+createSSLEngine() javax.net.ssl.SSLEngine+setUseClientMode(boolean) javax.net.ssl.SSLEngine+setUseClientMode(boolean) javax.net.ssl.SSLEngine+setNeedClientAuth(boolean) javax.net.ssl.SSLEngine+setNeedClientAuth(boolean) javax.net.ssl.SSLEngine+setWantClientAuth(boolean) javax.net.ssl.SSLEngine+setWantClientAuth(boolean) javax.net.ssl.SSLEngine+setWantClientAuth(boolean) javax.net.ssl.SSLEngine+setWantClientAuth(boolean),,941,29,1,"/** 
 * Creates a new SSL Engine that is configured to use server mode when handshaking. For Openfire, an engine is of this mode used for most purposes (as Openfire is a server by nature).
 * @return A new, initialized SSLEngine instance (never null).
 */
","/**
     * Creates a new SSL Engine that is configured to use server mode when handshaking.
     *
     * For Openfire, an engine is of this mode used for most purposes (as Openfire is a server by nature).
     *
     * @return A new, initialized SSLEngine instance (never null).
     */
    public SSLEngine createServerModeSSLEngine() throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException
    {
        final SSLEngine sslEngine = createSSLEngine();
        sslEngine.setUseClientMode( false );

        switch ( getClientAuth() )
        {
            case needed:
                sslEngine.setNeedClientAuth( true );
                break;

            case wanted:
                sslEngine.setWantClientAuth( true );
                break;

            case disabled:
                sslEngine.setWantClientAuth( false );
                break;
        }

        return sslEngine;
    }",True,True,"This method creates a new SSL Engine that is configured to use server mode when handshaking. It sets the client mode to false and sets the client authentication based on the specified mode (needed, wanted, or disabled). It then returns the initialized SSLEngine instance.",True,This code creates and initializes a new SSL engine in server mode for use in Openfire. The SSL engine is configured based on the client authentication requirements specified in the code. The method returns the initialized SSL engine.
28,createClientModeSSLEngine(),create client mode ssl engine creates an ssl engine that is configured to use client mode when handshaking for openfire an engine of this mode is typically used when the server tries to connect to another server return an initialized ssl engine instance never null ,Method,createClientModeSslFilter(),"org.jivesoftware.openfire.net.TLSWrapper+TLSWrapper(ConnectionConfiguration,boolean)",org.jivesoftware.openfire.spi.ConnectionConfiguration+createSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+createSSLEngine() javax.net.ssl.SSLEngine+setUseClientMode(boolean) javax.net.ssl.SSLEngine+setUseClientMode(boolean),,577,14,1,"/** 
 * Creates an SSL Engine that is configured to use client mode when handshaking. For Openfire, an engine of this mode is typically used when the server tries to connect to another server.
 * @return An initialized SSLEngine instance (never null).
 */
","/**
     * Creates an SSL Engine that is configured to use client mode when handshaking.
     *
     * For Openfire, an engine of this mode is typically used when the server tries to connect to another server.
     *
     * @return An initialized SSLEngine instance (never null).
     */
    public SSLEngine createClientModeSSLEngine( ) throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException
    {
        final SSLEngine sslEngine = createSSLEngine();
        sslEngine.setUseClientMode( true );

        return sslEngine;
    }",True,True,This method creates and returns an initialized SSLEngine instance that is configured to use client mode when handshaking. It is typically used when the server tries to connect to another server.,True,"This code defines a method called ""createClientModeSSLEngine"" that creates and initializes an SSLEngine instance in client mode for use in handshaking. The method sets the useClientMode property of the SSLEngine to true and returns the initialized instance."
29,getSslContextFactory(),get ssl context factory ,Method,,"org.jivesoftware.openfire.container.AdminConsolePlugin+startup() org.jivesoftware.openfire.http.HttpBindManager+createSSLConnector(int,int)",org.slf4j.Logger+info(String) org.slf4j.Logger+info(String) org.eclipse.jetty.util.ssl.SslContextFactory+SslContextFactory() org.eclipse.jetty.util.ssl.SslContextFactory+setTrustStore(KeyStore) org.eclipse.jetty.util.ssl.SslContextFactory+setTrustStore(KeyStore) org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.eclipse.jetty.util.ssl.SslContextFactory+setTrustStorePassword(String) org.eclipse.jetty.util.ssl.SslContextFactory+setTrustStorePassword(String) java.lang.String+String(char[]) org.jivesoftware.openfire.keystore.CertificateStoreConfiguration+getPassword() org.jivesoftware.openfire.keystore.CertificateStoreConfiguration+getPassword() org.eclipse.jetty.util.ssl.SslContextFactory+setKeyStore(KeyStore) org.eclipse.jetty.util.ssl.SslContextFactory+setKeyStore(KeyStore) org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.jivesoftware.openfire.keystore.CertificateStore+getStore() org.eclipse.jetty.util.ssl.SslContextFactory+setKeyStorePassword(String) org.eclipse.jetty.util.ssl.SslContextFactory+setKeyStorePassword(String) java.lang.String+String(char[]) org.jivesoftware.openfire.keystore.CertificateStoreConfiguration+getPassword() org.jivesoftware.openfire.keystore.CertificateStoreConfiguration+getPassword() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() java.util.Set+isEmpty() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() java.util.Set+isEmpty() org.eclipse.jetty.util.ssl.SslContextFactory+setIncludeProtocols(String[]) org.eclipse.jetty.util.ssl.SslContextFactory+setIncludeProtocols(String[]) java.util.Set+toArray(T[]) org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() java.util.Set+toArray(T[]) java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsEnabled() java.util.Set+size() org.eclipse.jetty.util.ssl.SslContextFactory+setExcludeProtocols(String[]) org.eclipse.jetty.util.ssl.SslContextFactory+setExcludeProtocols(String[]) java.util.Set+toArray(T[]) org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsDisabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsDisabled() java.util.Set+toArray(T[]) java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsDisabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getEncryptionProtocolsDisabled() java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() java.util.Set+isEmpty() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() java.util.Set+isEmpty() org.eclipse.jetty.util.ssl.SslContextFactory+setIncludeCipherSuites(String[]) org.eclipse.jetty.util.ssl.SslContextFactory+setIncludeCipherSuites(String[]) java.util.Set+toArray(T[]) org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() java.util.Set+toArray(T[]) java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesEnabled() java.util.Set+size() org.eclipse.jetty.util.ssl.SslContextFactory+setExcludeCipherSuites(String[]) org.eclipse.jetty.util.ssl.SslContextFactory+setExcludeCipherSuites(String[]) java.util.Set+toArray(T[]) org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesDisabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesDisabled() java.util.Set+toArray(T[]) java.util.Set+size() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesDisabled() org.jivesoftware.openfire.spi.ConnectionConfiguration+getCipherSuitesDisabled() java.util.Set+size() org.eclipse.jetty.util.ssl.SslContextFactory+setNeedClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setNeedClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setWantClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setWantClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setNeedClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setNeedClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setWantClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setWantClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setNeedClientAuth(boolean) org.eclipse.jetty.util.ssl.SslContextFactory+setNeedClientAuth(boolean),org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+Log org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStore org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStore org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory org.jivesoftware.openfire.spi.ConnectionConfiguration+sslContextFactory,2460,56,33,,"public synchronized SslContextFactory getSslContextFactory()
    {
        if ( sslContextFactory != null )
        {
            return sslContextFactory;
        }

        Log.info( ""Creating new SslContextFactory instance"" );
        try
        {
            sslContextFactory = new SslContextFactory();

            sslContextFactory.setTrustStore( trustStore.getStore() );
            sslContextFactory.setTrustStorePassword( new String( trustStoreConfiguration.getPassword() ) );

            sslContextFactory.setKeyStore( identityStore.getStore() );
            sslContextFactory.setKeyStorePassword( new String( identityStoreConfiguration.getPassword() ) );

            // Configure protocol support
            if ( getEncryptionProtocolsEnabled() != null && !getEncryptionProtocolsEnabled().isEmpty() )
            {
                sslContextFactory.setIncludeProtocols( getEncryptionProtocolsEnabled().toArray( new String[ getEncryptionProtocolsEnabled().size() ] ) );
            }
            sslContextFactory.setExcludeProtocols( getEncryptionProtocolsDisabled().toArray( new String[ getEncryptionProtocolsDisabled().size() ] ) );

            // Configure cipher suite support.
            if ( getCipherSuitesEnabled() != null && !getCipherSuitesEnabled().isEmpty() )
            {
                sslContextFactory.setIncludeCipherSuites( getCipherSuitesEnabled().toArray( new String[ getCipherSuitesEnabled().size() ] ) );
            }
            sslContextFactory.setExcludeCipherSuites( getCipherSuitesDisabled().toArray( new String[ getCipherSuitesDisabled().size() ] ) );

            //Set policy for checking client certificates
            switch ( clientAuth )
            {
                case disabled:
                    sslContextFactory.setNeedClientAuth( false );
                    sslContextFactory.setWantClientAuth( false );
                    break;
                case wanted:
                    sslContextFactory.setNeedClientAuth( false );
                    sslContextFactory.setWantClientAuth( true );
                    break;
                case needed:
                    sslContextFactory.setNeedClientAuth( true );
                    break;
            }
            return sslContextFactory;
        }
        catch ( RuntimeException ex )
        {
            // Allow initialization to restart upon next iteration.
            sslContextFactory = null;
            throw ex;
        }
    }",False,True,"This method returns an instance of the SslContextFactory class. If the sslContextFactory object is already initialized, it returns that object. Otherwise, it creates a new instance of SslContextFactory, sets various properties on it, and returns it.",True,"This code defines a synchronized method called `getSslContextFactory()` that returns an instance of `SslContextFactory`. If the `sslContextFactory` object is already initialized, it is returned. Otherwise, a new instance is created and configured with trust store, key store, encryption protocols, cipher suites, and client certificate authentication settings."
30,createServerModeSslFilter(),create server mode ssl filter creates an apache mina ssl filter that is configured to use server mode when handshaking for openfire an engine is of this mode used for most purposes as openfire is a server by nature instead of an ssl context or ssl engine apache mina uses an ssl filter instance it is generally not needed to create both ssl context ssl engine as well as ssl filter instances return an initialized ssl filter instance never null ,Method,,org.jivesoftware.openfire.nio.NIOConnection+startTLS(boolean) org.jivesoftware.openfire.spi.ClientRoute+start(),"org.jivesoftware.openfire.spi.ConnectionConfiguration+getSSLContext() org.jivesoftware.openfire.spi.ConnectionConfiguration+getSSLContext() org.jivesoftware.openfire.spi.ConnectionConfiguration+createServerModeSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+createServerModeSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+createSslFilter(SSLContext,SSLEngine) org.jivesoftware.openfire.spi.ConnectionConfiguration+createSslFilter(SSLContext,SSLEngine)",,826,17,1,"/** 
 * Creates an Apache MINA SslFilter that is configured to use server mode when handshaking. For Openfire, an engine is of this mode used for most purposes (as Openfire is a server by nature). Instead of an SSLContext or SSLEngine, Apache MINA uses an SslFilter instance. It is generally not needed to create both SSLContext/SSLEngine as well as SslFilter instances.
 * @return An initialized SslFilter instance (never null)
 */
","/**
     * Creates an Apache MINA SslFilter that is configured to use server mode when handshaking.
     *
     * For Openfire, an engine is of this mode used for most purposes (as Openfire is a server by nature).
     *
     * Instead of an SSLContext or SSLEngine, Apache MINA uses an SslFilter instance. It is generally not needed to
     * create both SSLContext/SSLEngine as well as SslFilter instances.
     *
     * @return An initialized SslFilter instance (never null)
     */
    public SslFilter createServerModeSslFilter() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException, UnrecoverableKeyException
    {
        final SSLContext sslContext = getSSLContext();
        final SSLEngine sslEngine = createServerModeSSLEngine();

        return createSslFilter( sslContext, sslEngine );
    }",True,True,This method serves to create an Apache MINA SslFilter that is configured to use server mode when handshaking. It returns an initialized SslFilter instance.,True,"This code defines a method called `createServerModeSslFilter()` that creates and returns an initialized `SslFilter` instance. The method uses an SSLContext and SSLEngine to configure the SslFilter for server mode when handshaking. It handles exceptions related to key management, algorithm, key store, and key recovery."
31,createClientModeSslFilter(),create client mode ssl filter creates an apache mina ssl filter that is configured to use client mode when handshaking for openfire a filter of this mode is typically used when the server tries to connect to another server instead of an ssl context or ssl engine apache mina uses an ssl filter instance it is generally not needed to create both ssl context ssl engine as well as ssl filter instances return an initialized ssl filter instance never null ,Method,,org.jivesoftware.openfire.nio.NIOConnection+startTLS(boolean),"org.jivesoftware.openfire.spi.ConnectionConfiguration+getSSLContext() org.jivesoftware.openfire.spi.ConnectionConfiguration+getSSLContext() org.jivesoftware.openfire.spi.ConnectionConfiguration+createClientModeSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+createClientModeSSLEngine() org.jivesoftware.openfire.spi.ConnectionConfiguration+createSslFilter(SSLContext,SSLEngine) org.jivesoftware.openfire.spi.ConnectionConfiguration+createSslFilter(SSLContext,SSLEngine)",,832,17,1,"/** 
 * Creates an Apache MINA SslFilter that is configured to use client mode when handshaking. For Openfire, a filter of this mode is typically used when the server tries to connect to another server. Instead of an SSLContext or SSLEngine, Apache MINA uses an SslFilter instance. It is generally not needed to create both SSLContext/SSLEngine as well as SslFilter instances.
 * @return An initialized SslFilter instance (never null)
 */
","/**
     * Creates an Apache MINA SslFilter that is configured to use client mode when handshaking.
     *
     * For Openfire, a filter of this mode is typically used when the server tries to connect to another server.
     *
     * Instead of an SSLContext or SSLEngine, Apache MINA uses an SslFilter instance. It is generally not needed to
     * create both SSLContext/SSLEngine as well as SslFilter instances.
     *
     * @return An initialized SslFilter instance (never null)
     */
    public SslFilter createClientModeSslFilter() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException, UnrecoverableKeyException
    {
        final SSLContext sslContext = getSSLContext();
        final SSLEngine sslEngine = createClientModeSSLEngine();

        return createSslFilter( sslContext, sslEngine );
    }",False,True,The function of this method is to create and return an initialized Apache MINA SslFilter instance that is configured to use client mode when handshaking.,True,"This code creates and returns an Apache MINA SslFilter instance that is configured for client mode when handshaking. It uses an SSLContext and SSLEngine to create the SslFilter, which is typically used when the server connects to another server."
32,"createSslFilter(SSLContext,SSLEngine)",create ssl filter ssl context ssl engine a utility method that implements the shared functionality of get server mode ssl filter and get client mode ssl filter this method is used to initialize and configure an instance of ssl filter for a particular pre configured ssl context and ssl engine in most cases developers will want to use get server mode ssl filter or get client mode ssl filter instead of this method param ssl context a pre configured ssl context instance cannot be null param ssl engine a pre configured ssl engine instance cannot be null return a ssl filter instance never null ,Method,createServerModeSslFilter() createClientModeSslFilter(),,org.apache.mina.filter.ssl.SslFilter+SslFilter(SSLContext) org.apache.mina.filter.ssl.SslFilter+setUseClientMode(boolean) org.apache.mina.filter.ssl.SslFilter+setUseClientMode(boolean) javax.net.ssl.SSLEngine+getUseClientMode() javax.net.ssl.SSLEngine+getUseClientMode() org.apache.mina.filter.ssl.SslFilter+setEnabledProtocols(String[]) org.apache.mina.filter.ssl.SslFilter+setEnabledProtocols(String[]) javax.net.ssl.SSLEngine+getEnabledProtocols() javax.net.ssl.SSLEngine+getEnabledProtocols() org.apache.mina.filter.ssl.SslFilter+setEnabledCipherSuites(String[]) org.apache.mina.filter.ssl.SslFilter+setEnabledCipherSuites(String[]) javax.net.ssl.SSLEngine+getEnabledCipherSuites() javax.net.ssl.SSLEngine+getEnabledCipherSuites() javax.net.ssl.SSLEngine+getNeedClientAuth() javax.net.ssl.SSLEngine+getNeedClientAuth() org.apache.mina.filter.ssl.SslFilter+setNeedClientAuth(boolean) org.apache.mina.filter.ssl.SslFilter+setNeedClientAuth(boolean) javax.net.ssl.SSLEngine+getWantClientAuth() javax.net.ssl.SSLEngine+getWantClientAuth() org.apache.mina.filter.ssl.SslFilter+setWantClientAuth(boolean) org.apache.mina.filter.ssl.SslFilter+setWantClientAuth(boolean),,1417,30,10,"/** 
 * A utility method that implements the shared functionality of getServerModeSslFilter and getClientModeSslFilter. This method is used to initialize and configure an instance of SslFilter for a particular pre-configured SSLContext and SSLEngine. In most cases, developers will want to use getServerModeSslFilter or getClientModeSslFilter instead of this method.
 * @param sslContext a pre-configured SSL Context instance (cannot be null).
 * @param sslEngine a pre-configured SSL Engine instance (cannot be null).
 * @return A SslFilter instance (never null).
 */
","/**
     * A utility method that implements the shared functionality of getServerModeSslFilter and getClientModeSslFilter.
     *
     * This method is used to initialize and configure an instance of SslFilter for a particular pre-configured
     * SSLContext and SSLEngine. In most cases, developers will want to use getServerModeSslFilter or
     * getClientModeSslFilter instead of this method.
     *
     * @param sslContext a pre-configured SSL Context instance (cannot be null).
     * @param sslEngine a pre-configured SSL Engine instance (cannot be null).
     * @return A SslFilter instance (never null).
     */
    private static SslFilter createSslFilter( SSLContext sslContext, SSLEngine sslEngine ) {
        final SslFilter filter = new SslFilter( sslContext );

        // Copy configuration from the SSL Engine into the filter.
        filter.setUseClientMode( sslEngine.getUseClientMode() );
        filter.setEnabledProtocols( sslEngine.getEnabledProtocols() );
        filter.setEnabledCipherSuites( sslEngine.getEnabledCipherSuites() );

        // Note that the setters for 'need' and 'want' influence each-other. Invoke only one of them!
        if ( sslEngine.getNeedClientAuth() )
        {
            filter.setNeedClientAuth( true );
        }
        else if ( sslEngine.getWantClientAuth() )
        {
            filter.setWantClientAuth( true );
        }
        return filter;
    }",True,True,The function of the method is to create and configure an instance of SslFilter using a pre-configured SSLContext and SSLEngine. It sets various properties of the SslFilter based on the properties of the SSL Engine.,True,"This code defines a private method called createSslFilter that initializes and configures an instance of SslFilter using a pre-configured SSLContext and SSLEngine. The method copies the configuration from the SSL Engine into the filter, including the client mode, enabled protocols, enabled cipher suites, and client authentication requirements. The method returns the created SslFilter instance."
33,"ConnectionConfiguration(ConnectionType,boolean,int,int,Connection.ClientAuth,InetAddress,int,Connection.TLSPolicy,CertificateStoreConfiguration,CertificateStoreConfiguration,boolean,boolean,Set<String>,Set<String>,Set<String>,Set<String>)",connection configuration type enabled max thread pool size max buffer size client auth bind address port tls policy identity store configuration trust store configuration accept self signed certificates verify certificate validity encryption protocols enabled encryption protocols disabled cipher suites enabled cipher suites disabled param type param enabled param max thread pool size the maximum number of threads that are to be used to processing network activity must be equal to or larger than one param max buffer size the maximum amount of bytes of the read buffer that i o processor allocates per each read or a non positive value to configure no maximum param client auth specification if peers should be authenticated mutual authentication cannot be null param bind address the network address on which connections are accepted or null when any local address can be used param port the tcp port number on which connections are accepted must be a valid tcp port number param tls policy the tls policy that is applied to connections cannot be null ,Method,,,java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.IllegalArgumentException+IllegalArgumentException(String) java.util.Set+addAll(Collection) java.util.Set+addAll(Collection) java.util.Set+removeAll(Collection) java.util.Set+removeAll(Collection) java.util.Collections+unmodifiableSet(Set) java.util.Collections+unmodifiableSet(Set) java.util.Collections+unmodifiableSet(Set) java.util.Collections+unmodifiableSet(Set) java.util.Set+addAll(Collection) java.util.Set+addAll(Collection) java.util.Set+removeAll(Collection) java.util.Set+removeAll(Collection) java.util.Collections+unmodifiableSet(Set) java.util.Collections+unmodifiableSet(Set) java.util.Collections+unmodifiableSet(Set) java.util.Collections+unmodifiableSet(Set) org.jivesoftware.openfire.XMPPServer+getCertificateStoreManager() org.jivesoftware.openfire.XMPPServer+getInstance() org.jivesoftware.openfire.XMPPServer+getInstance() org.jivesoftware.openfire.XMPPServer+getCertificateStoreManager() org.jivesoftware.openfire.keystore.CertificateStoreManager+getIdentityStore(ConnectionType) org.jivesoftware.openfire.keystore.CertificateStoreManager+getIdentityStore(ConnectionType) org.jivesoftware.openfire.keystore.CertificateStoreManager+getTrustStore(ConnectionType) org.jivesoftware.openfire.keystore.CertificateStoreManager+getTrustStore(ConnectionType) org.slf4j.LoggerFactory+getLogger(String) org.slf4j.LoggerFactory+getLogger(String) java.lang.Class+getName() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getName(),org.jivesoftware.openfire.spi.ConnectionConfiguration+enabled org.jivesoftware.openfire.spi.ConnectionConfiguration+enabled org.jivesoftware.openfire.spi.ConnectionConfiguration+type org.jivesoftware.openfire.spi.ConnectionConfiguration+type org.jivesoftware.openfire.spi.ConnectionConfiguration+maxThreadPoolSize org.jivesoftware.openfire.spi.ConnectionConfiguration+maxThreadPoolSize org.jivesoftware.openfire.spi.ConnectionConfiguration+maxBufferSize org.jivesoftware.openfire.spi.ConnectionConfiguration+maxBufferSize org.jivesoftware.openfire.spi.ConnectionConfiguration+bindAddress org.jivesoftware.openfire.spi.ConnectionConfiguration+bindAddress org.jivesoftware.openfire.spi.ConnectionConfiguration+port org.jivesoftware.openfire.spi.ConnectionConfiguration+port org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStoreConfiguration org.jivesoftware.openfire.spi.ConnectionConfiguration+acceptSelfSignedCertificates org.jivesoftware.openfire.spi.ConnectionConfiguration+acceptSelfSignedCertificates org.jivesoftware.openfire.spi.ConnectionConfiguration+verifyCertificateValidity org.jivesoftware.openfire.spi.ConnectionConfiguration+verifyCertificateValidity org.jivesoftware.openfire.spi.ConnectionConfiguration+encryptionProtocolsEnabled org.jivesoftware.openfire.spi.ConnectionConfiguration+encryptionProtocolsEnabled org.jivesoftware.openfire.spi.ConnectionConfiguration+encryptionProtocolsDisabled org.jivesoftware.openfire.spi.ConnectionConfiguration+encryptionProtocolsDisabled org.jivesoftware.openfire.spi.ConnectionConfiguration+cipherSuitesEnabled org.jivesoftware.openfire.spi.ConnectionConfiguration+cipherSuitesEnabled org.jivesoftware.openfire.spi.ConnectionConfiguration+cipherSuitesDisabled org.jivesoftware.openfire.spi.ConnectionConfiguration+cipherSuitesDisabled org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStore org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStore org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStore org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStore org.jivesoftware.openfire.spi.ConnectionConfiguration+Log org.jivesoftware.openfire.spi.ConnectionConfiguration+Log,3501,53,1,"/** 
 * @param type
 * @param enabled
 * @param maxThreadPoolSize The maximum number of threads that are to be used to processing network activity. Must be equal to or larger than one.
 * @param maxBufferSize The maximum amount of bytes of the read buffer that I/O processor allocates per each read, or a non-positive value to configure no maximum.
 * @param clientAuth specification if peers should be authenticated ('mutual authentication') (cannot be null).
 * @param bindAddress The network address on which connections are accepted, or null when any local address can be used.
 * @param port The TCP port number on which connections are accepted (must be a valid TCP port number).
 * @param tlsPolicy The TLS policy that is applied to connections (cannot be null).
 */
","/**
     * @param type
     * @param enabled
     * @param maxThreadPoolSize The maximum number of threads that are to be used to processing network activity. Must be equal to or larger than one.
     * @param maxBufferSize The maximum amount of bytes of the read buffer that I/O processor allocates per each read, or a non-positive value to configure no maximum.
     * @param clientAuth specification if peers should be authenticated ('mutual authentication') (cannot be null).
     * @param bindAddress The network address on which connections are accepted, or null when any local address can be used.
     * @param port The TCP port number on which connections are accepted (must be a valid TCP port number).
     * @param tlsPolicy The TLS policy that is applied to connections (cannot be null).
     */
    // TODO input validation
    public ConnectionConfiguration( ConnectionType type, boolean enabled, int maxThreadPoolSize, int maxBufferSize, Connection.ClientAuth clientAuth, InetAddress bindAddress, int port, Connection.TLSPolicy tlsPolicy, CertificateStoreConfiguration identityStoreConfiguration, CertificateStoreConfiguration trustStoreConfiguration, boolean acceptSelfSignedCertificates, boolean verifyCertificateValidity, Set<String> encryptionProtocolsEnabled, Set<String> encryptionProtocolsDisabled, Set<String> cipherSuitesEnabled, Set<String> cipherSuitesDisabled )
    {
        if ( maxThreadPoolSize <= 0 ) {
            throw new IllegalArgumentException( ""Argument 'maxThreadPoolSize' must be equal to or greater than one."" );
        }
        if ( clientAuth == null ) {
            throw new IllegalArgumentException( ""Argument 'clientAuth' cannot be null."" );
        }

        this.enabled = enabled;
        this.tlsPolicy = tlsPolicy;
        this.type = type;
        this.maxThreadPoolSize = maxThreadPoolSize;
        this.maxBufferSize = maxBufferSize;
        this.clientAuth = clientAuth;
        this.bindAddress = bindAddress;
        this.port = port;
        this.identityStoreConfiguration = identityStoreConfiguration;
        this.trustStoreConfiguration = trustStoreConfiguration;
        this.acceptSelfSignedCertificates = acceptSelfSignedCertificates;
        this.verifyCertificateValidity = verifyCertificateValidity;

        // Remove all disabled protocols from the enabled ones.
        final Set<String> protocolsEnabled = new HashSet<>();
        protocolsEnabled.addAll( encryptionProtocolsEnabled );
        protocolsEnabled.removeAll( encryptionProtocolsDisabled );
        this.encryptionProtocolsEnabled = Collections.unmodifiableSet( protocolsEnabled );
        this.encryptionProtocolsDisabled = Collections.unmodifiableSet( encryptionProtocolsDisabled );

        // Remove all disabled suites from the enabled ones.
        final Set<String> suitesEnabled = new HashSet<>();
        suitesEnabled.addAll( cipherSuitesEnabled );
        suitesEnabled.removeAll( cipherSuitesDisabled );
        this.cipherSuitesEnabled = Collections.unmodifiableSet( suitesEnabled );
        this.cipherSuitesDisabled = Collections.unmodifiableSet( cipherSuitesDisabled );

        final CertificateStoreManager certificateStoreManager = XMPPServer.getInstance().getCertificateStoreManager();
        this.identityStore = certificateStoreManager.getIdentityStore( type );
        this.trustStore = certificateStoreManager.getTrustStore( type );

        this.Log = LoggerFactory.getLogger( this.getClass().getName() + ""[""+port+""-""+type+""]"" );
    }",False,False,"The function of this method is to create a connection configuration object with various parameters such as thread pool size, buffer size, authentication settings, network address, port number, TLS policy, and certificate store configurations. It also performs input validation for some of the parameters.",False,"This code defines a constructor for a ConnectionConfiguration class. It takes in various parameters related to network connections, TLS policies, and certificate stores, and initializes the corresponding fields of the class. It also performs input validation for some of the parameters."
34,getTlsPolicy(),get tls policy ,Method,,,,,80,4,1,,"public Connection.TLSPolicy getTlsPolicy()
    {
        return tlsPolicy;
    }",False,False,"The method ""getTlsPolicy"" returns the TLS policy of a connection.",False,"The code defines a method named ""getTlsPolicy"" that returns the value of the ""tlsPolicy"" variable of type Connection.TLSPolicy. This method allows access to the TLS policy used by the connection."
35,getType(),get type ,Method,,org.jivesoftware.openfire.spi.ClientRoute+ConnectionAcceptor(ConnectionConfiguration) org.jivesoftware.openfire.spi.ClientRoute+ConnectionAcceptor(ConnectionConfiguration) org.jivesoftware.openfire.spi.ClientRoute+ConnectionAcceptor(ConnectionConfiguration),,org.jivesoftware.openfire.spi.ConnectionConfiguration+type,64,4,1,,"public ConnectionType getType()
    {
        return type;
    }",False,False,"This method returns the value of the variable ""type"" which represents the connection type.",False,"The code defines a method named `getType()` that returns the value of the `type` variable. The `type` variable is of type `ConnectionType`, and this method allows access to its value."
36,getMaxThreadPoolSize(),get max thread pool size ,Method,,org.jivesoftware.openfire.spi.ClientRoute+start() org.jivesoftware.openfire.spi.ClientRoute+start(),,org.jivesoftware.openfire.spi.ConnectionConfiguration+maxThreadPoolSize,79,4,1,,"public int getMaxThreadPoolSize()
    {
        return maxThreadPoolSize;
    }",False,False,"This method returns the value of the variable maxThreadPoolSize, which represents the maximum size of a thread pool.",False,"This code defines a method named ""getMaxThreadPoolSize"" that returns an integer value representing the maximum size of a thread pool. It does not take any parameters and simply returns the value of the ""maxThreadPoolSize"" variable."
37,getMaxBufferSize(),get max buffer size ,Method,,org.jivesoftware.openfire.spi.ClientRoute+start() org.jivesoftware.openfire.spi.ClientRoute+start() org.jivesoftware.openfire.spi.ClientRoute+start(),,org.jivesoftware.openfire.spi.ConnectionConfiguration+maxBufferSize,71,4,1,,"public int getMaxBufferSize()
    {
        return maxBufferSize;
    }",False,False,This method returns the value of the variable maxBufferSize.,False,"The code contains a method named ""getMaxBufferSize"" which returns an integer value. This method is used to retrieve the maximum buffer size."
38,getClientAuth(),get client auth ,Method,,,,,83,4,1,,"public Connection.ClientAuth getClientAuth()
    {
        return clientAuth;
    }",False,False,"This method returns the value of the variable ""clientAuth"" of type Connection.ClientAuth.",False,"The code defines a method named ""getClientAuth"" that returns an object of type ""Connection.ClientAuth"". This method is responsible for retrieving the client authentication information."
39,getBindAddress(),get bind address ,Method,,org.jivesoftware.openfire.spi.ClientRoute+start(),,org.jivesoftware.openfire.spi.ConnectionConfiguration+bindAddress,75,4,1,,"public InetAddress getBindAddress()
    {
        return bindAddress;
    }",False,False,This method returns the bind address.,False,"The code defines a method named ""getBindAddress"" that returns an object of type InetAddress. This method is used to retrieve the bind address, which is the network address to which a socket is bound for communication."
40,getPort(),get port ,Method,,org.jivesoftware.openfire.spi.ClientRoute+start() org.jivesoftware.openfire.spi.ClientRoute+start() org.jivesoftware.openfire.spi.ClientRoute+start() org.jivesoftware.openfire.spi.ClientRoute+getPort(),,org.jivesoftware.openfire.spi.ConnectionConfiguration+port,53,4,1,,"public int getPort()
    {
        return port;
    }",False,False,"This method returns the value of the variable ""port"" as an integer.",False,"The code contains a method named ""getPort"" which returns an integer value. This method is used to retrieve the value of the ""port"" variable."
41,getIdentityStoreConfiguration(),get identity store configuration ,Method,,,,org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStoreConfiguration,123,4,1,,"public CertificateStoreConfiguration getIdentityStoreConfiguration()
    {
        return identityStoreConfiguration;
    }",False,False,This method returns the identity store configuration.,False,"This code defines a method named ""getIdentityStoreConfiguration"" that returns an object of type ""CertificateStoreConfiguration"". It is used to retrieve the configuration settings for the identity store."
42,getTrustStoreConfiguration(),get trust store configuration ,Method,,,,org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStoreConfiguration,117,4,1,,"public CertificateStoreConfiguration getTrustStoreConfiguration()
    {
        return trustStoreConfiguration;
    }",False,False,This method returns the trust store configuration.,False,"The code defines a method named ""getTrustStoreConfiguration"" which returns an object of type ""CertificateStoreConfiguration"". This method is used to retrieve the trust store configuration, which likely contains information about trusted certificates for secure communication."
43,isAcceptSelfSignedCertificates(),is accept self signed certificates a boolean that indicates if self signed peer certificates can be used to establish an encrypted connection return true when self signed certificates are accepted otherwise false ,Method,,,,org.jivesoftware.openfire.spi.ConnectionConfiguration+acceptSelfSignedCertificates,323,9,1,"/** 
 * A boolean that indicates if self-signed peer certificates can be used to establish an encrypted connection.
 * @return true when self-signed certificates are accepted, otherwise false.
 */
","/**
     * A boolean that indicates if self-signed peer certificates can be used to establish an encrypted connection.
     *
     * @return true when self-signed certificates are accepted, otherwise false.
     */
    public boolean isAcceptSelfSignedCertificates()
    {
        return acceptSelfSignedCertificates;
    }",False,False,"This method returns a boolean value indicating whether self-signed peer certificates can be used to establish an encrypted connection. If true, self-signed certificates are accepted; otherwise, false.",False,"The given code snippet is a method named ""isAcceptSelfSignedCertificates"" that returns a boolean value indicating whether self-signed peer certificates can be used to establish an encrypted connection. The method provides a summary description of the functionality it performs and the condition it checks."
44,isVerifyCertificateValidity(),is verify certificate validity a boolean that indicates if the current validity of certificates based on their not before and not after property values is used when they are used to establish an encrypted connection return true when certificates are required to be valid to establish a secured connection otherwise false ,Method,,,,org.jivesoftware.openfire.spi.ConnectionConfiguration+verifyCertificateValidity,441,10,1,"/** 
 * A boolean that indicates if the current validity of certificates (based on their 'notBefore' and 'notAfter' property values) is used when they are used to establish an encrypted connection..
 * @return true when certificates are required to be valid to establish a secured connection, otherwise false.
 */
","/**
     * A boolean that indicates if the current validity of certificates (based on their 'notBefore' and 'notAfter'
     * property values) is used when they are used to establish an encrypted connection..
     *
     * @return true when certificates are required to be valid to establish a secured connection, otherwise false.
     */
    public boolean isVerifyCertificateValidity()
    {
        return verifyCertificateValidity;
    }",False,False,This method returns a boolean value indicating whether the validity of certificates is used to establish an encrypted connection.,False,"This code defines a method called ""isVerifyCertificateValidity"" which returns a boolean value indicating whether the validity of certificates is used to establish an encrypted connection. If the returned value is true, certificates must be valid for a secured connection, otherwise they are not required to be valid."
45,getEncryptionProtocolsEnabled(),get encryption protocols enabled a collection of protocol names that can be used for encryption of connections when non empty the list is intended to specify those protocols from a larger collection of implementation supported protocols that can be used to establish encryption values returned by link get encryption protocols disabled are not included in the result of this method the order over which values are iterated in the result is equal to the order of values in the comma separated configuration string this can but is not guaranteed to indicate preference return an ordered set of protocols never null but possibly empty ,Method,createSSLEngine() getSslContextFactory() getSslContextFactory() getSslContextFactory() getSslContextFactory(),,,org.jivesoftware.openfire.spi.ConnectionConfiguration+encryptionProtocolsEnabled,816,17,1,"/** 
 * A collection of protocol names that can be used for encryption of connections. When non-empty, the list is intended to specify those protocols (from a larger collection of implementation- supported protocols) that can be used to establish encryption. Values returned by  {@link #getEncryptionProtocolsDisabled()} are not included in the result of this method.The order over which values are iterated in the result is equal to the order of values in the comma-separated configuration string. This can, but is not guaranteed to, indicate preference.
 * @return An (ordered) set of protocols, never null but possibly empty.
 */
","/**
     * A collection of protocol names that can be used for encryption of connections.
     *
     * When non-empty, the list is intended to specify those protocols (from a larger collection of implementation-
     * supported protocols) that can be used to establish encryption.
     *
     * Values returned by {@link #getEncryptionProtocolsDisabled()} are not included in the result of this method.
     *
     * The order over which values are iterated in the result is equal to the order of values in the comma-separated
     * configuration string. This can, but is not guaranteed to, indicate preference.
     *
     * @return An (ordered) set of protocols, never null but possibly empty.
     */
    public Set<String> getEncryptionProtocolsEnabled()
    {
        return encryptionProtocolsEnabled;
    }",False,False,"This method returns a set of protocol names that can be used for encryption of connections. The set is ordered based on the order of values in the comma-separated configuration string, indicating preference. The set will never be null but may be empty.",False,"This code defines a method called `getEncryptionProtocolsEnabled()` that returns a set of encryption protocols that can be used for establishing encryption in a connection. The returned set is ordered based on the order of values in the configuration string, indicating preference."
46,getEncryptionProtocolsDisabled(),get encryption protocols disabled a collection of protocols that must not be used for encryption of connections when non empty the list is intended to specify those protocols from a larger collection of implementation supported protocols that must not be used to establish encryption the order over which values are iterated in the result is equal to the order of values in the comma separated configuration string return an ordered set of protocols never null but possibly empty ,Method,createSSLEngine() getSslContextFactory() getSslContextFactory(),,,org.jivesoftware.openfire.spi.ConnectionConfiguration+encryptionProtocolsDisabled,644,15,1,"/** 
 * A collection of protocols that must not be used for encryption of connections. When non-empty, the list is intended to specify those protocols (from a larger collection of implementation- supported protocols) that must not be used to establish encryption. The order over which values are iterated in the result is equal to the order of values in the comma-separated configuration string.
 * @return An (ordered) set of protocols, never null but possibly empty.
 */
","/**
     * A collection of protocols that must not be used for encryption of connections.
     *
     * When non-empty, the list is intended to specify those protocols (from a larger collection of implementation-
     * supported protocols) that must not be used to establish encryption.
     *
     * The order over which values are iterated in the result is equal to the order of values in the comma-separated
     * configuration string.
     *
     * @return An (ordered) set of protocols, never null but possibly empty.
     */
    public Set<String> getEncryptionProtocolsDisabled()
    {
        return encryptionProtocolsDisabled;
    }",False,False,This method returns a set of protocols that should not be used for encryption of connections. The set is ordered based on the order of values in the comma-separated configuration string. The set is never null but can be empty.,False,"This code defines a method called ""getEncryptionProtocolsDisabled"" that returns a set of protocols that should not be used for encryption. The returned set is ordered based on the order of values in the configuration string. The method always returns a non-null set, which may be empty."
47,getCipherSuitesEnabled(),get cipher suites enabled a collection of cipher suite names that can be used for encryption of connections when non empty the list is intended to specify those cipher suites from a larger collection of implementation supported cipher suties that can be used to establish encryption values returned by link get cipher suites disabled are not included in the result of this method the order over which values are iterated in the result is equal to the order of values in the comma separated configuration string this can but is not guaranteed to indicate preference return an ordered set of cipher suites never null but possibly empty ,Method,createSSLEngine() getSslContextFactory() getSslContextFactory() getSslContextFactory() getSslContextFactory(),,,org.jivesoftware.openfire.spi.ConnectionConfiguration+cipherSuitesEnabled,811,17,1,"/** 
 * A collection of cipher suite names that can be used for encryption of connections. When non-empty, the list is intended to specify those cipher suites (from a larger collection of implementation- supported cipher suties) that can be used to establish encryption. Values returned by  {@link #getCipherSuitesDisabled()} are not included in the result of this method.The order over which values are iterated in the result is equal to the order of values in the comma-separated configuration string. This can, but is not guaranteed to, indicate preference.
 * @return An (ordered) set of cipher suites, never null but possibly empty.
 */
","/**
     * A collection of cipher suite names that can be used for encryption of connections.
     *
     * When non-empty, the list is intended to specify those cipher suites (from a larger collection of implementation-
     * supported cipher suties) that can be used to establish encryption.
     *
     * Values returned by {@link #getCipherSuitesDisabled()} are not included in the result of this method.
     *
     * The order over which values are iterated in the result is equal to the order of values in the comma-separated
     * configuration string. This can, but is not guaranteed to, indicate preference.
     *
     * @return An (ordered) set of cipher suites, never null but possibly empty.
     */
    public Set<String> getCipherSuitesEnabled()
    {
        return cipherSuitesEnabled;
    }",False,False,This method returns a set of cipher suite names that can be used for encryption of connections. The returned set is ordered and does not include any cipher suites that are disabled.,False,"The method `getCipherSuitesEnabled()` returns a set of cipher suite names that can be used for encryption of connections. The returned set is ordered based on the order of values in the comma-separated configuration string, indicating preference. The set is never null but can be empty."
48,getCipherSuitesDisabled(),get cipher suites disabled a collection of cipher suites that must not be used for encryption of connections when non empty the list is intended to specify those cipher suites from a larger collection of implementation supported cipher suites that must not be used to establish encryption the order over which values are iterated in the result is equal to the order of values in the comma separated configuration string return an ordered set of cipher suites never null but possibly empty ,Method,createSSLEngine() getSslContextFactory() getSslContextFactory(),,,org.jivesoftware.openfire.spi.ConnectionConfiguration+cipherSuitesDisabled,646,15,1,"/** 
 * A collection of cipher suites that must not be used for encryption of connections. When non-empty, the list is intended to specify those cipher suites (from a larger collection of implementation- supported cipher suites) that must not be used to establish encryption. The order over which values are iterated in the result is equal to the order of values in the comma-separated configuration string.
 * @return An (ordered) set of cipher suites, never null but possibly empty.
 */
","/**
     * A collection of cipher suites that must not be used for encryption of connections.
     *
     * When non-empty, the list is intended to specify those cipher suites (from a larger collection of implementation-
     * supported cipher suites) that must not be used to establish encryption.
     *
     * The order over which values are iterated in the result is equal to the order of values in the comma-separated
     * configuration string.
     *
     * @return An (ordered) set of cipher suites, never null but possibly empty.
     */
    public Set<String> getCipherSuitesDisabled()
    {
        return cipherSuitesDisabled;
    }",False,False,This method returns a set of cipher suites that should not be used for encryption. The set is ordered based on the order of values in the configuration string. The returned set is never null but can be empty.,False,"The code defines a method called `getCipherSuitesDisabled()` which returns a set of cipher suites that should not be used for encryption. The returned set is ordered based on the order of values in the comma-separated configuration string. The method always returns a non-null set, which may be empty."
49,getIdentityStore(),get identity store ,Method,getKeyManagers(),"org.jivesoftware.openfire.net.SASLAuthentication+getSASLMechanismsElement(Session) org.jivesoftware.openfire.net.SASLAuthentication+doExternalAuthentication(LocalSession,Element) org.jivesoftware.openfire.session.LocalClientSession+createSession(String,XmlPullParser,Connection)",,org.jivesoftware.openfire.spi.ConnectionConfiguration+identityStore,81,4,1,,"public IdentityStore getIdentityStore()
    {
        return identityStore;
    }",False,False,This method returns the identity store.,False,"The code defines a method named ""getIdentityStore"" that returns an object of type ""IdentityStore"". This method is responsible for retrieving the identity store object."
50,getTrustStore(),get trust store ,Method,,"org.jivesoftware.openfire.net.SASLAuthentication+getSASLMechanismsElement(Session) org.jivesoftware.openfire.net.SASLAuthentication+doExternalAuthentication(LocalSession,Element)",,org.jivesoftware.openfire.spi.ConnectionConfiguration+trustStore,72,4,1,,"public TrustStore getTrustStore()
    {
        return trustStore;
    }",False,False,This method returns the trust store.,False,"The code defines a method named ""getTrustStore"" that returns an object of type ""TrustStore"". This method is responsible for retrieving the trust store object."
51,isEnabled(),is enabled ,Method,,,,org.jivesoftware.openfire.spi.ConnectionConfiguration+enabled,62,4,1,,"public boolean isEnabled()
    {
        return enabled;
    }",False,False,"This method returns the value of the ""enabled"" variable as a boolean.",False,The code contains a method named `isEnabled()` which returns a boolean value. It is used to check if a certain feature or functionality is enabled or not.
