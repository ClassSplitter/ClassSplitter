index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,getFolderPipelineTest(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+validatePipeline(Job,Map) io.jenkins.blueocean.service.embedded.BaseTest+validatePipeline(Job,Map)",io.jenkins.blueocean.service.embedded.BaseTest+j,312,8,1,,"@Test
    public void getFolderPipelineTest() throws IOException {
        MockFolder folder = j.createFolder(""folder1"");
        Project p = folder.createProject(FreeStyleProject.class, ""test1"");

        Map response = get(""/organizations/jenkins/pipelines/test1"");
        validatePipeline(p, response);
    }",False
2,getPipelineTest(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+validatePipeline(Job,Map) io.jenkins.blueocean.service.embedded.BaseTest+validatePipeline(Job,Map)",io.jenkins.blueocean.service.embedded.BaseTest+j,254,7,1,,"@Test
    public void getPipelineTest() throws IOException {
        Project p = j.createFreeStyleProject(""pipeline1"");

        Map<String,Object> response = get(""/organizations/jenkins/pipelines/pipeline1"");
        validatePipeline(p, response);
    }",False
3,deletePipelineTest(),Method,,,io.jenkins.blueocean.service.embedded.BaseTest+delete(String) io.jenkins.blueocean.service.embedded.BaseTest+delete(String) org.junit.Assert+assertNull(Object) org.junit.Assert+assertNull(Object),io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,324,9,1,"/** 
 * TODO: latest stapler change broke delete, disabled for now 
 */
","/** TODO: latest stapler change broke delete, disabled for now */
//    @Test
    public void deletePipelineTest() throws IOException {
        Project p = j.createFreeStyleProject(""pipeline1"");

        delete(""/organizations/jenkins/pipelines/pipeline1/"");

        Assert.assertNull(j.jenkins.getItem(p.getName()));
    }",False
4,getFreeStyleJobTest(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) io.jenkins.blueocean.service.embedded.BaseTest+validatePipeline(Job,Map) io.jenkins.blueocean.service.embedded.BaseTest+validatePipeline(Job,Map)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,682,18,1,,"@Test
    public void getFreeStyleJobTest() throws Exception {
        Project p1 = j.createFreeStyleProject(""pipeline1"");
        Project p2 = j.createFreeStyleProject(""pipeline2"");
        p1.getBuildersList().add(new Shell(""echo hello!\nsleep 1""));
        FreeStyleBuild b = (FreeStyleBuild) p1.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b);

        List<Map> resp = get(""/organizations/jenkins/pipelines/"", List.class);
        Project[] projects = {p1,p2};

        Assert.assertEquals(projects.length, resp.size());

        for(int i=0; i<projects.length; i++){
            Map p = resp.get(i);
            validatePipeline(projects[i], p);
        }
    }",False
5,findPipelinesTest(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) io.jenkins.blueocean.service.embedded.BaseTest+validatePipeline(Job,Map) io.jenkins.blueocean.service.embedded.BaseTest+validatePipeline(Job,Map)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,531,15,1,,"@Test
    public void findPipelinesTest() throws IOException {
        FreeStyleProject p1 = j.createFreeStyleProject(""pipeline2"");
        FreeStyleProject p2 = j.createFreeStyleProject(""pipeline3"");

        List<Map> resp = get(""/search?q=type:pipeline;organization:jenkins"", List.class);
        Project[] projects = {p1,p2};

        Assert.assertEquals(projects.length, resp.size());

        for(int i=0; i<projects.length; i++){
            Map p = resp.get(i);
            validatePipeline(projects[i], p);
        }
    }",False
6,getPipelineWithLastSuccessfulRun(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+validatePipeline(Job,Map) io.jenkins.blueocean.service.embedded.BaseTest+validatePipeline(Job,Map)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,417,10,1,,"@Test
    public void getPipelineWithLastSuccessfulRun() throws Exception {
        FreeStyleProject p = j.createFreeStyleProject(""pipeline4"");
        p.getBuildersList().add(new Shell(""echo hello!\nsleep 1""));
        FreeStyleBuild b = p.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b);
        Map resp = get(""/organizations/jenkins/pipelines/pipeline4/"");

        validatePipeline(p, resp);
    }",False
7,getPipelineRunTest(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,411,9,1,,"@Test
    public void getPipelineRunTest() throws Exception {
        FreeStyleProject p = j.createFreeStyleProject(""pipeline4"");
        p.getBuildersList().add(new Shell(""echo hello!\nsleep 1""));
        FreeStyleBuild b = p.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b);
        Map resp = get(""/organizations/jenkins/pipelines/pipeline4/runs/""+b.getId());
        validateRun(b,resp);
    }",False
8,getPipelineRunStopTest(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest.RequestBuilder+build(Class<T>) io.jenkins.blueocean.service.embedded.BaseTest.RequestBuilder+put(String) io.jenkins.blueocean.service.embedded.BaseTest+request() io.jenkins.blueocean.service.embedded.BaseTest+request() io.jenkins.blueocean.service.embedded.BaseTest.RequestBuilder+put(String) io.jenkins.blueocean.service.embedded.BaseTest.RequestBuilder+build(Class<T>) java.lang.String+equalsIgnoreCase(String) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.String+equalsIgnoreCase(String) java.lang.Thread+sleep(long) java.lang.Thread+sleep(long) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) io.jenkins.blueocean.service.embedded.BaseTest+put(String,Object) io.jenkins.blueocean.service.embedded.BaseTest+put(String,Object) java.lang.String+equalsIgnoreCase(String) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.String+equalsIgnoreCase(String) java.lang.Thread+sleep(long) java.lang.Thread+sleep(long) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,1582,42,1,,"@Test
    public void getPipelineRunStopTest() throws Exception {
        WorkflowJob job1 = j.jenkins.createProject(WorkflowJob.class, ""pipeline1"");

        job1.setDefinition(new CpsFlowDefinition("""" +
            ""node {"" +
            ""   stage ('Build1'); "" +
            ""   sh('sleep 60') "" +
            ""   stage ('Test1'); "" +
            ""   echo ('Testing'); "" +
            ""}""));

        WorkflowRun b1 = job1.scheduleBuild2(0).waitForStart();
        Map r=null;

        for (int i = 0; i < 10; i++) {
             r = request().put(""/organizations/jenkins/pipelines/pipeline1/runs/1/stop"")
                .build(Map.class);
             if(((String) r.get(""state"")).equalsIgnoreCase(""FINISHED""))
                continue;
            Thread.sleep(1000);
        }
        Assert.assertEquals(r.get(""state""), ""FINISHED"");
        Assert.assertEquals(r.get(""result""), ""ABORTED"");

        j.assertBuildStatus(Result.ABORTED, b1);

        FreeStyleProject p = j.createFreeStyleProject(""pipeline5"");
        p.getBuildersList().add(new Shell(""echo hello!\nsleep 69""));
        FreeStyleBuild b2 = p.scheduleBuild2(0).waitForStart();

        for (int i = 0; i < 10; i++) {
            r = put(""/organizations/jenkins/pipelines/pipeline5/runs/1/stop"",null);
            if(((String) r.get(""state"")).equalsIgnoreCase(""finished""))
                continue;
            Thread.sleep(1000);
        }
        Assert.assertEquals(r.get(""state""), ""FINISHED"");
        Assert.assertEquals(r.get(""result""), ""ABORTED"");
        j.assertBuildStatus(Result.ABORTED, b2);

    }",False
9,getPipelineRunLatestTest(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,626,17,1,,"@Test
    public void getPipelineRunLatestTest() throws Exception {
        FreeStyleProject p = j.createFreeStyleProject(""pipeline5"");
        p.getBuildersList().add(new Shell(""echo hello!\nsleep 1""));
        FreeStyleBuild b = p.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b);

        List<Map> resp = get(""/search?q=type:run;organization:jenkins;pipeline:pipeline5;latestOnly:true"", List.class);
        Run[] run = {b};

        Assert.assertEquals(run.length, resp.size());

        for(int i=0; i<run.length; i++){
            Map lr = resp.get(i);
            validateRun(run[i], lr);
        }
    }",False
10,getPipelineRunsTest(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,495,13,1,,"@Test
    public void getPipelineRunsTest() throws Exception {
        FreeStyleProject p = j.createFreeStyleProject(""pipeline6"");
        p.getBuildersList().add(new Shell(""echo hello!\nsleep 1""));
        FreeStyleBuild b = p.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b);

        List<Map> resp = get(""/organizations/jenkins/pipelines/pipeline6/runs"", List.class);
        Assert.assertEquals(1, resp.size());

        Map lr = resp.get(0);
        validateRun(b, lr);
    }",False
11,getPipelineJobsTest(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) io.jenkins.blueocean.service.embedded.BaseTest+validatePipeline(Job,Map) io.jenkins.blueocean.service.embedded.BaseTest+validatePipeline(Job,Map)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,555,16,1,,"@Test
    public void getPipelineJobsTest() throws IOException {
        WorkflowJob p1 = j.jenkins.createProject(WorkflowJob.class, ""pipeline1"");
        WorkflowJob p2 = j.jenkins.createProject(WorkflowJob.class, ""pipeline2"");

        List<Map> resp = get(""/organizations/jenkins/pipelines/"", List.class);

        WorkflowJob[] projects = {p1,p2};

        Assert.assertEquals(projects.length, resp.size());

        for(int i=0; i<projects.length; i++){
            Map lr = resp.get(i);
            validatePipeline(projects[i], lr);
        }
    }",False
12,getPipelineJobRunTest(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,608,18,1,,"@Test
    public void getPipelineJobRunTest() throws Exception {
        WorkflowJob job1 = j.jenkins.createProject(WorkflowJob.class, ""pipeline1"");

        job1.setDefinition(new CpsFlowDefinition("""" +
            ""node {"" +
            ""   stage ('Build1'); "" +
            ""   echo ('Building'); "" +
            ""   stage ('Test1'); "" +
            ""   echo ('Testing'); "" +
            ""}""));

        WorkflowRun b1 = job1.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b1);

        Map resp = get(""/organizations/jenkins/pipelines/pipeline1/runs/1"");
        validateRun(b1, resp);
    }",False
13,nodesTest(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+equals(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertNull(Object) org.junit.Assert+assertNull(Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertNull(Object) org.junit.Assert+assertNull(Object) java.util.Map+get(Object) java.util.Map+get(Object)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,5467,137,1,,"@Test
    public void nodesTest() throws Exception {
        WorkflowJob job1 = j.jenkins.createProject(WorkflowJob.class, ""pipeline1"");
        job1.setDefinition(new CpsFlowDefinition(""stage \""Build\""\n"" +
            ""    node {\n"" +
            ""       sh \""echo here\""\n"" +
            ""    }\n"" +
            ""\n"" +
            ""stage \""Test\""\n"" +
            ""    parallel (\n"" +
            ""        \""Firefox\"" : {\n"" +
            ""            node {\n"" +
            ""                sh \""echo ffox\""\n"" +
            ""            }\n"" +
            ""        },\n"" +
            ""        \""Chrome\"" : {\n"" +
            ""            node {\n"" +
            ""                sh \""echo chrome\""\n"" +
            ""            }\n"" +
            ""        }\n"" +
            ""    )\n"" +
            ""\n"" +
            ""stage \""CrashyMcgee\""\n"" +
            ""  parallel (\n"" +
            ""    \""SlowButSuccess\"" : {\n"" +
            ""        node {\n"" +
            ""            echo 'This is time well spent.'\n"" +
            ""        }\n"" +
            ""    },\n"" +
            ""    \""DelayThenFail\"" : {\n"" +
            ""        node {\n"" +
            ""            echo 'Not yet.'\n"" +
            ""        }\n"" +
            ""    },\n"" +
            ""  )\n"" +
            ""\n"" +
            ""\n"" +
            ""stage \""Deploy\""\n"" +
            ""    node {\n"" +
            ""        sh \""echo deploying\""\n"" +
            ""    }""));

        WorkflowRun b1 = job1.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b1);

        get(""/organizations/jenkins/pipelines/pipeline1/runs/1/nodes/"", List.class);

        job1.setDefinition(new CpsFlowDefinition(""stage \""Build\""\n"" +
            ""    node {\n"" +
            ""       sh \""echo here\""\n"" +
            ""    }\n"" +
            ""\n"" +
            ""stage \""Test\""\n"" +
            ""    parallel (\n"" +
            ""        \""Firefox\"" : {\n"" +
            ""            node {\n"" +
            ""                sh \""echo ffox\""\n"" +
            ""            }\n"" +
            ""        },\n"" +
            ""        \""Chrome\"" : {\n"" +
            ""            node {\n"" +
            ""                sh \""echo chrome\""\n"" +
            ""            }\n"" +
            ""        }\n"" +
            ""    )\n"" +
            ""\n"" +
            ""stage \""CrashyMcgee\""\n"" +
            ""  parallel (\n"" +
            ""    \""SlowButSuccess\"" : {\n"" +
            ""        node {\n"" +
            ""            echo 'This is time well spent.'\n"" +
            ""            sh 'sleep 3;'\n"" +
            ""        }\n"" +
            ""    },\n"" +
            ""    \""DelayThenFail\"" : {\n"" +
            ""        node {\n"" +
            ""            echo 'Fail soon.'\n"" +
            ""            echo 'KABOOM!'\n"" +
            ""            sh '11exit 1'\n"" +
            ""        }\n"" +
            ""    },\n"" +
            ""  )\n"" +
            ""\n"" +
            ""\n"" +
            ""stage \""Deploy\""\n"" +
            ""    node {\n"" +
            ""        sh \""echo deploying\""\n"" +
            ""    }""));



        WorkflowRun b2 = job1.scheduleBuild2(0).get();
        j.assertBuildStatus(Result.FAILURE,b2);

        List<Map> resp = get(""/organizations/jenkins/pipelines/pipeline1/runs/2/nodes/"", List.class);
        Assert.assertEquals(resp.size(), 8);
        for(int i=0; i< resp.size();i++){
            Map rn = resp.get(i);
            List<Map> edges = (List<Map>) rn.get(""edges"");

            if(rn.get(""displayName"").equals(""Test"")){
                Assert.assertEquals(2, edges.size());
                Assert.assertEquals(rn.get(""result""), ""SUCCESS"");
                Assert.assertEquals(rn.get(""state""), ""FINISHED"");
            }else if(rn.get(""displayName"").equals(""Firefox"")){
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(rn.get(""result""), ""SUCCESS"");
                Assert.assertEquals(rn.get(""state""), ""FINISHED"");
            }else if(rn.get(""displayName"").equals(""Chrome"")){
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(rn.get(""result""), ""SUCCESS"");
                Assert.assertEquals(rn.get(""state""), ""FINISHED"");
            }else if(rn.get(""displayName"").equals(""CrashyMcgee"")){
                Assert.assertEquals(2, edges.size());
                Assert.assertEquals(rn.get(""result""), ""FAILURE"");
                Assert.assertEquals(rn.get(""state""), ""FINISHED"");
            }else if(rn.get(""displayName"").equals(""SlowButSuccess"")){
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(rn.get(""result""), ""SUCCESS"");
                Assert.assertEquals(rn.get(""state""), ""FINISHED"");
            }else if(rn.get(""displayName"").equals(""DelayThenFail"")){
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(rn.get(""result""), ""FAILURE"");
                Assert.assertEquals(rn.get(""state""), ""FINISHED"");
            }else if(rn.get(""displayName"").equals(""build"")){
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(rn.get(""result""), ""SUCCESS"");
                Assert.assertEquals(rn.get(""state""), ""FINISHED"");
            }else if(rn.get(""displayName"").equals(""Deploy"")){
                Assert.assertEquals(0, edges.size());
                Assert.assertNull(rn.get(""result""));
                Assert.assertNull(rn.get(""state""));
            }

        }

    }",True
14,getPipelineJobRunNodesTest(),Method,,,"java.lang.Object+Object() io.jenkins.blueocean.service.embedded.PipelineApiTest+getStages(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getStages(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getParallelNodes(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getParallelNodes(FlowGraphTable) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) io.jenkins.blueocean.service.embedded.BaseTest+getNodeName(FlowNode) io.jenkins.blueocean.service.embedded.BaseTest+getNodeName(FlowNode) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,2878,74,1,,"@Test
    public void getPipelineJobRunNodesTest() throws Exception {
        WorkflowJob job1 = j.jenkins.createProject(WorkflowJob.class, ""pipeline1"");


        job1.setDefinition(new CpsFlowDefinition(""stage 'build'\n"" +
            ""node{\n"" +
            ""  echo \""Building...\""\n"" +
            ""}\n"" +
            ""\n"" +
            ""stage 'test'\n"" +
            ""parallel 'unit':{\n"" +
            ""  node{\n"" +
            ""    echo \""Unit testing...\""\n"" +
            ""  }\n"" +
            ""},'integration':{\n"" +
            ""  node{\n"" +
            ""    echo \""Integration testing...\""\n"" +
            ""  }\n"" +
            ""}, 'ui':{\n"" +
            ""  node{\n"" +
            ""    echo \""UI testing...\""\n"" +
            ""  }\n"" +
            ""}\n"" +
            ""\n"" +
            ""stage 'deploy'\n"" +
            ""node{\n"" +
            ""  echo \""Deploying\""\n"" +
            ""}"" +
            ""\n"" +
            ""stage 'deployToProd'\n"" +
            ""node{\n"" +
            ""  echo \""Deploying to production\""\n"" +
            ""}""
        ));
        WorkflowRun b1 = job1.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b1);

        FlowGraphTable nodeGraphTable = new FlowGraphTable(b1.getExecution());
        nodeGraphTable.build();
        List<FlowNode> nodes = getStages(nodeGraphTable);
        List<FlowNode> parallelNodes = getParallelNodes(nodeGraphTable);

        Assert.assertEquals(7, nodes.size());
        Assert.assertEquals(3, parallelNodes.size());

        List<Map> resp = get(""/organizations/jenkins/pipelines/pipeline1/runs/1/nodes/"", List.class);

        Assert.assertEquals(nodes.size(), resp.size());
        for(int i=0; i< nodes.size();i++){
            FlowNode n = nodes.get(i);
            Map rn = resp.get(i);
            Assert.assertEquals(n.getId(), rn.get(""id""));
            Assert.assertEquals(getNodeName(n), rn.get(""displayName""));
            Assert.assertEquals(""SUCCESS"", rn.get(""result""));
            List<Map> edges = (List<Map>) rn.get(""edges"");


            if(n.getDisplayName().equals(""test"")){
                Assert.assertEquals(parallelNodes.size(), edges.size());
                Assert.assertEquals(edges.get(i).get(""id""), parallelNodes.get(i).getId());
            }else if(n.getDisplayName().equals(""build"")){
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(edges.get(i).get(""id""), nodes.get(i+1).getId());
            }else if(n.getDisplayName().equals(""deploy"")){
                Assert.assertEquals(1, edges.size());
            }else if(n.getDisplayName().equals(""deployToProd"")){
                Assert.assertEquals(0, edges.size());
            }else{
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(edges.get(0).get(""id""), nodes.get(nodes.size() - 2).getId());
            }
        }
    }",True
15,getPipelineJobRunNodesTestWithFuture(),Method,,,"java.lang.Object+Object() io.jenkins.blueocean.service.embedded.PipelineApiTest+getStages(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getStages(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getParallelNodes(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getParallelNodes(FlowGraphTable) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) io.jenkins.blueocean.service.embedded.BaseTest+getNodeName(FlowNode) io.jenkins.blueocean.service.embedded.BaseTest+getNodeName(FlowNode) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) java.lang.String+format(String,Object[]) java.lang.String+format(String,Object[]) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) io.jenkins.blueocean.service.embedded.BaseTest+getNodeName(FlowNode) io.jenkins.blueocean.service.embedded.BaseTest+getNodeName(FlowNode) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) io.jenkins.blueocean.service.embedded.rest.PipelineNodeUtil+getDisplayName(FlowNode) io.jenkins.blueocean.service.embedded.rest.PipelineNodeUtil+getDisplayName(FlowNode) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertNull(Object) org.junit.Assert+assertNull(Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertNull(Object) org.junit.Assert+assertNull(Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertNull(Object) org.junit.Assert+assertNull(Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertNull(Object) org.junit.Assert+assertNull(Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertNull(Object) org.junit.Assert+assertNull(Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertNull(Object) org.junit.Assert+assertNull(Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,6805,154,1,,"@Test
    public void getPipelineJobRunNodesTestWithFuture() throws Exception {
        WorkflowJob job1 = j.jenkins.createProject(WorkflowJob.class, ""pipeline1"");


        job1.setDefinition(new CpsFlowDefinition(""stage 'build'\n"" +
            ""node{\n"" +
            ""  echo \""Building...\""\n"" +
            ""}\n"" +
            ""\n"" +
            ""stage 'test'\n"" +
            ""parallel 'unit':{\n"" +
            ""  node{\n"" +
            ""    echo \""Unit testing...\""\n"" +
            ""  }\n"" +
            ""},'integration':{\n"" +
            ""  node{\n"" +
            ""    echo \""Integration testing...\""\n"" +
            ""  }\n"" +
            ""}, 'ui':{\n"" +
            ""  node{\n"" +
            ""    echo \""UI testing...\""\n"" +
            ""  }\n"" +
            ""}\n"" +
            ""\n"" +
            ""stage 'deploy'\n"" +
            ""node{\n"" +
            ""  echo \""Deploying\""\n"" +
            ""}"" +
            ""\n"" +
            ""stage 'deployToProd'\n"" +
            ""node{\n"" +
            ""  echo \""Deploying to production\""\n"" +
            ""}""
        ));
        WorkflowRun b1 = job1.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b1);

        FlowGraphTable nodeGraphTable = new FlowGraphTable(b1.getExecution());
        nodeGraphTable.build();
        List<FlowNode> nodes = getStages(nodeGraphTable);
        List<FlowNode> parallelNodes = getParallelNodes(nodeGraphTable);

        Assert.assertEquals(7, nodes.size());
        Assert.assertEquals(3, parallelNodes.size());

        List<Map> resp = get(""/organizations/jenkins/pipelines/pipeline1/runs/1/nodes/"", List.class);

        Assert.assertEquals(nodes.size(), resp.size());
        for(int i=0; i< nodes.size();i++){
            FlowNode n = nodes.get(i);
            Map rn = resp.get(i);
            Assert.assertEquals(n.getId(), rn.get(""id""));
            Assert.assertEquals(getNodeName(n), rn.get(""displayName""));
            Assert.assertEquals(""SUCCESS"", rn.get(""result""));
            List<Map> edges = (List<Map>) rn.get(""edges"");

            if(n.getDisplayName().equals(""test"")){
                Assert.assertEquals(parallelNodes.size(), edges.size());
                Assert.assertEquals(edges.get(i).get(""id""), parallelNodes.get(i).getId());
            }else if(n.getDisplayName().equals(""build"")){
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(edges.get(i).get(""id""), nodes.get(i+1).getId());
            }else if(n.getDisplayName().equals(""deploy"")){
                Assert.assertEquals(1, edges.size());
            }else if(n.getDisplayName().equals(""deployToProd"")){
                Assert.assertEquals(0, edges.size());
            }else{
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(edges.get(0).get(""id""), nodes.get(nodes.size() - 2).getId());
            }
        }

        job1.setDefinition(new CpsFlowDefinition(""stage 'build'\n"" +
            ""node{\n"" +
            ""  echo \""Building...\""\n"" +
            ""}\n"" +
            ""\n"" +
            ""stage 'test'\n"" +
            ""parallel 'unit':{\n"" +
            ""  node{\n"" +
            ""    echo \""Unit testing...\""\n"" +
            ""    sh \""`fail-the-build`\""\n"" + //fail the build intentionally
            ""  }\n"" +
            ""},'integration':{\n"" +
            ""  node{\n"" +
            ""    echo \""Integration testing...\""\n"" +
            ""  }\n"" +
            ""}, 'ui':{\n"" +
            ""  node{\n"" +
            ""    echo \""UI testing...\""\n"" +
            ""  }\n"" +
            ""}\n"" +
            ""\n"" +
            ""stage 'deploy'\n"" +
            ""node{\n"" +
            ""  echo \""Deploying\""\n"" +
            ""}"" +
            ""\n"" +
            ""stage 'deployToProd'\n"" +
            ""node{\n"" +
            ""  echo \""Deploying to production\""\n"" +
            ""}""
        ));
        b1 = job1.scheduleBuild2(0).get();
        j.assertBuildStatus(Result.FAILURE,b1);
        resp = get(String.format(""/organizations/jenkins/pipelines/pipeline1/runs/%s/nodes/"",b1.getId()), List.class);
        Assert.assertEquals(nodes.size(), resp.size());
        for(int i=0; i< nodes.size();i++){
            FlowNode n = nodes.get(i);
            Map rn = resp.get(i);
            Assert.assertEquals(n.getId(), rn.get(""id""));
            Assert.assertEquals(getNodeName(n), rn.get(""displayName""));
            List<Map> edges = (List<Map>) rn.get(""edges"");
            if(n.getDisplayName().equals(""build"")){
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(edges.get(i).get(""id""), nodes.get(i+1).getId());
                Assert.assertEquals(""SUCCESS"", rn.get(""result""));
                Assert.assertEquals(""FINISHED"", rn.get(""state""));
            }else if (n.getDisplayName().equals(""test"")){
                Assert.assertEquals(parallelNodes.size(), edges.size());
                Assert.assertEquals(edges.get(i).get(""id""), parallelNodes.get(i).getId());
                Assert.assertEquals(""FAILURE"", rn.get(""result""));
                Assert.assertEquals(""FINISHED"", rn.get(""state""));
            }else if(PipelineNodeUtil.getDisplayName(n).equals(""unit"")){
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(edges.get(0).get(""id""), nodes.get(nodes.size() - 2).getId());
                Assert.assertEquals(edges.get(0).get(""durationInMillis""), -1);
                Assert.assertEquals(""FAILURE"", rn.get(""result""));
                Assert.assertEquals(""FINISHED"", rn.get(""state""));
            }else if(n.getDisplayName().equals(""deploy"")){
                Assert.assertEquals(1, edges.size());
                Assert.assertNull(rn.get(""result""));
                Assert.assertNull(rn.get(""state""));
                Assert.assertNull(rn.get(""startTime""));
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(edges.get(0).get(""id""), nodes.get(nodes.size() - 1).getId());
                Assert.assertEquals(edges.get(0).get(""durationInMillis""), -1);
            }else if(n.getDisplayName().equals(""deployToProd"")){
                Assert.assertEquals(0, edges.size());
                Assert.assertNull(rn.get(""result""));
                Assert.assertNull(rn.get(""state""));
                Assert.assertNull(rn.get(""startTime""));
                Assert.assertEquals(0, edges.size());
            }else{
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(edges.get(0).get(""id""), nodes.get(nodes.size() - 2).getId());
                Assert.assertEquals(edges.get(0).get(""durationInMillis""), -1);
                Assert.assertEquals(""SUCCESS"", rn.get(""result""));
                Assert.assertEquals(""FINISHED"", rn.get(""state""));
            }
        }

    }",True
16,getPipelineJobRunNodesWithFailureTest(),Method,,,"java.lang.Object+Object() io.jenkins.blueocean.service.embedded.PipelineApiTest+getStages(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getStages(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getParallelNodes(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getParallelNodes(FlowGraphTable) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) io.jenkins.blueocean.service.embedded.BaseTest+getNodeName(FlowNode) io.jenkins.blueocean.service.embedded.BaseTest+getNodeName(FlowNode) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,2814,71,1,,"@Test
    public void getPipelineJobRunNodesWithFailureTest() throws Exception {
        WorkflowJob job1 = j.jenkins.createProject(WorkflowJob.class, ""pipeline1"");


        job1.setDefinition(new CpsFlowDefinition(""stage 'build'\n"" +
            ""node{\n"" +
            ""  echo \""Building...\""\n"" +
            ""}\n"" +
            ""\n"" +
            ""stage 'test'\n"" +
            ""parallel 'unit':{\n"" +
            ""  node{\n"" +
            ""    echo \""Unit testing...\""\n"" +
            ""    sh \""`fail-the-build`\""\n"" + //fail the build intentionally
            ""  }\n"" +
            ""},'integration':{\n"" +
            ""  node{\n"" +
            ""    echo \""Integration testing...\""\n"" +
            ""  }\n"" +
            ""}, 'ui':{\n"" +
            ""  node{\n"" +
            ""    echo \""UI testing...\""\n"" +
            ""  }\n"" +
            ""}\n"" +
            ""\n"" +
            ""stage 'deploy'\n"" +
            ""node{\n"" +
            ""  echo \""Deploying\""\n"" +
            ""}""
        ));
        WorkflowRun b1 = job1.scheduleBuild2(0).get();
        j.assertBuildStatus(Result.FAILURE, b1);

        FlowGraphTable nodeGraphTable = new FlowGraphTable(b1.getExecution());
        nodeGraphTable.build();
        List<FlowNode> nodes = getStages(nodeGraphTable);
        List<FlowNode> parallelNodes = getParallelNodes(nodeGraphTable);

        Assert.assertEquals(5, nodes.size());
        Assert.assertEquals(3, parallelNodes.size());

        List<Map> resp = get(""/organizations/jenkins/pipelines/pipeline1/runs/1/nodes/"", List.class);

        Assert.assertEquals(nodes.size(), resp.size());
        for(int i=0; i< nodes.size();i++){
            FlowNode n = nodes.get(i);
            Map rn = resp.get(i);
            Assert.assertEquals(n.getId(), rn.get(""id""));
            Assert.assertEquals(getNodeName(n), rn.get(""displayName""));

            List<Map> edges = (List<Map>) rn.get(""edges"");


            if(n.getDisplayName().equals(""test"")){
                Assert.assertEquals(parallelNodes.size(), edges.size());
                Assert.assertEquals(edges.get(i).get(""id""), parallelNodes.get(i).getId());
                Assert.assertEquals(""FAILURE"", rn.get(""result""));
            }else if(n.getDisplayName().equals(""build"")){
                Assert.assertEquals(1, edges.size());
                Assert.assertEquals(edges.get(i).get(""id""), nodes.get(i+1).getId());
                Assert.assertEquals(""SUCCESS"", rn.get(""result""));
            }else if(n.getDisplayName().equals(""Branch: unit"")){
                Assert.assertEquals(0, edges.size());
                Assert.assertEquals(""FAILURE"", rn.get(""result""));
            }else{
                Assert.assertEquals(0, edges.size());
                Assert.assertEquals(""SUCCESS"", rn.get(""result""));
            }
        }
    }",True
17,getPipelineJobRunNodeTest(),Method,,,"java.lang.Object+Object() io.jenkins.blueocean.service.embedded.PipelineApiTest+getStages(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getStages(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getParallelNodes(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getParallelNodes(FlowGraphTable) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+get(String) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) io.jenkins.blueocean.service.embedded.BaseTest+getNodeName(FlowNode) io.jenkins.blueocean.service.embedded.BaseTest+getNodeName(FlowNode) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+get(String) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) io.jenkins.blueocean.service.embedded.BaseTest+getNodeName(FlowNode) io.jenkins.blueocean.service.embedded.BaseTest+getNodeName(FlowNode) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.Map+get(Object) java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,2620,70,1,,"@Test
    public void getPipelineJobRunNodeTest() throws Exception {
        WorkflowJob job1 = j.jenkins.createProject(WorkflowJob.class, ""pipeline1"");


        job1.setDefinition(new CpsFlowDefinition(""stage 'build'\n"" +
            ""node{\n"" +
            ""  echo \""Building...\""\n"" +
            ""}\n"" +
            ""\n"" +
            ""stage 'test'\n"" +
            ""parallel 'unit':{\n"" +
            ""  node{\n"" +
            ""    echo \""Unit testing...\""\n"" +
            ""  }\n"" +
            ""},'integration':{\n"" +
            ""  node{\n"" +
            ""    echo \""Integration testing...\""\n"" +
            ""  }\n"" +
            ""}, 'ui':{\n"" +
            ""  node{\n"" +
            ""    echo \""UI testing...\""\n"" +
            ""  }\n"" +
            ""}\n"" +
            ""\n"" +
            ""stage 'deploy'\n"" +
            ""node{\n"" +
            ""  echo \""Deploying\""\n"" +
            ""}""));

        WorkflowRun b1 = job1.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b1);
        FlowGraphTable nodeGraphTable = new FlowGraphTable(b1.getExecution());
        nodeGraphTable.build();
        List<FlowNode> nodes = getStages(nodeGraphTable);
        List<FlowNode> parallelNodes = getParallelNodes(nodeGraphTable);

        Assert.assertEquals(6, nodes.size());
        Assert.assertEquals(3, parallelNodes.size());

        // get all nodes for pipeline1
        List<Map> resp = get(""/organizations/jenkins/pipelines/pipeline1/runs/1/nodes/"", List.class);
        Assert.assertEquals(nodes.size(), resp.size());

        //Get a node detail
        FlowNode n = nodes.get(0);

        Map node = get(""/organizations/jenkins/pipelines/pipeline1/runs/1/nodes/""+n.getId());

        List<Map> edges = (List<Map>) node.get(""edges"");

        Assert.assertEquals(n.getId(), node.get(""id""));
        Assert.assertEquals(getNodeName(n), node.get(""displayName""));
        Assert.assertEquals(""SUCCESS"", node.get(""result""));
        Assert.assertEquals(1, edges.size());
        Assert.assertEquals(nodes.get(1).getId(), edges.get(0).get(""id""));


        //Get a parllel node detail
        node = get(""/organizations/jenkins/pipelines/pipeline1/runs/1/nodes/""+parallelNodes.get(0).getId());

        n = parallelNodes.get(0);
        edges = (List<Map>) node.get(""edges"");

        Assert.assertEquals(n.getId(), node.get(""id""));
        Assert.assertEquals(getNodeName(n), node.get(""displayName""));
        Assert.assertEquals(""SUCCESS"", node.get(""result""));
        Assert.assertEquals(1, edges.size());
        Assert.assertEquals(nodes.get(nodes.size()-1).getId(), edges.get(0).get(""id""));
    }",True
18,getPipelineJobAbortTest(),Method,,,"java.lang.Thread+sleep(long) java.lang.Thread+sleep(long) io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+get(String) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,804,26,1,,"@Test
    public void getPipelineJobAbortTest() throws Exception {
        WorkflowJob job1 = j.jenkins.createProject(WorkflowJob.class, ""pipeline1"");

        job1.setDefinition(new CpsFlowDefinition("""" +
            ""node {"" +
            ""   stage ('Build1'); "" +
            ""   sh('sleep 60') "" +
            ""   stage ('Test1'); "" +
            ""   echo ('Testing'); "" +
            ""}""));

        WorkflowRun b1 = job1.scheduleBuild2(0).waitForStart();
        for (int i = 0; i < 10; i++) {
            b1.doStop();
            if (b1.getResult() != null) {
                break;
            }
            Thread.sleep(1000);
        }
        j.assertBuildStatus(Result.ABORTED, b1);

        Map r = get(""/organizations/jenkins/pipelines/pipeline1/runs/1"");

        validateRun(b1, r);
    }",False
19,getPipelineJobRunNodeLogTest(),Method,,,"java.lang.Object+Object() io.jenkins.blueocean.service.embedded.PipelineApiTest+getStages(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getStages(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getParallelNodes(FlowGraphTable) io.jenkins.blueocean.service.embedded.PipelineApiTest+getParallelNodes(FlowGraphTable) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertNotNull(Object) org.junit.Assert+assertNotNull(Object) java.io.PrintStream+println(String) java.io.PrintStream+println(String) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertNotNull(Object) org.junit.Assert+assertNotNull(Object) java.io.PrintStream+println(String) java.io.PrintStream+println(String) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertNotNull(Object) org.junit.Assert+assertNotNull(Object) java.io.PrintStream+println(String) java.io.PrintStream+println(String)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j java.lang.System+out java.lang.System+out java.lang.System+out,1932,53,1,,"@Test
    public void getPipelineJobRunNodeLogTest() throws Exception {
        WorkflowJob job1 = j.jenkins.createProject(WorkflowJob.class, ""pipeline1"");


        job1.setDefinition(new CpsFlowDefinition(""stage 'build'\n"" +
            ""node{\n"" +
            ""  echo \""Building...\""\n"" +
            ""}\n"" +
            ""\n"" +
            ""stage 'test'\n"" +
            ""parallel 'unit':{\n"" +
            ""  node{\n"" +
            ""    echo \""Unit testing...\""\n"" +
            ""  }\n"" +
            ""},'integration':{\n"" +
            ""  node{\n"" +
            ""    echo \""Integration testing...\""\n"" +
            ""  }\n"" +
            ""}, 'ui':{\n"" +
            ""  node{\n"" +
            ""    echo \""UI testing...\""\n"" +
            ""  }\n"" +
            ""}\n"" +
            ""\n"" +
            ""stage 'deploy'\n"" +
            ""node{\n"" +
            ""  echo \""Deploying\""\n"" +
            ""}""));

        WorkflowRun b1 = job1.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b1);
        FlowGraphTable nodeGraphTable = new FlowGraphTable(b1.getExecution());
        nodeGraphTable.build();
        List<FlowNode> nodes = getStages(nodeGraphTable);
        List<FlowNode> parallelNodes = getParallelNodes(nodeGraphTable);

        Assert.assertEquals(6, nodes.size());
        Assert.assertEquals(3, parallelNodes.size());

        String output = get(""/organizations/jenkins/pipelines/pipeline1/runs/1/log"", String.class);
        Assert.assertNotNull(output);
        System.out.println(output);

        output = get(""/organizations/jenkins/pipelines/pipeline1/runs/1/nodes/""+nodes.get(0).getId()+""/log"", String.class);
        Assert.assertNotNull(output);
        System.out.println(output);

        output = get(""/organizations/jenkins/pipelines/pipeline1/runs/1/nodes/""+parallelNodes.get(0).getId()+""/log"", String.class);
        Assert.assertNotNull(output);
        System.out.println(output);

    }",True
20,getPipelineJobRunsTest(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map) java.util.List+get(int) java.util.List+get(int)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,840,26,1,,"@Test
    public void getPipelineJobRunsTest() throws Exception {
        WorkflowJob job1 = j.jenkins.createProject(WorkflowJob.class, ""pipeline1"");

        job1.setDefinition(new CpsFlowDefinition("""" +
            ""node {"" +
            ""   stage ('Build1'); "" +
            ""   echo ('Building'); "" +
            ""   stage ('Test1'); "" +
            ""   echo ('Testing'); "" +
            ""}""));

        WorkflowRun b1 = job1.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b1);

        WorkflowRun b2 = job1.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b2);

        Run[] runs = {b2,b1};

        List<Map> runResponses = get(""/organizations/jenkins/pipelines/pipeline1/runs"", List.class);

        for(int i=0; i < runs.length; i++){
            validateRun(runs[i], runResponses.get(i));
        };
    }",False
21,getPipelineJobRunsLogTest(),Method,,,"io.jenkins.blueocean.service.embedded.BaseTest+get(String,int,String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,int,String,Class<T>) java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String) java.io.PrintStream+println(char[]) java.io.PrintStream+println(char[]) org.junit.Assert+assertTrue(boolean) org.junit.Assert+assertTrue(boolean)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j java.lang.System+out,833,20,1,,"@Test
    public void getPipelineJobRunsLogTest() throws Exception {
        WorkflowJob job1 = j.jenkins.createProject(WorkflowJob.class, ""pipeline1"");
        job1.setDefinition(new CpsFlowDefinition("""" +
            ""node {"" +
            ""   stage ('Build1'); "" +
            ""   echo ('Building'); "" +
            ""   stage ('Test1'); "" +
            ""   echo ('Testing'); "" +
            ""}""));

        WorkflowRun b1 = job1.scheduleBuild2(0).get();
        j.assertBuildStatusSuccess(b1);

        HttpResponse<String> response = get(""/organizations/jenkins/pipelines/pipeline1/runs/""+b1.getId()+""/log?start=0"", 200,""plain/text"",HttpResponse.class);

        int size = Integer.parseInt(response.getHeaders().getFirst(""X-Text-Size""));
        System.out.println(response.getBody());
        Assert.assertTrue(size > 0);
    }",False
22,findPipelineRunsForAPipelineTest(),Method,,,"java.util.Stack+Stack() io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertEquals(Object,Object) org.junit.Assert+assertEquals(Object,Object) java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,1001,24,1,,"@Test
    public void findPipelineRunsForAPipelineTest() throws Exception {
        FreeStyleProject p1 = j.createFreeStyleProject(""pipeline1"");
        FreeStyleProject p2 = j.createFreeStyleProject(""pipeline2"");
        p1.getBuildersList().add(new Shell(""echo hello!\nsleep 1""));
        p2.getBuildersList().add(new Shell(""echo hello!\nsleep 1""));
        Stack<FreeStyleBuild> builds = new Stack<FreeStyleBuild>();
        FreeStyleBuild b11 = p1.scheduleBuild2(0).get();
        FreeStyleBuild b12 = p1.scheduleBuild2(0).get();
        builds.push(b11);
        builds.push(b12);

        j.assertBuildStatusSuccess(b11);
        j.assertBuildStatusSuccess(b12);

        List<Map> resp = get(""/search?q=type:run;organization:jenkins;pipeline:pipeline1"", List.class);

        Assert.assertEquals(builds.size(), resp.size());
        for(int i=0; i< builds.size(); i++){
            Map p = resp.get(i);
            FreeStyleBuild b = builds.pop();
            validateRun(b, p);
        }
    }",False
23,findPipelineRunsForAllPipelineTest(),Method,,,"java.util.Stack+Stack() java.util.Stack+Stack() com.google.common.collect.ImmutableMap+of(K,V,K,V) com.google.common.collect.ImmutableMap+of(K,V,K,V) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) io.jenkins.blueocean.service.embedded.BaseTest+get(String,Class<T>) org.junit.Assert+assertEquals(long,long) org.junit.Assert+assertEquals(long,long) java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) java.util.Map+get(Object) java.util.Map+get(Object) org.junit.Assert+assertNotNull(Object) org.junit.Assert+assertNotNull(Object) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map) io.jenkins.blueocean.service.embedded.BaseTest+validateRun(Run,Map)",io.jenkins.blueocean.service.embedded.BaseTest+j io.jenkins.blueocean.service.embedded.BaseTest+j,1238,26,1,,"@Test
    public void findPipelineRunsForAllPipelineTest() throws IOException, ExecutionException, InterruptedException {
        FreeStyleProject p1 = j.createFreeStyleProject(""pipeline11"");
        FreeStyleProject p2 = j.createFreeStyleProject(""pipeline22"");
        p1.getBuildersList().add(new Shell(""echo hello!\nsleep 1""));
        p2.getBuildersList().add(new Shell(""echo hello!\nsleep 1""));
        Stack<FreeStyleBuild> p1builds = new Stack<FreeStyleBuild>();
        p1builds.push(p1.scheduleBuild2(0).get());
        p1builds.push(p1.scheduleBuild2(0).get());

        Stack<FreeStyleBuild> p2builds = new Stack<FreeStyleBuild>();
        p2builds.push(p2.scheduleBuild2(0).get());
        p2builds.push(p2.scheduleBuild2(0).get());

        Map<String, Stack<FreeStyleBuild>> buildMap = ImmutableMap.of(p1.getName(), p1builds, p2.getName(), p2builds);

        List<Map> resp = get(""/search?q=type:run;organization:jenkins"", List.class);

        Assert.assertEquals(4, resp.size());
        for(int i=0; i< 4; i++){
            Map p = resp.get(i);
            String pipeline = (String) p.get(""pipeline"");
            Assert.assertNotNull(pipeline);
            validateRun(buildMap.get(pipeline).pop(), p);
        }
    }",False
24,getStages(FlowGraphTable),Method,getPipelineJobRunNodesTest() getPipelineJobRunNodesTestWithFuture() getPipelineJobRunNodesWithFailureTest() getPipelineJobRunNodeTest() getPipelineJobRunNodeLogTest(),,io.jenkins.blueocean.service.embedded.rest.PipelineNodeUtil+isStage(FlowNode) io.jenkins.blueocean.service.embedded.rest.PipelineNodeUtil+isStage(FlowNode) io.jenkins.blueocean.service.embedded.rest.PipelineNodeUtil+isParallelBranch(FlowNode) io.jenkins.blueocean.service.embedded.rest.PipelineNodeUtil+isParallelBranch(FlowNode),,396,10,2,,"private List<FlowNode> getStages(FlowGraphTable nodeGraphTable){
        List<FlowNode> nodes = new ArrayList<>();
        for(FlowGraphTable.Row row: nodeGraphTable.getRows()){
            if(PipelineNodeUtil.isStage(row.getNode()) ||
                PipelineNodeUtil.isParallelBranch(row.getNode())){
                nodes.add(row.getNode());
            }
        }
        return nodes;
    }",True
25,getParallelNodes(FlowGraphTable),Method,getPipelineJobRunNodesTest() getPipelineJobRunNodesTestWithFuture() getPipelineJobRunNodesWithFailureTest() getPipelineJobRunNodeTest() getPipelineJobRunNodeLogTest(),,io.jenkins.blueocean.service.embedded.rest.PipelineNodeUtil+isParallelBranch(FlowNode) io.jenkins.blueocean.service.embedded.rest.PipelineNodeUtil+isParallelBranch(FlowNode),,369,10,2,,"private List<FlowNode> getParallelNodes(FlowGraphTable nodeGraphTable){
        List<FlowNode> parallelNodes = new ArrayList<>();

        for(FlowGraphTable.Row row: nodeGraphTable.getRows()){
            if(PipelineNodeUtil.isParallelBranch(row.getNode())){
                parallelNodes.add(row.getNode());
            }
        }
        return parallelNodes;
    }",True
26,testArtifactsRunApi(),Method,,,"+perform(AbstractBuild,Launcher,BuildListener)",io.jenkins.blueocean.service.embedded.BaseTest+j,1255,29,1,,"@Test
    public void testArtifactsRunApi() throws Exception {
        FreeStyleProject p = j.createFreeStyleProject(""pipeline1"");
        p.getBuildersList().add(new TestBuilder() {
            @Override public boolean perform(AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {
                FilePath ws = build.getWorkspace();
                if (ws == null) {
                    return false;
                }
                FilePath dir = ws.child(""dir"");
                dir.mkdirs();
                dir.child(""fizz"").write(""contents"", null);
                dir.child(""lodge"").symlinkTo(""fizz"", listener);
                return true;
            }
        });
        ArtifactArchiver aa = new ArtifactArchiver(""dir/fizz"");
        aa.setAllowEmptyArchive(true);
        p.getPublishersList().add(aa);
        FreeStyleBuild b = j.assertBuildStatusSuccess(p.scheduleBuild2(0));


        Map run = get(""/organizations/jenkins/pipelines/pipeline1/runs/""+b.getId());

        validateRun(b, run);
        List<Map> artifacts = (List<Map>) run.get(""artifacts"");
        Assert.assertEquals(1, artifacts.size());
        Assert.assertEquals(""fizz"", artifacts.get(0).get(""name""));
    }",False
