index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,HOSTNAME,Field,,,,,60,1,26,,"private static final String HOSTNAME = ""foo.googleapis.com"";",False
2,PORT,Field,,,,,37,1,26,,private static final int PORT = 8080;,False
3,NODE,Field,,,,,59,1,26,,private static final Node NODE = Node.getDefaultInstance();,False
4,RPC_RETRY_TASK_FILTER,Field,,,,,289,7,26,,"private static final FakeClock.TaskFilter RPC_RETRY_TASK_FILTER =
      new FakeClock.TaskFilter() {
        @Override
        public boolean shouldAccept(Runnable command) {
          return command.toString().contains(XdsClientImpl.RpcRetryTask.class.getSimpleName());
        }
      };",False
5,cleanupRule,Field,,,,,73,2,17,,"@Rule
  public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();",False
6,syncContext,Field,,,,,264,7,18,,"private final SynchronizationContext syncContext = new SynchronizationContext(
      new Thread.UncaughtExceptionHandler() {
        @Override
        public void uncaughtException(Thread t, Throwable e) {
          throw new AssertionError(e);
        }
      });",False
7,fakeClock,Field,,,,,52,1,18,,private final FakeClock fakeClock = new FakeClock();,False
8,responseObservers,Field,,,,,94,1,18,,private final Queue<StreamObserver<DiscoveryResponse>> responseObservers = new ArrayDeque<>();,False
9,requestObservers,Field,,,,,92,1,18,,private final Queue<StreamObserver<DiscoveryRequest>> requestObservers = new ArrayDeque<>();,False
10,callEnded,Field,,,,,64,1,18,,private final AtomicBoolean callEnded = new AtomicBoolean(true);,False
11,mockedDiscoveryService,Field,,,,,74,2,2,,"@Mock
  private AggregatedDiscoveryServiceImplBase mockedDiscoveryService;",False
12,backoffPolicyProvider,Field,,,,,61,2,2,,"@Mock
  private BackoffPolicy.Provider backoffPolicyProvider;",False
13,backoffPolicy1,Field,,,,,45,2,2,,"@Mock
  private BackoffPolicy backoffPolicy1;",False
14,backoffPolicy2,Field,,,,,45,2,2,,"@Mock
  private BackoffPolicy backoffPolicy2;",False
15,configWatcher,Field,,,,,44,2,2,,"@Mock
  private ConfigWatcher configWatcher;",False
16,clusterWatcher,Field,,,,,46,2,2,,"@Mock
  private ClusterWatcher clusterWatcher;",False
17,endpointWatcher,Field,,,,,48,2,2,,"@Mock
  private EndpointWatcher endpointWatcher;",False
18,channel,Field,,,,,31,1,2,,private ManagedChannel channel;,False
19,xdsClient,Field,,,,,32,1,2,,private XdsClientImpl xdsClient;,False
20,setUp(),Method,,,io.grpc.internal.BackoffPolicy.Provider+get() io.grpc.internal.BackoffPolicy.Provider+get() io.grpc.internal.BackoffPolicy+nextBackoffNanos() io.grpc.internal.BackoffPolicy+nextBackoffNanos() io.grpc.internal.BackoffPolicy+nextBackoffNanos() io.grpc.internal.BackoffPolicy+nextBackoffNanos() io.grpc.inprocess.InProcessServerBuilder+generateName() io.grpc.inprocess.InProcessServerBuilder+generateName() +() +streamAggregatedResources(StreamObserver<DiscoveryResponse>),io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+backoffPolicy2 io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+backoffPolicy2,2642,61,1,,"@Before
  public void setUp() throws IOException {
    MockitoAnnotations.initMocks(this);
    when(backoffPolicyProvider.get()).thenReturn(backoffPolicy1, backoffPolicy2);
    when(backoffPolicy1.nextBackoffNanos()).thenReturn(10L, 100L);
    when(backoffPolicy2.nextBackoffNanos()).thenReturn(20L, 200L);

    final String serverName = InProcessServerBuilder.generateName();
    AggregatedDiscoveryServiceImplBase serviceImpl = new AggregatedDiscoveryServiceImplBase() {
      @Override
      public StreamObserver<DiscoveryRequest> streamAggregatedResources(
          final StreamObserver<DiscoveryResponse> responseObserver) {
        assertThat(callEnded.get()).isTrue();  // ensure previous call was ended
        callEnded.set(false);
        Context.current().addListener(
            new CancellationListener() {
              @Override
              public void cancelled(Context context) {
                callEnded.set(true);
              }
            }, MoreExecutors.directExecutor());
        responseObservers.offer(responseObserver);
        @SuppressWarnings(""unchecked"")
        StreamObserver<DiscoveryRequest> requestObserver = mock(StreamObserver.class);
        requestObservers.offer(requestObserver);
        return requestObserver;
      }
    };
    mockedDiscoveryService =
        mock(AggregatedDiscoveryServiceImplBase.class, delegatesTo(serviceImpl));

    cleanupRule.register(
        InProcessServerBuilder
            .forName(serverName)
            .addService(mockedDiscoveryService)
            .directExecutor()
            .build()
            .start());
    channel =
        cleanupRule.register(InProcessChannelBuilder.forName(serverName).directExecutor().build());

    List<ServerInfo> servers =
        ImmutableList.of(new ServerInfo(serverName, ImmutableList.<ChannelCreds>of()));
    XdsChannelFactory channelFactory = new XdsChannelFactory() {
      @Override
      ManagedChannel createChannel(List<ServerInfo> servers) {
        assertThat(Iterables.getOnlyElement(servers).getServerUri()).isEqualTo(serverName);
        assertThat(Iterables.getOnlyElement(servers).getChannelCredentials()).isEmpty();
        return channel;
      }
    };

    xdsClient =
        new XdsClientImpl(servers, channelFactory, NODE, syncContext,
            fakeClock.getScheduledExecutorService(), backoffPolicyProvider,
            fakeClock.getStopwatchSupplier().get());
    // Only the connection to management server is established, no RPC request is sent until at
    // least one watcher is registered.
    assertThat(responseObservers).isEmpty();
    assertThat(requestObservers).isEmpty();
  }",False
21,tearDown(),Method,,,io.grpc.xds.XdsClientImpl+shutdown() io.grpc.xds.XdsClientImpl+shutdown() java.util.concurrent.atomic.AtomicBoolean+get() java.util.concurrent.atomic.AtomicBoolean+get() io.grpc.ManagedChannel+isShutdown() io.grpc.ManagedChannel+isShutdown() io.grpc.internal.FakeClock+getPendingTasks() io.grpc.internal.FakeClock+getPendingTasks(),io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+callEnded io.grpc.xds.XdsClientImplTest+channel io.grpc.xds.XdsClientImplTest+fakeClock,207,7,1,,"@After
  public void tearDown() {
    xdsClient.shutdown();
    assertThat(callEnded.get()).isTrue();
    assertThat(channel.isShutdown()).isTrue();
    assertThat(fakeClock.getPendingTasks()).isEmpty();
  }",False
22,ldsResponseWithoutMatchingResource(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.Status+getCode() io.grpc.Status+getCode() io.grpc.Status+getDescription() io.grpc.Status+getDescription()",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImplTest+configWatcher,2492,53,1,"/** 
 * Client receives an LDS response that does not contain a Listener for the requested resource. The LDS response is ACKed. The config watcher is notified with an error.
 */
","/**
   * Client receives an LDS response that does not contain a Listener for the requested resource.
   * The LDS response is ACKed.
   * The config watcher is notified with an error.
   */
  @Test
  public void ldsResponseWithoutMatchingResource() {
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an LDS request for the host name (with port) to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    List<Any> listeners = ImmutableList.of(
        Any.pack(buildListener(""bar.googleapis.com"",
            Any.pack(HttpConnectionManager.newBuilder()
                .setRouteConfig(
                    buildRouteConfiguration(""route-bar.googleapis.com"",
                        ImmutableList.of(
                            buildVirtualHost(
                                ImmutableList.of(""bar.googleapis.com""),
                                ""cluster-bar.googleapis.com""))))
                .build()))),
        Any.pack(buildListener(""baz.googleapis.com"",
            Any.pack(HttpConnectionManager.newBuilder()
                .setRouteConfig(
                    buildRouteConfiguration(""route-baz.googleapis.com"",
                        ImmutableList.of(
                            buildVirtualHost(
                                ImmutableList.of(""baz.googleapis.com""),
                                ""cluster-baz.googleapis.com""))))
                .build()))));
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"");
    responseObserver.onNext(response);

    // Client sends an ACK LDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"")));

    ArgumentCaptor<Status> errorStatusCaptor = ArgumentCaptor.forClass(null);
    verify(configWatcher).onError(errorStatusCaptor.capture());
    Status error = errorStatusCaptor.getValue();
    assertThat(error.getCode()).isEqualTo(Code.NOT_FOUND);
    assertThat(error.getDescription())
        .isEqualTo(""Listener for requested resource [foo.googleapis.com:8080] does not exist"");

    verifyNoMoreInteractions(requestObserver);
  }",False
23,failToFindVirtualHostInLdsResponseInLineRouteConfig(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+configWatcher,2130,44,1,"/** 
 * An LDS response contains the requested listener and an in-lined RouteConfiguration message for that listener. But the RouteConfiguration message is invalid as it does not contain any VirtualHost with domains matching the requested hostname. The LDS response is NACKed, as if the XdsClient has not received this response. The config watcher is NOT notified with an error.
 */
","/**
   * An LDS response contains the requested listener and an in-lined RouteConfiguration message for
   * that listener. But the RouteConfiguration message is invalid as it does not contain any
   * VirtualHost with domains matching the requested hostname.
   * The LDS response is NACKed, as if the XdsClient has not received this response.
   * The config watcher is NOT notified with an error.
   */
  @Test
  public void failToFindVirtualHostInLdsResponseInLineRouteConfig() {
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an LDS request for the host name (with port) to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    RouteConfiguration routeConfig =
        buildRouteConfiguration(
            ""route.googleapis.com"",
            ImmutableList.of(
                buildVirtualHost(ImmutableList.of(""something does not match""),
                    ""some cluster""),
                buildVirtualHost(ImmutableList.of(""something else does not match""),
                    ""some other cluster"")));

    List<Any> listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRouteConfig(routeConfig).build()))));
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"");
    responseObserver.onNext(response);

    // Client sends an NACK LDS request.
    verify(requestObserver)
        .onNext(
            argThat(new DiscoveryRequestMatcher("""", ""foo.googleapis.com:8080"",
                XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"")));

    verify(configWatcher, never()).onConfigChanged(any(ConfigUpdate.class));
    verify(configWatcher, never()).onError(any(Status.class));
    verifyNoMoreInteractions(requestObserver);
  }",False
24,resolveVirtualHostInLdsResponse(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImplTest+configWatcher,3183,64,1,"/** 
 * Client resolves the virtual host config from an LDS response that contains a RouteConfiguration message directly in-line for the requested resource. No RDS is needed. The LDS response is ACKed. The config watcher is notified with an update.
 */
","/**
   * Client resolves the virtual host config from an LDS response that contains a
   * RouteConfiguration message directly in-line for the requested resource. No RDS is needed.
   * The LDS response is ACKed.
   * The config watcher is notified with an update.
   */
  @Test
  public void resolveVirtualHostInLdsResponse() {
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an LDS request for the host name (with port) to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    List<Any> listeners = ImmutableList.of(
        Any.pack(buildListener(""bar.googleapis.com"",
            Any.pack(HttpConnectionManager.newBuilder()
                .setRouteConfig(
                    buildRouteConfiguration(""route-bar.googleapis.com"",
                        ImmutableList.of(
                            buildVirtualHost(
                                ImmutableList.of(""bar.googleapis.com""),
                                ""cluster-bar.googleapis.com""))))
                .build()))),
        Any.pack(buildListener(""baz.googleapis.com"",
            Any.pack(HttpConnectionManager.newBuilder()
                .setRouteConfig(
                    buildRouteConfiguration(""route-baz.googleapis.com"",
                        ImmutableList.of(
                            buildVirtualHost(
                                ImmutableList.of(""baz.googleapis.com""),
                                ""cluster-baz.googleapis.com""))))
                .build()))),
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(
                HttpConnectionManager.newBuilder()
                    .setRouteConfig(
                        buildRouteConfiguration(""route-foo.googleapis.com"",
                            ImmutableList.of(
                                buildVirtualHost(
                                    ImmutableList.of(""foo.googleapis.com"", ""bar.googleapis.com""),
                                    ""cluster.googleapis.com""),
                                buildVirtualHost(
                                    ImmutableList.of(""something does not match""),
                                    ""some cluster""))))
                    .build()))));
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"");
    responseObserver.onNext(response);

    // Client sends an ACK request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"")));

    ArgumentCaptor<ConfigUpdate> configUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(configWatcher).onConfigChanged(configUpdateCaptor.capture());
    assertThat(configUpdateCaptor.getValue().getClusterName()).isEqualTo(""cluster.googleapis.com"");

    verifyNoMoreInteractions(requestObserver);
  }",False
25,rdsResponseWithoutMatchingResource(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+configWatcher,3300,69,1,"/** 
 * Client receives an RDS response (after a previous LDS request-response) that does not contain a RouteConfiguration for the requested resource while each received RouteConfiguration is valid. The RDS response is ACKed. The config watcher is NOT notified with an error (RDS protocol is incremental, responses not containing requested resources does not indicate absence).
 */
","/**
   * Client receives an RDS response (after a previous LDS request-response) that does not contain a
   * RouteConfiguration for the requested resource while each received RouteConfiguration is valid.
   * The RDS response is ACKed.
   * The config watcher is NOT notified with an error (RDS protocol is incremental, responses
   * not containing requested resources does not indicate absence).
   */
  @Test
  public void rdsResponseWithoutMatchingResource() {
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an LDS request for the host name (with port) to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    Rds rdsConfig =
        Rds.newBuilder()
            // Must set to use ADS.
            .setConfigSource(
                ConfigSource.newBuilder().setAds(AggregatedConfigSource.getDefaultInstance()))
            .setRouteConfigName(""route-foo.googleapis.com"")
            .build();
    List<Any> listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRds(rdsConfig).build())))
    );
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"");
    responseObserver.onNext(response);

    // Client sends an ACK LDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"")));

    // Client sends an (first) RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""route-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, """")));

    // Management server should only sends RouteConfiguration messages with at least one
    // VirtualHost with domains matching requested hostname. Otherwise, it is invalid data.
    List<Any> routeConfigs = ImmutableList.of(
        Any.pack(
            buildRouteConfiguration(
                ""some resource name does not match route-foo.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com""),
                        ""whatever cluster"")))),
        Any.pack(
            buildRouteConfiguration(
                ""some other resource name does not match route-foo.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com""),
                        ""some more whatever cluster"")))));
    response = buildDiscoveryResponse(""0"", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"");
    responseObserver.onNext(response);

    // Client sends an ACK RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""route-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"")));

    verify(configWatcher, never()).onConfigChanged(any(ConfigUpdate.class));
    verify(configWatcher, never()).onError(any(Status.class));
  }",False
26,resolveVirtualHostInRdsResponse(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImplTest+configWatcher,2795,58,1,"/** 
 * Client resolves the virtual host config from an RDS response for the requested resource. The RDS response is ACKed. The config watcher is notified with an update.
 */
","/**
   * Client resolves the virtual host config from an RDS response for the requested resource. The
   * RDS response is ACKed.
   * The config watcher is notified with an update.
   */
  @Test
  public void resolveVirtualHostInRdsResponse() {
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    Rds rdsConfig =
        Rds.newBuilder()
            // Must set to use ADS.
            .setConfigSource(
                ConfigSource.newBuilder().setAds(AggregatedConfigSource.getDefaultInstance()))
            .setRouteConfigName(""route-foo.googleapis.com"")
            .build();

    List<Any> listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRds(rdsConfig).build())))
    );
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"");
    responseObserver.onNext(response);

    // Client sends an ACK LDS request and an RDS request for ""route-foo.googleapis.com"". (Omitted)

    // Management server should only sends RouteConfiguration messages with at least one
    // VirtualHost with domains matching requested hostname. Otherwise, it is invalid data.
    List<Any> routeConfigs = ImmutableList.of(
        Any.pack(
            buildRouteConfiguration(
                ""route-foo.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""something does not match""),
                        ""some cluster""),
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com"", ""bar.googleapis.com""),
                        ""cluster.googleapis.com"")))),  // matching virtual host
        Any.pack(
            buildRouteConfiguration(
                ""some resource name does not match route-foo.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com""),
                        ""some more cluster"")))));
    response = buildDiscoveryResponse(""0"", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""route-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"")));

    ArgumentCaptor<ConfigUpdate> configUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(configWatcher).onConfigChanged(configUpdateCaptor.capture());
    assertThat(configUpdateCaptor.getValue().getClusterName()).isEqualTo(""cluster.googleapis.com"");
  }",False
27,failToFindVirtualHostInRdsResponse(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+configWatcher,2796,60,1,"/** 
 * Client receives an RDS response (after a previous LDS request-response) containing a RouteConfiguration message for the requested resource. But the RouteConfiguration message is invalid as it does not contain any VirtualHost with domains matching the requested hostname. The LDS response is NACKed, as if the XdsClient has not received this response. The config watcher is NOT notified with an error.
 */
","/**
   * Client receives an RDS response (after a previous LDS request-response) containing a
   * RouteConfiguration message for the requested resource. But the RouteConfiguration message
   * is invalid as it does not contain any VirtualHost with domains matching the requested
   * hostname.
   * The LDS response is NACKed, as if the XdsClient has not received this response.
   * The config watcher is NOT notified with an error.
   */
  @Test
  public void failToFindVirtualHostInRdsResponse() {
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    Rds rdsConfig =
        Rds.newBuilder()
            // Must set to use ADS.
            .setConfigSource(
                ConfigSource.newBuilder().setAds(AggregatedConfigSource.getDefaultInstance()))
            .setRouteConfigName(""route-foo.googleapis.com"")
            .build();

    List<Any> listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRds(rdsConfig).build())))
    );
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"");
    responseObserver.onNext(response);

    // Client sends an ACK LDS request and an RDS request for ""route-foo.googleapis.com"". (Omitted)

    List<Any> routeConfigs = ImmutableList.of(
        Any.pack(
            buildRouteConfiguration(
                ""route-foo.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""something does not match""),
                        ""some cluster""),
                    buildVirtualHost(
                        ImmutableList.of(""something else does not match"", ""also does not match""),
                        ""cluster.googleapis.com"")))),
        Any.pack(
            buildRouteConfiguration(
                ""some resource name does not match route-foo.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""one more does not match""),
                        ""some more cluster"")))));
    response = buildDiscoveryResponse(""0"", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an NACK RDS request.
    verify(requestObserver)
        .onNext(
            argThat(new DiscoveryRequestMatcher("""", ""route-foo.googleapis.com"",
                XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"")));

    verify(configWatcher, never()).onConfigChanged(any(ConfigUpdate.class));
    verify(configWatcher, never()).onError(any(Status.class));
  }",False
28,matchingVirtualHostDoesNotContainRouteAction(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+configWatcher,2770,61,1,"/** 
 * Client receives an RDS response (after a previous LDS request-response) containing a RouteConfiguration message for the requested resource. But the RouteConfiguration message is invalid as the VirtualHost with domains matching the requested hostname contains invalid data, its RouteAction message is absent. The LDS response is NACKed, as if the XdsClient has not received this response. The config watcher is NOT notified with an error.
 */
","/**
   * Client receives an RDS response (after a previous LDS request-response) containing a
   * RouteConfiguration message for the requested resource. But the RouteConfiguration message
   * is invalid as the VirtualHost with domains matching the requested hostname contains invalid
   * data, its RouteAction message is absent.
   * The LDS response is NACKed, as if the XdsClient has not received this response.
   * The config watcher is NOT notified with an error.
   */
  @Test
  public void matchingVirtualHostDoesNotContainRouteAction() {
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    Rds rdsConfig =
        Rds.newBuilder()
            // Must set to use ADS.
            .setConfigSource(
                ConfigSource.newBuilder().setAds(AggregatedConfigSource.getDefaultInstance()))
            .setRouteConfigName(""route-foo.googleapis.com"")
            .build();

    List<Any> listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRds(rdsConfig).build())))
    );
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"");
    responseObserver.onNext(response);

    // Client sends an ACK LDS request and an RDS request for ""route-foo.googleapis.com"". (Omitted)

    // A VirtualHost with a Route that contains only redirect configuration.
    VirtualHost virtualHost =
        VirtualHost.newBuilder()
            .setName(""virtualhost00.googleapis.com"")  // don't care
            .addDomains(""foo.googleapis.com"")
            .addRoutes(
                Route.newBuilder()
                    .setRedirect(
                        RedirectAction.newBuilder()
                            .setHostRedirect(""bar.googleapis.com"")
                            .setPortRedirect(443)))
            .build();

    List<Any> routeConfigs = ImmutableList.of(
        Any.pack(
            buildRouteConfiguration(""route-foo.googleapis.com"",
                ImmutableList.of(virtualHost))));
    response = buildDiscoveryResponse(""0"", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an NACK RDS request.
    verify(requestObserver)
        .onNext(
            argThat(new DiscoveryRequestMatcher("""", ""route-foo.googleapis.com"",
                XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"")));

    verify(configWatcher, never()).onConfigChanged(any(ConfigUpdate.class));
    verify(configWatcher, never()).onError(any(Status.class));
  }",False
29,notifyUpdatedResources(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImplTest+configWatcher,7084,150,1,"/** 
 * Client receives LDS/RDS responses for updating resources previously received. <p>Tests for streaming behavior.
 */
","/**
   * Client receives LDS/RDS responses for updating resources previously received.
   *
   * <p>Tests for streaming behavior.
   */
  @Test
  public void notifyUpdatedResources() {
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an LDS request for the host name (with port) to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    // Management server sends back an LDS response containing a RouteConfiguration for the
    // requested Listener directly in-line.
    RouteConfiguration routeConfig =
        buildRouteConfiguration(
            ""route-foo.googleapis.com"",
            ImmutableList.of(
                buildVirtualHost(ImmutableList.of(""foo.googleapis.com"", ""bar.googleapis.com""),
                    ""cluster.googleapis.com""),
                buildVirtualHost(ImmutableList.of(""something does not match""),
                    ""some cluster"")));

    List<Any> listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRouteConfig(routeConfig).build())))
    );
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"");
    responseObserver.onNext(response);

    // Client sends an ACK LDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"")));

    // Cluster name is resolved and notified to config watcher.
    ArgumentCaptor<ConfigUpdate> configUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(configWatcher).onConfigChanged(configUpdateCaptor.capture());
    assertThat(configUpdateCaptor.getValue().getClusterName()).isEqualTo(""cluster.googleapis.com"");

    // Management sends back another LDS response containing updates for the requested Listener.
    routeConfig =
        buildRouteConfiguration(
            ""another-route-foo.googleapis.com"",
            ImmutableList.of(
                buildVirtualHost(ImmutableList.of(""foo.googleapis.com"", ""bar.googleapis.com""),
                    ""another-cluster.googleapis.com""),
                buildVirtualHost(ImmutableList.of(""something does not match""),
                    ""some cluster"")));

    listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRouteConfig(routeConfig).build())))
    );
    response =
        buildDiscoveryResponse(""1"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0001"");
    responseObserver.onNext(response);

    // Client sends an ACK LDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""1"", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, ""0001"")));

    // Updated cluster name is notified to config watcher.
    configUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(configWatcher, times(2)).onConfigChanged(configUpdateCaptor.capture());
    assertThat(configUpdateCaptor.getValue().getClusterName())
        .isEqualTo(""another-cluster.googleapis.com"");

    // Management server sends back another LDS response containing updates for the requested
    // Listener and telling client to do RDS.
    Rds rdsConfig =
        Rds.newBuilder()
            // Must set to use ADS.
            .setConfigSource(
                ConfigSource.newBuilder().setAds(AggregatedConfigSource.getDefaultInstance()))
            .setRouteConfigName(""some-route-to-foo.googleapis.com"")
            .build();

    listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRds(rdsConfig).build())))
    );
    response =
        buildDiscoveryResponse(""2"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0002"");
    responseObserver.onNext(response);

    // Client sends an ACK LDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""2"", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, ""0002"")));

    // Client sends an (first) RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""some-route-to-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, """")));

    // Management server sends back an RDS response containing the RouteConfiguration
    // for the requested resource.
    List<Any> routeConfigs = ImmutableList.of(
        Any.pack(
            buildRouteConfiguration(
                ""some-route-to-foo.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""something does not match""),
                        ""some cluster""),
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com"", ""bar.googleapis.com""),
                        ""some-other-cluster.googleapis.com"")))));
    response = buildDiscoveryResponse(""0"", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""some-route-to-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"")));

    // Updated cluster name is notified to config watcher again.
    configUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(configWatcher, times(3)).onConfigChanged(configUpdateCaptor.capture());
    assertThat(configUpdateCaptor.getValue().getClusterName())
        .isEqualTo(""some-other-cluster.googleapis.com"");

    // Management server sends back another RDS response containing updated information for the
    // RouteConfiguration currently in-use by client.
    routeConfigs = ImmutableList.of(
        Any.pack(
            buildRouteConfiguration(
                ""some-route-to-foo.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com"", ""bar.googleapis.com""),
                        ""an-updated-cluster.googleapis.com"")))));
    response = buildDiscoveryResponse(""1"", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, ""0001"");
    responseObserver.onNext(response);

    // Client sent an ACK RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""1"", ""some-route-to-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, ""0001"")));

    // Updated cluster name is notified to config watcher again.
    configUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(configWatcher, times(4)).onConfigChanged(configUpdateCaptor.capture());
    assertThat(configUpdateCaptor.getValue().getClusterName())
        .isEqualTo(""an-updated-cluster.googleapis.com"");
  }",False
30,waitRdsResponsesForRequestedResource(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImplTest+configWatcher,4092,90,1,"/** 
 * Client receives multiple RDS responses without RouteConfiguration for the requested resource. It should continue waiting until such an RDS response arrives, as RDS protocol is incremental. <p>Tests for RDS incremental protocol behavior.
 */
","/**
   * Client receives multiple RDS responses without RouteConfiguration for the requested
   * resource. It should continue waiting until such an RDS response arrives, as RDS
   * protocol is incremental.
   *
   * <p>Tests for RDS incremental protocol behavior.
   */
  @Test
  public void waitRdsResponsesForRequestedResource() {
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an LDS request for the host name (with port) to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    // Management sends back an LDS response telling client to do RDS.
    Rds rdsConfig =
        Rds.newBuilder()
            // Must set to use ADS.
            .setConfigSource(
                ConfigSource.newBuilder().setAds(AggregatedConfigSource.getDefaultInstance()))
            .setRouteConfigName(""route-foo.googleapis.com"")
            .build();

    List<Any> listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRds(rdsConfig).build())))
    );
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"");
    responseObserver.onNext(response);

    // Client sends an ACK LDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"")));

    // Client sends an (first) RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""route-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, """")));

    // Management server sends back an RDS response that does not contain RouteConfiguration
    // for the requested resource.
    List<Any> routeConfigs = ImmutableList.of(
        Any.pack(
            buildRouteConfiguration(
                ""some resource name does not match route-foo.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com""),
                        ""some more cluster"")))));
    response = buildDiscoveryResponse(""0"", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""route-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"")));

    // Client waits for future RDS responses silently.
    verifyNoMoreInteractions(configWatcher);

    // Management server sends back another RDS response containing the RouteConfiguration
    // for the requested resource.
    routeConfigs = ImmutableList.of(
        Any.pack(
            buildRouteConfiguration(
                ""route-foo.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""something does not match""),
                        ""some cluster""),
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com"", ""bar.googleapis.com""),
                        ""another-cluster.googleapis.com"")))));
    response = buildDiscoveryResponse(""1"", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, ""0001"");
    responseObserver.onNext(response);

    // Client sent an ACK RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""1"", ""route-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, ""0001"")));

    // Updated cluster name is notified to config watcher.
    ArgumentCaptor<ConfigUpdate> configUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(configWatcher).onConfigChanged(configUpdateCaptor.capture());
    assertThat(configUpdateCaptor.getValue().getClusterName())
        .isEqualTo(""another-cluster.googleapis.com"");
  }",False
31,receiveRdsResponsesForRouteConfigurationsToBeUsedLater(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImplTest+configWatcher,6941,145,1,"/** 
 * Client receives RDS responses containing RouteConfigurations for resources that were not requested (management server sends them proactively). Later client receives an LDS response with the requested Listener containing Rds config pointing to do RDS for one of the previously received RouteConfigurations. No RDS request needs to be sent for that RouteConfiguration as it can be found in local cache (management server will not send RDS responses for that RouteConfiguration again). A future RDS response update for that RouteConfiguration should be notified to config watcher. <p>Tests for caching RDS response data behavior.
 */
","/**
   * Client receives RDS responses containing RouteConfigurations for resources that were
   * not requested (management server sends them proactively). Later client receives an LDS
   * response with the requested Listener containing Rds config pointing to do RDS for one of
   * the previously received RouteConfigurations. No RDS request needs to be sent for that
   * RouteConfiguration as it can be found in local cache (management server will not send
   * RDS responses for that RouteConfiguration again). A future RDS response update for
   * that RouteConfiguration should be notified to config watcher.
   *
   * <p>Tests for caching RDS response data behavior.
   */
  @Test
  public void receiveRdsResponsesForRouteConfigurationsToBeUsedLater() {
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an LDS request for the host name (with port) to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    // Management sends back an LDS response telling client to do RDS.
    Rds rdsConfig =
        Rds.newBuilder()
            // Must set to use ADS.
            .setConfigSource(
                ConfigSource.newBuilder().setAds(AggregatedConfigSource.getDefaultInstance()))
            .setRouteConfigName(""route-foo1.googleapis.com"")
            .build();

    List<Any> listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRds(rdsConfig).build())))
    );
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"");
    responseObserver.onNext(response);

    // Client sends an ACK LDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"")));

    // Client sends an (first) RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""route-foo1.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, """")));

    // Management server sends back an RDS response containing RouteConfigurations
    // more than requested.
    List<Any> routeConfigs = ImmutableList.of(
        // Currently wanted resource.
        Any.pack(
            buildRouteConfiguration(
                ""route-foo1.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com""),
                        ""cluster1.googleapis.com"")))),
        // Resources currently not wanted.
        Any.pack(
            buildRouteConfiguration(
                ""route-foo2.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com""),
                        ""cluster2.googleapis.com"")))),
        Any.pack(
            buildRouteConfiguration(
                ""route-foo3.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com""),
                        ""cluster3.googleapis.com"")))));
    response = buildDiscoveryResponse(""0"", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""route-foo1.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"")));

    // Resolved cluster name is notified to config watcher.
    ArgumentCaptor<ConfigUpdate> configUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(configWatcher).onConfigChanged(configUpdateCaptor.capture());
    assertThat(configUpdateCaptor.getValue().getClusterName()).isEqualTo(""cluster1.googleapis.com"");

    // Management server sends back another LDS response containing updates for the requested
    // Listener and telling client to do RDS for a RouteConfiguration which had previously
    // sent to client.
    rdsConfig =
        Rds.newBuilder()
            // Must set to use ADS.
            .setConfigSource(
                ConfigSource.newBuilder().setAds(AggregatedConfigSource.getDefaultInstance()))
            .setRouteConfigName(""route-foo2.googleapis.com"")
            .build();

    listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRds(rdsConfig).build())))
    );
    response = buildDiscoveryResponse(""1"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0001"");
    responseObserver.onNext(response);

    // Client sent an ACK LDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""1"", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, ""0001"")));

    // Updated cluster name is notified to config watcher.
    configUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(configWatcher, times(2)).onConfigChanged(configUpdateCaptor.capture());
    assertThat(configUpdateCaptor.getValue().getClusterName()).isEqualTo(""cluster2.googleapis.com"");

    // At this time, no RDS request is sent as the result can be found in local cache (even if
    // a request is sent for it, management server does not necessarily reply).
    verify(requestObserver, times(0))
        .onNext(eq(buildDiscoveryRequest(""0"", ""route-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"")));

    verifyNoMoreInteractions(requestObserver);

    // Management server sends back another RDS response containing updates for the
    // RouteConfiguration that the client was pointed to most recently (i.e.,
    // ""route-foo2.googleapis.com"").
    routeConfigs = ImmutableList.of(
        Any.pack(
            buildRouteConfiguration(
                ""route-foo2.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com""),
                        ""a-new-cluster.googleapis.com"")))));
    response = buildDiscoveryResponse(""1"", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, ""0001"");
    responseObserver.onNext(response);

    // Client sent an ACK RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""1"", ""route-foo2.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, ""0001"")));

    // Updated cluster name is notified to config watcher.
    configUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(configWatcher, times(3)).onConfigChanged(configUpdateCaptor.capture());
    assertThat(configUpdateCaptor.getValue().getClusterName())
        .isEqualTo(""a-new-cluster.googleapis.com"");
  }",False
32,routeConfigurationRemovedNotifiedToWatcher(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.Status+getCode() io.grpc.Status+getCode() io.grpc.Status+getDescription() io.grpc.Status+getDescription()",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImplTest+configWatcher,3868,83,1,"/** 
 * An RouteConfiguration is removed by server by sending client an LDS response removing the corresponding Listener.
 */
","/**
   * An RouteConfiguration is removed by server by sending client an LDS response removing the
   * corresponding Listener.
   */
  @Test
  public void routeConfigurationRemovedNotifiedToWatcher() {
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an LDS request for the host name (with port) to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    // Management sends back an LDS response telling client to do RDS.
    Rds rdsConfig =
        Rds.newBuilder()
            // Must set to use ADS.
            .setConfigSource(
                ConfigSource.newBuilder().setAds(AggregatedConfigSource.getDefaultInstance()))
            .setRouteConfigName(""route-foo.googleapis.com"")
            .build();

    List<Any> listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRds(rdsConfig).build())))
    );
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"");
    responseObserver.onNext(response);

    // Client sends an ACK LDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"")));

    // Client sends an (first) RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""route-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, """")));

    // Management server sends back an RDS response containing RouteConfiguration requested.
    List<Any> routeConfigs = ImmutableList.of(
        Any.pack(
            buildRouteConfiguration(
                ""route-foo.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com""),
                        ""cluster.googleapis.com"")))));
    response = buildDiscoveryResponse(""0"", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK RDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""route-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"")));

    // Resolved cluster name is notified to config watcher.
    ArgumentCaptor<ConfigUpdate> configUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(configWatcher).onConfigChanged(configUpdateCaptor.capture());
    assertThat(configUpdateCaptor.getValue().getClusterName()).isEqualTo(""cluster.googleapis.com"");

    // Management server sends back another LDS response with the previous Listener (currently
    // in-use by client) removed as the RouteConfiguration it references to is absent.
    response =
        buildDiscoveryResponse(""1"", ImmutableList.<com.google.protobuf.Any>of(), // empty
            XdsClientImpl.ADS_TYPE_URL_LDS, ""0001"");
    responseObserver.onNext(response);

    // Client sent an ACK LDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""1"", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, ""0001"")));

    // Notify config watcher with an error.
    ArgumentCaptor<Status> errorStatusCaptor = ArgumentCaptor.forClass(null);
    verify(configWatcher).onError(errorStatusCaptor.capture());
    Status error = errorStatusCaptor.getValue();
    assertThat(error.getCode()).isEqualTo(Code.NOT_FOUND);
    assertThat(error.getDescription())
        .isEqualTo(""Listener for requested resource [foo.googleapis.com:8080] does not exist"");
  }",False
33,cdsResponseWithoutMatchingResource(),Method,,,"io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.Status+getCode() io.grpc.Status+getCode() io.grpc.Status+getDescription() io.grpc.Status+getDescription()",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+clusterWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImplTest+clusterWatcher,1824,36,1,"/** 
 * Client receives an CDS response that does not contain a Cluster for the requested resource while each received Cluster is valid. The CDS response is ACKed. Cluster watchers are notified with an error for resource not found.
 */
","/**
   * Client receives an CDS response that does not contain a Cluster for the requested resource
   * while each received Cluster is valid. The CDS response is ACKed. Cluster watchers are notified
   * with an error for resource not found.
   */
  @Test
  public void cdsResponseWithoutMatchingResource() {
    xdsClient.watchClusterData(""cluster-foo.googleapis.com"", clusterWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends a CDS request for the only cluster being watched to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));

    // Management server sends back a CDS response without Cluster for the requested resource.
    List<Any> clusters = ImmutableList.of(
        Any.pack(buildCluster(""cluster-bar.googleapis.com"", null, false)),
        Any.pack(buildCluster(""cluster-baz.googleapis.com"", null, false)));
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", clusters, XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK CDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"")));

    ArgumentCaptor<Status> errorStatusCaptor = ArgumentCaptor.forClass(null);
    verify(clusterWatcher).onError(errorStatusCaptor.capture());
    Status error = errorStatusCaptor.getValue();
    assertThat(error.getCode()).isEqualTo(Code.NOT_FOUND);
    assertThat(error.getDescription())
        .isEqualTo(""Requested cluster [cluster-foo.googleapis.com] does not exist"");
  }",False
34,cdsResponseWithMatchingResource(),Method,,,"io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+getLrsServerName() io.grpc.xds.XdsClient.ClusterUpdate+getLrsServerName()",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+clusterWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImplTest+clusterWatcher io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImplTest+clusterWatcher,3220,62,1,"/** 
 * Normal workflow of receiving a CDS response containing Cluster message for a requested cluster.
 */
","/**
   * Normal workflow of receiving a CDS response containing Cluster message for a requested
   * cluster.
   */
  @Test
  public void cdsResponseWithMatchingResource() {
    xdsClient.watchClusterData(""cluster-foo.googleapis.com"", clusterWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends a CDS request for the only cluster being watched to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));

    // Management server sends back a CDS response without Cluster for the requested resource.
    List<Any> clusters = ImmutableList.of(
        Any.pack(buildCluster(""cluster-bar.googleapis.com"", null, false)),
        Any.pack(buildCluster(""cluster-foo.googleapis.com"", null, false)),
        Any.pack(buildCluster(""cluster-baz.googleapis.com"", null, false)));
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", clusters, XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK CDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"")));

    ArgumentCaptor<ClusterUpdate> clusterUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(clusterWatcher).onClusterChanged(clusterUpdateCaptor.capture());
    ClusterUpdate clusterUpdate = clusterUpdateCaptor.getValue();
    assertThat(clusterUpdate.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate.getEdsServiceName())
        .isEqualTo(""cluster-foo.googleapis.com"");  // default to cluster name
    assertThat(clusterUpdate.getLbPolicy()).isEqualTo(""round_robin"");
    assertThat(clusterUpdate.isEnableLrs()).isEqualTo(false);

    // Management server sends back another CDS response updating the requested Cluster.
    clusters = ImmutableList.of(
        Any.pack(buildCluster(""cluster-bar.googleapis.com"", null, false)),
        Any.pack(
            buildCluster(""cluster-foo.googleapis.com"", ""eds-cluster-foo.googleapis.com"", true)),
        Any.pack(buildCluster(""cluster-baz.googleapis.com"", null, false)));
    response =
        buildDiscoveryResponse(""1"", clusters, XdsClientImpl.ADS_TYPE_URL_CDS, ""0001"");
    responseObserver.onNext(response);

    // Client sent an ACK CDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""1"", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, ""0001"")));

    verify(clusterWatcher, times(2)).onClusterChanged(clusterUpdateCaptor.capture());
    clusterUpdate = clusterUpdateCaptor.getValue();
    assertThat(clusterUpdate.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate.getEdsServiceName())
        .isEqualTo(""eds-cluster-foo.googleapis.com"");
    assertThat(clusterUpdate.getLbPolicy()).isEqualTo(""round_robin"");
    assertThat(clusterUpdate.isEnableLrs()).isEqualTo(true);
    assertThat(clusterUpdate.getLrsServerName()).isEqualTo("""");
  }",False
35,cdsResponseWithUpstreamTlsContext(),Method,,,"io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImplTest+buildUpstreamTlsContext(String,String) io.grpc.xds.XdsClientImplTest+buildUpstreamTlsContext(String,String) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildSecureCluster(String,String,boolean,UpstreamTlsContext) io.grpc.xds.XdsClientImplTest+buildSecureCluster(String,String,boolean,UpstreamTlsContext) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClient.ClusterUpdate+getUpstreamTlsContext() io.grpc.xds.XdsClient.ClusterUpdate+getUpstreamTlsContext()",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+clusterWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImplTest+clusterWatcher,1586,30,1,"/** 
 * CDS response containing UpstreamTlsContext for a cluster.
 */
","/**
   * CDS response containing UpstreamTlsContext for a cluster.
   */
  @Test
  public void cdsResponseWithUpstreamTlsContext() {
    xdsClient.watchClusterData(""cluster-foo.googleapis.com"", clusterWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Management server sends back CDS response with UpstreamTlsContext.
    UpstreamTlsContext testUpstreamTlsContext =
        buildUpstreamTlsContext(""secret1"", ""unix:/var/uds2"");
    List<Any> clusters = ImmutableList.of(
        Any.pack(buildCluster(""cluster-bar.googleapis.com"", null, false)),
        Any.pack(buildSecureCluster(""cluster-foo.googleapis.com"",
            ""eds-cluster-foo.googleapis.com"", true, testUpstreamTlsContext)),
        Any.pack(buildCluster(""cluster-baz.googleapis.com"", null, false)));
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", clusters, XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK CDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"")));
    ArgumentCaptor<ClusterUpdate> clusterUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(clusterWatcher, times(1)).onClusterChanged(clusterUpdateCaptor.capture());
    ClusterUpdate clusterUpdate = clusterUpdateCaptor.getValue();
    assertThat(clusterUpdate.getUpstreamTlsContext()).isEqualTo(testUpstreamTlsContext);
  }",False
36,multipleClusterWatchers(),Method,,,"io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String) io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.Status+getCode() io.grpc.Status+getCode() io.grpc.Status+getDescription() io.grpc.Status+getDescription() io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String) io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+getLrsServerName() io.grpc.xds.XdsClient.ClusterUpdate+getLrsServerName()",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS,6256,114,1,,"@Test
  public void multipleClusterWatchers() {
    ClusterWatcher watcher1 = mock(ClusterWatcher.class);
    ClusterWatcher watcher2 = mock(ClusterWatcher.class);
    ClusterWatcher watcher3 = mock(ClusterWatcher.class);
    xdsClient.watchClusterData(""cluster-foo.googleapis.com"", watcher1);
    xdsClient.watchClusterData(""cluster-foo.googleapis.com"", watcher2);
    xdsClient.watchClusterData(""cluster-bar.googleapis.com"", watcher3);

    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends a CDS request containing all clusters being watched to management server.
    verify(requestObserver)
        .onNext(
            argThat(
                new DiscoveryRequestMatcher("""",
                    ImmutableList.of(""cluster-foo.googleapis.com"", ""cluster-bar.googleapis.com""),
                    XdsClientImpl.ADS_TYPE_URL_CDS, """")));

    // Management server sends back a CDS response contains Cluster for only one of
    // requested cluster.
    List<Any> clusters = ImmutableList.of(
        Any.pack(buildCluster(""cluster-foo.googleapis.com"", null, false)));
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", clusters, XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK CDS request.
    verify(requestObserver)
        .onNext(
            argThat(
                new DiscoveryRequestMatcher(""0"",
                    ImmutableList.of(""cluster-foo.googleapis.com"", ""cluster-bar.googleapis.com""),
                    XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"")));

    // Two watchers get notification of cluster update for the cluster they are interested in.
    ArgumentCaptor<ClusterUpdate> clusterUpdateCaptor1 = ArgumentCaptor.forClass(null);
    verify(watcher1).onClusterChanged(clusterUpdateCaptor1.capture());
    ClusterUpdate clusterUpdate1 = clusterUpdateCaptor1.getValue();
    assertThat(clusterUpdate1.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate1.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate1.getEdsServiceName())
        .isEqualTo(""cluster-foo.googleapis.com"");  // default to cluster name
    assertThat(clusterUpdate1.getLbPolicy()).isEqualTo(""round_robin"");
    assertThat(clusterUpdate1.isEnableLrs()).isEqualTo(false);

    ArgumentCaptor<ClusterUpdate> clusterUpdateCaptor2 = ArgumentCaptor.forClass(null);
    verify(watcher2).onClusterChanged(clusterUpdateCaptor2.capture());
    ClusterUpdate clusterUpdate2 = clusterUpdateCaptor2.getValue();
    assertThat(clusterUpdate2.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate2.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate2.getEdsServiceName())
        .isEqualTo(""cluster-foo.googleapis.com"");  // default to cluster name
    assertThat(clusterUpdate2.getLbPolicy()).isEqualTo(""round_robin"");
    assertThat(clusterUpdate2.isEnableLrs()).isEqualTo(false);

    // The other watcher gets an error notification for cluster not found.
    ArgumentCaptor<Status> errorStatusCaptor = ArgumentCaptor.forClass(null);
    verify(watcher3).onError(errorStatusCaptor.capture());
    Status error = errorStatusCaptor.getValue();
    assertThat(error.getCode()).isEqualTo(Code.NOT_FOUND);
    assertThat(error.getDescription())
        .isEqualTo(""Requested cluster [cluster-bar.googleapis.com] does not exist"");

    // Management server sends back another CDS response contains Clusters for all
    // requested clusters.
    clusters = ImmutableList.of(
        Any.pack(buildCluster(""cluster-foo.googleapis.com"", null, false)),
        Any.pack(
            buildCluster(""cluster-bar.googleapis.com"",
                ""eds-cluster-bar.googleapis.com"", true)));
    response = buildDiscoveryResponse(""1"", clusters,
        XdsClientImpl.ADS_TYPE_URL_CDS, ""0001"");
    responseObserver.onNext(response);

    // Client sent an ACK CDS request.
    verify(requestObserver)
        .onNext(
            argThat(
                new DiscoveryRequestMatcher(""1"",
                    ImmutableList.of(""cluster-foo.googleapis.com"", ""cluster-bar.googleapis.com""),
                    XdsClientImpl.ADS_TYPE_URL_CDS, ""0001"")));

    // All watchers received notification for cluster update.
    verify(watcher1, times(2)).onClusterChanged(clusterUpdateCaptor1.capture());
    clusterUpdate1 = clusterUpdateCaptor1.getValue();
    assertThat(clusterUpdate1.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate1.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate1.getEdsServiceName())
        .isEqualTo(""cluster-foo.googleapis.com"");  // default to cluster name
    assertThat(clusterUpdate1.getLbPolicy()).isEqualTo(""round_robin"");
    assertThat(clusterUpdate1.isEnableLrs()).isEqualTo(false);

    clusterUpdateCaptor2 = ArgumentCaptor.forClass(null);
    verify(watcher2, times(2)).onClusterChanged(clusterUpdateCaptor2.capture());
    clusterUpdate2 = clusterUpdateCaptor2.getValue();
    assertThat(clusterUpdate2.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate2.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate2.getEdsServiceName())
        .isEqualTo(""cluster-foo.googleapis.com"");  // default to cluster name
    assertThat(clusterUpdate2.getLbPolicy()).isEqualTo(""round_robin"");
    assertThat(clusterUpdate2.isEnableLrs()).isEqualTo(false);

    ArgumentCaptor<ClusterUpdate> clusterUpdateCaptor3 = ArgumentCaptor.forClass(null);
    verify(watcher3).onClusterChanged(clusterUpdateCaptor3.capture());
    ClusterUpdate clusterUpdate3 = clusterUpdateCaptor3.getValue();
    assertThat(clusterUpdate3.getClusterName()).isEqualTo(""cluster-bar.googleapis.com"");
    assertThat(clusterUpdate3.getEdsServiceName())
        .isEqualTo(""eds-cluster-bar.googleapis.com"");
    assertThat(clusterUpdate3.getLbPolicy()).isEqualTo(""round_robin"");
    assertThat(clusterUpdate3.isEnableLrs()).isEqualTo(true);
    assertThat(clusterUpdate3.getLrsServerName()).isEqualTo("""");
  }",False
37,watchClusterAlreadyBeingWatched(),Method,,,"io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs()",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImplTest+xdsClient,3048,58,1,"/** 
 * (CDS response caching behavior) Adding cluster watchers interested in some cluster that some other endpoint watcher had already been watching on will result in cluster update notified to the newly added watcher immediately, without sending new CDS requests.
 */
","/**
   * (CDS response caching behavior) Adding cluster watchers interested in some cluster that
   * some other endpoint watcher had already been watching on will result in cluster update
   * notified to the newly added watcher immediately, without sending new CDS requests.
   */
  @Test
  public void watchClusterAlreadyBeingWatched() {
    ClusterWatcher watcher1 = mock(ClusterWatcher.class);
    xdsClient.watchClusterData(""cluster-foo.googleapis.com"", watcher1);

    // Streaming RPC starts after a first watcher is added.
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an CDS request to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));

    // Management server sends back an CDS response with Cluster for the requested
    // cluster.
    List<Any> clusters = ImmutableList.of(
        Any.pack(buildCluster(""cluster-foo.googleapis.com"", null, false)));
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", clusters, XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK CDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"")));

    ArgumentCaptor<ClusterUpdate> clusterUpdateCaptor1 = ArgumentCaptor.forClass(null);
    verify(watcher1).onClusterChanged(clusterUpdateCaptor1.capture());
    ClusterUpdate clusterUpdate1 = clusterUpdateCaptor1.getValue();
    assertThat(clusterUpdate1.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate1.getEdsServiceName())
        .isEqualTo(""cluster-foo.googleapis.com"");  // default to cluster name
    assertThat(clusterUpdate1.getLbPolicy()).isEqualTo(""round_robin"");
    assertThat(clusterUpdate1.isEnableLrs()).isEqualTo(false);

    // Another cluster watcher interested in the same cluster is added.
    ClusterWatcher watcher2 = mock(ClusterWatcher.class);
    xdsClient.watchClusterData(""cluster-foo.googleapis.com"", watcher2);

    // Since the client has received cluster update for this cluster before, cached result is
    // notified to the newly added watcher immediately.
    ArgumentCaptor<ClusterUpdate> clusterUpdateCaptor2 = ArgumentCaptor.forClass(null);
    verify(watcher2).onClusterChanged(clusterUpdateCaptor2.capture());
    ClusterUpdate clusterUpdate2 = clusterUpdateCaptor2.getValue();
    assertThat(clusterUpdate2.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate2.getEdsServiceName())
        .isEqualTo(""cluster-foo.googleapis.com"");  // default to cluster name
    assertThat(clusterUpdate2.getLbPolicy()).isEqualTo(""round_robin"");
    assertThat(clusterUpdate2.isEnableLrs()).isEqualTo(false);

    verifyNoMoreInteractions(requestObserver);
  }",False
38,addRemoveClusterWatchersFreely(),Method,,,"io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String) io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+getLrsServerName() io.grpc.xds.XdsClient.ClusterUpdate+getLrsServerName() io.grpc.xds.XdsClientImpl+cancelClusterDataWatch(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+cancelClusterDataWatch(String,ClusterWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImpl+cancelClusterDataWatch(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+cancelClusterDataWatch(String,ClusterWatcher) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getClusterName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getEdsServiceName() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+getLbPolicy() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+isEnableLrs() io.grpc.xds.XdsClient.ClusterUpdate+getLrsServerName() io.grpc.xds.XdsClient.ClusterUpdate+getLrsServerName() io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS,7877,160,1,,"@Test
  public void addRemoveClusterWatchersFreely() {
    ClusterWatcher watcher1 = mock(ClusterWatcher.class);
    xdsClient.watchClusterData(""cluster-foo.googleapis.com"", watcher1);

    // Streaming RPC starts after a first watcher is added.
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an CDS request to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));

    // Management server sends back a CDS response with Cluster for the requested
    // cluster.
    List<Any> clusters = ImmutableList.of(
        Any.pack(buildCluster(""cluster-foo.googleapis.com"", null, false)));
    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", clusters, XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK CDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"")));

    ArgumentCaptor<ClusterUpdate> clusterUpdateCaptor1 = ArgumentCaptor.forClass(null);
    verify(watcher1).onClusterChanged(clusterUpdateCaptor1.capture());
    ClusterUpdate clusterUpdate1 = clusterUpdateCaptor1.getValue();
    assertThat(clusterUpdate1.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate1.getEdsServiceName())
        .isEqualTo(""cluster-foo.googleapis.com"");  // default to cluster name
    assertThat(clusterUpdate1.getLbPolicy()).isEqualTo(""round_robin"");
    assertThat(clusterUpdate1.isEnableLrs()).isEqualTo(false);

    // Add another cluster watcher for a different cluster.
    ClusterWatcher watcher2 = mock(ClusterWatcher.class);
    xdsClient.watchClusterData(""cluster-bar.googleapis.com"", watcher2);

    // Client sent a new CDS request for all interested resources.
    verify(requestObserver)
        .onNext(
            eq(buildDiscoveryRequest(""0"",
                ImmutableList.of(""cluster-foo.googleapis.com"", ""cluster-bar.googleapis.com""),
                XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"")));

    // Management server sends back a CDS response with Cluster for all requested cluster.
    clusters = ImmutableList.of(
        Any.pack(buildCluster(""cluster-foo.googleapis.com"", null, false)),
        Any.pack(
            buildCluster(""cluster-bar.googleapis.com"",
                ""eds-cluster-bar.googleapis.com"", true)));
    response = buildDiscoveryResponse(""1"", clusters,
        XdsClientImpl.ADS_TYPE_URL_CDS, ""0001"");
    responseObserver.onNext(response);

    // Client sent an ACK CDS request for all interested resources.
    verify(requestObserver)
        .onNext(
            argThat(
                new DiscoveryRequestMatcher(""1"",
                    ImmutableList.of(""cluster-foo.googleapis.com"", ""cluster-bar.googleapis.com""),
                    XdsClientImpl.ADS_TYPE_URL_CDS, ""0001"")));

    verify(watcher1, times(2)).onClusterChanged(clusterUpdateCaptor1.capture());
    clusterUpdate1 = clusterUpdateCaptor1.getValue();
    assertThat(clusterUpdate1.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate1.getEdsServiceName())
        .isEqualTo(""cluster-foo.googleapis.com"");  // default to cluster name
    assertThat(clusterUpdate1.getLbPolicy()).isEqualTo(""round_robin"");
    assertThat(clusterUpdate1.isEnableLrs()).isEqualTo(false);

    ArgumentCaptor<ClusterUpdate> clusterUpdateCaptor2 = ArgumentCaptor.forClass(null);
    verify(watcher2).onClusterChanged(clusterUpdateCaptor2.capture());
    ClusterUpdate clusterUpdate2 = clusterUpdateCaptor2.getValue();
    assertThat(clusterUpdate2.getClusterName()).isEqualTo(""cluster-bar.googleapis.com"");
    assertThat(clusterUpdate2.getEdsServiceName())
        .isEqualTo(""eds-cluster-bar.googleapis.com"");
    assertThat(clusterUpdate2.getLbPolicy()).isEqualTo(""round_robin"");
    assertThat(clusterUpdate2.isEnableLrs()).isEqualTo(true);
    assertThat(clusterUpdate2.getLrsServerName()).isEqualTo("""");

    // Cancel one of the watcher.
    xdsClient.cancelClusterDataWatch(""cluster-foo.googleapis.com"", watcher1);

    // Since the cancelled watcher was the last watcher interested in that cluster (but there
    // is still interested resource), client sent an new CDS request to unsubscribe from
    // that cluster.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""1"", ""cluster-bar.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, ""0001"")));

    // Management server has nothing to respond.

    // Cancel the other watcher. All resources have been unsubscribed.
    xdsClient.cancelClusterDataWatch(""cluster-bar.googleapis.com"", watcher2);

    // All endpoint watchers have been cancelled. Due to protocol limitation, we do not send
    // a CDS request for updated resource names (empty) when canceling the last resource.
    verifyNoMoreInteractions(requestObserver);

    // Management server sends back a new CDS response.
    clusters = ImmutableList.of(
        Any.pack(buildCluster(""cluster-foo.googleapis.com"", null, true)),
        Any.pack(
            buildCluster(""cluster-bar.googleapis.com"", null, false)));
    response =
        buildDiscoveryResponse(""2"", clusters, XdsClientImpl.ADS_TYPE_URL_CDS, ""0002"");
    responseObserver.onNext(response);

    // Due to protocol limitation, client sent an ACK CDS request, with resource_names containing
    // the last unsubscribed resource.
    verify(requestObserver)
        .onNext(
            argThat(
                new DiscoveryRequestMatcher(""2"",
                    ImmutableList.of(""cluster-bar.googleapis.com""),
                    XdsClientImpl.ADS_TYPE_URL_CDS, ""0002"")));

    // Cancelled watchers do not receive notification.
    verifyNoMoreInteractions(watcher1, watcher2);

    // A new cluster watcher is added to watch cluster foo again.
    ClusterWatcher watcher3 = mock(ClusterWatcher.class);
    xdsClient.watchClusterData(""cluster-foo.googleapis.com"", watcher3);

    // A CDS request is sent to indicate subscription of ""cluster-foo.googleapis.com"" only.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""2"", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, ""0002"")));

    // Management server sends back a new CDS response for at least newly requested resources
    // (it is required to do so).
    clusters = ImmutableList.of(
        Any.pack(buildCluster(""cluster-foo.googleapis.com"", null, true)),
        Any.pack(
            buildCluster(""cluster-bar.googleapis.com"", null, false)));
    response =
        buildDiscoveryResponse(""3"", clusters, XdsClientImpl.ADS_TYPE_URL_CDS, ""0003"");
    responseObserver.onNext(response);

    // Notified with cached data immediately.
    ArgumentCaptor<ClusterUpdate> clusterUpdateCaptor3 = ArgumentCaptor.forClass(null);
    verify(watcher3).onClusterChanged(clusterUpdateCaptor3.capture());
    ClusterUpdate clusterUpdate3 = clusterUpdateCaptor3.getValue();
    assertThat(clusterUpdate3.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(clusterUpdate3.getEdsServiceName())
        .isEqualTo(""cluster-foo.googleapis.com"");  // default to cluster name
    assertThat(clusterUpdate3.getLbPolicy()).isEqualTo(""round_robin"");
    assertThat(clusterUpdate3.isEnableLrs()).isEqualTo(true);
    assertThat(clusterUpdate2.getLrsServerName()).isEqualTo("""");

    verifyNoMoreInteractions(watcher1, watcher2);

    // A CDS request is sent to re-subscribe the cluster again.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""3"", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, ""0003"")));
  }",False
39,edsResponseWithoutMatchingResource(),Method,,,"io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+endpointWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImplTest+endpointWatcher,2350,48,1,"/** 
 * Client receives an EDS response that does not contain a ClusterLoadAssignment for the requested resource while each received ClusterLoadAssignment is valid. The EDS response is ACKed. Endpoint watchers are NOT notified with an error (EDS protocol is incremental, responses not containing requested resources does not indicate absence).
 */
","/**
   * Client receives an EDS response that does not contain a ClusterLoadAssignment for the
   * requested resource while each received ClusterLoadAssignment is valid.
   * The EDS response is ACKed.
   * Endpoint watchers are NOT notified with an error (EDS protocol is incremental, responses
   * not containing requested resources does not indicate absence).
   */
  @Test
  public void edsResponseWithoutMatchingResource() {
    xdsClient.watchEndpointData(""cluster-foo.googleapis.com"", endpointWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an EDS request for the only cluster being watched to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    // Management server sends back an EDS response without ClusterLoadAssignment for the requested
    // cluster.
    List<Any> clusterLoadAssignments = ImmutableList.of(
        Any.pack(buildClusterLoadAssignment(""cluster-bar.googleapis.com"",
            ImmutableList.of(
                buildLocalityLbEndpoints(""region1"", ""zone1"", ""subzone1"",
                    ImmutableList.of(
                        buildLbEndpoint(""192.168.0.1"", 8080, HealthStatus.HEALTHY, 2)),
                    1, 0)),
            ImmutableList.<ClusterLoadAssignment.Policy.DropOverload>of())),
        Any.pack(buildClusterLoadAssignment(""cluster-baz.googleapis.com"",
            ImmutableList.of(
                buildLocalityLbEndpoints(""region2"", ""zone2"", ""subzone2"",
                    ImmutableList.of(
                        buildLbEndpoint(""192.168.234.52"", 8888, HealthStatus.UNKNOWN, 5)),
                    6, 1)),
            ImmutableList.<ClusterLoadAssignment.Policy.DropOverload>of())));

    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", clusterLoadAssignments,
            XdsClientImpl.ADS_TYPE_URL_EDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK EDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, ""0000"")));

    verifyZeroInteractions(endpointWatcher);
  }",False
40,edsResponseWithMatchingResource(),Method,,,"io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildDropOverload(String,int) io.grpc.xds.XdsClientImplTest+buildDropOverload(String,int) io.grpc.xds.XdsClientImplTest+buildDropOverload(String,int) io.grpc.xds.XdsClientImplTest+buildDropOverload(String,int) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getDropPolicies() io.grpc.xds.XdsClient.EndpointUpdate+getDropPolicies() io.grpc.xds.EnvoyProtoData.DropOverload+DropOverload(String,int) io.grpc.xds.EnvoyProtoData.DropOverload+DropOverload(String,int) io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.EnvoyProtoData.Locality+Locality(String,String,String) io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints+LocalityLbEndpoints(List<LbEndpoint>,int,int) io.grpc.xds.EnvoyProtoData.LbEndpoint+LbEndpoint(String,int,int,boolean) io.grpc.xds.EnvoyProtoData.Locality+Locality(String,String,String) io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints+LocalityLbEndpoints(List<LbEndpoint>,int,int) io.grpc.xds.EnvoyProtoData.LbEndpoint+LbEndpoint(String,int,int,boolean)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+endpointWatcher io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImplTest+endpointWatcher,3371,70,1,"/** 
 * Normal workflow of receiving an EDS response containing ClusterLoadAssignment message for a requested cluster.
 */
","/**
   * Normal workflow of receiving an EDS response containing ClusterLoadAssignment message for
   * a requested cluster.
   */
  @Test
  public void edsResponseWithMatchingResource() {
    xdsClient.watchEndpointData(""cluster-foo.googleapis.com"", endpointWatcher);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an EDS request for the only cluster being watched to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    // Management server sends back an EDS response with ClusterLoadAssignment for the requested
    // cluster.
    List<Any> clusterLoadAssignments = ImmutableList.of(
        Any.pack(buildClusterLoadAssignment(""cluster-foo.googleapis.com"",
            ImmutableList.of(
                buildLocalityLbEndpoints(""region1"", ""zone1"", ""subzone1"",
                    ImmutableList.of(
                        buildLbEndpoint(""192.168.0.1"", 8080, HealthStatus.HEALTHY, 2)),
                    1, 0),
                buildLocalityLbEndpoints(""region3"", ""zone3"", ""subzone3"",
                    ImmutableList.of(
                        buildLbEndpoint(""192.168.142.5"", 80, HealthStatus.UNKNOWN, 5)),
                    2, 1)),
            ImmutableList.of(
                buildDropOverload(""lb"", 200),
                buildDropOverload(""throttle"", 1000)))),
        Any.pack(buildClusterLoadAssignment(""cluster-baz.googleapis.com"",
            ImmutableList.of(
                buildLocalityLbEndpoints(""region2"", ""zone2"", ""subzone2"",
                    ImmutableList.of(
                        buildLbEndpoint(""192.168.234.52"", 8888, HealthStatus.UNKNOWN, 5)),
                    6, 1)),
            ImmutableList.<ClusterLoadAssignment.Policy.DropOverload>of())));

    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", clusterLoadAssignments,
            XdsClientImpl.ADS_TYPE_URL_EDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK EDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, ""0000"")));

    ArgumentCaptor<EndpointUpdate> endpointUpdateCaptor = ArgumentCaptor.forClass(null);
    verify(endpointWatcher).onEndpointChanged(endpointUpdateCaptor.capture());
    EndpointUpdate endpointUpdate = endpointUpdateCaptor.getValue();
    assertThat(endpointUpdate.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(endpointUpdate.getDropPolicies())
        .containsExactly(
            new DropOverload(""lb"", 200),
            new DropOverload(""throttle"", 1000));
    assertThat(endpointUpdate.getLocalityLbEndpointsMap())
        .containsExactly(
            new Locality(""region1"", ""zone1"", ""subzone1""),
            new LocalityLbEndpoints(
                ImmutableList.of(
                    new LbEndpoint(""192.168.0.1"", 8080,
                        2, true)), 1, 0),
            new Locality(""region3"", ""zone3"", ""subzone3""),
            new LocalityLbEndpoints(
                ImmutableList.of(
                    new LbEndpoint(""192.168.142.5"", 80,
                        5, true)), 2, 1));
  }",False
41,multipleEndpointWatchers(),Method,,,"io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String) io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.EnvoyProtoData.Locality+Locality(String,String,String) io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints+LocalityLbEndpoints(List<LbEndpoint>,int,int) io.grpc.xds.EnvoyProtoData.LbEndpoint+LbEndpoint(String,int,int,boolean) io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.EnvoyProtoData.Locality+Locality(String,String,String) io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints+LocalityLbEndpoints(List<LbEndpoint>,int,int) io.grpc.xds.EnvoyProtoData.LbEndpoint+LbEndpoint(String,int,int,boolean) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String) io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.EnvoyProtoData.Locality+Locality(String,String,String) io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints+LocalityLbEndpoints(List<LbEndpoint>,int,int) io.grpc.xds.EnvoyProtoData.LbEndpoint+LbEndpoint(String,int,int,boolean)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS,5217,107,1,,"@Test
  public void multipleEndpointWatchers() {
    EndpointWatcher watcher1 = mock(EndpointWatcher.class);
    EndpointWatcher watcher2 = mock(EndpointWatcher.class);
    EndpointWatcher watcher3 = mock(EndpointWatcher.class);
    xdsClient.watchEndpointData(""cluster-foo.googleapis.com"", watcher1);
    xdsClient.watchEndpointData(""cluster-foo.googleapis.com"", watcher2);
    xdsClient.watchEndpointData(""cluster-bar.googleapis.com"", watcher3);

    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an EDS request containing all clusters being watched to management server.
    verify(requestObserver)
        .onNext(
            argThat(
                new DiscoveryRequestMatcher("""",
                    ImmutableList.of(""cluster-foo.googleapis.com"", ""cluster-bar.googleapis.com""),
                    XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    // Management server sends back an EDS response contains ClusterLoadAssignment for only one of
    // requested cluster.
    List<Any> clusterLoadAssignments = ImmutableList.of(
        Any.pack(buildClusterLoadAssignment(""cluster-foo.googleapis.com"",
            ImmutableList.of(
                buildLocalityLbEndpoints(""region1"", ""zone1"", ""subzone1"",
                    ImmutableList.of(
                        buildLbEndpoint(""192.168.0.1"", 8080, HealthStatus.HEALTHY, 2)),
                    1, 0)),
            ImmutableList.<Policy.DropOverload>of())));

    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", clusterLoadAssignments,
            XdsClientImpl.ADS_TYPE_URL_EDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK EDS request.
    verify(requestObserver)
        .onNext(
            argThat(
                new DiscoveryRequestMatcher(""0"",
                    ImmutableList.of(""cluster-foo.googleapis.com"", ""cluster-bar.googleapis.com""),
                    XdsClientImpl.ADS_TYPE_URL_EDS, ""0000"")));

    // Two watchers get notification of endpoint update for the cluster they are interested in.
    ArgumentCaptor<EndpointUpdate> endpointUpdateCaptor1 = ArgumentCaptor.forClass(null);
    verify(watcher1).onEndpointChanged(endpointUpdateCaptor1.capture());
    EndpointUpdate endpointUpdate1 = endpointUpdateCaptor1.getValue();
    assertThat(endpointUpdate1.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(endpointUpdate1.getLocalityLbEndpointsMap())
        .containsExactly(
            new Locality(""region1"", ""zone1"", ""subzone1""),
            new LocalityLbEndpoints(
                ImmutableList.of(
                    new LbEndpoint(""192.168.0.1"", 8080,
                        2, true)), 1, 0));

    ArgumentCaptor<EndpointUpdate> endpointUpdateCaptor2 = ArgumentCaptor.forClass(null);
    verify(watcher1).onEndpointChanged(endpointUpdateCaptor2.capture());
    EndpointUpdate endpointUpdate2 = endpointUpdateCaptor2.getValue();
    assertThat(endpointUpdate2.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(endpointUpdate2.getLocalityLbEndpointsMap())
        .containsExactly(
            new Locality(""region1"", ""zone1"", ""subzone1""),
            new LocalityLbEndpoints(
                ImmutableList.of(
                    new LbEndpoint(""192.168.0.1"", 8080,
                        2, true)), 1, 0));

    verifyZeroInteractions(watcher3);

    // Management server sends back another EDS response contains ClusterLoadAssignment for the
    // other requested cluster.
    clusterLoadAssignments = ImmutableList.of(
        Any.pack(buildClusterLoadAssignment(""cluster-bar.googleapis.com"",
            ImmutableList.of(
                buildLocalityLbEndpoints(""region2"", ""zone2"", ""subzone2"",
                    ImmutableList.of(
                        buildLbEndpoint(""192.168.234.52"", 8888, HealthStatus.UNKNOWN, 5)),
                    6, 1)),
            ImmutableList.<ClusterLoadAssignment.Policy.DropOverload>of())));

    response = buildDiscoveryResponse(""1"", clusterLoadAssignments,
        XdsClientImpl.ADS_TYPE_URL_EDS, ""0001"");
    responseObserver.onNext(response);

    // Client sent an ACK EDS request.
    verify(requestObserver)
        .onNext(
            argThat(
                new DiscoveryRequestMatcher(""1"",
                    ImmutableList.of(""cluster-foo.googleapis.com"", ""cluster-bar.googleapis.com""),
                    XdsClientImpl.ADS_TYPE_URL_EDS, ""0001"")));

    // The corresponding watcher gets notified.
    ArgumentCaptor<EndpointUpdate> endpointUpdateCaptor3 = ArgumentCaptor.forClass(null);
    verify(watcher3).onEndpointChanged(endpointUpdateCaptor3.capture());
    EndpointUpdate endpointUpdate3 = endpointUpdateCaptor3.getValue();
    assertThat(endpointUpdate3.getClusterName()).isEqualTo(""cluster-bar.googleapis.com"");
    assertThat(endpointUpdate3.getLocalityLbEndpointsMap())
        .containsExactly(
            new Locality(""region2"", ""zone2"", ""subzone2""),
            new LocalityLbEndpoints(
                ImmutableList.of(
                    new LbEndpoint(""192.168.234.52"", 8888,
                        5, true)), 6, 1));
  }",False
42,watchEndpointsForClusterAlreadyBeingWatched(),Method,,,"io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getDropPolicies() io.grpc.xds.XdsClient.EndpointUpdate+getDropPolicies() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.EnvoyProtoData.Locality+Locality(String,String,String) io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints+LocalityLbEndpoints(List<LbEndpoint>,int,int) io.grpc.xds.EnvoyProtoData.LbEndpoint+LbEndpoint(String,int,int,boolean) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getDropPolicies() io.grpc.xds.XdsClient.EndpointUpdate+getDropPolicies() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.EnvoyProtoData.Locality+Locality(String,String,String) io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints+LocalityLbEndpoints(List<LbEndpoint>,int,int) io.grpc.xds.EnvoyProtoData.LbEndpoint+LbEndpoint(String,int,int,boolean)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImplTest+xdsClient,3573,72,1,"/** 
 * (EDS response caching behavior) An endpoint watcher is registered for a cluster that already has some other endpoint watchers watching on. Endpoint information received previously is in local cache and notified to the new watcher immediately.
 */
","/**
   * (EDS response caching behavior) An endpoint watcher is registered for a cluster that already
   * has some other endpoint watchers watching on. Endpoint information received previously is
   * in local cache and notified to the new watcher immediately.
   */
  @Test
  public void watchEndpointsForClusterAlreadyBeingWatched() {
    EndpointWatcher watcher1 = mock(EndpointWatcher.class);
    xdsClient.watchEndpointData(""cluster-foo.googleapis.com"", watcher1);
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends first EDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    // Management server sends back an EDS response containing ClusterLoadAssignments for
    // some cluster not requested.
    List<Any> clusterLoadAssignments = ImmutableList.of(
        Any.pack(buildClusterLoadAssignment(""cluster-foo.googleapis.com"",
            ImmutableList.of(
                buildLocalityLbEndpoints(""region1"", ""zone1"", ""subzone1"",
                    ImmutableList.of(
                        buildLbEndpoint(""192.168.0.1"", 8080, HealthStatus.HEALTHY, 2)),
                    1, 0)),
            ImmutableList.<Policy.DropOverload>of())));

    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", clusterLoadAssignments,
            XdsClientImpl.ADS_TYPE_URL_EDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK EDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, ""0000"")));

    ArgumentCaptor<EndpointUpdate> endpointUpdateCaptor1 = ArgumentCaptor.forClass(null);
    verify(watcher1).onEndpointChanged(endpointUpdateCaptor1.capture());
    EndpointUpdate endpointUpdate1 = endpointUpdateCaptor1.getValue();
    assertThat(endpointUpdate1.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(endpointUpdate1.getDropPolicies()).isEmpty();
    assertThat(endpointUpdate1.getLocalityLbEndpointsMap())
        .containsExactly(
            new Locality(""region1"", ""zone1"", ""subzone1""),
            new LocalityLbEndpoints(
                ImmutableList.of(
                    new LbEndpoint(""192.168.0.1"", 8080,
                        2, true)), 1, 0));

    // A second endpoint watcher is registered for endpoints in the same cluster.
    EndpointWatcher watcher2 = mock(EndpointWatcher.class);
    xdsClient.watchEndpointData(""cluster-foo.googleapis.com"", watcher2);

    // Cached endpoint information is notified to the new watcher immediately, without sending
    // another EDS request.
    ArgumentCaptor<EndpointUpdate> endpointUpdateCaptor2 = ArgumentCaptor.forClass(null);
    verify(watcher2).onEndpointChanged(endpointUpdateCaptor2.capture());
    EndpointUpdate endpointUpdate2 = endpointUpdateCaptor2.getValue();
    assertThat(endpointUpdate2.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(endpointUpdate2.getDropPolicies()).isEmpty();
    assertThat(endpointUpdate2.getLocalityLbEndpointsMap())
        .containsExactly(
            new Locality(""region1"", ""zone1"", ""subzone1""),
            new LocalityLbEndpoints(
                ImmutableList.of(
                    new LbEndpoint(""192.168.0.1"", 8080,
                        2, true)), 1, 0));

    verifyNoMoreInteractions(requestObserver);
  }",False
43,addRemoveEndpointWatchersFreely(),Method,,,"io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.EnvoyProtoData.Locality+Locality(String,String,String) io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints+LocalityLbEndpoints(List<LbEndpoint>,int,int) io.grpc.xds.EnvoyProtoData.LbEndpoint+LbEndpoint(String,int,int,boolean) io.grpc.xds.EnvoyProtoData.LbEndpoint+LbEndpoint(String,int,int,boolean) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String) io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.EnvoyProtoData.Locality+Locality(String,String,String) io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints+LocalityLbEndpoints(List<LbEndpoint>,int,int) io.grpc.xds.EnvoyProtoData.LbEndpoint+LbEndpoint(String,int,int,boolean) io.grpc.xds.XdsClientImpl+cancelEndpointDataWatch(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+cancelEndpointDataWatch(String,EndpointWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImpl+cancelEndpointDataWatch(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+cancelEndpointDataWatch(String,EndpointWatcher) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildClusterLoadAssignment(String,List<LocalityLbEndpoints>,List<DropOverload>) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLocalityLbEndpoints(String,String,String,List<LbEndpoint>,int,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildLbEndpoint(String,int,HealthStatus,int) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getClusterName() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.XdsClient.EndpointUpdate+getLocalityLbEndpointsMap() io.grpc.xds.EnvoyProtoData.Locality+Locality(String,String,String) io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints+LocalityLbEndpoints(List<LbEndpoint>,int,int) io.grpc.xds.EnvoyProtoData.LbEndpoint+LbEndpoint(String,int,int,boolean) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String)",io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+responseObservers io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS,9429,201,1,,"@Test
  public void addRemoveEndpointWatchersFreely() {
    EndpointWatcher watcher1 = mock(EndpointWatcher.class);
    xdsClient.watchEndpointData(""cluster-foo.googleapis.com"", watcher1);

    // Streaming RPC starts after a first watcher is added.
    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an EDS request to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    // Management server sends back an EDS response with ClusterLoadAssignment for the requested
    // cluster.
    List<Any> clusterLoadAssignments = ImmutableList.of(
        Any.pack(buildClusterLoadAssignment(""cluster-foo.googleapis.com"",
            ImmutableList.of(
                buildLocalityLbEndpoints(""region1"", ""zone1"", ""subzone1"",
                    ImmutableList.of(
                        buildLbEndpoint(""192.168.0.1"", 8080, HealthStatus.HEALTHY, 2),
                        buildLbEndpoint(""192.132.53.5"", 80, HealthStatus.UNHEALTHY, 5)),
                    1, 0)),
            ImmutableList.<Policy.DropOverload>of())));

    DiscoveryResponse response =
        buildDiscoveryResponse(""0"", clusterLoadAssignments,
            XdsClientImpl.ADS_TYPE_URL_EDS, ""0000"");
    responseObserver.onNext(response);

    // Client sent an ACK EDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""cluster-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, ""0000"")));

    ArgumentCaptor<EndpointUpdate> endpointUpdateCaptor1 = ArgumentCaptor.forClass(null);
    verify(watcher1).onEndpointChanged(endpointUpdateCaptor1.capture());
    EndpointUpdate endpointUpdate1 = endpointUpdateCaptor1.getValue();
    assertThat(endpointUpdate1.getClusterName()).isEqualTo(""cluster-foo.googleapis.com"");
    assertThat(endpointUpdate1.getLocalityLbEndpointsMap())
        .containsExactly(
            new Locality(""region1"", ""zone1"", ""subzone1""),
            new LocalityLbEndpoints(
                ImmutableList.of(
                    new LbEndpoint(""192.168.0.1"", 8080, 2, true),
                    new LbEndpoint(""192.132.53.5"", 80,5, false)),
                1, 0));

    // Add another endpoint watcher for a different cluster.
    EndpointWatcher watcher2 = mock(EndpointWatcher.class);
    xdsClient.watchEndpointData(""cluster-bar.googleapis.com"", watcher2);

    // Client sent a new EDS request for all interested resources.
    verify(requestObserver)
        .onNext(
            argThat(
                new DiscoveryRequestMatcher(""0"",
                    ImmutableList.of(""cluster-foo.googleapis.com"", ""cluster-bar.googleapis.com""),
                    XdsClientImpl.ADS_TYPE_URL_EDS, ""0000"")));

    // Management server sends back an EDS response with ClusterLoadAssignment for one of requested
    // cluster.
    clusterLoadAssignments = ImmutableList.of(
        Any.pack(buildClusterLoadAssignment(""cluster-bar.googleapis.com"",
            ImmutableList.of(
                buildLocalityLbEndpoints(""region2"", ""zone2"", ""subzone2"",
                    ImmutableList.of(
                        buildLbEndpoint(""192.168.312.6"", 443, HealthStatus.HEALTHY, 1)),
                    6, 1)),
            ImmutableList.<Policy.DropOverload>of())));

    response = buildDiscoveryResponse(""1"", clusterLoadAssignments,
        XdsClientImpl.ADS_TYPE_URL_EDS, ""0001"");
    responseObserver.onNext(response);

    // Client sent an ACK EDS request for all interested resources.
    verify(requestObserver)
        .onNext(
            argThat(
                new DiscoveryRequestMatcher(""1"",
                    ImmutableList.of(""cluster-foo.googleapis.com"", ""cluster-bar.googleapis.com""),
                    XdsClientImpl.ADS_TYPE_URL_EDS, ""0001"")));

    ArgumentCaptor<EndpointUpdate> endpointUpdateCaptor2 = ArgumentCaptor.forClass(null);
    verify(watcher2).onEndpointChanged(endpointUpdateCaptor2.capture());
    EndpointUpdate endpointUpdate2 = endpointUpdateCaptor2.getValue();
    assertThat(endpointUpdate2.getClusterName()).isEqualTo(""cluster-bar.googleapis.com"");
    assertThat(endpointUpdate2.getLocalityLbEndpointsMap())
        .containsExactly(
            new Locality(""region2"", ""zone2"", ""subzone2""),
            new LocalityLbEndpoints(
                ImmutableList.of(
                    new LbEndpoint(""192.168.312.6"", 443, 1, true)),
                6, 1));

    // Cancel one of the watcher.
    xdsClient.cancelEndpointDataWatch(""cluster-foo.googleapis.com"", watcher1);

    // Since the cancelled watcher was the last watcher interested in that cluster, client
    // sent an new EDS request to unsubscribe from that cluster.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""1"", ""cluster-bar.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, ""0001"")));

    // Management server should not respond as it had previously sent the requested resource.

    // Cancel the other watcher.
    xdsClient.cancelEndpointDataWatch(""cluster-bar.googleapis.com"", watcher2);

    // Since the cancelled watcher was the last watcher interested in that cluster, client
    // sent an new EDS request to unsubscribe from that cluster.
    verify(requestObserver)
        .onNext(
            argThat(
                new DiscoveryRequestMatcher(""1"",
                    ImmutableList.<String>of(),  // empty resources
                    XdsClientImpl.ADS_TYPE_URL_EDS, ""0001"")));

    // All endpoint watchers have been cancelled.

    // Management server sends back an EDS response for updating previously sent resources.
    clusterLoadAssignments = ImmutableList.of(
        Any.pack(buildClusterLoadAssignment(""cluster-foo.googleapis.com"",
            ImmutableList.of(
                buildLocalityLbEndpoints(""region3"", ""zone3"", ""subzone3"",
                    ImmutableList.of(
                        buildLbEndpoint(""192.168.432.6"", 80, HealthStatus.HEALTHY, 2)),
                    3, 0)),
            ImmutableList.<Policy.DropOverload>of())),
        Any.pack(buildClusterLoadAssignment(""cluster-bar.googleapis.com"",
            ImmutableList.of(
                buildLocalityLbEndpoints(""region4"", ""zone4"", ""subzone4"",
                    ImmutableList.of(
                        buildLbEndpoint(""192.168.75.6"", 8888, HealthStatus.HEALTHY, 2)),
                    3, 0)),
            ImmutableList.<Policy.DropOverload>of())));

    response = buildDiscoveryResponse(""2"", clusterLoadAssignments,
        XdsClientImpl.ADS_TYPE_URL_EDS, ""0002"");
    responseObserver.onNext(response);

    // Client sent an ACK EDS request.
    verify(requestObserver)
        .onNext(
            argThat(
                new DiscoveryRequestMatcher(""2"",
                    ImmutableList.<String>of(),  // empty resources
                    XdsClientImpl.ADS_TYPE_URL_EDS, ""0002"")));

    // Cancelled watchers do not receive notification.
    verifyNoMoreInteractions(watcher1, watcher2);

    // A new endpoint watcher is added to watch an old but was no longer interested in cluster.
    EndpointWatcher watcher3 = mock(EndpointWatcher.class);
    xdsClient.watchEndpointData(""cluster-bar.googleapis.com"", watcher3);

    // Nothing should be notified to the new watcher as we are still waiting management server's
    // latest response.
    // Cached endpoint data should have been purged.
    verify(watcher3, never()).onEndpointChanged(any(EndpointUpdate.class));

    // An EDS request is sent to re-subscribe the cluster again.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""2"", ""cluster-bar.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, ""0002"")));

    // Management server sends back an EDS response for re-subscribed resource.
    clusterLoadAssignments = ImmutableList.of(
        Any.pack(buildClusterLoadAssignment(""cluster-bar.googleapis.com"",
            ImmutableList.of(
                buildLocalityLbEndpoints(""region4"", ""zone4"", ""subzone4"",
                    ImmutableList.of(
                        buildLbEndpoint(""192.168.75.6"", 8888, HealthStatus.HEALTHY, 2)),
                    3, 0)),
            ImmutableList.<Policy.DropOverload>of())));

    response = buildDiscoveryResponse(""3"", clusterLoadAssignments,
        XdsClientImpl.ADS_TYPE_URL_EDS, ""0003"");
    responseObserver.onNext(response);

    ArgumentCaptor<EndpointUpdate> endpointUpdateCaptor3 = ArgumentCaptor.forClass(null);
    verify(watcher3).onEndpointChanged(endpointUpdateCaptor3.capture());
    EndpointUpdate endpointUpdate3 = endpointUpdateCaptor3.getValue();
    assertThat(endpointUpdate3.getClusterName()).isEqualTo(""cluster-bar.googleapis.com"");
    assertThat(endpointUpdate3.getLocalityLbEndpointsMap())
        .containsExactly(
            new Locality(""region4"", ""zone4"", ""subzone4""),
            new LocalityLbEndpoints(
                ImmutableList.of(
                    new LbEndpoint(""192.168.75.6"", 8888, 2, true)),
                3, 0));

    // Client sent an ACK EDS request.
    verify(requestObserver)
        .onNext(
            argThat(
                new DiscoveryRequestMatcher(""3"",
                    ImmutableList.of(""cluster-bar.googleapis.com""),
                    XdsClientImpl.ADS_TYPE_URL_EDS, ""0003"")));
  }",False
44,streamClosedAndRetryWhenResolvingConfig(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.Status+asException() io.grpc.Status+asException() io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.Status+asException() io.grpc.Status+asException() io.grpc.internal.FakeClock+runDueTasks() io.grpc.internal.FakeClock+runDueTasks() io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.Status+asException() io.grpc.Status+asException() io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClient.ConfigWatcher+onConfigChanged(ConfigUpdate) io.grpc.xds.XdsClient.ConfigWatcher+onConfigChanged(ConfigUpdate) io.grpc.xds.XdsClient.ConfigUpdate.Builder+build() io.grpc.xds.XdsClient.ConfigUpdate.Builder+setClusterName(String) io.grpc.xds.XdsClient.ConfigUpdate+newBuilder() io.grpc.xds.XdsClient.ConfigUpdate+newBuilder() io.grpc.xds.XdsClient.ConfigUpdate.Builder+setClusterName(String) io.grpc.xds.XdsClient.ConfigUpdate.Builder+build() io.grpc.Status+asException() io.grpc.Status+asException() io.grpc.internal.FakeClock+runDueTasks() io.grpc.internal.FakeClock+runDueTasks() io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String)",io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+backoffPolicy2 io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+RPC_RETRY_TASK_FILTER io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.Status+UNAVAILABLE io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+RPC_RETRY_TASK_FILTER io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.Status+UNKNOWN io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.Status+UNKNOWN io.grpc.xds.XdsClientImplTest+backoffPolicy2 io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+RPC_RETRY_TASK_FILTER io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.Status+UNKNOWN io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+backoffPolicy2,6714,156,1,"/** 
 * RPC stream closed and retry during the period of first tiem resolving service config (LDS/RDS only).
 */
","/**
   * RPC stream closed and retry during the period of first tiem resolving service config
   * (LDS/RDS only).
   */
  @Test
  public void streamClosedAndRetryWhenResolvingConfig() {
    InOrder inOrder =
        Mockito.inOrder(mockedDiscoveryService, backoffPolicyProvider, backoffPolicy1,
            backoffPolicy2);
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);

    ArgumentCaptor<StreamObserver<DiscoveryResponse>> responseObserverCaptor =
        ArgumentCaptor.forClass(null);
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    StreamObserver<DiscoveryResponse> responseObserver =
        responseObserverCaptor.getValue();  // same as responseObservers.poll()
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    // Client sends an LDS request for the host name (with port) to management server.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    // Management server closes the RPC stream immediately.
    responseObserver.onCompleted();
    inOrder.verify(backoffPolicyProvider).get();
    inOrder.verify(backoffPolicy1).nextBackoffNanos();
    assertThat(fakeClock.getPendingTasks(RPC_RETRY_TASK_FILTER)).hasSize(1);

    // Retry after backoff.
    fakeClock.forwardNanos(9L);
    assertThat(requestObservers).isEmpty();
    fakeClock.forwardNanos(1L);
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    responseObserver = responseObserverCaptor.getValue();
    requestObserver = requestObservers.poll();

    // Client retried by sending an LDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    // Management server closes the RPC stream with an error.
    responseObserver.onError(Status.UNAVAILABLE.asException());
    verifyNoMoreInteractions(backoffPolicyProvider);
    inOrder.verify(backoffPolicy1).nextBackoffNanos();
    assertThat(fakeClock.getPendingTasks(RPC_RETRY_TASK_FILTER)).hasSize(1);

    // Retry after backoff.
    fakeClock.forwardNanos(99L);
    assertThat(requestObservers).isEmpty();
    fakeClock.forwardNanos(1L);
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    responseObserver = responseObserverCaptor.getValue();
    requestObserver = requestObservers.poll();

    // Client retried again by sending an LDS.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    // Management server responses with a listener for the requested resource.
    Rds rdsConfig =
        Rds.newBuilder()
            .setConfigSource(
                ConfigSource.newBuilder().setAds(AggregatedConfigSource.getDefaultInstance()))
            .setRouteConfigName(""route-foo.googleapis.com"")
            .build();

    List<Any> listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRds(rdsConfig).build())))
    );
    DiscoveryResponse ldsResponse =
        buildDiscoveryResponse(""0"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"");
    responseObserver.onNext(ldsResponse);

    // Client sent back an ACK LDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest(""0"", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"")));

    // Client sent an RDS request based on the received listener.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""route-foo.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_RDS, """")));

    // Management server encounters an error and closes the stream.
    responseObserver.onError(Status.UNKNOWN.asException());

    // Reset backoff and retry immediately.
    inOrder.verify(backoffPolicyProvider).get();
    fakeClock.runDueTasks();
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    responseObserver = responseObserverCaptor.getValue();
    requestObserver = requestObservers.poll();
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    // RPC stream closed immediately
    responseObserver.onError(Status.UNKNOWN.asException());
    inOrder.verify(backoffPolicy2).nextBackoffNanos();
    assertThat(fakeClock.getPendingTasks(RPC_RETRY_TASK_FILTER)).hasSize(1);

    // Retry after backoff.
    fakeClock.forwardNanos(19L);
    assertThat(requestObservers).isEmpty();
    fakeClock.forwardNanos(1L);
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    responseObserver = responseObserverCaptor.getValue();
    requestObserver = requestObservers.poll();
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    // Management server sends an LDS response.
    responseObserver.onNext(ldsResponse);

    // Client sends an ACK LDS request and an RDS request for ""route-foo.googleapis.com"". (Omitted)

    List<Any> routeConfigs = ImmutableList.of(
        Any.pack(
            buildRouteConfiguration(
                ""route-foo.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com""),
                        ""cluster.googleapis.com"")))));
    DiscoveryResponse rdsResponse =
        buildDiscoveryResponse(""0"", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"");
    // Management server sends an RDS response.
    responseObserver.onNext(rdsResponse);

    // Client has resolved the cluster based on the RDS response.
    configWatcher
        .onConfigChanged(
            eq(ConfigUpdate.newBuilder().setClusterName(""cluster.googleapis.com"").build()));

    // RPC stream closed with an error again.
    responseObserver.onError(Status.UNKNOWN.asException());

    // Reset backoff and retry immediately.
    inOrder.verify(backoffPolicyProvider).get();
    fakeClock.runDueTasks();
    requestObserver = requestObservers.poll();
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    verifyNoMoreInteractions(backoffPolicyProvider, backoffPolicy1, backoffPolicy2);
  }",False
45,streamClosedAndRetry(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+waitUntilConfigResolved(StreamObserver<DiscoveryResponse>) io.grpc.xds.XdsClientImplTest+waitUntilConfigResolved(StreamObserver<DiscoveryResponse>) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.Status+asException() io.grpc.Status+asException() io.grpc.internal.FakeClock+runDueTasks() io.grpc.internal.FakeClock+runDueTasks() io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.Status+asException() io.grpc.Status+asException() io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.Status+asException() io.grpc.Status+asException() io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.internal.FakeClock+runDueTasks() io.grpc.internal.FakeClock+runDueTasks() io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.Status+asException() io.grpc.Status+asException() io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String)",io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+backoffPolicy2 io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+clusterWatcher io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+endpointWatcher io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.Status+UNKNOWN io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.Status+UNAVAILABLE io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+RPC_RETRY_TASK_FILTER io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.Status+UNAVAILABLE io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+RPC_RETRY_TASK_FILTER io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.Status+UNAVAILABLE io.grpc.xds.XdsClientImplTest+backoffPolicy2 io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+RPC_RETRY_TASK_FILTER io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+backoffPolicy2,6919,159,1,"/** 
 * RPC stream close and retry while there are config/cluster/endpoint watchers registered.
 */
","/**
   * RPC stream close and retry while there are config/cluster/endpoint watchers registered.
   */
  @Test
  public void streamClosedAndRetry() {
    InOrder inOrder =
        Mockito.inOrder(mockedDiscoveryService, backoffPolicyProvider, backoffPolicy1,
            backoffPolicy2);
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);

    ArgumentCaptor<StreamObserver<DiscoveryResponse>> responseObserverCaptor =
        ArgumentCaptor.forClass(null);
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    StreamObserver<DiscoveryResponse> responseObserver =
        responseObserverCaptor.getValue();  // same as responseObservers.poll()
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    waitUntilConfigResolved(responseObserver);

    // Start watching cluster information.
    xdsClient.watchClusterData(""cluster.googleapis.com"", clusterWatcher);

    // Client sent first CDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));

    // Start watching endpoint information.
    xdsClient.watchEndpointData(""cluster.googleapis.com"", endpointWatcher);

    // Client sent first EDS request.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    // Management server closes the RPC stream with an error.
    responseObserver.onError(Status.UNKNOWN.asException());

    // Resets backoff and retry immediately.
    inOrder.verify(backoffPolicyProvider).get();
    fakeClock.runDueTasks();
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    responseObserver = responseObserverCaptor.getValue();
    requestObserver = requestObservers.poll();

    // Retry resumes requests for all wanted resources.
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    // Management server becomes unreachable.
    responseObserver.onError(Status.UNAVAILABLE.asException());
    inOrder.verify(backoffPolicy1).nextBackoffNanos();
    assertThat(fakeClock.getPendingTasks(RPC_RETRY_TASK_FILTER)).hasSize(1);

    // Retry after backoff.
    fakeClock.forwardNanos(9L);
    assertThat(requestObservers).isEmpty();
    fakeClock.forwardNanos(1L);
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    responseObserver = responseObserverCaptor.getValue();
    requestObserver = requestObservers.poll();
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    // Management server is still not reachable.
    responseObserver.onError(Status.UNAVAILABLE.asException());
    inOrder.verify(backoffPolicy1).nextBackoffNanos();
    assertThat(fakeClock.getPendingTasks(RPC_RETRY_TASK_FILTER)).hasSize(1);

    // Retry after backoff.
    fakeClock.forwardNanos(99L);
    assertThat(requestObservers).isEmpty();
    fakeClock.forwardNanos(1L);
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    responseObserver = responseObserverCaptor.getValue();
    requestObserver = requestObservers.poll();
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    // Management server sends back a CDS response.
    List<Any> clusters = ImmutableList.of(
        Any.pack(buildCluster(""cluster.googleapis.com"", null, false)));
    DiscoveryResponse cdsResponse =
        buildDiscoveryResponse(""0"", clusters, XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"");
    responseObserver.onNext(cdsResponse);

    // Client sent an CDS ACK request (Omitted).

    // Management server closes the RPC stream.
    responseObserver.onCompleted();

    // Resets backoff and retry immediately
    inOrder.verify(backoffPolicyProvider).get();
    fakeClock.runDueTasks();
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    responseObserver = responseObserverCaptor.getValue();
    requestObserver = requestObservers.poll();

    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    // Management server becomes unreachable again.
    responseObserver.onError(Status.UNAVAILABLE.asException());
    inOrder.verify(backoffPolicy2).nextBackoffNanos();
    assertThat(fakeClock.getPendingTasks(RPC_RETRY_TASK_FILTER)).hasSize(1);

    // Retry after backoff.
    fakeClock.forwardNanos(19L);
    assertThat(requestObservers).isEmpty();
    fakeClock.forwardNanos(1L);
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    requestObserver = requestObservers.poll();
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    verifyNoMoreInteractions(mockedDiscoveryService, backoffPolicyProvider, backoffPolicy1,
        backoffPolicy2);
  }",False
46,streamClosedAndRetryRaceWithAddingAndRemovingWatchers(),Method,,,"io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImpl+watchConfigData(String,int,ConfigWatcher) io.grpc.xds.XdsClientImplTest+waitUntilConfigResolved(StreamObserver<DiscoveryResponse>) io.grpc.xds.XdsClientImplTest+waitUntilConfigResolved(StreamObserver<DiscoveryResponse>) io.grpc.internal.FakeClock+runDueTasks() io.grpc.internal.FakeClock+runDueTasks() io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.Status+asException() io.grpc.Status+asException() io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+watchClusterData(String,ClusterWatcher) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.Status+asException() io.grpc.Status+asException() io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+watchEndpointData(String,EndpointWatcher) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildCluster(String,String,boolean) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.internal.FakeClock+runDueTasks() io.grpc.internal.FakeClock+runDueTasks() io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.Status+asException() io.grpc.Status+asException() io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.internal.FakeClock+getPendingTasks(TaskFilter) io.grpc.xds.XdsClientImpl+cancelClusterDataWatch(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+cancelClusterDataWatch(String,ClusterWatcher) io.grpc.xds.XdsClientImpl+cancelEndpointDataWatch(String,EndpointWatcher) io.grpc.xds.XdsClientImpl+cancelEndpointDataWatch(String,EndpointWatcher) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.internal.FakeClock+forwardNanos(long) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String)",io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+backoffPolicy2 io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+HOSTNAME io.grpc.xds.XdsClientImplTest+PORT io.grpc.xds.XdsClientImplTest+configWatcher io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.Status+UNAVAILABLE io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+RPC_RETRY_TASK_FILTER io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+clusterWatcher io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.Status+UNAVAILABLE io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+RPC_RETRY_TASK_FILTER io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+endpointWatcher io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.Status+UNAVAILABLE io.grpc.xds.XdsClientImplTest+backoffPolicy2 io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+RPC_RETRY_TASK_FILTER io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+clusterWatcher io.grpc.xds.XdsClientImplTest+xdsClient io.grpc.xds.XdsClientImplTest+endpointWatcher io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImplTest+fakeClock io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+requestObservers io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_CDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_EDS io.grpc.xds.XdsClientImplTest+mockedDiscoveryService io.grpc.xds.XdsClientImplTest+backoffPolicyProvider io.grpc.xds.XdsClientImplTest+backoffPolicy1 io.grpc.xds.XdsClientImplTest+backoffPolicy2,6368,145,1,"/** 
 * RPC stream closed and retry while some cluster/endpoint watchers have changed (added/removed).
 */
","/**
   * RPC stream closed and retry while some cluster/endpoint watchers have changed (added/removed).
   */
  @Test
  public void streamClosedAndRetryRaceWithAddingAndRemovingWatchers() {
    InOrder inOrder =
        Mockito.inOrder(mockedDiscoveryService, backoffPolicyProvider, backoffPolicy1,
            backoffPolicy2);
    xdsClient.watchConfigData(HOSTNAME, PORT, configWatcher);

    ArgumentCaptor<StreamObserver<DiscoveryResponse>> responseObserverCaptor =
        ArgumentCaptor.forClass(null);
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    StreamObserver<DiscoveryResponse> responseObserver =
        responseObserverCaptor.getValue();  // same as responseObservers.poll()
    requestObservers.poll();

    waitUntilConfigResolved(responseObserver);

    // Management server closes RPC stream.
    responseObserver.onCompleted();

    // Resets backoff and retry immediately.
    inOrder.verify(backoffPolicyProvider).get();
    fakeClock.runDueTasks();
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    responseObserver = responseObserverCaptor.getValue();
    StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();

    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));

    // Management server becomes unreachable.
    responseObserver.onError(Status.UNAVAILABLE.asException());
    inOrder.verify(backoffPolicy1).nextBackoffNanos();
    assertThat(fakeClock.getPendingTasks(RPC_RETRY_TASK_FILTER)).hasSize(1);

    // Start watching cluster information while RPC stream is still in retry backoff.
    xdsClient.watchClusterData(""cluster.googleapis.com"", clusterWatcher);

    // Retry after backoff.
    fakeClock.forwardNanos(9L);
    assertThat(requestObservers).isEmpty();
    fakeClock.forwardNanos(1L);
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    responseObserver = responseObserverCaptor.getValue();
    requestObserver = requestObservers.poll();

    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));

    // Management server is still unreachable.
    responseObserver.onError(Status.UNAVAILABLE.asException());
    inOrder.verify(backoffPolicy1).nextBackoffNanos();
    assertThat(fakeClock.getPendingTasks(RPC_RETRY_TASK_FILTER)).hasSize(1);

    // Start watching endpoint information while RPC stream is still in retry backoff.
    xdsClient.watchEndpointData(""cluster.googleapis.com"", endpointWatcher);

    // Retry after backoff.
    fakeClock.forwardNanos(99L);
    assertThat(requestObservers).isEmpty();
    fakeClock.forwardNanos(1L);
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    responseObserver = responseObserverCaptor.getValue();
    requestObserver = requestObservers.poll();

    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    // Management server sends back a CDS response.
    List<Any> clusters = ImmutableList.of(
        Any.pack(buildCluster(""cluster.googleapis.com"", null, false)));
    DiscoveryResponse cdsResponse =
        buildDiscoveryResponse(""0"", clusters, XdsClientImpl.ADS_TYPE_URL_CDS, ""0000"");
    responseObserver.onNext(cdsResponse);

    // Client sent an CDS ACK request (Omitted).

    // Management server closes the RPC stream again.
    responseObserver.onCompleted();

    // Resets backoff and retry immediately.
    inOrder.verify(backoffPolicyProvider).get();
    fakeClock.runDueTasks();
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    responseObserver = responseObserverCaptor.getValue();
    requestObserver = requestObservers.poll();
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));
    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    // Management server becomes unreachable again.
    responseObserver.onError(Status.UNAVAILABLE.asException());
    inOrder.verify(backoffPolicy2).nextBackoffNanos();
    assertThat(fakeClock.getPendingTasks(RPC_RETRY_TASK_FILTER)).hasSize(1);

    // No longer interested in previous cluster and endpoints in that cluster.
    xdsClient.cancelClusterDataWatch(""cluster.googleapis.com"", clusterWatcher);
    xdsClient.cancelEndpointDataWatch(""cluster.googleapis.com"", endpointWatcher);

    // Retry after backoff.
    fakeClock.forwardNanos(19L);
    assertThat(requestObservers).isEmpty();
    fakeClock.forwardNanos(1L);
    inOrder.verify(mockedDiscoveryService)
        .streamAggregatedResources(responseObserverCaptor.capture());
    requestObserver = requestObservers.poll();

    verify(requestObserver)
        .onNext(eq(buildDiscoveryRequest("""", ""foo.googleapis.com:8080"",
            XdsClientImpl.ADS_TYPE_URL_LDS, """")));
    verify(requestObserver, never())
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_CDS, """")));
    verify(requestObserver, never())
        .onNext(eq(buildDiscoveryRequest("""", ""cluster.googleapis.com"",
            XdsClientImpl.ADS_TYPE_URL_EDS, """")));

    verifyNoMoreInteractions(mockedDiscoveryService, backoffPolicyProvider, backoffPolicy1,
        backoffPolicy2);
  }",False
47,waitUntilConfigResolved(StreamObserver<DiscoveryResponse>),Method,streamClosedAndRetry() streamClosedAndRetryRaceWithAddingAndRemovingWatchers(),,"io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildListener(String,Any) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildRouteConfiguration(String,List<VirtualHost>) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildVirtualHost(List<String>,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryResponse(String,List<Any>,String,String)",io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_LDS io.grpc.xds.XdsClientImpl+ADS_TYPE_URL_RDS,1539,34,2,,"private void waitUntilConfigResolved(StreamObserver<DiscoveryResponse> responseObserver) {
    // Client sent an LDS request for resource ""foo.googleapis.com:8080"" (Omitted).

    // Management server responses with a listener telling client to do RDS.
    Rds rdsConfig =
        Rds.newBuilder()
            .setConfigSource(
                ConfigSource.newBuilder().setAds(AggregatedConfigSource.getDefaultInstance()))
            .setRouteConfigName(""route-foo.googleapis.com"")
            .build();

    List<Any> listeners = ImmutableList.of(
        Any.pack(buildListener(""foo.googleapis.com:8080"", /* matching resource */
            Any.pack(HttpConnectionManager.newBuilder().setRds(rdsConfig).build())))
    );
    DiscoveryResponse ldsResponse =
        buildDiscoveryResponse(""0"", listeners, XdsClientImpl.ADS_TYPE_URL_LDS, ""0000"");
    responseObserver.onNext(ldsResponse);

    // Client sent an LDS ACK request and an RDS request for resource
    // ""route-foo.googleapis.com"" (Omitted).

    // Management server sends an RDS response.
    List<Any> routeConfigs = ImmutableList.of(
        Any.pack(
            buildRouteConfiguration(
                ""route-foo.googleapis.com"",
                ImmutableList.of(
                    buildVirtualHost(ImmutableList.of(""foo.googleapis.com""),
                        ""cluster.googleapis.com"")))));
    DiscoveryResponse rdsResponse =
        buildDiscoveryResponse(""0"", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, ""0000"");
    responseObserver.onNext(rdsResponse);
  }",False
48,matchHostName_exactlyMatch(),Method,,,"io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String)",,602,10,1,,"@Test
  public void matchHostName_exactlyMatch() {
    String pattern = ""foo.googleapis.com"";
    assertThat(XdsClientImpl.matchHostName(""bar.googleapis.com"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""fo.googleapis.com"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""oo.googleapis.com"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""googleapis.com"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""foo.googleapis"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""foo.googleapis.com"", pattern)).isTrue();
  }",False
49,matchHostName_prefixWildcard(),Method,,,"io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String)",,781,13,1,,"@Test
  public void matchHostName_prefixWildcard() {
    String pattern = ""*.foo.googleapis.com"";
    assertThat(XdsClientImpl.matchHostName(""foo.googleapis.com"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""bar-baz.foo.googleapis"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""bar.foo.googleapis.com"", pattern)).isTrue();
    pattern = ""*-bar.foo.googleapis.com"";
    assertThat(XdsClientImpl.matchHostName(""bar.foo.googleapis.com"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""baz-bar.foo.googleapis"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""-bar.foo.googleapis.com"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""baz-bar.foo.googleapis.com"", pattern))
        .isTrue();
  }",False
50,matchHostName_postfixWildCard(),Method,,,"io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String) io.grpc.xds.XdsClientImpl+matchHostName(String,String)",,1003,16,1,,"@Test
  public void matchHostName_postfixWildCard() {
    String pattern = ""foo.*"";
    assertThat(XdsClientImpl.matchHostName(""bar.googleapis.com"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""bar.foo.googleapis.com"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""foo.googleapis.com"", pattern)).isTrue();
    assertThat(XdsClientImpl.matchHostName(""foo.com"", pattern)).isTrue();
    pattern = ""foo-*"";
    assertThat(XdsClientImpl.matchHostName(""bar-.googleapis.com"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""foo.googleapis.com"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""foo.googleapis.com"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""foo-"", pattern)).isFalse();
    assertThat(XdsClientImpl.matchHostName(""foo-bar.com"", pattern)).isTrue();
    assertThat(XdsClientImpl.matchHostName(""foo-.com"", pattern)).isTrue();
    assertThat(XdsClientImpl.matchHostName(""foo-bar"", pattern)).isTrue();
  }",False
51,"buildDiscoveryResponse(String,List<com.google.protobuf.Any>,String,String)",Method,,,,,373,10,10,,"private static DiscoveryResponse buildDiscoveryResponse(String versionInfo,
      List<com.google.protobuf.Any> resources, String typeUrl, String nonce) {
    return
        DiscoveryResponse.newBuilder()
            .setVersionInfo(versionInfo)
            .setTypeUrl(typeUrl)
            .addAllResources(resources)
            .setNonce(nonce)
            .build();
  }",True
52,"buildDiscoveryRequest(String,String,String,String)",Method,ldsResponseWithoutMatchingResource() ldsResponseWithoutMatchingResource() failToFindVirtualHostInLdsResponseInLineRouteConfig() resolveVirtualHostInLdsResponse() resolveVirtualHostInLdsResponse() rdsResponseWithoutMatchingResource() rdsResponseWithoutMatchingResource() rdsResponseWithoutMatchingResource() rdsResponseWithoutMatchingResource() resolveVirtualHostInRdsResponse() notifyUpdatedResources() notifyUpdatedResources() notifyUpdatedResources() notifyUpdatedResources() notifyUpdatedResources() notifyUpdatedResources() notifyUpdatedResources() waitRdsResponsesForRequestedResource() waitRdsResponsesForRequestedResource() waitRdsResponsesForRequestedResource() waitRdsResponsesForRequestedResource() waitRdsResponsesForRequestedResource() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() routeConfigurationRemovedNotifiedToWatcher() routeConfigurationRemovedNotifiedToWatcher() routeConfigurationRemovedNotifiedToWatcher() routeConfigurationRemovedNotifiedToWatcher() routeConfigurationRemovedNotifiedToWatcher() cdsResponseWithoutMatchingResource() cdsResponseWithoutMatchingResource() cdsResponseWithMatchingResource() cdsResponseWithMatchingResource() cdsResponseWithMatchingResource() cdsResponseWithUpstreamTlsContext() watchClusterAlreadyBeingWatched() watchClusterAlreadyBeingWatched() addRemoveClusterWatchersFreely() addRemoveClusterWatchersFreely() addRemoveClusterWatchersFreely() addRemoveClusterWatchersFreely() addRemoveClusterWatchersFreely() edsResponseWithoutMatchingResource() edsResponseWithoutMatchingResource() edsResponseWithMatchingResource() edsResponseWithMatchingResource() watchEndpointsForClusterAlreadyBeingWatched() watchEndpointsForClusterAlreadyBeingWatched() addRemoveEndpointWatchersFreely() addRemoveEndpointWatchersFreely() addRemoveEndpointWatchersFreely() addRemoveEndpointWatchersFreely() streamClosedAndRetryWhenResolvingConfig() streamClosedAndRetryWhenResolvingConfig() streamClosedAndRetryWhenResolvingConfig() streamClosedAndRetryWhenResolvingConfig() streamClosedAndRetryWhenResolvingConfig() streamClosedAndRetryWhenResolvingConfig() streamClosedAndRetryWhenResolvingConfig() streamClosedAndRetryWhenResolvingConfig() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetry() streamClosedAndRetryRaceWithAddingAndRemovingWatchers() streamClosedAndRetryRaceWithAddingAndRemovingWatchers() streamClosedAndRetryRaceWithAddingAndRemovingWatchers() streamClosedAndRetryRaceWithAddingAndRemovingWatchers() streamClosedAndRetryRaceWithAddingAndRemovingWatchers() streamClosedAndRetryRaceWithAddingAndRemovingWatchers() streamClosedAndRetryRaceWithAddingAndRemovingWatchers() streamClosedAndRetryRaceWithAddingAndRemovingWatchers() streamClosedAndRetryRaceWithAddingAndRemovingWatchers() streamClosedAndRetryRaceWithAddingAndRemovingWatchers() streamClosedAndRetryRaceWithAddingAndRemovingWatchers() streamClosedAndRetryRaceWithAddingAndRemovingWatchers(),,"io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String) io.grpc.xds.XdsClientImplTest+buildDiscoveryRequest(String,String,String,String)",,231,4,10,,"private static DiscoveryRequest buildDiscoveryRequest(String versionInfo,
      String resourceName, String typeUrl, String nonce) {
    return buildDiscoveryRequest(versionInfo, ImmutableList.of(resourceName), typeUrl, nonce);
  }",True
53,"buildDiscoveryRequest(String,List<String>,String,String)",Method,"addRemoveClusterWatchersFreely() buildDiscoveryRequest(String,String,String,String)",,,io.grpc.xds.XdsClientImplTest+NODE,400,11,10,,"private static DiscoveryRequest buildDiscoveryRequest(String versionInfo,
      List<String> resourceNames, String typeUrl, String nonce) {
    return
        DiscoveryRequest.newBuilder()
            .setVersionInfo(versionInfo)
            .setNode(NODE)
            .setTypeUrl(typeUrl)
            .addAllResourceNames(resourceNames)
            .setResponseNonce(nonce)
            .build();
  }",True
54,"buildListener(String,com.google.protobuf.Any)",Method,,,,,382,9,10,,"private static Listener buildListener(String name, com.google.protobuf.Any apiListener) {
    return
        Listener.newBuilder()
            .setName(name)
            .setAddress(Address.getDefaultInstance())
            .addFilterChains(FilterChain.getDefaultInstance())
            .setApiListener(ApiListener.newBuilder().setApiListener(apiListener))
            .build();
  }",True
55,"buildRouteConfiguration(String,List<VirtualHost>)",Method,ldsResponseWithoutMatchingResource() ldsResponseWithoutMatchingResource() failToFindVirtualHostInLdsResponseInLineRouteConfig() resolveVirtualHostInLdsResponse() resolveVirtualHostInLdsResponse() resolveVirtualHostInLdsResponse() rdsResponseWithoutMatchingResource() rdsResponseWithoutMatchingResource() resolveVirtualHostInRdsResponse() resolveVirtualHostInRdsResponse() failToFindVirtualHostInRdsResponse() failToFindVirtualHostInRdsResponse() matchingVirtualHostDoesNotContainRouteAction() notifyUpdatedResources() notifyUpdatedResources() notifyUpdatedResources() notifyUpdatedResources() waitRdsResponsesForRequestedResource() waitRdsResponsesForRequestedResource() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() routeConfigurationRemovedNotifiedToWatcher() streamClosedAndRetryWhenResolvingConfig() waitUntilConfigResolved(StreamObserver<DiscoveryResponse>),,,,260,8,10,,"private static RouteConfiguration buildRouteConfiguration(String name,
      List<VirtualHost> virtualHosts) {
    return
        RouteConfiguration.newBuilder()
            .setName(name)
            .addAllVirtualHosts(virtualHosts)
            .build();
  }",True
56,"buildVirtualHost(List<String>,String)",Method,ldsResponseWithoutMatchingResource() ldsResponseWithoutMatchingResource() failToFindVirtualHostInLdsResponseInLineRouteConfig() failToFindVirtualHostInLdsResponseInLineRouteConfig() resolveVirtualHostInLdsResponse() resolveVirtualHostInLdsResponse() resolveVirtualHostInLdsResponse() resolveVirtualHostInLdsResponse() rdsResponseWithoutMatchingResource() rdsResponseWithoutMatchingResource() resolveVirtualHostInRdsResponse() resolveVirtualHostInRdsResponse() resolveVirtualHostInRdsResponse() failToFindVirtualHostInRdsResponse() failToFindVirtualHostInRdsResponse() failToFindVirtualHostInRdsResponse() notifyUpdatedResources() notifyUpdatedResources() notifyUpdatedResources() notifyUpdatedResources() notifyUpdatedResources() notifyUpdatedResources() notifyUpdatedResources() waitRdsResponsesForRequestedResource() waitRdsResponsesForRequestedResource() waitRdsResponsesForRequestedResource() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() receiveRdsResponsesForRouteConfigurationsToBeUsedLater() routeConfigurationRemovedNotifiedToWatcher() streamClosedAndRetryWhenResolvingConfig() waitUntilConfigResolved(StreamObserver<DiscoveryResponse>),,,,585,13,10,,"private static VirtualHost buildVirtualHost(List<String> domains, String clusterName) {
    return
        VirtualHost.newBuilder()
            .setName(""virtualhost00.googleapis.com"")  // don't care
            .addAllDomains(domains)
            .addRoutes(Route.newBuilder()
                .setRoute(RouteAction.newBuilder().setCluster(""whatever cluster"")))
            .addRoutes(
                // Only the last (default) route matters.
                Route.newBuilder()
                    .setRoute(RouteAction.newBuilder().setCluster(clusterName)))
            .build();
  }",True
57,"buildCluster(String,String,boolean)",Method,cdsResponseWithoutMatchingResource() cdsResponseWithoutMatchingResource() cdsResponseWithMatchingResource() cdsResponseWithMatchingResource() cdsResponseWithMatchingResource() cdsResponseWithMatchingResource() cdsResponseWithMatchingResource() cdsResponseWithMatchingResource() cdsResponseWithUpstreamTlsContext() cdsResponseWithUpstreamTlsContext() multipleClusterWatchers() multipleClusterWatchers() multipleClusterWatchers() watchClusterAlreadyBeingWatched() addRemoveClusterWatchersFreely() addRemoveClusterWatchersFreely() addRemoveClusterWatchersFreely() addRemoveClusterWatchersFreely() addRemoveClusterWatchersFreely() addRemoveClusterWatchersFreely() addRemoveClusterWatchersFreely() streamClosedAndRetry() streamClosedAndRetryRaceWithAddingAndRemovingWatchers(),,"io.grpc.xds.XdsClientImplTest+buildSecureCluster(String,String,boolean,UpstreamTlsContext) io.grpc.xds.XdsClientImplTest+buildSecureCluster(String,String,boolean,UpstreamTlsContext)",,196,4,10,,"private static Cluster buildCluster(String clusterName, @Nullable String edsServiceName,
      boolean enableLrs) {
    return buildSecureCluster(clusterName, edsServiceName, enableLrs, null);
  }",True
58,"buildSecureCluster(String,String,boolean,UpstreamTlsContext)",Method,"cdsResponseWithUpstreamTlsContext() buildCluster(String,String,boolean)",,,,1040,22,10,,"private static Cluster buildSecureCluster(String clusterName, @Nullable String edsServiceName,
      boolean enableLrs, @Nullable UpstreamTlsContext upstreamTlsContext) {
    Cluster.Builder clusterBuilder = Cluster.newBuilder();
    clusterBuilder.setName(clusterName);
    clusterBuilder.setType(DiscoveryType.EDS);
    EdsClusterConfig.Builder edsClusterConfigBuilder = EdsClusterConfig.newBuilder();
    edsClusterConfigBuilder.setEdsConfig(
        ConfigSource.newBuilder().setAds(AggregatedConfigSource.getDefaultInstance()));
    if (edsServiceName != null) {
      edsClusterConfigBuilder.setServiceName(edsServiceName);
    }
    clusterBuilder.setEdsClusterConfig(edsClusterConfigBuilder);
    clusterBuilder.setLbPolicy(LbPolicy.ROUND_ROBIN);
    if (enableLrs) {
      clusterBuilder.setLrsServer(
          ConfigSource.newBuilder().setSelf(SelfConfigSource.getDefaultInstance()));
    }
    if (upstreamTlsContext != null) {
      clusterBuilder.setTlsContext(upstreamTlsContext);
    }
    return clusterBuilder.build();
  }",True
59,"buildClusterLoadAssignment(String,List<io.envoyproxy.envoy.api.v2.endpoint.LocalityLbEndpoints>,List<Policy.DropOverload>)",Method,,,,,563,13,10,,"private static ClusterLoadAssignment buildClusterLoadAssignment(String clusterName,
      List<io.envoyproxy.envoy.api.v2.endpoint.LocalityLbEndpoints> localityLbEndpoints,
      List<Policy.DropOverload> dropOverloads) {
    return
        ClusterLoadAssignment.newBuilder()
            .setClusterName(clusterName)
            .addAllEndpoints(localityLbEndpoints)
            .setPolicy(
                Policy.newBuilder()
                    .setDisableOverprovisioning(true)
                    .addAllDropOverloads(dropOverloads))
            .build();
  }",True
60,"buildDropOverload(String,int)",Method,edsResponseWithMatchingResource() edsResponseWithMatchingResource(),,,,395,10,10,,"private static Policy.DropOverload buildDropOverload(String category, int dropPerMillion) {
    return
        Policy.DropOverload.newBuilder()
            .setCategory(category)
            .setDropPercentage(
                FractionalPercent.newBuilder()
                    .setNumerator(dropPerMillion)
                    .setDenominator(DenominatorType.MILLION))
            .build();
  }",True
61,"buildLocalityLbEndpoints(String,String,String,List<io.envoyproxy.envoy.api.v2.endpoint.LbEndpoint>,int,int)",Method,,,,,762,16,10,,"private static io.envoyproxy.envoy.api.v2.endpoint.LocalityLbEndpoints buildLocalityLbEndpoints(
      String region, String zone, String subzone,
      List<io.envoyproxy.envoy.api.v2.endpoint.LbEndpoint> lbEndpoints,
      int loadBalancingWeight, int priority) {
    return
        io.envoyproxy.envoy.api.v2.endpoint.LocalityLbEndpoints.newBuilder()
            .setLocality(
                io.envoyproxy.envoy.api.v2.core.Locality.newBuilder()
                    .setRegion(region)
                    .setZone(zone)
                    .setSubZone(subzone))
            .addAllLbEndpoints(lbEndpoints)
            .setLoadBalancingWeight(UInt32Value.newBuilder().setValue(loadBalancingWeight))
            .setPriority(priority)
            .build();
  }",True
62,"buildLbEndpoint(String,int,HealthStatus,int)",Method,edsResponseWithoutMatchingResource() edsResponseWithoutMatchingResource() edsResponseWithMatchingResource() edsResponseWithMatchingResource() edsResponseWithMatchingResource() multipleEndpointWatchers() multipleEndpointWatchers() watchEndpointsForClusterAlreadyBeingWatched() addRemoveEndpointWatchersFreely() addRemoveEndpointWatchersFreely() addRemoveEndpointWatchersFreely() addRemoveEndpointWatchersFreely() addRemoveEndpointWatchersFreely() addRemoveEndpointWatchersFreely(),,,,671,12,10,,"private static io.envoyproxy.envoy.api.v2.endpoint.LbEndpoint buildLbEndpoint(String address,
      int port, HealthStatus healthStatus, int loadbalancingWeight) {
    return
        io.envoyproxy.envoy.api.v2.endpoint.LbEndpoint.newBuilder()
            .setEndpoint(
                io.envoyproxy.envoy.api.v2.endpoint.Endpoint.newBuilder().setAddress(
                    Address.newBuilder().setSocketAddress(
                        SocketAddress.newBuilder().setAddress(address).setPortValue(port))))
            .setHealthStatus(healthStatus).setLoadBalancingWeight(
                UInt32Value.newBuilder().setValue(loadbalancingWeight))
            .build();
  }",True
63,"buildUpstreamTlsContext(String,String)",Method,cdsResponseWithUpstreamTlsContext(),,,,842,20,10,,"private static UpstreamTlsContext buildUpstreamTlsContext(String secretName, String targetUri) {
    GrpcService grpcService =
        GrpcService.newBuilder()
            .setGoogleGrpc(GoogleGrpc.newBuilder().setTargetUri(targetUri))
            .build();
    ConfigSource sdsConfig =
        ConfigSource.newBuilder()
            .setApiConfigSource(ApiConfigSource.newBuilder().addGrpcServices(grpcService))
            .build();
    SdsSecretConfig validationContextSdsSecretConfig =
        SdsSecretConfig.newBuilder()
            .setName(secretName)
            .setSdsConfig(sdsConfig)
            .build();
    return UpstreamTlsContext.newBuilder()
        .setCommonTlsContext(
            CommonTlsContext.newBuilder()
                .setValidationContextSdsSecretConfig(validationContextSdsSecretConfig))
        .build();
  }",True
64,DiscoveryRequestMatcher,MemberClass,,,"io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,String,String,String) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+DiscoveryRequestMatcher(String,List<String>,String,String) io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+matches(DiscoveryRequest) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.util.Set+equals(Object) java.util.Set+equals(Object)",io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+versionInfo io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+typeUrl io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+resourceNames io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+responseNonce io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+versionInfo io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+resourceNames io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+typeUrl io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+responseNonce io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+typeUrl io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+versionInfo io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+responseNonce io.grpc.xds.XdsClientImplTest.DiscoveryRequestMatcher+resourceNames io.grpc.xds.XdsClientImplTest+NODE,1636,44,10,"/** 
 * Matcher for DiscoveryRequest without the comparison of error_details field, which is used for management server debugging purposes. <p>In general, if you are sure error_details field should not be set in a DiscoveryRequest, compare with message equality. Otherwise, this matcher is handy for comparing other fields only.
 */
","/**
   * Matcher for DiscoveryRequest without the comparison of error_details field, which is used for
   * management server debugging purposes.
   *
   * <p>In general, if you are sure error_details field should not be set in a DiscoveryRequest,
   * compare with message equality. Otherwise, this matcher is handy for comparing other fields
   * only.
   */
  private static class DiscoveryRequestMatcher implements ArgumentMatcher<DiscoveryRequest> {
    private final String versionInfo;
    private final String typeUrl;
    private final Set<String> resourceNames;
    private final String responseNonce;

    private DiscoveryRequestMatcher(String versionInfo, String resourceName, String typeUrl,
        String responseNonce) {
      this(versionInfo, ImmutableList.of(resourceName), typeUrl, responseNonce);
    }

    private DiscoveryRequestMatcher(String versionInfo, List<String> resourceNames, String typeUrl,
        String responseNonce) {
      this.versionInfo = versionInfo;
      this.resourceNames = new HashSet<>(resourceNames);
      this.typeUrl = typeUrl;
      this.responseNonce = responseNonce;
    }

    @Override
    public boolean matches(DiscoveryRequest argument) {
      if (!typeUrl.equals(argument.getTypeUrl())) {
        return false;
      }
      if (!versionInfo.equals(argument.getVersionInfo())) {
        return false;
      }
      if (!responseNonce.equals(argument.getResponseNonce())) {
        return false;
      }
      if (!resourceNames.equals(new HashSet<>(argument.getResourceNamesList()))) {
        return false;
      }
      return NODE.equals(argument.getNode());
    }
  }",False
