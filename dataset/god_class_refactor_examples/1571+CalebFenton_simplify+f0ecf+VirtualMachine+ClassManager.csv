index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,getParameterSize(List<String>),Method,getRootExecutionContext(String),org.cf.smalivm.opcode.InvokeOp+buildNonLocalCalleeContext(MethodState),java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object),,242,8,9,,"public static int getParameterSize(List<String> parameterTypes) {
        int result = 0;
        for (String type : parameterTypes) {
            result += type.equals(""J"") || type.equals(""D"") ? 2 : 1;
        }

        return result;
    }",False
2,buildLocalClasses(List<BuilderClassDef>),Method,"VirtualMachine(List<BuilderClassDef>,int,int,int)",,java.util.HashSet+HashSet(Collection) java.util.Set+add(E) java.util.Set+add(E),,350,9,10,,"private static Set<String> buildLocalClasses(List<BuilderClassDef> classDefs) {
        Set<String> result = new HashSet<String>(classDefs.size());
        for (BuilderClassDef classDef : classDefs) {
            String className = ReferenceUtil.getReferenceString(classDef);
            result.add(className);
        }

        return result;
    }",True
3,buildMethodDescriptorToBuilderMethod(List<BuilderClassDef>),Method,"VirtualMachine(List<BuilderClassDef>,int,int,int)",,java.util.HashMap+HashMap(Map),,522,11,10,,"private static Map<String, BuilderMethod> buildMethodDescriptorToBuilderMethod(List<BuilderClassDef> classDefs) {
        Map<String, BuilderMethod> result = new HashMap<String, BuilderMethod>(classDefs.size());
        for (BuilderClassDef classDef : classDefs) {
            for (BuilderMethod method : classDef.getMethods()) {
                String methodDescriptor = ReferenceUtil.getMethodDescriptor(method);
                result.put(methodDescriptor, method);
            }
        }

        return result;
    }",True
4,buildMethodDescriptorToParameterTypes(List<BuilderClassDef>),Method,"VirtualMachine(List<BuilderClassDef>,int,int,int)",,"java.util.HashMap+HashMap(Map) java.util.ArrayList+ArrayList(int) java.util.List+size() java.util.List+size() java.util.List+add(E) java.util.List+add(E) java.util.List+add(int,E) java.util.List+add(int,E) java.util.Map+put(K,V) java.util.Map+put(K,V)",,1243,24,10,,"private static Map<String, List<String>> buildMethodDescriptorToParameterTypes(List<BuilderClassDef> classDefs) {
        Map<String, List<String>> result = new HashMap<String, List<String>>(classDefs.size());
        for (BuilderClassDef classDef : classDefs) {
            for (BuilderMethod method : classDef.getMethods()) {
                List<? extends BuilderMethodParameter> builderParameters = method.getParameters();
                List<String> parameterTypes = new ArrayList<String>(builderParameters.size());
                for (BuilderMethodParameter builderParameter : builderParameters) {
                    parameterTypes.add(builderParameter.getType());
                }

                int accessFlags = method.getAccessFlags();
                boolean isStatic = ((accessFlags & AccessFlags.STATIC.getValue()) != 0);
                if (!isStatic) {
                    // First ""parameter"" for non-static methods is instance ref
                    parameterTypes.add(0, method.getDefiningClass());
                }

                String methodDescriptor = ReferenceUtil.getMethodDescriptor(method);
                result.put(methodDescriptor, parameterTypes);
            }
        }

        return result;
    }",True
5,buildMethodDescriptorToTryCatchList(List<BuilderClassDef>),Method,"VirtualMachine(List<BuilderClassDef>,int,int,int)",,java.util.HashMap+HashMap(),,843,17,10,,"private static Map<String, List<? extends TryBlock<? extends ExceptionHandler>>> buildMethodDescriptorToTryCatchList(
                    List<BuilderClassDef> classDefs) {
        Map<String, List<? extends TryBlock<? extends ExceptionHandler>>> result = new HashMap<String, List<? extends TryBlock<? extends ExceptionHandler>>>();
        for (BuilderClassDef classDef : classDefs) {
            for (BuilderMethod method : classDef.getMethods()) {
                String methodDescriptor = ReferenceUtil.getMethodDescriptor(method);
                MethodImplementation implementation = method.getImplementation();
                if (implementation == null) {
                    continue;
                }
                result.put(methodDescriptor, implementation.getTryBlocks());
            }
        }

        return result;

    }",True
6,getClassNameFromMethodDescriptor(String),Method,"execute(String,ExecutionContext,ExecutionContext,int[]) getRootExecutionContext(String)",,"java.lang.String+split(String,int) java.lang.String+split(String,int)",,138,3,10,,"private static String getClassNameFromMethodDescriptor(String methodDescriptor) {
        return methodDescriptor.split(""->"", 2)[0];
    }",False
7,"getMutableParameterConsensus(TIntList,ExecutionGraph,int)",Method,"collapseMultiverse(String,ExecutionGraph,ExecutionContext,ExecutionContext,int[])",,org.cf.smalivm.context.ExecutionGraph+getNodePile(int) org.cf.smalivm.context.ExecutionGraph+getNodePile(int) org.cf.smalivm.context.MethodState+peekParameter(int) org.cf.smalivm.context.ExecutionContext+getMethodState() org.cf.smalivm.context.ExecutionNode+getContext() org.cf.smalivm.context.ExecutionNode+getContext() org.cf.smalivm.context.ExecutionContext+getMethodState() org.cf.smalivm.context.MethodState+peekParameter(int) org.cf.smalivm.context.ExecutionGraph+getNodePile(int) org.cf.smalivm.context.ExecutionGraph+getNodePile(int) org.cf.smalivm.context.MethodState+peekParameter(int) org.cf.smalivm.context.ExecutionContext+getMethodState() org.cf.smalivm.context.ExecutionNode+getContext() org.cf.smalivm.context.ExecutionNode+getContext() org.cf.smalivm.context.ExecutionContext+getMethodState() org.cf.smalivm.context.MethodState+peekParameter(int) org.cf.smalivm.type.UnknownValue+UnknownValue(String) org.cf.smalivm.type.TypeUtil+getValueType(Object) org.cf.smalivm.type.TypeUtil+getValueType(Object),org.cf.smalivm.VirtualMachine+log org.cf.smalivm.VirtualMachine+log,976,22,10,,"private static Object getMutableParameterConsensus(TIntList addressList, ExecutionGraph graph, int parameterIndex) {
        ExecutionNode firstNode = graph.getNodePile(addressList.get(0)).get(0);
        Object value = firstNode.getContext().getMethodState().peekParameter(parameterIndex);
        int[] addresses = addressList.toArray();
        for (int address : addresses) {
            List<ExecutionNode> nodes = graph.getNodePile(address);
            for (ExecutionNode node : nodes) {
                Object otherValue = node.getContext().getMethodState().peekParameter(parameterIndex);

                if (value != otherValue) {
                    if (log.isTraceEnabled()) {
                        log.trace(""No conensus value for parameterIndex #"" + parameterIndex + "", returning unknown"");
                    }

                    return new UnknownValue(TypeUtil.getValueType(value));
                }
            }

        }

        return value;
    }",False
8,log,Field,,,,,96,1,26,,private static final Logger log = LoggerFactory.getLogger(VirtualMachine.class.getSimpleName());,False
9,DEFAULT_MAX_ADDRESS_VISITS,Field,,,,,58,1,26,,private static final int DEFAULT_MAX_ADDRESS_VISITS = 500;,False
10,DEFAULT_MAX_METHOD_VISITS,Field,,,,,86,1,26,,private static final int DEFAULT_MAX_METHOD_VISITS = DEFAULT_MAX_ADDRESS_VISITS * 500;,False
11,DEFAULT_MAX_CALL_DEPTH,Field,,,,,53,1,26,,private static final int DEFAULT_MAX_CALL_DEPTH = 20;,False
12,localClasses,Field,,,,,39,1,18,,private final Set<String> localClasses;,True
13,maxCallDepth,Field,"VirtualMachine(List<BuilderClassDef>,int,int,int)",,,,31,1,18,,private final int maxCallDepth;,False
14,maxAddressVisits,Field,"VirtualMachine(List<BuilderClassDef>,int,int,int)",,,,35,1,18,,private final int maxAddressVisits;,False
15,maxMethodVisits,Field,"VirtualMachine(List<BuilderClassDef>,int,int,int)",,,,34,1,18,,private final int maxMethodVisits;,False
16,methodDescriptorToBuilderMethod,Field,,,,,73,1,18,,"private final Map<String, BuilderMethod> methodDescriptorToBuilderMethod;",True
17,methodDescriptorToParameterTypes,Field,,,,,73,1,18,,"private final Map<String, List<String>> methodDescriptorToParameterTypes;",True
18,methodDescriptorToTemplateContextGraph,Field,,,,,81,1,18,,"private final Map<String, ExecutionGraph> methodDescriptorToTemplateContextGraph;",True
19,methodDescriptorToTryCatchList,Field,,,,,111,1,18,,"private final Map<String, List<? extends TryBlock<? extends ExceptionHandler>>> methodDescriptorToTryCatchList;",True
20,classNameToFieldNameAndType,Field,,,,,68,1,18,,"private final Map<String, List<String>> classNameToFieldNameAndType;",True
21,methodExecutor,Field,,,,,44,1,18,,private final MethodExecutor methodExecutor;,False
22,VirtualMachine(List<BuilderClassDef>),Method,,,,org.cf.smalivm.VirtualMachine+DEFAULT_MAX_ADDRESS_VISITS org.cf.smalivm.VirtualMachine+DEFAULT_MAX_CALL_DEPTH org.cf.smalivm.VirtualMachine+DEFAULT_MAX_METHOD_VISITS,166,3,1,,"public VirtualMachine(List<BuilderClassDef> classDefs) {
        this(classDefs, DEFAULT_MAX_ADDRESS_VISITS, DEFAULT_MAX_CALL_DEPTH, DEFAULT_MAX_METHOD_VISITS);
    }",False
23,"VirtualMachine(List<BuilderClassDef>,int,int,int)",Method,,,org.cf.smalivm.VirtualMachine+buildLocalClasses(List<BuilderClassDef>) org.cf.smalivm.VirtualMachine+buildLocalClasses(List<BuilderClassDef>) org.cf.smalivm.VirtualMachine+buildMethodDescriptorToBuilderMethod(List<BuilderClassDef>) org.cf.smalivm.VirtualMachine+buildMethodDescriptorToBuilderMethod(List<BuilderClassDef>) org.cf.smalivm.VirtualMachine+buildMethodDescriptorToParameterTypes(List<BuilderClassDef>) org.cf.smalivm.VirtualMachine+buildMethodDescriptorToParameterTypes(List<BuilderClassDef>) org.cf.smalivm.VirtualMachine+buildMethodDescriptorToTryCatchList(List<BuilderClassDef>) org.cf.smalivm.VirtualMachine+buildMethodDescriptorToTryCatchList(List<BuilderClassDef>) org.cf.smalivm.VirtualMachine+buildClassNameToFieldNameAndType(List<BuilderClassDef>) org.cf.smalivm.VirtualMachine+buildClassNameToFieldNameAndType(List<BuilderClassDef>) org.cf.smalivm.MethodExecutor+MethodExecutor(VirtualMachine) java.util.HashMap+HashMap() org.cf.smalivm.VirtualMachine+buildMethodDescriptorToTemplateContextGraph(List<BuilderClassDef>) org.cf.smalivm.VirtualMachine+buildMethodDescriptorToTemplateContextGraph(List<BuilderClassDef>),org.cf.smalivm.VirtualMachine+maxAddressVisits org.cf.smalivm.VirtualMachine+maxAddressVisits org.cf.smalivm.VirtualMachine+maxMethodVisits org.cf.smalivm.VirtualMachine+maxMethodVisits org.cf.smalivm.VirtualMachine+maxCallDepth org.cf.smalivm.VirtualMachine+maxCallDepth org.cf.smalivm.VirtualMachine+localClasses org.cf.smalivm.VirtualMachine+methodDescriptorToBuilderMethod org.cf.smalivm.VirtualMachine+methodDescriptorToParameterTypes org.cf.smalivm.VirtualMachine+methodDescriptorToTryCatchList org.cf.smalivm.VirtualMachine+classNameToFieldNameAndType org.cf.smalivm.VirtualMachine+methodExecutor org.cf.smalivm.VirtualMachine+methodDescriptorToTemplateContextGraph,970,16,1,,"public VirtualMachine(List<BuilderClassDef> classDefs, int maxAddressVisits, int maxCallDepth, int maxMethodVisits) {
        this.maxAddressVisits = maxAddressVisits;
        this.maxMethodVisits = maxMethodVisits;
        this.maxCallDepth = maxCallDepth;

        localClasses = buildLocalClasses(classDefs);
        methodDescriptorToBuilderMethod = buildMethodDescriptorToBuilderMethod(classDefs);
        methodDescriptorToParameterTypes = buildMethodDescriptorToParameterTypes(classDefs);
        methodDescriptorToTryCatchList = buildMethodDescriptorToTryCatchList(classDefs);
        classNameToFieldNameAndType = buildClassNameToFieldNameAndType(classDefs);
        methodExecutor = new MethodExecutor(this);

        // Build graphs last because that's when ops are created and they may access the VM.
        methodDescriptorToTemplateContextGraph = new HashMap<String, ExecutionGraph>();
        buildMethodDescriptorToTemplateContextGraph(classDefs);
    }",False
24,VirtualMachine(String),Method,,,,org.cf.smalivm.VirtualMachine+DEFAULT_MAX_ADDRESS_VISITS org.cf.smalivm.VirtualMachine+DEFAULT_MAX_CALL_DEPTH org.cf.smalivm.VirtualMachine+DEFAULT_MAX_METHOD_VISITS,158,3,1,,"public VirtualMachine(String path) throws Exception {
        this(path, DEFAULT_MAX_ADDRESS_VISITS, DEFAULT_MAX_CALL_DEPTH, DEFAULT_MAX_METHOD_VISITS);
    }",False
25,"VirtualMachine(String,int,int,int)",Method,,,org.cf.util.Dexifier+dexifySmaliFiles(String) org.cf.util.Dexifier+dexifySmaliFiles(String),,216,3,1,,"public VirtualMachine(String path, int maxAddressVisits, int maxCallDepth, int maxMethodVisits) throws Exception {
        this(Dexifier.dexifySmaliFiles(path), maxAddressVisits, maxCallDepth, maxMethodVisits);
    }",False
26,execute(String),Method,,org.cf.demoapp.Main+main(String[]) org.cf.demoapp.Main+executeParameterLogic(int) org.cf.simplify.Main+main(String[]) org.cf.smalivm.TestAbstractMethods+ChildClass.TestInvokingAbstractMethodThroughParentReferenceWorks() org.cf.smalivm.TestAbstractMethods+ChildClass.TestInvokingImplemenetedAbstractMethodWorks() org.cf.smalivm.TestAbstractMethods+ParentClass.TestExecutingAbstractMethodReturnsNull() org.cf.smalivm.TestSideEffects+TestConstOpsHaveNoSideEffects() org.cf.smalivm.TestSideEffects+TestEmptyMethodHasNoSideEffects() org.cf.smalivm.TestSideEffects+TestInvokeMethodThatInvokesUnknownMethodHasStrongSideEffects() org.cf.smalivm.TestSideEffects+TestInvokeMethodWithNoSideEffectsHasNoSideEffects() org.cf.smalivm.TestSideEffects+TestInvokeOfNonAnalyzableMethodHasStrongSideEffects() org.cf.smalivm.TestSideEffects+TestInvokeSideEffectMethodHasStrongSideEffects() org.cf.smalivm.TestSideEffects+TestInvokeUnknownMethodHasStrongSideEffects() org.cf.smalivm.TestSideEffects+TestInvokeWhitelistedMethodsHasNoSideEffects() org.cf.smalivm.TestSideEffects+TestModifyInstanceMemberHasStrongSideEffects() org.cf.smalivm.TestSideEffects+TestNewInstanceNonLocalNonWhitelistedClassHasStrongSideEffects() org.cf.smalivm.TestSideEffects+TestNewInstanceNonLocalWhitelistedClassHasNoSideEffects() org.cf.smalivm.TestSideEffects+TestNewInstanceOfClassWithStaticInitializerWithStrongSideEffectsHasStrongSideEffects() org.cf.smalivm.TestSideEffects+TestNewInstanceOfClassWithStaticInitializerWithWeakSideEffectsHasWeakSideEffects() org.cf.smalivm.TestSideEffects+TestNewInstanceOfMethodWithNoStaticInitializerHasNoSideEffects() org.cf.smalivm.TestSideEffects+TestNewInstanceOfMethodWithStaticInitializerWithNoSideEffectsHasNoSideEffects() org.cf.smalivm.TestSideEffects+TestWriteOutputStreamHasStrongSideEffects(),"org.cf.smalivm.VirtualMachine+methodHasImplementation(String) org.cf.smalivm.VirtualMachine+methodHasImplementation(String) org.cf.smalivm.VirtualMachine+getRootExecutionContext(String) org.cf.smalivm.VirtualMachine+getRootExecutionContext(String) org.cf.smalivm.VirtualMachine+execute(String,ExecutionContext) org.cf.smalivm.VirtualMachine+execute(String,ExecutionContext)",,279,8,1,,"public ExecutionGraph execute(String methodDescriptor) {
        if (!methodHasImplementation(methodDescriptor)) {
            return null;
        }
        ExecutionContext ectx = getRootExecutionContext(methodDescriptor);

        return execute(methodDescriptor, ectx);
    }",False
27,"execute(String,ExecutionContext)",Method,execute(String),"org.cf.demoapp.Main+executeParameterLogic(int) org.cf.demoapp.Main+executePrintParameter(int) org.cf.smalivm.VMTester+execute(VirtualMachine,String,String,TIntObjectMap<Object>,Map<String,Map<String,Object>>)","org.cf.smalivm.VirtualMachine+execute(String,ExecutionContext,ExecutionContext,int[]) org.cf.smalivm.VirtualMachine+execute(String,ExecutionContext,ExecutionContext,int[])",,145,3,1,,"public ExecutionGraph execute(String methodDescriptor, ExecutionContext ectx) {
        return execute(methodDescriptor, ectx, null, null);
    }",False
28,"execute(String,ExecutionContext,ExecutionContext,int[])",Method,"execute(String,ExecutionContext)","org.cf.smalivm.context.ExecutionContext+staticallyInitializeClassIfNecessary(String) org.cf.smalivm.opcode.InvokeOp+executeLocalMethod(String,ExecutionContext)","org.cf.smalivm.VirtualMachine+inheritClassStates(ExecutionContext,ExecutionContext) org.cf.smalivm.VirtualMachine+inheritClassStates(ExecutionContext,ExecutionContext) org.cf.smalivm.VirtualMachine+getClassNameFromMethodDescriptor(String) org.cf.smalivm.VirtualMachine+getClassNameFromMethodDescriptor(String) org.cf.smalivm.context.ExecutionContext+staticallyInitializeClassIfNecessary(String) org.cf.smalivm.context.ExecutionContext+staticallyInitializeClassIfNecessary(String) org.cf.smalivm.VirtualMachine+getInstructionGraphClone(String) org.cf.smalivm.VirtualMachine+getInstructionGraphClone(String) org.cf.smalivm.context.ExecutionNode+ExecutionNode(ExecutionNode) org.cf.smalivm.context.ExecutionGraph+getRoot() org.cf.smalivm.context.ExecutionGraph+getRoot() org.cf.smalivm.context.ExecutionNode+setContext(ExecutionContext) org.cf.smalivm.context.ExecutionNode+setContext(ExecutionContext) org.cf.smalivm.context.ExecutionGraph+addNode(ExecutionNode) org.cf.smalivm.context.ExecutionGraph+addNode(ExecutionNode) org.cf.smalivm.MethodExecutor+execute(ExecutionGraph) org.cf.smalivm.MethodExecutor+execute(ExecutionGraph) java.lang.Throwable+toString() java.lang.Throwable+toString() org.cf.smalivm.VirtualMachine+collapseMultiverse(String,ExecutionGraph,ExecutionContext,ExecutionContext,int[]) org.cf.smalivm.VirtualMachine+collapseMultiverse(String,ExecutionGraph,ExecutionContext,ExecutionContext,int[])",org.cf.smalivm.VirtualMachine+methodExecutor org.cf.smalivm.VirtualMachine+log org.cf.smalivm.VirtualMachine+log org.cf.smalivm.VirtualMachine+log org.cf.smalivm.VirtualMachine+log org.cf.smalivm.VirtualMachine+log org.cf.smalivm.VirtualMachine+log,1423,36,1,,"public ExecutionGraph execute(String methodDescriptor, ExecutionContext calleeContext,
                    ExecutionContext callerContext, int[] parameterRegisters) {
        if (callerContext != null) {
            inheritClassStates(callerContext, calleeContext);
        }

        String className = getClassNameFromMethodDescriptor(methodDescriptor);
        calleeContext.staticallyInitializeClassIfNecessary(className);

        ExecutionGraph graph = getInstructionGraphClone(methodDescriptor);
        ExecutionNode rootNode = new ExecutionNode(graph.getRoot());
        rootNode.setContext(calleeContext);
        graph.addNode(rootNode);

        ExecutionGraph result = null;
        try {
            result = methodExecutor.execute(graph);
        } catch (MaxCallDepthExceeded | MaxAddressVisitsExceeded e) {
            if (log.isWarnEnabled()) {
                log.warn(e.toString());
            }
        } catch (Exception e) {
            if (log.isWarnEnabled()) {
                log.warn(""Unhandled exception in "" + methodDescriptor + "". Giving up on this method."");
            }
            if (log.isDebugEnabled()) {
                log.debug(""Stack trace: "", e);
            }
        }

        if ((result != null) && (callerContext != null)) {
            collapseMultiverse(methodDescriptor, graph, calleeContext, callerContext, parameterRegisters);
        }

        return result;
    }",False
29,getFieldNameAndTypes(String),Method,"addTemplateClassState(ExecutionContext,String) collapseMultiverse(String,ExecutionGraph,ExecutionContext,ExecutionContext,int[]) inheritClassStates(ExecutionContext,ExecutionContext)",,java.util.Map+get(Object) java.util.Map+get(Object),org.cf.smalivm.VirtualMachine+classNameToFieldNameAndType,125,3,1,,"public List<String> getFieldNameAndTypes(String className) {
        return classNameToFieldNameAndType.get(className);
    }",False
30,getInstructionGraphClone(String),Method,"execute(String,ExecutionContext,ExecutionContext,int[])",,java.util.Map+get(Object) java.util.Map+get(Object) org.cf.smalivm.context.ExecutionGraph+ExecutionGraph(ExecutionGraph),org.cf.smalivm.VirtualMachine+methodDescriptorToTemplateContextGraph,253,6,1,,"public ExecutionGraph getInstructionGraphClone(String methodDescriptor) {
        ExecutionGraph graph = methodDescriptorToTemplateContextGraph.get(methodDescriptor);
        ExecutionGraph clone = new ExecutionGraph(graph);

        return clone;
    }",False
31,getLocalClasses(),Method,"collapseMultiverse(String,ExecutionGraph,ExecutionContext,ExecutionContext,int[]) inheritClassStates(ExecutionContext,ExecutionContext)",,java.util.Set+toArray(T[]) java.util.Set+toArray(T[]) java.util.Set+size() java.util.Set+size() java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]),org.cf.smalivm.VirtualMachine+localClasses org.cf.smalivm.VirtualMachine+localClasses,173,5,1,,"public List<String> getLocalClasses() {
        String[] classNames = localClasses.toArray(new String[localClasses.size()]);

        return Arrays.asList(classNames);
    }",True
32,getMaxAddressVisits(),Method,,"org.cf.smalivm.MethodExecutor+checkMaxVisits(ExecutionNode,String,TIntIntMap)",,org.cf.smalivm.VirtualMachine+maxAddressVisits,73,3,1,,"public int getMaxAddressVisits() {
        return maxAddressVisits;
    }",False
33,getMaxCallDepth(),Method,,org.cf.smalivm.MethodExecutor+execute(ExecutionGraph),,org.cf.smalivm.VirtualMachine+maxCallDepth,65,3,1,,"public int getMaxCallDepth() {
        return maxCallDepth;
    }",False
34,getMaxMethodVisits(),Method,,"org.cf.smalivm.MethodExecutor+checkMaxVisits(ExecutionNode,String,TIntIntMap)",,org.cf.smalivm.VirtualMachine+maxMethodVisits,71,3,1,,"public int getMaxMethodVisits() {
        return maxMethodVisits;
    }",False
35,getMethodDescriptors(),Method,,,,org.cf.smalivm.VirtualMachine+methodDescriptorToBuilderMethod,106,3,1,,"public Set<String> getMethodDescriptors() {
        return methodDescriptorToBuilderMethod.keySet();
    }",True
36,getParameterTypes(String),Method,"getRootExecutionContext(String) collapseMultiverse(String,ExecutionGraph,ExecutionContext,ExecutionContext,int[])","org.cf.smalivm.opcode.InvokeOp+create(Instruction,int,VirtualMachine)",java.util.Map+get(Object) java.util.Map+get(Object),org.cf.smalivm.VirtualMachine+methodDescriptorToParameterTypes,141,3,1,,"public List<String> getParameterTypes(String methodDescriptor) {
        return methodDescriptorToParameterTypes.get(methodDescriptor);
    }",True
37,getRootExecutionContext(String),Method,execute(String),"org.cf.demoapp.Main+executeParameterLogic(int) org.cf.demoapp.Main+executePrintParameter(int) org.cf.smalivm.context.ExecutionContext+staticallyInitializeClassIfNecessary(String) org.cf.smalivm.opcode.InvokeOp+buildLocalCalleeContext(String,ExecutionContext) org.cf.smalivm.VMTester+getSetupExecutionContext(VirtualMachine,String,TIntObjectMap<Object>,Map<String,Map<String,Object>>)","org.cf.smalivm.VirtualMachine+getBuilderMethod(String) org.cf.smalivm.VirtualMachine+getBuilderMethod(String) java.lang.IllegalArgumentException+IllegalArgumentException(String) org.cf.smalivm.VirtualMachine+getParameterTypes(String) org.cf.smalivm.VirtualMachine+getParameterTypes(String) org.cf.smalivm.VirtualMachine+getParameterSize(List<String>) org.cf.smalivm.VirtualMachine+getParameterSize(List<String>) org.cf.smalivm.context.ExecutionContext+ExecutionContext(VirtualMachine) org.cf.smalivm.VirtualMachine+getClassNameFromMethodDescriptor(String) org.cf.smalivm.VirtualMachine+getClassNameFromMethodDescriptor(String) org.cf.smalivm.VirtualMachine+addTemplateClassState(ExecutionContext,String) org.cf.smalivm.VirtualMachine+addTemplateClassState(ExecutionContext,String) org.cf.smalivm.context.MethodState+MethodState(ExecutionContext,int,int,int) java.util.List+size() java.util.List+size() java.util.List+size() java.util.List+size() java.util.List+get(int) java.util.List+get(int) org.cf.smalivm.type.LocalInstance+LocalInstance(String) org.cf.smalivm.type.UnknownValue+UnknownValue(String) org.cf.smalivm.context.MethodState+assignParameter(int,Object) org.cf.smalivm.context.MethodState+assignParameter(int,Object) org.cf.smalivm.context.ExecutionContext+setMethodState(MethodState) org.cf.smalivm.context.ExecutionContext+setMethodState(MethodState)",,1543,29,1,,"public ExecutionContext getRootExecutionContext(String methodDescriptor) {
        BuilderMethod method = getBuilderMethod(methodDescriptor);
        MethodImplementation impl = method.getImplementation();
        if (null == impl) {
            // Interface or abstract methods have no implementation. Shouldn't be executing them.
            throw new IllegalArgumentException(""No implementation for "" + methodDescriptor);
        }
        int registerCount = impl.getRegisterCount();
        List<String> parameterTypes = getParameterTypes(methodDescriptor);
        int parameterSize = getParameterSize(parameterTypes);

        int accessFlags = method.getAccessFlags();
        boolean isStatic = ((accessFlags & AccessFlags.STATIC.getValue()) != 0);

        ExecutionContext rootContext = new ExecutionContext(this);
        String className = getClassNameFromMethodDescriptor(methodDescriptor);
        addTemplateClassState(rootContext, className);

        // Assume all input values are unknown.
        MethodState mState = new MethodState(rootContext, registerCount, parameterTypes.size(), parameterSize);
        for (int parameterIndex = 0; parameterIndex < parameterTypes.size(); parameterIndex++) {
            String type = parameterTypes.get(parameterIndex);
            Object value = (!isStatic && (parameterIndex == 0)) ? new LocalInstance(type) : new UnknownValue(type);
            mState.assignParameter(parameterIndex, value);
        }
        rootContext.setMethodState(mState);

        return rootContext;
    }",False
38,getTryCatchList(String),Method,,org.cf.smalivm.MethodExecutor+execute(ExecutionGraph),,org.cf.smalivm.VirtualMachine+methodDescriptorToTryCatchList,177,3,1,,"public List<? extends TryBlock<? extends ExceptionHandler>> getTryCatchList(String methodDescriptor) {
        return methodDescriptorToTryCatchList.get(methodDescriptor);
    }",True
39,isLocalClass(String),Method,,"org.cf.smalivm.context.ExecutionContext+staticallyInitializeClassIfNecessary(String) org.cf.smalivm.opcode.CheckCastOp+execute(MethodState) org.cf.smalivm.opcode.ConstOp+create(Instruction,int,VirtualMachine) org.cf.smalivm.opcode.FilledNewArrayOp+create(Instruction,int,VirtualMachine) org.cf.smalivm.opcode.NewArrayOp+create(Instruction,int,VirtualMachine) org.cf.smalivm.opcode.NewInstanceOp+execute(ExecutionContext) org.cf.smalivm.StaticFieldAccessor+getField(VirtualMachine,ExecutionContext,String) org.cf.smalivm.StaticFieldAccessor+putField(VirtualMachine,ExecutionContext,String,Object)",java.util.Set+contains(Object) java.util.Set+contains(Object),org.cf.smalivm.VirtualMachine+localClasses,102,3,1,,"public boolean isLocalClass(String className) {
        return localClasses.contains(className);
    }",False
40,isLocalMethod(String),Method,,"org.cf.smalivm.context.ExecutionContext+staticallyInitializeClassIfNecessary(String) org.cf.smalivm.opcode.InvokeOp+create(Instruction,int,VirtualMachine) org.cf.smalivm.opcode.InvokeOp+execute(ExecutionContext)",,org.cf.smalivm.VirtualMachine+methodDescriptorToBuilderMethod,139,3,1,,"public boolean isLocalMethod(String methodDescriptor) {
        return methodDescriptorToBuilderMethod.containsKey(methodDescriptor);
    }",True
41,methodHasImplementation(String),Method,execute(String),org.cf.smalivm.opcode.InvokeOp+execute(ExecutionContext),org.cf.smalivm.VirtualMachine+getBuilderMethod(String) org.cf.smalivm.VirtualMachine+getBuilderMethod(String),,190,5,1,,"public boolean methodHasImplementation(String methodDescriptor) {
        BuilderMethod method = getBuilderMethod(methodDescriptor);

        return null != method.getImplementation();
    }",True
42,updateInstructionGraph(String),Method,buildMethodDescriptorToTemplateContextGraph(List<BuilderClassDef>),org.cf.simplify.Main+main(String[]),"org.cf.smalivm.context.ExecutionGraph+ExecutionGraph(VirtualMachine,BuilderMethod) java.util.Map+put(K,V) java.util.Map+put(K,V)",org.cf.smalivm.VirtualMachine+methodDescriptorToBuilderMethod org.cf.smalivm.VirtualMachine+methodDescriptorToTemplateContextGraph,295,5,1,,"public void updateInstructionGraph(String methodDescriptor) {
        BuilderMethod method = methodDescriptorToBuilderMethod.get(methodDescriptor);
        ExecutionGraph graph = new ExecutionGraph(this, method);
        methodDescriptorToTemplateContextGraph.put(methodDescriptor, graph);
    }",False
43,"addTemplateClassState(ExecutionContext,String)",Method,getRootExecutionContext(String),,"org.cf.smalivm.VirtualMachine+getFieldNameAndTypes(String) org.cf.smalivm.VirtualMachine+getFieldNameAndTypes(String) org.cf.smalivm.context.ClassState+ClassState(ExecutionContext,String,int) java.util.List+size() java.util.List+size() java.lang.String+split(String) java.lang.String+split(String) org.cf.smalivm.context.ClassState+pokeField(String,Object) org.cf.smalivm.context.ClassState+pokeField(String,Object) org.cf.smalivm.type.UnknownValue+UnknownValue(String)",org.cf.smalivm.SideEffect+Level,514,9,2,,"private void addTemplateClassState(ExecutionContext ectx, String className) {
        List<String> fieldNameAndTypes = getFieldNameAndTypes(className);
        ClassState cState = new ClassState(ectx, className, fieldNameAndTypes.size());
        ectx.setClassState(className, cState, SideEffect.Level.NONE);
        for (String fieldNameAndType : fieldNameAndTypes) {
            String type = fieldNameAndType.split("":"")[1];
            cState.pokeField(fieldNameAndType, new UnknownValue(type));
        }
    }",False
44,buildClassNameToFieldNameAndType(List<BuilderClassDef>),Method,"VirtualMachine(List<BuilderClassDef>,int,int,int)",,"java.util.HashMap+HashMap() java.util.LinkedList+LinkedList() java.lang.String+split(String) java.lang.String+split(String) java.util.List+add(E) java.util.List+add(E) java.util.Map+put(K,V) java.util.Map+put(K,V)",,880,16,2,,"private Map<String, List<String>> buildClassNameToFieldNameAndType(List<BuilderClassDef> classDefs) {
        Map<String, List<String>> classNameToFieldNameAndType = new HashMap<String, List<String>>();
        for (BuilderClassDef classDef : classDefs) {
            String className = ReferenceUtil.getReferenceString(classDef);
            Collection<BuilderField> fields = classDef.getFields();
            List<String> fieldNameAndTypes = new LinkedList<String>();
            for (BuilderField field : fields) {
                String fieldDescriptor = ReferenceUtil.getFieldDescriptor(field);
                String fieldNameAndType = fieldDescriptor.split(""->"")[1];
                fieldNameAndTypes.add(fieldNameAndType);
            }
            classNameToFieldNameAndType.put(className, fieldNameAndTypes);
        }

        return classNameToFieldNameAndType;
    }",True
45,buildMethodDescriptorToTemplateContextGraph(List<BuilderClassDef>),Method,"VirtualMachine(List<BuilderClassDef>,int,int,int)",,org.cf.smalivm.VirtualMachine+updateInstructionGraph(String) org.cf.smalivm.VirtualMachine+updateInstructionGraph(String),,564,12,2,,"private void buildMethodDescriptorToTemplateContextGraph(final List<BuilderClassDef> classDefs) {
        for (BuilderClassDef classDef : classDefs) {
            for (BuilderMethod method : classDef.getMethods()) {
                String methodDescriptor = ReferenceUtil.getMethodDescriptor(method);
                MethodImplementation implementation = method.getImplementation();
                if (implementation == null) {
                    continue;
                }
                updateInstructionGraph(methodDescriptor);
            }
        }
    }",False
46,"collapseMultiverse(String,ExecutionGraph,ExecutionContext,ExecutionContext,int[])",Method,"execute(String,ExecutionContext,ExecutionContext,int[])",,"org.cf.smalivm.context.ExecutionGraph+getConnectedTerminatingAddresses() org.cf.smalivm.context.ExecutionGraph+getConnectedTerminatingAddresses() org.cf.smalivm.context.ExecutionContext+getMethodState() org.cf.smalivm.context.ExecutionContext+getMethodState() org.cf.smalivm.VirtualMachine+getParameterTypes(String) org.cf.smalivm.VirtualMachine+getParameterTypes(String) java.util.List+get(int) java.util.List+get(int) org.cf.util.ImmutableUtils+isImmutableClass(String) org.cf.util.ImmutableUtils+isImmutableClass(String) org.cf.smalivm.VirtualMachine+getMutableParameterConsensus(TIntList,ExecutionGraph,int) org.cf.smalivm.VirtualMachine+getMutableParameterConsensus(TIntList,ExecutionGraph,int) org.cf.smalivm.context.MethodState+assignRegister(int,Object) org.cf.smalivm.context.MethodState+assignRegister(int,Object) org.cf.smalivm.VirtualMachine+getLocalClasses() org.cf.smalivm.VirtualMachine+getLocalClasses() org.cf.smalivm.context.ExecutionContext+isClassInitialized(String) org.cf.smalivm.context.ExecutionContext+isClassInitialized(String) org.cf.smalivm.context.ExecutionContext+isClassInitialized(String) org.cf.smalivm.context.ExecutionContext+isClassInitialized(String) org.cf.smalivm.VirtualMachine+getFieldNameAndTypes(String) org.cf.smalivm.VirtualMachine+getFieldNameAndTypes(String) org.cf.smalivm.context.ExecutionContext+isClassInitialized(String) org.cf.smalivm.context.ExecutionContext+isClassInitialized(String) org.cf.smalivm.context.ExecutionContext+peekClassState(String) org.cf.smalivm.context.ExecutionContext+peekClassState(String) org.cf.smalivm.context.ClassState+ClassState(ExecutionContext,String,int) java.util.List+size() java.util.List+size() org.cf.smalivm.context.ExecutionGraph+getFieldConsensus(TIntList,String,String) org.cf.smalivm.context.ExecutionGraph+getFieldConsensus(TIntList,String,String) org.cf.smalivm.context.ClassState+pokeField(String,Object) org.cf.smalivm.context.ClassState+pokeField(String,Object)",,2187,41,2,,"private void collapseMultiverse(String methodDescriptor, ExecutionGraph graph, ExecutionContext calleeContext,
                    ExecutionContext callerContext, int[] parameterRegisters) {
        TIntList terminatingAddresses = graph.getConnectedTerminatingAddresses();
        if (parameterRegisters != null) {
            MethodState mState = callerContext.getMethodState();
            List<String> parameterTypes = getParameterTypes(methodDescriptor);
            for (int parameterIndex = 0; parameterIndex < parameterRegisters.length; parameterIndex++) {
                String type = parameterTypes.get(parameterIndex);
                boolean mutable = !ImmutableUtils.isImmutableClass(type);
                if (!mutable) {
                    continue;
                }

                Object value = getMutableParameterConsensus(terminatingAddresses, graph, parameterIndex);
                int register = parameterRegisters[parameterIndex];
                mState.assignRegister(register, value);
            }
        }

        for (String currentClassName : getLocalClasses()) {
            if (!callerContext.isClassInitialized(currentClassName)
                            && !calleeContext.isClassInitialized(currentClassName)) {
                continue;
            }

            List<String> fieldNameAndTypes = getFieldNameAndTypes(currentClassName);
            ClassState currentClassState;
            if (callerContext.isClassInitialized(currentClassName)) {
                currentClassState = callerContext.peekClassState(currentClassName);
            } else {
                currentClassState = new ClassState(callerContext, currentClassName, fieldNameAndTypes.size());
                SideEffect.Level level = graph.getHighestClassSideEffectLevel(currentClassName);
                callerContext.initializeClass(currentClassName, currentClassState, level);
            }

            for (String fieldNameAndType : fieldNameAndTypes) {
                Object value = graph.getFieldConsensus(terminatingAddresses, currentClassName, fieldNameAndType);
                currentClassState.pokeField(fieldNameAndType, value);
            }
        }
    }",False
47,getBuilderMethod(String),Method,getRootExecutionContext(String) methodHasImplementation(String),,,org.cf.smalivm.VirtualMachine+methodDescriptorToBuilderMethod,141,3,2,,"private BuilderMethod getBuilderMethod(String methodDescriptor) {
        return methodDescriptorToBuilderMethod.get(methodDescriptor);
    }",True
48,"inheritClassStates(ExecutionContext,ExecutionContext)",Method,"execute(String,ExecutionContext,ExecutionContext,int[])",,"org.cf.smalivm.VirtualMachine+getLocalClasses() org.cf.smalivm.VirtualMachine+getLocalClasses() org.cf.smalivm.context.ExecutionContext+isClassInitialized(String) org.cf.smalivm.context.ExecutionContext+isClassInitialized(String) org.cf.smalivm.context.ExecutionContext+peekClassState(String) org.cf.smalivm.context.ExecutionContext+peekClassState(String) org.cf.smalivm.context.ClassState+ClassState(ClassState,ExecutionContext) org.cf.smalivm.VirtualMachine+getFieldNameAndTypes(String) org.cf.smalivm.VirtualMachine+getFieldNameAndTypes(String) org.cf.smalivm.context.ClassState+peekField(String) org.cf.smalivm.context.ClassState+peekField(String) org.cf.smalivm.context.ClassState+pokeField(String,Object) org.cf.smalivm.context.ClassState+pokeField(String,Object)",,784,16,2,,"private void inheritClassStates(ExecutionContext parent, ExecutionContext child) {
        for (String className : getLocalClasses()) {
            if (!parent.isClassInitialized(className)) {
                continue;
            }

            ClassState fromClassState = parent.peekClassState(className);
            ClassState toClassState = new ClassState(fromClassState, child);
            for (String fieldNameAndType : getFieldNameAndTypes(className)) {
                Object value = fromClassState.peekField(fieldNameAndType);
                toClassState.pokeField(fieldNameAndType, value);
            }
            SideEffect.Level level = parent.getClassStateSideEffectLevel(className);
            child.initializeClass(className, toClassState, level);
        }
    }",False
