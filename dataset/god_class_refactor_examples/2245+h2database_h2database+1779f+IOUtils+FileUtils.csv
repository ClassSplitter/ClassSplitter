index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,IOUtils(),io utils ,Method,,,,,50,3,2,,"private IOUtils() {
        // utility class
    }",False,False,The function of the following method is to serve as a private utility class.,False,"The code snippet defines a private constructor for a class named IOUtils, indicating that it is a utility class. This constructor is used to prevent the class from being instantiated, as it only contains static methods and should not be instantiated as an object."
2,closeSilently(OutputStream),close silently out close an output stream without throwing an exception param out the output stream or null ,Method,"copyAndClose(InputStream,OutputStream)","org.h2.command.dml.RunScriptCommand+closeIO() org.h2.server.web.WebServlet+run() org.h2.tools.Backup+process(String,String,String,boolean) org.h2.tools.CreateCluster+process(String,String,String,String,String) org.h2.tools.Recover+dumpLob(String,boolean) org.h2.tools.Restore+execute(String,String,String,boolean) org.h2.tools.Script+execute(String,String,String,String) org.h2.test.poweroff.TestRecover+backup(String,String,String,int,String) org.h2.test.poweroff.TestRecover+testConsistency() org.h2.dev.fs.FileShell+zip(String,String,ArrayList<String>) org.h2.dev.fs.FileShell+unzip(String,String) org.h2.dev.ftp.server.FtpServer+StreamRedirect.run()","org.h2.util.IOUtils+trace(String,String,Object) org.h2.util.IOUtils+trace(String,String,Object) java.io.OutputStream+close() java.io.OutputStream+close()",,397,15,9,"/** 
 * Close an output stream without throwing an exception.
 * @param out the output stream or null
 */
","/**
     * Close an output stream without throwing an exception.
     *
     * @param out the output stream or null
     */
    public static void closeSilently(OutputStream out) {
        if (out != null) {
            try {
                trace(""closeSilently"", null, out);
                out.close();
            } catch (Exception e) {
                // ignore
            }
        }
    }",False,False,"This method is used to close an output stream without throwing an exception. It takes an output stream as a parameter and checks if it is not null. If it is not null, it tries to close the output stream and ignores any exceptions that may occur.",True,"The code defines a method called `closeSilently` that takes an output stream as a parameter. It attempts to close the output stream without throwing an exception, and if the stream is not null, it logs a trace message before closing it."
3,"skipFully(InputStream,long)",skip fully in skip skip a number of bytes in an input stream param in the input stream param skip the number of bytes to skip throws eof exception if the end of file has been reached before all bytescould be skipped throws io exception if an io exception occurred while skipping ,Method,,"org.h2.jdbc.JdbcBlob+getBytes(long,int) org.h2.jdbc.JdbcBlob+position(byte[],long) org.h2.store.fs.FileObjectZip+readFully(byte[],int,int) org.h2.dev.fs.FileObjectZip2+readFully(byte[],int,int) org.h2.dev.ftp.server.FtpData+send(String,long)",java.io.InputStream+skip(long) java.io.InputStream+skip(long) java.io.EOFException+EOFException() org.h2.message.DbException+convertToIOException(Throwable) org.h2.message.DbException+convertToIOException(Throwable),,758,22,9,"/** 
 * Skip a number of bytes in an input stream.
 * @param in the input stream
 * @param skip the number of bytes to skip
 * @throws EOFException if the end of file has been reached before all bytescould be skipped
 * @throws IOException if an IO exception occurred while skipping
 */
","/**
     * Skip a number of bytes in an input stream.
     *
     * @param in the input stream
     * @param skip the number of bytes to skip
     * @throws EOFException if the end of file has been reached before all bytes
     *             could be skipped
     * @throws IOException if an IO exception occurred while skipping
     */
    public static void skipFully(InputStream in, long skip) throws IOException {
        try {
            while (skip > 0) {
                long skipped = in.skip(skip);
                if (skipped <= 0) {
                    throw new EOFException();
                }
                skip -= skipped;
            }
        } catch (Exception e) {
            throw DbException.convertToIOException(e);
        }
    }",False,False,"This method is used to skip a specified number of bytes in an input stream. It throws an EOFException if the end of the file is reached before all bytes can be skipped, and an IOException if there is an error while skipping.",True,"The code defines a method called `skipFully` that skips a specified number of bytes in an input stream. It throws an `EOFException` if the end of file is reached before all bytes can be skipped, and an `IOException` if any other IO exception occurs during the skipping process."
4,"skipFully(Reader,long)",skip fully reader skip skip a number of characters in a reader param reader the reader param skip the number of characters to skip throws eof exception if the end of file has been reached before allcharacters could be skipped throws io exception if an io exception occurred while skipping ,Method,,"org.h2.jdbc.JdbcClob+getSubString(long,int)",java.io.Reader+skip(long) java.io.Reader+skip(long) java.io.EOFException+EOFException() org.h2.message.DbException+convertToIOException(Throwable) org.h2.message.DbException+convertToIOException(Throwable),,767,22,9,"/** 
 * Skip a number of characters in a reader.
 * @param reader the reader
 * @param skip the number of characters to skip
 * @throws EOFException if the end of file has been reached before allcharacters could be skipped
 * @throws IOException if an IO exception occurred while skipping
 */
","/**
     * Skip a number of characters in a reader.
     *
     * @param reader the reader
     * @param skip the number of characters to skip
     * @throws EOFException if the end of file has been reached before all
     *             characters could be skipped
     * @throws IOException if an IO exception occurred while skipping
     */
    public static void skipFully(Reader reader, long skip) throws IOException {
        try {
            while (skip > 0) {
                long skipped = reader.skip(skip);
                if (skipped <= 0) {
                    throw new EOFException();
                }
                skip -= skipped;
            }
        } catch (Exception e) {
            throw DbException.convertToIOException(e);
        }
    }",False,False,"This method is used to skip a specified number of characters in a reader. It throws an EOFException if the end of file is reached before all characters are skipped, and an IOException if there is an IO exception while skipping.",True,"The code defines a method called ""skipFully"" that takes a reader and a number of characters to skip as input. It repeatedly skips characters in the reader until the specified number of characters have been skipped or the end of file is reached. If the end of file is reached before all characters could be skipped, an EOFException is thrown."
5,"copyAndClose(InputStream,OutputStream)",copy and close in out copy all data from the input stream to the output stream and close both streams exceptions while closing are ignored param in the input stream param out the output stream return the number of bytes copied ,Method,"copy(String,String)","org.h2.test.unit.FileSystemDatabase+openFileObject(String,String) org.h2.test.unit.TestSampleApps+test() org.h2.dev.ftp.FtpClient+retrieve(String,OutputStream,long) org.h2.dev.ftp.FtpClient+store(String,InputStream) org.h2.dev.ftp.FtpClient+nameList(String) org.h2.dev.ftp.FtpClient+list(String)","org.h2.util.IOUtils+copyAndCloseInput(InputStream,OutputStream) org.h2.util.IOUtils+copyAndCloseInput(InputStream,OutputStream) java.io.OutputStream+close() java.io.OutputStream+close() org.h2.message.DbException+convertToIOException(Throwable) org.h2.message.DbException+convertToIOException(Throwable) org.h2.util.IOUtils+closeSilently(OutputStream) org.h2.util.IOUtils+closeSilently(OutputStream)",,623,19,9,"/** 
 * Copy all data from the input stream to the output stream and close both streams. Exceptions while closing are ignored.
 * @param in the input stream
 * @param out the output stream
 * @return the number of bytes copied
 */
","/**
     * Copy all data from the input stream to the output stream and close both
     * streams. Exceptions while closing are ignored.
     *
     * @param in the input stream
     * @param out the output stream
     * @return the number of bytes copied
     */
    public static long copyAndClose(InputStream in, OutputStream out) throws IOException {
        try {
            long len = copyAndCloseInput(in, out);
            out.close();
            return len;
        } catch (Exception e) {
            throw DbException.convertToIOException(e);
        } finally {
            closeSilently(out);
        }
    }",False,False,"This method copies data from an input stream to an output stream, closes both streams, and returns the number of bytes copied. Any exceptions that occur while closing the streams are ignored.",True,"The code defines a method called ""copyAndClose"" that takes an input stream and an output stream as parameters. It copies all data from the input stream to the output stream, closes both streams, and returns the number of bytes copied. Any exceptions that occur while closing the streams are ignored."
6,"copyAndCloseInput(InputStream,OutputStream)",copy and close input in out copy all data from the input stream to the output stream and close the input stream exceptions while closing are ignored param in the input stream param out the output stream null if writing is not required return the number of bytes copied ,Method,"copyAndClose(InputStream,OutputStream)","org.h2.command.dml.BackupCommand+backupFile(ZipOutputStream,String,String) org.h2.jdbc.JdbcBlob+length() org.h2.tools.Backup+process(String,String,String,boolean) org.h2.value.Transfer+writeValue(Value) org.h2.test.poweroff.TestRecover+backup(String,String,String,int,String) org.h2.test.server.WebClient+upload(String,String,InputStream) org.h2.dev.fs.FileShell+zip(String,String,ArrayList<String>)","org.h2.util.IOUtils+copy(InputStream,OutputStream) org.h2.util.IOUtils+copy(InputStream,OutputStream) org.h2.message.DbException+convertToIOException(Throwable) org.h2.message.DbException+convertToIOException(Throwable) org.h2.util.IOUtils+closeSilently(InputStream) org.h2.util.IOUtils+closeSilently(InputStream)",,599,17,9,"/** 
 * Copy all data from the input stream to the output stream and close the input stream. Exceptions while closing are ignored.
 * @param in the input stream
 * @param out the output stream (null if writing is not required)
 * @return the number of bytes copied
 */
","/**
     * Copy all data from the input stream to the output stream and close the
     * input stream. Exceptions while closing are ignored.
     *
     * @param in the input stream
     * @param out the output stream (null if writing is not required)
     * @return the number of bytes copied
     */
    public static long copyAndCloseInput(InputStream in, OutputStream out) throws IOException {
        try {
            return copy(in, out);
        } catch (Exception e) {
            throw DbException.convertToIOException(e);
        } finally {
            closeSilently(in);
        }
    }",False,False,"This method copies data from an input stream to an output stream, and then closes the input stream. It returns the number of bytes copied.",True,"The code defines a method called `copyAndCloseInput` that copies data from an input stream to an output stream and then closes the input stream. It returns the number of bytes copied. If any exceptions occur during the copying process, they are converted to an IOException."
7,"copy(InputStream,OutputStream)",copy in out copy all data from the input stream to the output stream both streams are kept open param in the input stream param out the output stream null if writing is not required return the number of bytes copied ,Method,"copyAndCloseInput(InputStream,OutputStream)","org.h2.tools.Recover+dumpLob(String,boolean) org.h2.tools.Restore+execute(String,String,String,boolean) org.h2.util.SourceCompiler+call() org.h2.util.Utils+loadResource(String) org.h2.test.unit.TestCompress+test(int) org.h2.test.unit.TestCompress+test(int) org.h2.dev.fs.FileShell+unzip(String,String) org.h2.dev.ftp.server.FtpData+receive(String) org.h2.dev.ftp.server.FtpData+send(String,long)","org.h2.util.IOUtils+copy(InputStream,OutputStream,long) org.h2.util.IOUtils+copy(InputStream,OutputStream,long)",java.lang.Long+MAX_VALUE,399,11,9,"/** 
 * Copy all data from the input stream to the output stream. Both streams are kept open.
 * @param in the input stream
 * @param out the output stream (null if writing is not required)
 * @return the number of bytes copied
 */
","/**
     * Copy all data from the input stream to the output stream. Both streams
     * are kept open.
     *
     * @param in the input stream
     * @param out the output stream (null if writing is not required)
     * @return the number of bytes copied
     */
    public static long copy(InputStream in, OutputStream out) throws IOException {
        return copy(in, out, Long.MAX_VALUE);
    }",False,False,"The function of this method is to copy data from an input stream to an output stream, while keeping both streams open. It returns the number of bytes copied.",True,"The given code is a method named ""copy"" that takes an input stream and an output stream as parameters. It copies all the data from the input stream to the output stream, keeping both streams open, and returns the number of bytes copied."
8,"copy(InputStream,OutputStream,long)",copy in out length copy all data from the input stream to the output stream both streams are kept open param in the input stream param out the output stream null if writing is not required param length the maximum number of bytes to copy return the number of bytes copied ,Method,"copy(InputStream,OutputStream) readBytesAndClose(InputStream,int)","org.h2.jdbc.JdbcBlob+getBytes(long,int) org.h2.server.web.WebServlet+uploadMultipart(InputStream,int) org.h2.dev.fs.FileShell+cat(String,long)","java.lang.Math+min(long,long) java.lang.Math+min(long,long) java.io.InputStream+read(byte[],int,int) java.io.InputStream+read(byte[],int,int) java.io.OutputStream+write(byte[],int,int) java.io.OutputStream+write(byte[],int,int) java.lang.Math+min(long,long) java.lang.Math+min(long,long) org.h2.message.DbException+convertToIOException(Throwable) org.h2.message.DbException+convertToIOException(Throwable)",org.h2.engine.Constants+IO_BUFFER_SIZE org.h2.engine.Constants+IO_BUFFER_SIZE,1109,31,9,"/** 
 * Copy all data from the input stream to the output stream. Both streams are kept open.
 * @param in the input stream
 * @param out the output stream (null if writing is not required)
 * @param length the maximum number of bytes to copy
 * @return the number of bytes copied
 */
","/**
     * Copy all data from the input stream to the output stream. Both streams
     * are kept open.
     *
     * @param in the input stream
     * @param out the output stream (null if writing is not required)
     * @param length the maximum number of bytes to copy
     * @return the number of bytes copied
     */
    public static long copy(InputStream in, OutputStream out, long length) throws IOException {
        try {
            long copied = 0;
            int len = (int) Math.min(length, Constants.IO_BUFFER_SIZE);
            byte[] buffer = new byte[len];
            while (length > 0) {
                len = in.read(buffer, 0, len);
                if (len < 0) {
                    break;
                }
                if (out != null) {
                    out.write(buffer, 0, len);
                }
                copied += len;
                length -= len;
                len = (int) Math.min(length, Constants.IO_BUFFER_SIZE);
            }
            return copied;
        } catch (Exception e) {
            throw DbException.convertToIOException(e);
        }
    }",False,False,"The function of this method is to copy data from an input stream to an output stream, while keeping both streams open. It also allows for specifying a maximum number of bytes to copy. The method returns the number of bytes that were copied.",True,"This code defines a method called ""copy"" that takes an input stream, an output stream, and a length as parameters. It copies data from the input stream to the output stream, up to the specified length, and returns the number of bytes copied."
9,"copyAndCloseInput(Reader,Writer,long)",copy and close input in out length copy all data from the reader to the writer and close the reader exceptions while closing are ignored param in the reader param out the writer null if writing is not required param length the maximum number of bytes to copy return the number of characters copied ,Method,"readStringAndClose(Reader,int)","org.h2.jdbc.JdbcClob+length() org.h2.jdbc.JdbcClob+getSubString(long,int)","java.lang.Math+min(long,long) java.lang.Math+min(long,long) java.io.Reader+read(char[],int,int) java.io.Reader+read(char[],int,int) java.io.Writer+write(char[],int,int) java.io.Writer+write(char[],int,int) java.lang.Math+min(long,long) java.lang.Math+min(long,long) org.h2.message.DbException+convertToIOException(Throwable) org.h2.message.DbException+convertToIOException(Throwable) java.io.Reader+close() java.io.Reader+close()",org.h2.engine.Constants+IO_BUFFER_SIZE org.h2.engine.Constants+IO_BUFFER_SIZE,1165,33,9,"/** 
 * Copy all data from the reader to the writer and close the reader. Exceptions while closing are ignored.
 * @param in the reader
 * @param out the writer (null if writing is not required)
 * @param length the maximum number of bytes to copy
 * @return the number of characters copied
 */
","/**
     * Copy all data from the reader to the writer and close the reader.
     * Exceptions while closing are ignored.
     *
     * @param in the reader
     * @param out the writer (null if writing is not required)
     * @param length the maximum number of bytes to copy
     * @return the number of characters copied
     */
    public static long copyAndCloseInput(Reader in, Writer out, long length) throws IOException {
        try {
            long copied = 0;
            int len = (int) Math.min(length, Constants.IO_BUFFER_SIZE);
            char[] buffer = new char[len];
            while (length > 0) {
                len = in.read(buffer, 0, len);
                if (len < 0) {
                    break;
                }
                if (out != null) {
                    out.write(buffer, 0, len);
                }
                length -= len;
                len = (int) Math.min(length, Constants.IO_BUFFER_SIZE);
                copied += len;
            }
            return copied;
        } catch (Exception e) {
            throw DbException.convertToIOException(e);
        } finally {
            in.close();
        }
    }",False,False,"The function of this method is to copy data from a reader to a writer, while also closing the reader. It returns the number of characters copied.",True,"This code defines a method called `copyAndCloseInput` that copies data from a reader to a writer, with an optional maximum length. It returns the number of characters copied. The method also handles exceptions while closing the reader."
10,closeSilently(InputStream),close silently in close an input stream without throwing an exception param in the input stream or null ,Method,"copyAndCloseInput(InputStream,OutputStream)","org.h2.command.dml.RunScriptCommand+closeIO() org.h2.command.dml.ScriptCommand+writeLobStream(Value) org.h2.server.web.WebServlet+run() org.h2.tools.Backup+process(String,String,String,boolean) org.h2.tools.Recover+dumpLob(String,boolean) org.h2.tools.Restore+getOriginalDbName(String,String) org.h2.tools.Restore+execute(String,String,String,boolean) org.h2.tools.RunScript+process(Connection,String,boolean,String) org.h2.test.poweroff.TestRecover+backup(String,String,String,int,String) org.h2.test.synth.OutputCatcher+run() org.h2.dev.fs.FileShell+cat(String,long) org.h2.dev.fs.FileShell+zip(String,String,ArrayList<String>) org.h2.dev.fs.FileShell+unzip(String,String) org.h2.dev.ftp.server.FtpServer+StreamRedirect.run()","org.h2.util.IOUtils+trace(String,String,Object) org.h2.util.IOUtils+trace(String,String,Object) java.io.InputStream+close() java.io.InputStream+close()",,389,15,9,"/** 
 * Close an input stream without throwing an exception.
 * @param in the input stream or null
 */
","/**
     * Close an input stream without throwing an exception.
     *
     * @param in the input stream or null
     */
    public static void closeSilently(InputStream in) {
        if (in != null) {
            try {
                trace(""closeSilently"", null, in);
                in.close();
            } catch (Exception e) {
                // ignore
            }
        }
    }",False,False,"This method is used to close an input stream without throwing an exception. It takes an input stream as a parameter and checks if it is not null. If it is not null, it tries to close the input stream and ignores any exceptions that may occur.",True,"The code defines a method called `closeSilently` that takes an input stream as a parameter. It attempts to close the input stream without throwing an exception, by checking if the stream is not null and then calling the `close()` method on it. Any exceptions that occur during the closing process are ignored."
11,closeSilently(Reader),close silently reader close a reader without throwing an exception param reader the reader or null ,Method,,org.h2.command.dml.ScriptCommand+writeLobStream(Value) org.h2.server.pg.PgServerThread+installPgCatalog(Statement) org.h2.tools.Csv+close(),java.io.Reader+close() java.io.Reader+close(),,337,14,9,"/** 
 * Close a reader without throwing an exception.
 * @param reader the reader or null
 */
","/**
     * Close a reader without throwing an exception.
     *
     * @param reader the reader or null
     */
    public static void closeSilently(Reader reader) {
        if (reader != null) {
            try {
                reader.close();
            } catch (Exception e) {
                // ignore
            }
        }
    }",False,False,"This method is used to close a reader without throwing an exception. It takes a reader as a parameter and checks if it is not null. If it is not null, it tries to close the reader, ignoring any exceptions that may occur.",True,"The code defines a method called `closeSilently` that takes a `Reader` object as a parameter. It attempts to close the reader without throwing an exception, by checking if the reader is not null and then calling the `close()` method on it. If an exception occurs during the closing process, it is ignored."
12,closeSilently(Writer),close silently writer close a writer without throwing an exception param writer the writer or null ,Method,,"org.h2.store.RecoverTester+log(int,String,byte[],long) org.h2.tools.Csv+close() org.h2.test.bench.TestPerformance+test(String) org.h2.test.synth.TestHalt+traceOperation(String,Exception)",java.io.Writer+flush() java.io.Writer+flush() java.io.Writer+close() java.io.Writer+close(),,369,15,9,"/** 
 * Close a writer without throwing an exception.
 * @param writer the writer or null
 */
","/**
     * Close a writer without throwing an exception.
     *
     * @param writer the writer or null
     */
    public static void closeSilently(Writer writer) {
        if (writer != null) {
            try {
                writer.flush();
                writer.close();
            } catch (Exception e) {
                // ignore
            }
        }
    }",False,False,"This method is used to close a writer without throwing an exception. It takes a writer as a parameter and checks if it is not null. If it is not null, it flushes and closes the writer. If an exception occurs, it is ignored.",True,"The code defines a method called `closeSilently` that takes a `Writer` object as a parameter. It attempts to flush and close the writer, but if an exception occurs, it ignores it and continues execution. This method is used to safely close a writer without throwing an exception."
13,"readBytesAndClose(InputStream,int)",read bytes and close in length read a number of bytes from an input stream and close the stream param in the input stream param length the maximum number of bytes to read or 1 to read untilthe end of file return the bytes read ,Method,,"org.h2.security.CipherFactory+setKeystore() org.h2.server.web.WebServer+getFile(String) org.h2.util.Utils+loadResource(String) org.h2.value.ValueLob+createBlob(InputStream,long,DataHandler) org.h2.value.ValueLob+createBlob(InputStream,long,DataHandler) org.h2.value.ValueLob+getString() org.h2.value.ValueLob+getBytesNoCopy() org.h2.value.ValueLobDb+getString() org.h2.value.ValueLobDb+getBytesNoCopy() org.h2.value.ValueLobDb+createTempBlob(InputStream,long,DataHandler) org.h2.test.server.TestWeb+testTransfer() org.h2.test.unit.TestReader+test() org.h2.build.doc.GenerateDoc+process(String,String) org.h2.build.doc.UploadBuild+main(String) org.h2.build.doc.UploadBuild+addFiles(File,File,ZipOutputStream) org.h2.build.doc.WebSite+loadFragments() org.h2.build.doc.WebSite+copy(File,File,boolean,boolean) org.h2.build.i18n.PrepareTranslation+load(String,boolean) org.h2.build.indexer.Indexer+readPage(File) org.h2.jcr.Railroads+processHtml(String)","java.lang.Math+min(int,int) java.lang.Math+min(int,int) java.io.ByteArrayOutputStream+ByteArrayOutputStream(int) org.h2.util.IOUtils+copy(InputStream,OutputStream,long) org.h2.util.IOUtils+copy(InputStream,OutputStream,long) java.io.ByteArrayOutputStream+toByteArray() java.io.ByteArrayOutputStream+toByteArray() org.h2.message.DbException+convertToIOException(Throwable) org.h2.message.DbException+convertToIOException(Throwable) java.io.InputStream+close() java.io.InputStream+close()",java.lang.Integer+MAX_VALUE org.h2.engine.Constants+IO_BUFFER_SIZE,824,23,9,"/** 
 * Read a number of bytes from an input stream and close the stream.
 * @param in the input stream
 * @param length the maximum number of bytes to read, or -1 to read untilthe end of file
 * @return the bytes read
 */
","/**
     * Read a number of bytes from an input stream and close the stream.
     *
     * @param in the input stream
     * @param length the maximum number of bytes to read, or -1 to read until
     *            the end of file
     * @return the bytes read
     */
    public static byte[] readBytesAndClose(InputStream in, int length) throws IOException {
        try {
            if (length <= 0) {
                length = Integer.MAX_VALUE;
            }
            int block = Math.min(Constants.IO_BUFFER_SIZE, length);
            ByteArrayOutputStream out = new ByteArrayOutputStream(block);
            copy(in, out, length);
            return out.toByteArray();
        } catch (Exception e) {
            throw DbException.convertToIOException(e);
        } finally {
            in.close();
        }
    }",False,False,This method reads a specified number of bytes from an input stream and closes the stream. It returns the bytes read as a byte array.,True,"This code defines a method called ""readBytesAndClose"" that reads a specified number of bytes from an input stream and returns them as a byte array. The method also closes the input stream after reading."
14,"readStringAndClose(Reader,int)",read string and close in length read a number of characters from a reader and close it param in the reader param length the maximum number of characters to read or 1 to readuntil the end of file return the string read ,Method,,"org.h2.fulltext.FullText+asString(Object,int) org.h2.value.ValueLob+createClob(Reader,long,DataHandler) org.h2.value.ValueLob+createClob(Reader,long,DataHandler) org.h2.value.ValueLob+getString() org.h2.value.ValueLobDb+getString() org.h2.value.ValueLobDb+createTempClob(Reader,long,DataHandler) org.h2.test.db.TestCsv+testNull() org.h2.test.db.TestCsv+testEmptyFieldDelimiter() org.h2.test.db.TestFunctions+testFileRead() org.h2.test.db.TestLob+testLobCompression(boolean) org.h2.test.server.WebClient+get(String) org.h2.test.server.WebClient+upload(String,String,InputStream) org.h2.test.unit.TestReader+test() org.h2.test.unit.TestRecovery+testCorrupt() org.h2.build.doc.LinkChecker+processFile(String) org.h2.build.doc.UploadBuild+main(String) org.h2.build.doc.UploadBuild+main(String) org.h2.build.doc.UploadBuild+main(String) org.h2.build.doc.XMLChecker+processFile(String) org.h2.build.i18n.PrepareTranslation+buildHtml(String,String,String) org.h2.build.i18n.PrepareTranslation+extract(String,File,String) org.h2.build.i18n.PropertiesToUTF8+convert(String) org.h2.jaqu.util.ClassUtils+convert(Object,Class<?>)","java.lang.Math+min(int,int) java.lang.Math+min(int,int) java.io.StringWriter+StringWriter(int) org.h2.util.IOUtils+copyAndCloseInput(Reader,Writer,long) org.h2.util.IOUtils+copyAndCloseInput(Reader,Writer,long) java.io.StringWriter+toString() java.io.StringWriter+toString() java.io.Reader+close() java.io.Reader+close()",java.lang.Integer+MAX_VALUE org.h2.engine.Constants+IO_BUFFER_SIZE,715,21,9,"/** 
 * Read a number of characters from a reader and close it.
 * @param in the reader
 * @param length the maximum number of characters to read, or -1 to readuntil the end of file
 * @return the string read
 */
","/**
     * Read a number of characters from a reader and close it.
     *
     * @param in the reader
     * @param length the maximum number of characters to read, or -1 to read
     *            until the end of file
     * @return the string read
     */
    public static String readStringAndClose(Reader in, int length) throws IOException {
        try {
            if (length <= 0) {
                length = Integer.MAX_VALUE;
            }
            int block = Math.min(Constants.IO_BUFFER_SIZE, length);
            StringWriter out = new StringWriter(block);
            copyAndCloseInput(in, out, length);
            return out.toString();
        } finally {
            in.close();
        }
    }",False,False,The function of this method is to read a specified number of characters from a reader and then close the reader. It returns the string that was read.,True,"The `readStringAndClose` method reads a specified number of characters from a reader and returns the string read. It closes the reader after reading. If the length is -1, it reads until the end of the file."
15,"readFully(InputStream,byte[],int,int)",read fully in buffer off max try to read the given number of bytes to the buffer this method reads until the maximum number of bytes have been read or until the end of file param in the input stream param buffer the output buffer param off the offset in the buffer param max the number of bytes to read at most return the number of bytes read 0 meaning eo f ,Method,,"org.h2.command.dml.ScriptCommand+writeLobStream(Value) org.h2.store.DataReader+readFully(byte[],int,int) org.h2.store.fs.FileObjectZip+readFully(byte[],int,int) org.h2.store.LobStorage+addLob(InputStream,long,int) org.h2.value.ValueLob+createBlob(InputStream,long,DataHandler) org.h2.value.ValueLob+createFromStream(byte[],int,InputStream,long,DataHandler) org.h2.value.ValueLobDb+createTempBlob(InputStream,long,DataHandler) org.h2.value.ValueLobDb+createTempFromStream(byte[],int,InputStream,long,DataHandler) org.h2.dev.fs.FileObjectZip2+readFully(byte[],int,int)","java.lang.Math+min(int,int) java.lang.Math+min(int,int) java.io.InputStream+read(byte[],int,int) java.io.InputStream+read(byte[],int,int) org.h2.message.DbException+convertToIOException(Throwable) org.h2.message.DbException+convertToIOException(Throwable)",,986,29,9,"/** 
 * Try to read the given number of bytes to the buffer. This method reads until the maximum number of bytes have been read or until the end of file.
 * @param in the input stream
 * @param buffer the output buffer
 * @param off the offset in the buffer
 * @param max the number of bytes to read at most
 * @return the number of bytes read, 0 meaning EOF
 */
","/**
     * Try to read the given number of bytes to the buffer. This method reads
     * until the maximum number of bytes have been read or until the end of
     * file.
     *
     * @param in the input stream
     * @param buffer the output buffer
     * @param off the offset in the buffer
     * @param max the number of bytes to read at most
     * @return the number of bytes read, 0 meaning EOF
     */
    public static int readFully(InputStream in, byte[] buffer, int off, int max) throws IOException {
        try {
            int len = Math.min(max, buffer.length);
            int result = 0;
            while (len > 0) {
                int l = in.read(buffer, off, len);
                if (l < 0) {
                    break;
                }
                result += l;
                off += l;
                len -= l;
            }
            return result;
        } catch (Exception e) {
            throw DbException.convertToIOException(e);
        }
    }",False,False,"This method reads bytes from an input stream and stores them in a buffer. It reads until the maximum number of bytes have been read or until the end of the file. It returns the number of bytes read, with 0 indicating the end of the file.",True,"This code defines a method called `readFully` that reads a specified number of bytes from an input stream and stores them in a buffer. It returns the number of bytes read, with 0 indicating the end of the file. If any exception occurs during the reading process, it is converted to an IOException."
16,"readFully(Reader,char[],int)",read fully in buffer max try to read the given number of characters to the buffer this method reads until the maximum number of characters have been read or until the end of file param in the reader param buffer the output buffer param max the number of characters to read at most return the number of characters read ,Method,,"org.h2.command.dml.ScriptCommand+writeLobStream(Value) org.h2.value.ValueLob+createClob(Reader,long,DataHandler) org.h2.value.ValueLob+createFromReader(char[],int,Reader,long,DataHandler) org.h2.value.ValueLobDb+createTempClob(Reader,long,DataHandler) org.h2.value.ValueLobDb+createTempFromReader(char[],int,Reader,long,DataHandler)","java.lang.Math+min(int,int) java.lang.Math+min(int,int) java.io.Reader+read(char[],int,int) java.io.Reader+read(char[],int,int) org.h2.message.DbException+convertToIOException(Throwable) org.h2.message.DbException+convertToIOException(Throwable)",,1036,32,9,"/** 
 * Try to read the given number of characters to the buffer. This method reads until the maximum number of characters have been read or until the end of file.
 * @param in the reader
 * @param buffer the output buffer
 * @param max the number of characters to read at most
 * @return the number of characters read
 */
","/**
     * Try to read the given number of characters to the buffer. This method
     * reads until the maximum number of characters have been read or until the
     * end of file.
     *
     * @param in the reader
     * @param buffer the output buffer
     * @param max the number of characters to read at most
     * @return the number of characters read
     */
    public static int readFully(Reader in, char[] buffer, int max) throws IOException {
        try {
            int off = 0, len = Math.min(max, buffer.length);
            if (len == 0) {
                return 0;
            }
            while (true) {
                int l = len - off;
                if (l <= 0) {
                    break;
                }
                l = in.read(buffer, off, l);
                if (l < 0) {
                    break;
                }
                off += l;
            }
            return off <= 0 ? -1 : off;
        } catch (Exception e) {
            throw DbException.convertToIOException(e);
        }
    }",False,False,The function of this method is to read a specified number of characters from a reader and store them in a buffer. It reads until the maximum number of characters have been read or until the end of file. The method returns the number of characters read.,True,The `readFully` method reads characters from a given reader and stores them in a buffer. It reads until the maximum number of characters have been read or until the end of the file. The method returns the number of characters read.
17,getBufferedReader(InputStream),get buffered reader in create a buffered reader to read from an input stream using the utf 8 format if the input stream is null this method returns null the input stream reader that is used here is not exact that means it may read some additional bytes when buffering param in the input stream or null return the reader ,Method,,"org.h2.tools.ConvertTraceFile+convertFile(String,String,String) org.h2.value.ValueLob+getReader() org.h2.value.ValueLobDb+getReader() org.h2.test.unit.TestReader+test()","java.io.BufferedReader+BufferedReader(Reader) java.io.InputStreamReader+InputStreamReader(InputStream,String) org.h2.message.DbException+convert(Throwable) org.h2.message.DbException+convert(Throwable)",org.h2.engine.Constants+UTF8,688,18,9,"/** 
 * Create a buffered reader to read from an input stream using the UTF-8 format. If the input stream is null, this method returns null. The InputStreamReader that is used here is not exact, that means it may read some additional bytes when buffering.
 * @param in the input stream or null
 * @return the reader
 */
","/**
     * Create a buffered reader to read from an input stream using the UTF-8
     * format. If the input stream is null, this method returns null. The
     * InputStreamReader that is used here is not exact, that means it may read
     * some additional bytes when buffering.
     *
     * @param in the input stream or null
     * @return the reader
     */
    public static Reader getBufferedReader(InputStream in) {
        try {
            //
            return in == null ? null : new BufferedReader(new InputStreamReader(in, Constants.UTF8));
        } catch (Exception e) {
            // UnsupportedEncodingException
            throw DbException.convert(e);
        }
    }",False,False,"This method creates a buffered reader to read from an input stream using the UTF-8 format. If the input stream is null, it returns null.",True,"This code defines a method called `getBufferedReader` that takes an input stream as a parameter and returns a buffered reader. The buffered reader is created using the UTF-8 format and an input stream reader. If the input stream is null, the method returns null."
18,getReader(InputStream),get reader in create a reader to read from an input stream using the utf 8 format if the input stream is null this method returns null the input stream reader that is used here is not exact that means it may read some additional bytes when buffering param in the input stream or null return the reader ,Method,,org.h2.jdbc.JdbcClob+call(),"java.io.BufferedReader+BufferedReader(Reader) java.io.InputStreamReader+InputStreamReader(InputStream,String) org.h2.message.DbException+convert(Throwable) org.h2.message.DbException+convert(Throwable)",org.h2.engine.Constants+UTF8,714,18,9,"/** 
 * Create a reader to read from an input stream using the UTF-8 format. If the input stream is null, this method returns null. The InputStreamReader that is used here is not exact, that means it may read some additional bytes when buffering.
 * @param in the input stream or null
 * @return the reader
 */
","/**
     * Create a reader to read from an input stream using the UTF-8 format. If
     * the input stream is null, this method returns null. The InputStreamReader
     * that is used here is not exact, that means it may read some additional
     * bytes when buffering.
     *
     * @param in the input stream or null
     * @return the reader
     */
    public static Reader getReader(InputStream in) {
        try {
            // InputStreamReader may read some more bytes
            return in == null ? null : new BufferedReader(new InputStreamReader(in, Constants.UTF8));
        } catch (Exception e) {
            // UnsupportedEncodingException
            throw DbException.convert(e);
        }
    }",False,False,"This method creates a reader to read from an input stream using the UTF-8 format. If the input stream is null, it returns null. The reader may read some additional bytes when buffering.",True,"This code defines a method called ""getReader"" that takes an input stream as a parameter and returns a reader. The reader is created using an InputStreamReader that reads from the input stream using the UTF-8 format. If the input stream is null, the method returns null."
19,getBufferedWriter(OutputStream),get buffered writer out create a buffered writer to write to an output stream using the utf 8 format if the output stream is null this method returns null param out the output stream or null return the writer ,Method,,"org.h2.message.TraceSystem+openWriter() org.h2.tools.ConvertTraceFile+convertFile(String,String,String) org.h2.tools.ConvertTraceFile+convertFile(String,String,String) org.h2.tools.Recover+getWriter(String,String) org.h2.tools.Script+process(Connection,OutputStream) org.h2.util.SourceCompiler+javacCompile(String,String,String)","java.io.BufferedWriter+BufferedWriter(Writer) java.io.OutputStreamWriter+OutputStreamWriter(OutputStream,String) org.h2.message.DbException+convert(Throwable) org.h2.message.DbException+convert(Throwable)",org.h2.engine.Constants+UTF8,552,15,9,"/** 
 * Create a buffered writer to write to an output stream using the UTF-8 format. If the output stream is null, this method returns null.
 * @param out the output stream or null
 * @return the writer
 */
","/**
     * Create a buffered writer to write to an output stream using the UTF-8
     * format. If the output stream is null, this method returns null.
     *
     * @param out the output stream or null
     * @return the writer
     */
    public static Writer getBufferedWriter(OutputStream out) {
        try {
            return out == null ? null : new BufferedWriter(new OutputStreamWriter(out, Constants.UTF8));
        } catch (Exception e) {
            // UnsupportedEncodingException
            throw DbException.convert(e);
        }
    }",False,False,"This method creates a buffered writer to write to an output stream using the UTF-8 format. If the output stream is null, it returns null.",True,"This code defines a method called ""getBufferedWriter"" that takes an OutputStream as input and returns a Writer object. The method creates a BufferedWriter object with the given OutputStreamWriter and UTF-8 encoding, and returns it. If the OutputStream is null, the method returns null."
20,getInputStreamFromString(String),get input stream from string s create an input stream to read from a string the string is converted to a byte array using utf 8 encoding if the string is null this method returns null param s the string return the input stream ,Method,,org.h2.jdbc.JdbcClob+getAsciiStream() org.h2.jdbc.JdbcResultSet+getAsciiStream(int) org.h2.jdbc.JdbcResultSet+getAsciiStream(String),java.io.ByteArrayInputStream+ByteArrayInputStream(byte[]) org.h2.util.StringUtils+utf8Encode(String) org.h2.util.StringUtils+utf8Encode(String),,456,14,9,"/** 
 * Create an input stream to read from a string. The string is converted to a byte array using UTF-8 encoding. If the string is null, this method returns null.
 * @param s the string
 * @return the input stream
 */
","/**
     * Create an input stream to read from a string. The string is converted to
     * a byte array using UTF-8 encoding.
     * If the string is null, this method returns null.
     *
     * @param s the string
     * @return the input stream
     */
    public static InputStream getInputStreamFromString(String s) {
        if (s == null) {
            return null;
        }
        return new ByteArrayInputStream(StringUtils.utf8Encode(s));
    }",False,False,"This method creates an input stream to read from a string. It converts the string to a byte array using UTF-8 encoding. If the string is null, it returns null.",True,"This code defines a method called ""getInputStreamFromString"" that takes a string as input and returns an input stream. The method converts the string to a byte array using UTF-8 encoding and creates a ByteArrayInputStream object from the byte array. If the input string is null, the method returns null."
21,getReaderFromString(String),get reader from string s create a reader to read from a string if the string is null this method returns null param s the string or null return the reader ,Method,,org.h2.value.Value+getReader(),java.io.StringReader+StringReader(String),,299,10,9,"/** 
 * Create a reader to read from a string. If the string is null, this method returns null.
 * @param s the string or null
 * @return the reader
 */
","/**
     * Create a reader to read from a string.
     * If the string is null, this method returns null.
     *
     * @param s the string or null
     * @return the reader
     */
    public static Reader getReaderFromString(String s) {
        return s == null ? null : new StringReader(s);
    }",False,False,"This method creates a reader to read from a string. If the string is null, it returns null. Otherwise, it returns a reader that reads from the given string.",True,"This code defines a method called ""getReaderFromString"" that takes a string as input and returns a reader object. If the input string is null, the method returns null. The reader object is created using the StringReader class, which allows reading characters from a string."
22,getAsciiReader(InputStream),get ascii reader in wrap an input stream in a reader the bytes are converted to characters using the us ascii character set param in the input stream return the reader ,Method,,"org.h2.jdbc.JdbcPreparedStatement+setAsciiStream(int,InputStream,long) org.h2.jdbc.JdbcResultSet+updateAsciiStream(int,InputStream,long) org.h2.jdbc.JdbcResultSet+updateAsciiStream(String,InputStream,long)","java.io.InputStreamReader+InputStreamReader(InputStream,String) org.h2.message.DbException+convert(Throwable) org.h2.message.DbException+convert(Throwable)",,482,15,9,"/** 
 * Wrap an input stream in a reader. The bytes are converted to characters using the US-ASCII character set.
 * @param in the input stream
 * @return the reader
 */
","/**
     * Wrap an input stream in a reader. The bytes are converted to characters
     * using the US-ASCII character set.
     *
     * @param in the input stream
     * @return the reader
     */
    public static Reader getAsciiReader(InputStream in) {
        try {
            return in == null ? null : new InputStreamReader(in, ""US-ASCII"");
        } catch (Exception e) {
            // UnsupportedEncodingException
            throw DbException.convert(e);
        }
    }",False,False,This method takes an input stream and returns a reader that converts the bytes from the input stream to characters using the US-ASCII character set.,True,"The code defines a method called `getAsciiReader` that takes an input stream as a parameter and returns a reader. The method converts the bytes from the input stream to characters using the US-ASCII character set. If an exception occurs during the conversion, it is caught and converted into a custom exception."
23,mkdirs(File),mkdirs directory create the directory and all parent directories if required param directory the directory throws io exception ,Method,,"org.h2.store.fs.FileSystemDisk+createTempFile(String,String,boolean,boolean) org.h2.util.SourceCompiler+javacCompile(String,String,String) org.h2.test.db.TestLob+testTempFilesDeleted()",java.io.File+exists() java.io.File+exists() java.io.File+isDirectory() java.io.File+isDirectory() java.io.IOException+IOException(String) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath() java.io.File+mkdirs() java.io.File+mkdirs() java.io.IOException+IOException(String) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath(),,923,24,9,"/** 
 * Create the directory and all parent directories if required.
 * @param directory the directory
 * @throws IOException
 */
","/**
     * Create the directory and all parent directories if required.
     *
     * @param directory the directory
     * @throws IOException
     */
    public static void mkdirs(File directory) throws IOException {
        // loop, to deal with race conditions (if another thread creates or
        // deletes the same directory at the same time).
        for (int i = 0; i < 5; i++) {
            if (directory.exists()) {
                if (directory.isDirectory()) {
                    return;
                }
                throw new IOException(""Could not create directory, "" +
                        ""because a file with the same name already exists: "" +
                        directory.getAbsolutePath());
            }
            if (directory.mkdirs()) {
                return;
            }
        }
        throw new IOException(""Could not create directory: "" + directory.getAbsolutePath());
    }",False,False,This method creates a directory and all its parent directories if they do not already exist. It handles race conditions and throws an IOException if the directory cannot be created.,True,"This code defines a method called `mkdirs` that creates a directory and all its parent directories if they do not already exist. It handles race conditions by checking if the directory exists and if it is a directory before creating it. If the directory cannot be created after multiple attempts, an IOException is thrown."
24,"setLength(RandomAccessFile,long)",set length file new length change the length of the file param file the random access file param new length the new length ,Method,,org.h2.store.fs.FileObjectDisk+setFileLength(long) org.h2.store.fs.FileObjectDiskMapped+setFileLength(long) org.h2.test.poweroff.Test+testFile(DataOutputStream),"org.h2.util.IOUtils+trace(String,String,Object) org.h2.util.IOUtils+trace(String,String,Object) java.io.RandomAccessFile+setLength(long) java.io.RandomAccessFile+setLength(long) java.io.RandomAccessFile+length() java.io.RandomAccessFile+length() java.io.RandomAccessFile+getFilePointer() java.io.RandomAccessFile+getFilePointer() java.io.RandomAccessFile+seek(long) java.io.RandomAccessFile+seek(long) java.lang.Math+min(long,long) java.lang.Math+min(long,long) java.lang.Math+min(long,long) java.lang.Math+min(long,long) java.io.RandomAccessFile+write(byte[],int,int) java.io.RandomAccessFile+write(byte[],int,int) java.io.RandomAccessFile+seek(long) java.io.RandomAccessFile+seek(long)",,989,29,9,"/** 
 * Change the length of the file.
 * @param file the random access file
 * @param newLength the new length
 */
","/**
     * Change the length of the file.
     *
     * @param file the random access file
     * @param newLength the new length
     */
    public static void setLength(RandomAccessFile file, long newLength) throws IOException {
        try {
            trace(""setLength"", null, file);
            file.setLength(newLength);
        } catch (IOException e) {
            long length = file.length();
            if (newLength < length) {
                throw e;
            }
            long pos = file.getFilePointer();
            file.seek(length);
            long remaining = newLength - length;
            int maxSize = 1024 * 1024;
            int block = (int) Math.min(remaining, maxSize);
            byte[] buffer = new byte[block];
            while (remaining > 0) {
                int write = (int) Math.min(remaining, maxSize);
                file.write(buffer, 0, write);
                remaining -= write;
            }
            file.seek(pos);
        }
    }",False,False,The function of this method is to change the length of a file by either truncating or extending it.,True,"This code defines a method called ""setLength"" that changes the length of a given random access file. If the new length is smaller than the current length, it throws an IOException. Otherwise, it writes empty bytes to extend the file to the new length."
25,getFileName(String),get file name name get the file name without directory part param name the directory and file name return just the file name ,Method,,"org.h2.command.dml.BackupCommand+backupTo(String) org.h2.command.dml.BackupCommand+backupPageStore(ZipOutputStream,String,PageStore) org.h2.engine.ConnectionInfo+getName() org.h2.engine.Database+close(boolean) org.h2.store.fs.FileSystemWrapper+getFileName(String) org.h2.value.ValueLob+getNewObjectId(DataHandler) org.h2.test.db.TestLinkedTable+testLinkedTableInReadOnlyDb() org.h2.test.unit.TestFileSystem+testDatabaseInJar() org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.dev.fs.FileShell+execute(String[]) org.h2.dev.ftp.server.FtpServer+appendFile(StringBuilder,String)",org.h2.store.fs.FileSystem+getFileName(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+getFileName(String),,262,9,9,"/** 
 * Get the file name (without directory part).
 * @param name the directory and file name
 * @return just the file name
 */
","/**
     * Get the file name (without directory part).
     *
     * @param name the directory and file name
     * @return just the file name
     */
    public static String getFileName(String name) {
        return getFileSystem(name).getFileName(name);
    }",False,True,This method returns the file name (without the directory part) by calling the getFileName method of the file system associated with the given name.,True,"The given code is a method named ""getFileName"" that takes a string parameter representing a directory and file name. It returns only the file name by calling the ""getFileName"" method from the ""FileSystem"" class, which is obtained from the given name parameter."
26,canWrite(String),can write file name check if the file is writable param file name the file name return if the file is writable ,Method,,"org.h2.store.FileStore+FileStore(DataHandler,String,String) org.h2.store.fs.FileSystemWrapper+canWrite(String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.dev.ftp.server.FtpServer+appendFile(StringBuilder,String)",org.h2.store.fs.FileSystem+canWrite(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+canWrite(String),,251,9,9,"/** 
 * Check if the file is writable.
 * @param fileName the file name
 * @return if the file is writable
 */
","/**
     * Check if the file is writable.
     *
     * @param fileName the file name
     * @return if the file is writable
     */
    public static boolean canWrite(String fileName) {
        return getFileSystem(fileName).canWrite(fileName);
    }",True,True,"The function checks if a file is writable by calling the ""canWrite"" method of the file system associated with the given file name. It returns a boolean value indicating whether the file is writable or not.",True,"The given code is a method named ""canWrite"" that takes a file name as input and returns a boolean value indicating whether the file is writable or not. It internally calls another method ""getFileSystem"" to check the file system's write permission for the given file."
27,setReadOnly(String),set read only file name disable the ability to write param file name the file name return true if the call was successful ,Method,,org.h2.store.fs.FileSystemWrapper+setReadOnly(String) org.h2.test.db.TestLinkedTable+testLinkedTableInReadOnlyDb() org.h2.test.db.TestReadOnly+setReadOnly() org.h2.test.unit.TestTraceSystem+testReadOnly() org.h2.dev.fs.FileShell+execute(String[]),org.h2.store.fs.FileSystem+setReadOnly(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+setReadOnly(String),,264,9,9,"/** 
 * Disable the ability to write.
 * @param fileName the file name
 * @return true if the call was successful
 */
","/**
     * Disable the ability to write.
     *
     * @param fileName the file name
     * @return true if the call was successful
     */
    public static boolean setReadOnly(String fileName) {
        return getFileSystem(fileName).setReadOnly(fileName);
    }",True,True,This method disables the ability to write to a file by setting it as read-only. It takes a file name as input and returns true if the operation was successful.,True,"The given code is a method named ""setReadOnly"" that takes a file name as input and disables the ability to write to that file. It returns a boolean value indicating whether the operation was successful or not."
28,"copy(String,String)",copy original copy copy a file from one directory to another or to another file param original the original file name param copy the file name of the copy ,Method,,"org.h2.store.RecoverTester+testDatabase(String,PrintWriter) org.h2.store.RecoverTester+testDatabase(String,PrintWriter) org.h2.value.ValueLob+copyFileTo(DataHandler,String,String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestReopen+logDb(String) org.h2.test.unit.TestReopen+logDb(String) org.h2.dev.fs.FileShell+execute(String[])","org.h2.util.IOUtils+openFileInputStream(String) org.h2.util.IOUtils+openFileInputStream(String) org.h2.util.IOUtils+openFileOutputStream(String,boolean) org.h2.util.IOUtils+openFileOutputStream(String,boolean) org.h2.util.IOUtils+copyAndClose(InputStream,OutputStream) org.h2.util.IOUtils+copyAndClose(InputStream,OutputStream)",,413,11,9,"/** 
 * Copy a file from one directory to another, or to another file.
 * @param original the original file name
 * @param copy the file name of the copy
 */
","/**
     * Copy a file from one directory to another, or to another file.
     *
     * @param original the original file name
     * @param copy the file name of the copy
     */
    public static void copy(String original, String copy) throws IOException {
        InputStream in = openFileInputStream(original);
        OutputStream out = openFileOutputStream(copy, false);
        copyAndClose(in, out);
    }",True,True,"The function of this method is to copy a file from one directory to another, or to another file. It takes two parameters: the original file name and the file name of the copy. It throws an IOException if there is an error during the copying process.",True,"The given code is a method named ""copy"" that takes two file names as input parameters. It copies the contents of the original file to the copy file by opening input and output streams, and then calls another method ""copyAndClose"" to perform the actual copying. It throws an IOException if any error occurs during the copying process."
29,createNewFile(String),create new file file name create a new file param file name the file name return true if creating was successful ,Method,,org.h2.store.FileLock+lockSerialized() org.h2.store.FileLock+lockFile() org.h2.store.FileLock+lockFile() org.h2.store.FileLock+lockSocket() org.h2.store.FileLock+lockSocket() org.h2.store.fs.FileSystemWrapper+createNewFile(String) org.h2.test.unit.TestFileSystem+testSimple(String),org.h2.store.fs.FileSystem+createNewFile(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+createNewFile(String),,257,9,9,"/** 
 * Create a new file.
 * @param fileName the file name
 * @return true if creating was successful
 */
","/**
     * Create a new file.
     *
     * @param fileName the file name
     * @return true if creating was successful
     */
    public static boolean createNewFile(String fileName) {
        return getFileSystem(fileName).createNewFile(fileName);
    }",True,True,This method creates a new file with the given file name and returns true if the creation was successful.,True,"This code defines a method called ""createNewFile"" that takes a file name as input and returns a boolean value indicating whether the file creation was successful. The method internally calls another method called ""getFileSystem"" to create the file using the provided file name."
30,"openFileObject(String,String)",open file object file name mode open a random access file object param file name the file name param mode the access mode supported are r rw rws rwd return the file object ,Method,,"org.h2.store.FileStore+FileStore(DataHandler,String,String) org.h2.store.FileStore+openFile() org.h2.store.fs.FileSystemWrapper+openFileObject(String,String) org.h2.test.db.TestOpenClose+testErrorMessageWrongSplit() org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestFileSystem+testRandomAccess(String,int) org.h2.test.unit.TestFileSystem+testRandomAccess(String,int) org.h2.test.unit.TestPageStoreCoverage+testIncompleteCreate() org.h2.test.unit.TestPageStoreCoverage+testIncompleteCreate() org.h2.test.unit.TestRecovery+testCorrupt() org.h2.dev.fs.FileShell+truncate(String,long) org.h2.dev.fs.FileSystemCrypt+openFileObject(String,String)","org.h2.store.fs.FileSystem+openFileObject(String,String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+openFileObject(String,String)",,365,10,9,"/** 
 * Open a random access file object.
 * @param fileName the file name
 * @param mode the access mode. Supported are r, rw, rws, rwd
 * @return the file object
 */
","/**
     * Open a random access file object.
     *
     * @param fileName the file name
     * @param mode the access mode. Supported are r, rw, rws, rwd
     * @return the file object
     */
    public static FileObject openFileObject(String fileName, String mode) throws IOException {
        return getFileSystem(fileName).openFileObject(fileName, mode);
    }",False,True,"This method serves to open a random access file object by taking in a file name and access mode as parameters, and returns the file object.",True,"The code defines a method called ""openFileObject"" that takes a file name and an access mode as parameters and returns a FileObject. It throws an IOException if an error occurs. The method internally calls another method called ""openFileObject"" from the ""getFileSystem"" class, passing the file name and access mode as arguments."
31,getCanonicalPath(String),get canonical path file name normalize a file name param file name the file name return the normalized file name ,Method,,"org.h2.command.dml.BackupCommand+backupFile(ZipOutputStream,String,String) org.h2.command.dml.BackupCommand+backupFile(ZipOutputStream,String,String) org.h2.engine.ConnectionInfo+setBaseDir(String) org.h2.engine.ConnectionInfo+setBaseDir(String) org.h2.engine.ConnectionInfo+getName() org.h2.engine.Database+getDatabasePath() org.h2.security.CipherFactory+setKeystore() org.h2.store.FileLister+getDir(String) org.h2.store.FileLister+getDatabaseFiles(String,String,boolean) org.h2.store.fs.FileSystemWrapper+getCanonicalPath(String) org.h2.tools.Backup+process(String,String,String,boolean) org.h2.tools.Backup+process(String,String,String,boolean) org.h2.value.ValueLob+getFileNamePrefix(String,int) org.h2.test.unit.TestFileSystem+test() org.h2.test.unit.TestFileSystem+testUserHome() org.h2.dev.fs.FileShell+promptLoop() org.h2.dev.fs.FileShell+execute(String[]) org.h2.dev.fs.FileShell+zip(String,String,ArrayList<String>) org.h2.dev.fs.FileShell+getFile(String) org.h2.dev.fs.FileSystemCrypt+getCanonicalPath(String) org.h2.dev.ftp.server.FtpServer+init(String) org.h2.dev.ftp.server.FtpServer+start()",org.h2.store.fs.FileSystem+getCanonicalPath(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+getCanonicalPath(String),,259,9,9,"/** 
 * Normalize a file name.
 * @param fileName the file name
 * @return the normalized file name
 */
","/**
     * Normalize a file name.
     *
     * @param fileName the file name
     * @return the normalized file name
     */
    public static String getCanonicalPath(String fileName) {
        return getFileSystem(fileName).getCanonicalPath(fileName);
    }",True,True,This method returns the normalized file name by calling the getCanonicalPath method of the file system associated with the given file name.,True,"The code defines a method called ""getCanonicalPath"" that takes a file name as input and returns the normalized file name. It internally calls another method ""getCanonicalPath"" from the ""FileSystem"" class to perform the normalization."
32,tryDelete(String),try delete file name try to delete a file param file name the file name return true if it worked ,Method,"deleteRecursive(String,boolean)","org.h2.engine.Database+deleteOldTempFiles() org.h2.store.fs.FileSystemWrapper+tryDelete(String) org.h2.tools.DeleteDbFiles+process(String,boolean) org.h2.tools.DeleteDbFiles+process(String,boolean) org.h2.util.TempFileDeleter+deleteFile(Reference<?>,String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processRemoveDir(String)",org.h2.store.fs.FileSystem+tryDelete(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+tryDelete(String),,238,9,9,"/** 
 * Try to delete a file.
 * @param fileName the file name
 * @return true if it worked
 */
","/**
     * Try to delete a file.
     *
     * @param fileName the file name
     * @return true if it worked
     */
    public static boolean tryDelete(String fileName) {
        return getFileSystem(fileName).tryDelete(fileName);
    }",True,True,This method attempts to delete a file by calling the tryDelete method of the file system associated with the given file name. It returns true if the deletion was successful.,True,"This code defines a method called ""tryDelete"" that attempts to delete a file specified by the given file name. It returns a boolean value indicating whether the deletion was successful or not."
33,isReadOnly(String),is read only file name check if a file is read only param file name the file name return if it is read only ,Method,,"org.h2.engine.Database+open(int,int) org.h2.engine.Database+open(int,int) org.h2.message.TraceSystem+openWriter() org.h2.store.fs.FileSystemWrapper+isReadOnly(String) org.h2.test.db.TestLinkedTable+testLinkedTableInReadOnlyDb() org.h2.dev.fs.FileShell+execute(String[])",org.h2.store.fs.FileSystem+isReadOnly(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+isReadOnly(String),,249,9,9,"/** 
 * Check if a file is read-only.
 * @param fileName the file name
 * @return if it is read only
 */
","/**
     * Check if a file is read-only.
     *
     * @param fileName the file name
     * @return if it is read only
     */
    public static boolean isReadOnly(String fileName) {
        return getFileSystem(fileName).isReadOnly(fileName);
    }",True,True,This method checks if a file is read-only by calling the isReadOnly method of the file system associated with the given file name. It returns a boolean value indicating whether the file is read-only or not.,True,"This code defines a method called ""isReadOnly"" that takes a file name as input and returns a boolean value indicating whether the file is read-only or not. It internally calls another method called ""getFileSystem"" to get the file system and then checks if the file is read-only using the ""isReadOnly"" method of the file system."
34,exists(String),exists file name checks if a file exists param file name the file name return true if it exists ,Method,"deleteRecursive(String,boolean) createDirectories(String)","org.h2.engine.Database+exists(String) org.h2.engine.Database+openFile(String,String,boolean) org.h2.engine.Database+open(int,int) org.h2.engine.Database+open(int,int) org.h2.engine.Database+open(int,int) org.h2.engine.SessionRemote+openFile(String,String,boolean) org.h2.message.TraceSystem+writeFile(String,Throwable) org.h2.message.TraceSystem+openWriter() org.h2.security.CipherFactory+setKeystore() org.h2.store.FileLock+run() org.h2.store.FileStore+FileStore(DataHandler,String,String) org.h2.store.fs.FileSystemWrapper+exists(String) org.h2.store.PageStore+open() org.h2.tools.Backup+process(String,String,String,boolean) org.h2.tools.Restore+execute(String,String,String,boolean) org.h2.upgrade.DbUpgrade+connectOrUpgrade(String,Properties) org.h2.upgrade.DbUpgrade+connectOrUpgrade(String,Properties) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.util.SortedProperties+loadProperties(String) org.h2.util.TempFileDeleter+deleteFile(Reference<?>,String) org.h2.test.db.TestUpgrade+testLobs() org.h2.test.db.TestUpgrade+testLobs() org.h2.test.db.TestUpgrade+testLobs() org.h2.test.db.TestUpgrade+testLobs() org.h2.test.db.TestUpgrade+testErrorUpgrading() org.h2.test.db.TestUpgrade+testErrorUpgrading() org.h2.test.db.TestUpgrade+testNoDb() org.h2.test.db.TestUpgrade+testNoDb() org.h2.test.db.TestUpgrade+testNoUpgradeOldAndNew() org.h2.test.db.TestUpgrade+testNoUpgradeOldAndNew() org.h2.test.db.TestUpgrade+testNoUpgradeOldAndNew() org.h2.test.db.TestUpgrade+testNoUpgradeOldAndNew() org.h2.test.db.TestUpgrade+testNoUpgradeOldAndNew() org.h2.test.db.TestUpgrade+testIfExists() org.h2.test.db.TestUpgrade+testIfExists() org.h2.test.db.TestUpgrade+testCipher() org.h2.test.db.TestUpgrade+testCipher() org.h2.test.server.TestWeb+testTools() org.h2.test.server.TestWeb+testTools() org.h2.test.server.TestWeb+testTools() org.h2.test.server.TestWeb+testTools() org.h2.test.server.TestWeb+testTools() org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestRecovery+testRecoverTestMode() org.h2.test.unit.TestTools+testConvertTraceFile() org.h2.test.unit.TestTools+testConvertTraceFile() org.h2.build.doc.UploadBuild+main(String) org.h2.dev.fs.FileShell+cat(String,long) org.h2.dev.fs.FileShell+zip(String,String,ArrayList<String>) org.h2.dev.fs.FileShell+readFileList(String[],int,ArrayList<String>,boolean) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processRemoveDir(String) org.h2.dev.ftp.server.FtpControl+processList(String,boolean)",org.h2.store.fs.FileSystem+exists(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+exists(String),,235,9,9,"/** 
 * Checks if a file exists.
 * @param fileName the file name
 * @return true if it exists
 */
","/**
     * Checks if a file exists.
     *
     * @param fileName the file name
     * @return true if it exists
     */
    public static boolean exists(String fileName) {
        return getFileSystem(fileName).exists(fileName);
    }",True,True,This method checks if a file exists by calling the `exists` method of the `getFileSystem` class with the given `fileName` parameter. It returns `true` if the file exists.,True,"The given code is a method named ""exists"" that takes a file name as input and returns a boolean value indicating whether the file exists or not. It internally calls another method ""getFileSystem"" to check the existence of the file."
35,length(String),length file name get the length of a file param file name the file name return the length in bytes ,Method,,"org.h2.message.TraceSystem+writeFile(String,Throwable) org.h2.security.CipherFactory+setKeystore() org.h2.store.fs.FileSystemWrapper+length(String) org.h2.store.PageStore+open() org.h2.store.RecoverTester+log(int,String,byte[],long) org.h2.test.db.TestFunctions+testFileRead() org.h2.test.db.TestTempTables+testDeleteGlobalTempTableWhenClosing() org.h2.test.db.TestTempTables+testDeleteGlobalTempTableWhenClosing() org.h2.test.jdbc.TestStatement+testTraceError() org.h2.test.jdbc.TestStatement+testTraceError() org.h2.test.jdbc.TestStatement+testTraceError() org.h2.test.unit.TestFileSystem+testDatabaseInJar() org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestReopen+logDb(String) org.h2.dev.fs.FileShell+execute(String[]) org.h2.dev.fs.FileShell+execute(String[]) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpServer+appendFile(StringBuilder,String)",org.h2.store.fs.FileSystem+length(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+length(String),,235,9,9,"/** 
 * Get the length of a file.
 * @param fileName the file name
 * @return the length in bytes
 */
","/**
     * Get the length of a file.
     *
     * @param fileName the file name
     * @return the length in bytes
     */
    public static long length(String fileName) {
        return getFileSystem(fileName).length(fileName);
    }",True,True,This method returns the length of a file in bytes by calling the length method of the file system associated with the given file name.,True,"This code defines a method called ""length"" that takes a file name as input and returns the length of the file in bytes. It internally calls another method called ""getFileSystem"" to retrieve the file system and then calls the ""length"" method of the file system to get the file length."
36,"createTempFile(String,String,boolean,boolean)",create temp file prefix suffix delete on exit in temp dir create a new temporary file param prefix the prefix of the file name including directory name ifrequired param suffix the suffix param delete on exit if the file should be deleted when the virtualmachine exists param in temp dir if the file should be stored in the temporary directory return the name of the created file ,Method,,"org.h2.engine.Database+createTempFile() org.h2.engine.SessionRemote+connectServer(ConnectionInfo) org.h2.store.fs.FileSystemWrapper+createTempFile(String,String,boolean,boolean) org.h2.value.ValueLobDb+initTemp(DataHandler) org.h2.test.unit.TestFileSystem+testRandomAccess(String,int) org.h2.test.unit.TestFileSystem+testTempFile(String) org.h2.dev.fs.FileSystemCrypt+createTempFile(String,String,boolean,boolean)","org.h2.store.fs.FileSystem+createTempFile(String,String,boolean,boolean) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+createTempFile(String,String,boolean,boolean)",,667,15,9,"/** 
 * Create a new temporary file.
 * @param prefix the prefix of the file name (including directory name ifrequired)
 * @param suffix the suffix
 * @param deleteOnExit if the file should be deleted when the virtualmachine exists
 * @param inTempDir if the file should be stored in the temporary directory
 * @return the name of the created file
 */
","/**
     * Create a new temporary file.
     *
     * @param prefix the prefix of the file name (including directory name if
     *            required)
     * @param suffix the suffix
     * @param deleteOnExit if the file should be deleted when the virtual
     *            machine exists
     * @param inTempDir if the file should be stored in the temporary directory
     * @return the name of the created file
     */
    public static String createTempFile(String prefix, String suffix, boolean deleteOnExit, boolean inTempDir)
            throws IOException {
        return getFileSystem(prefix).createTempFile(prefix, suffix, deleteOnExit, inTempDir);
    }",True,True,"This method creates a new temporary file with the given prefix, suffix, and options for deletion on exit and storage in the temporary directory. It returns the name of the created file.",True,This code is a method that creates a new temporary file with a given prefix and suffix. It allows the user to specify whether the file should be deleted on exit and whether it should be stored in the temporary directory. The method returns the name of the created file.
37,getParent(String),get parent file name get the parent directory of a file or directory param file name the file or directory name return the parent directory name ,Method,createDirectories(String),"org.h2.command.dml.BackupCommand+backupTo(String) org.h2.command.dml.BackupCommand+backupTo(String) org.h2.engine.Database+close(boolean) org.h2.engine.Database+deleteOldTempFiles() org.h2.message.TraceSystem+openWriter() org.h2.store.FileLock+lockSerialized() org.h2.store.FileLock+lockFile() org.h2.store.FileLock+lockSocket() org.h2.store.FileStore+FileStore(DataHandler,String,String) org.h2.store.fs.FileSystemWrapper+getParent(String) org.h2.tools.Backup+process(String,String,String,boolean) org.h2.tools.RunScript+process(Connection,String,boolean,String) org.h2.test.server.TestInit+test() org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestStreams+testLZFStreamClose() org.h2.dev.fs.FileSystemCrypt+getParent(String)",org.h2.store.fs.FileSystem+getParent(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+getParent(String),,285,9,9,"/** 
 * Get the parent directory of a file or directory.
 * @param fileName the file or directory name
 * @return the parent directory name
 */
","/**
     * Get the parent directory of a file or directory.
     *
     * @param fileName the file or directory name
     * @return the parent directory name
     */
    public static String getParent(String fileName) {
        return getFileSystem(fileName).getParent(fileName);
    }",True,True,This method returns the parent directory name of a given file or directory by calling the `getParent` method of the `FileSystem` class.,True,"This code defines a method called ""getParent"" that takes a file or directory name as input and returns the parent directory name. It utilizes another method called ""getFileSystem"" to retrieve the file system and then calls the ""getParent"" method of the file system to get the parent directory name."
38,listFiles(String),list files path list the files in the given directory param path the directory return the list of fully qualified file names ,Method,"deleteRecursive(String,boolean)","org.h2.engine.Database+deleteOldTempFiles() org.h2.store.FileLister+getDatabaseFiles(String,String,boolean) org.h2.store.fs.FileSystemWrapper+listFiles(String) org.h2.tools.Backup+process(String,String,String,boolean) org.h2.value.ValueLob+getFileList(DataHandler,String) org.h2.value.ValueLob+getFileList(DataHandler,String) org.h2.value.ValueLob+removeAllForTable(DataHandler,String,int) org.h2.test.db.TestCases+testDeleteAndDropTableWithLobs(boolean) org.h2.test.db.TestLinkedTable+testLinkedTableInReadOnlyDb() org.h2.test.db.TestLob+testDropAllObjects() org.h2.test.db.TestLob+testDropAllObjects() org.h2.test.db.TestLob+testDropAllObjects() org.h2.test.db.TestLob+testDropAllObjects() org.h2.test.db.TestLob+testDropAllObjects() org.h2.test.db.TestLob+testDropAllObjects() org.h2.test.db.TestLob+testTempFilesDeleted() org.h2.test.db.TestLob+testTempFilesDeleted() org.h2.test.db.TestLob+testLobDeleteTemp() org.h2.test.db.TestLob+testLobDeleteTemp() org.h2.test.unit.TestFileLockSerialized+testLeftLogFiles() org.h2.test.unit.TestFileLockSerialized+testLeftLogFiles() org.h2.test.unit.TestFileSystem+testMemFsDir() org.h2.test.unit.TestFileSystem+testDatabaseInJar() org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.dev.fs.FileShell+execute(String[]) org.h2.dev.fs.FileShell+addFilesRecursive(String,ArrayList<String>) org.h2.dev.fs.FileSystemCrypt+listFiles(String) org.h2.dev.ftp.server.FtpServer+getDirectoryListing(String,boolean)",org.h2.store.fs.FileSystem+listFiles(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+listFiles(String),,261,9,9,"/** 
 * List the files in the given directory.
 * @param path the directory
 * @return the list of fully qualified file names
 */
","/**
     * List the files in the given directory.
     *
     * @param path the directory
     * @return the list of fully qualified file names
     */
    public static String[] listFiles(String path) {
        return getFileSystem(path).listFiles(path);
    }",True,True,This method returns a list of fully qualified file names in the given directory.,True,"The given code is a method named ""listFiles"" that takes a directory path as input and returns an array of fully qualified file names present in that directory. It internally calls the ""getFileSystem"" method to retrieve the file system and then uses it to list the files in the specified directory."
39,isDirectory(String),is directory file name check if it is a file or a directory param file name the file or directory name return true if it is a directory ,Method,"deleteRecursive(String,boolean)","org.h2.store.fs.FileSystemWrapper+isDirectory(String) org.h2.tools.Backup+process(String,String,String,boolean) org.h2.tools.ChangeFileEncryption+process(String,String,String,char[],char[],boolean) org.h2.tools.ChangeFileEncryption+copy(String,FileStore,byte[]) org.h2.tools.DeleteDbFiles+process(String,boolean) org.h2.util.Tool+printNoDatabaseFilesFound(String,String) org.h2.value.ValueLob+removeAllForTable(DataHandler,String,int) org.h2.test.unit.TestFileSystem+testDatabaseInJar() org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestTools+testRecover() org.h2.dev.fs.FileShell+execute(String[]) org.h2.dev.fs.FileShell+execute(String[]) org.h2.dev.fs.FileShell+cat(String,long) org.h2.dev.fs.FileShell+zip(String,String,ArrayList<String>) org.h2.dev.fs.FileShell+addFilesRecursive(String,ArrayList<String>) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processConnected(String,String) org.h2.dev.ftp.server.FtpControl+processRemoveDir(String) org.h2.dev.ftp.server.FtpControl+processList(String,boolean) org.h2.dev.ftp.server.FtpServer+appendFile(StringBuilder,String) org.h2.dev.ftp.server.FtpServer+getDirectoryListing(String,boolean) org.h2.dev.ftp.server.FtpServer+getDirectoryListing(String,boolean)",org.h2.store.fs.FileSystem+isDirectory(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+isDirectory(String),,279,9,9,"/** 
 * Check if it is a file or a directory.
 * @param fileName the file or directory name
 * @return true if it is a directory
 */
","/**
     * Check if it is a file or a directory.
     *
     * @param fileName the file or directory name
     * @return true if it is a directory
     */
    public static boolean isDirectory(String fileName) {
        return getFileSystem(fileName).isDirectory(fileName);
    }",True,True,"This method checks if a given file or directory name corresponds to a directory. It returns true if it is a directory, and false otherwise.",True,"The given code is a method named ""isDirectory"" that takes a file or directory name as input and returns a boolean value indicating whether the input is a directory or not. It internally calls the ""isDirectory"" method of the ""FileSystem"" class to perform the check."
40,isAbsolute(String),is absolute file name check if the file name includes a path param file name the file name return if the file name is absolute ,Method,,"org.h2.engine.ConnectionInfo+setBaseDir(String) org.h2.store.fs.FileSystemWrapper+isAbsolute(String) org.h2.tools.RunScript+process(Connection,boolean,String,Reader,String) org.h2.test.unit.TestFileSystem+testDatabaseInJar() org.h2.dev.fs.FileShell+getFile(String)",org.h2.store.fs.FileSystem+isAbsolute(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+isAbsolute(String),,269,9,9,"/** 
 * Check if the file name includes a path.
 * @param fileName the file name
 * @return if the file name is absolute
 */
","/**
     * Check if the file name includes a path.
     *
     * @param fileName the file name
     * @return if the file name is absolute
     */
    public static boolean isAbsolute(String fileName) {
        return getFileSystem(fileName).isAbsolute(fileName);
    }",True,True,"This method checks if the file name includes a path by calling the isAbsolute method of the file system associated with the file name. It returns true if the file name is absolute, and false otherwise.",True,"The given code is a method named ""isAbsolute"" that takes a file name as input and checks if the file name includes a path. It returns a boolean value indicating whether the file name is absolute or not."
41,"fileStartsWith(String,String)",file starts with file name prefix check if a file starts with a given prefix param file name the complete file name param prefix the prefix return true if it starts with the prefix ,Method,,"org.h2.engine.Database+deleteOldTempFiles() org.h2.store.FileLister+getDatabaseFiles(String,String,boolean) org.h2.store.FileLister+getDatabaseFiles(String,String,boolean) org.h2.store.fs.FileSystemWrapper+fileStartsWith(String,String)","org.h2.store.fs.FileSystem+fileStartsWith(String,String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+fileStartsWith(String,String)",,350,10,9,"/** 
 * Check if a file starts with a given prefix.
 * @param fileName the complete file name
 * @param prefix the prefix
 * @return true if it starts with the prefix
 */
","/**
     * Check if a file starts with a given prefix.
     *
     * @param fileName the complete file name
     * @param prefix the prefix
     * @return true if it starts with the prefix
     */
    public static boolean fileStartsWith(String fileName, String prefix) {
        return getFileSystem(fileName).fileStartsWith(fileName, prefix);
    }",True,True,"This method checks if a file starts with a given prefix by calling the fileStartsWith method of the file system associated with the file. It returns true if the file starts with the prefix, otherwise false.",True,"This code defines a method called ""fileStartsWith"" that takes a complete file name and a prefix as input. It then calls another method, ""fileStartsWith"", from the ""getFileSystem"" class to check if the file starts with the given prefix. The method returns true if the file starts with the prefix, otherwise false."
42,openFileInputStream(String),open file input stream file name create an input stream to read from the file param file name the file name return the input stream ,Method,"copy(String,String)","org.h2.command.dml.BackupCommand+backupFile(ZipOutputStream,String,String) org.h2.command.dml.RunScriptCommand+openInput() org.h2.expression.Function+getValueWithArgs(Session,Expression[]) org.h2.security.CipherFactory+setKeystore() org.h2.server.web.WebServer+TranslateThread.run() org.h2.store.fs.FileSystemWrapper+openFileInputStream(String) org.h2.tools.Backup+process(String,String,String,boolean) org.h2.tools.ConvertTraceFile+convertFile(String,String,String) org.h2.tools.Csv+initRead() org.h2.tools.Recover+readBlob(String) org.h2.tools.Restore+getOriginalDbName(String,String) org.h2.tools.Restore+execute(String,String,String,boolean) org.h2.tools.RunScript+process(Connection,String,boolean,String) org.h2.util.SortedProperties+loadProperties(String) org.h2.samples.CreateScriptFile+openScriptReader(String,String,String,String,String) org.h2.test.db.TestCsv+testNull() org.h2.test.db.TestCsv+testEmptyFieldDelimiter() org.h2.test.db.TestFunctions+testFileRead() org.h2.test.trace.Player+runFile(String) org.h2.test.unit.TestCompress+testDatabase() org.h2.test.unit.TestCompress+testDatabase() org.h2.test.unit.TestFileSystem+testClasspath() org.h2.test.unit.TestFileSystem+testClasspath() org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestFileSystem+testTempFile(String) org.h2.test.unit.TestRecovery+testCorrupt() org.h2.test.unit.TestStreams+testLZFStreamClose() org.h2.dev.fs.FileObjectZip2+readFully(byte[],int,int) org.h2.dev.fs.FileShell+cat(String,long) org.h2.dev.fs.FileShell+zip(String,String,ArrayList<String>) org.h2.dev.fs.FileShell+unzip(String,String) org.h2.dev.fs.FileSystemZip2+openZip(String) org.h2.dev.ftp.server.FtpData+send(String,long)",org.h2.store.fs.FileSystem+openFileInputStream(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+openFileInputStream(String),,304,9,9,"/** 
 * Create an input stream to read from the file.
 * @param fileName the file name
 * @return the input stream
 */
","/**
     * Create an input stream to read from the file.
     *
     * @param fileName the file name
     * @return the input stream
     */
    public static InputStream openFileInputStream(String fileName) throws IOException {
        return getFileSystem(fileName).openFileInputStream(fileName);
    }",True,True,This method serves to create an input stream to read from a file. It takes the file name as a parameter and returns the input stream. It throws an IOException if there is an error.,True,"The given code is a method named ""openFileInputStream"" that takes a file name as input and returns an input stream to read from the file. It throws an IOException if there is an error in opening the file or creating the input stream."
43,"openFileOutputStream(String,boolean)",open file output stream file name append create an output stream to write into the file param file name the file name param append if true the file will grow if false the file will betruncated first return the output stream ,Method,"copy(String,String)","org.h2.command.dml.BackupCommand+backupTo(String) org.h2.command.dml.RunScriptCommand+openOutput() org.h2.message.TraceSystem+openWriter() org.h2.security.CipherFactory+setKeystore() org.h2.server.web.WebServer+saveProperties(Properties) org.h2.server.web.WebServer+TranslateThread.run() org.h2.store.FileLock+save() org.h2.store.fs.FileSystemWrapper+openFileOutputStream(String,boolean) org.h2.store.RecoverTester+log(int,String,byte[],long) org.h2.tools.Backup+process(String,String,String,boolean) org.h2.tools.ConvertTraceFile+convertFile(String,String,String) org.h2.tools.ConvertTraceFile+convertFile(String,String,String) org.h2.tools.CreateCluster+process(String,String,String,String,String) org.h2.tools.Csv+initWrite() org.h2.tools.Recover+getWriter(String,String) org.h2.tools.Recover+dumpLob(String,boolean) org.h2.tools.Restore+execute(String,String,String,boolean) org.h2.tools.Script+execute(String,String,String,String) org.h2.util.SortedProperties+store(String) org.h2.util.SourceCompiler+javacCompile(String,String,String) org.h2.samples.CreateScriptFile+openScriptWriter(String,String,String,String,String) org.h2.test.db.TestCsv+testPreserveWhitespace() org.h2.test.db.TestCsv+testChangeData() org.h2.test.db.TestCsv+testChangeData() org.h2.test.db.TestCsv+testNull() org.h2.test.db.TestCsv+testFieldDelimiter() org.h2.test.db.TestCsv+testRead() org.h2.test.db.TestFunctions+testFileRead() org.h2.test.db.TestUpgrade+testErrorUpgrading() org.h2.test.db.TestUpgrade+testErrorUpgrading() org.h2.test.server.TestInit+test() org.h2.test.server.TestInit+test() org.h2.test.unit.TestFileLockSerialized+testPendingWrite() org.h2.test.unit.TestFileSystem+testMemFsDir() org.h2.test.unit.TestFileSystem+testTempFile(String) org.h2.test.unit.TestFileSystem+testTempFile(String) org.h2.test.unit.TestStreams+testLZFStreamClose() org.h2.test.unit.TestTraceSystem+testReadOnly() org.h2.dev.fs.FileShell+zip(String,String,ArrayList<String>) org.h2.dev.fs.FileShell+unzip(String,String) org.h2.dev.ftp.server.FtpData+receive(String) org.h2.dev.ftp.server.FtpServer+StreamRedirect.openOutput()","org.h2.store.fs.FileSystem+openFileOutputStream(String,boolean) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+openFileOutputStream(String,boolean)",,426,11,9,"/** 
 * Create an output stream to write into the file.
 * @param fileName the file name
 * @param append if true, the file will grow, if false, the file will betruncated first
 * @return the output stream
 */
","/**
     * Create an output stream to write into the file.
     *
     * @param fileName the file name
     * @param append if true, the file will grow, if false, the file will be
     *            truncated first
     * @return the output stream
     */
    public static OutputStream openFileOutputStream(String fileName, boolean append) {
        return getFileSystem(fileName).openFileOutputStream(fileName, append);
    }",True,True,This method serves to create an output stream to write into a file. It takes a file name and a boolean value indicating whether to append to the file or truncate it first. It returns the output stream.,True,This code defines a method called `openFileOutputStream` that creates an output stream to write into a file. It takes a file name and a boolean value indicating whether to append to the file or truncate it. The method returns the output stream for writing into the file.
44,"rename(String,String)",rename old name new name rename a file if this is allowed param old name the old fully qualified file name param new name the new fully qualified file name ,Method,,"org.h2.message.TraceSystem+writeFile(String,Throwable) org.h2.store.fs.FileSystemWrapper+rename(String,String) org.h2.tools.ChangeFileEncryption+process(String,String,String,char[],char[],boolean) org.h2.tools.ChangeFileEncryption+process(String,String,String,char[],char[],boolean) org.h2.tools.ChangeFileEncryption+copy(String,FileStore,byte[]) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.value.ValueLob+renameFile(DataHandler,String,String) org.h2.test.synth.TestKillRestartMulti+test() org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestTools+testConvertTraceFile() org.h2.dev.fs.FileShell+execute(String[]) org.h2.dev.ftp.server.FtpControl+processConnected(String,String)","org.h2.store.fs.FileSystem+rename(String,String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+rename(String,String)",,298,9,9,"/** 
 * Rename a file if this is allowed.
 * @param oldName the old fully qualified file name
 * @param newName the new fully qualified file name
 */
","/**
     * Rename a file if this is allowed.
     *
     * @param oldName the old fully qualified file name
     * @param newName the new fully qualified file name
     */
    public static void rename(String oldName, String newName) {
        getFileSystem(oldName).rename(oldName, newName);
    }",True,True,The function of this method is to rename a file by calling the rename method of the file system associated with the old file name.,True,"The given code snippet defines a method called ""rename"" that takes two parameters: ""oldName"" and ""newName"". This method is responsible for renaming a file by calling the ""rename"" method of the file system associated with the old file name."
45,createDirectory(String),create directory directory name create a directory all required parent directories already exist param directory name the directory name ,Method,createDirectories(String),org.h2.store.fs.FileSystemWrapper+createDirectory(String),org.h2.store.fs.FileSystem+createDirectory(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+createDirectory(String),,278,8,9,"/** 
 * Create a directory (all required parent directories already exist).
 * @param directoryName the directory name
 */
","/**
     * Create a directory (all required parent directories already exist).
     *
     * @param directoryName the directory name
     */
    public static void createDirectory(String directoryName) {
        getFileSystem(directoryName).createDirectory(directoryName);
    }",True,True,This method creates a directory with the given name. It assumes that all required parent directories already exist.,True,"The code defines a method called ""createDirectory"" that takes a directory name as input. It uses the ""getFileSystem"" method to obtain the file system and then calls the ""createDirectory"" method on it, passing the directory name as an argument. This method is responsible for creating a directory with the given name, assuming all required parent directories already exist."
46,delete(String),delete file name delete a file param file name the file name ,Method,"deleteRecursive(String,boolean)","org.h2.command.dml.RunScriptCommand+deleteStore() org.h2.message.TraceSystem+writeFile(String,Throwable) org.h2.store.FileLock+unlock() org.h2.store.FileLock+lockFile() org.h2.store.FileLock+lockSocket() org.h2.store.fs.FileObjectSplit+setFileLength(long) org.h2.store.fs.FileSystemWrapper+delete(String) org.h2.store.PageStore+openExisting() org.h2.tools.Backup+process(String,String,String,boolean) org.h2.tools.ChangeFileEncryption+process(String,String,String,char[],char[],boolean) org.h2.tools.ChangeFileEncryption+copy(String,FileStore,byte[]) org.h2.tools.ChangeFileEncryption+copy(String,FileStore,byte[]) org.h2.tools.CreateCluster+process(String,String,String,String,String) org.h2.tools.DeleteDbFiles+process(String,boolean) org.h2.tools.Recover+dumpLob(String,boolean) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.value.ValueLob+deleteFile(DataHandler,String) org.h2.value.ValueLobDb+close() org.h2.samples.Compact+compact(String,String,String,String) org.h2.samples.CreateScriptFile+openScriptWriter(String,String,String,String,String) org.h2.samples.CsvSample+main(String) org.h2.test.db.TestBackup+test() org.h2.test.db.TestCases+testReuseSpace() org.h2.test.db.TestCluster+deleteFiles() org.h2.test.db.TestCluster+deleteFiles() org.h2.test.db.TestCsv+testSpaceSeparated() org.h2.test.db.TestCsv+testSpaceSeparated() org.h2.test.db.TestCsv+testSpaceSeparated() org.h2.test.db.TestCsv+testNull() org.h2.test.db.TestCsv+testNull() org.h2.test.db.TestCsv+testRandomData() org.h2.test.db.TestCsv+testEmptyFieldDelimiter() org.h2.test.db.TestCsv+testEmptyFieldDelimiter() org.h2.test.db.TestCsv+testFieldDelimiter() org.h2.test.db.TestCsv+testFieldDelimiter() org.h2.test.db.TestCsv+testFieldDelimiter() org.h2.test.db.TestCsv+testPipe() org.h2.test.db.TestCsv+testRead() org.h2.test.db.TestCsv+testRead() org.h2.test.db.TestCsv+testWriteRead() org.h2.test.db.TestFunctions+testFileRead() org.h2.test.db.TestOpenClose+testErrorMessageWrongSplit() org.h2.test.db.TestOpenClose+testErrorMessageWrongSplit() org.h2.test.db.TestOpenClose+testBackup() org.h2.test.db.TestRights+testAccessRights() org.h2.test.db.TestRunscript+testEncoding() org.h2.test.db.TestRunscript+testClobPrimaryKey() org.h2.test.db.TestRunscript+test(boolean) org.h2.test.db.TestRunscript+test(boolean) org.h2.test.db.TestUpgrade+deleteDb(String) org.h2.test.db.TestUpgrade+deleteDb(String) org.h2.test.server.TestInit+test() org.h2.test.server.TestInit+test() org.h2.test.server.TestWeb+testTools() org.h2.test.server.TestWeb+testTools() org.h2.test.server.TestWeb+testTools() org.h2.test.server.TestWeb+testTools() org.h2.test.server.TestWeb+testTools() org.h2.test.synth.TestCrashAPI+getConnection(int,boolean) org.h2.test.synth.TestCrashAPI+getConnection(int,boolean) org.h2.test.synth.TestKillRestartMulti+test() org.h2.test.synth.TestRandomSQL+deleteDb() org.h2.test.unit.TestFile+doTest(boolean) org.h2.test.unit.TestFile+doTest(boolean) org.h2.test.unit.TestFile+doTest(boolean) org.h2.test.unit.TestFile+doTest(boolean) org.h2.test.unit.TestFileSystem+test() org.h2.test.unit.TestFileSystem+testDatabaseInMemFileSys() org.h2.test.unit.TestFileSystem+testDatabaseInJar() org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestFileSystem+testRandomAccess(String,int) org.h2.test.unit.TestFileSystem+testRandomAccess(String,int) org.h2.test.unit.TestFileSystem+testTempFile(String) org.h2.test.unit.TestFtp+test() org.h2.test.unit.TestPageStore+testLargeRows(int) org.h2.test.unit.TestPageStoreCoverage+testBackupRestore() org.h2.test.unit.TestRecovery+testRecoverTestMode() org.h2.test.unit.TestRecovery+testRunScript() org.h2.test.unit.TestSampleApps+test() org.h2.test.unit.TestStreams+testLZFStreamClose() org.h2.test.unit.TestTools+test() org.h2.test.unit.TestTools+test() org.h2.test.unit.TestTools+test() org.h2.test.unit.TestTools+testConvertTraceFile() org.h2.test.unit.TestTools+testConvertTraceFile() org.h2.test.unit.TestTools+testConvertTraceFile() org.h2.test.unit.TestTools+testConvertTraceFile() org.h2.test.unit.TestTools+testRemove() org.h2.test.unit.TestTools+testRecover() org.h2.test.unit.TestTools+testRecover() org.h2.test.unit.TestTraceSystem+testReadOnly() org.h2.test.unit.TestTraceSystem+testReadOnly() org.h2.build.doc.UploadBuild+main(String) org.h2.build.doc.UploadBuild+main(String) org.h2.build.doc.UploadBuild+main(String) org.h2.build.doc.UploadBuild+main(String) org.h2.dev.fs.FileShell+execute(String[]) org.h2.dev.fs.FileShell+zip(String,String,ArrayList<String>)",org.h2.store.fs.FileSystem+delete(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+delete(String),,182,8,9,"/** 
 * Delete a file.
 * @param fileName the file name
 */
","/**
     * Delete a file.
     *
     * @param fileName the file name
     */
    public static void delete(String fileName) {
        getFileSystem(fileName).delete(fileName);
    }",True,True,The function of this method is to delete a file by calling the delete method of the file system associated with the given file name.,True,"The given code is a method named ""delete"" that takes a file name as a parameter. It calls the ""delete"" method of the file system associated with the given file name to delete the file."
47,getLastModified(String),get last modified file name get the last modified date of a file param file name the file name return the last modified date ,Method,,"org.h2.store.FileLock+save() org.h2.store.FileLock+waitUntilOld() org.h2.store.FileLock+lockSocket() org.h2.store.FileLock+lockSocket() org.h2.store.FileLock+run() org.h2.store.fs.FileSystemWrapper+getLastModified(String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.dev.fs.FileShell+execute(String[]) org.h2.dev.ftp.server.FtpServer+appendFile(StringBuilder,String) org.h2.dev.ftp.server.FtpServer+formatLastModified(String)",org.h2.store.fs.FileSystem+getLastModified(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+getLastModified(String),,268,9,9,"/** 
 * Get the last modified date of a file.
 * @param fileName the file name
 * @return the last modified date
 */
","/**
     * Get the last modified date of a file.
     *
     * @param fileName the file name
     * @return the last modified date
     */
    public static long getLastModified(String fileName) {
        return getFileSystem(fileName).getLastModified(fileName);
    }",False,True,This method returns the last modified date of a file by calling the getLastModified method of the file system associated with the file name.,True,"This code defines a method called ""getLastModified"" that takes a file name as input and returns the last modified date of the file. It internally calls another method ""getFileSystem"" to retrieve the file system and then calls the ""getLastModified"" method of the file system to get the last modified date of the specified file."
48,unwrap(String),unwrap file name get the unwrapped file name without wrapper prefixes if wrapping delegating file systems are used param file name the file name return the unwrapped ,Method,,org.h2.engine.ConnectionInfo+setBaseDir(String) org.h2.engine.ConnectionInfo+setBaseDir(String) org.h2.engine.ConnectionInfo+setBaseDir(String) org.h2.engine.ConnectionInfo+setBaseDir(String) org.h2.dev.fs.FileShell+getFile(String),org.h2.store.fs.FileSystem+unwrap(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.util.IOUtils+getFileSystem(String) org.h2.store.fs.FileSystem+unwrap(String),,315,10,9,"/** 
 * Get the unwrapped file name (without wrapper prefixes if wrapping / delegating file systems are used).
 * @param fileName the file name
 * @return the unwrapped
 */
","/**
     * Get the unwrapped file name (without wrapper prefixes if wrapping /
     * delegating file systems are used).
     *
     * @param fileName the file name
     * @return the unwrapped
     */
    public static String unwrap(String fileName) {
        return getFileSystem(fileName).unwrap(fileName);
    }",True,True,This method returns the unwrapped file name by calling the `unwrap` method of the file system that is obtained from the given file name.,True,"The given code is a method named ""unwrap"" that takes a file name as input and returns the unwrapped file name. It internally calls the ""unwrap"" method of the file system associated with the given file name to perform the unwrapping operation."
49,getFileSystem(String),get file system file name ,Method,"getFileName(String) canWrite(String) setReadOnly(String) createNewFile(String) openFileObject(String,String) getCanonicalPath(String) tryDelete(String) isReadOnly(String) exists(String) length(String) createTempFile(String,String,boolean,boolean) getParent(String) listFiles(String) isDirectory(String) isAbsolute(String) fileStartsWith(String,String) openFileInputStream(String) openFileOutputStream(String,boolean) rename(String,String) createDirectory(String) delete(String) getLastModified(String) unwrap(String)",,org.h2.store.fs.FileSystem+getInstance(String) org.h2.store.fs.FileSystem+getInstance(String),,113,3,10,,"private static FileSystem getFileSystem(String fileName) {
        return FileSystem.getInstance(fileName);
    }",True,True,This method returns an instance of the FileSystem class based on the given fileName.,False,"The code defines a private static method named ""getFileSystem"" that takes a String parameter ""fileName"". It returns an instance of the FileSystem class by calling the static method ""getInstance"" of the FileSystem class, passing the ""fileName"" as an argument."
50,"trace(String,String,Object)",trace method file name o trace input or output operations if enabled param method the method from where this method was called param file name the file name param o the object to append to the message ,Method,"closeSilently(OutputStream) closeSilently(InputStream) setLength(RandomAccessFile,long)","org.h2.store.fs.FileSystemDisk+rename(String,String) org.h2.store.fs.FileSystemDisk+delete(String) org.h2.store.fs.FileSystemDisk+tryDelete(String) org.h2.store.fs.FileSystemDisk+openFileOutputStream(String,boolean) org.h2.store.fs.FileSystemDisk+openFileInputStream(String) org.h2.store.fs.FileSystemDisk+freeMemoryAndFinalize() org.h2.store.fs.FileSystemDisk+openFileObject(String,String) org.h2.store.fs.FileSystemDiskNio+openFileObject(String,String) org.h2.util.TempFileDeleter+addFile(String,Object) org.h2.util.TempFileDeleter+deleteFile(Reference<?>,String) org.h2.util.TempFileDeleter+stopAutoDelete(Reference<?>,String)",java.io.PrintStream+println(String) java.io.PrintStream+println(String),org.h2.constant.SysProperties+TRACE_IO java.lang.System+out,432,12,9,"/** 
 * Trace input or output operations if enabled.
 * @param method the method from where this method was called
 * @param fileName the file name
 * @param o the object to append to the message
 */
","/**
     * Trace input or output operations if enabled.
     *
     * @param method the method from where this method was called
     * @param fileName the file name
     * @param o the object to append to the message
     */
    public static void trace(String method, String fileName, Object o) {
        if (SysProperties.TRACE_IO) {
            System.out.println(""IOUtils."" + method + "" "" + fileName + "" "" + o);
        }
    }",False,False,"This method is used to trace input or output operations if the trace IO flag is enabled. It takes in the method name, file name, and an object to append to the message, and prints the trace message if the flag is true.",True,"The `trace` method is used to print a message if the `TRACE_IO` flag is enabled. It takes in the method name, file name, and an object to append to the message. The message is printed in the format ""IOUtils.methodName fileName object""."
51,"deleteRecursive(String,boolean)",delete recursive path try only delete a directory or file and all subdirectories and files param path the path param try only whether errors should be ignored ,Method,"deleteRecursive(String,boolean)","org.h2.fulltext.FullTextLucene+removeIndexFiles(Connection) org.h2.upgrade.DbUpgrade+upgrade(ConnectionInfo,Properties) org.h2.samples.ReadOnlyDatabaseInZip+main(String) org.h2.test.bench.TestPerformance+test(String) org.h2.test.db.TestFullText+testTransaction(boolean) org.h2.test.db.TestFullText+testTransaction(boolean) org.h2.test.db.TestFullText+testCreateDrop() org.h2.test.db.TestFullText+testCreateDrop() org.h2.test.db.TestFullText+testReopen(boolean) org.h2.test.db.TestFullText+testReopen(boolean) org.h2.test.db.TestFullText+testPerformance(boolean) org.h2.test.db.TestFunctions+test() org.h2.test.db.TestLob+test() org.h2.test.db.TestLob+testTempFilesDeleted() org.h2.test.db.TestUpgrade+deleteDb(String) org.h2.test.poweroff.TestRecoverKillLoop+runTest(int) org.h2.test.server.TestWeb+testTransfer() org.h2.test.synth.TestNestedJoins+deleteDerby() org.h2.test.synth.TestOuterJoins+deleteDerby() org.h2.test.TestAll+beforeTest() org.h2.test.TestAll+beforeTest() org.h2.test.TestAll+afterTest() org.h2.test.TestAll+afterTest() org.h2.test.TestBase+runTest(TestAll) org.h2.test.TestBase+runTest(TestAll) org.h2.test.unit.TestFileSystem+testMemFsDir() org.h2.test.unit.TestFileSystem+testSplitDatabaseInZip() org.h2.test.unit.TestFileSystem+testSplitDatabaseInZip() org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestRecovery+testRunScript() org.h2.test.unit.TestTools+testRecover() org.h2.dev.fs.FileShell+execute(String[]) org.h2.dev.fs.FileShell+execute(String[])","org.h2.util.IOUtils+exists(String) org.h2.util.IOUtils+exists(String) org.h2.util.IOUtils+isDirectory(String) org.h2.util.IOUtils+isDirectory(String) org.h2.util.IOUtils+listFiles(String) org.h2.util.IOUtils+listFiles(String) org.h2.util.IOUtils+deleteRecursive(String,boolean) org.h2.util.IOUtils+deleteRecursive(String,boolean) org.h2.util.IOUtils+tryDelete(String) org.h2.util.IOUtils+tryDelete(String) org.h2.util.IOUtils+delete(String) org.h2.util.IOUtils+delete(String)",,579,20,9,"/** 
 * Delete a directory or file and all subdirectories and files.
 * @param path the path
 * @param tryOnly whether errors should  be ignored
 */
","/**
     * Delete a directory or file and all subdirectories and files.
     *
     * @param path the path
     * @param tryOnly whether errors should  be ignored
     */
    public static void deleteRecursive(String path, boolean tryOnly) {
        if (exists(path)) {
            if (isDirectory(path)) {
                for (String s : listFiles(path)) {
                    deleteRecursive(s, tryOnly);
                }
            }
            if (tryOnly) {
                tryDelete(path);
            } else {
                delete(path);
            }
        }
    }",True,True,This method serves to delete a directory or file and all its subdirectories and files. It takes a path as input and a boolean flag to determine whether errors should be ignored.,True,"This code defines a method called `deleteRecursive` that deletes a directory or file and all its subdirectories and files. It takes a `path` parameter and a `tryOnly` parameter to determine whether errors should be ignored. If the path exists, it checks if it is a directory and recursively deletes its contents before deleting the path itself."
52,createDirectories(String),create directories dir create the directory and all required parent directories param dir the directory name ,Method,createDirectories(String),"org.h2.message.TraceSystem+openWriter() org.h2.store.FileLock+lockSerialized() org.h2.store.FileLock+lockFile() org.h2.store.FileLock+lockSocket() org.h2.store.FileStore+FileStore(DataHandler,String,String) org.h2.store.fs.FileSystemDisk+openFileOutputStream(String,boolean) org.h2.test.server.TestInit+test() org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestFileSystem+testSimple(String) org.h2.test.unit.TestStreams+testLZFStreamClose() org.h2.dev.fs.FileShell+execute(String[]) org.h2.dev.ftp.server.FtpControl+processMakeDir(String) org.h2.dev.ftp.server.FtpServer+start()",org.h2.util.IOUtils+getParent(String) org.h2.util.IOUtils+getParent(String) org.h2.util.IOUtils+exists(String) org.h2.util.IOUtils+exists(String) org.h2.util.IOUtils+createDirectories(String) org.h2.util.IOUtils+createDirectories(String) org.h2.util.IOUtils+createDirectory(String) org.h2.util.IOUtils+createDirectory(String),,331,12,9,"/** 
 * Create the directory and all required parent directories.
 * @param dir the directory name
 */
","/**
     * Create the directory and all required parent directories.
     *
     * @param dir the directory name
     */
    public static void createDirectories(String dir) {
        String parent = getParent(dir);
        if (!exists(parent)) {
            createDirectories(parent);
        }
        createDirectory(dir);
    }",True,True,This method creates a directory and all its parent directories if they do not already exist.,True,"The given code is a recursive method that creates a directory and all its parent directories. It takes a directory name as input and checks if the parent directory exists. If not, it recursively calls itself to create the parent directories before creating the final directory."
