index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,SUCCESSIVE_FAILURE_LIMIT,Field,,,,,40,1,8,,static int SUCCESSIVE_FAILURE_LIMIT = 3;,False
2,securityPrincipalName,Field,setSecurityPrincipalName(String),,,,29,1,0,,String securityPrincipalName;,True
3,securityCredentials,Field,setSecurityCredentials(String),,,,27,1,0,,String securityCredentials;,True
4,initialContextFactoryName,Field,setInitialContextFactoryName(String),,,,33,1,0,,String initialContextFactoryName;,True
5,urlPkgPrefixes,Field,setURLPkgPrefixes(String),,,,22,1,0,,String urlPkgPrefixes;,True
6,providerURL,Field,setProviderURL(String),,,,19,1,0,,String providerURL;,True
7,topicBindingName,Field,setTopicBindingName(String),,,,24,1,0,,String topicBindingName;,False
8,tcfBindingName,Field,setTopicConnectionFactoryBindingName(String),,,,22,1,0,,String tcfBindingName;,False
9,userName,Field,setUserName(String),,,,16,1,0,,String userName;,True
10,password,Field,setPassword(String),,,,16,1,0,,String password;,True
11,topicConnection,Field,start() start() start(),,,,32,1,0,,TopicConnection topicConnection;,False
12,topicSession,Field,start() start(),,,,26,1,0,,TopicSession topicSession;,False
13,topicPublisher,Field,start() start(),,,,30,1,0,,TopicPublisher topicPublisher;,False
14,successiveFailureCount,Field,,,,,31,1,0,,int successiveFailureCount = 0;,False
15,JMSTopicAppender(),Method,,,,,32,2,1,,"public JMSTopicAppender() {
  }",False
16,setTopicConnectionFactoryBindingName(String),Method,,ch.qos.logback.classic.net.JMSTopicAppenderTestApp+main(String[]),,ch.qos.logback.classic.net.JMSTopicAppender+tcfBindingName ch.qos.logback.classic.net.JMSTopicAppender+tcfBindingName,335,8,1,"/** 
 * The <b>TopicConnectionFactoryBindingName</b> option takes a string value. Its value will be used to lookup the appropriate <code>TopicConnectionFactory</code> from the JNDI context.
 */
","/**
   * The <b>TopicConnectionFactoryBindingName</b> option takes a string value.
   * Its value will be used to lookup the appropriate
   * <code>TopicConnectionFactory</code> from the JNDI context.
   */
  public void setTopicConnectionFactoryBindingName(String tcfBindingName) {
    this.tcfBindingName = tcfBindingName;
  }",False
17,getTopicConnectionFactoryBindingName(),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+tcfBindingName,181,6,1,"/** 
 * Returns the value of the <b>TopicConnectionFactoryBindingName</b> option.
 */
","/**
   * Returns the value of the <b>TopicConnectionFactoryBindingName</b> option.
   */
  public String getTopicConnectionFactoryBindingName() {
    return tcfBindingName;
  }",False
18,setTopicBindingName(String),Method,,ch.qos.logback.classic.net.JMSTopicAppenderTestApp+main(String[]),,ch.qos.logback.classic.net.JMSTopicAppender+topicBindingName ch.qos.logback.classic.net.JMSTopicAppender+topicBindingName,284,7,1,"/** 
 * The <b>TopicBindingName</b> option takes a string value. Its value will be used to lookup the appropriate <code>Topic</code> from the JNDI context.
 */
","/**
   * The <b>TopicBindingName</b> option takes a string value. Its value will be
   * used to lookup the appropriate <code>Topic</code> from the JNDI context.
   */
  public void setTopicBindingName(String topicBindingName) {
    this.topicBindingName = topicBindingName;
  }",False
19,getTopicBindingName(),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+topicBindingName,149,6,1,"/** 
 * Returns the value of the <b>TopicBindingName</b> option.
 */
","/**
   * Returns the value of the <b>TopicBindingName</b> option.
   */
  public String getTopicBindingName() {
    return topicBindingName;
  }",False
20,start(),Method,,ch.qos.logback.classic.net.JMSTopicAppenderTest+testAppendOk() ch.qos.logback.classic.net.JMSTopicAppenderTest+testAppendFailure() ch.qos.logback.classic.net.JMSTopicAppenderTest+testStartMinimalInfo() ch.qos.logback.classic.net.JMSTopicAppenderTest+testStartUserPass() ch.qos.logback.classic.net.JMSTopicAppenderTest+testStartFails() ch.qos.logback.classic.net.JMSTopicAppenderTestApp+main(String[]),"ch.qos.logback.classic.net.JMSTopicAppender+buildJNDIContext() ch.qos.logback.classic.net.JMSTopicAppender+buildJNDIContext() ch.qos.logback.classic.net.JMSTopicAppender+lookup(Context,String) ch.qos.logback.classic.net.JMSTopicAppender+lookup(Context,String) ch.qos.logback.classic.net.JMSTopicAppender+lookup(Context,String) ch.qos.logback.classic.net.JMSTopicAppender+lookup(Context,String) javax.naming.Context+close() javax.naming.Context+close() ch.qos.logback.core.spi.ContextAwareBase+addError(String,Throwable) ch.qos.logback.core.spi.ContextAwareBase+addError(String,Throwable) ch.qos.logback.core.AppenderBase+start()",ch.qos.logback.classic.net.JMSTopicAppender+tcfBindingName ch.qos.logback.classic.net.JMSTopicAppender+userName ch.qos.logback.classic.net.JMSTopicAppender+topicConnection ch.qos.logback.classic.net.JMSTopicAppender+topicConnection ch.qos.logback.classic.net.JMSTopicAppender+userName ch.qos.logback.classic.net.JMSTopicAppender+password ch.qos.logback.classic.net.JMSTopicAppender+topicConnection ch.qos.logback.classic.net.JMSTopicAppender+topicConnection ch.qos.logback.classic.net.JMSTopicAppender+topicSession ch.qos.logback.classic.net.JMSTopicAppender+topicSession ch.qos.logback.classic.net.JMSTopicAppender+topicConnection ch.qos.logback.classic.net.JMSTopicAppender+topicBindingName ch.qos.logback.classic.net.JMSTopicAppender+topicPublisher ch.qos.logback.classic.net.JMSTopicAppender+topicPublisher ch.qos.logback.classic.net.JMSTopicAppender+topicSession ch.qos.logback.classic.net.JMSTopicAppender+topicConnection ch.qos.logback.core.AppenderBase+name ch.qos.logback.classic.net.JMSTopicAppender+topicConnection ch.qos.logback.classic.net.JMSTopicAppender+topicConnection ch.qos.logback.classic.net.JMSTopicAppender+topicSession ch.qos.logback.classic.net.JMSTopicAppender+topicSession ch.qos.logback.classic.net.JMSTopicAppender+topicPublisher ch.qos.logback.classic.net.JMSTopicAppender+topicPublisher,1546,46,1,"/** 
 * Options are activated and become effective only after calling this method.
 */
","/**
   * Options are activated and become effective only after calling this method.
   */
  public void start() {
    TopicConnectionFactory topicConnectionFactory;

    try {
      Context jndi = buildJNDIContext();

      // addInfo(""Looking up ["" + tcfBindingName + ""]"");
      topicConnectionFactory = (TopicConnectionFactory) lookup(jndi,
          tcfBindingName);
      // addInfo(""About to create TopicConnection."");
      if (userName != null) {
        this.topicConnection = topicConnectionFactory.createTopicConnection(
            userName, password);
      } else {
        this.topicConnection = topicConnectionFactory.createTopicConnection();
      }

      // addInfo(
      // ""Creating TopicSession, non-transactional, ""
      // + ""in AUTO_ACKNOWLEDGE mode."");
      this.topicSession = topicConnection.createTopicSession(false,
          Session.AUTO_ACKNOWLEDGE);

      // addInfo(""Looking up topic name ["" + topicBindingName + ""]."");
      Topic topic = (Topic) lookup(jndi, topicBindingName);

      // addInfo(""Creating TopicPublisher."");
      this.topicPublisher = topicSession.createPublisher(topic);

      // addInfo(""Starting TopicConnection."");
      topicConnection.start();

      jndi.close();
    } catch (Exception e) {
      addError(""Error while activating options for appender named ["" + name
          + ""]."", e);
    }

    if (this.topicConnection != null && this.topicSession != null
        && this.topicPublisher != null) {
      super.start();
    }
  }",False
21,buildJNDIContext(),Method,start(),,ch.qos.logback.classic.net.JMSTopicAppender+buildEnvProperties() ch.qos.logback.classic.net.JMSTopicAppender+buildEnvProperties() javax.naming.InitialContext+InitialContext(Hashtable) javax.naming.InitialContext+InitialContext(),ch.qos.logback.classic.net.JMSTopicAppender+initialContextFactoryName,342,12,1,,"public Context buildJNDIContext() throws NamingException {
    Context jndi = null;

    // addInfo(""Getting initial context."");
    if (initialContextFactoryName != null) {
      Properties env = buildEnvProperties();
      jndi = new InitialContext(env);
    } else {
      jndi = new InitialContext();
    }
    return jndi;
  }",True
22,buildEnvProperties(),Method,buildJNDIContext(),ch.qos.logback.classic.net.JMSTopicAppenderTest+testBuildEnvProperties() ch.qos.logback.classic.net.JMSTopicAppenderTest+testBuildEnvPropertiesWithNullProviderURL() ch.qos.logback.classic.net.JMSTopicAppenderTest+testBuildEnvPropertiesWithNullCredentials() ch.qos.logback.classic.net.JMSTopicAppenderTest+testBuildEnvPropertiesWithPkgNull(),"java.util.Properties+Properties() java.util.Properties+put(Object,Object) java.util.Properties+put(Object,Object) java.util.Properties+put(Object,Object) java.util.Properties+put(Object,Object) ch.qos.logback.core.spi.ContextAwareBase+addWarn(String) ch.qos.logback.core.spi.ContextAwareBase+addWarn(String) java.util.Properties+put(Object,Object) java.util.Properties+put(Object,Object) java.util.Properties+put(Object,Object) java.util.Properties+put(Object,Object) java.util.Properties+put(Object,Object) java.util.Properties+put(Object,Object) ch.qos.logback.core.spi.ContextAwareBase+addWarn(String) ch.qos.logback.core.spi.ContextAwareBase+addWarn(String)",javax.naming.Context+INITIAL_CONTEXT_FACTORY ch.qos.logback.classic.net.JMSTopicAppender+initialContextFactoryName ch.qos.logback.classic.net.JMSTopicAppender+providerURL javax.naming.Context+PROVIDER_URL ch.qos.logback.classic.net.JMSTopicAppender+providerURL ch.qos.logback.classic.net.JMSTopicAppender+urlPkgPrefixes javax.naming.Context+URL_PKG_PREFIXES ch.qos.logback.classic.net.JMSTopicAppender+urlPkgPrefixes ch.qos.logback.classic.net.JMSTopicAppender+securityPrincipalName javax.naming.Context+SECURITY_PRINCIPAL ch.qos.logback.classic.net.JMSTopicAppender+securityPrincipalName ch.qos.logback.classic.net.JMSTopicAppender+securityCredentials javax.naming.Context+SECURITY_CREDENTIALS ch.qos.logback.classic.net.JMSTopicAppender+securityCredentials,922,24,1,,"public Properties buildEnvProperties() {
    Properties env = new Properties();
    env.put(Context.INITIAL_CONTEXT_FACTORY, initialContextFactoryName);
    if (providerURL != null) {
      env.put(Context.PROVIDER_URL, providerURL);
    } else {
      addWarn(""You have set InitialContextFactoryName option but not the ""
          + ""ProviderURL. This is likely to cause problems."");
    }
    if (urlPkgPrefixes != null) {
      env.put(Context.URL_PKG_PREFIXES, urlPkgPrefixes);
    }

    if (securityPrincipalName != null) {
      env.put(Context.SECURITY_PRINCIPAL, securityPrincipalName);
      if (securityCredentials != null) {
        env.put(Context.SECURITY_CREDENTIALS, securityCredentials);
      } else {
        addWarn(""You have set SecurityPrincipalName option but not the ""
            + ""SecurityCredentials. This is likely to cause problems."");
      }
    }
    return env;
  }",True
23,"lookup(Context,String)",Method,start() start(),,javax.naming.Context+lookup(String) javax.naming.Context+lookup(String) ch.qos.logback.core.spi.ContextAwareBase+addError(String) ch.qos.logback.core.spi.ContextAwareBase+addError(String),,242,8,4,,"protected Object lookup(Context ctx, String name) throws NamingException {
    try {
      return ctx.lookup(name);
    } catch (NameNotFoundException e) {
      addError(""Could not find name ["" + name + ""]."");
      throw e;
    }
  }",True
24,stop(),Method,append(LoggingEvent),,"ch.qos.logback.core.spi.ContextAwareBase+addError(String,Throwable) ch.qos.logback.core.spi.ContextAwareBase+addError(String,Throwable)",ch.qos.logback.core.AppenderBase<ch.qos.logback.classic.spi.LoggingEvent>+started ch.qos.logback.core.AppenderBase+started ch.qos.logback.core.AppenderBase<ch.qos.logback.classic.spi.LoggingEvent>+started ch.qos.logback.core.AppenderBase+started ch.qos.logback.classic.net.JMSTopicAppender+topicSession ch.qos.logback.classic.net.JMSTopicAppender+topicSession ch.qos.logback.classic.net.JMSTopicAppender+topicConnection ch.qos.logback.classic.net.JMSTopicAppender+topicConnection ch.qos.logback.core.AppenderBase+name ch.qos.logback.classic.net.JMSTopicAppender+topicPublisher ch.qos.logback.classic.net.JMSTopicAppender+topicSession ch.qos.logback.classic.net.JMSTopicAppender+topicConnection,730,28,33,"/** 
 * Close this JMSAppender. Closing releases all resources used by the appender. A closed appender cannot be re-opened.
 */
","/**
   * Close this JMSAppender. Closing releases all resources used by the
   * appender. A closed appender cannot be re-opened.
   */
  public synchronized void stop() {
    // The synchronized modifier avoids concurrent append and close operations
    if (!this.started) {
      return;
    }

    this.started = false;

    try {
      if (topicSession != null) {
        topicSession.close();
      }
      if (topicConnection != null) {
        topicConnection.close();
      }
    } catch (Exception e) {
      addError(""Error while closing JMSAppender ["" + name + ""]."", e);
    }

    // Help garbage collection
    topicPublisher = null;
    topicSession = null;
    topicConnection = null;
  }",False
25,append(LoggingEvent),Method,,ch.qos.logback.classic.net.JMSTopicAppenderTest+testAppendOk() ch.qos.logback.classic.net.JMSTopicAppenderTest+testAppendFailure() ch.qos.logback.classic.net.JMSTopicAppenderTest+testAppendFailure(),"ch.qos.logback.core.AppenderBase+isStarted() ch.qos.logback.core.AppenderBase+isStarted() ch.qos.logback.classic.net.JMSTopicAppender+stop() ch.qos.logback.classic.net.JMSTopicAppender+stop() ch.qos.logback.core.spi.ContextAwareBase+addError(String,Throwable) ch.qos.logback.core.spi.ContextAwareBase+addError(String,Throwable)",ch.qos.logback.classic.net.JMSTopicAppender+topicSession ch.qos.logback.classic.net.JMSTopicAppender+topicPublisher ch.qos.logback.classic.net.JMSTopicAppender+successiveFailureCount ch.qos.logback.classic.net.JMSTopicAppender+successiveFailureCount ch.qos.logback.classic.net.JMSTopicAppender+successiveFailureCount ch.qos.logback.classic.net.JMSTopicAppender+SUCCESSIVE_FAILURE_LIMIT ch.qos.logback.core.AppenderBase+name,642,23,1,"/** 
 * This method called by  {@link AppenderSkeleton#doAppend} method to do mostof the real appending work.
 */
","/**
   * This method called by {@link AppenderSkeleton#doAppend} method to do most
   * of the real appending work.
   */
  public void append(LoggingEvent event) {
    if (!isStarted()) {
      return;
    }

    try {
      ObjectMessage msg = topicSession.createObjectMessage();

      msg.setObject(event);
      topicPublisher.publish(msg);
      successiveFailureCount = 0;
    } catch (Exception e) {
      successiveFailureCount++;
      if (successiveFailureCount > SUCCESSIVE_FAILURE_LIMIT) {
        stop();
      }
      addError(""Could not publish message in JMSTopicAppender ["" + name + ""]."", e);
    }
  }",False
26,getInitialContextFactoryName(),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+initialContextFactoryName,278,8,1,"/** 
 * Returns the value of the <b>InitialContextFactoryName</b> option. See {@link #setInitialContextFactoryName} for more details on the meaning ofthis option.
 */
","/**
   * Returns the value of the <b>InitialContextFactoryName</b> option. See
   * {@link #setInitialContextFactoryName} for more details on the meaning of
   * this option.
   */
  public String getInitialContextFactoryName() {
    return initialContextFactoryName;
  }",True
27,setInitialContextFactoryName(String),Method,,ch.qos.logback.classic.net.JMSTopicAppenderTestApp+main(String[]),,ch.qos.logback.classic.net.JMSTopicAppender+initialContextFactoryName ch.qos.logback.classic.net.JMSTopicAppender+initialContextFactoryName,548,13,1,"/** 
 * Setting the <b>InitialContextFactoryName</b> method will cause this <code>JMSAppender</code> instance to use the  {@link InitialContext#InitialContext(Hashtable)} method instead of the no-argumentconstructor. If you set this option, you should also at least set the <b>ProviderURL</b> option. <p> See also  {@link #setProviderURL(String)}.
 */
","/**
   * Setting the <b>InitialContextFactoryName</b> method will cause this
   * <code>JMSAppender</code> instance to use the {@link
   * InitialContext#InitialContext(Hashtable)} method instead of the no-argument
   * constructor. If you set this option, you should also at least set the
   * <b>ProviderURL</b> option.
   * 
   * <p>
   * See also {@link #setProviderURL(String)}.
   */
  public void setInitialContextFactoryName(String initialContextFactoryName) {
    this.initialContextFactoryName = initialContextFactoryName;
  }",True
28,getProviderURL(),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+providerURL,62,3,1,,"public String getProviderURL() {
    return providerURL;
  }",True
29,setProviderURL(String),Method,,ch.qos.logback.classic.net.JMSTopicAppenderTestApp+main(String[]),,ch.qos.logback.classic.net.JMSTopicAppender+providerURL ch.qos.logback.classic.net.JMSTopicAppender+providerURL,90,3,1,,"public void setProviderURL(String providerURL) {
    this.providerURL = providerURL;
  }",True
30,getURLPkgPrefixes(),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+urlPkgPrefixes,61,3,0,,"String getURLPkgPrefixes() {
    return urlPkgPrefixes;
  }",True
31,setURLPkgPrefixes(String),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+urlPkgPrefixes ch.qos.logback.classic.net.JMSTopicAppender+urlPkgPrefixes,102,3,1,,"public void setURLPkgPrefixes(String urlPkgPrefixes) {
    this.urlPkgPrefixes = urlPkgPrefixes;
  }",True
32,getSecurityCredentials(),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+securityCredentials,78,3,1,,"public String getSecurityCredentials() {
    return securityCredentials;
  }",True
33,setSecurityCredentials(String),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+securityCredentials ch.qos.logback.classic.net.JMSTopicAppender+securityCredentials,122,3,1,,"public void setSecurityCredentials(String securityCredentials) {
    this.securityCredentials = securityCredentials;
  }",True
34,getSecurityPrincipalName(),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+securityPrincipalName,82,3,1,,"public String getSecurityPrincipalName() {
    return securityPrincipalName;
  }",True
35,setSecurityPrincipalName(String),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+securityPrincipalName ch.qos.logback.classic.net.JMSTopicAppender+securityPrincipalName,130,3,1,,"public void setSecurityPrincipalName(String securityPrincipalName) {
    this.securityPrincipalName = securityPrincipalName;
  }",True
36,getUserName(),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+userName,56,3,1,,"public String getUserName() {
    return userName;
  }",True
37,setUserName(String),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+userName ch.qos.logback.classic.net.JMSTopicAppender+userName,354,9,1,"/** 
 * The user name to use when  {@link javax.jms.TopicConnectionFactory#createTopicConnection(String,String)}creating a topic session}. If you set this option, you should also set the <b>Password</b> option. See  {@link #setPassword(String)}.
 */
","/**
   * The user name to use when {@link
   * javax.jms.TopicConnectionFactory#createTopicConnection(String, String)}
   * creating a topic session}. If you set this option, you should also set the
   * <b>Password</b> option. See {@link #setPassword(String)}.
   */
  public void setUserName(String userName) {
    this.userName = userName;
  }",True
38,getPassword(),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+password,56,3,1,,"public String getPassword() {
    return password;
  }",True
39,setPassword(String),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+password ch.qos.logback.classic.net.JMSTopicAppender+password,149,6,1,"/** 
 * The paswword to use when creating a topic session.
 */
","/**
   * The paswword to use when creating a topic session.
   */
  public void setPassword(String password) {
    this.password = password;
  }",True
40,getTopicConnection(),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+topicConnection,210,7,4,"/** 
 * Returns the TopicConnection used for this appender. Only valid after start() method has been invoked.
 */
","/**
   * Returns the TopicConnection used for this appender. Only valid after
   * start() method has been invoked.
   */
  protected TopicConnection getTopicConnection() {
    return topicConnection;
  }",False
41,getTopicSession(),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+topicSession,198,7,4,"/** 
 * Returns the TopicSession used for this appender. Only valid after start() method has been invoked.
 */
","/**
   * Returns the TopicSession used for this appender. Only valid after start()
   * method has been invoked.
   */
  protected TopicSession getTopicSession() {
    return topicSession;
  }",False
42,getTopicPublisher(),Method,,,,ch.qos.logback.classic.net.JMSTopicAppender+topicPublisher,206,7,4,"/** 
 * Returns the TopicPublisher used for this appender. Only valid after start() method has been invoked.
 */
","/**
   * Returns the TopicPublisher used for this appender. Only valid after start()
   * method has been invoked.
   */
  protected TopicPublisher getTopicPublisher() {
    return topicPublisher;
  }",False
