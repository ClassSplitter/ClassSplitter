index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,getRequestLine(),get request line ,Method,,,+() +getUri(),,1004,31,1,,"public RequestLine getRequestLine() {
        return new RequestLine() {
            
            @Override
            public String getUri() {
                return getUri().toString();
            }
            
            @Override
            public ProtocolVersion getProtocolVersion() {
                return new ProtocolVersion(""HTTP"", 1, 1);
            }
            
            @Override
            public String getMethod() {
                return mMethod;
            }
            
            @Override
            public String toString() {
                String path = AsyncHttpRequest.this.getUri().getPath();
                if (path.length() == 0)
                    path = ""/"";
                String query = AsyncHttpRequest.this.getUri().getRawQuery();
                if (query != null && query.length() != 0) {
                    path += ""?"" + query;
                }
                return String.format(""%s %s HTTP/1.1"", mMethod, path);
            }
        };
    }",False,False,"The method returns a new instance of the RequestLine interface, which provides methods to get the URI, protocol version, method, and a string representation of the request line.",True,"The code defines a method called `getRequestLine()` that returns an instance of the `RequestLine` interface. The returned object has overridden methods to get the URI, protocol version, and method of an HTTP request, as well as a `toString()` method that formats the request line in the HTTP/1.1 format."
2,getDefaultUserAgent(),get default user agent ,Method,,,java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String),,195,4,20,,"protected final String getDefaultUserAgent() {
        String agent = System.getProperty(""http.agent"");
        return agent != null ? agent : (""Java"" + System.getProperty(""java.version""));
    }",False,False,"This method returns the default user agent string for HTTP requests. It checks if the ""http.agent"" system property is set and returns its value. If not set, it returns a default value consisting of ""Java"" concatenated with the ""java.version"" system property.",True,"The code defines a method named ""getDefaultUserAgent"" that returns a string representing the default user agent. It retrieves the value of the ""http.agent"" system property and if it is not null, returns it. Otherwise, it returns a string concatenation of ""Java"" and the value of the ""java.version"" system property."
3,mMethod,m method ,Field,,,,,23,1,2,,private String mMethod;,False,False,,False,
4,getMethod(),get method ,Method,,"com.koushikdutta.async.http.ResponseCacheMiddleware+getSocket(GetSocketData) com.koushikdutta.async.http.ResponseCacheMiddleware+onBodyDecoder(OnBodyData) com.koushikdutta.async.http.ResponseCacheMiddleware+Entry.Entry(URI,RawHeaders,AsyncHttpRequest,ResponseHeaders)",,com.koushikdutta.async.http.AsyncHttpRequest+mMethod,57,3,1,,"public String getMethod() {
       return mMethod; 
    }",False,False,"This method returns the value of the variable ""mMethod"" as a string.",True,"The code contains a method named ""getMethod"" that returns a string value. It retrieves the value of a variable called ""mMethod"" and returns it as the result of the method."
5,"AsyncHttpRequest(URI,String)",async http request uri method ,Method,,,,,493,11,1,,"public AsyncHttpRequest(URI uri, String method) {
        assert uri != null;
        mMethod = method;
        mHeaders = new RequestHeaders(uri, mRawHeaders);
        mRawHeaders.setStatusLine(getRequestLine().toString());
        mHeaders.setHost(uri.getHost());
        mHeaders.setUserAgent(getDefaultUserAgent());
        mHeaders.setAcceptEncoding(""gzip, deflate"");
        mHeaders.getHeaders().set(""Connection"", ""keep-alive"");
        mHeaders.getHeaders().set(""Accept"", ""*/*"");
    }",False,False,"The function of this method is to initialize an instance of the AsyncHttpRequest class with a given URI and method. It sets up the headers for the request, including the status line, host, user agent, accept encoding, connection, and accept headers.",False,"This code defines a constructor for the AsyncHttpRequest class that takes a URI and a method as parameters. It initializes various headers for the request, including the status line, host, user agent, accept encoding, connection, and accept headers."
6,getUri(),get uri ,Method,,"com.koushikdutta.async.http.AsyncHttpResponse+onStringAvailable(String) com.koushikdutta.async.http.AsyncSocketMiddleware+getSocket(GetSocketData) com.koushikdutta.async.http.AsyncSocketMiddleware+getSocket(GetSocketData) com.koushikdutta.async.http.AsyncSocketMiddleware+onRequestComplete(OnRequestCompleteData) com.koushikdutta.async.http.AsyncSocketMiddleware+onRequestComplete(OnRequestCompleteData) com.koushikdutta.async.http.ResponseCacheMiddleware+getSocket(GetSocketData) com.koushikdutta.async.http.ResponseCacheMiddleware+getSocket(GetSocketData) com.koushikdutta.async.http.ResponseCacheMiddleware+getSocket(GetSocketData) com.koushikdutta.async.http.ResponseCacheMiddleware+onBodyDecoder(OnBodyData) com.koushikdutta.async.http.ResponseCacheMiddleware+onBodyDecoder(OnBodyData) com.koushikdutta.async.http.SocketIOClient+onCompleted(Exception,AsyncHttpResponse,String)",com.koushikdutta.async.http.libcore.RequestHeaders+getUri() com.koushikdutta.async.http.libcore.RequestHeaders+getUri(),com.koushikdutta.async.http.AsyncHttpRequest+mHeaders,61,3,1,,"public URI getUri() {
        return mHeaders.getUri();
    }",False,False,The function of the given method is to retrieve and return the URI (Uniform Resource Identifier) from the headers.,True,"The code defines a method named ""getUri"" that returns a URI object. It retrieves the URI from a member variable called ""mHeaders"" and returns it."
7,mRawHeaders,m raw headers ,Field,,,,,50,1,2,,private RawHeaders mRawHeaders = new RawHeaders();,False,False,,False,
8,mHeaders,m headers ,Field,,,,,32,1,2,,private RequestHeaders mHeaders;,False,False,,False,
9,mHandler,m handler ,Field,,,,,76,1,2,,private Handler mHandler = Looper.myLooper() == null ? null : new Handler();,False,False,,False,
10,getHandler(),get handler ,Method,,"com.koushikdutta.async.http.AsyncHttpClient+executeFile(AsyncHttpRequest,String,FileCallback) com.koushikdutta.async.http.AsyncHttpClient+execute(AsyncHttpRequest,ResultConvert<T>,RequestCallback<T>)",,com.koushikdutta.async.http.AsyncHttpRequest+mHandler,60,3,1,,"public Handler getHandler() {
        return mHandler;
    }",False,False,"The method ""getHandler"" returns the value of the variable ""mHandler"".",True,"The code defines a method named ""getHandler"" that returns an object of type ""Handler"". This method is used to retrieve the handler object."
11,setHandler(Handler),set handler handler ,Method,,"com.koushikdutta.async.http.SocketIOClient+connect(AsyncHttpClient,SocketIORequest,SocketIOConnectCallback)",,com.koushikdutta.async.http.AsyncHttpRequest+mHandler,75,3,1,,"public void setHandler(Handler handler) {
        mHandler = handler;
    }",False,False,"This method sets the value of the variable ""mHandler"" to the input parameter ""handler"".",True,"The code defines a method named ""setHandler"" that takes a parameter of type ""Handler"". This method assigns the value of the parameter to the ""mHandler"" variable."
12,getHeaders(),get headers ,Method,"addHeader(Header) addHeader(String,String) containsHeader(String) getAllHeaders() getAllHeaders() getAllHeaders() getFirstHeader(String) getHeaders(String) removeHeader(Header) removeHeaders(String) setHeader(String,String)","com.koushikdutta.async.http.AsyncHttpClient+onConnectCompleted(Exception,AsyncHttpResponse) com.koushikdutta.async.http.AsyncHttpResponse+setSocket(AsyncSocket) com.koushikdutta.async.http.AsyncHttpResponse+setSocket(AsyncSocket) com.koushikdutta.async.http.AsyncHttpResponse+setSocket(AsyncSocket) com.koushikdutta.async.http.ResponseCacheMiddleware+getSocket(GetSocketData) com.koushikdutta.async.http.ResponseCacheMiddleware+getSocket(GetSocketData) com.koushikdutta.async.http.ResponseCacheMiddleware+getSocket(GetSocketData) com.koushikdutta.async.http.ResponseCacheMiddleware+onBodyDecoder(OnBodyData) com.koushikdutta.async.http.ResponseCacheMiddleware+onBodyDecoder(OnBodyData) com.koushikdutta.async.http.WebSocketImpl+addWebSocketUpgradeHeaders(AsyncHttpRequest,String) com.koushikdutta.async.http.WebSocketImpl+addWebSocketUpgradeHeaders(AsyncHttpRequest,String)",,com.koushikdutta.async.http.AsyncHttpRequest+mHeaders,67,3,1,,"public RequestHeaders getHeaders() {
        return mHeaders;
    }",False,False,"The method ""getHeaders"" returns the value of the variable ""mHeaders"", which is of type ""RequestHeaders"".",True,"The code defines a method named ""getHeaders"" that returns an object of type ""RequestHeaders"". This method is responsible for retrieving the headers associated with a request."
13,getRequestString(),get request string ,Method,,com.koushikdutta.async.http.AsyncHttpResponse+setSocket(AsyncSocket),com.koushikdutta.async.http.libcore.RawHeaders+toHeaderString() com.koushikdutta.async.http.libcore.RawHeaders+toHeaderString(),com.koushikdutta.async.http.AsyncHttpRequest+mRawHeaders,85,3,1,,"public String getRequestString() {
        return mRawHeaders.toHeaderString();
    }",False,False,This method returns a string representation of the raw headers in the form of a request string.,True,The method `getRequestString()` returns a string representation of the headers stored in the `mRawHeaders` object. It is likely used to retrieve the headers in a format that can be included in an HTTP request.
14,mFollowRedirect,m follow redirect ,Field,,,,,39,1,2,,private boolean mFollowRedirect = true;,False,False,,False,
15,getFollowRedirect(),get follow redirect ,Method,,,,com.koushikdutta.async.http.AsyncHttpRequest+mFollowRedirect,74,3,1,,"public boolean getFollowRedirect() {
        return mFollowRedirect;
    }",False,False,"This method returns the value of the boolean variable ""mFollowRedirect"".",True,"The given code snippet is a method named ""getFollowRedirect"" that returns a boolean value. It retrieves the value of a variable called ""mFollowRedirect"" which determines whether to follow redirects or not."
16,setFollowRedirect(boolean),set follow redirect follow ,Method,,,,com.koushikdutta.async.http.AsyncHttpRequest+mFollowRedirect,87,3,1,,"public void setFollowRedirect(boolean follow) {
        mFollowRedirect = follow;
    }",False,False,"This method sets the value of a boolean variable called ""mFollowRedirect"" to the value passed as a parameter.",True,"The code defines a method named ""setFollowRedirect"" that takes a boolean parameter. This method is used to set the value of a variable named ""mFollowRedirect"" to the provided boolean value."
17,mBody,m body ,Field,,,,,35,1,2,,private AsyncHttpRequestBody mBody;,False,False,,False,
18,setBody(AsyncHttpRequestBody),set body body ,Method,,com.koushikdutta.async.sample.MainActivity+getChartFile() com.koushikdutta.async.test.MultipartTests+testUpload(),,com.koushikdutta.async.http.AsyncHttpRequest+mBody,76,3,1,,"public void setBody(AsyncHttpRequestBody body) {
        mBody = body;
    }",False,False,"This method sets the value of the variable ""mBody"" to the provided ""AsyncHttpRequestBody"" object.",True,"The code defines a method named ""setBody"" that takes an object of type ""AsyncHttpRequestBody"" as a parameter. This method assigns the passed body object to the instance variable ""mBody""."
19,getBody(),get body ,Method,,com.koushikdutta.async.http.AsyncHttpResponse+setSocket(AsyncSocket),,com.koushikdutta.async.http.AsyncHttpRequest+mBody,67,3,1,,"public AsyncHttpRequestBody getBody() {
        return mBody;
    }",False,False,"The function of the method is to return the value of the variable ""mBody"" which is of type AsyncHttpRequestBody.",True,"The code defines a method named ""getBody()"" that returns an object of type ""AsyncHttpRequestBody"". This method is likely used to retrieve the body of an asynchronous HTTP request."
20,onHandshakeException(AsyncSSLException),on handshake exception e ,Method,,,,,61,2,1,,"public void onHandshakeException(AsyncSSLException e) {
    }",False,False,This method handles an exception that occurs during a handshake process in an asynchronous SSL connection.,True,"The code contains a method named ""onHandshakeException"" which takes an AsyncSSLException as a parameter. However, there is no implementation or code inside the method."
21,addHeader(Header),add header header ,Method,create(HttpRequest),,"com.koushikdutta.async.http.libcore.RawHeaders+add(String,String) com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.libcore.RawHeaders+add(String,String) org.apache.http.Header+getName() org.apache.http.Header+getName() org.apache.http.Header+getValue() org.apache.http.Header+getValue()",,134,4,1,,"@Override
    public void addHeader(Header header) {
        getHeaders().getHeaders().add(header.getName(), header.getValue());
    }",False,True,This method adds a header to the existing headers in a request.,True,"The given code is an implementation of the `addHeader` method, which takes a `Header` object as a parameter. It adds the name and value of the header to the existing headers in the current object."
22,"addHeader(String,String)",add header name value ,Method,,,"com.koushikdutta.async.http.libcore.RawHeaders+add(String,String) com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.libcore.RawHeaders+add(String,String)",,122,4,1,,"@Override
    public void addHeader(String name, String value) {
        getHeaders().getHeaders().add(name, value);
    }",False,True,This method is used to add a header to the existing headers of an object. It takes in the name and value of the header and adds it to the headers list.,True,"The given code is an implementation of the `addHeader` method, which takes in a name and value as parameters. It adds the provided name-value pair to the headers of the current object by accessing the `getHeaders()` method and calling the `add` method on it."
23,containsHeader(String),contains header name ,Method,,,com.koushikdutta.async.http.libcore.RawHeaders+get(String) com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.libcore.RawHeaders+get(String),,124,4,1,,"@Override
    public boolean containsHeader(String name) {
        return getHeaders().getHeaders().get(name) != null;
    }",True,True,"This method checks if a header with the given name exists in the headers. It returns true if the header exists, and false otherwise.",True,"The code is implementing a method called `containsHeader` which takes a `name` parameter and returns a boolean value. It checks if the given `name` exists in the headers obtained from `getHeaders()` method and returns true if it does, otherwise false."
24,getAllHeaders(),get all headers ,Method,,,"com.koushikdutta.async.http.libcore.RawHeaders+length() com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.libcore.RawHeaders+length() com.koushikdutta.async.http.libcore.RawHeaders+getFieldName(int) com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.libcore.RawHeaders+getFieldName(int) com.koushikdutta.async.http.libcore.RawHeaders+getValue(int) com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.libcore.RawHeaders+getValue(int) org.apache.http.message.BasicHeader+BasicHeader(String,String)",,387,10,1,,"@Override
    public Header[] getAllHeaders() {
        Header[] ret = new Header[getHeaders().getHeaders().length()];
        for (int i = 0; i < ret.length; i++) {
            String name = getHeaders().getHeaders().getFieldName(i);
            String value = getHeaders().getHeaders().getValue(i);
            ret[i] = new BasicHeader(name, value);
        }
        return ret;
    }",True,True,"This method returns an array of Header objects. It creates a new array with the same length as the headers, and then iterates through each header to get its name and value. It creates a new BasicHeader object with the name and value, and adds it to the array. Finally, it returns the array of headers.",True,"The code is an implementation of the `getAllHeaders()` method, which returns an array of `Header` objects. It iterates over the headers and creates a new `BasicHeader` object for each header, using the name and value obtained from the existing headers."
25,getFirstHeader(String),get first header name ,Method,,,"com.koushikdutta.async.http.libcore.RawHeaders+get(String) com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.libcore.RawHeaders+get(String) org.apache.http.message.BasicHeader+BasicHeader(String,String)",,220,7,1,,"@Override
    public Header getFirstHeader(String name) {
        String value = getHeaders().getHeaders().get(name);
        if (value == null)
            return null;
        return new BasicHeader(name, value);
    }",True,True,"This method returns the first header with the given name from the headers. If the header does not exist, it returns null. It creates a new BasicHeader object with the name and value of the header.",True,"The given code is an implementation of the `getFirstHeader` method, which takes a `name` parameter and returns the first header with that name. It retrieves the header value from the headers map, creates a new `BasicHeader` object with the name and value, and returns it."
26,getHeaders(String),get headers name ,Method,getLastHeader(String),,"com.koushikdutta.async.http.libcore.RawHeaders+toMultimap() com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.libcore.RawHeaders+toMultimap() java.util.Map+get(Object) java.util.Map+get(Object) java.util.List+size() java.util.List+size() org.apache.http.message.BasicHeader+BasicHeader(String,String) java.util.List+get(int) java.util.List+get(int)",,414,11,1,,"@Override
    public Header[] getHeaders(String name) {
        Map<String, List<String>> map = getHeaders().getHeaders().toMultimap();
        List<String> vals = map.get(name);
        if (vals == null)
            return new Header[0];
        Header[] ret = new Header[vals.size()];
        for (int i = 0; i < ret.length; i++)
            ret[i] = new BasicHeader(name, vals.get(i));
        return ret;
    }",True,True,"This method returns an array of Header objects based on the given name. It retrieves the headers from a map, checks if the name exists, and creates Header objects with the name and corresponding values.",True,"This code is an implementation of the `getHeaders` method, which takes a name as input and returns an array of `Header` objects. It retrieves the headers from a map, checks if the specified name exists, creates `Header` objects for each value, and returns the array."
27,getLastHeader(String),get last header name ,Method,,,com.koushikdutta.async.http.AsyncHttpRequest+getHeaders(String) com.koushikdutta.async.http.AsyncHttpRequest+getHeaders(String),,197,7,1,,"@Override
    public Header getLastHeader(String name) {
        Header[] vals = getHeaders(name);
        if (vals.length == 0)
            return null;
        return vals[vals.length - 1];
    }",True,True,"This method returns the last header with the given name from an array of headers. If no headers are found, it returns null.",True,"The given code is an implementation of the `getLastHeader` method, which takes a `name` parameter and returns the last header with that name. It retrieves an array of headers using the `getHeaders` method, checks if the array is empty, and returns the last element if it is not."
28,params,params ,Field,setParams(HttpParams),,,,18,1,0,,HttpParams params;,True,True,,False,
29,getParams(),get params ,Method,,,,com.koushikdutta.async.http.AsyncHttpRequest+params,74,4,1,,"@Override
    public HttpParams getParams() {
        return params;
    }",True,True,This method returns the HttpParams object.,True,"The code snippet is a method named ""getParams"" that overrides a method from a superclass or interface. It returns an object of type ""HttpParams"", which is likely a set of parameters used for making HTTP requests."
30,getProtocolVersion(),get protocol version ,Method,,,"org.apache.http.ProtocolVersion+ProtocolVersion(String,int,int)",,115,4,1,,"@Override
    public ProtocolVersion getProtocolVersion() {
        return new ProtocolVersion(""HTTP"", 1, 1);
    }",True,True,"This method returns a ProtocolVersion object with the values ""HTTP"", 1, and 1.",True,"The code defines a method named ""getProtocolVersion"" that returns a new instance of the ""ProtocolVersion"" class with the values ""HTTP"" for the protocol name and 1.1 for the version number. This method is likely used to retrieve the protocol version used in an HTTP request or response."
31,headerIterator(),header iterator ,Method,,,,,103,5,1,,"@Override
    public HeaderIterator headerIterator() {
        assert false;
        return null;
    }",True,True,This method is used to override the headerIterator() method from a superclass or interface. It returns a HeaderIterator object and includes an assertion that is always false.,True,"The code snippet defines a method named `headerIterator()` that returns a `HeaderIterator` object. The method is marked with the `@Override` annotation, indicating that it overrides a method from a superclass or interface. The method body contains an `assert false` statement, which is used for debugging purposes and should never be executed."
32,headerIterator(String),header iterator name ,Method,,,,,114,5,1,,"@Override
    public HeaderIterator headerIterator(String name) {
        assert false;
        return null;
    }",True,True,"This method is used to override the headerIterator method from a superclass or interface. It takes a String parameter ""name"" and returns a HeaderIterator object. The method contains an assertion that is always false and returns null.",True,"The code snippet is a method named `headerIterator` that overrides a method from a superclass or interface. It takes a `name` parameter and returns a `HeaderIterator` object. However, the method does not perform any functionality and always returns `null` due to the `assert false` statement."
33,removeHeader(Header),remove header header ,Method,,,com.koushikdutta.async.http.libcore.RawHeaders+removeAll(String) com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.libcore.RawHeaders+removeAll(String) org.apache.http.Header+getName() org.apache.http.Header+getName(),,124,4,1,,"@Override
    public void removeHeader(Header header) {
        getHeaders().getHeaders().removeAll(header.getName());
    }",True,True,This method is used to remove a specific header from a list of headers. It takes a Header object as a parameter and removes all headers with the same name from the list.,True,"The given code is a method named ""removeHeader"" that takes a parameter of type ""Header"". It removes all headers with the same name as the given header from the headers list obtained from the ""getHeaders()"" method."
34,removeHeaders(String),remove headers name ,Method,,,com.koushikdutta.async.http.libcore.RawHeaders+removeAll(String) com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.libcore.RawHeaders+removeAll(String),,111,4,1,,"@Override
    public void removeHeaders(String name) {
        getHeaders().getHeaders().removeAll(name);
    }",True,True,This method is used to remove all headers with a specific name from the headers list.,True,"The given code is a method named ""removeHeaders"" that takes a parameter ""name"". It is used to remove all headers with the specified name from the headers collection."
35,setHeader(Header),set header header ,Method,setHeaders(Header[]),,"com.koushikdutta.async.http.AsyncHttpRequest+setHeader(String,String) com.koushikdutta.async.http.AsyncHttpRequest+setHeader(String,String) org.apache.http.Header+getName() org.apache.http.Header+getName() org.apache.http.Header+getValue() org.apache.http.Header+getValue()",,114,4,1,,"@Override
    public void setHeader(Header header) {
        setHeader(header.getName(), header.getValue());
    }",True,True,The function of the given method is to set the header of a request by calling another method with the name and value of the header as parameters.,True,"The code snippet is an implementation of the `setHeader` method, which takes a `Header` object as a parameter. It overrides the existing `setHeader` method and internally calls another `setHeader` method with the name and value extracted from the provided `Header` object."
36,"setHeader(String,String)",set header name value ,Method,setHeader(Header),,"com.koushikdutta.async.http.libcore.RawHeaders+set(String,String) com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.AsyncHttpRequest+getHeaders() com.koushikdutta.async.http.libcore.RequestHeaders+getHeaders() com.koushikdutta.async.http.libcore.RawHeaders+set(String,String)",,122,4,1,,"@Override
    public void setHeader(String name, String value) {
        getHeaders().getHeaders().set(name, value);
    }",False,True,This method is used to set the header of a request or response. It takes in the name and value of the header and sets it using the getHeaders() method.,True,"The code is implementing the `setHeader` method, which takes in a name and value as parameters. It sets the specified header with the given name and value by accessing the headers through the `getHeaders()` method."
37,setHeaders(Header[]),set headers headers ,Method,,,com.koushikdutta.async.http.AsyncHttpRequest+setHeader(Header) com.koushikdutta.async.http.AsyncHttpRequest+setHeader(Header),,130,5,1,,"@Override
    public void setHeaders(Header[] headers) {
        for (Header header: headers)
            setHeader(header);
    }",True,True,"This method is used to set headers for a request. It takes an array of headers as input and iterates through each header, calling the setHeader method to set the header for the request.",True,"The code is implementing a method called ""setHeaders"" which takes an array of headers as input. It iterates through each header in the array and calls another method called ""setHeader"" to set each header individually."
38,setParams(HttpParams),set params params ,Method,,,,com.koushikdutta.async.http.AsyncHttpRequest+params com.koushikdutta.async.http.AsyncHttpRequest+params,92,4,1,,"@Override
    public void setParams(HttpParams params) {
        this.params = params;
    }",True,True,"This method is used to set the parameters for an HTTP request. It takes in an HttpParams object as a parameter and assigns it to the instance variable ""params"".",True,"This code snippet is a method called ""setParams"" that overrides a method from a superclass. It takes an HttpParams object as a parameter and assigns it to a variable called ""params"" in the current class."
39,mTimeout,m timeout ,Field,,,,,13,1,0,,int mTimeout;,False,False,,False,
40,getTimeout(),get timeout ,Method,,,,com.koushikdutta.async.http.AsyncHttpRequest+mTimeout,56,3,1,,"public int getTimeout() {
        return mTimeout;
    }",False,False,This method returns the value of the variable mTimeout.,True,"The code contains a method named ""getTimeout"" which returns an integer value representing the timeout. It is a simple getter method that retrieves the value of the ""mTimeout"" variable."
41,setTimeout(int),set timeout timeout ,Method,,,,com.koushikdutta.async.http.AsyncHttpRequest+mTimeout,71,3,1,,"public void setTimeout(int timeout) {
        mTimeout = timeout;
    }",False,False,This method sets the timeout value for a certain function or process.,True,"The code defines a method named ""setTimeout"" that takes an integer parameter ""timeout"". This method sets the value of a variable ""mTimeout"" to the provided timeout value."
42,create(HttpRequest),create request ,Method,,,"com.koushikdutta.async.http.AsyncHttpRequest+AsyncHttpRequest(URI,String) java.net.URI+create(String) java.net.URI+create(String) org.apache.http.RequestLine+getUri() org.apache.http.HttpRequest+getRequestLine() org.apache.http.HttpRequest+getRequestLine() org.apache.http.RequestLine+getUri() org.apache.http.RequestLine+getMethod() org.apache.http.HttpRequest+getRequestLine() org.apache.http.HttpRequest+getRequestLine() org.apache.http.RequestLine+getMethod() org.apache.http.HttpMessage+getAllHeaders() org.apache.http.HttpMessage+getAllHeaders() com.koushikdutta.async.http.AsyncHttpRequest+addHeader(Header) com.koushikdutta.async.http.AsyncHttpRequest+addHeader(Header)",,324,7,9,,"public static AsyncHttpRequest create(HttpRequest request) {
        AsyncHttpRequest ret = new AsyncHttpRequest(URI.create(request.getRequestLine().getUri()), request.getRequestLine().getMethod());
        for (Header header: request.getAllHeaders()) {
            ret.addHeader(header);
        }
        return ret;
    }",False,False,"The function of this method is to create and return an instance of the AsyncHttpRequest class, using the information from the provided HttpRequest object. It sets the URI and method of the AsyncHttpRequest object, and copies all headers from the HttpRequest object to the AsyncHttpRequest object.",True,"This code defines a static method named ""create"" that takes an instance of the ""HttpRequest"" class as a parameter. It creates and returns an instance of the ""AsyncHttpRequest"" class by extracting the URI and method from the input request, and adding all the headers from the request to the new instance."
