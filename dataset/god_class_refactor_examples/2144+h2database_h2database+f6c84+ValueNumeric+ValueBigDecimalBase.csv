index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,ZERO,Field,,,,,115,4,25,"/** 
 * The value 'zero'.
 */
","/**
     * The value 'zero'.
     */
    public static final ValueNumeric ZERO = new ValueNumeric(BigDecimal.ZERO);",False
2,ONE,Field,,,,,112,4,25,"/** 
 * The value 'one'.
 */
","/**
     * The value 'one'.
     */
    public static final ValueNumeric ONE = new ValueNumeric(BigDecimal.ONE);",False
3,DEFAULT_PRECISION,Field,,,,,116,4,25,"/** 
 * The default precision for a NUMERIC value.
 */
","/**
     * The default precision for a NUMERIC value.
     */
    public static final int DEFAULT_PRECISION = 65535;",False
4,DEFAULT_SCALE,Field,,,,,104,4,25,"/** 
 * The default scale for a NUMERIC value.
 */
","/**
     * The default scale for a NUMERIC value.
     */
    public static final int DEFAULT_SCALE = 0;",False
5,DEFAULT_DISPLAY_SIZE,Field,,,,,115,4,24,"/** 
 * The default display size for a NUMERIC value.
 */
","/**
     * The default display size for a NUMERIC value.
     */
    static final int DEFAULT_DISPLAY_SIZE = 65535;",False
6,MAXIMUM_SCALE,Field,,,,,92,4,25,"/** 
 * The maximum scale.
 */
","/**
     * The maximum scale.
     */
    public static final int MAXIMUM_SCALE = 100_000;

",False
7,MINIMUM_SCALE,Field,,,,,93,4,25,"/** 
 * The minimum scale.
 */
","/**
     * The minimum scale.
     */
    public static final int MINIMUM_SCALE = -100_000;

",False
8,value,Field,"ValueNumeric(BigDecimal) divide(Value,long) compareTypeSafe(Value,CompareMode,CastDataProvider) equals(Object)",,,,31,1,18,,private final BigDecimal value;,True
9,type,Field,getType() getType(),,,,22,1,2,,private TypeInfo type;,True
10,ValueNumeric(BigDecimal),Method,,,"java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.Object+getClass() java.lang.Object+getClass() org.h2.message.DbException+get(int,String) org.h2.message.DbException+get(int,String) java.lang.Class+getName() java.lang.Class+getName() java.lang.Class+getName() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getName()",org.h2.api.ErrorCode+INVALID_CLASS_2 org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+value,366,9,2,,"private ValueNumeric(BigDecimal value) {
        if (value == null) {
            throw new IllegalArgumentException(""null"");
        } else if (value.getClass() != BigDecimal.class) {
            throw DbException.get(ErrorCode.INVALID_CLASS_2,
                    BigDecimal.class.getName(), value.getClass().getName());
        }
        this.value = value;
    }",False
11,add(Value),Method,,,org.h2.value.ValueNumeric+get(BigDecimal) org.h2.value.ValueNumeric+get(BigDecimal) java.math.BigDecimal+add(BigDecimal) java.math.BigDecimal+add(BigDecimal),org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+value,147,5,1,,"@Override
    public Value add(Value v) {
        ValueNumeric dec = (ValueNumeric) v;
        return ValueNumeric.get(value.add(dec.value));
    }",True
12,subtract(Value),Method,,,org.h2.value.ValueNumeric+get(BigDecimal) org.h2.value.ValueNumeric+get(BigDecimal) java.math.BigDecimal+subtract(BigDecimal) java.math.BigDecimal+subtract(BigDecimal),org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+value,157,5,1,,"@Override
    public Value subtract(Value v) {
        ValueNumeric dec = (ValueNumeric) v;
        return ValueNumeric.get(value.subtract(dec.value));
    }",True
13,negate(),Method,,,org.h2.value.ValueNumeric+get(BigDecimal) org.h2.value.ValueNumeric+get(BigDecimal) java.math.BigDecimal+negate() java.math.BigDecimal+negate(),org.h2.value.ValueNumeric+value,92,4,1,,"@Override
    public Value negate() {
        return ValueNumeric.get(value.negate());
    }",True
14,multiply(Value),Method,,,org.h2.value.ValueNumeric+get(BigDecimal) org.h2.value.ValueNumeric+get(BigDecimal) java.math.BigDecimal+multiply(BigDecimal) java.math.BigDecimal+multiply(BigDecimal),org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+value,157,5,1,,"@Override
    public Value multiply(Value v) {
        ValueNumeric dec = (ValueNumeric) v;
        return ValueNumeric.get(value.multiply(dec.value));
    }",True
15,"divide(Value,long)",Method,,org.h2.expression.IntervalOperation+getValue(Session),"java.math.BigDecimal+signum() java.math.BigDecimal+signum() org.h2.message.DbException+get(int,String) org.h2.message.DbException+get(int,String) org.h2.util.HasSQL+getTraceSQL() org.h2.util.HasSQL+getTraceSQL() org.h2.value.ValueNumeric+get(BigDecimal) org.h2.value.ValueNumeric+get(BigDecimal) java.math.BigDecimal+divide(BigDecimal,int,RoundingMode) java.math.BigDecimal+divide(BigDecimal,int,RoundingMode) org.h2.value.ValueNumeric+getQuotientScale(int,long,int) org.h2.value.ValueNumeric+getQuotientScale(int,long,int) java.math.BigDecimal+scale() java.math.BigDecimal+scale() java.math.BigDecimal+scale() java.math.BigDecimal+scale()",org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+value org.h2.api.ErrorCode+DIVISION_BY_ZERO_1 org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+value java.math.RoundingMode+HALF_DOWN,419,9,1,,"@Override
    public Value divide(Value v, long divisorPrecision) {
        BigDecimal divisor = ((ValueNumeric) v).value;
        if (divisor.signum() == 0) {
            throw DbException.get(ErrorCode.DIVISION_BY_ZERO_1, getTraceSQL());
        }
        return ValueNumeric.get(value.divide(divisor,
                getQuotientScale(value.scale(), divisorPrecision, divisor.scale()), RoundingMode.HALF_DOWN));
    }",True
16,"getQuotientScale(int,long,int)",Method,"divide(Value,long)","org.h2.expression.BinaryOperation+optimizeNumeric(TypeInfo,TypeInfo)",,org.h2.value.ValueNumeric+MAXIMUM_SCALE org.h2.value.ValueNumeric+MAXIMUM_SCALE,569,15,9,"/** 
 * Evaluates the scale of the quotient.
 * @param dividerScale the scale of the divider
 * @param divisorPrecision the precision of the divisor
 * @param divisorScale the scale of the divisor
 * @return the scale of the quotient
 */
","/**
     * Evaluates the scale of the quotient.
     *
     * @param dividerScale
     *            the scale of the divider
     * @param divisorPrecision
     *            the precision of the divisor
     * @param divisorScale
     *            the scale of the divisor
     * @return the scale of the quotient
     */
    public static int getQuotientScale(int dividerScale, long divisorPrecision, int divisorScale) {
        long scale = dividerScale - divisorScale + divisorPrecision * 2;
        return scale >= MAXIMUM_SCALE ? MAXIMUM_SCALE : (int) scale;
    }",True
17,modulus(Value),Method,,org.h2.test.unit.TestValue+test(),"java.math.BigDecimal+signum() java.math.BigDecimal+signum() org.h2.message.DbException+get(int,String) org.h2.message.DbException+get(int,String) org.h2.util.HasSQL+getTraceSQL() org.h2.util.HasSQL+getTraceSQL() java.math.BigDecimal+remainder(BigDecimal) java.math.BigDecimal+remainder(BigDecimal) org.h2.value.ValueNumeric+get(BigDecimal) org.h2.value.ValueNumeric+get(BigDecimal)",org.h2.value.ValueNumeric+value org.h2.api.ErrorCode+DIVISION_BY_ZERO_1 org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+value,321,9,1,,"@Override
    public ValueNumeric modulus(Value v) {
        ValueNumeric dec = (ValueNumeric) v;
        if (dec.value.signum() == 0) {
            throw DbException.get(ErrorCode.DIVISION_BY_ZERO_1, getTraceSQL());
        }
        BigDecimal bd = value.remainder(dec.value);
        return ValueNumeric.get(bd);
    }",True
18,"getSQL(StringBuilder,int)",Method,,,org.h2.value.ValueNumeric+getString() org.h2.value.ValueNumeric+getString() java.math.BigDecimal+scale() java.math.BigDecimal+scale() java.math.BigDecimal+compareTo(BigDecimal) java.math.BigDecimal+compareTo(BigDecimal) java.math.BigDecimal+compareTo(BigDecimal) java.math.BigDecimal+compareTo(BigDecimal) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(Object) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(Object) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int) java.math.BigDecimal+precision() java.math.BigDecimal+precision() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String),org.h2.util.HasSQL+NO_CASTS org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+value org.h2.value.Value+MAX_LONG_DECIMAL org.h2.value.ValueNumeric+value org.h2.value.Value+MIN_LONG_DECIMAL org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+value,446,9,1,,"@Override
    public StringBuilder getSQL(StringBuilder builder, int sqlFlags) {
        String s = getString();
        if ((sqlFlags & NO_CASTS) == 0 && value.scale() == 0 && value.compareTo(MAX_LONG_DECIMAL) <= 0
                && value.compareTo(MIN_LONG_DECIMAL) >= 0) {
            return builder.append(""CAST("").append(value).append("" AS NUMERIC("").append(value.precision()).append(""))"");
        }
        return builder.append(s);
    }",False
19,getType(),Method,,,"java.math.BigDecimal+precision() java.math.BigDecimal+precision() org.h2.value.TypeInfo+TypeInfo(int,long,int,int,ExtTypeInfo) java.math.BigDecimal+scale() java.math.BigDecimal+scale() org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long)",org.h2.value.ValueNumeric+type org.h2.value.ValueNumeric+type org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+type org.h2.value.ValueNumeric+type org.h2.value.Value+NUMERIC org.h2.value.ValueNumeric+value,394,11,1,,"@Override
    public TypeInfo getType() {
        TypeInfo type = this.type;
        if (type == null) {
            long precision = value.precision();
            this.type = type = new TypeInfo(NUMERIC, precision, value.scale(),
                    // add 2 characters for '-' and '.'
                    MathUtils.convertLongToInt(precision + 2), null);
        }
        return type;
    }",False
20,getValueType(),Method,,,,org.h2.value.Value+NUMERIC,71,4,1,,"@Override
    public int getValueType() {
        return NUMERIC;
    }",False
21,"compareTypeSafe(Value,CompareMode,CastDataProvider)",Method,,,java.math.BigDecimal+compareTo(BigDecimal) java.math.BigDecimal+compareTo(BigDecimal),org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+value,160,4,1,,"@Override
    public int compareTypeSafe(Value o, CompareMode mode, CastDataProvider provider) {
        return value.compareTo(((ValueNumeric) o).value);
    }",True
22,getSignum(),Method,,,java.math.BigDecimal+signum() java.math.BigDecimal+signum(),org.h2.value.ValueNumeric+value,75,4,1,,"@Override
    public int getSignum() {
        return value.signum();
    }",True
23,getBigDecimal(),Method,,"org.h2.value.Value+convertToNumeric(TypeInfo,CastDataProvider,int,Object) org.h2.value.Value+convertToNumeric(TypeInfo,CastDataProvider,int,Object)",,org.h2.value.ValueNumeric+value,77,4,1,,"@Override
    public BigDecimal getBigDecimal() {
        return value;
    }",True
24,getString(),Method,"getSQL(StringBuilder,int)",,java.math.BigDecimal+toString() java.math.BigDecimal+toString(),org.h2.value.ValueNumeric+value,80,4,1,,"@Override
    public String getString() {
        return value.toString();
    }",True
25,hashCode(),Method,,org.h2.test.unit.TestValueMemory+testCompare() org.h2.test.unit.TestValueMemory+testCompare(),java.math.BigDecimal+hashCode() java.math.BigDecimal+hashCode(),org.h2.value.ValueNumeric+value,76,4,1,,"@Override
    public int hashCode() {
        return value.hashCode();
    }",True
26,get(BigDecimal),Method,"add(Value) subtract(Value) negate() multiply(Value) divide(Value,long) modulus(Value)","org.h2.expression.aggregate.JavaAggregate+interpolate(Value,Value,BigDecimal,int,Session,CompareMode) org.h2.expression.aggregate.JavaAggregate+interpolate(Value,Value,BigDecimal,int,Session,CompareMode) org.h2.expression.aggregate.JavaAggregate+interpolate(Value,Value,BigDecimal,int,Session,CompareMode) org.h2.expression.aggregate.JavaAggregate+interpolate(Value,Value,BigDecimal,int,Session,CompareMode) org.h2.expression.function.DateTimeFunction+extractEpoch(Session,Value) org.h2.expression.function.DateTimeFunction+extractEpoch(Session,Value) org.h2.expression.function.DateTimeFunction+extractEpoch(Session,Value) org.h2.expression.function.DateTimeFunction+extractEpoch(Session,Value) org.h2.expression.function.DateTimeFunction+extractEpoch(Session,Value) org.h2.expression.function.Function+round(Value,Value) org.h2.expression.function.Function+truncate(Session,Value,Value) org.h2.expression.function.Function+truncateValue(Session,Value,long,boolean) org.h2.expression.function.Function+truncateValue(Session,Value,long,boolean) org.h2.expression.function.MathFunction+getValue(Session) org.h2.jdbc.JdbcPreparedStatement+setBigDecimal(int,BigDecimal) org.h2.jdbc.JdbcResultSet+updateBigDecimal(int,BigDecimal) org.h2.jdbc.JdbcResultSet+updateBigDecimal(String,BigDecimal) org.h2.value.Transfer+readValue() org.h2.value.Value+convertToNumeric(TypeInfo,CastDataProvider,int,Object) org.h2.value.Value+convertToNumeric(TypeInfo,CastDataProvider,int,Object) org.h2.value.Value+convertToNumeric(TypeInfo,CastDataProvider,int,Object) org.h2.value.Value+convertToNumeric(TypeInfo,CastDataProvider,int,Object) org.h2.value.Value+convertToNumeric(TypeInfo,CastDataProvider,int,Object) org.h2.value.ValueToObjectConverter+objectToValue(SessionInterface,Object,int) org.h2.value.ValueToObjectConverter2+readValueOther(SessionInterface,ResultSet,int,int) org.h2.test.unit.TestDataPage+testValues() org.h2.test.unit.TestDataPage+testValues() org.h2.test.unit.TestDataPage+testValues() org.h2.test.unit.TestDataPage+testValues() org.h2.test.unit.TestDataPage+testValues() org.h2.test.unit.TestDataPage+testValues() org.h2.test.unit.TestDataPage+testValues() org.h2.test.unit.TestDataPage+testValues() org.h2.test.unit.TestDataPage+testValues() org.h2.test.unit.TestDataPage+testValues() org.h2.test.unit.TestValue+testModulusDecimal() org.h2.test.unit.TestValue+test() org.h2.test.unit.TestValueMemory+testCompare() org.h2.test.unit.TestValueMemory+testCompare()",java.math.BigDecimal+equals(Object) java.math.BigDecimal+equals(Object) java.math.BigDecimal+equals(Object) java.math.BigDecimal+equals(Object) org.h2.value.Value+cache(Value) org.h2.value.Value+cache(Value) org.h2.value.ValueNumeric+ValueNumeric(BigDecimal),java.math.BigDecimal+ZERO org.h2.value.ValueNumeric+ZERO java.math.BigDecimal+ONE org.h2.value.ValueNumeric+ONE,417,14,9,"/** 
 * Get or create a NUMERIC value for the given big decimal.
 * @param dec the big decimal
 * @return the value
 */
","/**
     * Get or create a NUMERIC value for the given big decimal.
     *
     * @param dec the big decimal
     * @return the value
     */
    public static ValueNumeric get(BigDecimal dec) {
        if (BigDecimal.ZERO.equals(dec)) {
            return ZERO;
        } else if (BigDecimal.ONE.equals(dec)) {
            return ONE;
        }
        return (ValueNumeric) Value.cache(new ValueNumeric(dec));
    }",False
27,get(BigInteger),Method,,"org.h2.expression.function.DateTimeFunction+extractEpoch(Session,Value) org.h2.expression.function.DateTimeFunction+extractEpoch(Session,Value) org.h2.expression.IntervalOperation+getValue(Session) org.h2.expression.IntervalOperation+getValue(Session) org.h2.value.ValueToObjectConverter+objectToValue(SessionInterface,Object,int)",java.math.BigInteger+signum() java.math.BigInteger+signum() java.math.BigInteger+equals(Object) java.math.BigInteger+equals(Object) org.h2.value.Value+cache(Value) org.h2.value.Value+cache(Value) org.h2.value.ValueNumeric+ValueNumeric(BigDecimal) java.math.BigDecimal+BigDecimal(BigInteger),org.h2.value.ValueNumeric+ZERO java.math.BigInteger+ONE org.h2.value.ValueNumeric+ONE,458,14,9,"/** 
 * Get or create a NUMERIC value for the given big integer.
 * @param bigInteger the big integer
 * @return the value
 */
","/**
     * Get or create a NUMERIC value for the given big integer.
     *
     * @param bigInteger the big integer
     * @return the value
     */
    public static ValueNumeric get(BigInteger bigInteger) {
        if (bigInteger.signum() == 0) {
            return ZERO;
        } else if (BigInteger.ONE.equals(bigInteger)) {
            return ONE;
        }
        return (ValueNumeric) Value.cache(new ValueNumeric(new BigDecimal(bigInteger)));
    }",False
28,equals(Object),Method,,org.h2.test.unit.TestValueMemory+testCompare(),java.math.BigDecimal+equals(Object) java.math.BigDecimal+equals(Object),org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+value org.h2.value.ValueNumeric+value,441,9,1,,"@Override
    public boolean equals(Object other) {
        // Two BigDecimal objects are considered equal only if they are equal in
        // value and scale (thus 2.0 is not equal to 2.00 when using equals;
        // however -0.0 and 0.0 are). Can not use compareTo because 2.0 and 2.00
        // have different hash codes
        return other instanceof ValueNumeric &&
                value.equals(((ValueNumeric) other).value);
    }",True
29,getMemory(),Method,,,java.math.BigDecimal+precision() java.math.BigDecimal+precision(),org.h2.value.ValueNumeric+value,84,4,1,,"@Override
    public int getMemory() {
        return value.precision() + 120;
    }",True
30,"setScale(BigDecimal,int)",Method,,"org.h2.jdbc.JdbcResultSet+getBigDecimal(String,int) org.h2.jdbc.JdbcResultSet+getBigDecimal(int,int) org.h2.value.Value+convertToNumeric(TypeInfo,CastDataProvider,int,Object)","org.h2.message.DbException+getInvalidValueException(String,Object) org.h2.message.DbException+getInvalidValueException(String,Object) java.math.BigDecimal+setScale(int,RoundingMode) java.math.BigDecimal+setScale(int,RoundingMode)",org.h2.value.ValueNumeric+MAXIMUM_SCALE org.h2.value.ValueNumeric+MINIMUM_SCALE java.math.RoundingMode+HALF_UP,439,13,9,"/** 
 * Set the scale of a BigDecimal value.
 * @param bd the BigDecimal value
 * @param scale the new scale
 * @return the scaled value
 */
","/**
     * Set the scale of a BigDecimal value.
     *
     * @param bd the BigDecimal value
     * @param scale the new scale
     * @return the scaled value
     */
    public static BigDecimal setScale(BigDecimal bd, int scale) {
        if (scale > MAXIMUM_SCALE || scale < MINIMUM_SCALE) {
            throw DbException.getInvalidValueException(""scale"", scale);
        }
        return bd.setScale(scale, RoundingMode.HALF_UP);
    }",False
