index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,mMatrixValueToPx,m matrix value to px matrix to map the values to the screen pixels ,Field,,,,,106,2,4,"/** 
 * matrix to map the values to the screen pixels 
 */
","/** matrix to map the values to the screen pixels */
    protected Matrix mMatrixValueToPx = new Matrix();",False,False,"/** 
 * matrix to map the values to the screen pixels 
 */
",False,"/** 
 * matrix to map the values to the screen pixels 
 */
"
2,mMatrixOffset,m matrix offset matrix for handling the different offsets of the chart ,Field,,,,,112,2,4,"/** 
 * matrix for handling the different offsets of the chart 
 */
","/** matrix for handling the different offsets of the chart */
    protected Matrix mMatrixOffset = new Matrix();",False,False,"/** 
 * matrix for handling the different offsets of the chart 
 */
",False,"/** 
 * matrix for handling the different offsets of the chart 
 */
"
3,mMatrixTouch,m matrix touch matrix used for touch events ,Field,,,,,91,2,20,"/** 
 * matrix used for touch events 
 */
","/** matrix used for touch events */
    protected final Matrix mMatrixTouch = new Matrix();",True,True,"/** 
 * matrix used for touch events 
 */
",False,"/** 
 * matrix used for touch events 
 */
"
4,mInvertYAxis,m invert y axis if set to true the y axis is inverted and low values start at the top ,Field,,,,,119,2,2,"/** 
 * if set to true, the y-axis is inverted and low values start at the top 
 */
","/** if set to true, the y-axis is inverted and low values start at the top */
    private boolean mInvertYAxis = false;",False,True,"/** 
 * if set to true, the y-axis is inverted and low values start at the top 
 */
",False,"/** 
 * if set to true, the y-axis is inverted and low values start at the top 
 */
"
5,mMinScaleY,m min scale y minimum scale value on the y axis ,Field,,,,,75,2,2,"/** 
 * minimum scale value on the y-axis 
 */
","/** minimum scale value on the y-axis */
    private float mMinScaleY = 1f;",True,True,"/** 
 * minimum scale value on the y-axis 
 */
",False,"/** 
 * minimum scale value on the y-axis 
 */
"
6,mMinScaleX,m min scale x minimum scale value on the x axis ,Field,,,,,75,2,2,"/** 
 * minimum scale value on the x-axis 
 */
","/** minimum scale value on the x-axis */
    private float mMinScaleX = 1f;",True,True,"/** 
 * minimum scale value on the x-axis 
 */
",False,"/** 
 * minimum scale value on the x-axis 
 */
"
7,mScaleX,m scale x contains the current scale factor of the x axis ,Field,,,,,86,2,2,"/** 
 * contains the current scale factor of the x-axis 
 */
","/** contains the current scale factor of the x-axis */
    private float mScaleX = 1f;",True,True,"/** 
 * contains the current scale factor of the x-axis 
 */
",False,"/** 
 * contains the current scale factor of the x-axis 
 */
"
8,mScaleY,m scale y contains the current scale factor of the y axis ,Field,,,,,86,2,2,"/** 
 * contains the current scale factor of the y-axis 
 */
","/** contains the current scale factor of the y-axis */
    private float mScaleY = 1f;",True,True,"/** 
 * contains the current scale factor of the y-axis 
 */
",False,"/** 
 * contains the current scale factor of the y-axis 
 */
"
9,mTransOffsetX,m trans offset x offset that allows the chart to be dragged over its bounds on the x axis ,Field,,,,,117,2,2,"/** 
 * offset that allows the chart to be dragged over its bounds on the x-axis 
 */
","/** offset that allows the chart to be dragged over its bounds on the x-axis */
    private float mTransOffsetX = 0f;",True,True,"/** 
 * offset that allows the chart to be dragged over its bounds on the x-axis 
 */
",False,"/** 
 * offset that allows the chart to be dragged over its bounds on the x-axis 
 */
"
10,mTransOffsetY,m trans offset y offset that allows the chart to be dragged over its bounds on the x axis ,Field,,,,,117,2,2,"/** 
 * offset that allows the chart to be dragged over its bounds on the x-axis 
 */
","/** offset that allows the chart to be dragged over its bounds on the x-axis */
    private float mTransOffsetY = 0f;",True,True,"/** 
 * offset that allows the chart to be dragged over its bounds on the x-axis 
 */
",False,"/** 
 * offset that allows the chart to be dragged over its bounds on the x-axis 
 */
"
11,Transformer(),transformer ,Method,,,,,29,3,1,,"public Transformer() {

    }",False,False,The function of the following method is to serve as a constructor for the Transformer class.,False,"The code snippet represents a constructor method named ""Transformer"" with no parameters. It is likely a part of a class and is responsible for initializing objects of that class."
12,prepareMatrixValuePx(ChartInterface),prepare matrix value px chart prepares the matrix that transforms values to pixels calculates the scale factors from the charts size and offsets param chart ,Method,,"com.github.mikephil.charting.charts.BarLineChartBase+prepareMatrix() com.github.mikephil.charting.charts.BarLineChartBase+notifyDataSetChanged() com.github.mikephil.charting.charts.Chart+setOffsets(float,float,float,float)","com.github.mikephil.charting.interfaces.ChartInterface+getWidth() com.github.mikephil.charting.interfaces.ChartInterface+getWidth() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetRight() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetRight() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetLeft() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetLeft() com.github.mikephil.charting.interfaces.ChartInterface+getDeltaX() com.github.mikephil.charting.interfaces.ChartInterface+getDeltaX() com.github.mikephil.charting.interfaces.ChartInterface+getHeight() com.github.mikephil.charting.interfaces.ChartInterface+getHeight() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetTop() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetTop() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetBottom() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetBottom() com.github.mikephil.charting.interfaces.ChartInterface+getDeltaY() com.github.mikephil.charting.interfaces.ChartInterface+getDeltaY() android.graphics.Matrix+reset() android.graphics.Matrix+reset() android.graphics.Matrix+postTranslate(float,float) android.graphics.Matrix+postTranslate(float,float) com.github.mikephil.charting.interfaces.ChartInterface+getYChartMin() com.github.mikephil.charting.interfaces.ChartInterface+getYChartMin() android.graphics.Matrix+postScale(float,float) android.graphics.Matrix+postScale(float,float)",com.github.mikephil.charting.renderer.Transformer+mMatrixValueToPx com.github.mikephil.charting.renderer.Transformer+mMatrixValueToPx com.github.mikephil.charting.renderer.Transformer+mMatrixValueToPx,701,18,1,"/** 
 * Prepares the matrix that transforms values to pixels. Calculates the scale factors from the charts size and offsets.
 * @param chart
 */
","/**
     * Prepares the matrix that transforms values to pixels. Calculates the
     * scale factors from the charts size and offsets.
     * 
     * @param chart
     */
    public void prepareMatrixValuePx(ChartInterface chart) {

        float scaleX = (float) ((chart.getWidth() - chart.getOffsetRight() - chart
                .getOffsetLeft()) / chart.getDeltaX());
        float scaleY = (float) ((chart.getHeight() - chart.getOffsetTop() - chart
                .getOffsetBottom()) / chart.getDeltaY());

        // setup all matrices
        mMatrixValueToPx.reset();
        mMatrixValueToPx.postTranslate(0, -chart.getYChartMin());
        mMatrixValueToPx.postScale(scaleX, -scaleY);
    }",False,False,"This method prepares a matrix that transforms values to pixels for a chart. It calculates the scale factors based on the chart's size and offsets, and sets up the necessary matrices for the transformation.",True,"This method prepares a matrix that is used to transform values to pixels in a chart. It calculates the scale factors based on the chart's size and offsets, and then sets up the matrix for the transformation."
13,"prepareMatrixValuePx(ChartInterface,float,float)",prepare matrix value px chart scale x scale y prepares the transformation matrix with the specified scales param chart param scale x param scale y ,Method,,,"android.graphics.Matrix+reset() android.graphics.Matrix+reset() android.graphics.Matrix+postTranslate(float,float) android.graphics.Matrix+postTranslate(float,float) com.github.mikephil.charting.interfaces.ChartInterface+getYChartMin() com.github.mikephil.charting.interfaces.ChartInterface+getYChartMin() android.graphics.Matrix+postScale(float,float) android.graphics.Matrix+postScale(float,float)",com.github.mikephil.charting.renderer.Transformer+mMatrixValueToPx com.github.mikephil.charting.renderer.Transformer+mMatrixValueToPx com.github.mikephil.charting.renderer.Transformer+mMatrixValueToPx,399,13,1,"/** 
 * Prepares the transformation matrix with the specified scales.
 * @param chart
 * @param scaleX
 * @param scaleY
 */
","/**
     * Prepares the transformation matrix with the specified scales.
     * 
     * @param chart
     * @param scaleX
     * @param scaleY
     */
    public void prepareMatrixValuePx(ChartInterface chart, float scaleX, float scaleY) {

        mMatrixValueToPx.reset();
        mMatrixValueToPx.postTranslate(0, -chart.getYChartMin());
        mMatrixValueToPx.postScale(scaleX, -scaleY);
    }",False,False,"This method prepares a transformation matrix for a chart by resetting the matrix, translating it, and scaling it based on the specified scales.",True,"This method prepares a transformation matrix for a chart by resetting the current matrix, translating it to the origin of the chart's y-axis, and scaling it based on the specified scaleX and scaleY values."
14,prepareMatrixOffset(ChartInterface),prepare matrix offset chart prepares the matrix that contains all offsets param chart ,Method,,"com.github.mikephil.charting.charts.BarLineChartBase+prepareMatrix() com.github.mikephil.charting.charts.Chart+setOffsets(float,float,float,float)","android.graphics.Matrix+reset() android.graphics.Matrix+reset() android.graphics.Matrix+postTranslate(float,float) android.graphics.Matrix+postTranslate(float,float) com.github.mikephil.charting.interfaces.ChartInterface+getOffsetLeft() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetLeft() com.github.mikephil.charting.interfaces.ChartInterface+getHeight() com.github.mikephil.charting.interfaces.ChartInterface+getHeight() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetBottom() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetBottom() android.graphics.Matrix+setTranslate(float,float) android.graphics.Matrix+setTranslate(float,float) com.github.mikephil.charting.interfaces.ChartInterface+getOffsetLeft() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetLeft() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetTop() com.github.mikephil.charting.interfaces.ChartInterface+getOffsetTop() android.graphics.Matrix+postScale(float,float) android.graphics.Matrix+postScale(float,float)",com.github.mikephil.charting.renderer.Transformer+mMatrixOffset com.github.mikephil.charting.renderer.Transformer+mInvertYAxis com.github.mikephil.charting.renderer.Transformer+mMatrixOffset com.github.mikephil.charting.renderer.Transformer+mMatrixOffset com.github.mikephil.charting.renderer.Transformer+mMatrixOffset,763,26,1,"/** 
 * Prepares the matrix that contains all offsets.
 * @param chart
 */
","/**
     * Prepares the matrix that contains all offsets.
     * 
     * @param chart
     */
    public void prepareMatrixOffset(ChartInterface chart) {

        mMatrixOffset.reset();

        // offset.postTranslate(mOffsetLeft, getHeight() - mOffsetBottom);

        if (!mInvertYAxis)
            mMatrixOffset.postTranslate(chart.getOffsetLeft(),
                    chart.getHeight() - chart.getOffsetBottom());
        else {
            mMatrixOffset.setTranslate(chart.getOffsetLeft(), -chart.getOffsetTop());
            mMatrixOffset.postScale(1.0f, -1.0f);
        }

        // mMatrixOffset.set(offset);

        // mMatrixOffset.reset();
        //
        // mMatrixOffset.postTranslate(mOffsetLeft, getHeight() -
        // mOffsetBottom);
    }",False,False,"This method prepares a matrix that contains all offsets for a chart. It resets the matrix, translates it based on the chart's offset values, and scales it if the y-axis is inverted.",False,"This method prepares a matrix that contains all offsets for a chart. It resets the matrix, translates it based on the chart's offset values, and optionally scales it if the y-axis is inverted."
15,"generateTransformedValuesLineScatter(ArrayList<? extends Entry>,float)",generate transformed values line scatter entries phase y transforms an arraylist of entry into a float array containing the x and y values transformed with all matrices for the linechart or scatterchart param entries return ,Method,,"com.github.mikephil.charting.charts.LineChart+drawLinear(LineDataSet,ArrayList<Entry>) com.github.mikephil.charting.charts.LineChart+drawValues() com.github.mikephil.charting.charts.LineChart+drawAdditional() com.github.mikephil.charting.charts.ScatterChart+drawDataSet(int) com.github.mikephil.charting.charts.ScatterChart+drawValues()",java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) com.github.mikephil.charting.data.Entry+getXIndex() com.github.mikephil.charting.data.Entry+getXIndex() com.github.mikephil.charting.data.Entry+getVal() com.github.mikephil.charting.data.Entry+getVal() com.github.mikephil.charting.renderer.Transformer+pointValuesToPixel(float[]) com.github.mikephil.charting.renderer.Transformer+pointValuesToPixel(float[]),,738,26,1,"/** 
 * Transforms an arraylist of Entry into a float array containing the x and y values transformed with all matrices for the LINECHART or SCATTERCHART.
 * @param entries
 * @return
 */
","/**
     * Transforms an arraylist of Entry into a float array containing the x and
     * y values transformed with all matrices for the LINECHART or SCATTERCHART.
     * 
     * @param entries
     * @return
     */
    public float[] generateTransformedValuesLineScatter(ArrayList<? extends Entry> entries,
            float phaseY) {

        float[] valuePoints = new float[entries.size() * 2];

        for (int j = 0; j < valuePoints.length; j += 2) {

            Entry e = entries.get(j / 2);

            if (e != null) {
                valuePoints[j] = e.getXIndex();
                valuePoints[j + 1] = e.getVal() * phaseY;
            }
        }

        pointValuesToPixel(valuePoints);

        return valuePoints;
    }",False,False,This method transforms an ArrayList of Entry objects into a float array containing the x and y values transformed with all matrices for a LineChart or ScatterChart.,False,"This method takes an ArrayList of Entry objects and a phaseY value as input. It transforms the x and y values of each Entry object using matrices for a line or scatter chart, and returns a float array containing the transformed values."
16,"generateTransformedValuesBarChart(ArrayList<? extends Entry>,int,BarData,float)",generate transformed values bar chart entries data set bd phase y transforms an arraylist of entry into a float array containing the x and y values transformed with all matrices for the barchart param entries param data set the dataset index return ,Method,,com.github.mikephil.charting.charts.BarChart+drawValues(),java.util.ArrayList+size() java.util.ArrayList+size() com.github.mikephil.charting.data.ChartData+getDataSetCount() com.github.mikephil.charting.data.ChartData+getDataSetCount() com.github.mikephil.charting.data.BarData+getGroupSpace() com.github.mikephil.charting.data.BarData+getGroupSpace() java.util.ArrayList+get(int) java.util.ArrayList+get(int) com.github.mikephil.charting.data.Entry+getXIndex() com.github.mikephil.charting.data.Entry+getXIndex() com.github.mikephil.charting.data.Entry+getVal() com.github.mikephil.charting.data.Entry+getVal() com.github.mikephil.charting.renderer.Transformer+pointValuesToPixel(float[]) com.github.mikephil.charting.renderer.Transformer+pointValuesToPixel(float[]),,1033,33,1,"/** 
 * Transforms an arraylist of Entry into a float array containing the x and y values transformed with all matrices for the BARCHART.
 * @param entries
 * @param dataSet the dataset index
 * @return
 */
","/**
     * Transforms an arraylist of Entry into a float array containing the x and
     * y values transformed with all matrices for the BARCHART.
     * 
     * @param entries
     * @param dataSet the dataset index
     * @return
     */
    public float[] generateTransformedValuesBarChart(ArrayList<? extends Entry> entries,
            int dataSet, BarData bd, float phaseY) {

        float[] valuePoints = new float[entries.size() * 2];

        int setCount = bd.getDataSetCount();
        float space = bd.getGroupSpace();

        for (int j = 0; j < valuePoints.length; j += 2) {

            Entry e = entries.get(j / 2);

            // calculate the x-position, depending on datasetcount
            float x = e.getXIndex() + (j / 2 * (setCount - 1)) + dataSet + 0.5f + space * (j / 2)
                    + space / 2f;
            float y = e.getVal();

            valuePoints[j] = x;
            valuePoints[j + 1] = y * phaseY;
        }

        pointValuesToPixel(valuePoints);

        return valuePoints;
    }",False,False,This method takes an ArrayList of Entry objects and transforms the x and y values of each Entry using matrices for a bar chart. It returns a float array containing the transformed values.,False,"This method takes an ArrayList of Entry objects and transforms their x and y values using matrices for a bar chart. It calculates the x-position based on the dataset count and group space, and multiplies the y-value by a phase factor. The transformed values are then returned as a float array."
17,pathValueToPixel(Path),path value to pixel path transform a path with all the given matrices very important keep order to value touch offset param path ,Method,pathValuesToPixel(ArrayList<Path>),"com.github.mikephil.charting.charts.BarChart+drawHighlights() com.github.mikephil.charting.charts.LineChart+drawCubic(LineDataSet,ArrayList<Entry>) com.github.mikephil.charting.charts.LineChart+drawLinear(LineDataSet,ArrayList<Entry>) com.github.mikephil.charting.charts.LineChart+drawLinearFill(LineDataSet,ArrayList<Entry>) com.github.mikephil.charting.charts.ScatterChart+drawDataSet(int)",android.graphics.Path+transform(Matrix) android.graphics.Path+transform(Matrix) android.graphics.Path+transform(Matrix) android.graphics.Path+transform(Matrix) android.graphics.Path+transform(Matrix) android.graphics.Path+transform(Matrix),com.github.mikephil.charting.renderer.Transformer+mMatrixValueToPx com.github.mikephil.charting.renderer.Transformer+mMatrixTouch com.github.mikephil.charting.renderer.Transformer+mMatrixOffset,318,12,1,"/** 
 * transform a path with all the given matrices VERY IMPORTANT: keep order to value-touch-offset
 * @param path
 */
","/**
     * transform a path with all the given matrices VERY IMPORTANT: keep order
     * to value-touch-offset
     * 
     * @param path
     */
    public void pathValueToPixel(Path path) {

        path.transform(mMatrixValueToPx);
        path.transform(mMatrixTouch);
        path.transform(mMatrixOffset);
    }",False,False,"The function of this method is to transform a given path by applying three matrices in a specific order: mMatrixValueToPx, mMatrixTouch, and mMatrixOffset.",False,"The method ""pathValueToPixel"" takes a Path object and applies three transformations to it in a specific order: mMatrixValueToPx, mMatrixTouch, and mMatrixOffset. The purpose of this method is to convert the path from a value-based coordinate system to a pixel-based coordinate system while maintaining the order of the transformations."
18,pathValuesToPixel(ArrayList<Path>),path values to pixel paths transforms multiple paths will all matrices param paths ,Method,,,java.util.ArrayList+size() java.util.ArrayList+size() com.github.mikephil.charting.renderer.Transformer+pathValueToPixel(Path) com.github.mikephil.charting.renderer.Transformer+pathValueToPixel(Path) java.util.ArrayList+get(int) java.util.ArrayList+get(int),,260,11,1,"/** 
 * Transforms multiple paths will all matrices.
 * @param paths
 */
","/**
     * Transforms multiple paths will all matrices.
     * 
     * @param paths
     */
    public void pathValuesToPixel(ArrayList<Path> paths) {

        for (int i = 0; i < paths.size(); i++) {
            pathValueToPixel(paths.get(i));
        }
    }",False,False,"The function of this method is to transform multiple paths using matrices. It takes an ArrayList of Path objects as a parameter and iterates through each path, calling the pathValueToPixel method on each one.",False,"The given code is a method named ""pathValuesToPixel"" that takes an ArrayList of Path objects as a parameter. It iterates through the paths and calls another method named ""pathValueToPixel"" for each path. The purpose of this method is to transform multiple paths using matrices."
19,pointValuesToPixel(float[]),point values to pixel pts transform an array of points with all matrices very important keep matrix order value touch offset when transforming param pts ,Method,"generateTransformedValuesLineScatter(ArrayList<? extends Entry>,float) generateTransformedValuesBarChart(ArrayList<? extends Entry>,int,BarData,float)","com.github.mikephil.charting.charts.BarChart+drawXLabels(float) com.github.mikephil.charting.charts.BarChart+drawVerticalGrid() com.github.mikephil.charting.charts.BarChart+drawValues() com.github.mikephil.charting.charts.BarLineChartBase+drawXLabels(float) com.github.mikephil.charting.charts.BarLineChartBase+drawYLabels() com.github.mikephil.charting.charts.BarLineChartBase+drawHorizontalGrid() com.github.mikephil.charting.charts.BarLineChartBase+drawVerticalGrid() com.github.mikephil.charting.charts.BarLineChartBase+drawLimitLines() com.github.mikephil.charting.charts.BarLineChartBase+getPosition(Entry) com.github.mikephil.charting.charts.BarLineChartBase+getPixelsForValues(float,float) com.github.mikephil.charting.charts.CandleStickChart+transformBody(float[],CandleEntry,float) com.github.mikephil.charting.charts.CandleStickChart+transformShadow(float[],CandleEntry) com.github.mikephil.charting.charts.CandleStickChart+drawHighlights() com.github.mikephil.charting.charts.CandleStickChart+drawHighlights() com.github.mikephil.charting.charts.Chart+getMarkerPosition(Entry,int) com.github.mikephil.charting.charts.LineChart+drawHighlights() com.github.mikephil.charting.charts.ScatterChart+drawHighlights()",android.graphics.Matrix+mapPoints(float[]) android.graphics.Matrix+mapPoints(float[]) android.graphics.Matrix+mapPoints(float[]) android.graphics.Matrix+mapPoints(float[]) android.graphics.Matrix+mapPoints(float[]) android.graphics.Matrix+mapPoints(float[]),com.github.mikephil.charting.renderer.Transformer+mMatrixValueToPx com.github.mikephil.charting.renderer.Transformer+mMatrixTouch com.github.mikephil.charting.renderer.Transformer+mMatrixOffset,346,12,1,"/** 
 * Transform an array of points with all matrices. VERY IMPORTANT: Keep matrix order ""value-touch-offset"" when transforming.
 * @param pts
 */
","/**
     * Transform an array of points with all matrices. VERY IMPORTANT: Keep
     * matrix order ""value-touch-offset"" when transforming.
     * 
     * @param pts
     */
    public void pointValuesToPixel(float[] pts) {

        mMatrixValueToPx.mapPoints(pts);
        mMatrixTouch.mapPoints(pts);
        mMatrixOffset.mapPoints(pts);
    }",False,False,"This method transforms an array of points using three matrices: mMatrixValueToPx, mMatrixTouch, and mMatrixOffset. The order of transformation is ""value-touch-offset"".",False,"The given code is a method named ""pointValuesToPixel"" that takes an array of points as input. It applies three different matrices (mMatrixValueToPx, mMatrixTouch, and mMatrixOffset) to transform the points. The order of matrix application is important and should be ""value-touch-offset""."
20,rectValueToPixel(RectF),rect value to pixel r transform a rectangle with all matrices param r ,Method,rectValuesToPixel(ArrayList<RectF>),com.github.mikephil.charting.charts.BarChart+getBarBounds(BarEntry),android.graphics.Matrix+mapRect(RectF) android.graphics.Matrix+mapRect(RectF) android.graphics.Matrix+mapRect(RectF) android.graphics.Matrix+mapRect(RectF) android.graphics.Matrix+mapRect(RectF) android.graphics.Matrix+mapRect(RectF),com.github.mikephil.charting.renderer.Transformer+mMatrixValueToPx com.github.mikephil.charting.renderer.Transformer+mMatrixTouch com.github.mikephil.charting.renderer.Transformer+mMatrixOffset,238,11,1,"/** 
 * Transform a rectangle with all matrices.
 * @param r
 */
","/**
     * Transform a rectangle with all matrices.
     * 
     * @param r
     */
    public void rectValueToPixel(RectF r) {

        mMatrixValueToPx.mapRect(r);
        mMatrixTouch.mapRect(r);
        mMatrixOffset.mapRect(r);
    }",False,False,"This method transforms a rectangle by applying three different matrices: mMatrixValueToPx, mMatrixTouch, and mMatrixOffset. The transformation is done in-place on the given RectF object.",False,"The given code defines a method named ""rectValueToPixel"" that takes a RectF object as a parameter. This method applies three different matrices (mMatrixValueToPx, mMatrixTouch, and mMatrixOffset) to the given rectangle object, transforming its coordinates from value space to pixel space."
21,"rectValueToPixel(RectF,float)",rect value to pixel r phase y transform a rectangle with all matrices with potential animation phases param r param phase y ,Method,,"com.github.mikephil.charting.charts.BarChart+prepareBar(float,float,float)",android.graphics.Matrix+mapRect(RectF) android.graphics.Matrix+mapRect(RectF) android.graphics.Matrix+mapRect(RectF) android.graphics.Matrix+mapRect(RectF) android.graphics.Matrix+mapRect(RectF) android.graphics.Matrix+mapRect(RectF),android.graphics.RectF+top android.graphics.RectF+top android.graphics.RectF+bottom com.github.mikephil.charting.renderer.Transformer+mMatrixValueToPx com.github.mikephil.charting.renderer.Transformer+mMatrixTouch com.github.mikephil.charting.renderer.Transformer+mMatrixOffset,461,18,1,"/** 
 * Transform a rectangle with all matrices with potential animation phases.
 * @param r
 * @param phaseY
 */
","/**
     * Transform a rectangle with all matrices with potential animation phases.
     * 
     * @param r
     * @param phaseY
     */
    public void rectValueToPixel(RectF r, float phaseY) {

        // multiply the height of the rect with the phase
        if (r.top > 0)
            r.top *= phaseY;
        else
            r.bottom *= phaseY;

        mMatrixValueToPx.mapRect(r);
        mMatrixTouch.mapRect(r);
        mMatrixOffset.mapRect(r);
    }",False,False,"This method transforms a rectangle by multiplying its height with a given phase, and then applies three different matrices to the rectangle.",False,"This method transforms a rectangle by multiplying its height with a given phase value. It then applies three different matrices to the rectangle: mMatrixValueToPx, mMatrixTouch, and mMatrixOffset."
22,rectValuesToPixel(ArrayList<RectF>),rect values to pixel rects transforms multiple rects with all matrices param rects ,Method,,,java.util.ArrayList+size() java.util.ArrayList+size() com.github.mikephil.charting.renderer.Transformer+rectValueToPixel(RectF) com.github.mikephil.charting.renderer.Transformer+rectValueToPixel(RectF) java.util.ArrayList+get(int) java.util.ArrayList+get(int),,248,10,1,"/** 
 * transforms multiple rects with all matrices
 * @param rects
 */
","/**
     * transforms multiple rects with all matrices
     * 
     * @param rects
     */
    public void rectValuesToPixel(ArrayList<RectF> rects) {

        for (int i = 0; i < rects.size(); i++)
            rectValueToPixel(rects.get(i));
    }",False,False,The function takes an ArrayList of RectF objects and applies the rectValueToPixel method to each object in the list.,False,"The given code is a method named ""rectValuesToPixel"" that takes an ArrayList of RectF objects as a parameter. It iterates through each RectF object in the list and calls another method named ""rectValueToPixel"" to transform the values of each RectF object using matrices."
23,pixelsToValue(float[]),pixels to value pixels transforms the given array of touch positions pixels x y x y into values on the chart param pixels ,Method,,"com.github.mikephil.charting.charts.BarChart+getHighlightByTouchPoint(float,float) com.github.mikephil.charting.charts.BarLineChartBase+getHighlightByTouchPoint(float,float) com.github.mikephil.charting.charts.BarLineChartBase+getValuesByTouchPoint(float,float)",android.graphics.Matrix+Matrix() android.graphics.Matrix+invert(Matrix) android.graphics.Matrix+invert(Matrix) android.graphics.Matrix+mapPoints(float[]) android.graphics.Matrix+mapPoints(float[]) android.graphics.Matrix+invert(Matrix) android.graphics.Matrix+invert(Matrix) android.graphics.Matrix+mapPoints(float[]) android.graphics.Matrix+mapPoints(float[]) android.graphics.Matrix+invert(Matrix) android.graphics.Matrix+invert(Matrix) android.graphics.Matrix+mapPoints(float[]) android.graphics.Matrix+mapPoints(float[]),com.github.mikephil.charting.renderer.Transformer+mMatrixOffset com.github.mikephil.charting.renderer.Transformer+mMatrixTouch com.github.mikephil.charting.renderer.Transformer+mMatrixValueToPx,515,20,1,"/** 
 * Transforms the given array of touch positions (pixels) (x, y, x, y, ...) into values on the chart.
 * @param pixels
 */
","/**
     * Transforms the given array of touch positions (pixels) (x, y, x, y, ...)
     * into values on the chart.
     * 
     * @param pixels
     */
    public void pixelsToValue(float[] pixels) {

        Matrix tmp = new Matrix();

        // invert all matrixes to convert back to the original value
        mMatrixOffset.invert(tmp);
        tmp.mapPoints(pixels);

        mMatrixTouch.invert(tmp);
        tmp.mapPoints(pixels);

        mMatrixValueToPx.invert(tmp);
        tmp.mapPoints(pixels);
    }",False,False,This method transforms an array of touch positions (pixels) into values on the chart by applying a series of matrix transformations.,False,"The method ""pixelsToValue"" takes an array of touch positions in pixels and transforms them into values on the chart. It does this by inverting and mapping the points using three different matrices: mMatrixOffset, mMatrixTouch, and mMatrixValueToPx."
24,"zoomIn(float,float)",zoom in x y zooms in by 1 4f x and y are the coordinates in pixels of the zoom center param x param y ,Method,,com.github.mikephil.charting.charts.BarLineChartBase+zoomIn(),"android.graphics.Matrix+Matrix() android.graphics.Matrix+set(Matrix) android.graphics.Matrix+set(Matrix) android.graphics.Matrix+postScale(float,float,float,float) android.graphics.Matrix+postScale(float,float,float,float)",com.github.mikephil.charting.renderer.Transformer+mMatrixTouch,328,16,1,"/** 
 * Zooms in by 1.4f, x and y are the coordinates (in pixels) of the zoom center.
 * @param x
 * @param y
 */
","/**
     * Zooms in by 1.4f, x and y are the coordinates (in pixels) of the zoom
     * center.
     * 
     * @param x
     * @param y
     */
    public Matrix zoomIn(float x, float y) {

        Matrix save = new Matrix();
        save.set(mMatrixTouch);

        save.postScale(1.4f, 1.4f, x, y);

        return save;
    }",True,True,This method zooms in on a specific point by scaling the matrix by a factor of 1.4f. The x and y parameters specify the coordinates of the zoom center. The method returns the updated matrix.,False,"This code defines a method called ""zoomIn"" that takes in the coordinates of a zoom center and returns a Matrix object. The method scales the Matrix object by a factor of 1.4 in both the x and y directions, with the zoom center specified by the input coordinates."
25,"zoomOut(float,float)",zoom out x y zooms out by 0 7f x and y are the coordinates in pixels of the zoom center ,Method,,com.github.mikephil.charting.charts.BarLineChartBase+zoomOut(),"android.graphics.Matrix+Matrix() android.graphics.Matrix+set(Matrix) android.graphics.Matrix+set(Matrix) android.graphics.Matrix+postScale(float,float,float,float) android.graphics.Matrix+postScale(float,float,float,float)",com.github.mikephil.charting.renderer.Transformer+mMatrixTouch,290,13,1,"/** 
 * Zooms out by 0.7f, x and y are the coordinates (in pixels) of the zoom center.
 */
","/**
     * Zooms out by 0.7f, x and y are the coordinates (in pixels) of the zoom
     * center.
     */
    public Matrix zoomOut(float x, float y) {

        Matrix save = new Matrix();
        save.set(mMatrixTouch);

        save.postScale(0.7f, 0.7f, x, y);

        return save;
    }",True,True,"This method zooms out by a factor of 0.7f, with the specified coordinates (x and y) as the center of the zoom. It returns a Matrix object that represents the zoomed-out state.",False,"The given code defines a method named ""zoomOut"" that zooms out by a factor of 0.7f around a specified point (x, y) in pixels. It creates a new Matrix object, applies the zooming transformation to it, and returns the resulting matrix."
26,"zoom(float,float,float,float)",zoom scale x scale y x y zooms in or out by the given scale factor x and y are the coordinates in pixels of the zoom center param scale x if zoom out if 1f zoom in param scale y if zoom out if 1f zoom in param x param y ,Method,"setScaleMinima(float,float,ChartInterface)","com.github.mikephil.charting.charts.BarLineChartBase+zoom(float,float,float,float)","android.graphics.Matrix+Matrix() android.graphics.Matrix+set(Matrix) android.graphics.Matrix+set(Matrix) android.graphics.Matrix+postScale(float,float,float,float) android.graphics.Matrix+postScale(float,float,float,float)",com.github.mikephil.charting.renderer.Transformer+mMatrixTouch,571,20,1,"/** 
 * Zooms in or out by the given scale factor. x and y are the coordinates (in pixels) of the zoom center.
 * @param scaleX if < 1f --> zoom out, if > 1f --> zoom in
 * @param scaleY if < 1f --> zoom out, if > 1f --> zoom in
 * @param x
 * @param y
 */
","/**
     * Zooms in or out by the given scale factor. x and y are the coordinates
     * (in pixels) of the zoom center.
     * 
     * @param scaleX if < 1f --> zoom out, if > 1f --> zoom in
     * @param scaleY if < 1f --> zoom out, if > 1f --> zoom in
     * @param x
     * @param y
     */
    public Matrix zoom(float scaleX, float scaleY, float x, float y) {

        Matrix save = new Matrix();
        save.set(mMatrixTouch);

        // Log.i(LOG_TAG, ""Zooming, x: "" + x + "", y: "" + y);

        save.postScale(scaleX, scaleY, x, y);

        return save;
    }",True,True,"This method zooms in or out on a matrix by a given scale factor, with the specified coordinates as the zoom center. It returns the resulting matrix.",False,"This code defines a method called ""zoom"" that takes in a scale factor, x and y coordinates, and returns a Matrix object. The method applies a scaling transformation to the Matrix object using the given scale factor and coordinates, and returns the modified Matrix object."
27,fitScreen(),fit screen resets all zooming and dragging and makes the chart fit exactly it s bounds ,Method,,com.github.mikephil.charting.charts.BarLineChartBase+fitScreen(),android.graphics.Matrix+Matrix() android.graphics.Matrix+set(Matrix) android.graphics.Matrix+set(Matrix) android.graphics.Matrix+getValues(float[]) android.graphics.Matrix+getValues(float[]) android.graphics.Matrix+setValues(float[]) android.graphics.Matrix+setValues(float[]),com.github.mikephil.charting.renderer.Transformer+mMatrixTouch android.graphics.Matrix+MTRANS_X android.graphics.Matrix+MTRANS_Y android.graphics.Matrix+MSCALE_X android.graphics.Matrix+MSCALE_Y,522,23,1,"/** 
 * Resets all zooming and dragging and makes the chart fit exactly it's bounds.
 */
","/**
     * Resets all zooming and dragging and makes the chart fit exactly it's
     * bounds.
     */
    public Matrix fitScreen() {

        Matrix save = new Matrix();
        save.set(mMatrixTouch);

        float[] vals = new float[9];

        save.getValues(vals);

        // reset all translations and scaling
        vals[Matrix.MTRANS_X] = 0f;
        vals[Matrix.MTRANS_Y] = 0f;
        vals[Matrix.MSCALE_X] = 1f;
        vals[Matrix.MSCALE_Y] = 1f;

        save.setValues(vals);

        return save;
    }",True,True,The function of this method is to reset all zooming and dragging on a chart and make it fit exactly within its bounds. It returns a Matrix object that represents the transformation applied to the chart.,False,The `fitScreen()` method resets all zooming and dragging on a chart and returns a `Matrix` object that represents the transformation needed to make the chart fit exactly within its bounds. It achieves this by setting the translation and scaling values of the matrix to their default values.
28,setInvertYAxisEnabled(boolean),set invert y axis enabled enabled if this is set to true the y axis is inverted which means that low values are on top of the chart high values on bottom param enabled ,Method,,com.github.mikephil.charting.charts.BarLineChartBase+setInvertYAxisEnabled(boolean),,com.github.mikephil.charting.renderer.Transformer+mInvertYAxis,273,9,1,"/** 
 * If this is set to true, the y-axis is inverted which means that low values are on top of the chart, high values on bottom.
 * @param enabled
 */
","/**
     * If this is set to true, the y-axis is inverted which means that low
     * values are on top of the chart, high values on bottom.
     * 
     * @param enabled
     */
    public void setInvertYAxisEnabled(boolean enabled) {
        mInvertYAxis = enabled;
    }",False,True,"This method sets whether the y-axis is inverted or not in a chart. If enabled is true, low values will be on top and high values on bottom.",False,"This code defines a method called ""setInvertYAxisEnabled"" which takes a boolean parameter and sets the value of a variable called ""mInvertYAxis"" accordingly. If the parameter is true, it means that the y-axis is inverted, with low values at the top and high values at the bottom of the chart."
29,isInvertYAxisEnabled(),is invert y axis enabled if this returns true the y axis is inverted return ,Method,,com.github.mikephil.charting.charts.BarLineChartBase+prepareYLabels() com.github.mikephil.charting.charts.BarLineChartBase+prepareYLabels() com.github.mikephil.charting.charts.BarLineChartBase+isInvertYAxisEnabled(),,com.github.mikephil.charting.renderer.Transformer+mInvertYAxis,166,8,1,"/** 
 * If this returns true, the y-axis is inverted.
 * @return
 */
","/**
     * If this returns true, the y-axis is inverted.
     * 
     * @return
     */
    public boolean isInvertYAxisEnabled() {
        return mInvertYAxis;
    }",False,True,This method serves to check if the y-axis is inverted. It returns a boolean value indicating whether the y-axis is inverted or not.,False,"The code contains a method named ""isInvertYAxisEnabled"" which returns a boolean value indicating whether the y-axis is inverted or not. The method does not take any parameters and provides a summary description of the functionality it performs."
30,"centerViewPort(float[],ChartInterface)",center view port pts chart centers the viewport around the specified position x index and y value in the chart centering the viewport outside the bounds of the chart is not possible makes most sense in combination with the set scale minima method param pts the position to center view viewport to param chart return save ,Method,,"com.github.mikephil.charting.charts.BarLineChartBase+centerViewPort(int,float)",com.github.mikephil.charting.interfaces.ChartInterface+getChartView() com.github.mikephil.charting.interfaces.ChartInterface+getChartView() android.view.View+post(Runnable) android.view.View+post(Runnable) +() +run(),,970,32,33,"/** 
 * Centers the viewport around the specified position (x-index and y-value) in the chart. Centering the viewport outside the bounds of the chart is not possible. Makes most sense in combination with the setScaleMinima(...) method.
 * @param pts the position to center view viewport to
 * @param chart
 * @return save
 */
","/**
     * Centers the viewport around the specified position (x-index and y-value)
     * in the chart. Centering the viewport outside the bounds of the chart is
     * not possible. Makes most sense in combination with the
     * setScaleMinima(...) method.
     * 
     * @param pts the position to center view viewport to
     * @param chart
     * @return save
     */
    public synchronized void centerViewPort(final float[] pts, final ChartInterface chart) {

        final View v = chart.getChartView();

        v.post(new Runnable() {

            @Override
            public void run() {
                Matrix save = new Matrix();
                save.set(mMatrixTouch);

                pointValuesToPixel(pts);

                final float x = pts[0] - chart.getOffsetLeft();
                final float y = pts[1] - chart.getOffsetTop();

                save.postTranslate(-x, -y);

                refresh(save, chart);
            }
        });
    }",True,True,The function of this method is to center the viewport around a specified position in the chart. It does this by calculating the offset from the specified position and adjusting the matrix transformation accordingly. The method then refreshes the chart with the updated transformation.,False,"The `centerViewPort` method is used to center the viewport around a specified position in a chart. It takes in the position coordinates and the chart as parameters, and then calculates the translation needed to center the viewport. The method then refreshes the chart with the updated translation."
31,"refresh(Matrix,ChartInterface)",refresh new matrix chart call this method to refresh the graph with a given matrix param new matrix return ,Method,"setScaleMinima(float,float,ChartInterface)","com.github.mikephil.charting.charts.BarLineChartBase+zoomIn() com.github.mikephil.charting.charts.BarLineChartBase+zoomOut() com.github.mikephil.charting.charts.BarLineChartBase+zoom(float,float,float,float) com.github.mikephil.charting.charts.BarLineChartBase+fitScreen() com.github.mikephil.charting.listener.BarLineChartTouchListener+onTouch(View,MotionEvent)","android.graphics.Matrix+set(Matrix) android.graphics.Matrix+set(Matrix) com.github.mikephil.charting.renderer.Transformer+limitTransAndScale(Matrix,RectF) com.github.mikephil.charting.renderer.Transformer+limitTransAndScale(Matrix,RectF) com.github.mikephil.charting.interfaces.ChartInterface+getContentRect() com.github.mikephil.charting.interfaces.ChartInterface+getContentRect() android.view.View+invalidate() com.github.mikephil.charting.interfaces.ChartInterface+getChartView() com.github.mikephil.charting.interfaces.ChartInterface+getChartView() android.view.View+invalidate() android.graphics.Matrix+set(Matrix) android.graphics.Matrix+set(Matrix)",com.github.mikephil.charting.renderer.Transformer+mMatrixTouch com.github.mikephil.charting.renderer.Transformer+mMatrixTouch com.github.mikephil.charting.renderer.Transformer+mMatrixTouch,477,18,1,"/** 
 * call this method to refresh the graph with a given matrix
 * @param newMatrix
 * @return
 */
","/**
     * call this method to refresh the graph with a given matrix
     * 
     * @param newMatrix
     * @return
     */
    public Matrix refresh(Matrix newMatrix, ChartInterface chart) {

        mMatrixTouch.set(newMatrix);

        // make sure scale and translation are within their bounds
        limitTransAndScale(mMatrixTouch, chart.getContentRect());

        chart.getChartView().invalidate();

        newMatrix.set(mMatrixTouch);
        return newMatrix;
    }",True,True,"This method is used to refresh a graph with a given matrix. It sets the matrix to a new value, limits the scale and translation within their bounds, invalidates the chart view, and returns the updated matrix.",False,"This method is used to refresh a graph with a given matrix. It sets the new matrix, limits the scale and translation within bounds, invalidates the chart view, and returns the updated matrix."
32,"limitTransAndScale(Matrix,RectF)",limit trans and scale matrix content limits the maximum scale and x translation of the given matrix param matrix ,Method,"refresh(Matrix,ChartInterface)",,"android.graphics.Matrix+getValues(float[]) android.graphics.Matrix+getValues(float[]) java.lang.Math+max(float,float) java.lang.Math+max(float,float) java.lang.Math+max(float,float) java.lang.Math+max(float,float) android.graphics.RectF+width() android.graphics.RectF+width() android.graphics.RectF+height() android.graphics.RectF+height() java.lang.Math+min(float,float) java.lang.Math+min(float,float) java.lang.Math+max(float,float) java.lang.Math+max(float,float) java.lang.Math+max(float,float) java.lang.Math+max(float,float) java.lang.Math+min(float,float) java.lang.Math+min(float,float) android.graphics.Matrix+setValues(float[]) android.graphics.Matrix+setValues(float[])",android.graphics.Matrix+MTRANS_X android.graphics.Matrix+MSCALE_X android.graphics.Matrix+MTRANS_Y android.graphics.Matrix+MSCALE_Y com.github.mikephil.charting.renderer.Transformer+mScaleX com.github.mikephil.charting.renderer.Transformer+mMinScaleX com.github.mikephil.charting.renderer.Transformer+mScaleY com.github.mikephil.charting.renderer.Transformer+mMinScaleY com.github.mikephil.charting.renderer.Transformer+mScaleX com.github.mikephil.charting.renderer.Transformer+mTransOffsetX com.github.mikephil.charting.renderer.Transformer+mTransOffsetX com.github.mikephil.charting.renderer.Transformer+mScaleY com.github.mikephil.charting.renderer.Transformer+mTransOffsetY com.github.mikephil.charting.renderer.Transformer+mTransOffsetY android.graphics.Matrix+MTRANS_X android.graphics.Matrix+MSCALE_X com.github.mikephil.charting.renderer.Transformer+mScaleX android.graphics.Matrix+MTRANS_Y android.graphics.Matrix+MSCALE_Y com.github.mikephil.charting.renderer.Transformer+mScaleY,1510,52,2,"/** 
 * limits the maximum scale and X translation of the given matrix
 * @param matrix
 */
","/**
     * limits the maximum scale and X translation of the given matrix
     * 
     * @param matrix
     */
    private void limitTransAndScale(Matrix matrix, RectF content) {

        float[] vals = new float[9];
        matrix.getValues(vals);

        float curTransX = vals[Matrix.MTRANS_X];
        float curScaleX = vals[Matrix.MSCALE_X];

        float curTransY = vals[Matrix.MTRANS_Y];
        float curScaleY = vals[Matrix.MSCALE_Y];

        // min scale-x is 1f
        mScaleX = Math.max(mMinScaleX, curScaleX);

        // min scale-y is 1f
        mScaleY = Math.max(mMinScaleY, curScaleY);

        float width = 0f;
        float height = 0f;

        if (content != null) {
            width = content.width();
            height = content.height();
        }

        float maxTransX = -width * (mScaleX - 1f);
        float newTransX = Math.min(Math.max(curTransX, maxTransX - mTransOffsetX), mTransOffsetX);

        // if(curScaleX < mMinScaleX) {
        // newTransX = (-width * (mScaleX - 1f)) / 2f;
        // }

        float maxTransY = height * (mScaleY - 1f);
        float newTransY = Math.max(Math.min(curTransY, maxTransY + mTransOffsetY), -mTransOffsetY);

        // if(curScaleY < mMinScaleY) {
        // newTransY = (height * (mScaleY - 1f)) / 2f;
        // }

        vals[Matrix.MTRANS_X] = newTransX;
        vals[Matrix.MSCALE_X] = mScaleX;

        vals[Matrix.MTRANS_Y] = newTransY;
        vals[Matrix.MSCALE_Y] = mScaleY;

        matrix.setValues(vals);
    }",True,True,"This method limits the maximum scale and X translation of a given matrix. It calculates the current scale and translation values, and then determines the maximum allowed values based on the minimum scale and the content size. It updates the matrix with the new scale and translation values.",False,"This method limits the maximum scale and X translation of a given matrix. It calculates the maximum allowed translation values based on the scale and content dimensions, and then updates the matrix with the new translation and scale values."
33,"setScaleMinima(float,float,ChartInterface)",set scale minima scale xmin scale ymin chart sets the minimum scale values for both axes this limits the extent to which the user can zoom out param scale xmin param scale ymin ,Method,,"com.github.mikephil.charting.charts.BarLineChartBase+setScaleMinima(float,float)","com.github.mikephil.charting.renderer.Transformer+zoom(float,float,float,float) com.github.mikephil.charting.renderer.Transformer+zoom(float,float,float,float) com.github.mikephil.charting.renderer.Transformer+refresh(Matrix,ChartInterface) com.github.mikephil.charting.renderer.Transformer+refresh(Matrix,ChartInterface)",com.github.mikephil.charting.renderer.Transformer+mMinScaleX com.github.mikephil.charting.renderer.Transformer+mMinScaleY com.github.mikephil.charting.renderer.Transformer+mMinScaleX com.github.mikephil.charting.renderer.Transformer+mMinScaleY,545,20,1,"/** 
 * Sets the minimum scale values for both axes. This limits the extent to which the user can zoom-out.
 * @param scaleXmin
 * @param scaleYmin
 */
","/**
     * Sets the minimum scale values for both axes. This limits the extent to
     * which the user can zoom-out.
     * 
     * @param scaleXmin
     * @param scaleYmin
     */
    public void setScaleMinima(float scaleXmin, float scaleYmin, ChartInterface chart) {

        if (scaleXmin < 1f)
            scaleXmin = 1f;
        if (scaleYmin < 1f)
            scaleYmin = 1f;

        mMinScaleX = scaleXmin;
        mMinScaleY = scaleYmin;

        Matrix save = zoom(mMinScaleX, mMinScaleY, 0f, 0f);
        refresh(save, chart);
    }",True,True,"This method sets the minimum scale values for both axes, limiting how much the user can zoom out. It takes in the minimum scale values and a chart interface, and updates the minimum scale values and refreshes the chart.",False,"This code defines a method called ""setScaleMinima"" that sets the minimum scale values for both the x and y axes in a chart. It ensures that the minimum scale values are not less than 1, and then updates the minimum scale values and refreshes the chart with the new scale values."
34,getTouchMatrix(),get touch matrix ,Method,,com.github.mikephil.charting.charts.BarLineChartBase+init() com.github.mikephil.charting.charts.BarLineChartBase+calcModulus(),,com.github.mikephil.charting.renderer.Transformer+mMatrixTouch,67,3,1,,"public Matrix getTouchMatrix() {
        return mMatrixTouch;
    }",True,True,"The method ""getTouchMatrix"" returns the value of the variable ""mMatrixTouch"", which is of type Matrix.",False,"The code defines a method named ""getTouchMatrix"" that returns a Matrix object. This method is used to retrieve the touch matrix, which is stored in the variable ""mMatrixTouch""."
35,getValueMatrix(),get value matrix ,Method,,com.github.mikephil.charting.charts.PieRadarChartBase+applyCalculatedOffsets(),,com.github.mikephil.charting.renderer.Transformer+mMatrixValueToPx,71,3,1,,"public Matrix getValueMatrix() {
        return mMatrixValueToPx;
    }",False,False,"The function of the method is to return the value of the matrix called ""mMatrixValueToPx"".",False,The code defines a method named `getValueMatrix()` that returns a Matrix object. The Matrix object being returned is `mMatrixValueToPx`.
36,getOffsetMatrix(),get offset matrix ,Method,,com.github.mikephil.charting.charts.PieRadarChartBase+applyCalculatedOffsets(),,com.github.mikephil.charting.renderer.Transformer+mMatrixOffset,69,3,1,,"public Matrix getOffsetMatrix() {
        return mMatrixOffset;
    }",False,False,"The function of the method is to return the value of the variable ""mMatrixOffset"" of type Matrix.",False,"The code defines a method named ""getOffsetMatrix"" that returns a Matrix object. This method is used to retrieve the value of the ""mMatrixOffset"" variable."
37,getScaleX(),get scale x returns the current x scale factor ,Method,,"com.github.mikephil.charting.charts.BarChart+drawValues() com.github.mikephil.charting.charts.BarLineChartBase+centerViewPort(int,float) com.github.mikephil.charting.charts.BarLineChartBase+getScaleX() com.github.mikephil.charting.charts.LineChart+drawValues() com.github.mikephil.charting.charts.ScatterChart+drawValues()",,com.github.mikephil.charting.renderer.Transformer+mScaleX,114,6,1,"/** 
 * returns the current x-scale factor
 */
","/**
     * returns the current x-scale factor
     */
    public float getScaleX() {
        return mScaleX;
    }",True,True,This method returns the current x-scale factor.,False,The given code is a method in a Java class that returns the current x-scale factor. It has a return type of float and does not take any parameters.
38,getScaleY(),get scale y returns the current y scale factor ,Method,,"com.github.mikephil.charting.charts.BarLineChartBase+centerViewPort(int,float) com.github.mikephil.charting.charts.BarLineChartBase+getScaleY()",,com.github.mikephil.charting.renderer.Transformer+mScaleY,114,6,1,"/** 
 * returns the current y-scale factor
 */
","/**
     * returns the current y-scale factor
     */
    public float getScaleY() {
        return mScaleY;
    }",True,True,This method returns the current y-scale factor as a float value.,False,"The given code is a method named ""getScaleY"" that returns the current y-scale factor. It is a public method that returns a float value representing the y-scale factor."
39,isFullyZoomedOut(),is fully zoomed out if the chart is fully zoomed out return true return ,Method,,com.github.mikephil.charting.charts.BarLineChartBase+isFullyZoomedOut(),com.github.mikephil.charting.renderer.Transformer+isFullyZoomedOutX() com.github.mikephil.charting.renderer.Transformer+isFullyZoomedOutX() com.github.mikephil.charting.renderer.Transformer+isFullyZoomedOutY() com.github.mikephil.charting.renderer.Transformer+isFullyZoomedOutY(),,254,12,1,"/** 
 * if the chart is fully zoomed out, return true
 * @return
 */
","/**
     * if the chart is fully zoomed out, return true
     * 
     * @return
     */
    public boolean isFullyZoomedOut() {

        if (isFullyZoomedOutX() && isFullyZoomedOutY())
            return true;
        else
            return false;
    }",True,True,"The function of this method is to check if the chart is fully zoomed out. It returns true if both isFullyZoomedOutX() and isFullyZoomedOutY() methods return true, otherwise it returns false.",False,"This code defines a method called ""isFullyZoomedOut"" that checks if a chart is fully zoomed out by calling two other methods, ""isFullyZoomedOutX"" and ""isFullyZoomedOutY"". It returns true if both methods return true, indicating that the chart is fully zoomed out, otherwise it returns false."
40,isFullyZoomedOutY(),is fully zoomed out y returns true if the chart is fully zoomed out on it s y axis vertical return ,Method,isFullyZoomedOut(),com.github.mikephil.charting.charts.BarLineChartBase+prepareYLabels(),,com.github.mikephil.charting.renderer.Transformer+mScaleY com.github.mikephil.charting.renderer.Transformer+mMinScaleY com.github.mikephil.charting.renderer.Transformer+mMinScaleY,278,11,1,"/** 
 * Returns true if the chart is fully zoomed out on it's y-axis (vertical).
 * @return
 */
","/**
     * Returns true if the chart is fully zoomed out on it's y-axis (vertical).
     * 
     * @return
     */
    public boolean isFullyZoomedOutY() {
        if (mScaleY > mMinScaleY || mMinScaleY > 1f)
            return false;
        else
            return true;
    }",False,True,"This method checks if the chart is fully zoomed out on its y-axis. It returns true if the scale factor on the y-axis is greater than the minimum scale factor or if the minimum scale factor is greater than 1. Otherwise, it returns false.",False,"This code defines a method called ""isFullyZoomedOutY"" which checks if the chart is fully zoomed out on its y-axis. It returns true if the scale factor of the y-axis is greater than the minimum scale factor or if the minimum scale factor is greater than 1, indicating that the chart is not fully zoomed out. Otherwise, it returns false."
41,isFullyZoomedOutX(),is fully zoomed out x returns true if the chart is fully zoomed out on it s x axis horizontal return ,Method,isFullyZoomedOut(),,,com.github.mikephil.charting.renderer.Transformer+mScaleX com.github.mikephil.charting.renderer.Transformer+mMinScaleX com.github.mikephil.charting.renderer.Transformer+mMinScaleX,287,12,1,"/** 
 * Returns true if the chart is fully zoomed out on it's x-axis (horizontal).
 * @return
 */
","/**
     * Returns true if the chart is fully zoomed out on it's x-axis
     * (horizontal).
     * 
     * @return
     */
    public boolean isFullyZoomedOutX() {
        if (mScaleX > mMinScaleX || mMinScaleX > 1f)
            return false;
        else
            return true;
    }",False,True,"This method checks if the chart is fully zoomed out on its x-axis. It returns true if the scale factor of the x-axis is greater than the minimum scale factor or if the minimum scale factor is greater than 1. Otherwise, it returns false.",False,"The method `isFullyZoomedOutX()` checks if the chart is fully zoomed out on its x-axis. It returns true if the scale factor of the x-axis is greater than the minimum scale factor or if the minimum scale factor is greater than 1, indicating that the chart is not fully zoomed out. Otherwise, it returns false."
42,setDragOffsetX(float),set drag offset x offset set an offset in dp that allows the user to drag the chart over it s bounds on the x axis param offset ,Method,,com.github.mikephil.charting.charts.BarLineChartBase+setDragOffsetX(float),com.github.mikephil.charting.utils.Utils+convertDpToPixel(float) com.github.mikephil.charting.utils.Utils+convertDpToPixel(float),com.github.mikephil.charting.renderer.Transformer+mTransOffsetX,254,9,1,"/** 
 * Set an offset in dp that allows the user to drag the chart over it's bounds on the x-axis.
 * @param offset
 */
","/**
     * Set an offset in dp that allows the user to drag the chart over it's
     * bounds on the x-axis.
     * 
     * @param offset
     */
    public void setDragOffsetX(float offset) {
        mTransOffsetX = Utils.convertDpToPixel(offset);
    }",True,True,This method sets an offset in dp that allows the user to drag the chart over its bounds on the x-axis. The offset is converted from dp to pixels using the Utils class.,False,The given code is a method in a Java class that sets an offset in dp (density-independent pixels) for allowing the user to drag a chart beyond its x-axis bounds. The offset value is converted from dp to pixels using a utility method.
43,setDragOffsetY(float),set drag offset y offset set an offset in dp that allows the user to drag the chart over it s bounds on the y axis param offset ,Method,,com.github.mikephil.charting.charts.BarLineChartBase+setDragOffsetY(float),com.github.mikephil.charting.utils.Utils+convertDpToPixel(float) com.github.mikephil.charting.utils.Utils+convertDpToPixel(float),com.github.mikephil.charting.renderer.Transformer+mTransOffsetY,254,9,1,"/** 
 * Set an offset in dp that allows the user to drag the chart over it's bounds on the y-axis.
 * @param offset
 */
","/**
     * Set an offset in dp that allows the user to drag the chart over it's
     * bounds on the y-axis.
     * 
     * @param offset
     */
    public void setDragOffsetY(float offset) {
        mTransOffsetY = Utils.convertDpToPixel(offset);
    }",True,True,This method sets an offset in dp that allows the user to drag the chart over its bounds on the y-axis. The offset is converted from dp to pixels using the Utils class.,False,"The code defines a method called ""setDragOffsetY"" which allows the user to set an offset in dp (density-independent pixels) that enables dragging the chart beyond its y-axis bounds. The offset value is converted from dp to pixels using a utility method."
44,hasNoDragOffset(),has no drag offset returns true if both drag offsets x and y are zero or smaller return ,Method,,com.github.mikephil.charting.charts.BarLineChartBase+hasNoDragOffset(),,com.github.mikephil.charting.renderer.Transformer+mTransOffsetX com.github.mikephil.charting.renderer.Transformer+mTransOffsetY,223,8,1,"/** 
 * Returns true if both drag offsets (x and y) are zero or smaller.
 * @return
 */
","/**
     * Returns true if both drag offsets (x and y) are zero or smaller.
     * 
     * @return
     */
    public boolean hasNoDragOffset() {
        return mTransOffsetX <= 0 && mTransOffsetY <= 0 ? true : false;
    }",True,True,"The function of this method is to check if both drag offsets (x and y) are zero or smaller. It returns true if both offsets are zero or smaller, and false otherwise.",False,"The `hasNoDragOffset()` method checks if both the drag offsets (x and y) are zero or smaller. It returns true if both offsets are zero or smaller, indicating that there is no drag offset. Otherwise, it returns false."
