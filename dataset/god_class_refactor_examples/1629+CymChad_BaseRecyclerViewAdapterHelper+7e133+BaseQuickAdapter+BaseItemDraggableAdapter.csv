index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,mNextLoadEnable,Field,,,,,40,1,2,,private boolean mNextLoadEnable = false;,False
2,mLoadingMoreEnable,Field,,,,,43,1,2,,private boolean mLoadingMoreEnable = false;,False
3,mFirstOnlyEnable,Field,isFirstOnly(boolean),,,,40,1,2,,private boolean mFirstOnlyEnable = true;,False
4,mOpenAnimationEnable,Field,openLoadAnimation(int) openLoadAnimation(BaseAnimation) openLoadAnimation(),,,,45,1,2,,private boolean mOpenAnimationEnable = false;,False
5,mEmptyEnable,Field,,,,,29,1,2,,private boolean mEmptyEnable;,False
6,mHeadAndEmptyEnable,Field,,,,,36,1,2,,private boolean mHeadAndEmptyEnable;,False
7,mFootAndEmptyEnable,Field,,,,,36,1,2,,private boolean mFootAndEmptyEnable;,False
8,mInterpolator,Field,,,,,62,1,2,,private Interpolator mInterpolator = new LinearInterpolator();,False
9,mDuration,Field,,,,,28,1,2,,private int mDuration = 300;,False
10,mLastPosition,Field,,,,,31,1,2,,private int mLastPosition = -1;,False
11,onRecyclerViewItemClickListener,Field,setOnRecyclerViewItemClickListener(OnRecyclerViewItemClickListener),,,,72,1,2,,private OnRecyclerViewItemClickListener onRecyclerViewItemClickListener;,False
12,onRecyclerViewItemLongClickListener,Field,setOnRecyclerViewItemLongClickListener(OnRecyclerViewItemLongClickListener),,,,80,1,2,,private OnRecyclerViewItemLongClickListener onRecyclerViewItemLongClickListener;,False
13,mRequestLoadMoreListener,Field,setOnLoadMoreListener(RequestLoadMoreListener),,,,57,1,2,,private RequestLoadMoreListener mRequestLoadMoreListener;,False
14,mCustomAnimation,Field,openLoadAnimation(BaseAnimation),,,,58,2,2,,"@AnimationType
    private BaseAnimation mCustomAnimation;",False
15,mSelectAnimation,Field,,,,,64,1,2,,private BaseAnimation mSelectAnimation = new AlphaInAnimation();,False
16,mHeaderView,Field,addHeaderView(View),,,,25,1,2,,private View mHeaderView;,False
17,mFooterView,Field,addFooterView(View),,,,25,1,2,,private View mFooterView;,False
18,pageSize,Field,"openLoadMore(int,boolean) setPageSize(int) getPageSize()",,,,26,1,2,,private int pageSize = -1;,False
19,mContentView,Field,,,,,26,1,2,,private View mContentView;,False
20,mEmptyView,Field,,,,,91,4,2,"/** 
 * View to show if there are no items to show.
 */
","/**
     * View to show if there are no items to show.
     */
    private View mEmptyView;",False
21,TAG,Field,,,,,75,1,28,,protected static final String TAG = BaseQuickAdapter.class.getSimpleName();,False
22,mContext,Field,"onCreateViewHolder(ViewGroup,int)",,,,27,1,4,,protected Context mContext;,False
23,mLayoutResId,Field,"BaseQuickAdapter(int,List<T>)",,,,27,1,4,,protected int mLayoutResId;,False
24,mLayoutInflater,Field,"onCreateViewHolder(ViewGroup,int)",,,,41,1,4,,protected LayoutInflater mLayoutInflater;,False
25,mData,Field,"BaseQuickAdapter(int,List<T>) setNewData(List<T>) addData(List<T>)",,,,24,1,4,,protected List<T> mData;,False
26,HEADER_VIEW,Field,,,,,52,1,28,,protected static final int HEADER_VIEW = 0x00000111;,False
27,LOADING_VIEW,Field,,,,,53,1,28,,protected static final int LOADING_VIEW = 0x00000222;,False
28,FOOTER_VIEW,Field,,,,,52,1,28,,protected static final int FOOTER_VIEW = 0x00000333;,False
29,EMPTY_VIEW,Field,,,,,51,1,28,,protected static final int EMPTY_VIEW = 0x00000555;,False
30,mLoadingView,Field,setLoadingView(View),,,,26,1,2,,private View mLoadingView;,False
31,ALPHAIN,Field,,,,,104,4,25,"/** 
 * Use with  {@link #openLoadAnimation}
 */
","/**
     * Use with {@link #openLoadAnimation}
     */
    public static final int ALPHAIN = 0x00000001;",False
32,SCALEIN,Field,,,,,104,4,25,"/** 
 * Use with  {@link #openLoadAnimation}
 */
","/**
     * Use with {@link #openLoadAnimation}
     */
    public static final int SCALEIN = 0x00000002;",False
33,SLIDEIN_BOTTOM,Field,,,,,111,4,25,"/** 
 * Use with  {@link #openLoadAnimation}
 */
","/**
     * Use with {@link #openLoadAnimation}
     */
    public static final int SLIDEIN_BOTTOM = 0x00000003;",False
34,SLIDEIN_LEFT,Field,,,,,109,4,25,"/** 
 * Use with  {@link #openLoadAnimation}
 */
","/**
     * Use with {@link #openLoadAnimation}
     */
    public static final int SLIDEIN_LEFT = 0x00000004;",False
35,SLIDEIN_RIGHT,Field,,,,,110,4,25,"/** 
 * Use with  {@link #openLoadAnimation}
 */
","/**
     * Use with {@link #openLoadAnimation}
     */
    public static final int SLIDEIN_RIGHT = 0x00000005;",False
36,NO_TOGGLE_VIEW,Field,,,,,44,1,26,,private static final int NO_TOGGLE_VIEW = 0;,True
37,mToggleViewId,Field,,,,,43,1,2,,private int mToggleViewId = NO_TOGGLE_VIEW;,True
38,mItemTouchHelper,Field,,,,,41,1,2,,private ItemTouchHelper mItemTouchHelper;,True
39,itemDragEnabled,Field,,,,,40,1,2,,private boolean itemDragEnabled = false;,True
40,itemSwipeEnabled,Field,,,,,41,1,2,,private boolean itemSwipeEnabled = false;,True
41,mOnItemDragListener,Field,,,,,47,1,2,,private OnItemDragListener mOnItemDragListener;,True
42,mOnItemSwipeListener,Field,,,,,49,1,2,,private OnItemSwipeListener mOnItemSwipeListener;,True
43,mDragOnLongPress,Field,,,,,40,1,2,,private boolean mDragOnLongPress = true;,True
44,mOnToggleViewTouchListener,Field,,,,,56,1,2,,private View.OnTouchListener mOnToggleViewTouchListener;,True
45,mOnToggleViewLongClickListener,Field,,,,,64,1,2,,private View.OnLongClickListener mOnToggleViewLongClickListener;,True
46,ERROR_NOT_SAME_ITEMTOUCHHELPER,Field,,,,,125,1,26,,"private static final String ERROR_NOT_SAME_ITEMTOUCHHELPER = ""Item drag and item swipe should pass the same ItemTouchHelper"";",True
47,"setOnLoadMoreListener(int,RequestLoadMoreListener)",Method,,,com.chad.library.adapter.base.BaseQuickAdapter+setOnLoadMoreListener(RequestLoadMoreListener) com.chad.library.adapter.base.BaseQuickAdapter+setOnLoadMoreListener(RequestLoadMoreListener),,545,12,1,"/** 
 * call the method will not enable the loadMore funcation and the params pageSize is invalid more infomation see {@link  public void openLoadMore(int pageSize, boolean enable),@link  public void setOnLoadMoreListener(RequestLoadMoreListener requestLoadMoreListener)} method
 * @param pageSize
 * @param requestLoadMoreListener
 */
","/**
     * call the method will not enable the loadMore funcation and the params pageSize is invalid
     * more infomation see{@link  public void openLoadMore(int pageSize, boolean enable),@link  public void setOnLoadMoreListener(RequestLoadMoreListener requestLoadMoreListener)} method
     *
     * @param pageSize
     * @param requestLoadMoreListener
     */
    @Deprecated
    public void setOnLoadMoreListener(int pageSize, RequestLoadMoreListener requestLoadMoreListener) {

        setOnLoadMoreListener(requestLoadMoreListener);
    }",False
48,setOnLoadMoreListener(RequestLoadMoreListener),Method,"setOnLoadMoreListener(int,RequestLoadMoreListener)",com.chad.baserecyclerviewadapterhelper.PullToRefreshUseActivity+initAdapter(),,com.chad.library.adapter.base.BaseQuickAdapter<T>+mRequestLoadMoreListener com.chad.library.adapter.base.BaseQuickAdapter+mRequestLoadMoreListener,155,3,1,,"public void setOnLoadMoreListener(RequestLoadMoreListener requestLoadMoreListener) {
        this.mRequestLoadMoreListener = requestLoadMoreListener;
    }",False
49,setDuration(int),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter+mDuration,210,8,1,"/** 
 * Sets the duration of the animation.
 * @param duration The length of the animation, in milliseconds.
 */
","/**
     * Sets the duration of the animation.
     *
     * @param duration The length of the animation, in milliseconds.
     */
    public void setDuration(int duration) {
        mDuration = duration;
    }",False
50,"openLoadMore(int,boolean)",Method,,com.chad.baserecyclerviewadapterhelper.PullToRefreshUseActivity+run() com.chad.baserecyclerviewadapterhelper.PullToRefreshUseActivity+initAdapter(),,com.chad.library.adapter.base.BaseQuickAdapter<T>+pageSize com.chad.library.adapter.base.BaseQuickAdapter+pageSize com.chad.library.adapter.base.BaseQuickAdapter+mNextLoadEnable,310,11,1,"/** 
 * when adapter's data size than pageSize and enable is true,the loading more function is enable,or disable
 * @param pageSize
 * @param enable
 */
","/**
     * when adapter's data size than pageSize and enable is true,the loading more function is enable,or disable
     *
     * @param pageSize
     * @param enable
     */
    public void openLoadMore(int pageSize, boolean enable) {
        this.pageSize = pageSize;
        mNextLoadEnable = enable;

    }",False
51,openLoadMore(boolean),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter+mNextLoadEnable,341,10,1,"/** 
 * call the method before you should call setPageSize() method to setting up the enablePagerSize value,whether it will  invalid enable the loading more data function if enable's value is true,or disable
 * @param enable
 */
","/**
     * call the method before you should call setPageSize() method to setting up the enablePagerSize value,whether it will  invalid
     * enable the loading more data function if enable's value is true,or disable
     *
     * @param enable
     */
    public void openLoadMore(boolean enable) {
        mNextLoadEnable = enable;

    }",False
52,setPageSize(int),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter<T>+pageSize com.chad.library.adapter.base.BaseQuickAdapter+pageSize,264,9,1,"/** 
 * setting up the size to decide the loading more data funcation whether enable enable if the data size than pageSize,or diable
 * @param pageSize
 */
","/**
     * setting up the size to decide the loading more data funcation whether enable
     * enable if the data size than pageSize,or diable
     *
     * @param pageSize
     */
    public void setPageSize(int pageSize) {
        this.pageSize = pageSize;
    }",False
53,getPageSize(),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter<T>+pageSize com.chad.library.adapter.base.BaseQuickAdapter+pageSize,136,8,1,"/** 
 * return the value of pageSize
 * @return
 */
","/**
     * return the value of pageSize
     *
     * @return
     */
    public int getPageSize() {
        return this.pageSize;
    }",False
54,setOnRecyclerViewItemClickListener(OnRecyclerViewItemClickListener),Method,,com.chad.baserecyclerviewadapterhelper.HeaderAndFooterUseActivity+initAdapter() com.chad.baserecyclerviewadapterhelper.HomeActivity+onCreate(Bundle) com.chad.baserecyclerviewadapterhelper.PullToRefreshUseActivity+initAdapter() com.chad.baserecyclerviewadapterhelper.SectionUseActivity+onCreate(Bundle),,com.chad.library.adapter.base.BaseQuickAdapter<T>+onRecyclerViewItemClickListener com.chad.library.adapter.base.BaseQuickAdapter+onRecyclerViewItemClickListener,402,9,1,"/** 
 * Register a callback to be invoked when an item in this AdapterView has been clicked.
 * @param onRecyclerViewItemClickListener The callback that will be invoked.
 */
","/**
     * Register a callback to be invoked when an item in this AdapterView has
     * been clicked.
     *
     * @param onRecyclerViewItemClickListener The callback that will be invoked.
     */
    public void setOnRecyclerViewItemClickListener(OnRecyclerViewItemClickListener onRecyclerViewItemClickListener) {
        this.onRecyclerViewItemClickListener = onRecyclerViewItemClickListener;
    }",False
55,OnRecyclerViewItemClickListener,MemberClass,,,"com.chad.library.adapter.base.BaseQuickAdapter.OnRecyclerViewItemClickListener+onItemClick(View,int)",,600,15,1,"/** 
 * Interface definition for a callback to be invoked when an item in this AdapterView has been clicked.
 */
","/**
     * Interface definition for a callback to be invoked when an item in this
     * AdapterView has been clicked.
     */
    public interface OnRecyclerViewItemClickListener {
        /**
         * Callback method to be invoked when an item in this AdapterView has
         * been clicked.
         *
         * @param view     The view within the AdapterView that was clicked (this
         *                 will be a view provided by the adapter)
         * @param position The position of the view in the adapter.
         */
        public void onItemClick(View view, int position);
    }",False
56,setOnRecyclerViewItemLongClickListener(OnRecyclerViewItemLongClickListener),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter<T>+onRecyclerViewItemLongClickListener com.chad.library.adapter.base.BaseQuickAdapter+onRecyclerViewItemLongClickListener,426,9,1,"/** 
 * Register a callback to be invoked when an item in this AdapterView has been clicked and held
 * @param onRecyclerViewItemLongClickListener The callback that will run
 */
","/**
     * Register a callback to be invoked when an item in this AdapterView has
     * been clicked and held
     *
     * @param onRecyclerViewItemLongClickListener The callback that will run
     */
    public void setOnRecyclerViewItemLongClickListener(OnRecyclerViewItemLongClickListener onRecyclerViewItemLongClickListener) {
        this.onRecyclerViewItemLongClickListener = onRecyclerViewItemLongClickListener;
    }",False
57,OnRecyclerViewItemLongClickListener,MemberClass,,,"com.chad.library.adapter.base.BaseQuickAdapter.OnRecyclerViewItemLongClickListener+onItemLongClick(View,int)",,619,15,1,"/** 
 * Interface definition for a callback to be invoked when an item in this view has been clicked and held
 */
","/**
     * Interface definition for a callback to be invoked when an item in this
     * view has been clicked and held
     */
    public interface OnRecyclerViewItemLongClickListener {
        /**
         * callback method to be invoked when an item in this view has been
         * click and held
         *
         * @param view     The view whihin the AbsListView that was clicked
         * @param position The position of the view int the adapter
         * @return true if the callback consumed the long click ,false otherwise
         */
        public boolean onItemLongClick(View view, int position);
    }",False
58,mChildClickListener,Field,setOnRecyclerViewItemChildClickListener(OnRecyclerViewItemChildClickListener),,,,65,1,2,,private OnRecyclerViewItemChildClickListener mChildClickListener;,False
59,setOnRecyclerViewItemChildClickListener(OnRecyclerViewItemChildClickListener),Method,,com.chad.baserecyclerviewadapterhelper.AnimationUseActivity+initAdapter() com.chad.baserecyclerviewadapterhelper.SectionUseActivity+onCreate(Bundle),,com.chad.library.adapter.base.BaseQuickAdapter<T>+mChildClickListener com.chad.library.adapter.base.BaseQuickAdapter+mChildClickListener,415,10,1,"/** 
 * Register a callback to be invoked when childView in this AdapterView has been clicked and held {@link OnRecyclerViewItemChildClickListener}
 * @param childClickListener The callback that will run
 */
","/**
     * Register a callback to be invoked when childView in this AdapterView has
     * been clicked and held
     * {@link OnRecyclerViewItemChildClickListener}
     *
     * @param childClickListener The callback that will run
     */
    public void setOnRecyclerViewItemChildClickListener(OnRecyclerViewItemChildClickListener childClickListener) {
        this.mChildClickListener = childClickListener;
    }",False
60,OnRecyclerViewItemChildClickListener,MemberClass,,,"com.chad.library.adapter.base.BaseQuickAdapter.OnRecyclerViewItemChildClickListener+onItemChildClick(BaseQuickAdapter,View,int)",,143,3,1,,"public interface OnRecyclerViewItemChildClickListener {
        void onItemChildClick(BaseQuickAdapter adapter, View view, int position);
    }",False
61,OnItemChildClickListener,MemberClass,,,"com.chad.library.adapter.base.BaseQuickAdapter.OnItemChildClickListener+onClick(View) com.chad.library.adapter.base.BaseQuickAdapter.OnRecyclerViewItemChildClickListener+onItemChildClick(BaseQuickAdapter,View,int) com.chad.library.adapter.base.BaseQuickAdapter.OnRecyclerViewItemChildClickListener+onItemChildClick(BaseQuickAdapter,View,int) com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount()",com.chad.library.adapter.base.BaseQuickAdapter.OnItemChildClickListener+mViewHolder com.chad.library.adapter.base.BaseQuickAdapter+mChildClickListener com.chad.library.adapter.base.BaseQuickAdapter+mChildClickListener com.chad.library.adapter.base.BaseQuickAdapter.OnItemChildClickListener+mViewHolder,378,9,1,,"public class OnItemChildClickListener implements View.OnClickListener {
        public RecyclerView.ViewHolder mViewHolder;

        @Override
        public void onClick(View v) {
            if (mChildClickListener != null)
                mChildClickListener.onItemChildClick(BaseQuickAdapter.this, v, mViewHolder.getLayoutPosition() - getHeaderViewsCount());
        }
    }",False
62,"BaseQuickAdapter(int,List<T>)",Method,,,java.util.ArrayList+ArrayList(),com.chad.library.adapter.base.BaseQuickAdapter<T>+mData com.chad.library.adapter.base.BaseQuickAdapter+mData com.chad.library.adapter.base.BaseQuickAdapter<T>+mLayoutResId com.chad.library.adapter.base.BaseQuickAdapter+mLayoutResId,480,13,1,"/** 
 * Same as QuickAdapter#QuickAdapter(Context,int) but with some initialization data.
 * @param layoutResId The layout resource id of each item.
 * @param data        A new list is created out of this one to avoid mutable list
 */
","/**
     * Same as QuickAdapter#QuickAdapter(Context,int) but with
     * some initialization data.
     *
     * @param layoutResId The layout resource id of each item.
     * @param data        A new list is created out of this one to avoid mutable list
     */
    public BaseQuickAdapter(int layoutResId, List<T> data) {
        this.mData = data == null ? new ArrayList<T>() : data;
        if (layoutResId != 0) {
            this.mLayoutResId = layoutResId;
        }
    }",False
63,BaseQuickAdapter(List<T>),Method,,,,,68,3,1,,"public BaseQuickAdapter(List<T> data) {
        this(0, data);
    }",False
64,"BaseQuickAdapter(View,List<T>)",Method,,,,com.chad.library.adapter.base.BaseQuickAdapter+mContentView,122,4,1,,"public BaseQuickAdapter(View contentView, List<T> data) {
        this(0, data);
        mContentView = contentView;
    }",False
65,remove(int),Method,,,java.util.List+remove(int) java.util.List+remove(int) com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount(),com.chad.library.adapter.base.BaseQuickAdapter+mData,253,10,1,"/** 
 * remove the item associated with the specified position of adapter
 * @param position
 */
","/**
     * remove the item associated with the specified position of adapter
     *
     * @param position
     */
    public void remove(int position) {
        mData.remove(position);
        notifyItemRemoved(position + getHeaderViewsCount());

    }",False
66,"add(int,T)",Method,,,"java.util.List+add(int,E) java.util.List+add(int,E)",com.chad.library.adapter.base.BaseQuickAdapter+mData,255,10,1,"/** 
 * insert  a item associated with the specified position of adapter
 * @param position
 * @param item
 */
","/**
     * insert  a item associated with the specified position of adapter
     *
     * @param position
     * @param item
     */
    public void add(int position, T item) {
        mData.add(position, item);
        notifyItemInserted(position);
    }",False
67,setNewData(List<T>),Method,,com.chad.baserecyclerviewadapterhelper.PullToRefreshUseActivity+run(),,com.chad.library.adapter.base.BaseQuickAdapter<T>+mData com.chad.library.adapter.base.BaseQuickAdapter+mData com.chad.library.adapter.base.BaseQuickAdapter+mRequestLoadMoreListener com.chad.library.adapter.base.BaseQuickAdapter+mNextLoadEnable com.chad.library.adapter.base.BaseQuickAdapter+mFooterView com.chad.library.adapter.base.BaseQuickAdapter+mLastPosition,341,14,1,"/** 
 * setting up a new instance to data;
 * @param data
 */
","/**
     * setting up a new instance to data;
     *
     * @param data
     */
    public void setNewData(List<T> data) {
        this.mData = data;
        if (mRequestLoadMoreListener != null) {
            mNextLoadEnable = true;
            mFooterView = null;
        }
        mLastPosition = -1;
        notifyDataSetChanged();
    }",False
68,addData(List<T>),Method,,,java.util.List+addAll(Collection) java.util.List+addAll(Collection),com.chad.library.adapter.base.BaseQuickAdapter<T>+mData com.chad.library.adapter.base.BaseQuickAdapter+mData,172,9,1,"/** 
 * additional data;
 * @param data
 */
","/**
     * additional data;
     *
     * @param data
     */
    public void addData(List<T> data) {
        this.mData.addAll(data);
        notifyDataSetChanged();
    }",False
69,setLoadingView(View),Method,,com.chad.baserecyclerviewadapterhelper.PullToRefreshUseActivity+onClick(View),,com.chad.library.adapter.base.BaseQuickAdapter<T>+mLoadingView com.chad.library.adapter.base.BaseQuickAdapter+mLoadingView,167,8,1,"/** 
 * set a loadingView
 * @param loadingView
 */
","/**
     * set a loadingView
     *
     * @param loadingView
     */
    public void setLoadingView(View loadingView) {
        this.mLoadingView = loadingView;
    }",False
70,getData(),Method,,com.chad.baserecyclerviewadapterhelper.PullToRefreshUseActivity+run() com.chad.baserecyclerviewadapterhelper.PullToRefreshUseActivity+initAdapter(),,com.chad.library.adapter.base.BaseQuickAdapter+mData,120,8,1,"/** 
 * Get the data of list
 * @return
 */
","/**
     * Get the data of list
     *
     * @return
     */
    public List<T> getData() {
        return mData;
    }",False
71,getItem(int),Method,,"com.chad.baserecyclerviewadapterhelper.AnimationUseActivity+onItemChildClick(BaseQuickAdapter,View,int)",java.util.List+get(int) java.util.List+get(int),com.chad.library.adapter.base.BaseQuickAdapter+mData,346,10,1,"/** 
 * Get the data item associated with the specified position in the data set.
 * @param position Position of the item whose data we want within the adapter'sdata set.
 * @return The data at the specified position.
 */
","/**
     * Get the data item associated with the specified position in the data set.
     *
     * @param position Position of the item whose data we want within the adapter's
     *                 data set.
     * @return The data at the specified position.
     */
    public T getItem(int position) {
        return mData.get(position);
    }",False
72,getHeaderViewsCount(),Method,"OnItemChildClickListener.onClick(View) remove(int) getItemCount() getItemCount() getItemViewType(int) getItemViewType(int) onBindViewHolder(RecyclerView.ViewHolder,int) onBindViewHolder(RecyclerView.ViewHolder,int) onBindViewHolder(RecyclerView.ViewHolder,int) getViewHolderPosition(RecyclerView.ViewHolder)",,,com.chad.library.adapter.base.BaseQuickAdapter+mHeaderView,185,8,1,"/** 
 * if setHeadView will be return 1 if not will be return 0
 * @return
 */
","/**
     * if setHeadView will be return 1 if not will be return 0
     *
     * @return
     */
    public int getHeaderViewsCount() {
        return mHeaderView == null ? 0 : 1;
    }",False
73,getFooterViewsCount(),Method,getItemCount(),,,com.chad.library.adapter.base.BaseQuickAdapter+mFooterView,185,8,1,"/** 
 * if mFooterView will be return 1 or not will be return 0
 * @return
 */
","/**
     * if mFooterView will be return 1 or not will be return 0
     *
     * @return
     */
    public int getFooterViewsCount() {
        return mFooterView == null ? 0 : 1;
    }",False
74,getmEmptyViewCount(),Method,getItemCount() getItemCount() getItemCount(),,,com.chad.library.adapter.base.BaseQuickAdapter+mEmptyView,182,8,1,"/** 
 * if mEmptyView will be return 1 or not will be return 0
 * @return
 */
","/**
     * if mEmptyView will be return 1 or not will be return 0
     *
     * @return
     */
    public int getmEmptyViewCount() {
        return mEmptyView == null ? 0 : 1;
    }",False
75,getItemCount(),Method,getItemViewType(int),,com.chad.library.adapter.base.BaseQuickAdapter+isLoadMore() com.chad.library.adapter.base.BaseQuickAdapter+isLoadMore() java.util.List+size() java.util.List+size() com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getFooterViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getFooterViewsCount() java.util.List+size() java.util.List+size() com.chad.library.adapter.base.BaseQuickAdapter+getmEmptyViewCount() com.chad.library.adapter.base.BaseQuickAdapter+getmEmptyViewCount() com.chad.library.adapter.base.BaseQuickAdapter+getmEmptyViewCount() com.chad.library.adapter.base.BaseQuickAdapter+getmEmptyViewCount() com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getmEmptyViewCount() com.chad.library.adapter.base.BaseQuickAdapter+getmEmptyViewCount(),com.chad.library.adapter.base.BaseQuickAdapter+mData com.chad.library.adapter.base.BaseQuickAdapter+mData com.chad.library.adapter.base.BaseQuickAdapter+mEmptyView com.chad.library.adapter.base.BaseQuickAdapter+mHeadAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mFootAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mHeadAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mFootAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mHeadAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mEmptyEnable,992,30,1,"/** 
 * returns the number of item that will be created
 * @return
 */
","/**
     * returns the number of item that will be created
     *
     * @return
     */
    @Override
    public int getItemCount() {
        int i = isLoadMore() ? 1 : 0;
        int count = mData.size() + i + getHeaderViewsCount() + getFooterViewsCount();
        if (mData.size() == 0 && mEmptyView != null) {
            /**
             *  setEmptyView(false) and add emptyView
             */
            if (count == 0 && (!mHeadAndEmptyEnable || !mFootAndEmptyEnable)) {
                count += getmEmptyViewCount();
                /**
                 * {@link #setEmptyView(true, true, View)}
                 */
            } else if (mHeadAndEmptyEnable || mFootAndEmptyEnable) {
                count += getmEmptyViewCount();
            }

            if ((mHeadAndEmptyEnable && getHeaderViewsCount() == 1 && count == 1) || count == 0) {
                mEmptyEnable = true;
                count += getmEmptyViewCount();
            }

        }
        return count;
    }",False
76,getItemViewType(int),Method,,,java.util.List+size() java.util.List+size() java.util.List+size() java.util.List+size() com.chad.library.adapter.base.BaseQuickAdapter+getItemCount() com.chad.library.adapter.base.BaseQuickAdapter+getItemCount() java.util.List+size() java.util.List+size() com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getDefItemViewType(int) com.chad.library.adapter.base.BaseQuickAdapter+getDefItemViewType(int) com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount(),com.chad.library.adapter.base.BaseQuickAdapter+mHeaderView com.chad.library.adapter.base.BaseQuickAdapter+HEADER_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mData com.chad.library.adapter.base.BaseQuickAdapter+mEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mEmptyView com.chad.library.adapter.base.BaseQuickAdapter+mHeadAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mFootAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mHeaderView com.chad.library.adapter.base.BaseQuickAdapter+mEmptyView com.chad.library.adapter.base.BaseQuickAdapter+mFooterView com.chad.library.adapter.base.BaseQuickAdapter+FOOTER_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mHeaderView com.chad.library.adapter.base.BaseQuickAdapter+mEmptyView com.chad.library.adapter.base.BaseQuickAdapter+EMPTY_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mHeaderView com.chad.library.adapter.base.BaseQuickAdapter+EMPTY_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mFooterView com.chad.library.adapter.base.BaseQuickAdapter+EMPTY_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mFootAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mHeadAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mHeaderView com.chad.library.adapter.base.BaseQuickAdapter+mEmptyView com.chad.library.adapter.base.BaseQuickAdapter+FOOTER_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mFootAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mHeadAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mFooterView com.chad.library.adapter.base.BaseQuickAdapter+FOOTER_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mData com.chad.library.adapter.base.BaseQuickAdapter+mEmptyView com.chad.library.adapter.base.BaseQuickAdapter+mHeadAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+EMPTY_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mData com.chad.library.adapter.base.BaseQuickAdapter+mNextLoadEnable com.chad.library.adapter.base.BaseQuickAdapter+LOADING_VIEW com.chad.library.adapter.base.BaseQuickAdapter+FOOTER_VIEW,2843,66,1,"/** 
 * Get the type of View that will be created by  {@link #getItemView(int,ViewGroup)} for the specified item.
 * @param position The position of the item within the adapter's data set whose view type wewant.
 * @return An integer representing the type of View. Two views should share the same type if onecan be converted to the other in  {@link #getItemView(int,ViewGroup)}. Note: Integers must be in the range 0 to  {@link #getItemCount()} - 1.
 */
","/**
     * Get the type of View that will be created by {@link #getItemView(int, ViewGroup)} for the specified item.
     *
     * @param position The position of the item within the adapter's data set whose view type we
     *                 want.
     * @return An integer representing the type of View. Two views should share the same type if one
     * can be converted to the other in {@link #getItemView(int, ViewGroup)}. Note: Integers must be in the
     * range 0 to {@link #getItemCount()} - 1.
     */
    @Override
    public int getItemViewType(int position) {
        /**
         * if set headView and positon =0
         */
        if (mHeaderView != null && position == 0) {
            return HEADER_VIEW;
        }
        /**
         * if user has no data and add emptyView and position <2{(headview +emptyView)}
         */
        if (mData.size() == 0 && mEmptyEnable && mEmptyView != null && position <= 2) {
            /**
             * if set {@link #setEmptyView(boolean, boolean, View)}  position = 1
             */
            if ((mHeadAndEmptyEnable || mFootAndEmptyEnable) && position == 1) {
                /**
                 * if user want to show headview and footview and emptyView but not add headview
                 */
                if (mHeaderView == null && mEmptyView != null && mFooterView != null) {
                    return FOOTER_VIEW;
                    /**
                     * add headview
                     */
                } else if (mHeaderView != null && mEmptyView != null) {
                    return EMPTY_VIEW;
                }
            } else if (position == 0) {
                /**
                 * has no emptyView just add emptyview
                 */
                if (mHeaderView == null) {
                    return EMPTY_VIEW;
                } else if (mFooterView != null)

                    return EMPTY_VIEW;


            } else if (position == 2 && (mFootAndEmptyEnable || mHeadAndEmptyEnable) && mHeaderView != null && mEmptyView != null) {
                return FOOTER_VIEW;

            } /**
             * user forget to set {@link #setEmptyView(boolean, boolean, View)}  but add footview and headview and emptyview
             */
            else if ((!mFootAndEmptyEnable || !mHeadAndEmptyEnable) && position == 1 && mFooterView != null) {
                return FOOTER_VIEW;
            }
        } else if (mData.size() == 0 && mEmptyView != null && getItemCount() == (mHeadAndEmptyEnable ? 2 : 1) && mEmptyEnable) {
            return EMPTY_VIEW;
        } else if (position == mData.size() + getHeaderViewsCount()) {
            if (mNextLoadEnable)
                return LOADING_VIEW;
            else
                return FOOTER_VIEW;
        }
        return getDefItemViewType(position - getHeaderViewsCount());
    }",False
77,getDefItemViewType(int),Method,getItemViewType(int),,,,102,3,4,,"protected int getDefItemViewType(int position) {
        return super.getItemViewType(position);
    }",False
78,"onCreateViewHolder(ViewGroup,int)",Method,,,"com.chad.library.adapter.base.BaseQuickAdapter+getLoadingView(ViewGroup) com.chad.library.adapter.base.BaseQuickAdapter+getLoadingView(ViewGroup) com.chad.library.adapter.base.BaseViewHolder+BaseViewHolder(View) com.chad.library.adapter.base.BaseViewHolder+BaseViewHolder(View) com.chad.library.adapter.base.BaseViewHolder+BaseViewHolder(View) com.chad.library.adapter.base.BaseQuickAdapter+onCreateDefViewHolder(ViewGroup,int) com.chad.library.adapter.base.BaseQuickAdapter+onCreateDefViewHolder(ViewGroup,int) com.chad.library.adapter.base.BaseQuickAdapter+initItemClickListener(BaseViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+initItemClickListener(BaseViewHolder)",com.chad.library.adapter.base.BaseQuickAdapter<T>+mContext com.chad.library.adapter.base.BaseQuickAdapter+mContext com.chad.library.adapter.base.BaseQuickAdapter<T>+mLayoutInflater com.chad.library.adapter.base.BaseQuickAdapter+mLayoutInflater com.chad.library.adapter.base.BaseQuickAdapter+mContext com.chad.library.adapter.base.BaseQuickAdapter+LOADING_VIEW com.chad.library.adapter.base.BaseQuickAdapter+HEADER_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mHeaderView com.chad.library.adapter.base.BaseQuickAdapter+EMPTY_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mEmptyView com.chad.library.adapter.base.BaseQuickAdapter+FOOTER_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mFooterView,933,25,1,,"@Override
    public BaseViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        BaseViewHolder baseViewHolder = null;
        this.mContext = parent.getContext();
        this.mLayoutInflater = LayoutInflater.from(mContext);
        switch (viewType) {
            case LOADING_VIEW:
                baseViewHolder = getLoadingView(parent);
                break;
            case HEADER_VIEW:
                baseViewHolder = new BaseViewHolder(mHeaderView);
                break;
            case EMPTY_VIEW:
                baseViewHolder = new BaseViewHolder(mEmptyView);
                break;
            case FOOTER_VIEW:
                baseViewHolder = new BaseViewHolder(mFooterView);
                break;
            default:
                baseViewHolder = onCreateDefViewHolder(parent, viewType);
                initItemClickListener(baseViewHolder);
        }
        return baseViewHolder;

    }",False
79,getLoadingView(ViewGroup),Method,"onCreateViewHolder(ViewGroup,int)",,"com.chad.library.adapter.base.BaseQuickAdapter+createBaseViewHolder(ViewGroup,int) com.chad.library.adapter.base.BaseQuickAdapter+createBaseViewHolder(ViewGroup,int) com.chad.library.adapter.base.BaseViewHolder+BaseViewHolder(View)",com.chad.library.adapter.base.BaseQuickAdapter+mLoadingView com.chad.library.adapter.base.BaseQuickAdapter+mLoadingView,229,6,2,,"private BaseViewHolder getLoadingView(ViewGroup parent) {
        if (mLoadingView == null) {
            return createBaseViewHolder(parent, R.layout.def_loading);
        }
        return new BaseViewHolder(mLoadingView);
    }",False
80,onViewAttachedToWindow(RecyclerView.ViewHolder),Method,,,com.chad.library.adapter.base.BaseQuickAdapter+setFullSpan(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+setFullSpan(ViewHolder),com.chad.library.adapter.base.BaseQuickAdapter+EMPTY_VIEW com.chad.library.adapter.base.BaseQuickAdapter+HEADER_VIEW com.chad.library.adapter.base.BaseQuickAdapter+FOOTER_VIEW com.chad.library.adapter.base.BaseQuickAdapter+LOADING_VIEW,554,15,1,"/** 
 * Called when a view created by this adapter has been attached to a window. simple to solve item will layout using all {@link #setFullSpan(RecyclerView.ViewHolder)}
 * @param holder
 */
","/**
     * Called when a view created by this adapter has been attached to a window.
     * simple to solve item will layout using all
     * {@link #setFullSpan(RecyclerView.ViewHolder)}
     *
     * @param holder
     */
    @Override
    public void onViewAttachedToWindow(RecyclerView.ViewHolder holder) {
        super.onViewAttachedToWindow(holder);
        int type = holder.getItemViewType();
        if (type == EMPTY_VIEW || type == HEADER_VIEW || type == FOOTER_VIEW || type == LOADING_VIEW) {
            setFullSpan(holder);
        }
    }",False
81,setFullSpan(RecyclerView.ViewHolder),Method,,,,,742,14,4,"/** 
 * When set to true, the item will layout using all span area. That means, if orientation is vertical, the view will have full width; if orientation is horizontal, the view will have full height. if the hold view use StaggeredGridLayoutManager they should using all span area
 * @param holder True if this item should traverse all spans.
 */
","/**
     * When set to true, the item will layout using all span area. That means, if orientation
     * is vertical, the view will have full width; if orientation is horizontal, the view will
     * have full height.
     * if the hold view use StaggeredGridLayoutManager they should using all span area
     *
     * @param holder True if this item should traverse all spans.
     */
    protected void setFullSpan(RecyclerView.ViewHolder holder) {
        if (holder.itemView.getLayoutParams() instanceof StaggeredGridLayoutManager.LayoutParams) {
            StaggeredGridLayoutManager.LayoutParams params = (StaggeredGridLayoutManager.LayoutParams) holder.itemView.getLayoutParams();
            params.setFullSpan(true);
        }
    }",False
82,onAttachedToRecyclerView(RecyclerView),Method,,,+getSpanSize(int),,768,15,1,,"@Override
    public void onAttachedToRecyclerView(RecyclerView recyclerView) {
        super.onAttachedToRecyclerView(recyclerView);
        RecyclerView.LayoutManager manager = recyclerView.getLayoutManager();
        if (manager instanceof GridLayoutManager) {
            final GridLayoutManager gridManager = ((GridLayoutManager) manager);
            gridManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {
                @Override
                public int getSpanSize(int position) {
                    int type = getItemViewType(position);
                    return (type == EMPTY_VIEW || type == HEADER_VIEW || type == FOOTER_VIEW || type == LOADING_VIEW) ? gridManager.getSpanCount() : 1;
                }
            });
        }
    }",False
83,"onBindViewHolder(RecyclerView.ViewHolder,int)",Method,,,"com.chad.library.adapter.base.BaseQuickAdapter+convert(BaseViewHolder,T) com.chad.library.adapter.base.BaseQuickAdapter+convert(BaseViewHolder,T) java.util.List+get(int) java.util.List+get(int) com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+addAnimation(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+addAnimation(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+addLoadMore(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+addLoadMore(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+convert(BaseViewHolder,T) com.chad.library.adapter.base.BaseQuickAdapter+convert(BaseViewHolder,T) java.util.List+get(int) java.util.List+get(int) com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+onBindDefViewHolder(BaseViewHolder,T) com.chad.library.adapter.base.BaseQuickAdapter+onBindDefViewHolder(BaseViewHolder,T) java.util.List+get(int) java.util.List+get(int) com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseViewHolder+getView(int) com.chad.library.adapter.base.BaseViewHolder+getView(int)",com.chad.library.adapter.base.BaseQuickAdapter+mData com.chad.library.adapter.base.BaseQuickAdapter+LOADING_VIEW com.chad.library.adapter.base.BaseQuickAdapter+HEADER_VIEW com.chad.library.adapter.base.BaseQuickAdapter+EMPTY_VIEW com.chad.library.adapter.base.BaseQuickAdapter+FOOTER_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mData com.chad.library.adapter.base.BaseQuickAdapter+mData com.chad.library.adapter.base.BaseQuickAdapter+mItemTouchHelper com.chad.library.adapter.base.BaseQuickAdapter+itemDragEnabled com.chad.library.adapter.base.BaseQuickAdapter+LOADING_VIEW com.chad.library.adapter.base.BaseQuickAdapter+HEADER_VIEW com.chad.library.adapter.base.BaseQuickAdapter+EMPTY_VIEW com.chad.library.adapter.base.BaseQuickAdapter+FOOTER_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mToggleViewId com.chad.library.adapter.base.BaseQuickAdapter+NO_TOGGLE_VIEW com.chad.library.adapter.base.BaseQuickAdapter+mToggleViewId com.chad.library.adapter.base.BaseQuickAdapter+mDragOnLongPress com.chad.library.adapter.base.BaseQuickAdapter+mOnToggleViewLongClickListener com.chad.library.adapter.base.BaseQuickAdapter+mOnToggleViewTouchListener com.chad.library.adapter.base.BaseQuickAdapter+mOnToggleViewLongClickListener,2058,49,1,"/** 
 * To bind different types of holder and solve different the bind events
 * @param holder
 * @param positions
 * @see #getDefItemViewType(int)
 */
","/**
     * To bind different types of holder and solve different the bind events
     *
     * @param holder
     * @param positions
     * @see #getDefItemViewType(int)
     */
    @Override
    public void onBindViewHolder(final RecyclerView.ViewHolder holder, int positions) {
        int viewType = holder.getItemViewType();

        switch (viewType) {
            case 0:
                convert((BaseViewHolder) holder, mData.get(holder.getLayoutPosition() - getHeaderViewsCount()));
                addAnimation(holder);
                break;
            case LOADING_VIEW:
                addLoadMore(holder);
                break;
            case HEADER_VIEW:
                break;
            case EMPTY_VIEW:
                break;
            case FOOTER_VIEW:
                break;
            default:
                convert((BaseViewHolder) holder, mData.get(holder.getLayoutPosition() - getHeaderViewsCount()));
                onBindDefViewHolder((BaseViewHolder) holder, mData.get(holder.getLayoutPosition() - getHeaderViewsCount()));
                break;
        }

        if (mItemTouchHelper != null && itemDragEnabled && viewType != LOADING_VIEW && viewType != HEADER_VIEW
                && viewType != EMPTY_VIEW && viewType != FOOTER_VIEW) {
            if (mToggleViewId != NO_TOGGLE_VIEW) {
                View toggleView = ((BaseViewHolder) holder).getView(mToggleViewId);
                if (toggleView != null) {
                    toggleView.setTag(R.id.BaseQuickAdapter_viewholder_support, holder);
                    if (mDragOnLongPress) {
                        toggleView.setOnLongClickListener(mOnToggleViewLongClickListener);
                    } else {
                        toggleView.setOnTouchListener(mOnToggleViewTouchListener);
                    }
                }
            } else {
                holder.itemView.setTag(R.id.BaseQuickAdapter_viewholder_support, holder);
                holder.itemView.setOnLongClickListener(mOnToggleViewLongClickListener);
            }
        }
    }",False
84,"onCreateDefViewHolder(ViewGroup,int)",Method,"onCreateViewHolder(ViewGroup,int)",,"com.chad.library.adapter.base.BaseQuickAdapter+createBaseViewHolder(ViewGroup,int) com.chad.library.adapter.base.BaseQuickAdapter+createBaseViewHolder(ViewGroup,int)",com.chad.library.adapter.base.BaseQuickAdapter+mLayoutResId,145,3,4,,"protected BaseViewHolder onCreateDefViewHolder(ViewGroup parent, int viewType) {
        return createBaseViewHolder(parent, mLayoutResId);
    }",False
85,"createBaseViewHolder(ViewGroup,int)",Method,"getLoadingView(ViewGroup) onCreateDefViewHolder(ViewGroup,int)","com.chad.library.adapter.base.BaseMultiItemQuickAdapter+onCreateDefViewHolder(ViewGroup,int)","com.chad.library.adapter.base.BaseViewHolder+BaseViewHolder(View) com.chad.library.adapter.base.BaseQuickAdapter+getItemView(int,ViewGroup) com.chad.library.adapter.base.BaseQuickAdapter+getItemView(int,ViewGroup) com.chad.library.adapter.base.BaseViewHolder+BaseViewHolder(View)",com.chad.library.adapter.base.BaseQuickAdapter+mContentView com.chad.library.adapter.base.BaseQuickAdapter+mContentView,256,6,4,,"protected BaseViewHolder createBaseViewHolder(ViewGroup parent, int layoutResId) {
        if (mContentView == null) {
            return new BaseViewHolder(getItemView(layoutResId, parent));
        }
        return new BaseViewHolder(mContentView);
    }",False
86,addHeaderView(View),Method,,com.chad.baserecyclerviewadapterhelper.HeaderAndFooterUseActivity+onCreate(Bundle),,com.chad.library.adapter.base.BaseQuickAdapter<T>+mHeaderView com.chad.library.adapter.base.BaseQuickAdapter+mHeaderView,200,9,1,"/** 
 * easy to show a simple headView
 * @param header
 */
","/**
     * easy to show a simple headView
     *
     * @param header
     */
    public void addHeaderView(View header) {
        this.mHeaderView = header;
        this.notifyDataSetChanged();
    }",False
87,addFooterView(View),Method,,com.chad.baserecyclerviewadapterhelper.HeaderAndFooterUseActivity+onCreate(Bundle) com.chad.baserecyclerviewadapterhelper.PullToRefreshUseActivity+run(),,com.chad.library.adapter.base.BaseQuickAdapter+mNextLoadEnable com.chad.library.adapter.base.BaseQuickAdapter<T>+mFooterView com.chad.library.adapter.base.BaseQuickAdapter+mFooterView,235,10,1,"/** 
 * easy to show a simple footerView
 * @param footer
 */
","/**
     * easy to show a simple footerView
     *
     * @param footer
     */
    public void addFooterView(View footer) {
        mNextLoadEnable = false;
        this.mFooterView = footer;
        this.notifyDataSetChanged();
    }",False
88,setEmptyView(View),Method,,com.chad.baserecyclerviewadapterhelper.EmptyViewUseActivity+initAdapter(),"com.chad.library.adapter.base.BaseQuickAdapter+setEmptyView(boolean,boolean,View) com.chad.library.adapter.base.BaseQuickAdapter+setEmptyView(boolean,boolean,View)",,164,6,1,"/** 
 * Sets the view to show if the adapter is empty
 */
","/**
     * Sets the view to show if the adapter is empty
     */
    public void setEmptyView(View emptyView) {
        setEmptyView(false, false, emptyView);
    }",False
89,"setEmptyView(boolean,View)",Method,,,"com.chad.library.adapter.base.BaseQuickAdapter+setEmptyView(boolean,boolean,View) com.chad.library.adapter.base.BaseQuickAdapter+setEmptyView(boolean,boolean,View)",,285,7,1,"/** 
 * @param isHeadAndEmpty false will not show headView if the data is empty true will show emptyView and headView
 * @param emptyView
 */
","/**
     * @param isHeadAndEmpty false will not show headView if the data is empty true will show emptyView and headView
     * @param emptyView
     */
    public void setEmptyView(boolean isHeadAndEmpty, View emptyView) {
        setEmptyView(isHeadAndEmpty, false, emptyView);
    }",False
90,"setEmptyView(boolean,boolean,View)",Method,"setEmptyView(View) setEmptyView(boolean,View)",,,com.chad.library.adapter.base.BaseQuickAdapter+mHeadAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mFootAndEmptyEnable com.chad.library.adapter.base.BaseQuickAdapter+mEmptyView com.chad.library.adapter.base.BaseQuickAdapter+mEmptyEnable,439,13,1,"/** 
 * set emptyView show if adapter is empty and want to show headview and footview
 * @param isHeadAndEmpty
 * @param isFootAndEmpty
 * @param emptyView
 */
","/**
     * set emptyView show if adapter is empty and want to show headview and footview
     *
     * @param isHeadAndEmpty
     * @param isFootAndEmpty
     * @param emptyView
     */
    public void setEmptyView(boolean isHeadAndEmpty, boolean isFootAndEmpty, View emptyView) {
        mHeadAndEmptyEnable = isHeadAndEmpty;
        mFootAndEmptyEnable = isFootAndEmpty;
        mEmptyView = emptyView;
        mEmptyEnable = true;
    }",False
91,getEmptyView(),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter+mEmptyView,370,10,1,"/** 
 * When the current adapter is empty, the BaseQuickAdapter can display a special view called the empty view. The empty view is used to provide feedback to the user that no data is available in this AdapterView.
 * @return The view to show if the adapter is empty.
 */
","/**
     * When the current adapter is empty, the BaseQuickAdapter can display a special view
     * called the empty view. The empty view is used to provide feedback to the user
     * that no data is available in this AdapterView.
     *
     * @return The view to show if the adapter is empty.
     */
    public View getEmptyView() {
        return mEmptyView;
    }",False
92,isNextLoad(boolean),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter+mNextLoadEnable com.chad.library.adapter.base.BaseQuickAdapter+mLoadingMoreEnable,309,12,1,"/** 
 * see more  {@link  public void notifyDataChangedAfterLoadMore(boolean isNextLoad)}
 * @param isNextLoad
 */
","/**
     * see more {@link  public void notifyDataChangedAfterLoadMore(boolean isNextLoad)}
     *
     * @param isNextLoad
     */
    @Deprecated
    public void isNextLoad(boolean isNextLoad) {
        mNextLoadEnable = isNextLoad;
        mLoadingMoreEnable = false;
        notifyDataSetChanged();

    }",False
93,notifyDataChangedAfterLoadMore(boolean),Method,"notifyDataChangedAfterLoadMore(List<T>,boolean)",com.chad.baserecyclerviewadapterhelper.PullToRefreshUseActivity+run(),,com.chad.library.adapter.base.BaseQuickAdapter+mNextLoadEnable com.chad.library.adapter.base.BaseQuickAdapter+mLoadingMoreEnable,300,10,1,"/** 
 * @param isNextLoad trueif true when loading more data can show loadingView
 */
","/**
     * @param isNextLoad true
     *                   if true when loading more data can show loadingView
     */
    public void notifyDataChangedAfterLoadMore(boolean isNextLoad) {
        mNextLoadEnable = isNextLoad;
        mLoadingMoreEnable = false;
        notifyDataSetChanged();

    }",False
94,"notifyDataChangedAfterLoadMore(List<T>,boolean)",Method,,com.chad.baserecyclerviewadapterhelper.PullToRefreshUseActivity+run(),java.util.List+addAll(Collection) java.util.List+addAll(Collection) com.chad.library.adapter.base.BaseQuickAdapter+notifyDataChangedAfterLoadMore(boolean) com.chad.library.adapter.base.BaseQuickAdapter+notifyDataChangedAfterLoadMore(boolean),com.chad.library.adapter.base.BaseQuickAdapter+mData,253,11,1,"/** 
 * add more data
 * @param data
 * @param isNextLoad
 */
","/**
     * add more data
     *
     * @param data
     * @param isNextLoad
     */
    public void notifyDataChangedAfterLoadMore(List<T> data, boolean isNextLoad) {
        mData.addAll(data);
        notifyDataChangedAfterLoadMore(isNextLoad);

    }",False
95,addLoadMore(RecyclerView.ViewHolder),Method,,,com.chad.library.adapter.base.BaseQuickAdapter+isLoadMore() com.chad.library.adapter.base.BaseQuickAdapter+isLoadMore() com.chad.library.adapter.base.BaseQuickAdapter.RequestLoadMoreListener+onLoadMoreRequested() com.chad.library.adapter.base.BaseQuickAdapter.RequestLoadMoreListener+onLoadMoreRequested(),com.chad.library.adapter.base.BaseQuickAdapter+mLoadingMoreEnable com.chad.library.adapter.base.BaseQuickAdapter+mLoadingMoreEnable com.chad.library.adapter.base.BaseQuickAdapter+mRequestLoadMoreListener,224,6,2,,"private void addLoadMore(RecyclerView.ViewHolder holder) {
        if (isLoadMore() && !mLoadingMoreEnable) {
            mLoadingMoreEnable = true;
            mRequestLoadMoreListener.onLoadMoreRequested();
        }
    }",False
96,initItemClickListener(BaseViewHolder),Method,"onCreateViewHolder(ViewGroup,int)",,+onClick(View),com.chad.library.adapter.base.BaseQuickAdapter+onRecyclerViewItemClickListener,1046,23,2,"/** 
 * init the baseViewHolder to register onRecyclerViewItemClickListener and onRecyclerViewItemLongClickListener
 * @param baseViewHolder
 */
","/**
     * init the baseViewHolder to register onRecyclerViewItemClickListener and onRecyclerViewItemLongClickListener
     *
     * @param baseViewHolder
     */
    private void initItemClickListener(final BaseViewHolder baseViewHolder) {
        if (onRecyclerViewItemClickListener != null) {
            baseViewHolder.itemView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    onRecyclerViewItemClickListener.onItemClick(v, baseViewHolder.getLayoutPosition() - getHeaderViewsCount());
                }
            });
        }
        if (onRecyclerViewItemLongClickListener != null) {
            baseViewHolder.itemView.setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    return onRecyclerViewItemLongClickListener.onItemLongClick(v, baseViewHolder.getLayoutPosition() - getHeaderViewsCount());
                }
            });
        }
    }",False
97,addAnimation(RecyclerView.ViewHolder),Method,,,"com.chad.library.adapter.base.animation.BaseAnimation+getAnimators(View) com.chad.library.adapter.base.animation.BaseAnimation+getAnimators(View) com.chad.library.adapter.base.BaseQuickAdapter+startAnim(Animator,int) com.chad.library.adapter.base.BaseQuickAdapter+startAnim(Animator,int)",com.chad.library.adapter.base.BaseQuickAdapter+mOpenAnimationEnable com.chad.library.adapter.base.BaseQuickAdapter+mFirstOnlyEnable com.chad.library.adapter.base.BaseQuickAdapter+mLastPosition com.chad.library.adapter.base.BaseQuickAdapter+mCustomAnimation com.chad.library.adapter.base.BaseQuickAdapter+mCustomAnimation com.chad.library.adapter.base.BaseQuickAdapter+mSelectAnimation com.chad.library.adapter.base.BaseQuickAdapter+mLastPosition,762,21,2,"/** 
 * add animation when you want to show time
 * @param holder
 */
","/**
     * add animation when you want to show time
     *
     * @param holder
     */
    private void addAnimation(RecyclerView.ViewHolder holder) {
        if (mOpenAnimationEnable) {
            if (!mFirstOnlyEnable || holder.getLayoutPosition() > mLastPosition) {
                BaseAnimation animation = null;
                if (mCustomAnimation != null) {
                    animation = mCustomAnimation;
                } else {
                    animation = mSelectAnimation;
                }
                for (Animator anim : animation.getAnimators(holder.itemView)) {
                    startAnim(anim, holder.getLayoutPosition());
                }
                mLastPosition = holder.getLayoutPosition();
            }
        }
    }",False
98,"startAnim(Animator,int)",Method,addAnimation(RecyclerView.ViewHolder),,,com.chad.library.adapter.base.BaseQuickAdapter+mDuration com.chad.library.adapter.base.BaseQuickAdapter+mInterpolator,248,10,4,"/** 
 * set anim to start when loading
 * @param anim
 * @param index
 */
","/**
     * set anim to start when loading
     *
     * @param anim
     * @param index
     */
    protected void startAnim(Animator anim, int index) {
        anim.setDuration(mDuration).start();
        anim.setInterpolator(mInterpolator);
    }",False
99,isLoadMore(),Method,getItemCount() addLoadMore(RecyclerView.ViewHolder),,java.util.List+size() java.util.List+size(),com.chad.library.adapter.base.BaseQuickAdapter+mNextLoadEnable com.chad.library.adapter.base.BaseQuickAdapter+pageSize com.chad.library.adapter.base.BaseQuickAdapter+mRequestLoadMoreListener com.chad.library.adapter.base.BaseQuickAdapter+mData com.chad.library.adapter.base.BaseQuickAdapter+pageSize,231,8,2,"/** 
 * Determine whether it is loaded more
 * @return
 */
","/**
     * Determine whether it is loaded more
     *
     * @return
     */
    private boolean isLoadMore() {
        return mNextLoadEnable && pageSize != -1 && mRequestLoadMoreListener != null && mData.size() >= pageSize;
    }",False
100,"getItemView(int,ViewGroup)",Method,,"com.chad.baserecyclerviewadapterhelper.adapter.MultipleItemAdapter+onCreateDefViewHolder(ViewGroup,int) com.chad.library.adapter.base.BaseSectionQuickAdapter+onCreateDefViewHolder(ViewGroup,int)",,com.chad.library.adapter.base.BaseQuickAdapter+mLayoutInflater,491,10,4,"/** 
 * @param layoutResId ID for an XML layout resource to load
 * @param parent      Optional view to be the parent of the generated hierarchy or else simply an object thatprovides a set of LayoutParams values for root of the returned hierarchy
 * @return view will be return
 */
","/**
     * @param layoutResId ID for an XML layout resource to load
     * @param parent      Optional view to be the parent of the generated hierarchy or else simply an object that
     *                    provides a set of LayoutParams values for root of the returned
     *                    hierarchy
     * @return view will be return
     */
    protected View getItemView(int layoutResId, ViewGroup parent) {
        return mLayoutInflater.inflate(layoutResId, parent, false);
    }",False
101,"onBindDefViewHolder(BaseViewHolder,T)",Method,"onBindViewHolder(RecyclerView.ViewHolder,int)",,,,274,8,4,"/** 
 * @see #convert(BaseViewHolder,Object) ()
 * @deprecated This method is deprecated{@link #convert(BaseViewHolder,Object)} depending on your use case.
 */
","/**
     * @see #convert(BaseViewHolder, Object) ()
     * @deprecated This method is deprecated
     * {@link #convert(BaseViewHolder, Object)} depending on your use case.
     */
    @Deprecated
    protected void onBindDefViewHolder(BaseViewHolder holder, T item) {
    }",False
102,RequestLoadMoreListener,MemberClass,,,com.chad.library.adapter.base.BaseQuickAdapter.RequestLoadMoreListener+onLoadMoreRequested(),,85,4,1,,"public interface RequestLoadMoreListener {

        void onLoadMoreRequested();
    }",False
103,openLoadAnimation(int),Method,,,com.chad.library.adapter.base.animation.AlphaInAnimation+AlphaInAnimation() com.chad.library.adapter.base.animation.ScaleInAnimation+ScaleInAnimation() com.chad.library.adapter.base.animation.SlideInBottomAnimation+SlideInBottomAnimation() com.chad.library.adapter.base.animation.SlideInLeftAnimation+SlideInLeftAnimation() com.chad.library.adapter.base.animation.SlideInRightAnimation+SlideInRightAnimation(),com.chad.library.adapter.base.BaseQuickAdapter<T>+mOpenAnimationEnable com.chad.library.adapter.base.BaseQuickAdapter+mOpenAnimationEnable com.chad.library.adapter.base.BaseQuickAdapter+mCustomAnimation com.chad.library.adapter.base.BaseQuickAdapter+ALPHAIN com.chad.library.adapter.base.BaseQuickAdapter+mSelectAnimation com.chad.library.adapter.base.BaseQuickAdapter+SCALEIN com.chad.library.adapter.base.BaseQuickAdapter+mSelectAnimation com.chad.library.adapter.base.BaseQuickAdapter+SLIDEIN_BOTTOM com.chad.library.adapter.base.BaseQuickAdapter+mSelectAnimation com.chad.library.adapter.base.BaseQuickAdapter+SLIDEIN_LEFT com.chad.library.adapter.base.BaseQuickAdapter+mSelectAnimation com.chad.library.adapter.base.BaseQuickAdapter+SLIDEIN_RIGHT com.chad.library.adapter.base.BaseQuickAdapter+mSelectAnimation,1008,28,1,"/** 
 * Set the view animation type.
 * @param animationType One of {@link #ALPHAIN},  {@link #SCALEIN},  {@link #SLIDEIN_BOTTOM},  {@link #SLIDEIN_LEFT},  {@link #SLIDEIN_RIGHT}.
 */
","/**
     * Set the view animation type.
     *
     * @param animationType One of {@link #ALPHAIN}, {@link #SCALEIN}, {@link #SLIDEIN_BOTTOM}, {@link #SLIDEIN_LEFT}, {@link #SLIDEIN_RIGHT}.
     */
    public void openLoadAnimation(@AnimationType int animationType) {
        this.mOpenAnimationEnable = true;
        mCustomAnimation = null;
        switch (animationType) {
            case ALPHAIN:
                mSelectAnimation = new AlphaInAnimation();
                break;
            case SCALEIN:
                mSelectAnimation = new ScaleInAnimation();
                break;
            case SLIDEIN_BOTTOM:
                mSelectAnimation = new SlideInBottomAnimation();
                break;
            case SLIDEIN_LEFT:
                mSelectAnimation = new SlideInLeftAnimation();
                break;
            case SLIDEIN_RIGHT:
                mSelectAnimation = new SlideInRightAnimation();
                break;
            default:
                break;
        }
    }",False
104,openLoadAnimation(BaseAnimation),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter<T>+mOpenAnimationEnable com.chad.library.adapter.base.BaseQuickAdapter+mOpenAnimationEnable com.chad.library.adapter.base.BaseQuickAdapter<T>+mCustomAnimation com.chad.library.adapter.base.BaseQuickAdapter+mCustomAnimation,242,9,1,"/** 
 * Set Custom ObjectAnimator
 * @param animation ObjectAnimator
 */
","/**
     * Set Custom ObjectAnimator
     *
     * @param animation ObjectAnimator
     */
    public void openLoadAnimation(BaseAnimation animation) {
        this.mOpenAnimationEnable = true;
        this.mCustomAnimation = animation;
    }",False
105,openLoadAnimation(),Method,,com.chad.baserecyclerviewadapterhelper.AnimationUseActivity+initAdapter() com.chad.baserecyclerviewadapterhelper.HeaderAndFooterUseActivity+initAdapter() com.chad.baserecyclerviewadapterhelper.HomeActivity+onCreate(Bundle) com.chad.baserecyclerviewadapterhelper.PullToRefreshUseActivity+initAdapter(),,com.chad.library.adapter.base.BaseQuickAdapter<T>+mOpenAnimationEnable com.chad.library.adapter.base.BaseQuickAdapter+mOpenAnimationEnable,139,6,1,"/** 
 * To open the animation when loading
 */
","/**
     * To open the animation when loading
     */
    public void openLoadAnimation() {
        this.mOpenAnimationEnable = true;
    }",False
106,isFirstOnly(boolean),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter<T>+mFirstOnlyEnable com.chad.library.adapter.base.BaseQuickAdapter+mFirstOnlyEnable,279,8,1,"/** 
 * {@link #addAnimation(RecyclerView.ViewHolder)}
 * @param firstOnly true just show anim when first loading false show anim when load the data every time
 */
","/**
     * {@link #addAnimation(RecyclerView.ViewHolder)}
     *
     * @param firstOnly true just show anim when first loading false show anim when load the data every time
     */
    public void isFirstOnly(boolean firstOnly) {
        this.mFirstOnlyEnable = firstOnly;
    }",False
107,"convert(BaseViewHolder,T)",Method,"onBindViewHolder(RecyclerView.ViewHolder,int) onBindViewHolder(RecyclerView.ViewHolder,int)",,,,278,7,1028,"/** 
 * Implement this method and use the helper to adapt the view to the given item.
 * @param helper A fully initialized helper.
 * @param item   The item that needs to be displayed.
 */
","/**
     * Implement this method and use the helper to adapt the view to the given item.
     *
     * @param helper A fully initialized helper.
     * @param item   The item that needs to be displayed.
     */
    protected abstract void convert(BaseViewHolder helper, T item);",False
108,getItemId(int),Method,,,,,340,10,1,"/** 
 * Get the row id associated with the specified position in the list.
 * @param position The position of the item within the adapter's data set whose row id we want.
 * @return The id of the item at the specified position.
 */
","/**
     * Get the row id associated with the specified position in the list.
     *
     * @param position The position of the item within the adapter's data set whose row id we want.
     * @return The id of the item at the specified position.
     */
    @Override
    public long getItemId(int position) {
        return position;
    }",False
109,setToggleViewId(int),Method,"enableDragItem(ItemTouchHelper,int,boolean)",,,com.chad.library.adapter.base.BaseQuickAdapter+mToggleViewId,326,9,1,"/** 
 * Set the toggle view's id which will trigger drag event. If the toggle view id is not set, drag event will be triggered when the item is long pressed.
 * @param toggleViewId the toggle view's id
 */
","/**
     * Set the toggle view's id which will trigger drag event.
     * If the toggle view id is not set, drag event will be triggered when the item is long pressed.
     *
     * @param toggleViewId the toggle view's id
     */
    public void setToggleViewId(int toggleViewId) {
        mToggleViewId = toggleViewId;
    }",True
110,setToggleDragOnLongPress(boolean),Method,"enableDragItem(ItemTouchHelper,int,boolean)",,+onLongClick(View),com.chad.library.adapter.base.BaseQuickAdapter+mDragOnLongPress com.chad.library.adapter.base.BaseQuickAdapter+mDragOnLongPress com.chad.library.adapter.base.BaseQuickAdapter+mOnToggleViewTouchListener com.chad.library.adapter.base.BaseQuickAdapter+mOnToggleViewLongClickListener,1580,37,1,"/** 
 * Set the drag event should be trigger on long press. Work when the toggleViewId has been set.
 * @param longPress by default is true.
 */
","/**
     * Set the drag event should be trigger on long press.
     * Work when the toggleViewId has been set.
     *
     * @param longPress by default is true.
     */
    public void setToggleDragOnLongPress(boolean longPress) {
        mDragOnLongPress = longPress;
        if (mDragOnLongPress) {
            mOnToggleViewTouchListener = null;
            mOnToggleViewLongClickListener = new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    if (mItemTouchHelper != null && itemDragEnabled) {
                        mItemTouchHelper.startDrag((RecyclerView.ViewHolder) v.getTag(R.id.BaseQuickAdapter_viewholder_support));
                    }
                    return true;
                }
            };
        } else {
            mOnToggleViewTouchListener = new View.OnTouchListener() {
                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    if (MotionEventCompat.getActionMasked(event) == MotionEvent.ACTION_DOWN
                            && !mDragOnLongPress) {
                        if (mItemTouchHelper != null && itemDragEnabled) {
                            mItemTouchHelper.startDrag((RecyclerView.ViewHolder) v.getTag(R.id.BaseQuickAdapter_viewholder_support));
                        }
                        return true;
                    } else {
                        return false;
                    }
                }
            };
            mOnToggleViewLongClickListener = null;
        }
    }",True
111,enableDragItem(ItemTouchHelper),Method,,,"com.chad.library.adapter.base.BaseQuickAdapter+enableDragItem(ItemTouchHelper,int,boolean) com.chad.library.adapter.base.BaseQuickAdapter+enableDragItem(ItemTouchHelper,int,boolean)",com.chad.library.adapter.base.BaseQuickAdapter+NO_TOGGLE_VIEW,299,9,1,"/** 
 * Enable drag items. Use itemView as the toggleView when long pressed.
 * @param itemTouchHelper {@link ItemTouchHelper}
 */
","/**
     * Enable drag items.
     * Use itemView as the toggleView when long pressed.
     *
     * @param itemTouchHelper {@link ItemTouchHelper}
     */
    public void enableDragItem(@NonNull ItemTouchHelper itemTouchHelper) {
        enableDragItem(itemTouchHelper, NO_TOGGLE_VIEW, true);
    }",True
112,"enableDragItem(ItemTouchHelper,int,boolean)",Method,enableDragItem(ItemTouchHelper),,com.chad.library.adapter.base.BaseQuickAdapter+setToggleViewId(int) com.chad.library.adapter.base.BaseQuickAdapter+setToggleViewId(int) com.chad.library.adapter.base.BaseQuickAdapter+setToggleDragOnLongPress(boolean) com.chad.library.adapter.base.BaseQuickAdapter+setToggleDragOnLongPress(boolean),com.chad.library.adapter.base.BaseQuickAdapter+itemDragEnabled com.chad.library.adapter.base.BaseQuickAdapter+mItemTouchHelper,583,13,1,"/** 
 * Enable drag items. Use the specified view as toggle.
 * @param itemTouchHelper {@link ItemTouchHelper}
 * @param toggleViewId    The toggle view's id.
 * @param dragOnLongPress If true the drag event will be trigger on long press, otherwise on touch down.
 */
","/**
     * Enable drag items. Use the specified view as toggle.
     *
     * @param itemTouchHelper {@link ItemTouchHelper}
     * @param toggleViewId    The toggle view's id.
     * @param dragOnLongPress If true the drag event will be trigger on long press, otherwise on touch down.
     */
    public void enableDragItem(@NonNull ItemTouchHelper itemTouchHelper, int toggleViewId, boolean dragOnLongPress) {
        itemDragEnabled = true;
        mItemTouchHelper = itemTouchHelper;
        setToggleViewId(toggleViewId);
        setToggleDragOnLongPress(dragOnLongPress);
    }",True
113,disableDragItem(),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter+itemDragEnabled com.chad.library.adapter.base.BaseQuickAdapter+mItemTouchHelper,146,7,1,"/** 
 * Disable drag items.
 */
","/**
     * Disable drag items.
     */
    public void disableDragItem() {
        itemDragEnabled = false;
        mItemTouchHelper = null;
    }",True
114,isItemDraggable(),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter+itemDragEnabled,72,3,1,,"public boolean isItemDraggable() {
        return itemDragEnabled;
    }",True
115,enableSwipeItem(),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter+itemSwipeEnabled,261,7,1,"/** 
 * <p>Enable swipe items.</p> You should attach  {@link ItemTouchHelper} which construct with {@link ItemDragAndSwipeCallback} to the Recycler when you enable this.
 */
","/**
     * <p>Enable swipe items.</p>
     * You should attach {@link ItemTouchHelper} which construct with {@link ItemDragAndSwipeCallback} to the Recycler when you enable this.
     */
    public void enableSwipeItem() {
        itemSwipeEnabled = true;
    }",True
116,disableSwipeItem(),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter+itemSwipeEnabled,72,3,1,,"public void disableSwipeItem() {
        itemSwipeEnabled = false;
    }",True
117,isItemSwipeEnable(),Method,,com.chad.library.adapter.base.callback.ItemDragAndSwipeCallback+isItemViewSwipeEnabled(),,com.chad.library.adapter.base.BaseQuickAdapter+itemSwipeEnabled,75,3,1,,"public boolean isItemSwipeEnable() {
        return itemSwipeEnabled;
    }",True
118,setOnItemDragListener(OnItemDragListener),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter+mOnItemDragListener,237,6,1,"/** 
 * @param onItemDragListener Register a callback to be invoked when drag event happen.
 */
","/**
     * @param onItemDragListener Register a callback to be invoked when drag event happen.
     */
    public void setOnItemDragListener(OnItemDragListener onItemDragListener) {
        mOnItemDragListener = onItemDragListener;
    }",True
119,getViewHolderPosition(RecyclerView.ViewHolder),Method,,,com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount() com.chad.library.adapter.base.BaseQuickAdapter+getHeaderViewsCount(),,148,3,1,,"public int getViewHolderPosition(RecyclerView.ViewHolder viewHolder) {
        return viewHolder.getAdapterPosition() - getHeaderViewsCount();
    }",True
120,onItemDragStart(RecyclerView.ViewHolder),Method,,,"com.chad.library.adapter.base.listener.OnItemDragListener+onItemDragStart(ViewHolder,int) com.chad.library.adapter.base.listener.OnItemDragListener+onItemDragStart(ViewHolder,int) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder)",com.chad.library.adapter.base.BaseQuickAdapter+mOnItemDragListener com.chad.library.adapter.base.BaseQuickAdapter+itemDragEnabled com.chad.library.adapter.base.BaseQuickAdapter+mOnItemDragListener,239,5,1,,"public void onItemDragStart(RecyclerView.ViewHolder viewHolder) {
        if (mOnItemDragListener != null && itemDragEnabled) {
            mOnItemDragListener.onItemDragStart(viewHolder, getViewHolderPosition(viewHolder));
        }
    }",True
121,"onItemDragMoving(RecyclerView.ViewHolder,RecyclerView.ViewHolder)",Method,,,"com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder) java.util.Collections+swap(List,int,int) java.util.Collections+swap(List,int,int) java.util.Collections+swap(List,int,int) java.util.Collections+swap(List,int,int) com.chad.library.adapter.base.listener.OnItemDragListener+onItemDragMoving(ViewHolder,int,ViewHolder,int) com.chad.library.adapter.base.listener.OnItemDragListener+onItemDragMoving(ViewHolder,int,ViewHolder,int)",com.chad.library.adapter.base.BaseQuickAdapter+mData com.chad.library.adapter.base.BaseQuickAdapter+mData com.chad.library.adapter.base.BaseQuickAdapter+mOnItemDragListener com.chad.library.adapter.base.BaseQuickAdapter+itemDragEnabled com.chad.library.adapter.base.BaseQuickAdapter+mOnItemDragListener,705,19,1,,"public void onItemDragMoving(RecyclerView.ViewHolder source, RecyclerView.ViewHolder target) {
        int from = getViewHolderPosition(source);
        int to = getViewHolderPosition(target);

        if (from < to) {
            for (int i = from; i < to; i++) {
                Collections.swap(mData, i, i + 1);
            }
        } else {
            for (int i = from; i > to; i--) {
                Collections.swap(mData, i, i - 1);
            }
        }
        notifyItemMoved(source.getAdapterPosition(), target.getAdapterPosition());

        if (mOnItemDragListener != null && itemDragEnabled) {
            mOnItemDragListener.onItemDragMoving(source, from, target, to);
        }
    }",True
122,onItemDragEnd(RecyclerView.ViewHolder),Method,,,"com.chad.library.adapter.base.listener.OnItemDragListener+onItemDragEnd(ViewHolder,int) com.chad.library.adapter.base.listener.OnItemDragListener+onItemDragEnd(ViewHolder,int) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder)",com.chad.library.adapter.base.BaseQuickAdapter+mOnItemDragListener com.chad.library.adapter.base.BaseQuickAdapter+itemDragEnabled com.chad.library.adapter.base.BaseQuickAdapter+mOnItemDragListener,235,5,1,,"public void onItemDragEnd(RecyclerView.ViewHolder viewHolder) {
        if (mOnItemDragListener != null && itemDragEnabled) {
            mOnItemDragListener.onItemDragEnd(viewHolder, getViewHolderPosition(viewHolder));
        }
    }",True
123,setOnItemSwipeListener(OnItemSwipeListener),Method,,,,com.chad.library.adapter.base.BaseQuickAdapter+mOnItemSwipeListener,113,3,1,,"public void setOnItemSwipeListener(OnItemSwipeListener listener) {
        mOnItemSwipeListener = listener;
    }",True
124,onItemSwipeStart(RecyclerView.ViewHolder),Method,,,"com.chad.library.adapter.base.listener.OnItemSwipeListener+onItemSwipeStart(ViewHolder,int) com.chad.library.adapter.base.listener.OnItemSwipeListener+onItemSwipeStart(ViewHolder,int) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder)",com.chad.library.adapter.base.BaseQuickAdapter+mOnItemSwipeListener com.chad.library.adapter.base.BaseQuickAdapter+itemSwipeEnabled com.chad.library.adapter.base.BaseQuickAdapter+mOnItemSwipeListener,244,5,1,,"public void onItemSwipeStart(RecyclerView.ViewHolder viewHolder) {
        if (mOnItemSwipeListener != null && itemSwipeEnabled) {
            mOnItemSwipeListener.onItemSwipeStart(viewHolder, getViewHolderPosition(viewHolder));
        }
    }",True
125,onItemSwipeClear(RecyclerView.ViewHolder),Method,,,"com.chad.library.adapter.base.listener.OnItemSwipeListener+clearView(ViewHolder,int) com.chad.library.adapter.base.listener.OnItemSwipeListener+clearView(ViewHolder,int) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder)",com.chad.library.adapter.base.BaseQuickAdapter+mOnItemSwipeListener com.chad.library.adapter.base.BaseQuickAdapter+itemSwipeEnabled com.chad.library.adapter.base.BaseQuickAdapter+mOnItemSwipeListener,237,5,1,,"public void onItemSwipeClear(RecyclerView.ViewHolder viewHolder) {
        if (mOnItemSwipeListener != null && itemSwipeEnabled) {
            mOnItemSwipeListener.clearView(viewHolder, getViewHolderPosition(viewHolder));
        }
    }",True
126,onItemSwiped(RecyclerView.ViewHolder),Method,,,"com.chad.library.adapter.base.listener.OnItemSwipeListener+onItemSwiped(ViewHolder,int) com.chad.library.adapter.base.listener.OnItemSwipeListener+onItemSwiped(ViewHolder,int) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder) com.chad.library.adapter.base.BaseQuickAdapter+getViewHolderPosition(ViewHolder) java.util.List+remove(int) java.util.List+remove(int)",com.chad.library.adapter.base.BaseQuickAdapter+mOnItemSwipeListener com.chad.library.adapter.base.BaseQuickAdapter+itemSwipeEnabled com.chad.library.adapter.base.BaseQuickAdapter+mOnItemSwipeListener com.chad.library.adapter.base.BaseQuickAdapter+mData,378,10,1,,"public void onItemSwiped(RecyclerView.ViewHolder viewHolder) {
        if (mOnItemSwipeListener != null && itemSwipeEnabled) {
            mOnItemSwipeListener.onItemSwiped(viewHolder, getViewHolderPosition(viewHolder));
        }

        int pos = getViewHolderPosition(viewHolder);

        mData.remove(pos);
        notifyItemRemoved(viewHolder.getAdapterPosition());
    }",True
127,"onItemSwiping(Canvas,RecyclerView.ViewHolder,float,float,boolean)",Method,,,"com.chad.library.adapter.base.listener.OnItemSwipeListener+onItemSwipeMoving(Canvas,ViewHolder,float,float,boolean) com.chad.library.adapter.base.listener.OnItemSwipeListener+onItemSwipeMoving(Canvas,ViewHolder,float,float,boolean)",com.chad.library.adapter.base.BaseQuickAdapter+mOnItemSwipeListener com.chad.library.adapter.base.BaseQuickAdapter+itemSwipeEnabled com.chad.library.adapter.base.BaseQuickAdapter+mOnItemSwipeListener,304,5,1,,"public void onItemSwiping(Canvas canvas, RecyclerView.ViewHolder viewHolder, float dX, float dY, boolean isCurrentlyActive) {
        if (mOnItemSwipeListener != null && itemSwipeEnabled) {
            mOnItemSwipeListener.onItemSwipeMoving(canvas, viewHolder, dX, dY, isCurrentlyActive);
        }
    }",True
