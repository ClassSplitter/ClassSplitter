index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,log,Field,,,,,69,1,26,,private static final Logger log = LoggingManager.getLoggerForClass();,False
2,PRESERVE,Field,,,,,42,1,24,,"final static String PRESERVE = ""preserve"";",False
3,XML_SPACE,Field,,,,,44,1,24,,"final static String XML_SPACE = ""xml:space"";",False
4,ASSERTION_RESULT_TAG_NAME,Field,,,,,74,1,26,,"private static final String ASSERTION_RESULT_TAG_NAME = ""assertionResult"";",False
5,BINARY,Field,,,,,46,1,26,,"private static final String BINARY = ""binary"";",False
6,DATA_TYPE,Field,,,,,51,1,26,,"private static final String DATA_TYPE = ""dataType"";",False
7,ERROR,Field,,,,,44,1,26,,"private static final String ERROR = ""error"";",False
8,FAILURE,Field,,,,,48,1,26,,"private static final String FAILURE = ""failure"";",False
9,FAILURE_MESSAGE,Field,,,,,63,1,26,,"private static final String FAILURE_MESSAGE = ""failureMessage"";",False
10,LABEL,Field,,,,,44,1,26,,"private static final String LABEL = ""label"";",False
11,RESPONSE_CODE,Field,,,,,59,1,26,,"private static final String RESPONSE_CODE = ""responseCode"";",False
12,RESPONSE_MESSAGE,Field,,,,,65,1,26,,"private static final String RESPONSE_MESSAGE = ""responseMessage"";",False
13,SAMPLE_RESULT_TAG_NAME,Field,,,,,68,1,26,,"private static final String SAMPLE_RESULT_TAG_NAME = ""sampleResult"";",False
14,SUCCESSFUL,Field,,,,,51,1,26,,"private static final String SUCCESSFUL = ""success"";",False
15,THREAD_NAME,Field,,,,,55,1,26,,"private static final String THREAD_NAME = ""threadName"";",False
16,TIME,Field,,,,,42,1,26,,"private static final String TIME = ""time"";",False
17,TIME_STAMP,Field,,,,,53,1,26,,"private static final String TIME_STAMP = ""timeStamp"";",False
18,CSV_ELAPSED,Field,,,,,52,1,26,,"private static final String CSV_ELAPSED = ""elapsed"";",True
19,CSV_BYTES,Field,,,,,47,1,26,,"private static final String CSV_BYTES= ""bytes"";",True
20,CSV_THREAD_COUNT1,Field,,,,,61,1,26,,"private static final String CSV_THREAD_COUNT1 = ""grpThreads"";",True
21,CSV_THREAD_COUNT2,Field,,,,,61,1,26,,"private static final String CSV_THREAD_COUNT2 = ""allThreads"";",True
22,CSV_SAMPLE_COUNT,Field,,,,,61,1,26,,"private static final String CSV_SAMPLE_COUNT = ""SampleCount"";",True
23,CSV_ERROR_COUNT,Field,,,,,59,1,26,,"private static final String CSV_ERROR_COUNT = ""ErrorCount"";",True
24,CSV_URL,Field,,,,,44,1,26,,"private static final String CSV_URL = ""URL"";",True
25,CSV_FILENAME,Field,,,,,54,1,26,,"private static final String CSV_FILENAME = ""Filename"";",True
26,CSV_LATENCY,Field,,,,,52,1,26,,"private static final String CSV_LATENCY = ""Latency"";",True
27,CSV_ENCODING,Field,,,,,54,1,26,,"private static final String CSV_ENCODING = ""Encoding"";",True
28,CSV_HOSTNAME,Field,,,,,54,1,26,,"private static final String CSV_HOSTNAME = ""Hostname"";",True
29,_saveConfig,Field,,,,,98,1,26,,static private final SampleSaveConfiguration _saveConfig = SampleSaveConfiguration.staticConfig();,True
30,DEFAULT_DATE_FORMAT_STRING,Field,,,,,77,1,26,,"private static final String DEFAULT_DATE_FORMAT_STRING = ""MM/dd/yy HH:mm:ss"";",True
31,DEFAULT_DATE_FORMAT,Field,,,,,103,1,26,,private static final DateFormat DEFAULT_DATE_FORMAT = new SimpleDateFormat(DEFAULT_DATE_FORMAT_STRING);,True
32,builder,Field,,,,,87,1,10,,private static DefaultConfigurationBuilder builder = new DefaultConfigurationBuilder();,False
33,OldSaveService(),Method,,,,,89,5,2,"/** 
 * Private constructor to prevent instantiation.
 */
","/**
	 * Private constructor to prevent instantiation.
	 */
	private OldSaveService() {
	}",False
34,"makeResultFromDelimitedString(String,SampleSaveConfiguration,long)",Method,,org.apache.jmeter.reporters.ResultCollector+loadExistingFile(),"java.lang.String+split(String) java.lang.String+split(String) org.apache.jmeter.samplers.SampleSaveConfiguration+getDelimiter() org.apache.jmeter.samplers.SampleSaveConfiguration+getDelimiter() org.apache.jmeter.samplers.SampleSaveConfiguration+saveTimestamp() org.apache.jmeter.samplers.SampleSaveConfiguration+saveTimestamp() org.apache.jmeter.samplers.SampleSaveConfiguration+printMilliseconds() org.apache.jmeter.samplers.SampleSaveConfiguration+printMilliseconds() java.lang.Long+parseLong(String) java.lang.Long+parseLong(String) java.lang.Throwable+toString() java.lang.Throwable+toString() java.text.DateFormat+parse(String) java.text.DateFormat+parse(String) java.util.Date+getTime() java.util.Date+getTime() org.apache.jmeter.samplers.SampleSaveConfiguration+setFormatter(DateFormat) org.apache.jmeter.samplers.SampleSaveConfiguration+setFormatter(DateFormat) org.apache.jmeter.samplers.SampleSaveConfiguration+formatter() org.apache.jmeter.samplers.SampleSaveConfiguration+formatter() java.text.DateFormat+parse(String) org.apache.jmeter.samplers.SampleSaveConfiguration+formatter() org.apache.jmeter.samplers.SampleSaveConfiguration+formatter() java.text.DateFormat+parse(String) java.util.Date+getTime() java.util.Date+getTime() org.apache.jorphan.util.JMeterError+JMeterError(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveTime() org.apache.jmeter.samplers.SampleSaveConfiguration+saveTime() java.lang.Long+parseLong(String) java.lang.Long+parseLong(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveSampleCount() org.apache.jmeter.samplers.SampleSaveConfiguration+saveSampleCount() org.apache.jmeter.samplers.StatisticalSampleResult+StatisticalSampleResult(long,long) org.apache.jmeter.samplers.SampleResult+SampleResult(long,long) org.apache.jmeter.samplers.SampleSaveConfiguration+saveLabel() org.apache.jmeter.samplers.SampleSaveConfiguration+saveLabel() org.apache.jmeter.samplers.SampleResult+setSampleLabel(String) org.apache.jmeter.samplers.SampleResult+setSampleLabel(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveCode() org.apache.jmeter.samplers.SampleSaveConfiguration+saveCode() org.apache.jmeter.samplers.SampleResult+setResponseCode(String) org.apache.jmeter.samplers.SampleResult+setResponseCode(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveMessage() org.apache.jmeter.samplers.SampleSaveConfiguration+saveMessage() org.apache.jmeter.samplers.SampleResult+setResponseMessage(String) org.apache.jmeter.samplers.SampleResult+setResponseMessage(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadName() org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadName() org.apache.jmeter.samplers.SampleResult+setThreadName(String) org.apache.jmeter.samplers.SampleResult+setThreadName(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveDataType() org.apache.jmeter.samplers.SampleSaveConfiguration+saveDataType() org.apache.jmeter.samplers.SampleResult+setDataType(String) org.apache.jmeter.samplers.SampleResult+setDataType(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveSuccess() org.apache.jmeter.samplers.SampleSaveConfiguration+saveSuccess() org.apache.jmeter.samplers.SampleResult+setSuccessful(boolean) org.apache.jmeter.samplers.SampleResult+setSuccessful(boolean) java.lang.Boolean+booleanValue() java.lang.Boolean+valueOf(String) java.lang.Boolean+valueOf(String) java.lang.Boolean+booleanValue() org.apache.jmeter.samplers.SampleSaveConfiguration+saveAssertionResultsFailureMessage() org.apache.jmeter.samplers.SampleSaveConfiguration+saveAssertionResultsFailureMessage() org.apache.jmeter.samplers.SampleSaveConfiguration+saveBytes() org.apache.jmeter.samplers.SampleSaveConfiguration+saveBytes() org.apache.jmeter.samplers.SampleResult+setBytes(int) org.apache.jmeter.samplers.SampleResult+setBytes(int) java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadCounts() org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadCounts() org.apache.jmeter.samplers.SampleResult+setGroupThreads(int) org.apache.jmeter.samplers.SampleResult+setGroupThreads(int) java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String) org.apache.jmeter.samplers.SampleResult+setAllThreads(int) org.apache.jmeter.samplers.SampleResult+setAllThreads(int) java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveUrl() org.apache.jmeter.samplers.SampleSaveConfiguration+saveUrl() org.apache.jmeter.samplers.SampleSaveConfiguration+saveFileName() org.apache.jmeter.samplers.SampleSaveConfiguration+saveFileName() org.apache.jmeter.samplers.SampleResult+setResultFileName(String) org.apache.jmeter.samplers.SampleResult+setResultFileName(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveLatency() org.apache.jmeter.samplers.SampleSaveConfiguration+saveLatency() org.apache.jmeter.samplers.SampleResult+setLatency(long) org.apache.jmeter.samplers.SampleResult+setLatency(long) java.lang.Long+parseLong(String) java.lang.Long+parseLong(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveEncoding() org.apache.jmeter.samplers.SampleSaveConfiguration+saveEncoding() org.apache.jmeter.samplers.SampleResult+setEncodingAndType(String) org.apache.jmeter.samplers.SampleResult+setEncodingAndType(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveSampleCount() org.apache.jmeter.samplers.SampleSaveConfiguration+saveSampleCount() org.apache.jmeter.samplers.SampleResult+setSampleCount(int) org.apache.jmeter.samplers.SampleResult+setSampleCount(int) java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String) org.apache.jmeter.samplers.SampleResult+setErrorCount(int) org.apache.jmeter.samplers.SampleResult+setErrorCount(int) java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveHostname() org.apache.jmeter.samplers.SampleSaveConfiguration+saveHostname() org.apache.jorphan.util.JMeterError+JMeterError(Throwable) org.apache.jorphan.util.JMeterError+JMeterError(Throwable) org.apache.jorphan.util.JMeterError+JMeterError(Throwable) org.apache.jmeter.samplers.SampleEvent+SampleEvent(SampleResult,String,String)",org.apache.jmeter.save.OldSaveService+TIME_STAMP org.apache.jmeter.save.OldSaveService+log org.apache.jmeter.save.OldSaveService+DEFAULT_DATE_FORMAT org.apache.jmeter.save.OldSaveService+log org.apache.jmeter.save.OldSaveService+DEFAULT_DATE_FORMAT_STRING org.apache.jmeter.save.OldSaveService+DEFAULT_DATE_FORMAT org.apache.jmeter.save.OldSaveService+log org.apache.jmeter.save.OldSaveService+CSV_ELAPSED org.apache.jmeter.save.OldSaveService+LABEL org.apache.jmeter.save.OldSaveService+RESPONSE_CODE org.apache.jmeter.save.OldSaveService+RESPONSE_MESSAGE org.apache.jmeter.save.OldSaveService+THREAD_NAME org.apache.jmeter.save.OldSaveService+DATA_TYPE org.apache.jmeter.save.OldSaveService+SUCCESSFUL org.apache.jmeter.save.OldSaveService+CSV_BYTES org.apache.jmeter.save.OldSaveService+CSV_THREAD_COUNT1 org.apache.jmeter.save.OldSaveService+CSV_THREAD_COUNT2 org.apache.jmeter.save.OldSaveService+CSV_FILENAME org.apache.jmeter.save.OldSaveService+CSV_LATENCY org.apache.jmeter.save.OldSaveService+CSV_ENCODING org.apache.jmeter.save.OldSaveService+CSV_SAMPLE_COUNT org.apache.jmeter.save.OldSaveService+CSV_ERROR_COUNT org.apache.jmeter.save.OldSaveService+CSV_HOSTNAME org.apache.jmeter.save.OldSaveService+log org.apache.jmeter.save.OldSaveService+log org.apache.jmeter.save.OldSaveService+log,5190,169,9,"/** 
 * Make a SampleResult given a delimited string.
 * @param inputLine - line from CSV file
 * @param saveConfig - configuration
 * @param lineNumber - line number for error reporting
 * @return SampleResult or null if header line detected
 * @throws JMeterError
 */
","/**
     * Make a SampleResult given a delimited string.
     * 
     * @param inputLine - line from CSV file
     * @param saveConfig - configuration
     * @param lineNumber - line number for error reporting
     * @return SampleResult or null if header line detected
     * 
     * @throws JMeterError
     */
    public static SampleEvent makeResultFromDelimitedString(
    		final String inputLine, 
    		final SampleSaveConfiguration saveConfig, // may be updated
    		final long lineNumber) {
 
    	SampleResult result = null;
        String hostname = """";// $NON-NLS-1$
		long timeStamp = 0;
		long elapsed = 0;
		/*
		 * Bug 40772: replaced StringTokenizer with String.split(), as the
		 * former does not return empty tokens.
		 */
		// The \Q prefix is needed to ensure that meta-characters (e.g. ""."") work.
		String parts[]=inputLine.split(""\\Q""+saveConfig.getDelimiter());// $NON-NLS-1$
		String text = null;
		String field = null; // Save the name for error reporting
		int i=0;

		try {
			if (saveConfig.saveTimestamp()){
				field = TIME_STAMP;
				text = parts[i++];
				if (saveConfig.printMilliseconds()) {
					try {
						timeStamp = Long.parseLong(text);
					} catch (NumberFormatException e) {// see if this works
						log.warn(e.toString());
						Date stamp = DEFAULT_DATE_FORMAT.parse(text);
						timeStamp = stamp.getTime();
						log.warn(""Setting date format to: ""+DEFAULT_DATE_FORMAT_STRING);
						saveConfig.setFormatter(DEFAULT_DATE_FORMAT);
					}
				} else if (saveConfig.formatter() != null) {
					Date stamp = saveConfig.formatter().parse(text);
					timeStamp = stamp.getTime();
				} else { // can this happen?
					final String msg = ""Unknown timestamp format"";
					log.warn(msg);
					throw new JMeterError(msg);
				}
			}

			if (saveConfig.saveTime()) {
				field = CSV_ELAPSED;
				text = parts[i++];
				elapsed = Long.parseLong(text);
			}

			if (saveConfig.saveSampleCount()) {
				result = new StatisticalSampleResult(timeStamp, elapsed);
			} else {
				result = new SampleResult(timeStamp, elapsed);
			}

			if (saveConfig.saveLabel()) {
				field = LABEL;
				text = parts[i++];
				result.setSampleLabel(text);
			}
			if (saveConfig.saveCode()) {
				field = RESPONSE_CODE;
				text = parts[i++];
				result.setResponseCode(text);
			}

			if (saveConfig.saveMessage()) {
				field = RESPONSE_MESSAGE;
				text = parts[i++];
				result.setResponseMessage(text);
			}

			if (saveConfig.saveThreadName()) {
				field = THREAD_NAME;
				text = parts[i++];
				result.setThreadName(text);
			}

			if (saveConfig.saveDataType()) {
				field = DATA_TYPE;
				text = parts[i++];
				result.setDataType(text);
			}

			if (saveConfig.saveSuccess()) {
				field = SUCCESSFUL;
				text = parts[i++];
				result.setSuccessful(Boolean.valueOf(text).booleanValue());
			}

			if (saveConfig.saveAssertionResultsFailureMessage()) {
				i++;
                // TODO - should this be restored?
			}
            
            if (saveConfig.saveBytes()) {
            	field = CSV_BYTES;
                text = parts[i++];
                result.setBytes(Integer.parseInt(text));
            }
        
            if (saveConfig.saveThreadCounts()) {
            	field = CSV_THREAD_COUNT1;
                text = parts[i++];
                result.setGroupThreads(Integer.parseInt(text));
                
            	field = CSV_THREAD_COUNT2;
                text = parts[i++];
                result.setAllThreads(Integer.parseInt(text));
            }

            if (saveConfig.saveUrl()) {
                i++;
                // TODO: should this be restored?
            }
        
            if (saveConfig.saveFileName()) {
            	field = CSV_FILENAME;
                text = parts[i++];
                result.setResultFileName(text);
            }            
            if (saveConfig.saveLatency()) {
            	field = CSV_LATENCY;
                text = parts[i++];
                result.setLatency(Long.parseLong(text));
            }

            if (saveConfig.saveEncoding()) {
            	field = CSV_ENCODING;
                text = parts[i++];
                result.setEncodingAndType(text);
            }

            if (saveConfig.saveSampleCount()) {
            	field = CSV_SAMPLE_COUNT;
                text = parts[i++];
                result.setSampleCount(Integer.parseInt(text));
            	field = CSV_ERROR_COUNT;
                text = parts[i++];
                result.setErrorCount(Integer.parseInt(text));
            }

            if (saveConfig.saveHostname()) {
            	field = CSV_HOSTNAME;
                hostname = parts[i++];
            }
            
		} catch (NumberFormatException e) {
			log.warn(""Error parsing field '"" + field + ""' at line "" + lineNumber + "" "" + e);
			throw new JMeterError(e);
		} catch (ParseException e) {
			log.warn(""Error parsing field '"" + field + ""' at line "" + lineNumber + "" "" + e);
			throw new JMeterError(e);
		} catch (ArrayIndexOutOfBoundsException e){
			log.warn(""Insufficient columns to parse field '"" + field + ""' at line "" + lineNumber);
			throw new JMeterError(e);
		}
		return new SampleEvent(result,"""",hostname);
	}",True
35,printableFieldNamesToString(),Method,,,org.apache.jmeter.save.OldSaveService+printableFieldNamesToString(SampleSaveConfiguration) org.apache.jmeter.save.OldSaveService+printableFieldNamesToString(SampleSaveConfiguration),org.apache.jmeter.save.OldSaveService+_saveConfig,235,8,9,"/** 
 * Generates the field names for the output file
 * @return the field names as a string
 */
","/**
     * Generates the field names for the output file
     * 
     * @return the field names as a string
     */
    public static String printableFieldNamesToString() {
        return printableFieldNamesToString(_saveConfig);
    }",True
36,printableFieldNamesToString(SampleSaveConfiguration),Method,printableFieldNamesToString(),"org.apache.jmeter.reporters.ResultCollector+writeFileStart(PrintWriter,SampleSaveConfiguration)","java.lang.StringBuffer+StringBuffer() org.apache.jmeter.samplers.SampleSaveConfiguration+getDelimiter() org.apache.jmeter.samplers.SampleSaveConfiguration+getDelimiter() org.apache.jmeter.samplers.SampleSaveConfiguration+saveTimestamp() org.apache.jmeter.samplers.SampleSaveConfiguration+saveTimestamp() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveTime() org.apache.jmeter.samplers.SampleSaveConfiguration+saveTime() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveLabel() org.apache.jmeter.samplers.SampleSaveConfiguration+saveLabel() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveCode() org.apache.jmeter.samplers.SampleSaveConfiguration+saveCode() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveMessage() org.apache.jmeter.samplers.SampleSaveConfiguration+saveMessage() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadName() org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadName() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveDataType() org.apache.jmeter.samplers.SampleSaveConfiguration+saveDataType() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveSuccess() org.apache.jmeter.samplers.SampleSaveConfiguration+saveSuccess() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveAssertionResultsFailureMessage() org.apache.jmeter.samplers.SampleSaveConfiguration+saveAssertionResultsFailureMessage() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveBytes() org.apache.jmeter.samplers.SampleSaveConfiguration+saveBytes() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadCounts() org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadCounts() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveUrl() org.apache.jmeter.samplers.SampleSaveConfiguration+saveUrl() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveFileName() org.apache.jmeter.samplers.SampleSaveConfiguration+saveFileName() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveLatency() org.apache.jmeter.samplers.SampleSaveConfiguration+saveLatency() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveEncoding() org.apache.jmeter.samplers.SampleSaveConfiguration+saveEncoding() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveSampleCount() org.apache.jmeter.samplers.SampleSaveConfiguration+saveSampleCount() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveHostname() org.apache.jmeter.samplers.SampleSaveConfiguration+saveHostname() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+length() java.lang.StringBuffer+length() java.lang.String+length() java.lang.String+length() java.lang.StringBuffer+substring(int,int) java.lang.StringBuffer+substring(int,int) java.lang.StringBuffer+toString() java.lang.StringBuffer+toString()",org.apache.jmeter.save.OldSaveService+TIME_STAMP org.apache.jmeter.save.OldSaveService+CSV_ELAPSED org.apache.jmeter.save.OldSaveService+LABEL org.apache.jmeter.save.OldSaveService+RESPONSE_CODE org.apache.jmeter.save.OldSaveService+RESPONSE_MESSAGE org.apache.jmeter.save.OldSaveService+THREAD_NAME org.apache.jmeter.save.OldSaveService+DATA_TYPE org.apache.jmeter.save.OldSaveService+SUCCESSFUL org.apache.jmeter.save.OldSaveService+FAILURE_MESSAGE org.apache.jmeter.save.OldSaveService+CSV_BYTES org.apache.jmeter.save.OldSaveService+CSV_THREAD_COUNT1 org.apache.jmeter.save.OldSaveService+CSV_THREAD_COUNT2 org.apache.jmeter.save.OldSaveService+CSV_URL org.apache.jmeter.save.OldSaveService+CSV_FILENAME org.apache.jmeter.save.OldSaveService+CSV_LATENCY org.apache.jmeter.save.OldSaveService+CSV_ENCODING org.apache.jmeter.save.OldSaveService+CSV_SAMPLE_COUNT org.apache.jmeter.save.OldSaveService+CSV_ERROR_COUNT org.apache.jmeter.save.OldSaveService+CSV_HOSTNAME,2492,110,9,"/** 
 * Generates the field names for the output file
 * @return the field names as a string
 */
","/**
	 * Generates the field names for the output file
	 * 
	 * @return the field names as a string
	 */
	public static String printableFieldNamesToString(SampleSaveConfiguration saveConfig) {
		StringBuffer text = new StringBuffer();
		String delim = saveConfig.getDelimiter();

		if (saveConfig.saveTimestamp()) {
			text.append(TIME_STAMP);
			text.append(delim);
		}

		if (saveConfig.saveTime()) {
			text.append(CSV_ELAPSED);
			text.append(delim);
		}

		if (saveConfig.saveLabel()) {
			text.append(LABEL);
			text.append(delim);
		}

		if (saveConfig.saveCode()) {
			text.append(RESPONSE_CODE);
			text.append(delim);
		}

		if (saveConfig.saveMessage()) {
			text.append(RESPONSE_MESSAGE);
			text.append(delim);
		}

		if (saveConfig.saveThreadName()) {
			text.append(THREAD_NAME);
			text.append(delim);
		}

		if (saveConfig.saveDataType()) {
			text.append(DATA_TYPE);
			text.append(delim);
		}

		if (saveConfig.saveSuccess()) {
			text.append(SUCCESSFUL);
			text.append(delim);
		}

		if (saveConfig.saveAssertionResultsFailureMessage()) {
			text.append(FAILURE_MESSAGE);
			text.append(delim);
		}

        if (saveConfig.saveBytes()) {
            text.append(CSV_BYTES);
            text.append(delim);
        }

        if (saveConfig.saveThreadCounts()) {
            text.append(CSV_THREAD_COUNT1);
            text.append(delim);
            text.append(CSV_THREAD_COUNT2);
            text.append(delim);
        }

        if (saveConfig.saveUrl()) {
            text.append(CSV_URL);
            text.append(delim);
        }

        if (saveConfig.saveFileName()) {
            text.append(CSV_FILENAME);
            text.append(delim);
        }

        if (saveConfig.saveLatency()) {
            text.append(CSV_LATENCY);
            text.append(delim);
        }

        if (saveConfig.saveEncoding()) {
            text.append(CSV_ENCODING);
            text.append(delim);
        }

		if (saveConfig.saveSampleCount()) {
			text.append(CSV_SAMPLE_COUNT);
			text.append(delim);
			text.append(CSV_ERROR_COUNT);
			text.append(delim);
		}

        if (saveConfig.saveHostname()) {
            text.append(CSV_HOSTNAME);
            text.append(delim);
        }

        String resultString = null;
		int size = text.length();
		int delSize = delim.length();

		// Strip off the trailing delimiter
		if (size >= delSize) {
			resultString = text.substring(0, size - delSize);
		} else {
			resultString = text.toString();
		}
		return resultString;
	}",True
37,headerLabelMethods,Field,,,,,68,1,26,,private static final LinkedMap headerLabelMethods = new LinkedMap();,True
38,"getSampleSaveConfiguration(String,String)",Method,,org.apache.jmeter.reporters.ResultCollector+loadExistingFile(),"org.apache.jmeter.save.OldSaveService+splitHeader(String,String) org.apache.jmeter.save.OldSaveService+splitHeader(String,String) org.apache.jmeter.samplers.SampleSaveConfiguration+getDelimiter() org.apache.jmeter.samplers.SampleSaveConfiguration+getDelimiter() org.apache.jmeter.util.JMeterUtils+getMatcher() org.apache.jmeter.util.JMeterUtils+getMatcher() org.apache.jmeter.util.JMeterUtils+getPatternCache() org.apache.jmeter.util.JMeterUtils+getPatternCache() org.apache.jmeter.save.OldSaveService+splitHeader(String,String) org.apache.jmeter.save.OldSaveService+splitHeader(String,String) org.apache.jmeter.samplers.SampleSaveConfiguration+SampleSaveConfiguration(boolean) org.apache.jorphan.reflect.Functor+invoke(Object,Object[]) org.apache.jorphan.reflect.Functor+invoke(Object,Object[]) org.apache.jmeter.samplers.SampleSaveConfiguration+getDelimiter() org.apache.jmeter.samplers.SampleSaveConfiguration+getDelimiter() org.apache.jmeter.samplers.SampleSaveConfiguration+setDelimiter(String) org.apache.jmeter.samplers.SampleSaveConfiguration+setDelimiter(String)",org.apache.jmeter.save.OldSaveService+_saveConfig org.apache.jmeter.save.OldSaveService+headerLabelMethods java.lang.Boolean+TRUE org.apache.jmeter.save.OldSaveService+log org.apache.jmeter.save.OldSaveService+_saveConfig,1724,45,9,"/** 
 * Parse a CSV header line
 * @param headerLine from CSV file
 * @param filename name of file (for log message only)
 * @return config corresponding to the header items found or null if not a header line
 */
","/**
	 * Parse a CSV header line
	 * @param headerLine from CSV file
	 * @param filename name of file (for log message only)
	 * @return config corresponding to the header items found or null if not a header line
	 */
	public static SampleSaveConfiguration getSampleSaveConfiguration(String headerLine, String filename){
		String[] parts = splitHeader(headerLine,_saveConfig.getDelimiter()); // Try default delimiter

		String delim = null;
		
		if (parts == null){
			Perl5Matcher matcher = JMeterUtils.getMatcher();
			PatternMatcherInput input = new PatternMatcherInput(headerLine);
			Pattern pattern = JMeterUtils.getPatternCache()
			// This assumes the header names are all single words with no spaces
			// word followed by 0 or more repeats of (non-word char + word)
			// where the non-word char (\2) is the same
			// e.g.  abc|def|ghi but not abd|def~ghi
			        .getPattern(""\\w+((\\W)\\w+)?(\\2\\w+)*"", // $NON-NLS-1$
					Perl5Compiler.READ_ONLY_MASK);
			if (matcher.matches(input, pattern)) {
				delim = matcher.getMatch().group(2);
				parts = splitHeader(headerLine,delim);// now validate the result
			}
		}
		
		if (parts == null) {
			return null; // failed to recognise the header
		}
		
		// We know the column names all exist, so create the config 
		SampleSaveConfiguration saveConfig=new SampleSaveConfiguration(false);
		
		for(int i=0;i<parts.length;i++){
			Functor set = (Functor) headerLabelMethods.get(parts[i]);
			set.invoke(saveConfig,new Boolean[]{Boolean.TRUE});
		}

		if (delim != null){
			log.warn(""Default delimiter '""+_saveConfig.getDelimiter()+""' did not work; using alternate '""+delim+""' for reading ""+filename);
			saveConfig.setDelimiter(delim);
		}
		return saveConfig;
	}",True
39,"splitHeader(String,String)",Method,"getSampleSaveConfiguration(String,String) getSampleSaveConfiguration(String,String)",,java.lang.String+split(String) java.lang.String+split(String),org.apache.jmeter.save.OldSaveService+headerLabelMethods org.apache.jmeter.save.OldSaveService+log,573,18,10,,"private static String[] splitHeader(String headerLine, String delim) {
		String parts[]=headerLine.split(""\\Q""+delim);// $NON-NLS-1$
		int previous = -1;
		// Check if the line is a header
		for(int i=0;i<parts.length;i++){
			final String label = parts[i];
			int current = headerLabelMethods.indexOf(label);
			if (current == -1){
				return null; // unknown column name
			}
			if (current <= previous){
				log.warn(""Column header number ""+(i+1)+"" name ""+ label + "" is out of order."");
				return null; // out of order
			}
			previous = current;
		}
		return parts;
	}",True
40,"saveCSVStats(Vector,FileWriter)",Method,,org.apache.jmeter.visualizers.StatGraphVisualizer+actionPerformed(ActionEvent),java.util.Vector+size() java.util.Vector+size() java.util.Vector+elementAt(int) java.util.Vector+elementAt(int) java.util.Vector+size() java.util.Vector+size() java.io.Writer+write(String) java.io.Writer+write(String) java.util.Vector+elementAt(int) java.util.Vector+elementAt(int) java.io.Writer+write(String) java.io.Writer+write(String) java.lang.String+valueOf(Object) java.lang.String+valueOf(Object) java.io.Writer+write(String) java.io.Writer+write(String) java.lang.System+getProperty(String) java.lang.System+getProperty(String),,908,22,9,"/** 
 * Method will save aggregate statistics as CSV. For now I put it here. Not sure if it should go in the newer SaveService instead of here. if we ever decide to get rid of this class, we'll need to move this method to the new save service.
 * @param data
 * @param writer
 * @throws IOException
 */
","/**
     * Method will save aggregate statistics as CSV. For now I put it here.
     * Not sure if it should go in the newer SaveService instead of here.
     * if we ever decide to get rid of this class, we'll need to move this
     * method to the new save service.
     * @param data
     * @param writer
     * @throws IOException
     */
    public static void saveCSVStats(Vector data, FileWriter writer) throws IOException {
        for (int idx=0; idx < data.size(); idx++) {
            Vector row = (Vector)data.elementAt(idx);
            for (int idy=0; idy < row.size(); idy++) {
                if (idy > 0) {
                    writer.write("",""); // $NON-NLS-1$
                }
                Object item = row.elementAt(idy);
                writer.write( String.valueOf(item) );
            }
            writer.write(System.getProperty(""line.separator"")); // $NON-NLS-1$
        }
    }",True
41,resultToDelimitedString(SampleEvent),Method,,org.apache.jmeter.reporters.ResultCollector+sampleOccurred(SampleEvent),"org.apache.jmeter.save.OldSaveService+resultToDelimitedString(SampleEvent,String) org.apache.jmeter.save.OldSaveService+resultToDelimitedString(SampleEvent,String) org.apache.jmeter.samplers.SampleSaveConfiguration+getDelimiter() org.apache.jmeter.samplers.SampleResult+getSaveConfig() org.apache.jmeter.samplers.SampleEvent+getResult() org.apache.jmeter.samplers.SampleEvent+getResult() org.apache.jmeter.samplers.SampleResult+getSaveConfig() org.apache.jmeter.samplers.SampleSaveConfiguration+getDelimiter()",,441,11,9,"/** 
 * Convert a result into a string, where the fields of the result are separated by the default delimiter.
 * @param event the sample event to be converted
 * @return the separated value representation of the result
 */
","/**
     * Convert a result into a string, where the fields of the result are
     * separated by the default delimiter.
     * 
     * @param event
     *            the sample event to be converted
     * @return the separated value representation of the result
     */
    public static String resultToDelimitedString(SampleEvent event) {
    	return resultToDelimitedString(event, event.getResult().getSaveConfig().getDelimiter());
    }",True
42,"resultToDelimitedString(SampleEvent,String)",Method,resultToDelimitedString(SampleEvent),,"java.lang.StringBuffer+StringBuffer() org.apache.jmeter.samplers.SampleEvent+getResult() org.apache.jmeter.samplers.SampleEvent+getResult() org.apache.jmeter.samplers.SampleResult+getSaveConfig() org.apache.jmeter.samplers.SampleResult+getSaveConfig() org.apache.jmeter.samplers.SampleSaveConfiguration+saveTimestamp() org.apache.jmeter.samplers.SampleSaveConfiguration+saveTimestamp() org.apache.jmeter.samplers.SampleSaveConfiguration+printMilliseconds() org.apache.jmeter.samplers.SampleSaveConfiguration+printMilliseconds() java.lang.StringBuffer+append(long) java.lang.StringBuffer+append(long) org.apache.jmeter.samplers.SampleResult+getTimeStamp() org.apache.jmeter.samplers.SampleResult+getTimeStamp() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+formatter() org.apache.jmeter.samplers.SampleSaveConfiguration+formatter() java.text.DateFormat+format(Date) org.apache.jmeter.samplers.SampleSaveConfiguration+formatter() org.apache.jmeter.samplers.SampleSaveConfiguration+formatter() java.text.DateFormat+format(Date) java.util.Date+Date(long) org.apache.jmeter.samplers.SampleResult+getTimeStamp() org.apache.jmeter.samplers.SampleResult+getTimeStamp() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveTime() org.apache.jmeter.samplers.SampleSaveConfiguration+saveTime() java.lang.StringBuffer+append(long) java.lang.StringBuffer+append(long) org.apache.jmeter.samplers.SampleResult+getTime() org.apache.jmeter.samplers.SampleResult+getTime() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveLabel() org.apache.jmeter.samplers.SampleSaveConfiguration+saveLabel() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleResult+getSampleLabel() org.apache.jmeter.samplers.SampleResult+getSampleLabel() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveCode() org.apache.jmeter.samplers.SampleSaveConfiguration+saveCode() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleResult+getResponseCode() org.apache.jmeter.samplers.SampleResult+getResponseCode() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveMessage() org.apache.jmeter.samplers.SampleSaveConfiguration+saveMessage() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleResult+getResponseMessage() org.apache.jmeter.samplers.SampleResult+getResponseMessage() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadName() org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadName() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleResult+getThreadName() org.apache.jmeter.samplers.SampleResult+getThreadName() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveDataType() org.apache.jmeter.samplers.SampleSaveConfiguration+saveDataType() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleResult+getDataType() org.apache.jmeter.samplers.SampleResult+getDataType() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveSuccess() org.apache.jmeter.samplers.SampleSaveConfiguration+saveSuccess() java.lang.StringBuffer+append(boolean) java.lang.StringBuffer+append(boolean) org.apache.jmeter.samplers.SampleResult+isSuccessful() org.apache.jmeter.samplers.SampleResult+isSuccessful() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveAssertionResultsFailureMessage() org.apache.jmeter.samplers.SampleSaveConfiguration+saveAssertionResultsFailureMessage() org.apache.jmeter.samplers.SampleResult+getAssertionResults() org.apache.jmeter.samplers.SampleResult+getAssertionResults() org.apache.jmeter.assertions.AssertionResult+getFailureMessage() org.apache.jmeter.assertions.AssertionResult+getFailureMessage() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveBytes() org.apache.jmeter.samplers.SampleSaveConfiguration+saveBytes() java.lang.StringBuffer+append(int) java.lang.StringBuffer+append(int) org.apache.jmeter.samplers.SampleResult+getBytes() org.apache.jmeter.samplers.SampleResult+getBytes() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadCounts() org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadCounts() java.lang.StringBuffer+append(int) java.lang.StringBuffer+append(int) org.apache.jmeter.samplers.SampleResult+getGroupThreads() org.apache.jmeter.samplers.SampleResult+getGroupThreads() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(int) java.lang.StringBuffer+append(int) org.apache.jmeter.samplers.SampleResult+getAllThreads() org.apache.jmeter.samplers.SampleResult+getAllThreads() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveUrl() org.apache.jmeter.samplers.SampleSaveConfiguration+saveUrl() java.lang.StringBuffer+append(Object) java.lang.StringBuffer+append(Object) org.apache.jmeter.samplers.SampleResult+getURL() org.apache.jmeter.samplers.SampleResult+getURL() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveFileName() org.apache.jmeter.samplers.SampleSaveConfiguration+saveFileName() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleResult+getResultFileName() org.apache.jmeter.samplers.SampleResult+getResultFileName() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveLatency() org.apache.jmeter.samplers.SampleSaveConfiguration+saveLatency() java.lang.StringBuffer+append(long) java.lang.StringBuffer+append(long) org.apache.jmeter.samplers.SampleResult+getLatency() org.apache.jmeter.samplers.SampleResult+getLatency() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveEncoding() org.apache.jmeter.samplers.SampleSaveConfiguration+saveEncoding() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleResult+getDataEncoding() org.apache.jmeter.samplers.SampleResult+getDataEncoding() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveSampleCount() org.apache.jmeter.samplers.SampleSaveConfiguration+saveSampleCount() java.lang.StringBuffer+append(int) java.lang.StringBuffer+append(int) org.apache.jmeter.samplers.SampleResult+getSampleCount() org.apache.jmeter.samplers.SampleResult+getSampleCount() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(int) java.lang.StringBuffer+append(int) org.apache.jmeter.samplers.SampleResult+getErrorCount() org.apache.jmeter.samplers.SampleResult+getErrorCount() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleSaveConfiguration+saveHostname() org.apache.jmeter.samplers.SampleSaveConfiguration+saveHostname() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) org.apache.jmeter.samplers.SampleEvent+getHostname() org.apache.jmeter.samplers.SampleEvent+getHostname() java.lang.StringBuffer+append(String) java.lang.StringBuffer+append(String) java.lang.StringBuffer+length() java.lang.StringBuffer+length() java.lang.String+length() java.lang.String+length() java.lang.StringBuffer+substring(int,int) java.lang.StringBuffer+substring(int,int) java.lang.StringBuffer+toString() java.lang.StringBuffer+toString()",,3912,134,9,"/** 
 * Convert a result into a string, where the fields of the result are separated by a specified String.
 * @param event the sample event to be converted
 * @param delimiter the separation string
 * @return the separated value representation of the result
 */
","/**
     * Convert a result into a string, where the fields of the result are
     * separated by a specified String.
     * 
     * @param event
     *            the sample event to be converted
     * @param delimiter
     *            the separation string
     * @return the separated value representation of the result
     */
    public static String resultToDelimitedString(SampleEvent event, String delimiter) {
    	StringBuffer text = new StringBuffer();
    	SampleResult sample = event.getResult();
    	SampleSaveConfiguration saveConfig = sample.getSaveConfig();
    
    	if (saveConfig.saveTimestamp()) {
    		if (saveConfig.printMilliseconds()){
    			text.append(sample.getTimeStamp());
    			text.append(delimiter);
    		} else if (saveConfig.formatter() != null) {
    			String stamp = saveConfig.formatter().format(new Date(sample.getTimeStamp()));
    			text.append(stamp);
    			text.append(delimiter);
    		}
    	}
    
    	if (saveConfig.saveTime()) {
    		text.append(sample.getTime());
    		text.append(delimiter);
    	}
    
    	if (saveConfig.saveLabel()) {
    		text.append(sample.getSampleLabel());
    		text.append(delimiter);
    	}
    
    	if (saveConfig.saveCode()) {
    		text.append(sample.getResponseCode());
    		text.append(delimiter);
    	}
    
    	if (saveConfig.saveMessage()) {
    		text.append(sample.getResponseMessage());
    		text.append(delimiter);
    	}
    
    	if (saveConfig.saveThreadName()) {
    		text.append(sample.getThreadName());
    		text.append(delimiter);
    	}
    
    	if (saveConfig.saveDataType()) {
    		text.append(sample.getDataType());
    		text.append(delimiter);
    	}
    
    	if (saveConfig.saveSuccess()) {
    		text.append(sample.isSuccessful());
    		text.append(delimiter);
    	}
    
    	if (saveConfig.saveAssertionResultsFailureMessage()) {
    		String message = null;
    		AssertionResult[] results = sample.getAssertionResults();
    
    		if (results != null) {
    			// Find the first non-null message
    			for (int i = 0; i < results.length; i++){
        			message = results[i].getFailureMessage();
    				if (message != null) break;
    			}
    		}
    
    		if (message != null) {
    			text.append(message);
    		}
    		text.append(delimiter);
    	}
    
        if (saveConfig.saveBytes()) {
            text.append(sample.getBytes());
            text.append(delimiter);
        }
    
        if (saveConfig.saveThreadCounts()) {
            text.append(sample.getGroupThreads());
            text.append(delimiter);
            text.append(sample.getAllThreads());
            text.append(delimiter);
        }
        if (saveConfig.saveUrl()) {
            text.append(sample.getURL());
            text.append(delimiter);
        }
    
        if (saveConfig.saveFileName()) {
            text.append(sample.getResultFileName());
            text.append(delimiter);
        }
    
        if (saveConfig.saveLatency()) {
            text.append(sample.getLatency());
            text.append(delimiter);
        }

        if (saveConfig.saveEncoding()) {
            text.append(sample.getDataEncoding());
            text.append(delimiter);
        }

    	if (saveConfig.saveSampleCount()) {// Need both sample and error count to be any use
    		text.append(sample.getSampleCount());
    		text.append(delimiter);
    		text.append(sample.getErrorCount());
    		text.append(delimiter);
    	}
    
        if (saveConfig.saveHostname()) {
            text.append(event.getHostname());
            text.append(delimiter);
        }

    	String resultString = null;
    	int size = text.length();
    	int delSize = delimiter.length();
    
    	// Strip off the trailing delimiter
    	if (size >= delSize) {
    		resultString = text.substring(0, size - delSize);
    	} else {
    		resultString = text.toString();
    	}
    	return resultString;
    }",True
43,"saveSubTree(HashTree,OutputStream)",Method,,org.apache.jmeter.gui.action.Save+doAction(ActionEvent) org.apache.jmeter.report.gui.action.ReportSave+doAction(ActionEvent),java.util.List+get(int) org.apache.jmeter.save.OldSaveService+getConfigsFromTree(HashTree) org.apache.jmeter.save.OldSaveService+getConfigsFromTree(HashTree) java.util.List+get(int) java.io.IOException+IOException(String) java.io.IOException+IOException(String),,517,13,9,,"public static void saveSubTree(HashTree subTree, OutputStream writer) throws IOException {
		Configuration config = (Configuration) getConfigsFromTree(subTree).get(0);
		DefaultConfigurationSerializer saver = new DefaultConfigurationSerializer();

		saver.setIndent(true);
		try {
			saver.serialize(writer, config);
		} catch (SAXException e) {
			throw new IOException(""SAX implementation problem"");
		} catch (ConfigurationException e) {
			throw new IOException(""Problem using Avalon Configuration tools"");
		}
	}",False
44,getSampleResult(Configuration),Method,getSampleResult(Configuration),org.apache.jmeter.reporters.ResultCollector+loadExistingFile(),"org.apache.jmeter.samplers.SampleResult+SampleResult(long,boolean) org.apache.jmeter.samplers.SampleResult+setThreadName(String) org.apache.jmeter.samplers.SampleResult+setThreadName(String) org.apache.jmeter.samplers.SampleResult+setDataType(String) org.apache.jmeter.samplers.SampleResult+setDataType(String) org.apache.jmeter.samplers.SampleResult+setResponseCode(String) org.apache.jmeter.samplers.SampleResult+setResponseCode(String) org.apache.jmeter.samplers.SampleResult+setResponseMessage(String) org.apache.jmeter.samplers.SampleResult+setResponseMessage(String) org.apache.jmeter.samplers.SampleResult+setSuccessful(boolean) org.apache.jmeter.samplers.SampleResult+setSuccessful(boolean) org.apache.jmeter.samplers.SampleResult+setSampleLabel(String) org.apache.jmeter.samplers.SampleResult+setSampleLabel(String) org.apache.jmeter.samplers.SampleResult+setResponseData(byte[]) org.apache.jmeter.samplers.SampleResult+setResponseData(byte[]) org.apache.jmeter.save.OldSaveService+getBinaryData(Configuration) org.apache.jmeter.save.OldSaveService+getBinaryData(Configuration) org.apache.jmeter.samplers.SampleResult+storeSubResult(SampleResult) org.apache.jmeter.samplers.SampleResult+storeSubResult(SampleResult) org.apache.jmeter.save.OldSaveService+getSampleResult(Configuration) org.apache.jmeter.save.OldSaveService+getSampleResult(Configuration) org.apache.jmeter.samplers.SampleResult+addAssertionResult(AssertionResult) org.apache.jmeter.samplers.SampleResult+addAssertionResult(AssertionResult) org.apache.jmeter.save.OldSaveService+getAssertionResult(Configuration) org.apache.jmeter.save.OldSaveService+getAssertionResult(Configuration) org.apache.jmeter.samplers.SampleResult+setSamplerData(String) org.apache.jmeter.samplers.SampleResult+setSamplerData(String)",org.apache.jmeter.save.OldSaveService+TIME_STAMP org.apache.jmeter.save.OldSaveService+TIME org.apache.jmeter.save.OldSaveService+THREAD_NAME org.apache.jmeter.save.OldSaveService+DATA_TYPE org.apache.jmeter.save.OldSaveService+RESPONSE_CODE org.apache.jmeter.save.OldSaveService+RESPONSE_MESSAGE org.apache.jmeter.save.OldSaveService+SUCCESSFUL org.apache.jmeter.save.OldSaveService+LABEL org.apache.jmeter.save.OldSaveService+BINARY org.apache.jmeter.save.OldSaveService+SAMPLE_RESULT_TAG_NAME org.apache.jmeter.save.OldSaveService+ASSERTION_RESULT_TAG_NAME,1523,35,9,"/** 
 * Read sampleResult from Avalon XML file.
 * @param config Avalon configuration
 * @return sample result
 */
","/**
     * Read sampleResult from Avalon XML file.
     * 
     * @param config Avalon configuration
     * @return sample result
     */
    // Probably no point in converting this to return a SampleEvent
    public static SampleResult getSampleResult(Configuration config) {
		SampleResult result = new SampleResult(config.getAttributeAsLong(TIME_STAMP, 0L), config.getAttributeAsLong(
				TIME, 0L));

		result.setThreadName(config.getAttribute(THREAD_NAME, """")); // $NON-NLS-1$
		result.setDataType(config.getAttribute(DATA_TYPE, """"));
		result.setResponseCode(config.getAttribute(RESPONSE_CODE, """")); // $NON-NLS-1$
		result.setResponseMessage(config.getAttribute(RESPONSE_MESSAGE, """")); // $NON-NLS-1$
		result.setSuccessful(config.getAttributeAsBoolean(SUCCESSFUL, false));
		result.setSampleLabel(config.getAttribute(LABEL, """")); // $NON-NLS-1$
		result.setResponseData(getBinaryData(config.getChild(BINARY)));
		Configuration[] subResults = config.getChildren(SAMPLE_RESULT_TAG_NAME);

		for (int i = 0; i < subResults.length; i++) {
			result.storeSubResult(getSampleResult(subResults[i]));
		}
		Configuration[] assResults = config.getChildren(ASSERTION_RESULT_TAG_NAME);

		for (int i = 0; i < assResults.length; i++) {
			result.addAssertionResult(getAssertionResult(assResults[i]));
		}

		Configuration[] samplerData = config.getChildren(""property""); // $NON-NLS-1$
		for (int i = 0; i < samplerData.length; i++) {
			result.setSamplerData(samplerData[i].getValue("""")); // $NON-NLS-1$
		}
		return result;
	}",False
45,getConfigsFromTree(HashTree),Method,"saveSubTree(HashTree,OutputStream) getConfigsFromTree(HashTree)",,"java.util.Collection+iterator() org.apache.jorphan.collections.HashTree+list() org.apache.jorphan.collections.HashTree+list() java.util.Collection+iterator() java.util.LinkedList+LinkedList() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() org.apache.jmeter.save.OldSaveService+getConfigForTestElement(String,TestElement) org.apache.jmeter.save.OldSaveService+getConfigForTestElement(String,TestElement) org.apache.jmeter.save.OldSaveService+getConfigsFromTree(HashTree) org.apache.jmeter.save.OldSaveService+getConfigsFromTree(HashTree) org.apache.jorphan.collections.HashTree+getTree(Object) org.apache.jorphan.collections.HashTree+getTree(Object) java.util.List+iterator() java.util.List+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.List+add(E) java.util.List+add(E)",,620,19,10,,"private static List getConfigsFromTree(HashTree subTree) {
		Iterator iter = subTree.list().iterator();
		List configs = new LinkedList();

		while (iter.hasNext()) {
			TestElement item = (TestElement) iter.next();
			DefaultConfiguration config = new DefaultConfiguration(""node"", ""node""); // $NON-NLS-1$ // $NON-NLS-2$

			config.addChild(getConfigForTestElement(null, item));
			List configList = getConfigsFromTree(subTree.getTree(item));
			Iterator iter2 = configList.iterator();

			while (iter2.hasNext()) {
				config.addChild((Configuration) iter2.next());
			}
			configs.add(config);
		}
		return configs;
	}",False
46,getConfiguration(byte[]),Method,"getConfiguration(SampleResult,SampleSaveConfiguration)",,"java.lang.String+String(byte[],String)",org.apache.jmeter.save.OldSaveService+BINARY org.apache.jmeter.save.OldSaveService+log,337,10,9,,"public static Configuration getConfiguration(byte[] bin) {
		DefaultConfiguration config = new DefaultConfiguration(BINARY, ""JMeter Save Service""); // $NON-NLS-1$

		try {
			config.setValue(new String(bin, ""UTF-8"")); // $NON-NLS-1$
		} catch (UnsupportedEncodingException e) {
			log.error("""", e); // $NON-NLS-1$
		}
		return config;
	}",False
47,getBinaryData(Configuration),Method,getSampleResult(Configuration),,,,256,10,9,,"public static byte[] getBinaryData(Configuration config) {
		if (config == null) {
			return new byte[0];
		}
		try {
			return config.getValue("""").getBytes(""UTF-8""); // $NON-NLS-1$
		} catch (UnsupportedEncodingException e) {
			return new byte[0];
		}
	}",False
48,getAssertionResult(Configuration),Method,getSampleResult(Configuration),,org.apache.jmeter.assertions.AssertionResult+AssertionResult(String) org.apache.jmeter.assertions.AssertionResult+setError(boolean) org.apache.jmeter.assertions.AssertionResult+setError(boolean) org.apache.jmeter.assertions.AssertionResult+setFailure(boolean) org.apache.jmeter.assertions.AssertionResult+setFailure(boolean) org.apache.jmeter.assertions.AssertionResult+setFailureMessage(String) org.apache.jmeter.assertions.AssertionResult+setFailureMessage(String),org.apache.jmeter.save.OldSaveService+ERROR org.apache.jmeter.save.OldSaveService+FAILURE org.apache.jmeter.save.OldSaveService+FAILURE_MESSAGE,372,7,9,,"public static AssertionResult getAssertionResult(Configuration config) {
		AssertionResult result = new AssertionResult(""""); //TODO provide proper name?
		result.setError(config.getAttributeAsBoolean(ERROR, false));
		result.setFailure(config.getAttributeAsBoolean(FAILURE, false));
		result.setFailureMessage(config.getAttribute(FAILURE_MESSAGE, """"));
		return result;
	}",False
49,getConfiguration(AssertionResult),Method,"getConfiguration(SampleResult,SampleSaveConfiguration)",,org.apache.jmeter.assertions.AssertionResult+getFailureMessage() org.apache.jmeter.assertions.AssertionResult+getFailureMessage() org.apache.jmeter.assertions.AssertionResult+isError() org.apache.jmeter.assertions.AssertionResult+isError() org.apache.jmeter.assertions.AssertionResult+isFailure() org.apache.jmeter.assertions.AssertionResult+isFailure(),org.apache.jmeter.save.OldSaveService+ASSERTION_RESULT_TAG_NAME org.apache.jmeter.save.OldSaveService+FAILURE_MESSAGE org.apache.jmeter.save.OldSaveService+ERROR org.apache.jmeter.save.OldSaveService+FAILURE,389,8,9,,"public static Configuration getConfiguration(AssertionResult assResult) {
		DefaultConfiguration config = new DefaultConfiguration(ASSERTION_RESULT_TAG_NAME, ""JMeter Save Service"");

		config.setAttribute(FAILURE_MESSAGE, assResult.getFailureMessage());
		config.setAttribute(ERROR, """" + assResult.isError());
		config.setAttribute(FAILURE, """" + assResult.isFailure());
		return config;
	}",False
50,"getConfiguration(SampleResult,SampleSaveConfiguration)",Method,"getConfiguration(SampleResult,SampleSaveConfiguration)",org.apache.jmeter.reporters.ResultCollector+getSerializedSampleResult(SampleResult),"org.apache.jmeter.samplers.SampleSaveConfiguration+saveTime() org.apache.jmeter.samplers.SampleSaveConfiguration+saveTime() java.lang.String+valueOf(long) java.lang.String+valueOf(long) org.apache.jmeter.samplers.SampleResult+getTime() org.apache.jmeter.samplers.SampleResult+getTime() org.apache.jmeter.samplers.SampleSaveConfiguration+saveLabel() org.apache.jmeter.samplers.SampleSaveConfiguration+saveLabel() org.apache.jmeter.samplers.SampleResult+getSampleLabel() org.apache.jmeter.samplers.SampleResult+getSampleLabel() org.apache.jmeter.samplers.SampleSaveConfiguration+saveCode() org.apache.jmeter.samplers.SampleSaveConfiguration+saveCode() org.apache.jmeter.samplers.SampleResult+getResponseCode() org.apache.jmeter.samplers.SampleResult+getResponseCode() org.apache.jmeter.samplers.SampleSaveConfiguration+saveMessage() org.apache.jmeter.samplers.SampleSaveConfiguration+saveMessage() org.apache.jmeter.samplers.SampleResult+getResponseMessage() org.apache.jmeter.samplers.SampleResult+getResponseMessage() org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadName() org.apache.jmeter.samplers.SampleSaveConfiguration+saveThreadName() org.apache.jmeter.samplers.SampleResult+getThreadName() org.apache.jmeter.samplers.SampleResult+getThreadName() org.apache.jmeter.samplers.SampleSaveConfiguration+saveDataType() org.apache.jmeter.samplers.SampleSaveConfiguration+saveDataType() org.apache.jmeter.samplers.SampleResult+getDataType() org.apache.jmeter.samplers.SampleResult+getDataType() org.apache.jmeter.samplers.SampleSaveConfiguration+printMilliseconds() org.apache.jmeter.samplers.SampleSaveConfiguration+printMilliseconds() java.lang.String+valueOf(long) java.lang.String+valueOf(long) org.apache.jmeter.samplers.SampleResult+getTimeStamp() org.apache.jmeter.samplers.SampleResult+getTimeStamp() org.apache.jmeter.samplers.SampleSaveConfiguration+formatter() org.apache.jmeter.samplers.SampleSaveConfiguration+formatter() java.text.DateFormat+format(Date) org.apache.jmeter.samplers.SampleSaveConfiguration+formatter() org.apache.jmeter.samplers.SampleSaveConfiguration+formatter() java.text.DateFormat+format(Date) java.util.Date+Date(long) org.apache.jmeter.samplers.SampleResult+getTimeStamp() org.apache.jmeter.samplers.SampleResult+getTimeStamp() org.apache.jmeter.samplers.SampleSaveConfiguration+saveSuccess() org.apache.jmeter.samplers.SampleSaveConfiguration+saveSuccess() java.lang.Boolean+toString(boolean) java.lang.Boolean+toString(boolean) org.apache.jmeter.samplers.SampleResult+isSuccessful() org.apache.jmeter.samplers.SampleResult+isSuccessful() org.apache.jmeter.samplers.SampleResult+getSubResults() org.apache.jmeter.samplers.SampleResult+getSubResults() org.apache.jmeter.save.OldSaveService+getConfiguration(SampleResult,SampleSaveConfiguration) org.apache.jmeter.save.OldSaveService+getConfiguration(SampleResult,SampleSaveConfiguration) org.apache.jmeter.samplers.SampleResult+getAssertionResults() org.apache.jmeter.samplers.SampleResult+getAssertionResults() org.apache.jmeter.samplers.SampleSaveConfiguration+saveSamplerData(SampleResult) org.apache.jmeter.samplers.SampleSaveConfiguration+saveSamplerData(SampleResult) org.apache.jmeter.save.OldSaveService+createConfigForString(String,String) org.apache.jmeter.save.OldSaveService+createConfigForString(String,String) org.apache.jmeter.samplers.SampleResult+getSamplerData() org.apache.jmeter.samplers.SampleResult+getSamplerData() org.apache.jmeter.samplers.SampleSaveConfiguration+saveAssertions() org.apache.jmeter.samplers.SampleSaveConfiguration+saveAssertions() org.apache.jmeter.save.OldSaveService+getConfiguration(AssertionResult) org.apache.jmeter.save.OldSaveService+getConfiguration(AssertionResult) org.apache.jmeter.samplers.SampleSaveConfiguration+saveResponseData(SampleResult) org.apache.jmeter.samplers.SampleSaveConfiguration+saveResponseData(SampleResult) org.apache.jmeter.save.OldSaveService+getConfiguration(byte[]) org.apache.jmeter.save.OldSaveService+getConfiguration(byte[]) org.apache.jmeter.samplers.SampleResult+getResponseData() org.apache.jmeter.samplers.SampleResult+getResponseData()",org.apache.jmeter.save.OldSaveService+SAMPLE_RESULT_TAG_NAME org.apache.jmeter.save.OldSaveService+TIME org.apache.jmeter.save.OldSaveService+LABEL org.apache.jmeter.save.OldSaveService+RESPONSE_CODE org.apache.jmeter.save.OldSaveService+RESPONSE_MESSAGE org.apache.jmeter.save.OldSaveService+THREAD_NAME org.apache.jmeter.save.OldSaveService+DATA_TYPE org.apache.jmeter.save.OldSaveService+TIME_STAMP org.apache.jmeter.save.OldSaveService+TIME_STAMP org.apache.jmeter.save.OldSaveService+SUCCESSFUL,2414,68,9,"/** 
 * This method determines the content of the result data that will be stored for the Avalon XML format.
 * @param result the object containing all of the data that has been collected.
 * @param saveConfig the configuration giving the data items to be saved. N.B. It is rather out of date, as many fields are not saved. However it is probably not worth updating, as no-one should be using the format.
 */
","/**
	 * This method determines the content of the result data that will be
	 * stored for the Avalon XML format.
	 * 
	 * @param result
	 *            the object containing all of the data that has been collected.
	 * @param saveConfig
	 *            the configuration giving the data items to be saved.
	 * N.B. It is rather out of date, as many fields are not saved.
	 * However it is probably not worth updating, as no-one should be using the format.
	 */
	public static Configuration getConfiguration(SampleResult result, SampleSaveConfiguration saveConfig) {
		DefaultConfiguration config = new DefaultConfiguration(SAMPLE_RESULT_TAG_NAME, ""JMeter Save Service""); // $NON-NLS-1$

		if (saveConfig.saveTime()) {
			config.setAttribute(TIME, String.valueOf(result.getTime()));
		}
		if (saveConfig.saveLabel()) {
			config.setAttribute(LABEL, result.getSampleLabel());
		}
		if (saveConfig.saveCode()) {
			config.setAttribute(RESPONSE_CODE, result.getResponseCode());
		}
		if (saveConfig.saveMessage()) {
			config.setAttribute(RESPONSE_MESSAGE, result.getResponseMessage());
		}
		if (saveConfig.saveThreadName()) {
			config.setAttribute(THREAD_NAME, result.getThreadName());
		}
		if (saveConfig.saveDataType()) {
			config.setAttribute(DATA_TYPE, result.getDataType());
		}

		if (saveConfig.printMilliseconds()) {
			config.setAttribute(TIME_STAMP, String.valueOf(result.getTimeStamp()));
		} else if (saveConfig.formatter() != null) {
			String stamp = saveConfig.formatter().format(new Date(result.getTimeStamp()));

			config.setAttribute(TIME_STAMP, stamp);
		}

		if (saveConfig.saveSuccess()) {
			config.setAttribute(SUCCESSFUL, Boolean.toString(result.isSuccessful()));
		}

		SampleResult[] subResults = result.getSubResults();

		if (subResults != null) {
			for (int i = 0; i < subResults.length; i++) {
				config.addChild(getConfiguration(subResults[i], saveConfig));
			}
		}

		AssertionResult[] assResults = result.getAssertionResults();

		if (saveConfig.saveSamplerData(result)) {
			config.addChild(createConfigForString(""samplerData"", result.getSamplerData())); // $NON-NLS-1$
		}
		if (saveConfig.saveAssertions() && assResults != null) {
			for (int i = 0; i < assResults.length; i++) {
				config.addChild(getConfiguration(assResults[i]));
			}
		}
		if (saveConfig.saveResponseData(result)) {
			config.addChild(getConfiguration(result.getResponseData()));
		}
		return config;
	}",False
51,"getConfigForTestElement(String,TestElement)",Method,getConfigsFromTree(HashTree),,org.apache.jmeter.save.TestElementSaver+TestElementSaver(String) org.apache.jmeter.testelement.TestElement+traverse(TestElementTraverser) org.apache.jmeter.testelement.TestElement+traverse(TestElementTraverser) org.apache.jmeter.save.TestElementSaver+getConfiguration() org.apache.jmeter.save.TestElementSaver+getConfiguration(),,1160,27,9,,"public static Configuration getConfigForTestElement(String named, TestElement item) {
		TestElementSaver saver = new TestElementSaver(named);
		item.traverse(saver);
		Configuration config = saver.getConfiguration();
		/*
		 * DefaultConfiguration config = new DefaultConfiguration(""testelement"",
		 * ""testelement"");
		 * 
		 * if (named != null) { config.setAttribute(""name"", named); } if
		 * (item.getProperty(TestElement.TEST_CLASS) != null) {
		 * config.setAttribute(""class"", (String)
		 * item.getProperty(TestElement.TEST_CLASS)); } else {
		 * config.setAttribute(""class"", item.getClass().getName()); } Iterator
		 * iter = item.getPropertyNames().iterator();
		 * 
		 * while (iter.hasNext()) { String name = (String) iter.next(); Object
		 * value = item.getProperty(name);
		 * 
		 * if (value instanceof TestElement) {
		 * config.addChild(getConfigForTestElement(name, (TestElement) value)); }
		 * else if (value instanceof Collection) {
		 * config.addChild(createConfigForCollection(name, (Collection) value)); }
		 * else if (value != null) { config.addChild(createConfigForString(name,
		 * value.toString())); } }
		 */
		return config;
	}",False
52,"createConfigForString(String,String)",Method,"getConfiguration(SampleResult,SampleSaveConfiguration)",,,org.apache.jmeter.save.OldSaveService+XML_SPACE org.apache.jmeter.save.OldSaveService+PRESERVE,331,11,10,,"private static Configuration createConfigForString(String name, String value) {
		if (value == null) {
			value = """";
		}
		DefaultConfiguration config = new DefaultConfiguration(""property"", ""property"");

		config.setAttribute(""name"", name);
		config.setValue(value);
		config.setAttribute(XML_SPACE, PRESERVE);
		return config;
	}",False
53,loadSubTree(InputStream),Method,,org.apache.jmeter.save.SaveService+loadTree(InputStream),org.apache.jmeter.save.OldSaveService+generateNode(Configuration) org.apache.jmeter.save.OldSaveService+generateNode(Configuration) java.io.IOException+IOException(String) java.io.IOException+IOException(String),org.apache.jmeter.save.OldSaveService+builder org.apache.jmeter.save.OldSaveService+log org.apache.jmeter.save.OldSaveService+log,531,16,41,,"public synchronized static HashTree loadSubTree(InputStream in) throws IOException {
		try {
			Configuration config = builder.build(in);
			HashTree loadedTree = generateNode(config);

			return loadedTree;
		} catch (ConfigurationException e) {
			String message = ""Problem loading using Avalon Configuration tools"";
			log.error(message, e);
			throw new IOException(message);
		} catch (SAXException e) {
			String message = ""Problem with SAX implementation"";
			log.error(message, e);
			throw new IOException(message);
		}
	}",False
54,createTestElement(Configuration),Method,generateNode(Configuration),,"org.apache.jmeter.util.NameUpdater+getCurrentTestName(String,String) org.apache.jmeter.util.NameUpdater+getCurrentTestName(String,String) java.lang.Class+newInstance() java.lang.Class+forName(String) java.lang.Class+forName(String) java.lang.Class+newInstance() org.apache.jmeter.save.OldSaveService+createProperty(Configuration,String) org.apache.jmeter.save.OldSaveService+createProperty(Configuration,String) org.apache.jmeter.testelement.TestElement+setProperty(JMeterProperty) org.apache.jmeter.testelement.TestElement+setProperty(JMeterProperty) org.apache.jmeter.testelement.TestElement+setProperty(String,String) org.apache.jmeter.testelement.TestElement+setProperty(String,String) org.apache.jmeter.testelement.TestElement+setProperty(JMeterProperty) org.apache.jmeter.testelement.TestElement+setProperty(JMeterProperty) org.apache.jmeter.testelement.property.TestElementProperty+TestElementProperty(String,TestElement) org.apache.jmeter.save.OldSaveService+createTestElement(Configuration) org.apache.jmeter.save.OldSaveService+createTestElement(Configuration) org.apache.jmeter.testelement.TestElement+setProperty(JMeterProperty) org.apache.jmeter.testelement.TestElement+setProperty(JMeterProperty) org.apache.jmeter.testelement.property.CollectionProperty+CollectionProperty(String,Collection) org.apache.jmeter.save.OldSaveService+createCollection(Configuration,String) org.apache.jmeter.save.OldSaveService+createCollection(Configuration,String) org.apache.jmeter.testelement.TestElement+setProperty(JMeterProperty) org.apache.jmeter.testelement.TestElement+setProperty(JMeterProperty) org.apache.jmeter.testelement.property.MapProperty+MapProperty(String,Map) org.apache.jmeter.save.OldSaveService+createMap(Configuration,String) org.apache.jmeter.save.OldSaveService+createMap(Configuration,String)",org.apache.jmeter.testelement.TestElement+GUI_CLASS org.apache.jmeter.save.OldSaveService+log,2041,42,9,,"public static TestElement createTestElement(Configuration config) throws ConfigurationException,
			ClassNotFoundException, IllegalAccessException, InstantiationException {
		TestElement element = null;

		String testClass = config.getAttribute(""class""); // $NON-NLS-1$
		
        String gui_class=""""; // $NON-NLS-1$
		Configuration[] children = config.getChildren();
        for (int i = 0; i < children.length; i++) {
            if (children[i].getName().equals(""property"")) { // $NON-NLS-1$
                if (children[i].getAttribute(""name"").equals(TestElement.GUI_CLASS)){ // $NON-NLS-1$
                    gui_class=children[i].getValue();
                }
            }  
        }
        
        String newClass = NameUpdater.getCurrentTestName(testClass,gui_class);

        element = (TestElement) Class.forName(newClass).newInstance();

        for (int i = 0; i < children.length; i++) {
			if (children[i].getName().equals(""property"")) { // $NON-NLS-1$
				try {
                    JMeterProperty prop = createProperty(children[i], newClass);
					if (prop!=null) element.setProperty(prop);
				} catch (Exception ex) {
					log.error(""Problem loading property"", ex);
					element.setProperty(children[i].getAttribute(""name""), """"); // $NON-NLS-1$ // $NON-NLS-2$
				}
			} else if (children[i].getName().equals(""testelement"")) { // $NON-NLS-1$
				element.setProperty(new TestElementProperty(children[i].getAttribute(""name"", """"), // $NON-NLS-1$ // $NON-NLS-2$
						createTestElement(children[i])));
			} else if (children[i].getName().equals(""collection"")) { // $NON-NLS-1$
				element.setProperty(new CollectionProperty(children[i].getAttribute(""name"", """"), // $NON-NLS-1$ // $NON-NLS-2$
                        createCollection(children[i], newClass)));
			} else if (children[i].getName().equals(""map"")) { // $NON-NLS-1$
				element.setProperty(new MapProperty(children[i].getAttribute(""name"", """"), // $NON-NLS-1$ // $NON-NLS-2$
                        createMap(children[i],newClass)));
			}
		}
		return element;
	}",False
55,"createCollection(Configuration,String)",Method,,,"java.lang.Class+forName(String) java.lang.Class+forName(String) org.apache.jmeter.save.OldSaveService+createProperty(Configuration,String) org.apache.jmeter.save.OldSaveService+createProperty(Configuration,String) java.util.Collection+add(E) java.util.Collection+add(E) java.util.Collection+add(E) java.util.Collection+add(E) org.apache.jmeter.testelement.property.TestElementProperty+TestElementProperty(String,TestElement) org.apache.jmeter.save.OldSaveService+createTestElement(Configuration) org.apache.jmeter.save.OldSaveService+createTestElement(Configuration) java.util.Collection+add(E) java.util.Collection+add(E) org.apache.jmeter.testelement.property.CollectionProperty+CollectionProperty(String,Collection) org.apache.jmeter.save.OldSaveService+createCollection(Configuration,String) org.apache.jmeter.save.OldSaveService+createCollection(Configuration,String) org.apache.jmeter.save.OldSaveService+createProperty(Configuration,String) org.apache.jmeter.save.OldSaveService+createProperty(Configuration,String) java.util.Collection+add(E) java.util.Collection+add(E) java.util.Collection+add(E) java.util.Collection+add(E) org.apache.jmeter.testelement.property.MapProperty+MapProperty(String,Map) org.apache.jmeter.save.OldSaveService+createMap(Configuration,String) org.apache.jmeter.save.OldSaveService+createMap(Configuration,String)",,1393,23,10,,"private static Collection createCollection(Configuration config, String testClass) throws ConfigurationException,
			ClassNotFoundException, IllegalAccessException, InstantiationException {
		Collection coll = (Collection) Class.forName(config.getAttribute(""class"")).newInstance(); // $NON-NLS-1$ 
		Configuration[] items = config.getChildren();

		for (int i = 0; i < items.length; i++) {
			if (items[i].getName().equals(""property"")) { // $NON-NLS-1$ 
                JMeterProperty prop = createProperty(items[i], testClass);
				if (prop!=null) coll.add(prop);
			} else if (items[i].getName().equals(""testelement"")) { // $NON-NLS-1$ 
				coll.add(new TestElementProperty(items[i].getAttribute(""name"", """"), createTestElement(items[i]))); // $NON-NLS-1$ // $NON-NLS-2$
			} else if (items[i].getName().equals(""collection"")) { // $NON-NLS-1$ 
				coll.add(new CollectionProperty(items[i].getAttribute(""name"", """"), // $NON-NLS-1$ // $NON-NLS-2$
						createCollection(items[i], testClass)));
			} else if (items[i].getName().equals(""string"")) { // $NON-NLS-1$ 
                JMeterProperty prop = createProperty(items[i], testClass);
				if (prop!=null) coll.add(prop);
			} else if (items[i].getName().equals(""map"")) { // $NON-NLS-1$ 
				coll.add(new MapProperty(items[i].getAttribute(""name"", """"), createMap(items[i], testClass))); // $NON-NLS-1$ // $NON-NLS-2$
			}
		}
		return coll;
	}",False
56,"createProperty(Configuration,String)",Method,"createTestElement(Configuration) createCollection(Configuration,String) createCollection(Configuration,String) createMap(Configuration,String)",,"java.lang.Class+getName() java.lang.Class+getName() org.apache.jmeter.util.NameUpdater+getCurrentName(String,String) org.apache.jmeter.util.NameUpdater+getCurrentName(String,String) java.lang.String+equals(Object) java.lang.String+equals(Object) org.apache.jmeter.util.NameUpdater+getCurrentName(String) org.apache.jmeter.util.NameUpdater+getCurrentName(String) java.lang.String+equals(Object) java.lang.String+equals(Object) org.apache.jmeter.util.NameUpdater+getCurrentName(String,String,String) org.apache.jmeter.util.NameUpdater+getCurrentName(String,String,String) java.lang.String+length() java.lang.String+length() java.lang.String+length() java.lang.String+length() java.lang.Class+newInstance() java.lang.Class+forName(String) java.lang.Class+forName(String) java.lang.Class+newInstance() org.apache.jmeter.testelement.property.JMeterProperty+setName(String) org.apache.jmeter.testelement.property.JMeterProperty+setName(String) org.apache.jmeter.testelement.property.JMeterProperty+setObjectValue(Object) org.apache.jmeter.testelement.property.JMeterProperty+setObjectValue(Object)",org.apache.jmeter.testelement.TestElement+GUI_CLASS org.apache.jmeter.testelement.TestElement+TEST_CLASS,1119,29,10,,"private static JMeterProperty createProperty(Configuration config, String testClass) throws IllegalAccessException,
			ClassNotFoundException, InstantiationException {
		String value = config.getValue(""""); // $NON-NLS-1$ 
		String name = config.getAttribute(""name"", value); // $NON-NLS-1$ 
        String oname = name;
		String type = config.getAttribute(""propType"", StringProperty.class.getName()); // $NON-NLS-1$ 

		// Do upgrade translation:
		name = NameUpdater.getCurrentName(name, testClass);
		if (TestElement.GUI_CLASS.equals(name)) {
			value = NameUpdater.getCurrentName(value);
        } else if (TestElement.TEST_CLASS.equals(name)) {
            value=testClass; // must always agree
		} else {
			value = NameUpdater.getCurrentName(value, name, testClass);
		}

        // Delete any properties whose name converts to the empty string
        if (oname.length() != 0 && name.length()==0) {
            return null;
        }

        // Create the property:
		JMeterProperty prop = (JMeterProperty) Class.forName(type).newInstance();
		prop.setName(name);
		prop.setObjectValue(value);

		return prop;
	}",False
57,"createMap(Configuration,String)",Method,,,"java.lang.Class+forName(String) java.lang.Class+forName(String) org.apache.jmeter.save.OldSaveService+createProperty(Configuration,String) org.apache.jmeter.save.OldSaveService+createProperty(Configuration,String) java.util.Map+put(K,V) java.util.Map+put(K,V) org.apache.jmeter.testelement.property.JMeterProperty+getName() org.apache.jmeter.testelement.property.JMeterProperty+getName() java.util.Map+put(K,V) java.util.Map+put(K,V) org.apache.jmeter.testelement.property.TestElementProperty+TestElementProperty(String,TestElement) org.apache.jmeter.save.OldSaveService+createTestElement(Configuration) org.apache.jmeter.save.OldSaveService+createTestElement(Configuration) java.util.Map+put(K,V) java.util.Map+put(K,V) org.apache.jmeter.testelement.property.CollectionProperty+CollectionProperty(String,Collection) org.apache.jmeter.save.OldSaveService+createCollection(Configuration,String) org.apache.jmeter.save.OldSaveService+createCollection(Configuration,String) java.util.Map+put(K,V) java.util.Map+put(K,V) org.apache.jmeter.testelement.property.MapProperty+MapProperty(String,Map) org.apache.jmeter.save.OldSaveService+createMap(Configuration,String) org.apache.jmeter.save.OldSaveService+createMap(Configuration,String)",,1340,24,10,,"private static Map createMap(Configuration config, String testClass) throws ConfigurationException,
			ClassNotFoundException, IllegalAccessException, InstantiationException {
		Map map = (Map) Class.forName(config.getAttribute(""class"")).newInstance();
		Configuration[] items = config.getChildren();

		for (int i = 0; i < items.length; i++) {
			if (items[i].getName().equals(""property"")) { // $NON-NLS-1$ 
				JMeterProperty prop = createProperty(items[i], testClass);
				if (prop!=null) map.put(prop.getName(), prop);
			} else if (items[i].getName().equals(""testelement"")) { // $NON-NLS-1$ 
				map.put(items[i].getAttribute(""name"", """"), new TestElementProperty(items[i].getAttribute(""name"", """"), // $NON-NLS-1$ // $NON-NLS-2$
						createTestElement(items[i])));
			} else if (items[i].getName().equals(""collection"")) { // $NON-NLS-1$ 
				map.put(items[i].getAttribute(""name""),  // $NON-NLS-1$ 
						new CollectionProperty(items[i].getAttribute(""name"", """"), // $NON-NLS-1$ // $NON-NLS-2$
						createCollection(items[i], testClass)));
			} else if (items[i].getName().equals(""map"")) { // $NON-NLS-1$ 
				map.put(items[i].getAttribute(""name"", """"),  // $NON-NLS-1$ // $NON-NLS-2$
						new MapProperty(items[i].getAttribute(""name"", """"), // $NON-NLS-1$ // $NON-NLS-2$
						createMap(items[i], testClass)));
			}
		}
		return map;
	}",False
58,generateNode(Configuration),Method,loadSubTree(InputStream) generateNode(Configuration),,"org.apache.jmeter.save.OldSaveService+createTestElement(Configuration) org.apache.jmeter.save.OldSaveService+createTestElement(Configuration) org.apache.jorphan.collections.ListedHashTree+ListedHashTree(Object) org.apache.jmeter.save.OldSaveService+generateNode(Configuration) org.apache.jmeter.save.OldSaveService+generateNode(Configuration) org.apache.jorphan.collections.HashTree+add(Object,HashTree) org.apache.jorphan.collections.HashTree+add(Object,HashTree)",org.apache.jmeter.save.OldSaveService+log,567,21,10,,"private static HashTree generateNode(Configuration config) {
		TestElement element = null;

		try {
			element = createTestElement(config.getChild(""testelement"")); // $NON-NLS-1$ 
		} catch (Exception e) {
			log.error(""Problem loading part of file"", e);
			return null;
		}
		HashTree subTree = new ListedHashTree(element);
		Configuration[] subNodes = config.getChildren(""node""); // $NON-NLS-1$ 

		for (int i = 0; i < subNodes.length; i++) {
			HashTree t = generateNode(subNodes[i]);

			if (t != null) {
				subTree.add(element, t);
			}
		}
		return subTree;
	}",False
