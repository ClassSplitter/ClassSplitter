index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,logger,Field,,,,,71,1,8,,static Logger logger = LoggerFactory.getLogger(AuditHandlerTest.class);,False
2,server,Field,,,,,30,1,8,,static Undertow server = null;,True
3,auditLogger,Field,,,,,130,1,16,,final ch.qos.logback.classic.Logger auditLogger = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(Constants.AUDIT_LOGGER);,True
4,mockAppender,Field,,,,,32,2,0,,"@Mock
    Appender mockAppender;",True
5,captorLoggingEvent,Field,,,,,61,2,0,,"@Captor
    ArgumentCaptor<ILoggingEvent> captorLoggingEvent;",True
6,requiredKeys,Field,,,,,300,5,0,,"String[] requiredKeys = { AuditHandler.TIMESTAMP,
                                Constants.CORRELATION_ID_STRING,
                                Constants.TRACEABILITY_ID_STRING,
                                AuditHandler.STATUS_CODE,
                                AuditHandler.RESPONSE_TIME };",True
7,setUp(),Method,,,com.networknt.audit.AuditHandlerTest+getTestHandler() com.networknt.audit.AuditHandlerTest+getTestHandler() com.networknt.audit.AuditHandler+AuditHandler() com.networknt.audit.AuditHandler+setNext(HttpHandler) com.networknt.audit.AuditHandler+setNext(HttpHandler) com.networknt.correlation.CorrelationHandler+CorrelationHandler() com.networknt.correlation.CorrelationHandler+setNext(HttpHandler) com.networknt.correlation.CorrelationHandler+setNext(HttpHandler) com.networknt.body.BodyHandler+BodyHandler() com.networknt.body.BodyHandler+setNext(HttpHandler) com.networknt.body.BodyHandler+setNext(HttpHandler) com.networknt.audit.ParameterHandler+ParameterHandler() com.networknt.audit.ParameterHandler+setNext(HttpHandler) com.networknt.audit.ParameterHandler+setNext(HttpHandler),com.networknt.audit.AuditHandlerTest+server com.networknt.audit.AuditHandlerTest+logger com.networknt.audit.AuditHandlerTest+server com.networknt.audit.AuditHandlerTest+server,987,29,9,,"@BeforeClass
    public static void setUp() {
        if(server == null) {
            logger.info(""starting server"");
            HttpHandler handler = getTestHandler();

            AuditHandler auditHandler = new AuditHandler();
            auditHandler.setNext(handler);
            handler = auditHandler;

            CorrelationHandler correlationHandler = new CorrelationHandler();
            correlationHandler.setNext(handler);
            handler = correlationHandler;

            BodyHandler bodyHandler = new BodyHandler();
            bodyHandler.setNext(handler);
            handler = bodyHandler;

            ParameterHandler parameterHandler = new ParameterHandler();
            parameterHandler.setNext(handler);
            handler = parameterHandler;

            server = Undertow.builder()
                    .addHttpListener(8080, ""localhost"")
                    .setHandler(handler)
                    .build();
            server.start();
        }
    }",False
8,tearDown(),Method,,,java.lang.Thread+sleep(long) java.lang.Thread+sleep(long),com.networknt.audit.AuditHandlerTest+server com.networknt.audit.AuditHandlerTest+server com.networknt.audit.AuditHandlerTest+logger,308,12,9,,"@AfterClass
    public static void tearDown() throws Exception {
        if(server != null) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ignored) {

            }
            server.stop();
            logger.info(""The server is stopped."");
        }
    }",True
9,getTestHandler(),Method,setUp(),,,,511,7,8,,"static RoutingHandler getTestHandler() {
        return Handlers.routing()
                .add(Methods.POST, ""/pet"", exchange -> exchange.getResponseSender().send(""OK""))
                .add(Methods.POST, ""/error"", exchange -> new ErrorStatusTestHandler().handleRequest(exchange))
                .add(Methods.POST, ""/error/{petId}"", exchange -> new ErrorStatusTestHandler().handleRequest(exchange))
                .add(Methods.POST, ""/pet/{petId}"", exchange -> exchange.getResponseSender().send(""OK""));
    }",False
10,beforeTest(),Method,,,,com.networknt.audit.AuditHandlerTest+auditLogger com.networknt.audit.AuditHandlerTest+mockAppender,144,5,1,,"@Before
    public void beforeTest() throws Exception {
        // inject the mock appender
        auditLogger.addAppender(mockAppender);
    }",True
11,afterTest(),Method,,,,com.networknt.audit.AuditHandlerTest+auditLogger com.networknt.audit.AuditHandlerTest+mockAppender,145,5,1,,"@After
    public void afterTest() throws Exception {
        // remove the mock appender
        auditLogger.detachAppender(mockAppender);
    }",True
12,verifyAuditLog(String),Method,,,com.networknt.config.JsonMapper+string2Map(String) com.networknt.config.JsonMapper+string2Map(String) java.util.stream.Stream+allMatch(Predicate) java.util.Arrays+stream(T[]) java.util.Arrays+stream(T[]) java.util.stream.Stream+allMatch(Predicate) java.util.Map+containsKey(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object),com.networknt.audit.AuditHandlerTest+mockAppender com.networknt.audit.AuditHandlerTest+captorLoggingEvent com.networknt.audit.AuditHandlerTest+captorLoggingEvent com.networknt.audit.AuditHandlerTest+requiredKeys com.networknt.utility.Constants+TRACEABILITY_ID_STRING com.networknt.utility.Constants+CORRELATION_ID_STRING com.networknt.audit.AuditHandler+STATUS_CODE,669,11,2,,"private void verifyAuditLog(String traceVal) {
        verify(mockAppender, times(1)).doAppend(captorLoggingEvent.capture());
        ILoggingEvent event = captorLoggingEvent.getValue();
        Map<String, Object> mapValue = JsonMapper.string2Map(event.getFormattedMessage());

        Assert.assertEquals(Level.INFO, event.getLevel());
        Assert.assertTrue(Arrays.stream(requiredKeys).allMatch(mapValue::containsKey));
        Assert.assertEquals(traceVal, mapValue.get(Constants.TRACEABILITY_ID_STRING));
        Assert.assertNotNull(mapValue.get(Constants.CORRELATION_ID_STRING));
        Assert.assertEquals(200, mapValue.get(AuditHandler.STATUS_CODE));
    }",True
13,verifyAuditErrorStatus(),Method,testAuditWithErrorStatus(),,com.networknt.config.JsonMapper+string2Map(String) com.networknt.config.JsonMapper+string2Map(String) java.lang.Object+toString() java.util.Map+get(Object) java.util.Map+get(Object) java.lang.Object+toString(),com.networknt.audit.AuditHandlerTest+mockAppender com.networknt.audit.AuditHandlerTest+captorLoggingEvent com.networknt.audit.AuditHandlerTest+captorLoggingEvent,475,7,2,,"private void verifyAuditErrorStatus() {
        verify(mockAppender, times(1)).doAppend(captorLoggingEvent.capture());
        ILoggingEvent event = captorLoggingEvent.getValue();
        Map<String, Object> mapValue = JsonMapper.string2Map(event.getFormattedMessage());

        Assert.assertEquals(""{statusCode=401, code=ERR10001, severity=ERROR, message=AUTH_TOKEN_EXPIRED, description=Jwt token in authorization header expired}"", mapValue.get(""Status"").toString());
    }",True
14,"verifyAuditInfo(String,String)",Method,testAudit401WithDumpRequest() testAudit200WithDumpRequest() testAuditWithDumpResponse() testAuditWithoutDumpResponse() testAudit200WithQueryParameters() testAudit401WithQueryParameters() testAudit200WithoutQueryParameters() testAudit401WithoutQueryParameters() testAuditWith200PathParameters() testAuditWith401PathParameters() testAuditWith200Cookies() testAuditWith401Cookies() testAuditWith200ServiceId() testAuditWith401ServiceId() testAuditWith200TimestampFormatted() testAuditWith401TimestampFormatted(),,com.networknt.config.JsonMapper+string2Map(String) com.networknt.config.JsonMapper+string2Map(String) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object),com.networknt.audit.AuditHandlerTest+mockAppender com.networknt.audit.AuditHandlerTest+captorLoggingEvent com.networknt.audit.AuditHandlerTest+captorLoggingEvent,458,10,2,,"private void verifyAuditInfo(String key, String value) {
        verify(mockAppender, times(1)).doAppend(captorLoggingEvent.capture());
        ILoggingEvent event = captorLoggingEvent.getValue();
        Map<String, Object> mapValue = JsonMapper.string2Map(event.getFormattedMessage());
        if (value == null) {
            Assert.assertNull(mapValue.get(key));
        } else {
            Assert.assertEquals(value, mapValue.get(key));
        }
    }",True
15,testAuditWithTrace(),Method,,,"com.networknt.client.Http2Client+getInstance() com.networknt.client.Http2Client+getInstance() java.util.concurrent.CountDownLatch+CountDownLatch(int) com.networknt.client.Http2Client+connect(URI,XnioWorker,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+connect(URI,XnioWorker,ByteBufferPool,OptionMap) java.net.URI+URI(String) com.networknt.exception.ClientException+ClientException(Throwable) +() +run()",com.networknt.client.Http2Client+WORKER com.networknt.client.Http2Client+BUFFER_POOL,3430,42,1,,"@Test
    public void testAuditWithTrace() throws Exception {
        final AtomicReference<ClientResponse> reference = new AtomicReference<>();
        final Http2Client client = Http2Client.getInstance();
        final CountDownLatch latch = new CountDownLatch(1);
        final ClientConnection connection;
        try {
            connection = client.connect(new URI(""http://localhost:8080""), Http2Client.WORKER, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
        } catch (Exception e) {
            throw new ClientException(e);
        }

        try {
            String post = ""post"";
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(""/pet"");
                    request.getRequestHeaders().put(Headers.HOST, ""localhost"");
                    request.getRequestHeaders().put(HttpStringConstants.TRACEABILITY_ID, ""tid"");
                    request.getRequestHeaders().put(Headers.AUTHORIZATION, ""Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA"");
                    request.getRequestHeaders().put(HttpStringConstants.SCOPE_TOKEN, ""Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA"");
                    request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");
                    connection.sendRequest(request, client.createClientCallback(reference, latch, post));
                }
            });

            latch.await(10, TimeUnit.SECONDS);
        } catch (Exception e) {
            logger.error(""IOException: "", e);
            throw new ClientException(e);
        } finally {
            IoUtils.safeClose(connection);
        }
        Assert.assertEquals(""OK"", reference.get().getAttachment(Http2Client.RESPONSE_BODY));

        try {
            Thread.sleep(100);
        } catch (InterruptedException ignored) {
        }
        verifyAuditLog(""tid"");
    }",False
16,testAuditWithoutTrace(),Method,,,"com.networknt.client.Http2Client+getInstance() com.networknt.client.Http2Client+getInstance() java.util.concurrent.CountDownLatch+CountDownLatch(int) com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) java.net.URI+URI(String) com.networknt.exception.ClientException+ClientException(Throwable) +() +run()",com.networknt.client.Http2Client+WORKER com.networknt.client.Http2Client+SSL com.networknt.client.Http2Client+BUFFER_POOL,3352,41,1,,"@Test
    public void testAuditWithoutTrace() throws Exception {
        final AtomicReference<ClientResponse> reference = new AtomicReference<>();
        final Http2Client client = Http2Client.getInstance();
        final CountDownLatch latch = new CountDownLatch(1);
        final ClientConnection connection;
        try {
            connection = client.connect(new URI(""http://localhost:8080""), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
        } catch (Exception e) {
            throw new ClientException(e);
        }

        try {
            String post = ""post"";
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(""/pet"");
                    request.getRequestHeaders().put(Headers.HOST, ""localhost"");
                    request.getRequestHeaders().put(Headers.AUTHORIZATION, ""Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA"");
                    request.getRequestHeaders().put(HttpStringConstants.SCOPE_TOKEN, ""Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA"");
                    request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");
                    connection.sendRequest(request, client.createClientCallback(reference, latch, post));
                }
            });

            latch.await(10, TimeUnit.SECONDS);
        } catch (Exception e) {
            logger.error(""IOException: "", e);
            throw new ClientException(e);
        } finally {
            IoUtils.safeClose(connection);
        }
        Assert.assertEquals(""OK"", reference.get().getAttachment(Http2Client.RESPONSE_BODY));

        try {
            Thread.sleep(100);
        } catch (InterruptedException ignored) {
        }
        verifyAuditLog(null);
    }",False
17,testAuditWithErrorStatus(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditErrorStatus() com.networknt.audit.AuditHandlerTest+verifyAuditErrorStatus()",,153,5,1,,"@Test
    public void testAuditWithErrorStatus() throws Exception {
        runTest(""/error"", ""post"", null, 401);
        verifyAuditErrorStatus();
    }",False
18,testAudit401WithDumpRequest(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,170,5,1,,"@Test
    public void testAudit401WithDumpRequest() throws Exception {
        runTest(""/error"", ""post"", null, 401);
        verifyAuditInfo(""requestBody"", ""post"");
    }",False
19,testAudit200WithDumpRequest(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,168,5,1,,"@Test
    public void testAudit200WithDumpRequest() throws Exception {
        runTest(""/pet"", ""post"", null, 200);
        verifyAuditInfo(""requestBody"", ""post"");
    }",False
20,testAuditWithDumpResponse(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,327,5,1,,"@Test
    public void testAuditWithDumpResponse() throws Exception {
        runTest(""/error"", ""post"", null, 401);
        verifyAuditInfo(""responseBody"", ""{\""statusCode\"":401,\""code\"":\""ERR10001\"",\""message\"":\""AUTH_TOKEN_EXPIRED\"",\""description\"":\""Jwt token in authorization header expired\"",\""severity\"":\""ERROR\""}"");
    }",False
21,testAuditWithoutDumpResponse(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,168,5,1,,"@Test
    public void testAuditWithoutDumpResponse() throws Exception {
        runTest(""/pet"", ""post"", null, 200);
        verifyAuditInfo(""responseBody"", null);
    }",False
22,testAudit200WithQueryParameters(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,193,5,1,,"@Test
    public void testAudit200WithQueryParameters() throws Exception {
        runTest(""/pet?testId=1"", ""post"", null, 200);
        verifyAuditInfo(""queryParameters"", ""{testId=[1]}"");
    }",False
23,testAudit401WithQueryParameters(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,195,5,1,,"@Test
    public void testAudit401WithQueryParameters() throws Exception {
        runTest(""/error?testId=1"", ""post"", null, 401);
        verifyAuditInfo(""queryParameters"", ""{testId=[1]}"");
    }",False
24,testAudit200WithoutQueryParameters(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,177,5,1,,"@Test
    public void testAudit200WithoutQueryParameters() throws Exception {
        runTest(""/pet"", ""post"", null, 200);
        verifyAuditInfo(""queryParameters"", null);
    }",False
25,testAudit401WithoutQueryParameters(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,179,5,1,,"@Test
    public void testAudit401WithoutQueryParameters() throws Exception {
        runTest(""/error"", ""post"", null, 401);
        verifyAuditInfo(""queryParameters"", null);
    }",False
26,testAuditWith200PathParameters(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,191,5,1,,"@Test
    public void testAuditWith200PathParameters() throws Exception {
        runTest(""/pet/1,2,3"", ""post"", null, 200);
        verifyAuditInfo(""pathParameters"", ""{petId=[1,2,3]}"");
    }",False
27,testAuditWith401PathParameters(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,193,5,1,,"@Test
    public void testAuditWith401PathParameters() throws Exception {
        runTest(""/error/1,2,3"", ""post"", null, 401);
        verifyAuditInfo(""pathParameters"", ""{petId=[1,2,3]}"");
    }",False
28,testAuditWith200Cookies(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,179,5,1,,"@Test
    public void testAuditWith200Cookies() throws Exception {
        runTest(""/pet"", ""post"", ""petsId=1"", 200);
        verifyAuditInfo(""requestCookies"", ""{petsId=1}"");
    }",False
29,testAuditWith401Cookies(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,181,5,1,,"@Test
    public void testAuditWith401Cookies() throws Exception {
        runTest(""/error"", ""post"", ""petsId=1"", 401);
        verifyAuditInfo(""requestCookies"", ""{petsId=1}"");
    }",False
30,testAuditWith200ServiceId(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,188,5,1,,"@Test
    public void testAuditWith200ServiceId() throws Exception {
        runTest(""/pet"", ""post"", null, 200);
        verifyAuditInfo(""serviceId"", ""com.networknt.petstore-1.0.0"");
    }",False
31,testAuditWith401ServiceId(),Method,,,"com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,190,5,1,,"@Test
    public void testAuditWith401ServiceId() throws Exception {
        runTest(""/error"", ""post"", null, 401);
        verifyAuditInfo(""serviceId"", ""com.networknt.petstore-1.0.0"");
    }",False
32,testAuditWith200TimestampFormatted(),Method,,,"java.time.Instant+ofEpochMilli(long) java.time.Instant+ofEpochMilli(long) java.time.Instant+now() java.time.Instant+now() com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,444,10,1,,"@Test
    public void testAuditWith200TimestampFormatted() throws Exception {
        long time = 1607639411945L;
        Instant instant = Instant.ofEpochMilli(time);
        PowerMockito.mockStatic(System.class);
        PowerMockito.mockStatic(Instant.class);
        PowerMockito.when(Instant.now()).thenReturn(instant);
        runTest(""/pet"", ""post"", null, 200);
        verifyAuditInfo(""timestamp"", ""2020-12-10T17:30:11.945-0500"");
    }",False
33,testAuditWith401TimestampFormatted(),Method,,,"java.time.Instant+ofEpochMilli(long) java.time.Instant+ofEpochMilli(long) java.time.Instant+now() java.time.Instant+now() com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+runTest(String,String,String,int) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String) com.networknt.audit.AuditHandlerTest+verifyAuditInfo(String,String)",,400,10,1,,"@Test
    public void testAuditWith401TimestampFormatted() throws Exception {
        long time = 1607639411945L;
        Instant instant = Instant.ofEpochMilli(time);
        PowerMockito.mockStatic(Instant.class);
        PowerMockito.when(Instant.now()).thenReturn(instant);

        runTest(""/error"", ""post"", null, 401);
        verifyAuditInfo(""timestamp"", ""2020-12-10T17:30:11.945-0500"");
    }",False
34,testAuditWith200TimestampLong(),Method,,,com.networknt.audit.AuditHandlerTest+testTimestampInitHelper(String) com.networknt.audit.AuditHandlerTest+testTimestampInitHelper(String) java.util.Map+get(Object) java.util.Map+get(Object),,266,5,1,,"@Test //used for testing when doesn't specify timestampFormat
    public void testAuditWith200TimestampLong() throws Exception {
        Map<String, Object> map = testTimestampInitHelper(null);
        Assert.assertEquals(1607639411945L, map.get(""timestamp""));
    }",False
35,testAuditWith200TimestampInvalidFormat(),Method,,,com.networknt.audit.AuditHandlerTest+testTimestampInitHelper(String) com.networknt.audit.AuditHandlerTest+testTimestampInitHelper(String) java.util.Map+get(Object) java.util.Map+get(Object),,290,5,1,,"@Test //used for testing when user specified a wrong format timestampFormat
    public void testAuditWith200TimestampInvalidFormat() throws Exception {
        Map<String, Object> map = testTimestampInitHelper(""abc"");
        Assert.assertEquals(1607639411945L, map.get(""timestamp""));
    }",False
36,testTimestampInitHelper(String),Method,testAuditWith200TimestampLong() testAuditWith200TimestampInvalidFormat(),,java.util.concurrent.atomic.AtomicReference+set(V) java.util.concurrent.atomic.AtomicReference+set(V) com.networknt.audit.AuditConfig+getAuditFunc() com.networknt.audit.AuditConfig+getAuditFunc() com.networknt.audit.AuditConfig+getTimestampFormat() com.networknt.audit.AuditConfig+getTimestampFormat() com.networknt.config.Config+getMapper() com.networknt.config.Config+getMapper() com.networknt.audit.AuditConfig+getConfig() com.networknt.audit.AuditConfig+getConfig() com.networknt.audit.AuditConfig+load() com.networknt.audit.AuditConfig+load() com.networknt.audit.AuditHandler+AuditHandler() java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() com.networknt.handler.Handler+init() com.networknt.handler.Handler+init() com.networknt.audit.AuditHandler+handleRequest(HttpServerExchange) com.networknt.audit.AuditHandler+handleRequest(HttpServerExchange) com.networknt.config.JsonMapper+string2Map(String) com.networknt.config.JsonMapper+string2Map(String) java.util.concurrent.atomic.AtomicReference+get() java.util.concurrent.atomic.AtomicReference+get(),,1455,30,2,,"private Map<String, Object> testTimestampInitHelper(String o) throws Exception {
        PowerMockito.mockStatic(AuditConfig.class);
        AtomicReference<String> content = new AtomicReference<>("""");
        Consumer<String> consumer = (str) -> content.set(str);
        // mock handler
        AuditConfig auditConfig = Mockito.mock(AuditConfig.class);
        when(auditConfig.getAuditFunc()).thenReturn(consumer);

        Mockito.when(auditConfig.getTimestampFormat()).thenReturn(o);
        Config config = Mockito.mock(Config.class);
        when(config.getMapper()).thenReturn(new ObjectMapper());
        Mockito.when(auditConfig.getConfig()).thenReturn(config);
        PowerMockito.when(AuditConfig.load()).thenReturn(auditConfig);
        AuditHandler auditHandler = Mockito.spy(new AuditHandler());
        Mockito.doNothing().when(auditHandler).next(Mockito.any());

        // mock exchange
        HeaderMap headerMap = Mockito.spy(new HeaderMap());
        HttpServerExchange httpServerExchange = Mockito.mock(HttpServerExchange.class);
        Mockito.when(httpServerExchange.getRequestHeaders()).thenReturn(headerMap);

        long time = 1607639411945L;
        // mock time
        PowerMockito.mockStatic(System.class);
        PowerMockito.when(System.currentTimeMillis()).thenReturn(time);

        Handler.init();
        auditHandler.handleRequest(httpServerExchange);
        return JsonMapper.string2Map(content.get());
    }",False
37,shouldAddListenerIfIsStatusCodeAndIsResponseTimeAreTrue(),Method,,,com.networknt.audit.AuditConfig+isResponseTime() com.networknt.audit.AuditConfig+isResponseTime() com.networknt.audit.AuditConfig+isStatusCode() com.networknt.audit.AuditConfig+isStatusCode() com.networknt.audit.AuditConfig+load() com.networknt.audit.AuditConfig+load() com.networknt.audit.AuditHandler+AuditHandler() com.networknt.handler.Handler+init() com.networknt.handler.Handler+init() com.networknt.audit.AuditHandler+handleRequest(HttpServerExchange) com.networknt.audit.AuditHandler+handleRequest(HttpServerExchange),,975,22,1,,"@Test
    public void shouldAddListenerIfIsStatusCodeAndIsResponseTimeAreTrue() throws Exception {
        PowerMockito.mockStatic(AuditConfig.class);

        AuditConfig configHandler = Mockito.mock(AuditConfig.class);
        Mockito.when(configHandler.isResponseTime()).thenReturn(true);
        Mockito.when(configHandler.isStatusCode()).thenReturn(true);

        Mockito.when(AuditConfig.load()).thenReturn(configHandler);

        HeaderMap headerMap = Mockito.spy(new HeaderMap());
        HttpServerExchange httpServerExchange = Mockito.mock(HttpServerExchange.class);
        Mockito.when(httpServerExchange.getRequestHeaders()).thenReturn(headerMap);

        AuditHandler auditHandler = Mockito.spy(new AuditHandler());
        Mockito.doNothing().when(auditHandler).next(Mockito.any());

        Handler.init();

        auditHandler.handleRequest(httpServerExchange);
        Mockito.verify(httpServerExchange).addExchangeCompleteListener(Mockito.any());
    }",False
38,shouldAddListenerIfIsStatusCodeIsFalseAndIsResponseTimeIsTrue(),Method,,,com.networknt.audit.AuditConfig+isResponseTime() com.networknt.audit.AuditConfig+isResponseTime() com.networknt.audit.AuditConfig+isStatusCode() com.networknt.audit.AuditConfig+isStatusCode() com.networknt.audit.AuditConfig+load() com.networknt.audit.AuditConfig+load() com.networknt.audit.AuditHandler+AuditHandler() com.networknt.handler.Handler+init() com.networknt.handler.Handler+init() com.networknt.audit.AuditHandler+handleRequest(HttpServerExchange) com.networknt.audit.AuditHandler+handleRequest(HttpServerExchange),,982,22,1,,"@Test
    public void shouldAddListenerIfIsStatusCodeIsFalseAndIsResponseTimeIsTrue() throws Exception {
        PowerMockito.mockStatic(AuditConfig.class);

        AuditConfig configHandler = Mockito.mock(AuditConfig.class);
        Mockito.when(configHandler.isResponseTime()).thenReturn(true);
        Mockito.when(configHandler.isStatusCode()).thenReturn(false);

        Mockito.when(AuditConfig.load()).thenReturn(configHandler);

        HeaderMap headerMap = Mockito.spy(new HeaderMap());
        HttpServerExchange httpServerExchange = Mockito.mock(HttpServerExchange.class);
        Mockito.when(httpServerExchange.getRequestHeaders()).thenReturn(headerMap);

        AuditHandler auditHandler = Mockito.spy(new AuditHandler());
        Mockito.doNothing().when(auditHandler).next(Mockito.any());

        Handler.init();

        auditHandler.handleRequest(httpServerExchange);
        Mockito.verify(httpServerExchange).addExchangeCompleteListener(Mockito.any());
    }",False
39,shouldAddListenerIfIsStatusCodeIsTrueAndIsResponseTimeIsFalse(),Method,,,com.networknt.audit.AuditConfig+isResponseTime() com.networknt.audit.AuditConfig+isResponseTime() com.networknt.audit.AuditConfig+isStatusCode() com.networknt.audit.AuditConfig+isStatusCode() com.networknt.audit.AuditConfig+load() com.networknt.audit.AuditConfig+load() com.networknt.audit.AuditHandler+AuditHandler() com.networknt.handler.Handler+init() com.networknt.handler.Handler+init() com.networknt.audit.AuditHandler+handleRequest(HttpServerExchange) com.networknt.audit.AuditHandler+handleRequest(HttpServerExchange),,982,22,1,,"@Test
    public void shouldAddListenerIfIsStatusCodeIsTrueAndIsResponseTimeIsFalse() throws Exception {
        PowerMockito.mockStatic(AuditConfig.class);

        AuditConfig configHandler = Mockito.mock(AuditConfig.class);
        Mockito.when(configHandler.isResponseTime()).thenReturn(false);
        Mockito.when(configHandler.isStatusCode()).thenReturn(true);

        Mockito.when(AuditConfig.load()).thenReturn(configHandler);

        HeaderMap headerMap = Mockito.spy(new HeaderMap());
        HttpServerExchange httpServerExchange = Mockito.mock(HttpServerExchange.class);
        Mockito.when(httpServerExchange.getRequestHeaders()).thenReturn(headerMap);

        AuditHandler auditHandler = Mockito.spy(new AuditHandler());
        Mockito.doNothing().when(auditHandler).next(Mockito.any());

        Handler.init();

        auditHandler.handleRequest(httpServerExchange);
        Mockito.verify(httpServerExchange).addExchangeCompleteListener(Mockito.any());
    }",False
40,shouldNotAddListenerIfStatusCodeAndResponseTimeAreFalse(),Method,,,com.networknt.config.Config+getMapper() com.networknt.config.Config+getMapper() com.networknt.audit.AuditConfig+isResponseTime() com.networknt.audit.AuditConfig+isResponseTime() com.networknt.audit.AuditConfig+isStatusCode() com.networknt.audit.AuditConfig+isStatusCode() com.networknt.audit.AuditConfig+getAuditFunc() com.networknt.audit.AuditConfig+getAuditFunc() com.networknt.audit.AuditConfig+getConfig() com.networknt.audit.AuditConfig+getConfig() com.networknt.audit.AuditConfig+load() com.networknt.audit.AuditConfig+load() com.networknt.audit.AuditHandler+AuditHandler() com.networknt.handler.Handler+init() com.networknt.handler.Handler+init() com.networknt.audit.AuditHandler+handleRequest(HttpServerExchange) com.networknt.audit.AuditHandler+handleRequest(HttpServerExchange),,1395,29,1,,"@Test
    public void shouldNotAddListenerIfStatusCodeAndResponseTimeAreFalse() throws Exception {
        PowerMockito.mockStatic(AuditConfig.class);
        Consumer<String> auditFunc= (Consumer<String>) Mockito.spy(Consumer.class);
        ObjectMapper objectMapper = Mockito.mock(ObjectMapper.class);

        Config config = Mockito.mock(Config.class);
        Mockito.when(config.getMapper()).thenReturn(objectMapper);

        AuditConfig configHandler = Mockito.mock(AuditConfig.class);
        Mockito.when(configHandler.isResponseTime()).thenReturn(false);
        Mockito.when(configHandler.isStatusCode()).thenReturn(false);
        Mockito.when(configHandler.getAuditFunc()).thenReturn(auditFunc);
        Mockito.when(configHandler.getConfig()).thenReturn(config);

        Mockito.when(AuditConfig.load()).thenReturn(configHandler);

        HttpServerExchange httpServerExchange = Mockito.mock(HttpServerExchange.class);

        AuditHandler auditHandler = Mockito.spy(new AuditHandler());
        Mockito.doNothing().when(auditHandler).next(Mockito.any());

        Handler.init();

        auditHandler.handleRequest(httpServerExchange);
        Mockito.verify(httpServerExchange, Mockito.never()).addExchangeCompleteListener(Mockito.any());
        Mockito.verify(auditFunc).accept(Mockito.any());
        Mockito.verify(objectMapper).writeValueAsString(Mockito.any());
    }",False
41,ArgumentMatcherAuditInfo,MemberClass,,,com.networknt.audit.AuditHandlerTest.ArgumentMatcherAuditInfo+matches(AttachmentKey),,388,10,10,,"private static class ArgumentMatcherAuditInfo implements ArgumentMatcher<AttachmentKey<Map>> {

        @Override
        public boolean matches(AttachmentKey<Map> attachmentKey) {
            if (attachmentKey == null) {
                return false;
            }
            return attachmentKey.toString().equals(""io.undertow.util.SimpleAttachmentKey<java.util.Map>"");
        }
    }",False
42,ArgumentMatcherChainId,MemberClass,,,com.networknt.audit.AuditHandlerTest.ArgumentMatcherChainId+matches(AttachmentKey),,395,10,10,,"private static class ArgumentMatcherChainId implements ArgumentMatcher<AttachmentKey<String>> {

        @Override
        public boolean matches(AttachmentKey<String> attachmentKey) {
            if (attachmentKey == null) {
                return false;
            }
            return attachmentKey.toString().equals(""io.undertow.util.SimpleAttachmentKey<java.lang.String>"");
        }
    }",False
43,ArgumentMatcherChainSeq,MemberClass,,,com.networknt.audit.AuditHandlerTest.ArgumentMatcherChainSeq+matches(AttachmentKey),,399,10,10,,"private static class ArgumentMatcherChainSeq implements ArgumentMatcher<AttachmentKey<Integer>> {

        @Override
        public boolean matches(AttachmentKey<Integer> attachmentKey) {
            if (attachmentKey == null) {
                return false;
            }
            return attachmentKey.toString().equals(""io.undertow.util.SimpleAttachmentKey<java.lang.Integer>"");
        }
    }",False
44,"runTest(String,String,String,int)",Method,testAuditWithErrorStatus() testAudit401WithDumpRequest() testAudit200WithDumpRequest() testAuditWithDumpResponse() testAuditWithoutDumpResponse() testAudit200WithQueryParameters() testAudit401WithQueryParameters() testAudit200WithoutQueryParameters() testAudit401WithoutQueryParameters() testAuditWith200PathParameters() testAuditWith401PathParameters() testAuditWith200Cookies() testAuditWith401Cookies() testAuditWith200ServiceId() testAuditWith401ServiceId() testAuditWith200TimestampFormatted() testAuditWith401TimestampFormatted(),,"com.networknt.client.Http2Client+getInstance() com.networknt.client.Http2Client+getInstance() java.util.concurrent.CountDownLatch+CountDownLatch(int) com.networknt.client.Http2Client+connect(URI,XnioWorker,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+connect(URI,XnioWorker,ByteBufferPool,OptionMap) java.net.URI+URI(String) com.networknt.exception.ClientException+ClientException(Throwable) +() +run()",com.networknt.client.Http2Client+WORKER com.networknt.client.Http2Client+BUFFER_POOL,3660,44,2,,"private void runTest(String path, String body, String cookies, int expectStatus) throws ClientException {
        final AtomicReference<ClientResponse> reference = new AtomicReference<>();
        final Http2Client client = Http2Client.getInstance();
        final CountDownLatch latch = new CountDownLatch(1);
        final ClientConnection connection;
        try {
            connection = client.connect(new URI(""http://localhost:8080""), Http2Client.WORKER, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
        } catch (Exception e) {
            throw new ClientException(e);
        }

        try {
            String post = body;
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(path);
                    request.getRequestHeaders().put(Headers.CONTENT_TYPE, ""text/plain"");
                    request.getRequestHeaders().put(Headers.HOST, ""localhost"");
                    request.getRequestHeaders().put(HttpStringConstants.TRACEABILITY_ID, ""tid"");
                    request.getRequestHeaders().put(Headers.AUTHORIZATION, ""Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA"");
                    request.getRequestHeaders().put(HttpStringConstants.SCOPE_TOKEN, ""Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA"");
                    request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");
                    if (cookies != null) {
                        request.getRequestHeaders().put(Headers.COOKIE, cookies);
                    }
                    connection.sendRequest(request, client.createClientCallback(reference, latch, post));
                }
            });

            latch.await(10, TimeUnit.SECONDS);
        } catch (Exception e) {
            logger.error(""IOException: "", e);
            throw new ClientException(e);
        } finally {
            IoUtils.safeClose(connection);
        }
        Assert.assertEquals(expectStatus, reference.get().getResponseCode());

        try {
            Thread.sleep(100);
        } catch (InterruptedException ignored) {
        }
    }",True
