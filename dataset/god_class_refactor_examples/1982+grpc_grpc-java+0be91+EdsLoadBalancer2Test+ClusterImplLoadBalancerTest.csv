index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,CLUSTER,Field,,,,,67,1,26,,"private static final String CLUSTER = ""cluster-foo.googleapis.com"";",False
2,AUTHORITY,Field,,,,,57,1,26,,"private static final String AUTHORITY = ""api.google.com"";",False
3,EDS_SERVICE_NAME,Field,,,,,72,1,26,,"private static final String EDS_SERVICE_NAME = ""service.googleapis.com"";",False
4,LRS_SERVER_NAME,Field,,,,,67,1,26,,"private static final String LRS_SERVER_NAME = ""lrs.googleapis.com"";",False
5,locality1,Field,,,,,104,2,18,,"private final Locality locality1 =
      new Locality(""test-region-1"", ""test-zone-1"", ""test-subzone-1"");",False
6,locality2,Field,,,,,104,2,18,,"private final Locality locality2 =
      new Locality(""test-region-2"", ""test-zone-2"", ""test-subzone-2"");",False
7,locality3,Field,,,,,104,2,18,,"private final Locality locality3 =
      new Locality(""test-region-3"", ""test-zone-3"", ""test-subzone-3"");",False
8,syncContext,Field,,,,,264,7,18,,"private final SynchronizationContext syncContext = new SynchronizationContext(
      new Thread.UncaughtExceptionHandler() {
        @Override
        public void uncaughtException(Thread t, Throwable e) {
          throw new AssertionError(e);
        }
      });",False
9,fakeClock,Field,,,,,52,1,18,,private final FakeClock fakeClock = new FakeClock();,False
10,registry,Field,,,,,73,1,18,,private final LoadBalancerRegistry registry = new LoadBalancerRegistry();,False
11,roundRobin,Field,,,,,120,2,18,,"private final PolicySelection roundRobin =
      new PolicySelection(new FakeLoadBalancerProvider(""round_robin""), null);",False
12,weightedTarget,Field,,,,,138,2,18,,"private final PolicySelection weightedTarget =
      new PolicySelection(new FakeLoadBalancerProvider(WEIGHTED_TARGET_POLICY_NAME), null);",False
13,downstreamBalancers,Field,,,,,77,1,18,,private final List<FakeLoadBalancer> downstreamBalancers = new ArrayList<>();,True
14,xdsClient,Field,,,,,60,1,18,,private final FakeXdsClient xdsClient = new FakeXdsClient();,False
15,xdsClientPool,Field,,,,,302,13,18,,"private final ObjectPool<XdsClient> xdsClientPool = new ObjectPool<XdsClient>() {
    @Override
    public XdsClient getObject() {
      xdsClientRefs++;
      return xdsClient;
    }

    @Override
    public XdsClient returnObject(Object object) {
      xdsClientRefs--;
      return null;
    }
  };",False
16,helper,Field,,,,,56,1,2,,private LoadBalancer.Helper helper = new FakeLbHelper();,False
17,mockRandom,Field,,,,,44,2,2,,"@Mock
  private ThreadSafeRandom mockRandom;",True
18,xdsClientRefs,Field,,,,,26,1,2,,private int xdsClientRefs;,False
19,currentState,Field,,,,,39,1,2,,private ConnectivityState currentState;,False
20,currentPicker,Field,,,,,39,1,2,,private SubchannelPicker currentPicker;,False
21,loadBalancer,Field,,,,,38,1,2,,private EdsLoadBalancer2 loadBalancer;,False
22,setUp(),Method,,,"+() +getOrCreate(String,String)",,1122,27,1,,"@Before
  public void setUp() {
    MockitoAnnotations.initMocks(this);

    CallCounterProvider callCounterProvider = new CallCounterProvider() {
      @Override
      public AtomicLong getOrCreate(String cluster, @Nullable String edsServiceName) {
        return new AtomicLong();
      }
    };

    registry.register(new FakeLoadBalancerProvider(PRIORITY_POLICY_NAME));
    registry.register(new FakeLoadBalancerProvider(LRS_POLICY_NAME));
    loadBalancer = new EdsLoadBalancer2(helper, registry, mockRandom);
    loadBalancer.handleResolvedAddresses(
        ResolvedAddresses.newBuilder()
            .setAddresses(Collections.<EquivalentAddressGroup>emptyList())
            .setAttributes(
                Attributes.newBuilder()
                    .set(XdsAttributes.XDS_CLIENT_POOL, xdsClientPool)
                    .set(XdsAttributes.CALL_COUNTER_PROVIDER, callCounterProvider)
                    .build())
            .setLoadBalancingPolicyConfig(
                new EdsConfig(
                    CLUSTER, EDS_SERVICE_NAME, LRS_SERVER_NAME, null, weightedTarget, roundRobin))
            .build());
  }",False
23,tearDown(),Method,,,io.grpc.xds.EdsLoadBalancer2+shutdown() io.grpc.xds.EdsLoadBalancer2+shutdown(),io.grpc.xds.EdsLoadBalancer2Test+loadBalancer io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+watchers io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+clusterStats io.grpc.xds.EdsLoadBalancer2Test+xdsClientRefs io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers,253,8,1,,"@After
  public void tearDown() {
    loadBalancer.shutdown();
    assertThat(xdsClient.watchers).isEmpty();
    assertThat(xdsClient.clusterStats).isEmpty();
    assertThat(xdsClientRefs).isEqualTo(0);
    assertThat(downstreamBalancers).isEmpty();
  }",False
24,receiveFirstEndpointResource(),Method,,,"io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString()",io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.EdsLoadBalancer2Test+locality3 io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+name io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+config io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+priorities io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+childConfigs io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+weight io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+weight io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+childConfigs io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality3 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+weight io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+locality3 io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+addresses io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+addresses io.grpc.xds.EdsLoadBalancer2Test+locality3,3964,69,1,,"@Test
  public void receiveFirstEndpointResource() {
    EquivalentAddressGroup endpoint1 = makeAddress(""endpoint-addr-1"");
    EquivalentAddressGroup endpoint2 = makeAddress(""endpoint-addr-2"");
    EquivalentAddressGroup endpoint3 = makeAddress(""endpoint-addr-3"");
    EquivalentAddressGroup endpoint4 = makeAddress(""endpoint-addr-4"");
    LocalityLbEndpoints localityLbEndpoints1 =
        buildLocalityLbEndpoints(1, 70, ImmutableMap.of(endpoint1, true, endpoint2, true));
    LocalityLbEndpoints localityLbEndpoints2 =
        buildLocalityLbEndpoints(1, 10, Collections.singletonMap(endpoint3, true));
    LocalityLbEndpoints localityLbEndpoints3 =
        buildLocalityLbEndpoints(2, 20, Collections.singletonMap(endpoint4, true));
    xdsClient.deliverClusterLoadAssignment(
        EDS_SERVICE_NAME,
        ImmutableMap.of(
            locality1, localityLbEndpoints1,
            locality2, localityLbEndpoints2,
            locality3, localityLbEndpoints3));
    assertThat(downstreamBalancers).hasSize(1);
    FakeLoadBalancer childBalancer = Iterables.getOnlyElement(downstreamBalancers);
    assertThat(childBalancer.name).isEqualTo(PRIORITY_POLICY_NAME);
    PriorityLbConfig config = (PriorityLbConfig) childBalancer.config;
    assertThat(config.priorities).containsExactly(""priority1"", ""priority2"");
    PolicySelection child1 = config.childConfigs.get(""priority1"");
    assertThat(child1.getProvider().getPolicyName()).isEqualTo(WEIGHTED_TARGET_POLICY_NAME);
    WeightedTargetConfig childConfig1 = (WeightedTargetConfig) child1.getConfig();
    assertThat(childConfig1.targets).hasSize(2);
    WeightedPolicySelection target1 = childConfig1.targets.get(locality1.toString());
    assertThat(target1.weight).isEqualTo(70);
    assertThat(target1.policySelection.getProvider().getPolicyName()).isEqualTo(LRS_POLICY_NAME);
    assertLrsConfig((LrsConfig) target1.policySelection.getConfig(), CLUSTER, EDS_SERVICE_NAME,
        LRS_SERVER_NAME, locality1, ""round_robin"");
    WeightedPolicySelection target2 = childConfig1.targets.get(locality2.toString());
    assertThat(target2.weight).isEqualTo(10);
    assertThat(target2.policySelection.getProvider().getPolicyName()).isEqualTo(LRS_POLICY_NAME);
    assertLrsConfig((LrsConfig) target2.policySelection.getConfig(), CLUSTER, EDS_SERVICE_NAME,
        LRS_SERVER_NAME, locality2, ""round_robin"");

    PolicySelection child2 = config.childConfigs.get(""priority2"");
    assertThat(child2.getProvider().getPolicyName()).isEqualTo(WEIGHTED_TARGET_POLICY_NAME);
    WeightedTargetConfig childConfig2 = (WeightedTargetConfig) child2.getConfig();
    assertThat(childConfig2.targets).hasSize(1);
    WeightedPolicySelection target3 = childConfig2.targets.get(locality3.toString());
    assertThat(target3.weight).isEqualTo(20);
    assertThat(target3.policySelection.getProvider().getPolicyName()).isEqualTo(LRS_POLICY_NAME);
    assertLrsConfig((LrsConfig) target3.policySelection.getConfig(), CLUSTER, EDS_SERVICE_NAME,
        LRS_SERVER_NAME, locality3, ""round_robin"");

    List<EquivalentAddressGroup> priorityAddr1 =
        AddressFilter.filter(childBalancer.addresses, ""priority1"");
    assertThat(priorityAddr1).hasSize(3);
    assertAddressesEqual(
        Arrays.asList(endpoint1, endpoint2, endpoint3),
        priorityAddr1);
    assertAddressesEqual(
        Arrays.asList(endpoint1, endpoint2),
        AddressFilter.filter(priorityAddr1, locality1.toString()));
    assertAddressesEqual(
        Collections.singletonList(endpoint3),
        AddressFilter.filter(priorityAddr1, locality2.toString()));

    List<EquivalentAddressGroup> priorityAddr2 =
        AddressFilter.filter(childBalancer.addresses, ""priority2"");
    assertThat(priorityAddr2).hasSize(1);
    assertAddressesEqual(Collections.singletonList(endpoint4), priorityAddr2);
    assertAddressesEqual(
        Collections.singletonList(endpoint4),
        AddressFilter.filter(priorityAddr2, locality3.toString()));
  }",False
25,endpointResourceUpdated(),Method,,,"io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString()",io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+name io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+config io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+priorities io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+childConfigs io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+weight io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+addresses io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+config io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+priorities io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+childConfigs io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+weight io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+addresses io.grpc.xds.EdsLoadBalancer2Test+locality2,3077,55,1,,"@Test
  public void endpointResourceUpdated() {
    EquivalentAddressGroup endpoint1 = makeAddress(""endpoint-addr-1"");
    LocalityLbEndpoints localityLbEndpoints1 =
        buildLocalityLbEndpoints(1, 10, Collections.singletonMap(endpoint1, true));
    xdsClient.deliverClusterLoadAssignment(
        EDS_SERVICE_NAME, ImmutableMap.of(locality1, localityLbEndpoints1));
    FakeLoadBalancer childBalancer = Iterables.getOnlyElement(downstreamBalancers);

    assertThat(childBalancer.name).isEqualTo(PRIORITY_POLICY_NAME);
    PriorityLbConfig config = (PriorityLbConfig) childBalancer.config;
    assertThat(config.priorities).containsExactly(""priority1"");
    PolicySelection child = config.childConfigs.get(""priority1"");
    assertThat(child.getProvider().getPolicyName()).isEqualTo(WEIGHTED_TARGET_POLICY_NAME);
    WeightedTargetConfig childConfig = (WeightedTargetConfig) child.getConfig();
    assertThat(childConfig.targets).hasSize(1);
    WeightedPolicySelection target = childConfig.targets.get(locality1.toString());
    assertThat(target.weight).isEqualTo(10);
    assertThat(target.policySelection.getProvider().getPolicyName()).isEqualTo(LRS_POLICY_NAME);
    assertLrsConfig((LrsConfig) target.policySelection.getConfig(), CLUSTER, EDS_SERVICE_NAME,
        LRS_SERVER_NAME, locality1, ""round_robin"");

    List<EquivalentAddressGroup> priorityAddr =
        AddressFilter.filter(childBalancer.addresses, ""priority1"");
    assertThat(priorityAddr).hasSize(1);
    assertAddressesEqual(Collections.singletonList(endpoint1), priorityAddr);
    assertAddressesEqual(
        Collections.singletonList(endpoint1),
        AddressFilter.filter(priorityAddr, locality1.toString()));

    EquivalentAddressGroup endpoint2 = makeAddress(""endpoint-addr-2"");
    LocalityLbEndpoints localityLbEndpoints2 =
        buildLocalityLbEndpoints(1, 30, Collections.singletonMap(endpoint2, true));
    xdsClient.deliverClusterLoadAssignment(
        EDS_SERVICE_NAME, ImmutableMap.of(locality2, localityLbEndpoints2));

    config = (PriorityLbConfig) childBalancer.config;
    assertThat(config.priorities).containsExactly(""priority1"");
    child = config.childConfigs.get(""priority1"");
    assertThat(child.getProvider().getPolicyName()).isEqualTo(WEIGHTED_TARGET_POLICY_NAME);
    childConfig = (WeightedTargetConfig) child.getConfig();
    assertThat(childConfig.targets).hasSize(1);
    target = childConfig.targets.get(locality2.toString());
    assertThat(target.weight).isEqualTo(30);
    assertThat(target.policySelection.getProvider().getPolicyName()).isEqualTo(LRS_POLICY_NAME);
    assertLrsConfig((LrsConfig) target.policySelection.getConfig(), CLUSTER, EDS_SERVICE_NAME,
        LRS_SERVER_NAME, locality2, ""round_robin"");

    priorityAddr = AddressFilter.filter(childBalancer.addresses, ""priority1"");
    assertThat(priorityAddr).hasSize(1);
    assertAddressesEqual(Collections.singletonList(endpoint2), priorityAddr);
    assertAddressesEqual(
        Collections.singletonList(endpoint2),
        AddressFilter.filter(priorityAddr, locality2.toString()));
  }",False
26,endpointResourceNeverExist(),Method,,,io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverResourceNotFound(String) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverResourceNotFound(String) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.Status+getCode() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getCode() io.grpc.Status+getDescription() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getDescription(),io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+currentState io.grpc.xds.EdsLoadBalancer2Test+currentPicker io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME,472,9,1,,"@Test
  public void endpointResourceNeverExist() {
    xdsClient.deliverResourceNotFound(EDS_SERVICE_NAME);
    assertThat(currentState).isEqualTo(ConnectivityState.TRANSIENT_FAILURE);
    PickResult result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getStatus().getCode()).isEqualTo(Code.UNAVAILABLE);
    assertThat(result.getStatus().getDescription())
        .isEqualTo(""Resource "" + EDS_SERVICE_NAME + "" is unavailable"");
  }",False
27,endpointResourceRemoved(),Method,,,io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverResourceNotFound(String) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverResourceNotFound(String) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.Status+getCode() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getCode() io.grpc.Status+getDescription() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getDescription(),io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+shutdown io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+shutdown io.grpc.xds.EdsLoadBalancer2Test+currentState io.grpc.xds.EdsLoadBalancer2Test+currentPicker io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME,711,14,1,,"@Test
  public void endpointResourceRemoved() {
    deliverSimpleClusterLoadAssignment(EDS_SERVICE_NAME);
    FakeLoadBalancer childBalancer = Iterables.getOnlyElement(downstreamBalancers);
    assertThat(childBalancer.shutdown).isFalse();

    xdsClient.deliverResourceNotFound(EDS_SERVICE_NAME);
    assertThat(childBalancer.shutdown).isTrue();
    assertThat(currentState).isEqualTo(ConnectivityState.TRANSIENT_FAILURE);
    PickResult result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getStatus().getCode()).isEqualTo(Code.UNAVAILABLE);
    assertThat(result.getStatus().getDescription())
        .isEqualTo(""Resource "" + EDS_SERVICE_NAME + "" is unavailable"");
  }",False
28,handleEndpointResource_ignoreUnhealthyEndpoints(),Method,,,"io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() java.util.Map+keySet() java.util.Map+keySet() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString()",io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+config io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+childConfigs io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+addresses io.grpc.xds.EdsLoadBalancer2Test+locality1,1247,23,1,,"@Test
  public void handleEndpointResource_ignoreUnhealthyEndpoints() {
    EquivalentAddressGroup endpoint1 = makeAddress(""endpoint-addr-1"");
    EquivalentAddressGroup endpoint2 = makeAddress(""endpoint-addr-2"");
    LocalityLbEndpoints localityLbEndpoints =
        buildLocalityLbEndpoints(1, 10, ImmutableMap.of(endpoint1, false, endpoint2, true));
    xdsClient.deliverClusterLoadAssignment(
        EDS_SERVICE_NAME, Collections.singletonMap(locality1, localityLbEndpoints));

    FakeLoadBalancer childBalancer = Iterables.getOnlyElement(downstreamBalancers);
    PriorityLbConfig config = (PriorityLbConfig) childBalancer.config;
    PolicySelection child = config.childConfigs.get(""priority1"");
    WeightedTargetConfig childConfig = (WeightedTargetConfig) child.getConfig();
    assertThat(childConfig.targets.keySet()).containsExactly(locality1.toString());

    List<EquivalentAddressGroup> priorityAddr =
        AddressFilter.filter(childBalancer.addresses, ""priority1"");
    assertThat(priorityAddr).hasSize(1);
    assertAddressesEqual(Collections.singletonList(endpoint2), priorityAddr);
    assertAddressesEqual(
        Collections.singletonList(endpoint2),
        AddressFilter.filter(priorityAddr, locality1.toString()));
  }",False
29,handleEndpointResource_ignoreLocalitiesWithNoHealthyEndpoints(),Method,,,"io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() java.util.Map+keySet() java.util.Map+keySet() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString()",io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+config io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+childConfigs io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+addresses io.grpc.xds.EdsLoadBalancer2Test+locality2,1418,26,1,,"@Test
  public void handleEndpointResource_ignoreLocalitiesWithNoHealthyEndpoints() {
    EquivalentAddressGroup endpoint1 = makeAddress(""endpoint-addr-1"");
    EquivalentAddressGroup endpoint2 = makeAddress(""endpoint-addr-2"");
    LocalityLbEndpoints localityLbEndpoints1 =
        buildLocalityLbEndpoints(1, 10, Collections.singletonMap(endpoint1, false));
    LocalityLbEndpoints localityLbEndpoints2 =
        buildLocalityLbEndpoints(1, 10, Collections.singletonMap(endpoint2, true));
    xdsClient.deliverClusterLoadAssignment(
        EDS_SERVICE_NAME,
        ImmutableMap.of(locality1, localityLbEndpoints1, locality2, localityLbEndpoints2));

    FakeLoadBalancer childBalancer = Iterables.getOnlyElement(downstreamBalancers);
    PriorityLbConfig config = (PriorityLbConfig) childBalancer.config;
    PolicySelection child = config.childConfigs.get(""priority1"");
    WeightedTargetConfig childConfig = (WeightedTargetConfig) child.getConfig();
    assertThat(childConfig.targets.keySet()).containsExactly(locality2.toString());

    List<EquivalentAddressGroup> priorityAddr =
        AddressFilter.filter(childBalancer.addresses, ""priority1"");
    assertThat(priorityAddr).hasSize(1);
    assertAddressesEqual(Collections.singletonList(endpoint2), priorityAddr);
    assertAddressesEqual(
        Collections.singletonList(endpoint2),
        AddressFilter.filter(priorityAddr, locality2.toString()));
  }",False
30,handleEndpointResource_ignorePrioritiesWithNoHealthyEndpoints(),Method,,,"io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.AddressFilter+filter(List<EquivalentAddressGroup>,String) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString()",io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+config io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+priorities io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+addresses io.grpc.xds.EdsLoadBalancer2Test+locality2,1251,24,1,,"@Test
  public void handleEndpointResource_ignorePrioritiesWithNoHealthyEndpoints() {
    EquivalentAddressGroup endpoint1 = makeAddress(""endpoint-addr-1"");
    EquivalentAddressGroup endpoint2 = makeAddress(""endpoint-addr-2"");
    LocalityLbEndpoints localityLbEndpoints1 =
        buildLocalityLbEndpoints(1, 10, Collections.singletonMap(endpoint1, false));
    LocalityLbEndpoints localityLbEndpoints2 =
        buildLocalityLbEndpoints(2, 10, Collections.singletonMap(endpoint2, true));
    xdsClient.deliverClusterLoadAssignment(
        EDS_SERVICE_NAME,
        ImmutableMap.of(locality1, localityLbEndpoints1, locality2, localityLbEndpoints2));

    FakeLoadBalancer childBalancer = Iterables.getOnlyElement(downstreamBalancers);
    PriorityLbConfig config = (PriorityLbConfig) childBalancer.config;
    assertThat(config.priorities).containsExactly(""priority2"");

    List<EquivalentAddressGroup> priorityAddr =
        AddressFilter.filter(childBalancer.addresses, ""priority2"");
    assertThat(priorityAddr).hasSize(1);
    assertAddressesEqual(Collections.singletonList(endpoint2), priorityAddr);
    assertAddressesEqual(
        Collections.singletonList(endpoint2),
        AddressFilter.filter(priorityAddr, locality2.toString()));
  }",False
31,handleEndpointResource_errorIfNoUsableEndpoints(),Method,,,"io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+isOk() io.grpc.Status+getCode() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getCode() io.grpc.Status+getDescription() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getDescription()",io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test+currentState io.grpc.xds.EdsLoadBalancer2Test+currentPicker,1093,20,1,,"@Test
  public void handleEndpointResource_errorIfNoUsableEndpoints() {
    EquivalentAddressGroup endpoint1 = makeAddress(""endpoint-addr-1"");
    EquivalentAddressGroup endpoint2 = makeAddress(""endpoint-addr-2"");
    LocalityLbEndpoints localityLbEndpoints1 =
        buildLocalityLbEndpoints(1, 10, Collections.singletonMap(endpoint1, false));
    LocalityLbEndpoints localityLbEndpoints2 =
        buildLocalityLbEndpoints(2, 10, Collections.singletonMap(endpoint2, false));
    xdsClient.deliverClusterLoadAssignment(
        EDS_SERVICE_NAME,
        ImmutableMap.of(locality1, localityLbEndpoints1, locality2, localityLbEndpoints2));

    assertThat(downstreamBalancers).isEmpty();
    assertThat(currentState).isEqualTo(ConnectivityState.TRANSIENT_FAILURE);
    PickResult result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getStatus().isOk()).isFalse();
    assertThat(result.getStatus().getCode()).isEqualTo(Code.UNAVAILABLE);
    assertThat(result.getStatus().getDescription())
        .isEqualTo(""No usable priority/locality/endpoint"");
  }",False
32,handleEndpointResource_shutDownExistingChildLbPoliciesIfNoUsableEndpoints(),Method,,,"io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+isOk() io.grpc.Status+getCode() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getCode() io.grpc.Status+getDescription() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getDescription()",io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+shutdown io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+shutdown io.grpc.xds.EdsLoadBalancer2Test+currentState io.grpc.xds.EdsLoadBalancer2Test+currentPicker,1079,20,1,,"@Test
  public void handleEndpointResource_shutDownExistingChildLbPoliciesIfNoUsableEndpoints() {
    deliverSimpleClusterLoadAssignment(EDS_SERVICE_NAME);
    FakeLoadBalancer childBalancer = Iterables.getOnlyElement(downstreamBalancers);
    assertThat(childBalancer.shutdown).isFalse();

    EquivalentAddressGroup endpoint1 = makeAddress(""endpoint-addr-1"");
    LocalityLbEndpoints localityLbEndpoints1 =
        buildLocalityLbEndpoints(1, 10, Collections.singletonMap(endpoint1, false));
    xdsClient.deliverClusterLoadAssignment(
        EDS_SERVICE_NAME, Collections.singletonMap(locality1, localityLbEndpoints1));

    assertThat(childBalancer.shutdown).isTrue();
    assertThat(currentState).isEqualTo(ConnectivityState.TRANSIENT_FAILURE);
    PickResult result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getStatus().isOk()).isFalse();
    assertThat(result.getStatus().getCode()).isEqualTo(Code.UNAVAILABLE);
    assertThat(result.getStatus().getDescription())
        .isEqualTo(""No usable priority/locality/endpoint"");
  }",False
33,handleDrops(),Method,,,,,3191,54,1,,"@Test
  public void handleDrops() {
    FakeLoadBalancerProvider fakeRoundRobinProvider = new FakeLoadBalancerProvider(""round_robin"");
    PolicySelection fakeRoundRobinSelection = new PolicySelection(fakeRoundRobinProvider, null);
    PolicySelection weightedTargetSelection = prepareRealDownstreamLbPolicies();
    loadBalancer.handleResolvedAddresses(
        ResolvedAddresses.newBuilder()
            .setAddresses(Collections.<EquivalentAddressGroup>emptyList())
            .setAttributes(
                Attributes.newBuilder().set(XdsAttributes.XDS_CLIENT_POOL, xdsClientPool).build())
            .setLoadBalancingPolicyConfig(
                new EdsConfig(CLUSTER, EDS_SERVICE_NAME, LRS_SERVER_NAME, null,
                    weightedTargetSelection, fakeRoundRobinSelection))
            .build());
    when(mockRandom.nextInt(anyInt())).thenReturn(499_999, 999_999, 1_000_000);
    EquivalentAddressGroup endpoint1 = makeAddress(""endpoint-addr-1"");
    LocalityLbEndpoints localityLbEndpoints1 =
        buildLocalityLbEndpoints(1, 10, Collections.singletonMap(endpoint1, true));
    xdsClient.deliverClusterLoadAssignment(
        EDS_SERVICE_NAME,
        Collections.singletonList(new DropOverload(""throttle"", 500_000)),
        Collections.singletonMap(locality1, localityLbEndpoints1));
    assertThat(downstreamBalancers).hasSize(1);  // one leaf balancer
    FakeLoadBalancer leafBalancer = Iterables.getOnlyElement(downstreamBalancers);
    assertThat(leafBalancer.name).isEqualTo(""round_robin"");
    assertAddressesEqual(Collections.singletonList(makeAddress(""endpoint-addr-1"")),
        leafBalancer.addresses);
    Subchannel subchannel = leafBalancer.helper.createSubchannel(
        CreateSubchannelArgs.newBuilder().setAddresses(leafBalancer.addresses).build());
    leafBalancer.deliverSubchannelState(subchannel, ConnectivityState.READY);
    assertThat(currentState).isEqualTo(ConnectivityState.READY);
    PickResult result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getStatus().isOk()).isFalse();
    assertThat(result.getStatus().getCode()).isEqualTo(Code.UNAVAILABLE);
    assertThat(result.getStatus().getDescription()).isEqualTo(""Dropped: throttle"");
    assertThat(xdsClient.clusterStats.get(EDS_SERVICE_NAME).categorizedDrops.get(""throttle""))
        .isEqualTo(1);

    //  Dynamically update drop policies.
    xdsClient.deliverClusterLoadAssignment(
        EDS_SERVICE_NAME,
        Collections.singletonList(new DropOverload(""lb"", 1_000_000)),
        Collections.singletonMap(locality1, localityLbEndpoints1));
    result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getStatus().isOk()).isFalse();
    assertThat(result.getStatus().getCode()).isEqualTo(Code.UNAVAILABLE);
    assertThat(result.getStatus().getDescription()).isEqualTo(""Dropped: lb"");
    assertThat(xdsClient.clusterStats.get(EDS_SERVICE_NAME).categorizedDrops.get(""lb""))
        .isEqualTo(1);

    result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getStatus().isOk()).isTrue();
    assertThat(result.getSubchannel()).isSameInstanceAs(subchannel);
  }",True
34,maxConcurrentRequests_appliedByLbConfig_enableCircuitBreaking(),Method,,,io.grpc.xds.EdsLoadBalancer2Test+subtest_maxConcurrentRequests_appliedByLbConfig(boolean) io.grpc.xds.EdsLoadBalancer2Test+subtest_maxConcurrentRequests_appliedByLbConfig(boolean),io.grpc.xds.EdsLoadBalancer2+enableCircuitBreaking io.grpc.xds.EdsLoadBalancer2+enableCircuitBreaking io.grpc.xds.EdsLoadBalancer2+enableCircuitBreaking,359,7,1,,"@Test
  public void maxConcurrentRequests_appliedByLbConfig_enableCircuitBreaking() {
    boolean originalEnableCircuitBreaking = EdsLoadBalancer2.enableCircuitBreaking;
    EdsLoadBalancer2.enableCircuitBreaking = true;
    subtest_maxConcurrentRequests_appliedByLbConfig(true);
    EdsLoadBalancer2.enableCircuitBreaking = originalEnableCircuitBreaking;
  }",True
35,maxConcurrentRequests_appliedByLbConfig_circuitBreakingDisabledByDefault(),Method,,,io.grpc.xds.EdsLoadBalancer2Test+subtest_maxConcurrentRequests_appliedByLbConfig(boolean) io.grpc.xds.EdsLoadBalancer2Test+subtest_maxConcurrentRequests_appliedByLbConfig(boolean),,160,4,1,,"@Test
  public void maxConcurrentRequests_appliedByLbConfig_circuitBreakingDisabledByDefault() {
    subtest_maxConcurrentRequests_appliedByLbConfig(false);
  }",True
36,subtest_maxConcurrentRequests_appliedByLbConfig(boolean),Method,maxConcurrentRequests_appliedByLbConfig_enableCircuitBreaking() maxConcurrentRequests_appliedByLbConfig_circuitBreakingDisabledByDefault(),,"io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancerProvider+FakeLoadBalancerProvider(String) io.grpc.internal.ServiceConfigUtil.PolicySelection+PolicySelection(LoadBalancerProvider,Object) io.grpc.xds.EdsLoadBalancer2Test+prepareRealDownstreamLbPolicies() io.grpc.xds.EdsLoadBalancer2Test+prepareRealDownstreamLbPolicies() io.grpc.xds.EdsLoadBalancer2+handleResolvedAddresses(ResolvedAddresses) io.grpc.xds.EdsLoadBalancer2+handleResolvedAddresses(ResolvedAddresses) io.grpc.LoadBalancer.ResolvedAddresses.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.LoadBalancer.ResolvedAddresses+newBuilder() io.grpc.LoadBalancer.ResolvedAddresses+newBuilder() io.grpc.LoadBalancer.ResolvedAddresses.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.Attributes.Builder+build() io.grpc.Attributes.Builder+set(Key<T>,T) io.grpc.Attributes+newBuilder() io.grpc.Attributes+newBuilder() io.grpc.Attributes.Builder+set(Key<T>,T) io.grpc.Attributes.Builder+build() io.grpc.xds.EdsLoadBalancerProvider.EdsConfig+EdsConfig(String,String,String,Long,PolicySelection,PolicySelection) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.LoadBalancer.Helper+createSubchannel(CreateSubchannelArgs) io.grpc.LoadBalancer.Helper+createSubchannel(CreateSubchannelArgs) io.grpc.LoadBalancer.CreateSubchannelArgs.Builder+build() io.grpc.LoadBalancer.CreateSubchannelArgs.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.LoadBalancer.CreateSubchannelArgs+newBuilder() io.grpc.LoadBalancer.CreateSubchannelArgs+newBuilder() io.grpc.LoadBalancer.CreateSubchannelArgs.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.LoadBalancer.CreateSubchannelArgs.Builder+build() io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+deliverSubchannelState(Subchannel,ConnectivityState) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+deliverSubchannelState(Subchannel,ConnectivityState) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getSubchannel() io.grpc.LoadBalancer.PickResult+getSubchannel() io.grpc.LoadBalancer.PickResult+getStreamTracerFactory() io.grpc.LoadBalancer.PickResult+getStreamTracerFactory() io.grpc.LoadBalancer.PickResult+getStreamTracerFactory() io.grpc.LoadBalancer.PickResult+getStreamTracerFactory() io.grpc.ClientStreamTracer.Factory+newClientStreamTracer(StreamInfo,Metadata) io.grpc.ClientStreamTracer.Factory+newClientStreamTracer(StreamInfo,Metadata) io.grpc.ClientStreamTracer.StreamInfo.Builder+build() io.grpc.ClientStreamTracer.StreamInfo+newBuilder() io.grpc.ClientStreamTracer.StreamInfo+newBuilder() io.grpc.ClientStreamTracer.StreamInfo.Builder+build() io.grpc.Metadata+Metadata() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+isOk() io.grpc.Status+getCode() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getCode() io.grpc.Status+getDescription() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getDescription() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getSubchannel() io.grpc.LoadBalancer.PickResult+getSubchannel() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EdsLoadBalancer2+handleResolvedAddresses(ResolvedAddresses) io.grpc.xds.EdsLoadBalancer2+handleResolvedAddresses(ResolvedAddresses) io.grpc.LoadBalancer.ResolvedAddresses.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.LoadBalancer.ResolvedAddresses+newBuilder() io.grpc.LoadBalancer.ResolvedAddresses+newBuilder() io.grpc.LoadBalancer.ResolvedAddresses.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.Attributes.Builder+build() io.grpc.Attributes.Builder+set(Key<T>,T) io.grpc.Attributes+newBuilder() io.grpc.Attributes+newBuilder() io.grpc.Attributes.Builder+set(Key<T>,T) io.grpc.Attributes.Builder+build() io.grpc.xds.EdsLoadBalancerProvider.EdsConfig+EdsConfig(String,String,String,Long,PolicySelection,PolicySelection) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getSubchannel() io.grpc.LoadBalancer.PickResult+getSubchannel() java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object)",io.grpc.xds.EdsLoadBalancer2Test+loadBalancer io.grpc.xds.XdsAttributes+XDS_CLIENT_POOL io.grpc.xds.EdsLoadBalancer2Test+xdsClientPool io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+name io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+addresses io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+helper io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+addresses io.grpc.xds.EdsLoadBalancer2Test+currentState io.grpc.xds.EdsLoadBalancer2Test+currentPicker io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+clusterStats io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test+currentPicker io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+clusterStats io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+clusterStats io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test+loadBalancer io.grpc.xds.XdsAttributes+XDS_CLIENT_POOL io.grpc.xds.EdsLoadBalancer2Test+xdsClientPool io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+currentPicker io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+clusterStats io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+clusterStats io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops,4287,73,2,,"private void subtest_maxConcurrentRequests_appliedByLbConfig(boolean enableCircuitBreaking) {
    long maxConcurrentRequests = 100L;
    FakeLoadBalancerProvider fakeRoundRobinProvider = new FakeLoadBalancerProvider(""round_robin"");
    PolicySelection fakeRoundRobinSelection = new PolicySelection(fakeRoundRobinProvider, null);
    PolicySelection weightedTargetSelection = prepareRealDownstreamLbPolicies();
    loadBalancer.handleResolvedAddresses(
        ResolvedAddresses.newBuilder()
            .setAddresses(Collections.<EquivalentAddressGroup>emptyList())
            .setAttributes(
                Attributes.newBuilder().set(XdsAttributes.XDS_CLIENT_POOL, xdsClientPool).build())
            .setLoadBalancingPolicyConfig(
                new EdsConfig(CLUSTER, EDS_SERVICE_NAME, LRS_SERVER_NAME, maxConcurrentRequests,
                    weightedTargetSelection, fakeRoundRobinSelection))
            .build());
    EquivalentAddressGroup endpoint1 = makeAddress(""endpoint-addr-1"");
    LocalityLbEndpoints localityLbEndpoints1 =
        buildLocalityLbEndpoints(1, 10, Collections.singletonMap(endpoint1, true));
    xdsClient.deliverClusterLoadAssignment(
        EDS_SERVICE_NAME, Collections.singletonMap(locality1, localityLbEndpoints1));
    assertThat(downstreamBalancers).hasSize(1);  // one leaf balancer
    FakeLoadBalancer leafBalancer = Iterables.getOnlyElement(downstreamBalancers);
    assertThat(leafBalancer.name).isEqualTo(""round_robin"");
    assertAddressesEqual(Collections.singletonList(makeAddress(""endpoint-addr-1"")),
        leafBalancer.addresses);
    Subchannel subchannel = leafBalancer.helper.createSubchannel(
        CreateSubchannelArgs.newBuilder().setAddresses(leafBalancer.addresses).build());
    leafBalancer.deliverSubchannelState(subchannel, ConnectivityState.READY);
    assertThat(currentState).isEqualTo(ConnectivityState.READY);
    for (int i = 0; i < maxConcurrentRequests; i++) {
      PickResult result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
      assertThat(result.getStatus().isOk()).isTrue();
      assertThat(result.getSubchannel()).isSameInstanceAs(subchannel);
      assertThat(result.getStreamTracerFactory()).isNotNull();
      ClientStreamTracer.Factory streamTracerFactory = result.getStreamTracerFactory();
      streamTracerFactory.newClientStreamTracer(ClientStreamTracer.StreamInfo.newBuilder().build(),
          new Metadata());
    }
    assertThat(xdsClient.clusterStats.get(EDS_SERVICE_NAME).totalDrops).isEqualTo(0L);

    PickResult result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    if (enableCircuitBreaking) {
      assertThat(result.getStatus().isOk()).isFalse();
      assertThat(result.getStatus().getCode()).isEqualTo(Code.UNAVAILABLE);
      assertThat(result.getStatus().getDescription())
          .isEqualTo(""Cluster max concurrent requests limit exceeded"");
      assertThat(xdsClient.clusterStats.get(EDS_SERVICE_NAME).totalDrops).isEqualTo(1L);
    } else {
      assertThat(result.getStatus().isOk()).isTrue();
      assertThat(result.getSubchannel()).isSameInstanceAs(subchannel);
      assertThat(xdsClient.clusterStats.get(EDS_SERVICE_NAME).totalDrops).isEqualTo(0L);
    }

    // Dynamically increment circuit breakers max_concurrent_requests threshold.
    maxConcurrentRequests = 101L;
    loadBalancer.handleResolvedAddresses(
        ResolvedAddresses.newBuilder()
            .setAddresses(Collections.<EquivalentAddressGroup>emptyList())
            .setAttributes(
                Attributes.newBuilder().set(XdsAttributes.XDS_CLIENT_POOL, xdsClientPool).build())
            .setLoadBalancingPolicyConfig(
                new EdsConfig(CLUSTER, EDS_SERVICE_NAME, LRS_SERVER_NAME, maxConcurrentRequests,
                    weightedTargetSelection, fakeRoundRobinSelection))
            .build());

    result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getStatus().isOk()).isTrue();
    assertThat(result.getSubchannel()).isSameInstanceAs(subchannel);
    if (enableCircuitBreaking) {
      assertThat(xdsClient.clusterStats.get(EDS_SERVICE_NAME).totalDrops).isEqualTo(1L);
    } else {
      assertThat(xdsClient.clusterStats.get(EDS_SERVICE_NAME).totalDrops).isEqualTo(0L);
    }
  }",True
37,maxConcurrentRequests_appliedWithDefaultValue_enableCircuitBreaking(),Method,,,io.grpc.xds.EdsLoadBalancer2Test+subtest_maxConcurrentRequests_appliedWithDefaultValue(boolean) io.grpc.xds.EdsLoadBalancer2Test+subtest_maxConcurrentRequests_appliedWithDefaultValue(boolean),io.grpc.xds.EdsLoadBalancer2+enableCircuitBreaking io.grpc.xds.EdsLoadBalancer2+enableCircuitBreaking io.grpc.xds.EdsLoadBalancer2+enableCircuitBreaking,371,7,1,,"@Test
  public void maxConcurrentRequests_appliedWithDefaultValue_enableCircuitBreaking() {
    boolean originalEnableCircuitBreaking = EdsLoadBalancer2.enableCircuitBreaking;
    EdsLoadBalancer2.enableCircuitBreaking = true;
    subtest_maxConcurrentRequests_appliedWithDefaultValue(true);
    EdsLoadBalancer2.enableCircuitBreaking = originalEnableCircuitBreaking;
  }",True
38,maxConcurrentRequests_appliedWithDefaultValue_circuitBreakingDisabledByDefault(),Method,,,io.grpc.xds.EdsLoadBalancer2Test+subtest_maxConcurrentRequests_appliedWithDefaultValue(boolean) io.grpc.xds.EdsLoadBalancer2Test+subtest_maxConcurrentRequests_appliedWithDefaultValue(boolean),,172,4,1,,"@Test
  public void maxConcurrentRequests_appliedWithDefaultValue_circuitBreakingDisabledByDefault() {
    subtest_maxConcurrentRequests_appliedWithDefaultValue(false);
  }",True
39,subtest_maxConcurrentRequests_appliedWithDefaultValue(boolean),Method,maxConcurrentRequests_appliedWithDefaultValue_enableCircuitBreaking() maxConcurrentRequests_appliedWithDefaultValue_circuitBreakingDisabledByDefault(),,"io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancerProvider+FakeLoadBalancerProvider(String) io.grpc.internal.ServiceConfigUtil.PolicySelection+PolicySelection(LoadBalancerProvider,Object) io.grpc.xds.EdsLoadBalancer2Test+prepareRealDownstreamLbPolicies() io.grpc.xds.EdsLoadBalancer2Test+prepareRealDownstreamLbPolicies() io.grpc.xds.EdsLoadBalancer2+handleResolvedAddresses(ResolvedAddresses) io.grpc.xds.EdsLoadBalancer2+handleResolvedAddresses(ResolvedAddresses) io.grpc.LoadBalancer.ResolvedAddresses.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.LoadBalancer.ResolvedAddresses+newBuilder() io.grpc.LoadBalancer.ResolvedAddresses+newBuilder() io.grpc.LoadBalancer.ResolvedAddresses.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.Attributes.Builder+build() io.grpc.Attributes.Builder+set(Key<T>,T) io.grpc.Attributes+newBuilder() io.grpc.Attributes+newBuilder() io.grpc.Attributes.Builder+set(Key<T>,T) io.grpc.Attributes.Builder+build() io.grpc.xds.EdsLoadBalancerProvider.EdsConfig+EdsConfig(String,String,String,Long,PolicySelection,PolicySelection) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) io.grpc.xds.EdsLoadBalancer2Test+assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>) java.util.Collections+singletonList(T) java.util.Collections+singletonList(T) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.LoadBalancer.Helper+createSubchannel(CreateSubchannelArgs) io.grpc.LoadBalancer.Helper+createSubchannel(CreateSubchannelArgs) io.grpc.LoadBalancer.CreateSubchannelArgs.Builder+build() io.grpc.LoadBalancer.CreateSubchannelArgs.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.LoadBalancer.CreateSubchannelArgs+newBuilder() io.grpc.LoadBalancer.CreateSubchannelArgs+newBuilder() io.grpc.LoadBalancer.CreateSubchannelArgs.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.LoadBalancer.CreateSubchannelArgs.Builder+build() io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+deliverSubchannelState(Subchannel,ConnectivityState) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+deliverSubchannelState(Subchannel,ConnectivityState) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getSubchannel() io.grpc.LoadBalancer.PickResult+getSubchannel() io.grpc.LoadBalancer.PickResult+getStreamTracerFactory() io.grpc.LoadBalancer.PickResult+getStreamTracerFactory() io.grpc.LoadBalancer.PickResult+getStreamTracerFactory() io.grpc.LoadBalancer.PickResult+getStreamTracerFactory() io.grpc.ClientStreamTracer.Factory+newClientStreamTracer(StreamInfo,Metadata) io.grpc.ClientStreamTracer.Factory+newClientStreamTracer(StreamInfo,Metadata) io.grpc.ClientStreamTracer.StreamInfo.Builder+build() io.grpc.ClientStreamTracer.StreamInfo+newBuilder() io.grpc.ClientStreamTracer.StreamInfo+newBuilder() io.grpc.ClientStreamTracer.StreamInfo.Builder+build() io.grpc.Metadata+Metadata() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+isOk() io.grpc.Status+getCode() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getCode() io.grpc.Status+getDescription() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getDescription() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getSubchannel() io.grpc.LoadBalancer.PickResult+getSubchannel() java.util.Map+get(Object) java.util.Map+get(Object)",io.grpc.xds.EdsLoadBalancer2Test+loadBalancer io.grpc.xds.XdsAttributes+XDS_CLIENT_POOL io.grpc.xds.EdsLoadBalancer2Test+xdsClientPool io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+name io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+addresses io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+helper io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+addresses io.grpc.xds.EdsLoadBalancer2Test+currentState io.grpc.xds.EdsLoadBalancer2+DEFAULT_PER_CLUSTER_MAX_CONCURRENT_REQUESTS io.grpc.xds.EdsLoadBalancer2Test+currentPicker io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+clusterStats io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test+currentPicker io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+clusterStats io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+clusterStats io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops,3223,52,2,,"private void subtest_maxConcurrentRequests_appliedWithDefaultValue(
      boolean enableCircuitBreaking) {
    FakeLoadBalancerProvider fakeRoundRobinProvider = new FakeLoadBalancerProvider(""round_robin"");
    PolicySelection fakeRoundRobinSelection = new PolicySelection(fakeRoundRobinProvider, null);
    PolicySelection weightedTargetSelection = prepareRealDownstreamLbPolicies();
    loadBalancer.handleResolvedAddresses(
        ResolvedAddresses.newBuilder()
            .setAddresses(Collections.<EquivalentAddressGroup>emptyList())
            .setAttributes(
                Attributes.newBuilder().set(XdsAttributes.XDS_CLIENT_POOL, xdsClientPool).build())
            .setLoadBalancingPolicyConfig(
                new EdsConfig(CLUSTER, EDS_SERVICE_NAME, LRS_SERVER_NAME, null,
                    weightedTargetSelection, fakeRoundRobinSelection))
            .build());
    EquivalentAddressGroup endpoint1 = makeAddress(""endpoint-addr-1"");
    LocalityLbEndpoints localityLbEndpoints1 =
        buildLocalityLbEndpoints(1, 10, Collections.singletonMap(endpoint1, true));
    xdsClient.deliverClusterLoadAssignment(
        EDS_SERVICE_NAME, Collections.singletonMap(locality1, localityLbEndpoints1));
    assertThat(downstreamBalancers).hasSize(1);  // one leaf balancer
    FakeLoadBalancer leafBalancer = Iterables.getOnlyElement(downstreamBalancers);
    assertThat(leafBalancer.name).isEqualTo(""round_robin"");
    assertAddressesEqual(Collections.singletonList(makeAddress(""endpoint-addr-1"")),
        leafBalancer.addresses);
    Subchannel subchannel = leafBalancer.helper.createSubchannel(
        CreateSubchannelArgs.newBuilder().setAddresses(leafBalancer.addresses).build());
    leafBalancer.deliverSubchannelState(subchannel, ConnectivityState.READY);
    assertThat(currentState).isEqualTo(ConnectivityState.READY);
    for (int i = 0; i < EdsLoadBalancer2.DEFAULT_PER_CLUSTER_MAX_CONCURRENT_REQUESTS; i++) {
      PickResult result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
      assertThat(result.getStatus().isOk()).isTrue();
      assertThat(result.getSubchannel()).isSameInstanceAs(subchannel);
      assertThat(result.getStreamTracerFactory()).isNotNull();
      ClientStreamTracer.Factory streamTracerFactory = result.getStreamTracerFactory();
      streamTracerFactory.newClientStreamTracer(ClientStreamTracer.StreamInfo.newBuilder().build(),
          new Metadata());
    }
    assertThat(xdsClient.clusterStats.get(EDS_SERVICE_NAME).totalDrops).isEqualTo(0L);

    PickResult result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    if (enableCircuitBreaking) {
      assertThat(result.getStatus().isOk()).isFalse();
      assertThat(result.getStatus().getCode()).isEqualTo(Code.UNAVAILABLE);
      assertThat(result.getStatus().getDescription())
          .isEqualTo(""Cluster max concurrent requests limit exceeded"");
      assertThat(xdsClient.clusterStats.get(EDS_SERVICE_NAME).totalDrops).isEqualTo(1L);
    } else {
      assertThat(result.getStatus().isOk()).isTrue();
      assertThat(result.getSubchannel()).isSameInstanceAs(subchannel);
      assertThat(xdsClient.clusterStats.get(EDS_SERVICE_NAME).totalDrops).isEqualTo(0L);
    }
  }",True
40,configUpdate_changeEdsServiceName_afterChildPolicyReady_switchGracefully(),Method,,,"io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+deliverSubchannelState(Subchannel,ConnectivityState) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+deliverSubchannelState(Subchannel,ConnectivityState) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.PickResult+getSubchannel() io.grpc.LoadBalancer.PickResult+getSubchannel() io.grpc.xds.EdsLoadBalancer2+handleResolvedAddresses(ResolvedAddresses) io.grpc.xds.EdsLoadBalancer2+handleResolvedAddresses(ResolvedAddresses) io.grpc.LoadBalancer.ResolvedAddresses.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.LoadBalancer.ResolvedAddresses+newBuilder() io.grpc.LoadBalancer.ResolvedAddresses+newBuilder() io.grpc.LoadBalancer.ResolvedAddresses.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.Attributes.Builder+build() io.grpc.Attributes.Builder+set(Key<T>,T) io.grpc.Attributes+newBuilder() io.grpc.Attributes+newBuilder() io.grpc.Attributes.Builder+set(Key<T>,T) io.grpc.Attributes.Builder+build() io.grpc.xds.EdsLoadBalancerProvider.EdsConfig+EdsConfig(String,String,String,Long,PolicySelection,PolicySelection) io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) java.util.List+get(int) java.util.List+get(int) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.PickResult+getSubchannel() io.grpc.LoadBalancer.PickResult+getSubchannel() io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+deliverSubchannelState(Subchannel,ConnectivityState) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+deliverSubchannelState(Subchannel,ConnectivityState) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.PickResult+getSubchannel() io.grpc.LoadBalancer.PickResult+getSubchannel()",io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test+currentState io.grpc.xds.EdsLoadBalancer2Test+currentPicker io.grpc.xds.EdsLoadBalancer2Test+loadBalancer io.grpc.xds.XdsAttributes+XDS_CLIENT_POOL io.grpc.xds.EdsLoadBalancer2Test+xdsClientPool io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+weightedTarget io.grpc.xds.EdsLoadBalancer2Test+roundRobin io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test+currentState io.grpc.xds.EdsLoadBalancer2Test+currentPicker io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+shutdown io.grpc.xds.EdsLoadBalancer2Test+currentPicker,1923,32,1,,"@Test
  public void configUpdate_changeEdsServiceName_afterChildPolicyReady_switchGracefully() {
    deliverSimpleClusterLoadAssignment(EDS_SERVICE_NAME);  // downstream LB polices instantiated
    FakeLoadBalancer childBalancer = Iterables.getOnlyElement(downstreamBalancers);
    Subchannel subchannel1 = mock(Subchannel.class);
    childBalancer.deliverSubchannelState(subchannel1, ConnectivityState.READY);
    assertThat(currentState).isEqualTo(ConnectivityState.READY);
    PickResult result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getSubchannel()).isSameInstanceAs(subchannel1);

    String newEdsServiceName = ""service-foo.googleapis.com"";
    loadBalancer.handleResolvedAddresses(
        ResolvedAddresses.newBuilder()
            .setAddresses(Collections.<EquivalentAddressGroup>emptyList())
            .setAttributes(
                Attributes.newBuilder().set(XdsAttributes.XDS_CLIENT_POOL, xdsClientPool).build())
            .setLoadBalancingPolicyConfig(
                new EdsConfig(CLUSTER, newEdsServiceName, LRS_SERVER_NAME, null, weightedTarget,
                    roundRobin))
            .build());
    deliverSimpleClusterLoadAssignment(newEdsServiceName);  // instantiate the new subtree
    assertThat(downstreamBalancers).hasSize(2);
    FakeLoadBalancer newChildBalancer = downstreamBalancers.get(1);
    assertThat(currentState).isEqualTo(ConnectivityState.READY);
    result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getSubchannel()).isSameInstanceAs(subchannel1);
    Subchannel subchannel2 = mock(Subchannel.class);
    newChildBalancer.deliverSubchannelState(subchannel2, ConnectivityState.READY);
    assertThat(childBalancer.shutdown).isTrue();
    result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getSubchannel()).isSameInstanceAs(subchannel2);
  }",False
41,configUpdate_changeEndpointPickingPolicy(),Method,,,"io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancerProvider+FakeLoadBalancerProvider(String) io.grpc.internal.ServiceConfigUtil.PolicySelection+PolicySelection(LoadBalancerProvider,Object) io.grpc.xds.EdsLoadBalancer2Test+prepareRealDownstreamLbPolicies() io.grpc.xds.EdsLoadBalancer2Test+prepareRealDownstreamLbPolicies() io.grpc.xds.EdsLoadBalancer2+handleResolvedAddresses(ResolvedAddresses) io.grpc.xds.EdsLoadBalancer2+handleResolvedAddresses(ResolvedAddresses) io.grpc.LoadBalancer.ResolvedAddresses.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.LoadBalancer.ResolvedAddresses+newBuilder() io.grpc.LoadBalancer.ResolvedAddresses+newBuilder() io.grpc.LoadBalancer.ResolvedAddresses.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.Attributes.Builder+build() io.grpc.Attributes.Builder+set(Key<T>,T) io.grpc.Attributes+newBuilder() io.grpc.Attributes+newBuilder() io.grpc.Attributes.Builder+set(Key<T>,T) io.grpc.Attributes.Builder+build() io.grpc.xds.EdsLoadBalancerProvider.EdsConfig+EdsConfig(String,String,String,Long,PolicySelection,PolicySelection) io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancerProvider+FakeLoadBalancerProvider(String) io.grpc.internal.ServiceConfigUtil.PolicySelection+PolicySelection(LoadBalancerProvider,Object) io.grpc.xds.EdsLoadBalancer2+handleResolvedAddresses(ResolvedAddresses) io.grpc.xds.EdsLoadBalancer2+handleResolvedAddresses(ResolvedAddresses) io.grpc.LoadBalancer.ResolvedAddresses.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.LoadBalancer.ResolvedAddresses+newBuilder() io.grpc.LoadBalancer.ResolvedAddresses+newBuilder() io.grpc.LoadBalancer.ResolvedAddresses.Builder+setAddresses(List<EquivalentAddressGroup>) io.grpc.Attributes.Builder+build() io.grpc.Attributes.Builder+set(Key<T>,T) io.grpc.Attributes+newBuilder() io.grpc.Attributes+newBuilder() io.grpc.Attributes.Builder+set(Key<T>,T) io.grpc.Attributes.Builder+build() io.grpc.xds.EdsLoadBalancerProvider.EdsConfig+EdsConfig(String,String,String,Long,PolicySelection,PolicySelection)",io.grpc.xds.EdsLoadBalancer2Test+loadBalancer io.grpc.xds.XdsAttributes+XDS_CLIENT_POOL io.grpc.xds.EdsLoadBalancer2Test+xdsClientPool io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+name io.grpc.xds.EdsLoadBalancer2Test+loadBalancer io.grpc.xds.XdsAttributes+XDS_CLIENT_POOL io.grpc.xds.EdsLoadBalancer2Test+xdsClientPool io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+weightedTarget io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+shutdown io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+name,1912,32,1,,"@Test
  public void configUpdate_changeEndpointPickingPolicy() {
    FakeLoadBalancerProvider fakeRoundRobinProvider = new FakeLoadBalancerProvider(""round_robin"");
    PolicySelection fakeRoundRobinSelection = new PolicySelection(fakeRoundRobinProvider, null);
    PolicySelection weightedTargetSelection = prepareRealDownstreamLbPolicies();
    loadBalancer.handleResolvedAddresses(
        ResolvedAddresses.newBuilder()
            .setAddresses(Collections.<EquivalentAddressGroup>emptyList())
            .setAttributes(
                Attributes.newBuilder().set(XdsAttributes.XDS_CLIENT_POOL, xdsClientPool).build())
            .setLoadBalancingPolicyConfig(
                new EdsConfig(CLUSTER, EDS_SERVICE_NAME, LRS_SERVER_NAME, null,
                    weightedTargetSelection, fakeRoundRobinSelection))
            .build());
    deliverSimpleClusterLoadAssignment(EDS_SERVICE_NAME);  // downstream LB policies instantiated
    FakeLoadBalancer leafBalancer = Iterables.getOnlyElement(downstreamBalancers);
    assertThat(leafBalancer.name).isEqualTo(""round_robin"");
    FakeLoadBalancerProvider fakePickFirstProvider = new FakeLoadBalancerProvider(""pick_first"");
    PolicySelection fakePickFirstSelection =
        new PolicySelection(fakePickFirstProvider, null);
    loadBalancer.handleResolvedAddresses(ResolvedAddresses.newBuilder()
        .setAddresses(Collections.<EquivalentAddressGroup>emptyList())
        .setAttributes(
            Attributes.newBuilder().set(XdsAttributes.XDS_CLIENT_POOL, xdsClientPool).build())
        .setLoadBalancingPolicyConfig(
            new EdsConfig(CLUSTER, EDS_SERVICE_NAME, LRS_SERVER_NAME, null, weightedTarget,
                fakePickFirstSelection))
        .build());
    assertThat(leafBalancer.shutdown).isTrue();
    leafBalancer = Iterables.getOnlyElement(downstreamBalancers);
    assertThat(leafBalancer.name).isEqualTo(""pick_first"");
  }",False
42,endpointDiscoveryError_beforeChildPolicyInstantiated_propagateToUpstream(),Method,,,io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverError(Status) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverError(Status) io.grpc.Status+withDescription(String) io.grpc.Status+withDescription(String) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+isOk() io.grpc.Status+getCode() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getCode() io.grpc.Status+getDescription() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getDescription(),io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.Status+UNAUTHENTICATED io.grpc.xds.EdsLoadBalancer2Test+currentState io.grpc.xds.EdsLoadBalancer2Test+currentPicker,567,9,1,,"@Test
  public void endpointDiscoveryError_beforeChildPolicyInstantiated_propagateToUpstream() {
    xdsClient.deliverError(Status.UNAUTHENTICATED.withDescription(""permission denied""));
    assertThat(currentState).isEqualTo(ConnectivityState.TRANSIENT_FAILURE);
    PickResult result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getStatus().isOk()).isFalse();
    assertThat(result.getStatus().getCode()).isEqualTo(Code.UNAUTHENTICATED);
    assertThat(result.getStatus().getDescription()).isEqualTo(""permission denied"");
  }",False
43,endpointDiscoveryError_afterChildPolicyInstantiated_keepUsingCurrentEndpoints(),Method,,,io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverError(Status) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverError(Status) io.grpc.Status+withDescription(String) io.grpc.Status+withDescription(String) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+isOk(),io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.Status+UNAVAILABLE io.grpc.xds.EdsLoadBalancer2Test+currentState io.grpc.xds.EdsLoadBalancer2Test+currentPicker io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+shutdown,583,11,1,,"@Test
  public void endpointDiscoveryError_afterChildPolicyInstantiated_keepUsingCurrentEndpoints() {
    deliverSimpleClusterLoadAssignment(EDS_SERVICE_NAME);
    FakeLoadBalancer childBalancer = Iterables.getOnlyElement(downstreamBalancers);
    xdsClient.deliverError(Status.UNAVAILABLE.withDescription(""not found""));

    assertThat(currentState).isEqualTo(ConnectivityState.CONNECTING);
    PickResult result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getStatus().isOk()).isTrue();
    assertThat(childBalancer.shutdown).isFalse();
  }",False
44,nameResolutionError_beforeChildPolicyInstantiated_returnErrorPickerToUpstream(),Method,,,io.grpc.xds.EdsLoadBalancer2+handleNameResolutionError(Status) io.grpc.xds.EdsLoadBalancer2+handleNameResolutionError(Status) io.grpc.Status+withDescription(String) io.grpc.Status+withDescription(String) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.SubchannelPicker+pickSubchannel(PickSubchannelArgs) io.grpc.Status+isOk() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+isOk() io.grpc.Status+getCode() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getCode() io.grpc.Status+getDescription() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.LoadBalancer.PickResult+getStatus() io.grpc.Status+getDescription(),io.grpc.xds.EdsLoadBalancer2Test+loadBalancer io.grpc.Status+UNIMPLEMENTED io.grpc.xds.EdsLoadBalancer2Test+currentState io.grpc.xds.EdsLoadBalancer2Test+currentPicker,568,9,1,,"@Test
  public void nameResolutionError_beforeChildPolicyInstantiated_returnErrorPickerToUpstream() {
    loadBalancer.handleNameResolutionError(Status.UNIMPLEMENTED.withDescription(""not found""));
    assertThat(currentState).isEqualTo(ConnectivityState.TRANSIENT_FAILURE);
    PickResult result = currentPicker.pickSubchannel(mock(PickSubchannelArgs.class));
    assertThat(result.getStatus().isOk()).isFalse();
    assertThat(result.getStatus().getCode()).isEqualTo(Code.UNIMPLEMENTED);
    assertThat(result.getStatus().getDescription()).isEqualTo(""not found"");
  }",False
45,nameResolutionError_afterChildPolicyInstantiated_propagateToDownstream(),Method,,,io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) io.grpc.xds.EdsLoadBalancer2Test+deliverSimpleClusterLoadAssignment(String) io.grpc.xds.EdsLoadBalancer2+handleNameResolutionError(Status) io.grpc.xds.EdsLoadBalancer2+handleNameResolutionError(Status) io.grpc.Status+withDescription(String) io.grpc.Status+withDescription(String) io.grpc.Status+getCode() io.grpc.Status+getCode() io.grpc.Status+getDescription() io.grpc.Status+getDescription(),io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test+loadBalancer io.grpc.Status+UNAVAILABLE io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+upstreamError io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+upstreamError,540,11,1,,"@Test
  public void nameResolutionError_afterChildPolicyInstantiated_propagateToDownstream() {
    deliverSimpleClusterLoadAssignment(EDS_SERVICE_NAME);
    FakeLoadBalancer childBalancer = Iterables.getOnlyElement(downstreamBalancers);

    loadBalancer.handleNameResolutionError(
        Status.UNAVAILABLE.withDescription(""cannot reach server""));
    assertThat(childBalancer.upstreamError.getCode()).isEqualTo(Code.UNAVAILABLE);
    assertThat(childBalancer.upstreamError.getDescription())
        .isEqualTo(""cannot reach server"");
  }",False
46,generatePriorityLbConfig(),Method,,,"java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) io.grpc.xds.EdsLoadBalancer2+generatePriorityLbConfig(String,String,String,PolicySelection,PolicySelection,LoadBalancerRegistry,Map<Integer,Map<Locality,Integer>>) io.grpc.xds.EdsLoadBalancer2+generatePriorityLbConfig(String,String,String,PolicySelection,PolicySelection,LoadBalancerRegistry,Map<Integer,Map<Locality,Integer>>) java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig()",io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.EdsLoadBalancer2Test+locality3 io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+weightedTarget io.grpc.xds.EdsLoadBalancer2Test+roundRobin io.grpc.xds.EdsLoadBalancer2Test+registry io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+childConfigs io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+priorities io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+childConfigs io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+weight io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+weight io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig+childConfigs io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality3 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+weight io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+locality3,2506,39,1,,"@Test
  public void generatePriorityLbConfig() {
    Map<Integer, Map<Locality, Integer>> prioritizedLocalityWeights = new HashMap<>();
    prioritizedLocalityWeights.put(1, ImmutableMap.of(locality1, 20, locality2, 50));
    prioritizedLocalityWeights.put(2, ImmutableMap.of(locality3, 30));
    PriorityLbConfig config =
        EdsLoadBalancer2.generatePriorityLbConfig(
            CLUSTER, EDS_SERVICE_NAME, LRS_SERVER_NAME, weightedTarget, roundRobin, registry,
            prioritizedLocalityWeights);
    assertThat(config.childConfigs).hasSize(2);
    assertThat(config.priorities).containsExactly(""priority1"", ""priority2"");
    PolicySelection child1 = config.childConfigs.get(""priority1"");
    assertThat(child1.getProvider().getPolicyName()).isEqualTo(WEIGHTED_TARGET_POLICY_NAME);
    WeightedTargetConfig weightedTargetConfig1 = (WeightedTargetConfig) child1.getConfig();
    assertThat(weightedTargetConfig1.targets).hasSize(2);
    WeightedPolicySelection childTarget1 = weightedTargetConfig1.targets.get(locality1.toString());
    assertThat(childTarget1.weight).isEqualTo(20);
    assertThat(childTarget1.policySelection.getProvider().getPolicyName())
        .isEqualTo(LRS_POLICY_NAME);
    assertLrsConfig((LrsConfig) childTarget1.policySelection.getConfig(), CLUSTER,
        EDS_SERVICE_NAME, LRS_SERVER_NAME, locality1, ""round_robin"");
    WeightedPolicySelection childTarget2 = weightedTargetConfig1.targets.get(locality2.toString());
    assertThat(childTarget2.weight).isEqualTo(50);
    assertThat(childTarget2.policySelection.getProvider().getPolicyName())
        .isEqualTo(LRS_POLICY_NAME);
    assertLrsConfig((LrsConfig) childTarget2.policySelection.getConfig(), CLUSTER,
        EDS_SERVICE_NAME, LRS_SERVER_NAME, locality2, ""round_robin"");

    PolicySelection child2 = config.childConfigs.get(""priority2"");
    assertThat(child2.getProvider().getPolicyName()).isEqualTo(WEIGHTED_TARGET_POLICY_NAME);
    WeightedTargetConfig weightedTargetConfig2 = (WeightedTargetConfig) child2.getConfig();
    assertThat(weightedTargetConfig2.targets).hasSize(1);
    WeightedPolicySelection childTarget3 = weightedTargetConfig2.targets.get(locality3.toString());
    assertThat(childTarget3.weight).isEqualTo(30);
    assertThat(childTarget3.policySelection.getProvider().getPolicyName())
        .isEqualTo(LRS_POLICY_NAME);
    assertLrsConfig((LrsConfig) childTarget3.policySelection.getConfig(), CLUSTER,
        EDS_SERVICE_NAME, LRS_SERVER_NAME, locality3, ""round_robin"");
  }",False
47,generateWeightedTargetLbConfig_withLrsPolicy(),Method,,,"io.grpc.xds.EdsLoadBalancer2+generateWeightedTargetLbConfig(String,String,String,PolicySelection,LoadBalancerRegistry,Map<Locality,Integer>) io.grpc.xds.EdsLoadBalancer2+generateWeightedTargetLbConfig(String,String,String,PolicySelection,LoadBalancerRegistry,Map<Locality,Integer>) java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.xds.EdsLoadBalancer2Test+assertLrsConfig(LrsConfig,String,String,String,Locality,String) io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig() io.grpc.internal.ServiceConfigUtil.PolicySelection+getConfig()",io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+roundRobin io.grpc.xds.EdsLoadBalancer2Test+registry io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+weight io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+weight io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+LRS_SERVER_NAME io.grpc.xds.EdsLoadBalancer2Test+locality2,1139,19,1,,"@Test
  public void generateWeightedTargetLbConfig_withLrsPolicy() {
    Map<Locality, Integer> localityWeights = ImmutableMap.of(locality1, 30, locality2, 40);
    WeightedTargetConfig config =
        EdsLoadBalancer2.generateWeightedTargetLbConfig(
            CLUSTER, EDS_SERVICE_NAME, LRS_SERVER_NAME, roundRobin, registry, localityWeights);
    assertThat(config.targets).hasSize(2);
    WeightedPolicySelection target1 = config.targets.get(locality1.toString());
    assertThat(target1.weight).isEqualTo(30);
    assertThat(target1.policySelection.getProvider().getPolicyName()).isEqualTo(LRS_POLICY_NAME);
    assertLrsConfig((LrsConfig) target1.policySelection.getConfig(), CLUSTER, EDS_SERVICE_NAME,
        LRS_SERVER_NAME, locality1, ""round_robin"");

    WeightedPolicySelection target2 = config.targets.get(locality2.toString());
    assertThat(target2.weight).isEqualTo(40);
    assertThat(target2.policySelection.getProvider().getPolicyName()).isEqualTo(LRS_POLICY_NAME);
    assertLrsConfig((LrsConfig) target2.policySelection.getConfig(), CLUSTER, EDS_SERVICE_NAME,
        LRS_SERVER_NAME, locality2, ""round_robin"");
  }",False
48,generateWeightedTargetLbConfig_withoutLrsPolicy(),Method,,,"io.grpc.xds.EdsLoadBalancer2+generateWeightedTargetLbConfig(String,String,String,PolicySelection,LoadBalancerRegistry,Map<Locality,Integer>) io.grpc.xds.EdsLoadBalancer2+generateWeightedTargetLbConfig(String,String,String,PolicySelection,LoadBalancerRegistry,Map<Locality,Integer>) java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName() java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.xds.EnvoyProtoData.Locality+toString() io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName()",io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.EdsLoadBalancer2Test+CLUSTER io.grpc.xds.EdsLoadBalancer2Test+EDS_SERVICE_NAME io.grpc.xds.EdsLoadBalancer2Test+roundRobin io.grpc.xds.EdsLoadBalancer2Test+registry io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality1 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+weight io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig+targets io.grpc.xds.EdsLoadBalancer2Test+locality2 io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+weight io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection+policySelection,831,15,1,,"@Test
  public void generateWeightedTargetLbConfig_withoutLrsPolicy() {
    Map<Locality, Integer> localityWeights = ImmutableMap.of(locality1, 30, locality2, 40);
    WeightedTargetConfig config =
        EdsLoadBalancer2.generateWeightedTargetLbConfig(
            CLUSTER, EDS_SERVICE_NAME, null, roundRobin, registry, localityWeights);
    assertThat(config.targets).hasSize(2);
    WeightedPolicySelection target1 = config.targets.get(locality1.toString());
    assertThat(target1.weight).isEqualTo(30);
    assertThat(target1.policySelection.getProvider().getPolicyName()).isEqualTo(""round_robin"");

    WeightedPolicySelection target2 = config.targets.get(locality2.toString());
    assertThat(target2.weight).isEqualTo(40);
    assertThat(target2.policySelection.getProvider().getPolicyName()).isEqualTo(""round_robin"");
  }",False
49,deliverSimpleClusterLoadAssignment(String),Method,endpointResourceRemoved() handleEndpointResource_shutDownExistingChildLbPoliciesIfNoUsableEndpoints() configUpdate_changeEdsServiceName_afterChildPolicyReady_switchGracefully() configUpdate_changeEdsServiceName_afterChildPolicyReady_switchGracefully() configUpdate_changeEndpointPickingPolicy() endpointDiscoveryError_afterChildPolicyInstantiated_keepUsingCurrentEndpoints() nameResolutionError_afterChildPolicyInstantiated_propagateToDownstream(),,"io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+makeAddress(String) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) io.grpc.xds.EdsLoadBalancer2Test+buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V)",io.grpc.xds.EdsLoadBalancer2Test+xdsClient io.grpc.xds.EdsLoadBalancer2Test+locality1,410,8,2,,"private void deliverSimpleClusterLoadAssignment(String resourceName) {
    EquivalentAddressGroup endpoint1 = makeAddress(""endpoint-addr-1"");
    LocalityLbEndpoints localityLbEndpoints1 =
        buildLocalityLbEndpoints(1, 10, Collections.singletonMap(endpoint1, true));
    xdsClient.deliverClusterLoadAssignment(
        resourceName,
        Collections.singletonMap(locality1, localityLbEndpoints1));
  }",False
50,prepareRealDownstreamLbPolicies(),Method,subtest_maxConcurrentRequests_appliedByLbConfig(boolean) subtest_maxConcurrentRequests_appliedWithDefaultValue(boolean) configUpdate_changeEndpointPickingPolicy(),,"io.grpc.LoadBalancerRegistry+deregister(LoadBalancerProvider) io.grpc.LoadBalancerRegistry+deregister(LoadBalancerProvider) io.grpc.LoadBalancerRegistry+getProvider(String) io.grpc.LoadBalancerRegistry+getProvider(String) io.grpc.LoadBalancerRegistry+register(LoadBalancerProvider) io.grpc.LoadBalancerRegistry+register(LoadBalancerProvider) io.grpc.xds.PriorityLoadBalancerProvider+PriorityLoadBalancerProvider() io.grpc.LoadBalancerRegistry+deregister(LoadBalancerProvider) io.grpc.LoadBalancerRegistry+deregister(LoadBalancerProvider) io.grpc.LoadBalancerRegistry+getProvider(String) io.grpc.LoadBalancerRegistry+getProvider(String) io.grpc.LoadBalancerRegistry+register(LoadBalancerProvider) io.grpc.LoadBalancerRegistry+register(LoadBalancerProvider) io.grpc.xds.LrsLoadBalancerProvider+LrsLoadBalancerProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+PolicySelection(LoadBalancerProvider,Object) io.grpc.xds.WeightedTargetLoadBalancerProvider+WeightedTargetLoadBalancerProvider()",io.grpc.xds.EdsLoadBalancer2Test+registry io.grpc.xds.EdsLoadBalancer2Test+registry io.grpc.xds.EdsLoadBalancer2Test+registry io.grpc.xds.EdsLoadBalancer2Test+registry io.grpc.xds.EdsLoadBalancer2Test+registry io.grpc.xds.EdsLoadBalancer2Test+registry,565,11,2,"/** 
 * Prepare the LB registry with real LB policy implementations for downstream LB policies.
 */
","/**
   * Prepare the LB registry with real LB policy implementations for downstream LB policies.
   */
  private PolicySelection prepareRealDownstreamLbPolicies() {
    registry.deregister(registry.getProvider(PRIORITY_POLICY_NAME));
    registry.register(new PriorityLoadBalancerProvider());
    registry.deregister(registry.getProvider(LRS_POLICY_NAME));
    registry.register(new LrsLoadBalancerProvider());
    // weighted_target LB policy is not required to be in the registry
    return new PolicySelection(new WeightedTargetLoadBalancerProvider(), null);
  }",False
51,"assertLrsConfig(LrsConfig,String,String,String,Locality,String)",Method,receiveFirstEndpointResource() receiveFirstEndpointResource() receiveFirstEndpointResource() endpointResourceUpdated() endpointResourceUpdated() generatePriorityLbConfig() generatePriorityLbConfig() generatePriorityLbConfig() generateWeightedTargetLbConfig_withLrsPolicy() generateWeightedTargetLbConfig_withLrsPolicy(),,io.grpc.LoadBalancerProvider+getPolicyName() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.internal.ServiceConfigUtil.PolicySelection+getProvider() io.grpc.LoadBalancerProvider+getPolicyName(),io.grpc.xds.LrsLoadBalancerProvider.LrsConfig+clusterName io.grpc.xds.LrsLoadBalancerProvider.LrsConfig+edsServiceName io.grpc.xds.LrsLoadBalancerProvider.LrsConfig+lrsServerName io.grpc.xds.LrsLoadBalancerProvider.LrsConfig+locality io.grpc.xds.LrsLoadBalancerProvider.LrsConfig+childPolicy,497,9,10,,"private static void assertLrsConfig(
      LrsConfig config, String cluster, String edsServiceName, String lrsServerName,
      Locality locality, String childPolicy) {
    assertThat(config.clusterName).isEqualTo(cluster);
    assertThat(config.edsServiceName).isEqualTo(edsServiceName);
    assertThat(config.lrsServerName).isEqualTo(lrsServerName);
    assertThat(config.locality).isEqualTo(locality);
    assertThat(config.childPolicy.getProvider().getPolicyName()).isEqualTo(childPolicy);
  }",False
52,"assertAddressesEqual(List<EquivalentAddressGroup>,List<EquivalentAddressGroup>)",Method,receiveFirstEndpointResource() receiveFirstEndpointResource() receiveFirstEndpointResource() receiveFirstEndpointResource() receiveFirstEndpointResource() endpointResourceUpdated() endpointResourceUpdated() endpointResourceUpdated() endpointResourceUpdated() handleEndpointResource_ignoreUnhealthyEndpoints() handleEndpointResource_ignoreUnhealthyEndpoints() handleEndpointResource_ignoreLocalitiesWithNoHealthyEndpoints() handleEndpointResource_ignoreLocalitiesWithNoHealthyEndpoints() handleEndpointResource_ignorePrioritiesWithNoHealthyEndpoints() handleEndpointResource_ignorePrioritiesWithNoHealthyEndpoints() subtest_maxConcurrentRequests_appliedByLbConfig(boolean) subtest_maxConcurrentRequests_appliedWithDefaultValue(boolean),,java.util.List+size() java.util.List+size() java.util.List+size() java.util.List+size() java.util.List+size() java.util.List+size() io.grpc.EquivalentAddressGroup+getAddresses() java.util.List+get(int) java.util.List+get(int) io.grpc.EquivalentAddressGroup+getAddresses() io.grpc.EquivalentAddressGroup+getAddresses() java.util.List+get(int) java.util.List+get(int) io.grpc.EquivalentAddressGroup+getAddresses(),,414,8,10,"/** 
 * Asserts two list of EAGs contains same addresses, regardless of attributes. 
 */
","/** Asserts two list of EAGs contains same addresses, regardless of attributes. */
  private static void assertAddressesEqual(
      List<EquivalentAddressGroup> expected, List<EquivalentAddressGroup> actual) {
    assertThat(actual.size()).isEqualTo(expected.size());
    for (int i = 0; i < actual.size(); i++) {
      assertThat(actual.get(i).getAddresses()).isEqualTo(expected.get(i).getAddresses());
    }
  }",False
53,"buildLocalityLbEndpoints(int,int,Map<EquivalentAddressGroup,Boolean>)",Method,receiveFirstEndpointResource() receiveFirstEndpointResource() receiveFirstEndpointResource() endpointResourceUpdated() endpointResourceUpdated() handleEndpointResource_ignoreUnhealthyEndpoints() handleEndpointResource_ignoreLocalitiesWithNoHealthyEndpoints() handleEndpointResource_ignoreLocalitiesWithNoHealthyEndpoints() handleEndpointResource_ignorePrioritiesWithNoHealthyEndpoints() handleEndpointResource_ignorePrioritiesWithNoHealthyEndpoints() handleEndpointResource_errorIfNoUsableEndpoints() handleEndpointResource_errorIfNoUsableEndpoints() handleEndpointResource_shutDownExistingChildLbPoliciesIfNoUsableEndpoints() subtest_maxConcurrentRequests_appliedByLbConfig(boolean) subtest_maxConcurrentRequests_appliedWithDefaultValue(boolean) deliverSimpleClusterLoadAssignment(String),,"java.util.Map+keySet() java.util.Map+keySet() java.util.Map+get(Object) java.util.Map+get(Object) java.util.List+add(E) java.util.List+add(E) io.grpc.xds.EnvoyProtoData.LbEndpoint+LbEndpoint(EquivalentAddressGroup,int,boolean) io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints+LocalityLbEndpoints(List<LbEndpoint>,int,int)",,478,9,10,,"private static LocalityLbEndpoints buildLocalityLbEndpoints(
      int priority, int localityWeight, Map<EquivalentAddressGroup, Boolean> managedEndpoints) {
    List<LbEndpoint> endpoints = new ArrayList<>();
    for (EquivalentAddressGroup addr : managedEndpoints.keySet()) {
      boolean status = managedEndpoints.get(addr);
      endpoints.add(new LbEndpoint(addr, 100 /* used */, status));
    }
    return new LocalityLbEndpoints(endpoints, localityWeight, priority);
  }",False
54,makeAddress(String),Method,receiveFirstEndpointResource() receiveFirstEndpointResource() receiveFirstEndpointResource() receiveFirstEndpointResource() endpointResourceUpdated() endpointResourceUpdated() handleEndpointResource_ignoreUnhealthyEndpoints() handleEndpointResource_ignoreUnhealthyEndpoints() handleEndpointResource_ignoreLocalitiesWithNoHealthyEndpoints() handleEndpointResource_ignoreLocalitiesWithNoHealthyEndpoints() handleEndpointResource_ignorePrioritiesWithNoHealthyEndpoints() handleEndpointResource_ignorePrioritiesWithNoHealthyEndpoints() handleEndpointResource_errorIfNoUsableEndpoints() handleEndpointResource_errorIfNoUsableEndpoints() handleEndpointResource_shutDownExistingChildLbPoliciesIfNoUsableEndpoints() subtest_maxConcurrentRequests_appliedByLbConfig(boolean) subtest_maxConcurrentRequests_appliedByLbConfig(boolean) subtest_maxConcurrentRequests_appliedWithDefaultValue(boolean) subtest_maxConcurrentRequests_appliedWithDefaultValue(boolean) deliverSimpleClusterLoadAssignment(String),,+FakeSocketAddress(String),+name,795,33,10,,"private static EquivalentAddressGroup makeAddress(final String name) {
    class FakeSocketAddress extends SocketAddress {
      private final String name;

      private FakeSocketAddress(String name) {
        this.name = name;
      }

      @Override
      public int hashCode() {
        return Objects.hash(name);
      }

      @Override
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (!(o instanceof FakeSocketAddress)) {
          return false;
        }
        FakeSocketAddress that = (FakeSocketAddress) o;
        return Objects.equals(name, that.name);
      }

      @Override
      public String toString() {
        return name;
      }
    }

    return new EquivalentAddressGroup(new FakeSocketAddress(name));
  }",False
55,name,Field,,,,,26,1,18,,private final String name;,False
56,FakeSocketAddress(String),Method,,,,+name +name,74,3,2,,"private FakeSocketAddress(String name) {
        this.name = name;
      }",False
57,hashCode(),Method,,,java.util.Objects+hash(Object[]) java.util.Objects+hash(Object[]),+name,82,4,1,,"@Override
      public int hashCode() {
        return Objects.hash(name);
      }",False
58,equals(Object),Method,,,"java.util.Objects+equals(Object,Object) java.util.Objects+equals(Object,Object)",+name +name,302,11,1,,"@Override
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (!(o instanceof FakeSocketAddress)) {
          return false;
        }
        FakeSocketAddress that = (FakeSocketAddress) o;
        return Objects.equals(name, that.name);
      }",False
59,toString(),Method,,,,+name,71,4,1,,"@Override
      public String toString() {
        return name;
      }",False
60,FakeXdsClient,MemberClass,,,"io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+shutdown() io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+watchEdsResource(String,EdsResourceWatcher) java.util.Map+put(K,V) java.util.Map+put(K,V) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+cancelEdsResourceWatch(String,EdsResourceWatcher) java.util.Map+remove(Object) java.util.Map+remove(Object) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+addClientStats(String,String) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+FakeLoadStatsStore() java.util.Map+put(K,V) java.util.Map+put(K,V) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+removeClientStats(String,String) java.util.Map+remove(Object) java.util.Map+remove(Object) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,List<DropOverload>,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,List<DropOverload>,Map<Locality,LocalityLbEndpoints>) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverClusterLoadAssignment(String,List<DropOverload>,Map<Locality,LocalityLbEndpoints>) io.grpc.SynchronizationContext+execute(Runnable) io.grpc.SynchronizationContext+execute(Runnable) +() +run() java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) io.grpc.xds.XdsClient.EdsUpdate.Builder+setClusterName(String) io.grpc.xds.XdsClient.EdsUpdate+newBuilder() io.grpc.xds.XdsClient.EdsUpdate+newBuilder() io.grpc.xds.XdsClient.EdsUpdate.Builder+setClusterName(String) io.grpc.xds.XdsClient.EdsUpdate.Builder+addDropPolicy(DropOverload) io.grpc.xds.XdsClient.EdsUpdate.Builder+addDropPolicy(DropOverload) java.util.Map+keySet() java.util.Map+keySet() io.grpc.xds.XdsClient.EdsUpdate.Builder+addLocalityLbEndpoints(Locality,LocalityLbEndpoints) io.grpc.xds.XdsClient.EdsUpdate.Builder+addLocalityLbEndpoints(Locality,LocalityLbEndpoints) java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.XdsClient.EdsResourceWatcher+onChanged(EdsUpdate) java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.XdsClient.EdsResourceWatcher+onChanged(EdsUpdate) io.grpc.xds.XdsClient.EdsUpdate.Builder+build() io.grpc.xds.XdsClient.EdsUpdate.Builder+build() io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverResourceNotFound(String) io.grpc.SynchronizationContext+execute(Runnable) io.grpc.SynchronizationContext+execute(Runnable) +() +run() java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) io.grpc.xds.XdsClient.ResourceWatcher+onResourceDoesNotExist(String) java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.XdsClient.ResourceWatcher+onResourceDoesNotExist(String) io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+deliverError(Status) io.grpc.SynchronizationContext+execute(Runnable) io.grpc.SynchronizationContext+execute(Runnable) +() +run() java.util.Map+values() java.util.Map+values() io.grpc.xds.XdsClient.ResourceWatcher+onError(Status) io.grpc.xds.XdsClient.ResourceWatcher+onError(Status)",io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+watchers io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+clusterStats io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+watchers io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+watchers io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+clusterStats io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+clusterStats io.grpc.xds.EdsLoadBalancer2Test+syncContext io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+watchers io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+watchers io.grpc.xds.EdsLoadBalancer2Test+syncContext io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+watchers io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+watchers io.grpc.xds.EdsLoadBalancer2Test+syncContext io.grpc.xds.EdsLoadBalancer2Test.FakeXdsClient+watchers,2604,79,18,,"private final class FakeXdsClient extends XdsClient {
    private final Map<String, EdsResourceWatcher> watchers = new HashMap<>();
    private final Map<String, FakeLoadStatsStore> clusterStats = new HashMap<>();

    @Override
    void shutdown() {
      // no-op
    }

    @Override
    void watchEdsResource(String resourceName, EdsResourceWatcher watcher) {
      watchers.put(resourceName, watcher);
    }

    @Override
    void cancelEdsResourceWatch(String resourceName, EdsResourceWatcher watcher) {
      watchers.remove(resourceName);
    }

    @Override
    LoadStatsStore addClientStats(String clusterName, @Nullable String clusterServiceName) {
      FakeLoadStatsStore stats = new FakeLoadStatsStore();
      clusterStats.put(clusterServiceName, stats);
      return stats;
    }

    @Override
    void removeClientStats(String clusterName, @Nullable String clusterServiceName) {
      clusterStats.remove(clusterServiceName);
    }

    void deliverClusterLoadAssignment(
        String resource, Map<Locality, LocalityLbEndpoints> localityLbEndpointsMap) {
      deliverClusterLoadAssignment(
          resource, Collections.<DropOverload>emptyList(), localityLbEndpointsMap);
    }

    void deliverClusterLoadAssignment(
        final String resource, final List<DropOverload> dropOverloads,
        final Map<Locality, LocalityLbEndpoints> localityLbEndpointsMap) {
      syncContext.execute(new Runnable() {
        @Override
        public void run() {
          if (watchers.containsKey(resource)) {
            EdsUpdate.Builder builder  = EdsUpdate.newBuilder().setClusterName(resource);
            for (DropOverload dropOverload : dropOverloads) {
              builder.addDropPolicy(dropOverload);
            }
            for (Locality locality : localityLbEndpointsMap.keySet()) {
              builder.addLocalityLbEndpoints(locality, localityLbEndpointsMap.get(locality));
            }
            watchers.get(resource).onChanged(builder.build());
          }
        }
      });
    }

    void deliverResourceNotFound(final String resource) {
      syncContext.execute(new Runnable() {
        @Override
        public void run() {
          if (watchers.containsKey(resource)) {
            watchers.get(resource).onResourceDoesNotExist(resource);
          }
        }
      });
    }

    void deliverError(final Status error) {
      syncContext.execute(new Runnable() {
        @Override
        public void run() {
          for (EdsResourceWatcher watcher : watchers.values()) {
            watcher.onError(error);
          }
        }
      });
    }
  }",False
61,FakeLoadStatsStore,MemberClass,,,"io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+generateLoadReport() java.lang.UnsupportedOperationException+UnsupportedOperationException(String) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+addLocality(Locality) io.grpc.xds.ClientLoadCounter+ClientLoadCounter() io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+removeLocality(Locality) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+recordDroppedRequest(String) java.util.Map+containsKey(Object) java.util.Map+containsKey(Object) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+get(Object) java.util.Map+get(Object) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+recordDroppedRequest()",io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+categorizedDrops io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+categorizedDrops io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+categorizedDrops io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+categorizedDrops io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+categorizedDrops io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops io.grpc.xds.EdsLoadBalancer2Test.FakeLoadStatsStore+totalDrops,901,34,26,,"private static final class FakeLoadStatsStore implements LoadStatsStore {
    private final Map<String, Long> categorizedDrops = new HashMap<>();
    private int totalDrops;

    @Override
    public ClusterStats generateLoadReport() {
      throw new UnsupportedOperationException(""should not be called"");
    }

    @Override
    public ClientLoadCounter addLocality(Locality locality) {
      return new ClientLoadCounter();
    }

    @Override
    public void removeLocality(Locality locality) {
      // no-op
    }

    @Override
    public void recordDroppedRequest(String category) {
      if (!categorizedDrops.containsKey(category)) {
        categorizedDrops.put(category, 1L);
      } else {
        categorizedDrops.put(category, categorizedDrops.get(category) + 1L);
      }
      totalDrops++;
    }

    @Override
    public void recordDroppedRequest() {
      totalDrops++;
    }
  }",False
62,FakeLoadBalancerProvider,MemberClass,,,"io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancerProvider+FakeLoadBalancerProvider(String) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancerProvider+newLoadBalancer(Helper) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+FakeLoadBalancer(String,Helper) java.util.List+add(E) java.util.List+add(E) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancerProvider+isAvailable() io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancerProvider+getPriority() io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancerProvider+getPolicyName()",io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancerProvider+policyName io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancerProvider+policyName io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancerProvider+policyName io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancerProvider+policyName,671,29,18,,"private final class FakeLoadBalancerProvider extends LoadBalancerProvider {
    private final String policyName;

    FakeLoadBalancerProvider(String policyName) {
      this.policyName = policyName;
    }

    @Override
    public LoadBalancer newLoadBalancer(Helper helper) {
      FakeLoadBalancer balancer = new FakeLoadBalancer(policyName, helper);
      downstreamBalancers.add(balancer);
      return balancer;
    }

    @Override
    public boolean isAvailable() {
      return true;
    }

    @Override
    public int getPriority() {
      return 0;  // doesn't matter
    }

    @Override
    public String getPolicyName() {
      return policyName;
    }
  }",False
63,FakeLoadBalancer,MemberClass,,,"io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+FakeLoadBalancer(String,Helper) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+handleResolvedAddresses(ResolvedAddresses) io.grpc.LoadBalancer.ResolvedAddresses+getAddresses() io.grpc.LoadBalancer.ResolvedAddresses+getAddresses() io.grpc.LoadBalancer.ResolvedAddresses+getLoadBalancingPolicyConfig() io.grpc.LoadBalancer.ResolvedAddresses+getLoadBalancingPolicyConfig() io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+handleNameResolutionError(Status) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+shutdown() java.util.List+remove(Object) java.util.List+remove(Object) io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+deliverSubchannelState(Subchannel,ConnectivityState) +() +pickSubchannel(PickSubchannelArgs) io.grpc.LoadBalancer.PickResult+withSubchannel(Subchannel) io.grpc.LoadBalancer.PickResult+withSubchannel(Subchannel) io.grpc.LoadBalancer.Helper+updateBalancingState(ConnectivityState,SubchannelPicker) io.grpc.LoadBalancer.Helper+updateBalancingState(ConnectivityState,SubchannelPicker)",io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+name io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+helper io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+addresses io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+config io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+upstreamError io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+shutdown io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+name io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+helper io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+addresses io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+config io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+upstreamError io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+shutdown io.grpc.xds.EdsLoadBalancer2Test+downstreamBalancers io.grpc.xds.EdsLoadBalancer2Test.FakeLoadBalancer+helper,1181,40,18,,"private final class FakeLoadBalancer extends LoadBalancer {
    private final String name;
    private final Helper helper;
    private List<EquivalentAddressGroup> addresses;
    private Object config;
    private Status upstreamError;
    private boolean shutdown;

    FakeLoadBalancer(String name, Helper helper) {
      this.name = name;
      this.helper = helper;
    }

    @Override
    public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {
      addresses = resolvedAddresses.getAddresses();
      config = resolvedAddresses.getLoadBalancingPolicyConfig();
    }

    @Override
    public void handleNameResolutionError(Status error) {
      upstreamError = error;
    }

    @Override
    public void shutdown() {
      shutdown = true;
      downstreamBalancers.remove(this);
    }

    void deliverSubchannelState(final Subchannel subchannel, ConnectivityState state) {
      SubchannelPicker picker = new SubchannelPicker() {
        @Override
        public PickResult pickSubchannel(PickSubchannelArgs args) {
          return PickResult.withSubchannel(subchannel);
        }
      };
      helper.updateBalancingState(state, picker);
    }
  }",False
64,FakeLbHelper,MemberClass,,,"io.grpc.xds.EdsLoadBalancer2Test.FakeLbHelper+updateBalancingState(ConnectivityState,SubchannelPicker) io.grpc.xds.EdsLoadBalancer2Test.FakeLbHelper+createSubchannel(CreateSubchannelArgs) io.grpc.xds.EdsLoadBalancer2Test.FakeLbHelper+getSynchronizationContext() io.grpc.xds.EdsLoadBalancer2Test.FakeLbHelper+getScheduledExecutorService() io.grpc.internal.FakeClock+getScheduledExecutorService() io.grpc.internal.FakeClock+getScheduledExecutorService() io.grpc.xds.EdsLoadBalancer2Test.FakeLbHelper+createOobChannel(EquivalentAddressGroup,String) java.lang.UnsupportedOperationException+UnsupportedOperationException(String) io.grpc.xds.EdsLoadBalancer2Test.FakeLbHelper+getNameResolverFactory() java.lang.UnsupportedOperationException+UnsupportedOperationException(String) io.grpc.xds.EdsLoadBalancer2Test.FakeLbHelper+getAuthority()",io.grpc.xds.EdsLoadBalancer2Test+currentState io.grpc.xds.EdsLoadBalancer2Test+currentPicker io.grpc.xds.EdsLoadBalancer2Test+syncContext io.grpc.xds.EdsLoadBalancer2Test+fakeClock io.grpc.xds.EdsLoadBalancer2Test+AUTHORITY,1083,40,18,,"private final class FakeLbHelper extends LoadBalancer.Helper {

    @Override
    public void updateBalancingState(
        @Nonnull ConnectivityState newState, @Nonnull SubchannelPicker newPicker) {
      currentState = newState;
      currentPicker = newPicker;
    }

    @Override
    public Subchannel createSubchannel(CreateSubchannelArgs args) {
      return mock(Subchannel.class);
    }

    @Override
    public SynchronizationContext getSynchronizationContext() {
      return syncContext;
    }

    @Override
    public ScheduledExecutorService getScheduledExecutorService() {
      return fakeClock.getScheduledExecutorService();
    }

    @Override
    public ManagedChannel createOobChannel(EquivalentAddressGroup eag, String authority) {
      throw new UnsupportedOperationException(""should not be called"");
    }

    @Deprecated
    @Override
    public NameResolver.Factory getNameResolverFactory() {
      throw new UnsupportedOperationException(""should not be called"");
    }

    @Override
    public String getAuthority() {
      return AUTHORITY;
    }
  }",False
