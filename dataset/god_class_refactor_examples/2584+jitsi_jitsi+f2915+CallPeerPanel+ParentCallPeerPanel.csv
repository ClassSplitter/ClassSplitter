index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,logger,Field,,,,,83,2,26,,"private static final Logger logger =
        Logger.getLogger(CallPeerPanel.class);",False
2,callStatusLabel,Field,"setState(String,Icon) setState(String,Icon)",,,,52,1,18,,private final JLabel callStatusLabel = new JLabel();,True
3,securityStatusLabel,Field,"CallPeerPanel(CallDialog,CallPeer)",,,,54,1,18,,private final SecurityStatusLabel securityStatusLabel;,True
4,muteStatusLabel,Field,,,,,52,1,18,,private final JLabel muteStatusLabel = new JLabel();,True
5,timeLabel,Field,,,,,71,1,18,,"private final JLabel timeLabel = new JLabel(""00:00:00"", JLabel.CENTER);",False
6,callStartTime,Field,,,,,203,5,18,"/** 
 * This date is meant to be used in the GuiCallPeerRecord, which is added to the CallList after a call.
 */
","/**
     * This date is meant to be used in the GuiCallPeerRecord, which is
     * added to the CallList after a call.
     */
    private final Date callStartTime = new Date(System.currentTimeMillis());",True
7,callDuration,Field,"CallPeerPanel(CallDialog,CallPeer)",,,,26,1,2,,private Date callDuration;,True
8,timer,Field,"CallPeerPanel(CallDialog,CallPeer) CallPeerPanel(CallDialog,CallPeer) startCallTimer() stopCallTimer()",,,,20,1,2,,private Timer timer;,True
9,callType,Field,setCallType(String),,,,24,1,2,,private String callType;,True
10,peerName,Field,"CallPeerPanel(CallDialog,CallPeer)",,,,30,1,18,,private final String peerName;,False
11,callPeer,Field,"CallPeerPanel(CallDialog,CallPeer)",,,,32,1,18,,private final CallPeer callPeer;,False
12,videoContainers,Field,,,,,93,2,18,,"private final java.util.List<Container> videoContainers =
        new ArrayList<Container>();",False
13,videoTelephony,Field,,,,,50,1,2,,private OperationSetVideoTelephony videoTelephony;,False
14,localVideo,Field,handleVideoEvent(VideoEvent) handleVideoEvent(VideoEvent) handleVideoEvent(VideoEvent),,,,29,1,2,,private Component localVideo;,False
15,isAudioSecurityOn,Field,setAudioSecurityOn(boolean),,,,42,1,2,,private boolean isAudioSecurityOn = false;,True
16,isVideoSecurityOn,Field,setVideoSecurityOn(boolean),,,,42,1,2,,private boolean isVideoSecurityOn = false;,True
17,encryptionCipher,Field,setEncryptionCipher(String),,,,32,1,2,,private String encryptionCipher;,True
18,fullScreenWindow,Field,exitFullScreen(Window) exitFullScreen(Window),,,,352,7,2,"/** 
 * The current <code>Window</code> being displayed in full-screen. Because the AWT API with respect to the full-screen support doesn't seem sophisticated enough, the field is used sparingly i.e. when there are no other means (such as a local variable) of acquiring the instance.
 */
","/**
     * The current <code>Window</code> being displayed in full-screen. Because
     * the AWT API with respect to the full-screen support doesn't seem
     * sophisticated enough, the field is used sparingly i.e. when there are no
     * other means (such as a local variable) of acquiring the instance.
     */
    private Window fullScreenWindow;",False
19,securityPanel,Field,,,,,43,1,2,,private SecurityPanel securityPanel = null;,True
20,callDialog,Field,"CallPeerPanel(CallDialog,CallPeer)",,,,36,1,18,,private final CallDialog callDialog;,True
21,"CallPeerPanel(CallDialog,CallPeer)",Method,,,"net.java.sip.communicator.service.protocol.CallPeer+getDisplayName() net.java.sip.communicator.service.protocol.CallPeer+getDisplayName() net.java.sip.communicator.impl.gui.main.call.SecurityStatusLabel+SecurityStatusLabel(CallPeerPanel,Icon,int) javax.swing.ImageIcon+ImageIcon(Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createNameBar() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createNameBar() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createCenter() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createCenter() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createStatusBar() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createStatusBar() java.awt.Container+setLayout(LayoutManager) java.awt.Container+setLayout(LayoutManager) java.awt.GridBagLayout+GridBagLayout() java.awt.GridBagConstraints+GridBagConstraints() java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Component+setPreferredSize(Dimension) java.awt.Component+setPreferredSize(Dimension) java.awt.Dimension+Dimension(int,int) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Insets+Insets(int,int,int,int) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) javax.swing.Timer+Timer(int,ActionListener) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.CallTimerListener+CallTimerListener() javax.swing.Timer+setRepeats(boolean) javax.swing.Timer+setRepeats(boolean) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+addVideoListener() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+addVideoListener()",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDialog net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDialog net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+peerName net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+peerName net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityStatusLabel net.java.sip.communicator.impl.gui.utils.ImageLoader+SECURE_BUTTON_OFF javax.swing.SwingConstants+CENTER net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDuration net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDuration java.awt.GridBagConstraints+fill java.awt.GridBagConstraints+NONE java.awt.GridBagConstraints+gridx java.awt.GridBagConstraints+gridy java.awt.GridBagConstraints+weightx java.awt.GridBagConstraints+fill java.awt.GridBagConstraints+BOTH java.awt.GridBagConstraints+gridx java.awt.GridBagConstraints+gridy java.awt.GridBagConstraints+weightx java.awt.GridBagConstraints+weighty java.awt.GridBagConstraints+fill java.awt.GridBagConstraints+NONE java.awt.GridBagConstraints+gridx java.awt.GridBagConstraints+gridy java.awt.GridBagConstraints+weightx java.awt.GridBagConstraints+weighty java.awt.GridBagConstraints+insets net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer,2524,77,1,"/** 
 * Creates a <tt>CallPeerPanel</tt> for the given call peer.
 * @param callPeer a call peer
 */
","/**
     * Creates a <tt>CallPeerPanel</tt> for the given call peer.
     *
     * @param callPeer a call peer
     */
    public CallPeerPanel(CallDialog callDialog,
                                CallPeer callPeer)
    {
        this.callDialog = callDialog;
        this.callPeer = callPeer;
        this.peerName = callPeer.getDisplayName();

        this.securityStatusLabel = new SecurityStatusLabel(
            this,
            new ImageIcon(ImageLoader.getImage(ImageLoader.SECURE_BUTTON_OFF)),
            JLabel.CENTER);

        // Initialize the date to 0
        // Need to use Calendar because new Date(0) returns a date where the
        // hour is initialized to 1.
        Calendar c = Calendar.getInstance();
        c.set(0, 0, 0, 0, 0, 0);
        this.callDuration = c.getTime();

        /* Create the main Components of the UI. */
        Component nameBar = createNameBar();
        Component center = createCenter();
        Component statusBar = createStatusBar();

        /* Lay out the main Components of the UI. */
        setLayout(new GridBagLayout());

        GridBagConstraints constraints = new GridBagConstraints();
        if (nameBar != null)
        {
            constraints.fill = GridBagConstraints.NONE;
            constraints.gridx = 0;
            constraints.gridy = 0;
            constraints.weightx = 0;

            add(nameBar, constraints);
        }
        if (center != null)
        {
            /*
             * Don't let the center dictate the preferred size because it may
             * display large videos. Otherwise, the large video will make this
             * panel expand and then the panel's container will show scroll
             * bars.
             */
            center.setPreferredSize(new Dimension(1, 1));

            constraints.fill = GridBagConstraints.BOTH;
            constraints.gridx = 0;
            constraints.gridy = 1;
            constraints.weightx = 1;
            constraints.weighty = 1;

            add(center, constraints);
        }
        if (statusBar != null)
        {
            constraints.fill = GridBagConstraints.NONE;
            constraints.gridx = 0;
            constraints.gridy = 3;
            constraints.weightx = 0;
            constraints.weighty = 0;
            constraints.insets = new Insets(5, 0, 0, 0);

            add(statusBar, constraints);
        }

        this.timer = new Timer(1000, new CallTimerListener());
        this.timer.setRepeats(true);

        addVideoListener();
    }",False
22,"createButtonBar(boolean,Component[])",Method,createStatusBar() createFullScreenButtonBar(),,"java.awt.Container+Container() net.java.sip.communicator.util.swing.TransparentPanel+TransparentPanel() java.awt.Container+setLayout(LayoutManager) java.awt.Container+setLayout(LayoutManager) java.awt.FlowLayout+FlowLayout(int,int,int) java.awt.Container+add(Component) java.awt.Container+add(Component)",java.awt.FlowLayout+CENTER,457,15,2,,"private Component createButtonBar(  boolean heavyweight,
                                        Component[] buttons)
    {
        Container buttonBar
            = heavyweight ? new Container() : new TransparentPanel();

        buttonBar.setLayout(new FlowLayout(FlowLayout.CENTER, 3, 3));

        for (Component button : buttons)
        {
            if (button != null)
                buttonBar.add(button);
        }
        return buttonBar;
    }",False
23,createCenter(),Method,"CallPeerPanel(CallDialog,CallPeer) enterFullScreen()",,"javax.swing.JLabel+JLabel(Icon) javax.swing.ImageIcon+ImageIcon(Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) javax.swing.JComponent+setPreferredSize(Dimension) javax.swing.JComponent+setPreferredSize(Dimension) java.awt.Dimension+Dimension(int,int) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createVideoContainer(Component) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createVideoContainer(Component) java.awt.Component+addHierarchyListener(HierarchyListener) java.awt.Component+addHierarchyListener(HierarchyListener) +() +hierarchyChanged(HierarchyEvent)",net.java.sip.communicator.impl.gui.utils.ImageLoader+DEFAULT_USER_PHOTO,1771,45,2,"/** 
 * Creates the <code>Component</code> hierarchy of the central area of this <code>CallPeerPanel</code> which displays the photo of the <code>CallPeer</code> or the video if any.
 * @return the root of the <code>Component</code> hierarchy of the centralarea of this <code>CallPeerPanel</code> which displays the photo of the <code>CallPeer</code> or the video if any
 */
","/**
     * Creates the <code>Component</code> hierarchy of the central area of this
     * <code>CallPeerPanel</code> which displays the photo of the
     * <code>CallPeer</code> or the video if any.
     *
     * @return the root of the <code>Component</code> hierarchy of the central
     *         area of this <code>CallPeerPanel</code> which displays the
     *         photo of the <code>CallPeer</code> or the video if any
     */
    private Component createCenter()
    {
        final JLabel photoLabel =
            new JLabel(new ImageIcon(ImageLoader
                .getImage(ImageLoader.DEFAULT_USER_PHOTO)));

        photoLabel.setPreferredSize(new Dimension(90, 90));

        final Container videoContainer = createVideoContainer(photoLabel);
        videoContainer.addHierarchyListener(new HierarchyListener()
        {
            public void hierarchyChanged(HierarchyEvent event)
            {
                int changeFlags = HierarchyEvent.DISPLAYABILITY_CHANGED;

                if ((event.getChangeFlags() & changeFlags) == changeFlags)
                {
                    synchronized (videoContainers)
                    {
                        boolean changed = false;

                        if (videoContainer.isDisplayable())
                        {
                            if (!videoContainers.contains(videoContainer))
                                changed = videoContainers.add(videoContainer);
                        }
                        else
                            changed = videoContainers.remove(videoContainer);
                        if (changed)
                            handleVideoEvent(null);
                    }
                }
            }
        });
        return videoContainer;
    }",False
24,createVideoContainer(Component),Method,createCenter(),,net.java.sip.communicator.util.swing.VideoContainer+VideoContainer(Component),,1187,21,2,"/** 
 * Creates a new AWT <code>Container</code> which can display a single <code>Component</code> at a time (supposedly, one which represents video) and, in the absence of such a <code>Component</code>, displays a predefined default <code>Component</code> (in accord with the previous supposition, one which is the default when there is no video). The returned <code>Container</code> will track the <code>Components</code>s added to and removed from it in order to make sure that <code>noVideoContainer</code> is displayed as described.
 * @param noVideoComponent the predefined default <code>Component</code> tobe displayed in the returned <code>Container</code> when there is no other <code>Component</code> in it
 * @return a new <code>Container</code> which can display a single<code>Component</code> at a time and, in the absence of such a <code>Component</code>, displays <code>noVideoComponent</code>
 */
","/**
     * Creates a new AWT <code>Container</code> which can display a single
     * <code>Component</code> at a time (supposedly, one which represents video)
     * and, in the absence of such a <code>Component</code>, displays a
     * predefined default <code>Component</code> (in accord with the previous
     * supposition, one which is the default when there is no video). The
     * returned <code>Container</code> will track the <code>Components</code>s
     * added to and removed from it in order to make sure that
     * <code>noVideoContainer</code> is displayed as described.
     *
     * @param noVideoComponent the predefined default <code>Component</code> to
     *            be displayed in the returned <code>Container</code> when there
     *            is no other <code>Component</code> in it
     * @return a new <code>Container</code> which can display a single
     *         <code>Component</code> at a time and, in the absence of such a
     *         <code>Component</code>, displays <code>noVideoComponent</code>
     */
    private Container createVideoContainer(Component noVideoComponent)
    {
        return new VideoContainer(noVideoComponent);
    }",False
25,createNameBar(),Method,"CallPeerPanel(CallDialog,CallPeer)",,"javax.swing.JLabel+JLabel(String,int) javax.swing.JLabel+setText(String) javax.swing.JLabel+setText(String) javax.swing.JComponent+setAlignmentX(float) javax.swing.JComponent+setAlignmentX(float)",javax.swing.SwingConstants+CENTER net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+peerName javax.swing.SwingConstants+CENTER,236,9,2,,"private Component createNameBar()
    {
        // nameLabel
        JLabel nameLabel = new JLabel("""", JLabel.CENTER);
        nameLabel.setText(peerName);
        nameLabel.setAlignmentX(JLabel.CENTER);

        return nameLabel;
    }",True
26,createStatusBar(),Method,"CallPeerPanel(CallDialog,CallPeer)",,"javax.swing.JComponent+setForeground(Color) javax.swing.JComponent+setForeground(Color) javax.swing.JLabel+setText(String) javax.swing.JLabel+setText(String) net.java.sip.communicator.service.protocol.CallPeerState+getStateString() net.java.sip.communicator.service.protocol.CallPeer+getState() net.java.sip.communicator.service.protocol.CallPeer+getState() net.java.sip.communicator.service.protocol.CallPeerState+getStateString() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.PeerStatusPanel+PeerStatusPanel(LayoutManager) java.awt.FlowLayout+FlowLayout(int,int,int) net.java.sip.communicator.util.swing.TransparentPanel+TransparentPanel(LayoutManager) java.awt.FlowLayout+FlowLayout(int,int,int) javax.swing.JComponent+setForeground(Color) javax.swing.JComponent+setForeground(Color) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createTransferCallButton() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createTransferCallButton() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createEnterFullScreenButton() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createEnterFullScreenButton() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createButtonBar(boolean,Component[]) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createButtonBar(boolean,Component[]) java.awt.Container+add(Component) java.awt.Container+add(Component)",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel java.awt.Color+WHITE net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer java.awt.FlowLayout+CENTER java.awt.FlowLayout+CENTER net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timeLabel java.awt.Color+WHITE net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+muteStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timeLabel,1447,44,2,"/** 
 * Creates the <code>Component</code> hierarchy of the area of status-related information such as <code>CallPeer</code> display name, call duration, security status.
 * @return the root of the <code>Component</code> hierarchy of the area ofstatus-related information such as <code>CallPeer</code> display name, call duration, security status
 */
","/**
     * Creates the <code>Component</code> hierarchy of the area of
     * status-related information such as <code>CallPeer</code> display
     * name, call duration, security status.
     *
     * @return the root of the <code>Component</code> hierarchy of the area of
     *         status-related information such as <code>CallPeer</code>
     *         display name, call duration, security status
     */
    private Component createStatusBar()
    {
        // stateLabel
        callStatusLabel.setForeground(Color.WHITE);
        callStatusLabel.setText(callPeer.getState().getStateString());

        PeerStatusPanel statusPanel = new PeerStatusPanel(
                new FlowLayout(FlowLayout.CENTER, 10, 0));

        TransparentPanel statusIconsPanel
            = new TransparentPanel(
                new FlowLayout(FlowLayout.CENTER, 5, 0));

        timeLabel.setForeground(Color.WHITE);

        statusIconsPanel.add(securityStatusLabel);
        statusIconsPanel.add(muteStatusLabel);
        statusIconsPanel.add(callStatusLabel);

        statusPanel.add(timeLabel);
        statusPanel.add(statusIconsPanel);

        Component[] buttons =
            new Component[]
            {
                createTransferCallButton(),
                createEnterFullScreenButton()
            };

        Component buttonBar = createButtonBar(false, buttons);

        statusPanel.add(buttonBar);

        return statusPanel;
    }",False
27,createTransferCallButton(),Method,createStatusBar(),,net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.Call+getProtocolProvider() net.java.sip.communicator.service.protocol.Call+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.impl.gui.main.call.TransferCallButton+TransferCallButton(CallPeer),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer,898,24,2,"/** 
 * Creates a new <code>Component</code> representing a UI means to transfer the <code>Call</code> of the associated <code>callPeer</code> or <tt>null</tt> if call-transfer is unsupported.
 * @return a new <code>Component</code> representing the UI means totransfer the <code>Call</code> of <code>callPeer</code> or <tt>null</tt> if call-transfer is unsupported
 */
","/**
     * Creates a new <code>Component</code> representing a UI means to transfer
     * the <code>Call</code> of the associated <code>callPeer</code> or
     * <tt>null</tt> if call-transfer is unsupported.
     *
     * @return a new <code>Component</code> representing the UI means to
     *         transfer the <code>Call</code> of <code>callPeer</code> or
     *         <tt>null</tt> if call-transfer is unsupported
     */
    private Component createTransferCallButton()
    {
        Call call = callPeer.getCall();

        if (call != null)
        {
            OperationSetAdvancedTelephony telephony =
                (OperationSetAdvancedTelephony) call.getProtocolProvider()
                    .getOperationSet(OperationSetAdvancedTelephony.class);

            if (telephony != null)
                return new TransferCallButton(callPeer);
        }
        return null;
    }",True
28,createSecurityPanel(CallPeerSecurityOnEvent),Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOn(CallPeerSecurityOnEvent),"net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.Call+getProtocolProvider() net.java.sip.communicator.service.protocol.Call+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.impl.gui.main.call.SecurityPanel+SecurityPanel(CallPeer) java.awt.GridBagConstraints+GridBagConstraints() java.awt.Insets+Insets(int,int,int,int) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) net.java.sip.communicator.impl.gui.main.call.SecurityPanel+refreshStates(CallPeerSecurityOnEvent) net.java.sip.communicator.impl.gui.main.call.SecurityPanel+refreshStates(CallPeerSecurityOnEvent) javax.swing.JComponent+revalidate() javax.swing.JComponent+revalidate()",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityPanel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityPanel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer java.awt.GridBagConstraints+fill java.awt.GridBagConstraints+NONE java.awt.GridBagConstraints+gridx java.awt.GridBagConstraints+gridy java.awt.GridBagConstraints+weightx java.awt.GridBagConstraints+weighty java.awt.GridBagConstraints+insets net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityPanel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityPanel,1133,36,1,,"public void createSecurityPanel(
        CallPeerSecurityOnEvent event)
    {
        Call call = callPeer.getCall();

        if (call != null)
        {
            OperationSetSecureTelephony secure
                = (OperationSetSecureTelephony) call
                    .getProtocolProvider().getOperationSet(
                            OperationSetSecureTelephony.class);

            if (secure != null)
            {
                if (securityPanel == null)
                {
                    securityPanel = new SecurityPanel(callPeer);

                    GridBagConstraints constraints = new GridBagConstraints();

                    constraints.fill = GridBagConstraints.NONE;
                    constraints.gridx = 0;
                    constraints.gridy = 2;
                    constraints.weightx = 0;
                    constraints.weighty = 0;
                    constraints.insets = new Insets(5, 0, 0, 0);

                    this.add(securityPanel, constraints);
                }

                securityPanel.refreshStates(event);

                this.revalidate();
            }
        }
    }",True
29,VideoTelephonyListener,MemberClass,,,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.VideoTelephonyListener+propertyChange(PropertyChangeEvent) java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.util.PropertyChangeEvent+getPropertyName() net.java.sip.communicator.util.PropertyChangeEvent+getPropertyName() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleLocalVideoStreamingChange(VideoTelephonyListener) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleLocalVideoStreamingChange(VideoTelephonyListener) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.VideoTelephonyListener+videoAdded(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleVideoEvent(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleVideoEvent(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.VideoTelephonyListener+videoRemoved(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleVideoEvent(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleVideoEvent(VideoEvent),net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+LOCAL_VIDEO_STREAMING,649,24,2,,"private class VideoTelephonyListener
        implements PropertyChangeListener,
                   VideoListener
    {
        public void propertyChange(PropertyChangeEvent event)
        {
            if (OperationSetVideoTelephony.LOCAL_VIDEO_STREAMING.equals(
                    event.getPropertyName()))
            {
                handleLocalVideoStreamingChange(
                        this);
            }
        }

        public void videoAdded(VideoEvent event)
        {
            handleVideoEvent(event);
        }

        public void videoRemoved(VideoEvent event)
        {
            handleVideoEvent(event);
        }
    }",False
30,addVideoListener(),Method,"CallPeerPanel(CallDialog,CallPeer)",,"net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.Call+getProtocolProvider() net.java.sip.communicator.service.protocol.Call+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.VideoTelephonyListener+VideoTelephonyListener() +() +addVideoListener() net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+addVideoListener(CallPeer,VideoListener) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+addVideoListener(CallPeer,VideoListener) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+addPropertyChangeListener(Call,PropertyChangeListener) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+addPropertyChangeListener(Call,PropertyChangeListener) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleVideoEvent(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleVideoEvent(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleLocalVideoStreamingChange(VideoTelephonyListener) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleLocalVideoStreamingChange(VideoTelephonyListener)",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer +videoListenerIsAdded net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer +videoListenerIsAdded net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoContainers net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoTelephony,5278,143,2,"/** 
 * Sets up listening to notifications about adding or removing video for the <code>CallPeer</code> this panel depicts and displays the video in question in the last-known of  {@link #videoContainers} (because the videois represented by a <code>Component</code> and it cannot be displayed in multiple <code>Container</code>s at one and the same time) as soon as it arrives.
 */
","/**
     * Sets up listening to notifications about adding or removing video for the
     * <code>CallPeer</code> this panel depicts and displays the video in
     * question in the last-known of {@link #videoContainers} (because the video
     * is represented by a <code>Component</code> and it cannot be displayed in
     * multiple <code>Container</code>s at one and the same time) as soon as it
     * arrives.
     */
    private OperationSetVideoTelephony addVideoListener()
    {
        final Call call = callPeer.getCall();
        if (call == null)
            return null;

        final OperationSetVideoTelephony telephony =
            (OperationSetVideoTelephony) call.getProtocolProvider()
                .getOperationSet(OperationSetVideoTelephony.class);
        if (telephony == null)
            return null;

        final VideoTelephonyListener videoTelephonyListener
            = new VideoTelephonyListener();

        /*
         * The video is only available while the #callPeer is in a Call
         * and that call is in progress so only listen to VideoEvents during
         * that time.
         */
        CallChangeListener callListener = new CallChangeListener()
        {
            private boolean videoListenerIsAdded;

            private void addVideoListener()
            {
                telephony.addVideoListener(
                        callPeer, videoTelephonyListener);
                telephony.addPropertyChangeListener(
                        call, videoTelephonyListener);
                videoListenerIsAdded = true;

                synchronized (videoContainers)
                {
                    videoTelephony = telephony;

                    handleVideoEvent(null);

                    handleLocalVideoStreamingChange(
                            videoTelephonyListener);
                }
            }

            /*
             * When the #callPeer of this CallPeerPanel gets added
             * to the Call, starts listening for changes in the video in order
             * to display it.
             */
            public synchronized void callPeerAdded(
                CallPeerEvent event)
            {
                if (callPeer.equals(event.getSourceCallPeer())
                        && !videoListenerIsAdded)
                {
                    Call call = callPeer.getCall();

                    if ((call != null)
                            && CallState.CALL_IN_PROGRESS.equals(
                                    call.getCallState()))
                        addVideoListener();
                }
            }

            /*
             * When the #callPeer of this CallPeerPanel leaves the
             * Call, stops listening for changes in the video because it should
             * no longer be updated anyway.
             */
            public synchronized void callPeerRemoved(
                CallPeerEvent event)
            {
                if (callPeer.equals(event.getSourceCallPeer())
                    && videoListenerIsAdded)
                {
                    Call call = callPeer.getCall();

                    if (call != null)
                        removeVideoListener();
                }
            }

            /*
             * When the Call of #callPeer ends, stops tracking the
             * updates in the video because there should no longer be any video
             * anyway. When the Call in question starts, starts tracking any
             * changes to the video because it's negotiated and it should be
             * displayed in this CallPeerPanel.
             */
            public synchronized void callStateChanged(CallChangeEvent event)
            {
                CallState newCallState = (CallState) event.getNewValue();

                if (CallState.CALL_ENDED.equals(newCallState))
                {
                    if (videoListenerIsAdded)
                        removeVideoListener();
                    call.removeCallChangeListener(this);
                }
                else if (CallState.CALL_IN_PROGRESS.equals(newCallState))
                {
                    if (!videoListenerIsAdded)
                        addVideoListener();
                }
            }

            private void removeVideoListener()
            {
                telephony.removeVideoListener(
                        callPeer, videoTelephonyListener);
                telephony.removePropertyChangeListener(
                        call, videoTelephonyListener);
                videoListenerIsAdded = false;

                if (localVideo != null)
                {
                    telephony.disposeLocalVisualComponent(
                            callPeer, localVideo);
                    localVideo = null;
                }

                synchronized (videoContainers)
                {
                    if (telephony.equals(videoTelephony))
                        videoTelephony = null;
                }

                exitFullScreen(fullScreenWindow);
            }
        };
        call.addCallChangeListener(callListener);
        callListener.callStateChanged(new CallChangeEvent(call,
            CallChangeEvent.CALL_STATE_CHANGE, null, call.getCallState()));

        return telephony;
    }",False
31,handleVideoEvent(VideoEvent),Method,VideoTelephonyListener.videoAdded(VideoEvent) VideoTelephonyListener.videoRemoved(VideoEvent),,net.java.sip.communicator.service.protocol.event.VideoEvent+isConsumed() net.java.sip.communicator.service.protocol.event.VideoEvent+isConsumed() net.java.sip.communicator.service.protocol.event.VideoEvent+getOrigin() net.java.sip.communicator.service.protocol.event.VideoEvent+getOrigin() net.java.sip.communicator.service.protocol.event.VideoEvent+getVisualComponent() net.java.sip.communicator.service.protocol.event.VideoEvent+getVisualComponent() net.java.sip.communicator.service.protocol.event.VideoEvent+getType() net.java.sip.communicator.service.protocol.event.VideoEvent+getType() net.java.sip.communicator.service.protocol.event.VideoEvent+consume() net.java.sip.communicator.service.protocol.event.VideoEvent+consume() javax.swing.SwingUtilities+isEventDispatchThread() javax.swing.SwingUtilities+isEventDispatchThread() javax.swing.SwingUtilities+invokeLater(Runnable) javax.swing.SwingUtilities+invokeLater(Runnable) +() +run(),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoContainers net.java.sip.communicator.service.protocol.event.VideoEvent+LOCAL net.java.sip.communicator.service.protocol.event.VideoEvent+VIDEO_ADDED net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.service.protocol.event.VideoEvent+VIDEO_REMOVED net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo,3412,100,2,"/** 
 * When a video is added or removed for the <code>callPeer</code>, makes sure to display or hide it respectively.
 * @param event a <code>VideoEvent</code> describing the added visual<code>Component</code> representing video and the provider it was added into or <code>null</code> if such information is not available
 */
","/**
     * When a video is added or removed for the <code>callPeer</code>,
     * makes sure to display or hide it respectively.
     *
     * @param event a <code>VideoEvent</code> describing the added visual
     *            <code>Component</code> representing video and the provider it
     *            was added into or <code>null</code> if such information is not
     *            available
     */
    private void handleVideoEvent(final VideoEvent event)
    {
        synchronized (videoContainers)
        {
            if ((event != null) && !event.isConsumed()
                && (event.getOrigin() == VideoEvent.LOCAL))
            {
                Component localVideo = event.getVisualComponent();

                switch (event.getType())
                {
                case VideoEvent.VIDEO_ADDED:
                    this.localVideo = localVideo;

                    /*
                     * Let the creator of the local visual Component know it
                     * shouldn't be disposed of because we're going to use it.
                     */
                    event.consume();
                    break;

                case VideoEvent.VIDEO_REMOVED:
                    if (this.localVideo == localVideo)
                    {
                        this.localVideo = null;
                    }
                    break;
                }
            }
        }

        if (!SwingUtilities.isEventDispatchThread())
        {
            SwingUtilities.invokeLater(new Runnable()
            {
                public void run()
                {
                    handleVideoEvent(event);
                }
            });
            return;
        }

        synchronized (videoContainers)
        {
            int videoContainerCount;

            if ((videoTelephony != null)
                && ((videoContainerCount = videoContainers.size()) > 0))
            {
                Container videoContainer =
                    videoContainers.get(videoContainerCount - 1);
                int zOrder = 0;

                videoContainer.removeAll();

                // LOCAL
                if (localVideo != null)
                {
                    videoContainer.add(localVideo, VideoLayout.LOCAL, zOrder++);

                    // If the local video is turned on, we ensure that the
                    // button is selected.
                    if (!callDialog.isVideoButtonSelected())
                        callDialog.setVideoButtonSelected(true);
                }

                // REMOTE
                Component[] videos =
                    videoTelephony.getVisualComponents(callPeer);

                Component video =
                    ((videos == null) || (videos.length < 1)) ? null
                        : videos[0];

                if (video != null)
                    videoContainer
                        .add(video, VideoLayout.CENTER_REMOTE, zOrder++);

                videoContainer.validate();

                /*
                 * Without explicit repainting, the remote visual Component will
                 * not stay small after entering fullscreen, the Component shown
                 * when there's no video will show be shown beneath the video
                 * Component though the former has already been removed...
                 */
                videoContainer.repaint();
            }
        }
    }",False
32,handleLocalVideoStreamingChange(VideoTelephonyListener),Method,VideoTelephonyListener.propertyChange(PropertyChangeEvent),,"net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+isLocalVideoStreaming(Call) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+isLocalVideoStreaming(Call) net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+createLocalVisualComponent(CallPeer,VideoListener) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+createLocalVisualComponent(CallPeer,VideoListener) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+disposeLocalVisualComponent(CallPeer,Component) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+disposeLocalVisualComponent(CallPeer,Component)",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoContainers net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoTelephony net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoTelephony net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoTelephony net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+logger net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoTelephony net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo,940,30,2,,"private void handleLocalVideoStreamingChange(
            VideoTelephonyListener listener)
    {
        synchronized (videoContainers)
        {
            if (videoTelephony == null)
                return;

            if (videoTelephony.isLocalVideoStreaming(callPeer.getCall()))
            {
                try
                {
                    videoTelephony.createLocalVisualComponent(
                            callPeer, listener);
                }
                catch (OperationFailedException ex)
                {
                    logger.error(
                            ""Failed to create local video/visual Component."",
                            ex);
                }
            }
            else if (localVideo != null)
            {
                videoTelephony.disposeLocalVisualComponent(
                        callPeer, localVideo);
                localVideo = null;
            }
        }
    }",False
33,"setState(String,Icon)",Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+callPeerRemoved(CallPeerEvent) net.java.sip.communicator.impl.gui.main.call.CallPanel+peerStateChanged(CallPeerChangeEvent),javax.swing.JLabel+setText(String) javax.swing.JLabel+setText(String) javax.swing.JLabel+setIcon(Icon) javax.swing.JLabel+setIcon(Icon),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel,362,12,1,"/** 
 * Sets the state of the contained call peer by specifying the state name and icon.
 * @param state the state of the contained call peer
 * @param icon the icon of the state
 */
","/**
     * Sets the state of the contained call peer by specifying the
     * state name and icon.
     *
     * @param state the state of the contained call peer
     * @param icon the icon of the state
     */
    public void setState(String state, Icon icon)
    {
        this.callStatusLabel.setText(state);
        this.callStatusLabel.setIcon(icon);
    }",True
34,setSecured(boolean),Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOn(CallPeerSecurityOnEvent) net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOff(CallPeerSecurityOffEvent),javax.swing.JLabel+setIcon(Icon) javax.swing.JLabel+setIcon(Icon) javax.swing.ImageIcon+ImageIcon(Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) javax.swing.JLabel+setIcon(Icon) javax.swing.JLabel+setIcon(Icon) javax.swing.ImageIcon+ImageIcon(Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityStatusLabel net.java.sip.communicator.impl.gui.utils.ImageLoader+SECURE_BUTTON_ON net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityStatusLabel net.java.sip.communicator.impl.gui.utils.ImageLoader+SECURE_BUTTON_OFF,499,15,1,"/** 
 * Sets the secured status icon to the status panel.
 * @param isSecured indicates if the call with this peer issecured
 */
","/**
     * Sets the secured status icon to the status panel.
     *
     * @param isSecured indicates if the call with this peer is
     * secured
     */
    public void setSecured(boolean isSecured)
    {
        if (isSecured)
            securityStatusLabel.setIcon(new ImageIcon(ImageLoader
                .getImage(ImageLoader.SECURE_BUTTON_ON)));
        else
            securityStatusLabel.setIcon(new ImageIcon(ImageLoader
                .getImage(ImageLoader.SECURE_BUTTON_OFF)));
    }",True
35,setMute(boolean),Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+propertyChange(PropertyChangeEvent),javax.swing.JLabel+setIcon(Icon) javax.swing.JLabel+setIcon(Icon) javax.swing.ImageIcon+ImageIcon(Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) javax.swing.JLabel+setIcon(Icon) javax.swing.JLabel+setIcon(Icon),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+muteStatusLabel net.java.sip.communicator.impl.gui.utils.ImageLoader+MUTE_STATUS_ICON net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+muteStatusLabel,394,14,1,"/** 
 * Sets the mute status icon to the status panel.
 * @param isMute indicates if the call with this peer ismuted
 */
","/**
     * Sets the mute status icon to the status panel.
     *
     * @param isMute indicates if the call with this peer is
     * muted
     */
    public void setMute(boolean isMute)
    {
        if(isMute)
            muteStatusLabel.setIcon(new ImageIcon(
                ImageLoader.getImage(ImageLoader.MUTE_STATUS_ICON)));
        else
            muteStatusLabel.setIcon(null);
    }",True
36,setAudioSecurityOn(boolean),Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOn(CallPeerSecurityOnEvent) net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOff(CallPeerSecurityOffEvent),,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+isAudioSecurityOn net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+isAudioSecurityOn,278,10,1,"/** 
 * Sets the audio security on or off.
 * @param isAudioSecurityOn indicates if the audio security is turned on oroff.
 */
","/**
     * Sets the audio security on or off.
     *
     * @param isAudioSecurityOn indicates if the audio security is turned on or
     * off.
     */
    public void setAudioSecurityOn(boolean isAudioSecurityOn)
    {
        this.isAudioSecurityOn = isAudioSecurityOn;
    }",True
37,setVideoSecurityOn(boolean),Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOn(CallPeerSecurityOnEvent) net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOff(CallPeerSecurityOffEvent),,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+isVideoSecurityOn net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+isVideoSecurityOn,278,10,1,"/** 
 * Sets the video security on or off.
 * @param isVideoSecurityOn indicates if the video security is turned on oroff.
 */
","/**
     * Sets the video security on or off.
     *
     * @param isVideoSecurityOn indicates if the video security is turned on or
     * off.
     */
    public void setVideoSecurityOn(boolean isVideoSecurityOn)
    {
        this.isVideoSecurityOn = isVideoSecurityOn;
    }",True
38,isAudioSecurityOn(),Method,,net.java.sip.communicator.impl.gui.main.call.SecurityStatusLabel+createToolTip(),,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+isAudioSecurityOn,264,10,1,"/** 
 * Indicates if the audio security is turned on or off.
 * @return <code>true</code> if the audio security is on, otherwise -<code>false</code>.
 */
","/**
     * Indicates if the audio security is turned on or off.
     *
     * @return <code>true</code> if the audio security is on, otherwise -
     * <code>false</code>.
     */
    public boolean isAudioSecurityOn()
    {
        return isAudioSecurityOn;
    }",True
39,isVideoSecurityOn(),Method,,net.java.sip.communicator.impl.gui.main.call.SecurityStatusLabel+createToolTip(),,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+isVideoSecurityOn,264,10,1,"/** 
 * Indicates if the video security is turned on or off.
 * @return <code>true</code> if the video security is on, otherwise -<code>false</code>.
 */
","/**
     * Indicates if the video security is turned on or off.
     *
     * @return <code>true</code> if the video security is on, otherwise -
     * <code>false</code>.
     */
    public boolean isVideoSecurityOn()
    {
        return isVideoSecurityOn;
    }",True
40,getEncryptionCipher(),Method,,net.java.sip.communicator.impl.gui.main.call.SecurityStatusLabel+createToolTip(),,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+encryptionCipher,245,9,1,"/** 
 * Returns the cipher used for the encryption of the current call.
 * @return the cipher used for the encryption of the current call.
 */
","/**
     * Returns the cipher used for the encryption of the current call.
     *
     * @return the cipher used for the encryption of the current call.
     */
    public String getEncryptionCipher()
    {
        return encryptionCipher;
    }",True
41,setEncryptionCipher(String),Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOn(CallPeerSecurityOnEvent),,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+encryptionCipher net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+encryptionCipher,303,10,1,"/** 
 * Sets the cipher used for the encryption of the current call.
 * @param encryptionCipher the cipher used for the encryption of thecurrent call.
 */
","/**
     * Sets the cipher used for the encryption of the current call.
     *
     * @param encryptionCipher the cipher used for the encryption of the
     * current call.
     */
    public void setEncryptionCipher(String encryptionCipher)
    {
        this.encryptionCipher = encryptionCipher;
    }",True
42,startCallTimer(),Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+peerStateChanged(CallPeerChangeEvent),javax.swing.Timer+start() javax.swing.Timer+start(),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer,135,7,1,"/** 
 * Starts the timer that counts call duration.
 */
","/**
     * Starts the timer that counts call duration.
     */
    public void startCallTimer()
    {
        this.timer.start();
    }",True
43,stopCallTimer(),Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+callPeerRemoved(CallPeerEvent),javax.swing.Timer+stop() javax.swing.Timer+stop(),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer,132,7,1,"/** 
 * Stops the timer that counts call duration.
 */
","/**
     * Stops the timer that counts call duration.
     */
    public void stopCallTimer()
    {
        this.timer.stop();
    }",True
44,CallTimerListener,MemberClass,,,"net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.CallTimerListener+actionPerformed(ActionEvent) net.java.sip.communicator.util.GuiUtils+substractDates(Date,Date) net.java.sip.communicator.util.GuiUtils+substractDates(Date,Date) java.util.Date+Date(long) java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() java.util.Date+Date(long) net.java.sip.communicator.service.protocol.CallPeer+getCallDurationStartTime() net.java.sip.communicator.service.protocol.CallPeer+getCallDurationStartTime() java.util.Date+setTime(long) java.util.Date+setTime(long) java.util.Date+getTime() java.util.Date+getTime() javax.swing.JLabel+setText(String) javax.swing.JLabel+setText(String) net.java.sip.communicator.util.GuiUtils+formatTime(Date) net.java.sip.communicator.util.GuiUtils+formatTime(Date)",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDuration net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timeLabel,547,18,2,"/** 
 * Each second refreshes the time label to show to the user the exact duration of the call.
 */
","/**
     * Each second refreshes the time label to show to the user the exact
     * duration of the call.
     */
    private class CallTimerListener
        implements ActionListener
    {
        public void actionPerformed(ActionEvent e)
        {
            Date time =
                GuiUtils.substractDates(new Date(System.currentTimeMillis()),
                    new Date(callPeer.getCallDurationStartTime()));

            callDuration.setTime(time.getTime());

            timeLabel.setText(GuiUtils.formatTime(time));
        }
    }",True
45,getCallStartTime(),Method,,,,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStartTime,471,13,1,"/** 
 * Returns the start time of the contained peer call. Note that the start time of the call is different from the conversation start time. For example if we receive a call, the call start time is when the call is received and the conversation start time would be when we accept the call.
 * @return the start time of the contained peer call
 */
","/**
     * Returns the start time of the contained peer call. Note that the
     * start time of the call is different from the conversation start time. For
     * example if we receive a call, the call start time is when the call is
     * received and the conversation start time would be when we accept the
     * call.
     *
     * @return the start time of the contained peer call
     */
    public Date getCallStartTime()
    {
        return callStartTime;
    }",True
46,getCallDuration(),Method,,,,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDuration,204,9,1,"/** 
 * Returns the duration of the contained peer call.
 * @return the duration of the contained peer call
 */
","/**
     * Returns the duration of the contained peer call.
     *
     * @return the duration of the contained peer call
     */
    public Date getCallDuration()
    {
        return callDuration;
    }",True
47,getCallType(),Method,,,,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDuration net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callType net.java.sip.communicator.impl.gui.main.call.GuiCallPeerRecord+INCOMING_CALL,350,13,1,"/** 
 * Returns this call type - GuiCallPeerRecord: INCOMING_CALL or OUTGOING_CALL
 * @return Returns this call type : INCOMING_CALL or OUTGOING_CALL
 */
","/**
     * Returns this call type - GuiCallPeerRecord: INCOMING_CALL or
     * OUTGOING_CALL
     *
     * @return Returns this call type : INCOMING_CALL or OUTGOING_CALL
     */
    public String getCallType()
    {
        if (callDuration != null)
            return callType;
        else
            return GuiCallPeerRecord.INCOMING_CALL;
    }",True
48,setCallType(String),Method,,"net.java.sip.communicator.impl.gui.main.call.CallPanel+addCallPeer(CallPeer,String)",,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callType net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callType,309,11,1,"/** 
 * Sets the type of the call. Call type could be <tt>GuiCallPeerRecord.INCOMING_CALL</tt> or <tt>GuiCallPeerRecord.INCOMING_CALL</tt>.
 * @param callType the type of call to set
 */
","/**
     * Sets the type of the call. Call type could be
     * <tt>GuiCallPeerRecord.INCOMING_CALL</tt> or
     * <tt>GuiCallPeerRecord.INCOMING_CALL</tt>.
     *
     * @param callType the type of call to set
     */
    public void setCallType(String callType)
    {
        this.callType = callType;
    }",True
49,getPeerName(),Method,enterFullScreen(),,,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+peerName,210,9,1,"/** 
 * Returns the name of the peer, contained in this panel.
 * @return the name of the peer, contained in this panel
 */
","/**
     * Returns the name of the peer, contained in this panel.
     *
     * @return the name of the peer, contained in this panel
     */
    public String getPeerName()
    {
        return peerName;
    }",False
50,createEnterFullScreenButton(),Method,createStatusBar(),,net.java.sip.communicator.util.swing.SIPCommButton+SIPCommButton(Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) javax.swing.JComponent+setToolTipText(String) javax.swing.JComponent+setToolTipText(String) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String) javax.swing.AbstractButton+addActionListener(ActionListener) javax.swing.AbstractButton+addActionListener(ActionListener) +() +actionPerformed(ActionEvent),net.java.sip.communicator.impl.gui.utils.ImageLoader+ENTER_FULL_SCREEN_BUTTON,549,17,2,,"private Component createEnterFullScreenButton()
    {
        SIPCommButton button =
            new SIPCommButton(ImageLoader
                .getImage(ImageLoader.ENTER_FULL_SCREEN_BUTTON));

        button.setToolTipText(GuiActivator.getResources().getI18NString(
            ""service.gui.ENTER_FULL_SCREEN_TOOL_TIP""));
        button.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent event)
            {
                enterFullScreen();
            }
        });
        return button;
    }",False
51,createExitFullScreenButton(),Method,createFullScreenButtonBar(),,"net.java.sip.communicator.util.swing.SIPCommButton+SIPCommButton(Image,Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) javax.swing.JComponent+setToolTipText(String) javax.swing.JComponent+setToolTipText(String) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String) javax.swing.AbstractButton+addActionListener(ActionListener) javax.swing.AbstractButton+addActionListener(ActionListener) +() +actionPerformed(ActionEvent)",net.java.sip.communicator.impl.gui.utils.ImageLoader+FULL_SCREEN_BUTTON_BG net.java.sip.communicator.impl.gui.utils.ImageLoader+EXIT_FULL_SCREEN_BUTTON,852,23,2,,"private Component createExitFullScreenButton()
    {
        JButton button =
            new SIPCommButton(
                ImageLoader.getImage(ImageLoader.FULL_SCREEN_BUTTON_BG),
                ImageLoader.getImage(ImageLoader.EXIT_FULL_SCREEN_BUTTON));

        button.setToolTipText(GuiActivator.getResources().getI18NString(
            ""service.gui.EXIT_FULL_SCREEN_TOOL_TIP""));
        button.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent event)
            {
                Object source = event.getSource();
                Frame fullScreenFrame =
                    (source instanceof Component) ? TransferCallButton
                        .getFrame((Component) source) : null;

                exitFullScreen(fullScreenFrame);
            }
        });
        return button;
    }",False
52,createFullScreenButtonBar(),Method,enterFullScreen(),,"net.java.sip.communicator.service.protocol.CallPeer+getState() net.java.sip.communicator.service.protocol.CallPeer+getState() net.java.sip.communicator.impl.gui.main.call.HoldButton+HoldButton(Call,boolean,boolean) net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeerState+isOnHold(CallPeerState) net.java.sip.communicator.service.protocol.CallPeerState+isOnHold(CallPeerState) net.java.sip.communicator.impl.gui.main.call.MuteButton+MuteButton(Call,boolean,boolean) net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+isMute() net.java.sip.communicator.service.protocol.CallPeer+isMute() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createExitFullScreenButton() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createExitFullScreenButton() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createButtonBar(boolean,Component[]) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createButtonBar(boolean,Component[])",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer,641,19,2,,"private Component createFullScreenButtonBar()
    {
        CallPeerState peerState
            = callPeer.getState();

        Component[] buttons =
            new Component[]
            {   new HoldButton( callPeer.getCall(),
                                true,
                                CallPeerState.isOnHold(peerState)),
                new MuteButton( callPeer.getCall(),
                                true,
                                callPeer.isMute()),
                createExitFullScreenButton() };

        Component fullScreenButtonBar = createButtonBar(true, buttons);

        return fullScreenButtonBar;
    }",False
53,enterFullScreen(),Method,,,"javax.swing.JFrame+JFrame() javax.swing.JFrame+setDefaultCloseOperation(int) javax.swing.JFrame+setDefaultCloseOperation(int) java.awt.Frame+setTitle(String) java.awt.Frame+setTitle(String) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+getPeerName() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+getPeerName() java.awt.Frame+setUndecorated(boolean) java.awt.Frame+setUndecorated(boolean) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createCenter() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createCenter() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createFullScreenButtonBar() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createFullScreenButtonBar() javax.swing.JFrame+getContentPane() javax.swing.JFrame+getContentPane() java.awt.Container+setLayout(LayoutManager) java.awt.Container+setLayout(LayoutManager) net.java.sip.communicator.impl.gui.main.call.FullScreenLayout+FullScreenLayout(boolean) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Component+setBackground(Color) java.awt.Component+setBackground(Color) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+setBackground(Component,Color) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+setBackground(Component,Color) +componentAdded(ContainerEvent)",javax.swing.WindowConstants+DISPOSE_ON_CLOSE net.java.sip.communicator.impl.gui.main.call.FullScreenLayout+SOUTH net.java.sip.communicator.impl.gui.main.call.FullScreenLayout+CENTER java.awt.Color+black,2884,85,2,,"private void enterFullScreen()
    {
        // Create the main Components of the UI.
        final JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        frame.setTitle(getPeerName());
        frame.setUndecorated(true);

        Component center = createCenter();
        final Component buttonBar = createFullScreenButtonBar();

        // Lay out the main Components of the UI.
        final Container contentPane = frame.getContentPane();
        contentPane.setLayout(new FullScreenLayout(false));
        if (buttonBar != null)
            contentPane.add(buttonBar, FullScreenLayout.SOUTH);
        if (center != null)
            contentPane.add(center, FullScreenLayout.CENTER);

        // Full-screen windows usually have black backgrounds.
        Color background = Color.black;
        contentPane.setBackground(background);
        setBackground(center, background);

        class FullScreenListener
            implements ContainerListener, KeyListener, WindowStateListener
        {
            public void componentAdded(ContainerEvent event)
            {
                Component child = event.getChild();

                child.addKeyListener(this);
            }

            public void componentRemoved(ContainerEvent event)
            {
                Component child = event.getChild();

                child.removeKeyListener(this);
            }

            public void keyPressed(KeyEvent event)
            {
                if (!event.isConsumed()
                    && (event.getKeyCode() == KeyEvent.VK_ESCAPE))
                {
                    event.consume();
                    exitFullScreen(frame);
                }
            }

            public void keyReleased(KeyEvent event)
            {
            }

            public void keyTyped(KeyEvent event)
            {
            }

            public void windowStateChanged(WindowEvent event)
            {
                switch (event.getID())
                {
                case WindowEvent.WINDOW_CLOSED:
                case WindowEvent.WINDOW_DEACTIVATED:
                case WindowEvent.WINDOW_ICONIFIED:
                case WindowEvent.WINDOW_LOST_FOCUS:
                    exitFullScreen(frame);
                    break;
                }
            }
        }
        FullScreenListener listener = new FullScreenListener();

        // Exit on Escape.
        addKeyListener(frame, listener);
        // Activate the above features for the local and remote videos.
        if (center instanceof Container)
            ((Container) center).addContainerListener(listener);
        // Exit when the ""full screen"" looses its focus.
        frame.addWindowStateListener(listener);

        getGraphicsConfiguration().getDevice().setFullScreenWindow(frame);
        this.fullScreenWindow = frame;
    }",False
54,componentAdded(ContainerEvent),Method,,,java.awt.event.ContainerEvent+getChild() java.awt.event.ContainerEvent+getChild() java.awt.Component+addKeyListener(KeyListener) java.awt.Component+addKeyListener(KeyListener),,173,6,1,,"public void componentAdded(ContainerEvent event)
            {
                Component child = event.getChild();

                child.addKeyListener(this);
            }",False
55,componentRemoved(ContainerEvent),Method,,,java.awt.event.ContainerEvent+getChild() java.awt.event.ContainerEvent+getChild() java.awt.Component+removeKeyListener(KeyListener) java.awt.Component+removeKeyListener(KeyListener),,178,6,1,,"public void componentRemoved(ContainerEvent event)
            {
                Component child = event.getChild();

                child.removeKeyListener(this);
            }",False
56,keyPressed(KeyEvent),Method,,,java.awt.event.InputEvent+isConsumed() java.awt.event.InputEvent+isConsumed() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.InputEvent+consume() java.awt.event.InputEvent+consume() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+exitFullScreen(Window) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+exitFullScreen(Window),java.awt.event.KeyEvent+VK_ESCAPE,289,9,1,,"public void keyPressed(KeyEvent event)
            {
                if (!event.isConsumed()
                    && (event.getKeyCode() == KeyEvent.VK_ESCAPE))
                {
                    event.consume();
                    exitFullScreen(frame);
                }
            }",False
57,keyReleased(KeyEvent),Method,,,,,67,3,1,,"public void keyReleased(KeyEvent event)
            {
            }",False
58,keyTyped(KeyEvent),Method,,,,,64,3,1,,"public void keyTyped(KeyEvent event)
            {
            }",False
59,windowStateChanged(WindowEvent),Method,,,java.awt.AWTEvent+getID() java.awt.AWTEvent+getID() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+exitFullScreen(Window) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+exitFullScreen(Window),java.awt.event.WindowEvent+WINDOW_CLOSED java.awt.event.WindowEvent+WINDOW_DEACTIVATED java.awt.event.WindowEvent+WINDOW_ICONIFIED java.awt.event.WindowEvent+WINDOW_LOST_FOCUS,426,12,1,,"public void windowStateChanged(WindowEvent event)
            {
                switch (event.getID())
                {
                case WindowEvent.WINDOW_CLOSED:
                case WindowEvent.WINDOW_DEACTIVATED:
                case WindowEvent.WINDOW_ICONIFIED:
                case WindowEvent.WINDOW_LOST_FOCUS:
                    exitFullScreen(frame);
                    break;
                }
            }",False
60,exitFullScreen(Window),Method,keyPressed(KeyEvent) windowStateChanged(WindowEvent),,java.awt.Component+getGraphicsConfiguration() java.awt.Component+getGraphicsConfiguration() java.awt.GraphicsDevice+setFullScreenWindow(Window) java.awt.GraphicsConfiguration+getDevice() java.awt.GraphicsConfiguration+getDevice() java.awt.GraphicsDevice+setFullScreenWindow(Window) java.awt.Component+isVisible() java.awt.Component+isVisible() java.awt.Window+setVisible(boolean) java.awt.Window+setVisible(boolean) java.awt.Window+dispose() java.awt.Window+dispose(),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+fullScreenWindow net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+fullScreenWindow net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+fullScreenWindow net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+fullScreenWindow,544,16,2,,"private void exitFullScreen(Window fullScreenWindow)
    {
        GraphicsConfiguration graphicsConfig = getGraphicsConfiguration();
        if (graphicsConfig != null)
            graphicsConfig.getDevice().setFullScreenWindow(null);

        if (fullScreenWindow != null)
        {
            if (fullScreenWindow.isVisible())
                fullScreenWindow.setVisible(false);
            fullScreenWindow.dispose();

            if (this.fullScreenWindow == fullScreenWindow)
                this.fullScreenWindow = null;
        }
    }",False
61,"setBackground(Component,Color)",Method,"enterFullScreen() setBackground(Component,Color)",,"java.awt.Component+setBackground(Color) java.awt.Component+setBackground(Color) java.awt.Container+getComponents() java.awt.Container+getComponents() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+setBackground(Component,Color) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+setBackground(Component,Color)",,353,10,2,,"private void setBackground(Component component, Color background)
    {
        component.setBackground(background);
        if (component instanceof Container)
        {
            Component[] components = ((Container) component).getComponents();
            for (Component c : components)
                setBackground(c, background);
        }
    }",False
62,"addKeyListener(Component,KeyListener)",Method,"addKeyListener(Component,KeyListener)",,"java.awt.Component+addKeyListener(KeyListener) java.awt.Component+addKeyListener(KeyListener) java.awt.Container+getComponents() java.awt.Container+getComponents() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+addKeyListener(Component,KeyListener) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+addKeyListener(Component,KeyListener)",,335,10,2,,"private void addKeyListener(Component component, KeyListener l)
    {
        component.addKeyListener(l);
        if (component instanceof Container)
        {
            Component[] components = ((Container) component).getComponents();
            for (Component c : components)
                addKeyListener(c, l);
        }
    }",False
63,PeerStatusPanel,MemberClass,,,"net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.PeerStatusPanel+PeerStatusPanel(LayoutManager) javax.swing.JComponent+setBorder(Border) javax.swing.JComponent+setBorder(Border) javax.swing.BorderFactory+createEmptyBorder(int,int,int,int) javax.swing.BorderFactory+createEmptyBorder(int,int,int,int) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.PeerStatusPanel+paintComponent(Graphics) javax.swing.JComponent+paintComponent(Graphics) java.awt.Graphics+create() java.awt.Graphics+create() net.java.sip.communicator.util.swing.AntialiasingManager+activateAntialiasing(Graphics) net.java.sip.communicator.util.swing.AntialiasingManager+activateAntialiasing(Graphics) java.awt.Graphics+setColor(Color) java.awt.Graphics+setColor(Color) java.awt.Graphics+fillRoundRect(int,int,int,int,int,int) java.awt.Graphics+fillRoundRect(int,int,int,int,int,int) javax.swing.JComponent+getWidth() javax.swing.JComponent+getWidth() javax.swing.JComponent+getHeight() javax.swing.JComponent+getHeight() java.awt.Graphics+dispose() java.awt.Graphics+dispose()",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.PeerStatusPanel+serialVersionUID java.awt.Color+DARK_GRAY,976,36,10,,"private static class PeerStatusPanel
        extends TransparentPanel
    {

        /*
         * Silence the serial warning. Though there isn't a plan to serialize
         * the instances of the class, there're no fields so the default
         * serialization routine will work.
         */
        private static final long serialVersionUID = 0L;

        public PeerStatusPanel(LayoutManager layout)
        {
            super(layout);
            this.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));
        }

        public void paintComponent(Graphics g)
        {
            super.paintComponent(g);

            g = g.create();

            try
            {
                AntialiasingManager.activateAntialiasing(g);

                g.setColor(Color.DARK_GRAY);
                g.fillRoundRect(0, 0, this.getWidth(), this.getHeight(), 20, 20);
            }
            finally
            {
                g.dispose();
            }
        }
    }",False
