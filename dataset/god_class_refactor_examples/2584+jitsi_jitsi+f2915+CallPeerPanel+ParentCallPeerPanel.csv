index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,logger,logger ,Field,,,,,83,2,26,,"private static final Logger logger =
        Logger.getLogger(CallPeerPanel.class);",False,False,,False,
2,callStatusLabel,call status label ,Field,"setState(String,Icon) setState(String,Icon)",,,,52,1,18,,private final JLabel callStatusLabel = new JLabel();,True,True,,False,
3,securityStatusLabel,security status label ,Field,"CallPeerPanel(CallDialog,CallPeer)",,,,54,1,18,,private final SecurityStatusLabel securityStatusLabel;,True,True,,False,
4,muteStatusLabel,mute status label ,Field,,,,,52,1,18,,private final JLabel muteStatusLabel = new JLabel();,True,True,,False,
5,timeLabel,time label ,Field,,,,,71,1,18,,"private final JLabel timeLabel = new JLabel(""00:00:00"", JLabel.CENTER);",False,False,,False,
6,callStartTime,call start time this date is meant to be used in the gui call peer record which is added to the call list after a call ,Field,,,,,203,5,18,"/** 
 * This date is meant to be used in the GuiCallPeerRecord, which is added to the CallList after a call.
 */
","/**
     * This date is meant to be used in the GuiCallPeerRecord, which is
     * added to the CallList after a call.
     */
    private final Date callStartTime = new Date(System.currentTimeMillis());",False,True,"/** 
 * This date is meant to be used in the GuiCallPeerRecord, which is added to the CallList after a call.
 */
",False,"/** 
 * This date is meant to be used in the GuiCallPeerRecord, which is added to the CallList after a call.
 */
"
7,callDuration,call duration ,Field,"CallPeerPanel(CallDialog,CallPeer)",,,,26,1,2,,private Date callDuration;,False,True,,False,
8,timer,timer ,Field,"CallPeerPanel(CallDialog,CallPeer) CallPeerPanel(CallDialog,CallPeer) startCallTimer() stopCallTimer()",,,,20,1,2,,private Timer timer;,False,True,,False,
9,callType,call type ,Field,setCallType(String),,,,24,1,2,,private String callType;,False,True,,False,
10,peerName,peer name ,Field,"CallPeerPanel(CallDialog,CallPeer)",,,,30,1,18,,private final String peerName;,False,False,,False,
11,callPeer,call peer ,Field,"CallPeerPanel(CallDialog,CallPeer)",,,,32,1,18,,private final CallPeer callPeer;,False,False,,False,
12,videoContainers,video containers ,Field,,,,,93,2,18,,"private final java.util.List<Container> videoContainers =
        new ArrayList<Container>();",False,False,,False,
13,videoTelephony,video telephony ,Field,,,,,50,1,2,,private OperationSetVideoTelephony videoTelephony;,False,False,,False,
14,localVideo,local video ,Field,handleVideoEvent(VideoEvent) handleVideoEvent(VideoEvent) handleVideoEvent(VideoEvent),,,,29,1,2,,private Component localVideo;,False,False,,False,
15,isAudioSecurityOn,is audio security on ,Field,setAudioSecurityOn(boolean),,,,42,1,2,,private boolean isAudioSecurityOn = false;,True,True,,False,
16,isVideoSecurityOn,is video security on ,Field,setVideoSecurityOn(boolean),,,,42,1,2,,private boolean isVideoSecurityOn = false;,True,True,,False,
17,encryptionCipher,encryption cipher ,Field,setEncryptionCipher(String),,,,32,1,2,,private String encryptionCipher;,True,True,,False,
18,fullScreenWindow,full screen window the current window being displayed in full screen because the awt api with respect to the full screen support doesn t seem sophisticated enough the field is used sparingly i e when there are no other means such as a local variable of acquiring the instance ,Field,exitFullScreen(Window) exitFullScreen(Window),,,,352,7,2,"/** 
 * The current <code>Window</code> being displayed in full-screen. Because the AWT API with respect to the full-screen support doesn't seem sophisticated enough, the field is used sparingly i.e. when there are no other means (such as a local variable) of acquiring the instance.
 */
","/**
     * The current <code>Window</code> being displayed in full-screen. Because
     * the AWT API with respect to the full-screen support doesn't seem
     * sophisticated enough, the field is used sparingly i.e. when there are no
     * other means (such as a local variable) of acquiring the instance.
     */
    private Window fullScreenWindow;",False,False,"/** 
 * The current <code>Window</code> being displayed in full-screen. Because the AWT API with respect to the full-screen support doesn't seem sophisticated enough, the field is used sparingly i.e. when there are no other means (such as a local variable) of acquiring the instance.
 */
",False,"/** 
 * The current <code>Window</code> being displayed in full-screen. Because the AWT API with respect to the full-screen support doesn't seem sophisticated enough, the field is used sparingly i.e. when there are no other means (such as a local variable) of acquiring the instance.
 */
"
19,securityPanel,security panel ,Field,,,,,43,1,2,,private SecurityPanel securityPanel = null;,True,True,,False,
20,callDialog,call dialog ,Field,"CallPeerPanel(CallDialog,CallPeer)",,,,36,1,18,,private final CallDialog callDialog;,False,True,,False,
21,"CallPeerPanel(CallDialog,CallPeer)",call peer panel call dialog call peer creates a call peer panel for the given call peer param call peer a call peer ,Method,,,"net.java.sip.communicator.service.protocol.CallPeer+getDisplayName() net.java.sip.communicator.service.protocol.CallPeer+getDisplayName() net.java.sip.communicator.impl.gui.main.call.SecurityStatusLabel+SecurityStatusLabel(CallPeerPanel,Icon,int) javax.swing.ImageIcon+ImageIcon(Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+set(int,int,int,int,int,int) java.util.Calendar+getTime() java.util.Calendar+getTime() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createNameBar() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createNameBar() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createCenter() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createCenter() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createStatusBar() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createStatusBar() java.awt.Container+setLayout(LayoutManager) java.awt.Container+setLayout(LayoutManager) java.awt.GridBagLayout+GridBagLayout() java.awt.GridBagConstraints+GridBagConstraints() java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Component+setPreferredSize(Dimension) java.awt.Component+setPreferredSize(Dimension) java.awt.Dimension+Dimension(int,int) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Insets+Insets(int,int,int,int) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) javax.swing.Timer+Timer(int,ActionListener) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.CallTimerListener+CallTimerListener() javax.swing.Timer+setRepeats(boolean) javax.swing.Timer+setRepeats(boolean) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+addVideoListener() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+addVideoListener()",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDialog net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDialog net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+peerName net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+peerName net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityStatusLabel net.java.sip.communicator.impl.gui.utils.ImageLoader+SECURE_BUTTON_OFF javax.swing.SwingConstants+CENTER net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDuration net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDuration java.awt.GridBagConstraints+fill java.awt.GridBagConstraints+NONE java.awt.GridBagConstraints+gridx java.awt.GridBagConstraints+gridy java.awt.GridBagConstraints+weightx java.awt.GridBagConstraints+fill java.awt.GridBagConstraints+BOTH java.awt.GridBagConstraints+gridx java.awt.GridBagConstraints+gridy java.awt.GridBagConstraints+weightx java.awt.GridBagConstraints+weighty java.awt.GridBagConstraints+fill java.awt.GridBagConstraints+NONE java.awt.GridBagConstraints+gridx java.awt.GridBagConstraints+gridy java.awt.GridBagConstraints+weightx java.awt.GridBagConstraints+weighty java.awt.GridBagConstraints+insets net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer,2524,77,1,"/** 
 * Creates a <tt>CallPeerPanel</tt> for the given call peer.
 * @param callPeer a call peer
 */
","/**
     * Creates a <tt>CallPeerPanel</tt> for the given call peer.
     *
     * @param callPeer a call peer
     */
    public CallPeerPanel(CallDialog callDialog,
                                CallPeer callPeer)
    {
        this.callDialog = callDialog;
        this.callPeer = callPeer;
        this.peerName = callPeer.getDisplayName();

        this.securityStatusLabel = new SecurityStatusLabel(
            this,
            new ImageIcon(ImageLoader.getImage(ImageLoader.SECURE_BUTTON_OFF)),
            JLabel.CENTER);

        // Initialize the date to 0
        // Need to use Calendar because new Date(0) returns a date where the
        // hour is initialized to 1.
        Calendar c = Calendar.getInstance();
        c.set(0, 0, 0, 0, 0, 0);
        this.callDuration = c.getTime();

        /* Create the main Components of the UI. */
        Component nameBar = createNameBar();
        Component center = createCenter();
        Component statusBar = createStatusBar();

        /* Lay out the main Components of the UI. */
        setLayout(new GridBagLayout());

        GridBagConstraints constraints = new GridBagConstraints();
        if (nameBar != null)
        {
            constraints.fill = GridBagConstraints.NONE;
            constraints.gridx = 0;
            constraints.gridy = 0;
            constraints.weightx = 0;

            add(nameBar, constraints);
        }
        if (center != null)
        {
            /*
             * Don't let the center dictate the preferred size because it may
             * display large videos. Otherwise, the large video will make this
             * panel expand and then the panel's container will show scroll
             * bars.
             */
            center.setPreferredSize(new Dimension(1, 1));

            constraints.fill = GridBagConstraints.BOTH;
            constraints.gridx = 0;
            constraints.gridy = 1;
            constraints.weightx = 1;
            constraints.weighty = 1;

            add(center, constraints);
        }
        if (statusBar != null)
        {
            constraints.fill = GridBagConstraints.NONE;
            constraints.gridx = 0;
            constraints.gridy = 3;
            constraints.weightx = 0;
            constraints.weighty = 0;
            constraints.insets = new Insets(5, 0, 0, 0);

            add(statusBar, constraints);
        }

        this.timer = new Timer(1000, new CallTimerListener());
        this.timer.setRepeats(true);

        addVideoListener();
    }",False,False,"The function of this method is to create a CallPeerPanel for a given call peer. It initializes various components of the UI, sets layout constraints, and adds event listeners.",True,"The code defines a constructor for a CallPeerPanel, which is a UI component used for displaying information about a call peer. It initializes various components and sets up the layout of the panel. It also creates a timer for updating the call duration and adds a video listener."
22,"createButtonBar(boolean,Component[])",create button bar heavyweight buttons ,Method,createStatusBar() createFullScreenButtonBar(),,"java.awt.Container+Container() net.java.sip.communicator.util.swing.TransparentPanel+TransparentPanel() java.awt.Container+setLayout(LayoutManager) java.awt.Container+setLayout(LayoutManager) java.awt.FlowLayout+FlowLayout(int,int,int) java.awt.Container+add(Component) java.awt.Container+add(Component)",java.awt.FlowLayout+CENTER,457,15,2,,"private Component createButtonBar(  boolean heavyweight,
                                        Component[] buttons)
    {
        Container buttonBar
            = heavyweight ? new Container() : new TransparentPanel();

        buttonBar.setLayout(new FlowLayout(FlowLayout.CENTER, 3, 3));

        for (Component button : buttons)
        {
            if (button != null)
                buttonBar.add(button);
        }
        return buttonBar;
    }",False,False,"This method creates a button bar component with a specified layout and adds the given buttons to it. The button bar can be either heavyweight or transparent, depending on the value of the ""heavyweight"" parameter.",True,"This code defines a private method called ""createButtonBar"" that takes in a boolean parameter ""heavyweight"" and an array of Component objects called ""buttons"". It creates a container object called ""buttonBar"" and sets its layout to a centered flow layout with spacing of 3. It then iterates over the ""buttons"" array, adds non-null buttons to the ""buttonBar"", and finally returns the ""buttonBar"" object."
23,createCenter(),create center creates the component hierarchy of the central area of this call peer panel which displays the photo of the call peer or the video if any return the root of the component hierarchy of the centralarea of this call peer panel which displays the photo of the call peer or the video if any ,Method,"CallPeerPanel(CallDialog,CallPeer) enterFullScreen()",,"javax.swing.JLabel+JLabel(Icon) javax.swing.ImageIcon+ImageIcon(Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) javax.swing.JComponent+setPreferredSize(Dimension) javax.swing.JComponent+setPreferredSize(Dimension) java.awt.Dimension+Dimension(int,int) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createVideoContainer(Component) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createVideoContainer(Component) java.awt.Component+addHierarchyListener(HierarchyListener) java.awt.Component+addHierarchyListener(HierarchyListener) +() +hierarchyChanged(HierarchyEvent)",net.java.sip.communicator.impl.gui.utils.ImageLoader+DEFAULT_USER_PHOTO,1771,45,2,"/** 
 * Creates the <code>Component</code> hierarchy of the central area of this <code>CallPeerPanel</code> which displays the photo of the <code>CallPeer</code> or the video if any.
 * @return the root of the <code>Component</code> hierarchy of the centralarea of this <code>CallPeerPanel</code> which displays the photo of the <code>CallPeer</code> or the video if any
 */
","/**
     * Creates the <code>Component</code> hierarchy of the central area of this
     * <code>CallPeerPanel</code> which displays the photo of the
     * <code>CallPeer</code> or the video if any.
     *
     * @return the root of the <code>Component</code> hierarchy of the central
     *         area of this <code>CallPeerPanel</code> which displays the
     *         photo of the <code>CallPeer</code> or the video if any
     */
    private Component createCenter()
    {
        final JLabel photoLabel =
            new JLabel(new ImageIcon(ImageLoader
                .getImage(ImageLoader.DEFAULT_USER_PHOTO)));

        photoLabel.setPreferredSize(new Dimension(90, 90));

        final Container videoContainer = createVideoContainer(photoLabel);
        videoContainer.addHierarchyListener(new HierarchyListener()
        {
            public void hierarchyChanged(HierarchyEvent event)
            {
                int changeFlags = HierarchyEvent.DISPLAYABILITY_CHANGED;

                if ((event.getChangeFlags() & changeFlags) == changeFlags)
                {
                    synchronized (videoContainers)
                    {
                        boolean changed = false;

                        if (videoContainer.isDisplayable())
                        {
                            if (!videoContainers.contains(videoContainer))
                                changed = videoContainers.add(videoContainer);
                        }
                        else
                            changed = videoContainers.remove(videoContainer);
                        if (changed)
                            handleVideoEvent(null);
                    }
                }
            }
        });
        return videoContainer;
    }",False,False,"The function of this method is to create and return the root component of the central area of a CallPeerPanel, which displays the photo or video of a CallPeer.",True,"This code creates the central area of a CallPeerPanel, which displays the photo or video of a CallPeer. It sets up a JLabel with a default user photo, sets its preferred size, and adds a hierarchy listener to handle changes in displayability of the video container."
24,createVideoContainer(Component),create video container no video component creates a new awt container which can display a single component at a time supposedly one which represents video and in the absence of such a component displays a predefined default component in accord with the previous supposition one which is the default when there is no video the returned container will track the components s added to and removed from it in order to make sure that no video container is displayed as described param no video component the predefined default component tobe displayed in the returned container when there is no other component in it return a new container which can display a single component at a time and in the absence of such a component displays no video component ,Method,createCenter(),,net.java.sip.communicator.util.swing.VideoContainer+VideoContainer(Component),,1187,21,2,"/** 
 * Creates a new AWT <code>Container</code> which can display a single <code>Component</code> at a time (supposedly, one which represents video) and, in the absence of such a <code>Component</code>, displays a predefined default <code>Component</code> (in accord with the previous supposition, one which is the default when there is no video). The returned <code>Container</code> will track the <code>Components</code>s added to and removed from it in order to make sure that <code>noVideoContainer</code> is displayed as described.
 * @param noVideoComponent the predefined default <code>Component</code> tobe displayed in the returned <code>Container</code> when there is no other <code>Component</code> in it
 * @return a new <code>Container</code> which can display a single<code>Component</code> at a time and, in the absence of such a <code>Component</code>, displays <code>noVideoComponent</code>
 */
","/**
     * Creates a new AWT <code>Container</code> which can display a single
     * <code>Component</code> at a time (supposedly, one which represents video)
     * and, in the absence of such a <code>Component</code>, displays a
     * predefined default <code>Component</code> (in accord with the previous
     * supposition, one which is the default when there is no video). The
     * returned <code>Container</code> will track the <code>Components</code>s
     * added to and removed from it in order to make sure that
     * <code>noVideoContainer</code> is displayed as described.
     *
     * @param noVideoComponent the predefined default <code>Component</code> to
     *            be displayed in the returned <code>Container</code> when there
     *            is no other <code>Component</code> in it
     * @return a new <code>Container</code> which can display a single
     *         <code>Component</code> at a time and, in the absence of such a
     *         <code>Component</code>, displays <code>noVideoComponent</code>
     */
    private Container createVideoContainer(Component noVideoComponent)
    {
        return new VideoContainer(noVideoComponent);
    }",False,False,"The function of this method is to create a new AWT Container that can display a single Component at a time. If there is no Component to display, it will display a predefined default Component. The method returns the created Container.",False,"This code defines a private method called ""createVideoContainer"" that takes a predefined default component as a parameter. It returns a new container that can display a single component at a time, and if there is no component, it will display the predefined default component."
25,createNameBar(),create name bar ,Method,"CallPeerPanel(CallDialog,CallPeer)",,"javax.swing.JLabel+JLabel(String,int) javax.swing.JLabel+setText(String) javax.swing.JLabel+setText(String) javax.swing.JComponent+setAlignmentX(float) javax.swing.JComponent+setAlignmentX(float)",javax.swing.SwingConstants+CENTER net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+peerName javax.swing.SwingConstants+CENTER,236,9,2,,"private Component createNameBar()
    {
        // nameLabel
        JLabel nameLabel = new JLabel("""", JLabel.CENTER);
        nameLabel.setText(peerName);
        nameLabel.setAlignmentX(JLabel.CENTER);

        return nameLabel;
    }",False,True,,True,The code defines a private method called `createNameBar()` that creates and returns a `JLabel` component. The `JLabel` displays the value of the `peerName` variable and is centered horizontally.
26,createStatusBar(),create status bar creates the component hierarchy of the area of status related information such as call peer display name call duration security status return the root of the component hierarchy of the area ofstatus related information such as call peer display name call duration security status ,Method,"CallPeerPanel(CallDialog,CallPeer)",,"javax.swing.JComponent+setForeground(Color) javax.swing.JComponent+setForeground(Color) javax.swing.JLabel+setText(String) javax.swing.JLabel+setText(String) net.java.sip.communicator.service.protocol.CallPeerState+getStateString() net.java.sip.communicator.service.protocol.CallPeer+getState() net.java.sip.communicator.service.protocol.CallPeer+getState() net.java.sip.communicator.service.protocol.CallPeerState+getStateString() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.PeerStatusPanel+PeerStatusPanel(LayoutManager) java.awt.FlowLayout+FlowLayout(int,int,int) net.java.sip.communicator.util.swing.TransparentPanel+TransparentPanel(LayoutManager) java.awt.FlowLayout+FlowLayout(int,int,int) javax.swing.JComponent+setForeground(Color) javax.swing.JComponent+setForeground(Color) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) java.awt.Container+add(Component) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createTransferCallButton() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createTransferCallButton() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createEnterFullScreenButton() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createEnterFullScreenButton() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createButtonBar(boolean,Component[]) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createButtonBar(boolean,Component[]) java.awt.Container+add(Component) java.awt.Container+add(Component)",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel java.awt.Color+WHITE net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer java.awt.FlowLayout+CENTER java.awt.FlowLayout+CENTER net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timeLabel java.awt.Color+WHITE net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+muteStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timeLabel,1447,44,2,"/** 
 * Creates the <code>Component</code> hierarchy of the area of status-related information such as <code>CallPeer</code> display name, call duration, security status.
 * @return the root of the <code>Component</code> hierarchy of the area ofstatus-related information such as <code>CallPeer</code> display name, call duration, security status
 */
","/**
     * Creates the <code>Component</code> hierarchy of the area of
     * status-related information such as <code>CallPeer</code> display
     * name, call duration, security status.
     *
     * @return the root of the <code>Component</code> hierarchy of the area of
     *         status-related information such as <code>CallPeer</code>
     *         display name, call duration, security status
     */
    private Component createStatusBar()
    {
        // stateLabel
        callStatusLabel.setForeground(Color.WHITE);
        callStatusLabel.setText(callPeer.getState().getStateString());

        PeerStatusPanel statusPanel = new PeerStatusPanel(
                new FlowLayout(FlowLayout.CENTER, 10, 0));

        TransparentPanel statusIconsPanel
            = new TransparentPanel(
                new FlowLayout(FlowLayout.CENTER, 5, 0));

        timeLabel.setForeground(Color.WHITE);

        statusIconsPanel.add(securityStatusLabel);
        statusIconsPanel.add(muteStatusLabel);
        statusIconsPanel.add(callStatusLabel);

        statusPanel.add(timeLabel);
        statusPanel.add(statusIconsPanel);

        Component[] buttons =
            new Component[]
            {
                createTransferCallButton(),
                createEnterFullScreenButton()
            };

        Component buttonBar = createButtonBar(false, buttons);

        statusPanel.add(buttonBar);

        return statusPanel;
    }",False,False,"This method creates a component hierarchy for displaying status-related information such as call peer display name, call duration, and security status. It also includes buttons for transferring calls and entering full screen mode. The root of the hierarchy is returned.",True,"The method ""createStatusBar"" creates and returns a component hierarchy for displaying status-related information such as call peer display name, call duration, and security status. It also includes buttons for transferring the call and entering full screen mode."
27,createTransferCallButton(),create transfer call button creates a new component representing a ui means to transfer the call of the associated call peer or null if call transfer is unsupported return a new component representing the ui means totransfer the call of call peer or null if call transfer is unsupported ,Method,createStatusBar(),,net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.Call+getProtocolProvider() net.java.sip.communicator.service.protocol.Call+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.impl.gui.main.call.TransferCallButton+TransferCallButton(CallPeer),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer,898,24,2,"/** 
 * Creates a new <code>Component</code> representing a UI means to transfer the <code>Call</code> of the associated <code>callPeer</code> or <tt>null</tt> if call-transfer is unsupported.
 * @return a new <code>Component</code> representing the UI means totransfer the <code>Call</code> of <code>callPeer</code> or <tt>null</tt> if call-transfer is unsupported
 */
","/**
     * Creates a new <code>Component</code> representing a UI means to transfer
     * the <code>Call</code> of the associated <code>callPeer</code> or
     * <tt>null</tt> if call-transfer is unsupported.
     *
     * @return a new <code>Component</code> representing the UI means to
     *         transfer the <code>Call</code> of <code>callPeer</code> or
     *         <tt>null</tt> if call-transfer is unsupported
     */
    private Component createTransferCallButton()
    {
        Call call = callPeer.getCall();

        if (call != null)
        {
            OperationSetAdvancedTelephony telephony =
                (OperationSetAdvancedTelephony) call.getProtocolProvider()
                    .getOperationSet(OperationSetAdvancedTelephony.class);

            if (telephony != null)
                return new TransferCallButton(callPeer);
        }
        return null;
    }",True,True,This method creates a new UI component that represents a means to transfer a call. It returns the created component or null if call transfer is not supported.,False,"This code defines a private method called ""createTransferCallButton()"" that returns a UI component for transferring a call. It checks if the call is supported and if so, it creates and returns a new TransferCallButton component. Otherwise, it returns null."
28,createSecurityPanel(CallPeerSecurityOnEvent),create security panel event ,Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOn(CallPeerSecurityOnEvent),"net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.Call+getProtocolProvider() net.java.sip.communicator.service.protocol.Call+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.impl.gui.main.call.SecurityPanel+SecurityPanel(CallPeer) java.awt.GridBagConstraints+GridBagConstraints() java.awt.Insets+Insets(int,int,int,int) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) net.java.sip.communicator.impl.gui.main.call.SecurityPanel+refreshStates(CallPeerSecurityOnEvent) net.java.sip.communicator.impl.gui.main.call.SecurityPanel+refreshStates(CallPeerSecurityOnEvent) javax.swing.JComponent+revalidate() javax.swing.JComponent+revalidate()",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityPanel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityPanel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer java.awt.GridBagConstraints+fill java.awt.GridBagConstraints+NONE java.awt.GridBagConstraints+gridx java.awt.GridBagConstraints+gridy java.awt.GridBagConstraints+weightx java.awt.GridBagConstraints+weighty java.awt.GridBagConstraints+insets net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityPanel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityPanel,1133,36,1,,"public void createSecurityPanel(
        CallPeerSecurityOnEvent event)
    {
        Call call = callPeer.getCall();

        if (call != null)
        {
            OperationSetSecureTelephony secure
                = (OperationSetSecureTelephony) call
                    .getProtocolProvider().getOperationSet(
                            OperationSetSecureTelephony.class);

            if (secure != null)
            {
                if (securityPanel == null)
                {
                    securityPanel = new SecurityPanel(callPeer);

                    GridBagConstraints constraints = new GridBagConstraints();

                    constraints.fill = GridBagConstraints.NONE;
                    constraints.gridx = 0;
                    constraints.gridy = 2;
                    constraints.weightx = 0;
                    constraints.weighty = 0;
                    constraints.insets = new Insets(5, 0, 0, 0);

                    this.add(securityPanel, constraints);
                }

                securityPanel.refreshStates(event);

                this.revalidate();
            }
        }
    }",True,True,"The function of this method is to create a security panel for a call peer, if the call peer has a call and the call supports secure telephony. The security panel is added to the current panel and its states are refreshed.",False,"This code creates a security panel for a call peer if the call is not null and if the operation set for secure telephony is available. It adds the security panel to the main panel, refreshes its states based on the event, and revalidates the main panel."
29,VideoTelephonyListener,video telephony listener ,MemberClass,,,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.VideoTelephonyListener+propertyChange(PropertyChangeEvent) java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.util.PropertyChangeEvent+getPropertyName() net.java.sip.communicator.util.PropertyChangeEvent+getPropertyName() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleLocalVideoStreamingChange(VideoTelephonyListener) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleLocalVideoStreamingChange(VideoTelephonyListener) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.VideoTelephonyListener+videoAdded(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleVideoEvent(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleVideoEvent(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.VideoTelephonyListener+videoRemoved(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleVideoEvent(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleVideoEvent(VideoEvent),net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+LOCAL_VIDEO_STREAMING,649,24,2,,"private class VideoTelephonyListener
        implements PropertyChangeListener,
                   VideoListener
    {
        public void propertyChange(PropertyChangeEvent event)
        {
            if (OperationSetVideoTelephony.LOCAL_VIDEO_STREAMING.equals(
                    event.getPropertyName()))
            {
                handleLocalVideoStreamingChange(
                        this);
            }
        }

        public void videoAdded(VideoEvent event)
        {
            handleVideoEvent(event);
        }

        public void videoRemoved(VideoEvent event)
        {
            handleVideoEvent(event);
        }
    }",False,False,,False,
30,addVideoListener(),add video listener sets up listening to notifications about adding or removing video for the call peer this panel depicts and displays the video in question in the last known of link video containers because the videois represented by a component and it cannot be displayed in multiple container s at one and the same time as soon as it arrives ,Method,"CallPeerPanel(CallDialog,CallPeer)",,"net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.Call+getProtocolProvider() net.java.sip.communicator.service.protocol.Call+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.VideoTelephonyListener+VideoTelephonyListener() +() +addVideoListener() net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+addVideoListener(CallPeer,VideoListener) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+addVideoListener(CallPeer,VideoListener) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+addPropertyChangeListener(Call,PropertyChangeListener) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+addPropertyChangeListener(Call,PropertyChangeListener) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleVideoEvent(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleVideoEvent(VideoEvent) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleLocalVideoStreamingChange(VideoTelephonyListener) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+handleLocalVideoStreamingChange(VideoTelephonyListener)",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer +videoListenerIsAdded net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer +videoListenerIsAdded net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoContainers net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoTelephony,5278,143,2,"/** 
 * Sets up listening to notifications about adding or removing video for the <code>CallPeer</code> this panel depicts and displays the video in question in the last-known of  {@link #videoContainers} (because the videois represented by a <code>Component</code> and it cannot be displayed in multiple <code>Container</code>s at one and the same time) as soon as it arrives.
 */
","/**
     * Sets up listening to notifications about adding or removing video for the
     * <code>CallPeer</code> this panel depicts and displays the video in
     * question in the last-known of {@link #videoContainers} (because the video
     * is represented by a <code>Component</code> and it cannot be displayed in
     * multiple <code>Container</code>s at one and the same time) as soon as it
     * arrives.
     */
    private OperationSetVideoTelephony addVideoListener()
    {
        final Call call = callPeer.getCall();
        if (call == null)
            return null;

        final OperationSetVideoTelephony telephony =
            (OperationSetVideoTelephony) call.getProtocolProvider()
                .getOperationSet(OperationSetVideoTelephony.class);
        if (telephony == null)
            return null;

        final VideoTelephonyListener videoTelephonyListener
            = new VideoTelephonyListener();

        /*
         * The video is only available while the #callPeer is in a Call
         * and that call is in progress so only listen to VideoEvents during
         * that time.
         */
        CallChangeListener callListener = new CallChangeListener()
        {
            private boolean videoListenerIsAdded;

            private void addVideoListener()
            {
                telephony.addVideoListener(
                        callPeer, videoTelephonyListener);
                telephony.addPropertyChangeListener(
                        call, videoTelephonyListener);
                videoListenerIsAdded = true;

                synchronized (videoContainers)
                {
                    videoTelephony = telephony;

                    handleVideoEvent(null);

                    handleLocalVideoStreamingChange(
                            videoTelephonyListener);
                }
            }

            /*
             * When the #callPeer of this CallPeerPanel gets added
             * to the Call, starts listening for changes in the video in order
             * to display it.
             */
            public synchronized void callPeerAdded(
                CallPeerEvent event)
            {
                if (callPeer.equals(event.getSourceCallPeer())
                        && !videoListenerIsAdded)
                {
                    Call call = callPeer.getCall();

                    if ((call != null)
                            && CallState.CALL_IN_PROGRESS.equals(
                                    call.getCallState()))
                        addVideoListener();
                }
            }

            /*
             * When the #callPeer of this CallPeerPanel leaves the
             * Call, stops listening for changes in the video because it should
             * no longer be updated anyway.
             */
            public synchronized void callPeerRemoved(
                CallPeerEvent event)
            {
                if (callPeer.equals(event.getSourceCallPeer())
                    && videoListenerIsAdded)
                {
                    Call call = callPeer.getCall();

                    if (call != null)
                        removeVideoListener();
                }
            }

            /*
             * When the Call of #callPeer ends, stops tracking the
             * updates in the video because there should no longer be any video
             * anyway. When the Call in question starts, starts tracking any
             * changes to the video because it's negotiated and it should be
             * displayed in this CallPeerPanel.
             */
            public synchronized void callStateChanged(CallChangeEvent event)
            {
                CallState newCallState = (CallState) event.getNewValue();

                if (CallState.CALL_ENDED.equals(newCallState))
                {
                    if (videoListenerIsAdded)
                        removeVideoListener();
                    call.removeCallChangeListener(this);
                }
                else if (CallState.CALL_IN_PROGRESS.equals(newCallState))
                {
                    if (!videoListenerIsAdded)
                        addVideoListener();
                }
            }

            private void removeVideoListener()
            {
                telephony.removeVideoListener(
                        callPeer, videoTelephonyListener);
                telephony.removePropertyChangeListener(
                        call, videoTelephonyListener);
                videoListenerIsAdded = false;

                if (localVideo != null)
                {
                    telephony.disposeLocalVisualComponent(
                            callPeer, localVideo);
                    localVideo = null;
                }

                synchronized (videoContainers)
                {
                    if (telephony.equals(videoTelephony))
                        videoTelephony = null;
                }

                exitFullScreen(fullScreenWindow);
            }
        };
        call.addCallChangeListener(callListener);
        callListener.callStateChanged(new CallChangeEvent(call,
            CallChangeEvent.CALL_STATE_CHANGE, null, call.getCallState()));

        return telephony;
    }",False,False,The function of this method is to set up listening to notifications about adding or removing video for a specific CallPeer. It adds a video listener and property change listener to the OperationSetVideoTelephony associated with the Call of the CallPeer. It also handles various events related to the Call and updates the video display accordingly.,True,This code sets up a listener to receive notifications about adding or removing video for a specific CallPeer. It then displays the received video in the last-known video container. The listener is added when the call is in progress and removed when the call ends.
31,handleVideoEvent(VideoEvent),handle video event event when a video is added or removed for the call peer makes sure to display or hide it respectively param event a video event describing the added visual component representing video and the provider it was added into or null if such information is not available ,Method,VideoTelephonyListener.videoAdded(VideoEvent) VideoTelephonyListener.videoRemoved(VideoEvent),,net.java.sip.communicator.service.protocol.event.VideoEvent+isConsumed() net.java.sip.communicator.service.protocol.event.VideoEvent+isConsumed() net.java.sip.communicator.service.protocol.event.VideoEvent+getOrigin() net.java.sip.communicator.service.protocol.event.VideoEvent+getOrigin() net.java.sip.communicator.service.protocol.event.VideoEvent+getVisualComponent() net.java.sip.communicator.service.protocol.event.VideoEvent+getVisualComponent() net.java.sip.communicator.service.protocol.event.VideoEvent+getType() net.java.sip.communicator.service.protocol.event.VideoEvent+getType() net.java.sip.communicator.service.protocol.event.VideoEvent+consume() net.java.sip.communicator.service.protocol.event.VideoEvent+consume() javax.swing.SwingUtilities+isEventDispatchThread() javax.swing.SwingUtilities+isEventDispatchThread() javax.swing.SwingUtilities+invokeLater(Runnable) javax.swing.SwingUtilities+invokeLater(Runnable) +() +run(),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoContainers net.java.sip.communicator.service.protocol.event.VideoEvent+LOCAL net.java.sip.communicator.service.protocol.event.VideoEvent+VIDEO_ADDED net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.service.protocol.event.VideoEvent+VIDEO_REMOVED net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo,3412,100,2,"/** 
 * When a video is added or removed for the <code>callPeer</code>, makes sure to display or hide it respectively.
 * @param event a <code>VideoEvent</code> describing the added visual<code>Component</code> representing video and the provider it was added into or <code>null</code> if such information is not available
 */
","/**
     * When a video is added or removed for the <code>callPeer</code>,
     * makes sure to display or hide it respectively.
     *
     * @param event a <code>VideoEvent</code> describing the added visual
     *            <code>Component</code> representing video and the provider it
     *            was added into or <code>null</code> if such information is not
     *            available
     */
    private void handleVideoEvent(final VideoEvent event)
    {
        synchronized (videoContainers)
        {
            if ((event != null) && !event.isConsumed()
                && (event.getOrigin() == VideoEvent.LOCAL))
            {
                Component localVideo = event.getVisualComponent();

                switch (event.getType())
                {
                case VideoEvent.VIDEO_ADDED:
                    this.localVideo = localVideo;

                    /*
                     * Let the creator of the local visual Component know it
                     * shouldn't be disposed of because we're going to use it.
                     */
                    event.consume();
                    break;

                case VideoEvent.VIDEO_REMOVED:
                    if (this.localVideo == localVideo)
                    {
                        this.localVideo = null;
                    }
                    break;
                }
            }
        }

        if (!SwingUtilities.isEventDispatchThread())
        {
            SwingUtilities.invokeLater(new Runnable()
            {
                public void run()
                {
                    handleVideoEvent(event);
                }
            });
            return;
        }

        synchronized (videoContainers)
        {
            int videoContainerCount;

            if ((videoTelephony != null)
                && ((videoContainerCount = videoContainers.size()) > 0))
            {
                Container videoContainer =
                    videoContainers.get(videoContainerCount - 1);
                int zOrder = 0;

                videoContainer.removeAll();

                // LOCAL
                if (localVideo != null)
                {
                    videoContainer.add(localVideo, VideoLayout.LOCAL, zOrder++);

                    // If the local video is turned on, we ensure that the
                    // button is selected.
                    if (!callDialog.isVideoButtonSelected())
                        callDialog.setVideoButtonSelected(true);
                }

                // REMOTE
                Component[] videos =
                    videoTelephony.getVisualComponents(callPeer);

                Component video =
                    ((videos == null) || (videos.length < 1)) ? null
                        : videos[0];

                if (video != null)
                    videoContainer
                        .add(video, VideoLayout.CENTER_REMOTE, zOrder++);

                videoContainer.validate();

                /*
                 * Without explicit repainting, the remote visual Component will
                 * not stay small after entering fullscreen, the Component shown
                 * when there's no video will show be shown beneath the video
                 * Component though the former has already been removed...
                 */
                videoContainer.repaint();
            }
        }
    }",False,False,This method handles video events for a specific peer in a video call. It updates the display to show or hide the video component based on the event type (video added or removed). It also handles the layout and positioning of the video components within the video container.,True,This code handles video events for a call peer. It adds or removes video components based on the event type and updates the visual layout of the video containers accordingly. It also ensures that the local video component is not disposed of and sets the video button as selected if the local video is turned on.
32,handleLocalVideoStreamingChange(VideoTelephonyListener),handle local video streaming change listener ,Method,VideoTelephonyListener.propertyChange(PropertyChangeEvent),,"net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+isLocalVideoStreaming(Call) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+isLocalVideoStreaming(Call) net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+createLocalVisualComponent(CallPeer,VideoListener) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+createLocalVisualComponent(CallPeer,VideoListener) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+disposeLocalVisualComponent(CallPeer,Component) net.java.sip.communicator.service.protocol.OperationSetVideoTelephony+disposeLocalVisualComponent(CallPeer,Component)",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoContainers net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoTelephony net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoTelephony net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoTelephony net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+logger net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+videoTelephony net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+localVideo,940,30,2,,"private void handleLocalVideoStreamingChange(
            VideoTelephonyListener listener)
    {
        synchronized (videoContainers)
        {
            if (videoTelephony == null)
                return;

            if (videoTelephony.isLocalVideoStreaming(callPeer.getCall()))
            {
                try
                {
                    videoTelephony.createLocalVisualComponent(
                            callPeer, listener);
                }
                catch (OperationFailedException ex)
                {
                    logger.error(
                            ""Failed to create local video/visual Component."",
                            ex);
                }
            }
            else if (localVideo != null)
            {
                videoTelephony.disposeLocalVisualComponent(
                        callPeer, localVideo);
                localVideo = null;
            }
        }
    }",False,False,This method handles changes in local video streaming for video telephony. It creates or disposes of the local visual component based on whether local video streaming is active or not.,True,"This code handles changes in local video streaming during a video telephony call. It checks if the video telephony is active and if the local video is streaming. If streaming, it creates a local visual component for the call peer. If not streaming, it disposes of the local visual component."
33,"setState(String,Icon)",set state state icon sets the state of the contained call peer by specifying the state name and icon param state the state of the contained call peer param icon the icon of the state ,Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+callPeerRemoved(CallPeerEvent) net.java.sip.communicator.impl.gui.main.call.CallPanel+peerStateChanged(CallPeerChangeEvent),javax.swing.JLabel+setText(String) javax.swing.JLabel+setText(String) javax.swing.JLabel+setIcon(Icon) javax.swing.JLabel+setIcon(Icon),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStatusLabel,362,12,1,"/** 
 * Sets the state of the contained call peer by specifying the state name and icon.
 * @param state the state of the contained call peer
 * @param icon the icon of the state
 */
","/**
     * Sets the state of the contained call peer by specifying the
     * state name and icon.
     *
     * @param state the state of the contained call peer
     * @param icon the icon of the state
     */
    public void setState(String state, Icon icon)
    {
        this.callStatusLabel.setText(state);
        this.callStatusLabel.setIcon(icon);
    }",True,True,This method sets the state and icon of the contained call peer by updating the callStatusLabel with the provided state and icon.,False,"The code defines a method called ""setState"" that takes a state name and an icon as parameters. It sets the state of a call peer by updating the text and icon of a call status label."
34,setSecured(boolean),set secured is secured sets the secured status icon to the status panel param is secured indicates if the call with this peer issecured ,Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOn(CallPeerSecurityOnEvent) net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOff(CallPeerSecurityOffEvent),javax.swing.JLabel+setIcon(Icon) javax.swing.JLabel+setIcon(Icon) javax.swing.ImageIcon+ImageIcon(Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) javax.swing.JLabel+setIcon(Icon) javax.swing.JLabel+setIcon(Icon) javax.swing.ImageIcon+ImageIcon(Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityStatusLabel net.java.sip.communicator.impl.gui.utils.ImageLoader+SECURE_BUTTON_ON net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+securityStatusLabel net.java.sip.communicator.impl.gui.utils.ImageLoader+SECURE_BUTTON_OFF,499,15,1,"/** 
 * Sets the secured status icon to the status panel.
 * @param isSecured indicates if the call with this peer issecured
 */
","/**
     * Sets the secured status icon to the status panel.
     *
     * @param isSecured indicates if the call with this peer is
     * secured
     */
    public void setSecured(boolean isSecured)
    {
        if (isSecured)
            securityStatusLabel.setIcon(new ImageIcon(ImageLoader
                .getImage(ImageLoader.SECURE_BUTTON_ON)));
        else
            securityStatusLabel.setIcon(new ImageIcon(ImageLoader
                .getImage(ImageLoader.SECURE_BUTTON_OFF)));
    }",True,True,"This method sets the secured status icon in the status panel based on the value of the isSecured parameter. If isSecured is true, the secured status icon is set to ""on"", otherwise it is set to ""off"".",False,"This code defines a method called ""setSecured"" that takes a boolean parameter indicating if a call with a peer is secured. It sets the icon of a status panel based on the value of the parameter, displaying a secure or insecure status."
35,setMute(boolean),set mute is mute sets the mute status icon to the status panel param is mute indicates if the call with this peer ismuted ,Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+propertyChange(PropertyChangeEvent),javax.swing.JLabel+setIcon(Icon) javax.swing.JLabel+setIcon(Icon) javax.swing.ImageIcon+ImageIcon(Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) javax.swing.JLabel+setIcon(Icon) javax.swing.JLabel+setIcon(Icon),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+muteStatusLabel net.java.sip.communicator.impl.gui.utils.ImageLoader+MUTE_STATUS_ICON net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+muteStatusLabel,394,14,1,"/** 
 * Sets the mute status icon to the status panel.
 * @param isMute indicates if the call with this peer ismuted
 */
","/**
     * Sets the mute status icon to the status panel.
     *
     * @param isMute indicates if the call with this peer is
     * muted
     */
    public void setMute(boolean isMute)
    {
        if(isMute)
            muteStatusLabel.setIcon(new ImageIcon(
                ImageLoader.getImage(ImageLoader.MUTE_STATUS_ICON)));
        else
            muteStatusLabel.setIcon(null);
    }",True,True,"This method sets the mute status icon in the status panel. If the call with this peer is muted, it sets the mute status icon. Otherwise, it removes the mute status icon.",False,"This code defines a method called ""setMute"" that takes a boolean parameter ""isMute"" to indicate whether a call with a peer is muted. If ""isMute"" is true, it sets the mute status icon in the status panel using a specific image, otherwise it removes the icon."
36,setAudioSecurityOn(boolean),set audio security on is audio security on sets the audio security on or off param is audio security on indicates if the audio security is turned on oroff ,Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOn(CallPeerSecurityOnEvent) net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOff(CallPeerSecurityOffEvent),,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+isAudioSecurityOn net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+isAudioSecurityOn,278,10,1,"/** 
 * Sets the audio security on or off.
 * @param isAudioSecurityOn indicates if the audio security is turned on oroff.
 */
","/**
     * Sets the audio security on or off.
     *
     * @param isAudioSecurityOn indicates if the audio security is turned on or
     * off.
     */
    public void setAudioSecurityOn(boolean isAudioSecurityOn)
    {
        this.isAudioSecurityOn = isAudioSecurityOn;
    }",True,True,This method sets the audio security on or off based on the value of the boolean parameter isAudioSecurityOn.,False,"This code defines a method called ""setAudioSecurityOn"" that takes a boolean parameter to indicate whether the audio security is turned on or off. It sets the value of the ""isAudioSecurityOn"" variable accordingly."
37,setVideoSecurityOn(boolean),set video security on is video security on sets the video security on or off param is video security on indicates if the video security is turned on oroff ,Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOn(CallPeerSecurityOnEvent) net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOff(CallPeerSecurityOffEvent),,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+isVideoSecurityOn net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+isVideoSecurityOn,278,10,1,"/** 
 * Sets the video security on or off.
 * @param isVideoSecurityOn indicates if the video security is turned on oroff.
 */
","/**
     * Sets the video security on or off.
     *
     * @param isVideoSecurityOn indicates if the video security is turned on or
     * off.
     */
    public void setVideoSecurityOn(boolean isVideoSecurityOn)
    {
        this.isVideoSecurityOn = isVideoSecurityOn;
    }",True,True,"This method sets the video security on or off based on the value of the parameter ""isVideoSecurityOn"".",False,"The code defines a method called ""setVideoSecurityOn"" that takes a boolean parameter to indicate whether the video security is turned on or off. The method updates the value of the ""isVideoSecurityOn"" variable accordingly."
38,isAudioSecurityOn(),is audio security on indicates if the audio security is turned on or off return true if the audio security is on otherwise false ,Method,,net.java.sip.communicator.impl.gui.main.call.SecurityStatusLabel+createToolTip(),,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+isAudioSecurityOn,264,10,1,"/** 
 * Indicates if the audio security is turned on or off.
 * @return <code>true</code> if the audio security is on, otherwise -<code>false</code>.
 */
","/**
     * Indicates if the audio security is turned on or off.
     *
     * @return <code>true</code> if the audio security is on, otherwise -
     * <code>false</code>.
     */
    public boolean isAudioSecurityOn()
    {
        return isAudioSecurityOn;
    }",True,True,This method returns a boolean value indicating whether the audio security is turned on or off.,False,"The code contains a method named ""isAudioSecurityOn"" which returns a boolean value indicating whether the audio security is turned on or off. The method does not take any parameters and simply returns the value of a boolean variable named ""isAudioSecurityOn""."
39,isVideoSecurityOn(),is video security on indicates if the video security is turned on or off return true if the video security is on otherwise false ,Method,,net.java.sip.communicator.impl.gui.main.call.SecurityStatusLabel+createToolTip(),,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+isVideoSecurityOn,264,10,1,"/** 
 * Indicates if the video security is turned on or off.
 * @return <code>true</code> if the video security is on, otherwise -<code>false</code>.
 */
","/**
     * Indicates if the video security is turned on or off.
     *
     * @return <code>true</code> if the video security is on, otherwise -
     * <code>false</code>.
     */
    public boolean isVideoSecurityOn()
    {
        return isVideoSecurityOn;
    }",True,True,This method returns a boolean value indicating whether the video security is turned on or off.,False,"The code contains a method named ""isVideoSecurityOn"" which returns a boolean value indicating whether the video security is turned on or off. The method does not take any parameters and simply returns the value of a boolean variable named ""isVideoSecurityOn""."
40,getEncryptionCipher(),get encryption cipher returns the cipher used for the encryption of the current call return the cipher used for the encryption of the current call ,Method,,net.java.sip.communicator.impl.gui.main.call.SecurityStatusLabel+createToolTip(),,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+encryptionCipher,245,9,1,"/** 
 * Returns the cipher used for the encryption of the current call.
 * @return the cipher used for the encryption of the current call.
 */
","/**
     * Returns the cipher used for the encryption of the current call.
     *
     * @return the cipher used for the encryption of the current call.
     */
    public String getEncryptionCipher()
    {
        return encryptionCipher;
    }",True,True,This method returns the cipher used for the encryption of the current call.,False,"The given code is a method named ""getEncryptionCipher"" that returns the cipher used for the encryption of the current call. It has a return type of String and does not take any parameters."
41,setEncryptionCipher(String),set encryption cipher encryption cipher sets the cipher used for the encryption of the current call param encryption cipher the cipher used for the encryption of thecurrent call ,Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+securityOn(CallPeerSecurityOnEvent),,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+encryptionCipher net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+encryptionCipher,303,10,1,"/** 
 * Sets the cipher used for the encryption of the current call.
 * @param encryptionCipher the cipher used for the encryption of thecurrent call.
 */
","/**
     * Sets the cipher used for the encryption of the current call.
     *
     * @param encryptionCipher the cipher used for the encryption of the
     * current call.
     */
    public void setEncryptionCipher(String encryptionCipher)
    {
        this.encryptionCipher = encryptionCipher;
    }",False,True,This method sets the encryption cipher used for the current call.,False,"This code defines a method called ""setEncryptionCipher"" that sets the encryption cipher used for the current call. It takes a string parameter representing the encryption cipher and assigns it to the ""encryptionCipher"" variable of the class."
42,startCallTimer(),start call timer starts the timer that counts call duration ,Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+peerStateChanged(CallPeerChangeEvent),javax.swing.Timer+start() javax.swing.Timer+start(),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer,135,7,1,"/** 
 * Starts the timer that counts call duration.
 */
","/**
     * Starts the timer that counts call duration.
     */
    public void startCallTimer()
    {
        this.timer.start();
    }",False,True,This method starts a timer that counts the duration of a call.,False,"The given code snippet defines a method called ""startCallTimer"" that starts a timer. It is a public method that does not take any parameters and is used to initiate the timer for measuring the duration of a call."
43,stopCallTimer(),stop call timer stops the timer that counts call duration ,Method,,net.java.sip.communicator.impl.gui.main.call.CallPanel+callPeerRemoved(CallPeerEvent),javax.swing.Timer+stop() javax.swing.Timer+stop(),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timer,132,7,1,"/** 
 * Stops the timer that counts call duration.
 */
","/**
     * Stops the timer that counts call duration.
     */
    public void stopCallTimer()
    {
        this.timer.stop();
    }",False,True,This method stops the timer that is used to count the duration of a call.,False,"The given code snippet contains a method called ""stopCallTimer()"" which stops a timer that is used to measure the duration of a call. It is a public method that does not return any value and simply stops the timer."
44,CallTimerListener,call timer listener each second refreshes the time label to show to the user the exact duration of the call ,MemberClass,,,"net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.CallTimerListener+actionPerformed(ActionEvent) net.java.sip.communicator.util.GuiUtils+substractDates(Date,Date) net.java.sip.communicator.util.GuiUtils+substractDates(Date,Date) java.util.Date+Date(long) java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() java.util.Date+Date(long) net.java.sip.communicator.service.protocol.CallPeer+getCallDurationStartTime() net.java.sip.communicator.service.protocol.CallPeer+getCallDurationStartTime() java.util.Date+setTime(long) java.util.Date+setTime(long) java.util.Date+getTime() java.util.Date+getTime() javax.swing.JLabel+setText(String) javax.swing.JLabel+setText(String) net.java.sip.communicator.util.GuiUtils+formatTime(Date) net.java.sip.communicator.util.GuiUtils+formatTime(Date)",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDuration net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+timeLabel,547,18,2,"/** 
 * Each second refreshes the time label to show to the user the exact duration of the call.
 */
","/**
     * Each second refreshes the time label to show to the user the exact
     * duration of the call.
     */
    private class CallTimerListener
        implements ActionListener
    {
        public void actionPerformed(ActionEvent e)
        {
            Date time =
                GuiUtils.substractDates(new Date(System.currentTimeMillis()),
                    new Date(callPeer.getCallDurationStartTime()));

            callDuration.setTime(time.getTime());

            timeLabel.setText(GuiUtils.formatTime(time));
        }
    }",False,True,"/** 
 * Each second refreshes the time label to show to the user the exact duration of the call.
 */
",False,"/** 
 * Each second refreshes the time label to show to the user the exact duration of the call.
 */
"
45,getCallStartTime(),get call start time returns the start time of the contained peer call note that the start time of the call is different from the conversation start time for example if we receive a call the call start time is when the call is received and the conversation start time would be when we accept the call return the start time of the contained peer call ,Method,,,,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callStartTime,471,13,1,"/** 
 * Returns the start time of the contained peer call. Note that the start time of the call is different from the conversation start time. For example if we receive a call, the call start time is when the call is received and the conversation start time would be when we accept the call.
 * @return the start time of the contained peer call
 */
","/**
     * Returns the start time of the contained peer call. Note that the
     * start time of the call is different from the conversation start time. For
     * example if we receive a call, the call start time is when the call is
     * received and the conversation start time would be when we accept the
     * call.
     *
     * @return the start time of the contained peer call
     */
    public Date getCallStartTime()
    {
        return callStartTime;
    }",False,True,"This method returns the start time of a peer call. It is different from the conversation start time, as it represents when the call was received, not when it was accepted. The return type is a Date object.",False,"This code defines a method called ""getCallStartTime"" which returns the start time of a peer call. The method retrieves and returns the value of the ""callStartTime"" variable, which represents the start time of the call."
46,getCallDuration(),get call duration returns the duration of the contained peer call return the duration of the contained peer call ,Method,,,,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDuration,204,9,1,"/** 
 * Returns the duration of the contained peer call.
 * @return the duration of the contained peer call
 */
","/**
     * Returns the duration of the contained peer call.
     *
     * @return the duration of the contained peer call
     */
    public Date getCallDuration()
    {
        return callDuration;
    }",False,True,This method returns the duration of a peer call as a Date object.,False,"The code contains a method named ""getCallDuration"" which returns the duration of a peer call. The method returns a Date object representing the duration of the call."
47,getCallType(),get call type returns this call type gui call peer record incoming call or outgoing cal l return returns this call type incoming call or outgoing cal l ,Method,,,,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callDuration net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callType net.java.sip.communicator.impl.gui.main.call.GuiCallPeerRecord+INCOMING_CALL,350,13,1,"/** 
 * Returns this call type - GuiCallPeerRecord: INCOMING_CALL or OUTGOING_CALL
 * @return Returns this call type : INCOMING_CALL or OUTGOING_CALL
 */
","/**
     * Returns this call type - GuiCallPeerRecord: INCOMING_CALL or
     * OUTGOING_CALL
     *
     * @return Returns this call type : INCOMING_CALL or OUTGOING_CALL
     */
    public String getCallType()
    {
        if (callDuration != null)
            return callType;
        else
            return GuiCallPeerRecord.INCOMING_CALL;
    }",False,True,"This method returns the call type of a call record, which can be either INCOMING_CALL or OUTGOING_CALL. If the call duration is not null, it returns the call type stored in the callDuration variable. Otherwise, it returns INCOMING_CALL.",False,"This code defines a method called ""getCallType"" that returns the call type of a call record. If the call duration is not null, it returns the call type stored in the variable ""callType"". Otherwise, it returns the constant value ""INCOMING_CALL"" from the ""GuiCallPeerRecord"" class."
48,setCallType(String),set call type call type sets the type of the call call type could be gui call peer record incoming call or gui call peer record incoming call param call type the type of call to set ,Method,,"net.java.sip.communicator.impl.gui.main.call.CallPanel+addCallPeer(CallPeer,String)",,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callType net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callType,309,11,1,"/** 
 * Sets the type of the call. Call type could be <tt>GuiCallPeerRecord.INCOMING_CALL</tt> or <tt>GuiCallPeerRecord.INCOMING_CALL</tt>.
 * @param callType the type of call to set
 */
","/**
     * Sets the type of the call. Call type could be
     * <tt>GuiCallPeerRecord.INCOMING_CALL</tt> or
     * <tt>GuiCallPeerRecord.INCOMING_CALL</tt>.
     *
     * @param callType the type of call to set
     */
    public void setCallType(String callType)
    {
        this.callType = callType;
    }",False,True,"This method sets the type of the call. The call type can be either ""GuiCallPeerRecord.INCOMING_CALL"" or ""GuiCallPeerRecord.OUTGOING_CALL"". The method takes a String parameter called callType and assigns it to the instance variable this.callType.",False,"This code defines a method called ""setCallType"" that sets the type of a call. The method takes a string parameter called ""callType"" and assigns it to the instance variable ""callType"" of the class. The call type can be either ""GuiCallPeerRecord.INCOMING_CALL"" or ""GuiCallPeerRecord.INCOMING_CALL""."
49,getPeerName(),get peer name returns the name of the peer contained in this panel return the name of the peer contained in this panel ,Method,enterFullScreen(),,,net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+peerName,210,9,1,"/** 
 * Returns the name of the peer, contained in this panel.
 * @return the name of the peer, contained in this panel
 */
","/**
     * Returns the name of the peer, contained in this panel.
     *
     * @return the name of the peer, contained in this panel
     */
    public String getPeerName()
    {
        return peerName;
    }",False,False,This method returns the name of the peer contained in the panel.,False,"The code is a method named ""getPeerName"" that returns the name of the peer contained in a panel. It has a summary description stating that it returns the name of the peer in the panel."
50,createEnterFullScreenButton(),create enter full screen button ,Method,createStatusBar(),,net.java.sip.communicator.util.swing.SIPCommButton+SIPCommButton(Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) javax.swing.JComponent+setToolTipText(String) javax.swing.JComponent+setToolTipText(String) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String) javax.swing.AbstractButton+addActionListener(ActionListener) javax.swing.AbstractButton+addActionListener(ActionListener) +() +actionPerformed(ActionEvent),net.java.sip.communicator.impl.gui.utils.ImageLoader+ENTER_FULL_SCREEN_BUTTON,549,17,2,,"private Component createEnterFullScreenButton()
    {
        SIPCommButton button =
            new SIPCommButton(ImageLoader
                .getImage(ImageLoader.ENTER_FULL_SCREEN_BUTTON));

        button.setToolTipText(GuiActivator.getResources().getI18NString(
            ""service.gui.ENTER_FULL_SCREEN_TOOL_TIP""));
        button.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent event)
            {
                enterFullScreen();
            }
        });
        return button;
    }",False,False,"This method creates and returns a button that, when clicked, triggers the ""enterFullScreen"" function. The button has a tooltip with a localized string.",True,"This code creates a button component for entering full screen mode in a GUI. The button is created with an image and a tooltip, and when clicked, it calls the method ""enterFullScreen()""."
51,createExitFullScreenButton(),create exit full screen button ,Method,createFullScreenButtonBar(),,"net.java.sip.communicator.util.swing.SIPCommButton+SIPCommButton(Image,Image) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) net.java.sip.communicator.impl.gui.utils.ImageLoader+getImage(ImageID) javax.swing.JComponent+setToolTipText(String) javax.swing.JComponent+setToolTipText(String) net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.service.resources.ResourceManagementService+getI18NString(String) javax.swing.AbstractButton+addActionListener(ActionListener) javax.swing.AbstractButton+addActionListener(ActionListener) +() +actionPerformed(ActionEvent)",net.java.sip.communicator.impl.gui.utils.ImageLoader+FULL_SCREEN_BUTTON_BG net.java.sip.communicator.impl.gui.utils.ImageLoader+EXIT_FULL_SCREEN_BUTTON,852,23,2,,"private Component createExitFullScreenButton()
    {
        JButton button =
            new SIPCommButton(
                ImageLoader.getImage(ImageLoader.FULL_SCREEN_BUTTON_BG),
                ImageLoader.getImage(ImageLoader.EXIT_FULL_SCREEN_BUTTON));

        button.setToolTipText(GuiActivator.getResources().getI18NString(
            ""service.gui.EXIT_FULL_SCREEN_TOOL_TIP""));
        button.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent event)
            {
                Object source = event.getSource();
                Frame fullScreenFrame =
                    (source instanceof Component) ? TransferCallButton
                        .getFrame((Component) source) : null;

                exitFullScreen(fullScreenFrame);
            }
        });
        return button;
    }",False,False,This method creates and returns a button that is used to exit full screen mode. The button is created with specific images and a tool tip text. It also adds an action listener that calls the exitFullScreen method when clicked.,True,"This code creates and returns a JButton component that serves as an exit full-screen button. The button is initialized with images and a tooltip, and an ActionListener is added to handle the button's action event, which calls the exitFullScreen() method with the appropriate frame as a parameter."
52,createFullScreenButtonBar(),create full screen button bar ,Method,enterFullScreen(),,"net.java.sip.communicator.service.protocol.CallPeer+getState() net.java.sip.communicator.service.protocol.CallPeer+getState() net.java.sip.communicator.impl.gui.main.call.HoldButton+HoldButton(Call,boolean,boolean) net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeerState+isOnHold(CallPeerState) net.java.sip.communicator.service.protocol.CallPeerState+isOnHold(CallPeerState) net.java.sip.communicator.impl.gui.main.call.MuteButton+MuteButton(Call,boolean,boolean) net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+getCall() net.java.sip.communicator.service.protocol.CallPeer+isMute() net.java.sip.communicator.service.protocol.CallPeer+isMute() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createExitFullScreenButton() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createExitFullScreenButton() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createButtonBar(boolean,Component[]) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createButtonBar(boolean,Component[])",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+callPeer,641,19,2,,"private Component createFullScreenButtonBar()
    {
        CallPeerState peerState
            = callPeer.getState();

        Component[] buttons =
            new Component[]
            {   new HoldButton( callPeer.getCall(),
                                true,
                                CallPeerState.isOnHold(peerState)),
                new MuteButton( callPeer.getCall(),
                                true,
                                callPeer.isMute()),
                createExitFullScreenButton() };

        Component fullScreenButtonBar = createButtonBar(true, buttons);

        return fullScreenButtonBar;
    }",False,False,"This method creates a full-screen button bar for a call peer. It retrieves the state of the call peer, creates an array of buttons including a hold button, a mute button, and an exit full-screen button, and then creates and returns the full-screen button bar component.",True,"This code defines a private method called `createFullScreenButtonBar()` that creates a button bar component for a full-screen display. The button bar contains three buttons: a hold button, a mute button, and an exit full-screen button. The method returns the created button bar component."
53,enterFullScreen(),enter full screen ,Method,,,"javax.swing.JFrame+JFrame() javax.swing.JFrame+setDefaultCloseOperation(int) javax.swing.JFrame+setDefaultCloseOperation(int) java.awt.Frame+setTitle(String) java.awt.Frame+setTitle(String) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+getPeerName() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+getPeerName() java.awt.Frame+setUndecorated(boolean) java.awt.Frame+setUndecorated(boolean) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createCenter() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createCenter() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createFullScreenButtonBar() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+createFullScreenButtonBar() javax.swing.JFrame+getContentPane() javax.swing.JFrame+getContentPane() java.awt.Container+setLayout(LayoutManager) java.awt.Container+setLayout(LayoutManager) net.java.sip.communicator.impl.gui.main.call.FullScreenLayout+FullScreenLayout(boolean) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Component+setBackground(Color) java.awt.Component+setBackground(Color) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+setBackground(Component,Color) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+setBackground(Component,Color) +componentAdded(ContainerEvent)",javax.swing.WindowConstants+DISPOSE_ON_CLOSE net.java.sip.communicator.impl.gui.main.call.FullScreenLayout+SOUTH net.java.sip.communicator.impl.gui.main.call.FullScreenLayout+CENTER java.awt.Color+black,2884,85,2,,"private void enterFullScreen()
    {
        // Create the main Components of the UI.
        final JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        frame.setTitle(getPeerName());
        frame.setUndecorated(true);

        Component center = createCenter();
        final Component buttonBar = createFullScreenButtonBar();

        // Lay out the main Components of the UI.
        final Container contentPane = frame.getContentPane();
        contentPane.setLayout(new FullScreenLayout(false));
        if (buttonBar != null)
            contentPane.add(buttonBar, FullScreenLayout.SOUTH);
        if (center != null)
            contentPane.add(center, FullScreenLayout.CENTER);

        // Full-screen windows usually have black backgrounds.
        Color background = Color.black;
        contentPane.setBackground(background);
        setBackground(center, background);

        class FullScreenListener
            implements ContainerListener, KeyListener, WindowStateListener
        {
            public void componentAdded(ContainerEvent event)
            {
                Component child = event.getChild();

                child.addKeyListener(this);
            }

            public void componentRemoved(ContainerEvent event)
            {
                Component child = event.getChild();

                child.removeKeyListener(this);
            }

            public void keyPressed(KeyEvent event)
            {
                if (!event.isConsumed()
                    && (event.getKeyCode() == KeyEvent.VK_ESCAPE))
                {
                    event.consume();
                    exitFullScreen(frame);
                }
            }

            public void keyReleased(KeyEvent event)
            {
            }

            public void keyTyped(KeyEvent event)
            {
            }

            public void windowStateChanged(WindowEvent event)
            {
                switch (event.getID())
                {
                case WindowEvent.WINDOW_CLOSED:
                case WindowEvent.WINDOW_DEACTIVATED:
                case WindowEvent.WINDOW_ICONIFIED:
                case WindowEvent.WINDOW_LOST_FOCUS:
                    exitFullScreen(frame);
                    break;
                }
            }
        }
        FullScreenListener listener = new FullScreenListener();

        // Exit on Escape.
        addKeyListener(frame, listener);
        // Activate the above features for the local and remote videos.
        if (center instanceof Container)
            ((Container) center).addContainerListener(listener);
        // Exit when the ""full screen"" looses its focus.
        frame.addWindowStateListener(listener);

        getGraphicsConfiguration().getDevice().setFullScreenWindow(frame);
        this.fullScreenWindow = frame;
    }",False,False,"The function of the method is to create a full-screen window with a black background, add components to the window, set up listeners for key events and window state changes, and set the full-screen window as the active window.",True,"The code defines a method called `enterFullScreen()` that creates a full-screen window with a black background and adds components to it. It also sets up listeners for key events and window state changes to handle exiting full-screen mode. Finally, it sets the created window as the full-screen window for the graphics configuration."
54,componentAdded(ContainerEvent),component added event ,Method,,,java.awt.event.ContainerEvent+getChild() java.awt.event.ContainerEvent+getChild() java.awt.Component+addKeyListener(KeyListener) java.awt.Component+addKeyListener(KeyListener),,173,6,1,,"public void componentAdded(ContainerEvent event)
            {
                Component child = event.getChild();

                child.addKeyListener(this);
            }",False,False,This method adds a key listener to a child component when it is added to a container.,False,The code is a method that is triggered when a component is added to a container. It retrieves the added component and adds a key listener to it.
55,componentRemoved(ContainerEvent),component removed event ,Method,,,java.awt.event.ContainerEvent+getChild() java.awt.event.ContainerEvent+getChild() java.awt.Component+removeKeyListener(KeyListener) java.awt.Component+removeKeyListener(KeyListener),,178,6,1,,"public void componentRemoved(ContainerEvent event)
            {
                Component child = event.getChild();

                child.removeKeyListener(this);
            }",False,False,This method is used to remove a key listener from a child component when it is removed from a container.,False,"The given code is a method named ""componentRemoved"" that is triggered when a component is removed from a container. It retrieves the child component that was removed from the event and removes a key listener associated with it."
56,keyPressed(KeyEvent),key pressed event ,Method,,,java.awt.event.InputEvent+isConsumed() java.awt.event.InputEvent+isConsumed() java.awt.event.KeyEvent+getKeyCode() java.awt.event.KeyEvent+getKeyCode() java.awt.event.InputEvent+consume() java.awt.event.InputEvent+consume() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+exitFullScreen(Window) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+exitFullScreen(Window),java.awt.event.KeyEvent+VK_ESCAPE,289,9,1,,"public void keyPressed(KeyEvent event)
            {
                if (!event.isConsumed()
                    && (event.getKeyCode() == KeyEvent.VK_ESCAPE))
                {
                    event.consume();
                    exitFullScreen(frame);
                }
            }",False,False,"The function of the method is to check if the ""Escape"" key is pressed and not consumed, and if so, consume the event and exit full screen mode.",False,"The code defines a method called ""keyPressed"" that takes a KeyEvent as a parameter. It checks if the event is not consumed and if the key code is for the ""Escape"" key. If both conditions are met, it consumes the event and calls the ""exitFullScreen"" function with the frame as a parameter."
57,keyReleased(KeyEvent),key released event ,Method,,,,,67,3,1,,"public void keyReleased(KeyEvent event)
            {
            }",False,False,This method is a keyReleased event handler. It is called when a key on the keyboard is released. The purpose of this method is not specified in the given code.,False,"The code contains a method named ""keyReleased"" which takes a KeyEvent object as a parameter. However, the method does not have any implementation or functionality specified within its body."
58,keyTyped(KeyEvent),key typed event ,Method,,,,,64,3,1,,"public void keyTyped(KeyEvent event)
            {
            }",False,False,This method is a placeholder for an event handler that is triggered when a key is typed. It does not perform any specific function and can be customized to perform a desired action when a key is typed.,False,"The code contains a method named ""keyTyped"" which takes a KeyEvent object as a parameter. However, the method does not have any implementation or functionality specified within its body."
59,windowStateChanged(WindowEvent),window state changed event ,Method,,,java.awt.AWTEvent+getID() java.awt.AWTEvent+getID() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+exitFullScreen(Window) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+exitFullScreen(Window),java.awt.event.WindowEvent+WINDOW_CLOSED java.awt.event.WindowEvent+WINDOW_DEACTIVATED java.awt.event.WindowEvent+WINDOW_ICONIFIED java.awt.event.WindowEvent+WINDOW_LOST_FOCUS,426,12,1,,"public void windowStateChanged(WindowEvent event)
            {
                switch (event.getID())
                {
                case WindowEvent.WINDOW_CLOSED:
                case WindowEvent.WINDOW_DEACTIVATED:
                case WindowEvent.WINDOW_ICONIFIED:
                case WindowEvent.WINDOW_LOST_FOCUS:
                    exitFullScreen(frame);
                    break;
                }
            }",False,False,"The function of the method is to handle window state changes. If the window is closed, deactivated, iconified, or loses focus, it calls the exitFullScreen() method with the frame as a parameter.",False,"The given code is a method named ""windowStateChanged"" that takes a WindowEvent as a parameter. It checks the ID of the event and if it matches any of the specified window states (WINDOW_CLOSED, WINDOW_DEACTIVATED, WINDOW_ICONIFIED, WINDOW_LOST_FOCUS), it calls the ""exitFullScreen"" function with the frame as an argument."
60,exitFullScreen(Window),exit full screen full screen window ,Method,keyPressed(KeyEvent) windowStateChanged(WindowEvent),,java.awt.Component+getGraphicsConfiguration() java.awt.Component+getGraphicsConfiguration() java.awt.GraphicsDevice+setFullScreenWindow(Window) java.awt.GraphicsConfiguration+getDevice() java.awt.GraphicsConfiguration+getDevice() java.awt.GraphicsDevice+setFullScreenWindow(Window) java.awt.Component+isVisible() java.awt.Component+isVisible() java.awt.Window+setVisible(boolean) java.awt.Window+setVisible(boolean) java.awt.Window+dispose() java.awt.Window+dispose(),net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+fullScreenWindow net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+fullScreenWindow net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+fullScreenWindow net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+fullScreenWindow,544,16,2,,"private void exitFullScreen(Window fullScreenWindow)
    {
        GraphicsConfiguration graphicsConfig = getGraphicsConfiguration();
        if (graphicsConfig != null)
            graphicsConfig.getDevice().setFullScreenWindow(null);

        if (fullScreenWindow != null)
        {
            if (fullScreenWindow.isVisible())
                fullScreenWindow.setVisible(false);
            fullScreenWindow.dispose();

            if (this.fullScreenWindow == fullScreenWindow)
                this.fullScreenWindow = null;
        }
    }",False,False,"This method is used to exit full-screen mode by setting the full-screen window to null, hiding and disposing the window, and updating the reference to the full-screen window if necessary.",True,The `exitFullScreen` method is used to exit full-screen mode by setting the full-screen window to null and disposing of it. It also updates the reference to the full-screen window if necessary.
61,"setBackground(Component,Color)",set background component background ,Method,"enterFullScreen() setBackground(Component,Color)",,"java.awt.Component+setBackground(Color) java.awt.Component+setBackground(Color) java.awt.Container+getComponents() java.awt.Container+getComponents() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+setBackground(Component,Color) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+setBackground(Component,Color)",,353,10,2,,"private void setBackground(Component component, Color background)
    {
        component.setBackground(background);
        if (component instanceof Container)
        {
            Component[] components = ((Container) component).getComponents();
            for (Component c : components)
                setBackground(c, background);
        }
    }",False,False,This method sets the background color of a given component and recursively sets the background color of all its child components if the component is a container.,True,The code defines a private method called `setBackground` that takes a `Component` and a `Color` as parameters. It sets the background color of the given component and recursively sets the background color of all its child components if it is a container.
62,"addKeyListener(Component,KeyListener)",add key listener component l ,Method,"addKeyListener(Component,KeyListener)",,"java.awt.Component+addKeyListener(KeyListener) java.awt.Component+addKeyListener(KeyListener) java.awt.Container+getComponents() java.awt.Container+getComponents() net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+addKeyListener(Component,KeyListener) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel+addKeyListener(Component,KeyListener)",,335,10,2,,"private void addKeyListener(Component component, KeyListener l)
    {
        component.addKeyListener(l);
        if (component instanceof Container)
        {
            Component[] components = ((Container) component).getComponents();
            for (Component c : components)
                addKeyListener(c, l);
        }
    }",False,False,The function of this method is to add a KeyListener to a given Component and its child components recursively if the given Component is a Container.,True,"The code defines a private method called ""addKeyListener"" that takes a Component and a KeyListener as parameters. It adds the KeyListener to the given Component and recursively adds the KeyListener to all the child components if the given Component is a Container."
63,PeerStatusPanel,peer status panel ,MemberClass,,,"net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.PeerStatusPanel+PeerStatusPanel(LayoutManager) javax.swing.JComponent+setBorder(Border) javax.swing.JComponent+setBorder(Border) javax.swing.BorderFactory+createEmptyBorder(int,int,int,int) javax.swing.BorderFactory+createEmptyBorder(int,int,int,int) net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.PeerStatusPanel+paintComponent(Graphics) javax.swing.JComponent+paintComponent(Graphics) java.awt.Graphics+create() java.awt.Graphics+create() net.java.sip.communicator.util.swing.AntialiasingManager+activateAntialiasing(Graphics) net.java.sip.communicator.util.swing.AntialiasingManager+activateAntialiasing(Graphics) java.awt.Graphics+setColor(Color) java.awt.Graphics+setColor(Color) java.awt.Graphics+fillRoundRect(int,int,int,int,int,int) java.awt.Graphics+fillRoundRect(int,int,int,int,int,int) javax.swing.JComponent+getWidth() javax.swing.JComponent+getWidth() javax.swing.JComponent+getHeight() javax.swing.JComponent+getHeight() java.awt.Graphics+dispose() java.awt.Graphics+dispose()",net.java.sip.communicator.impl.gui.main.call.CallPeerPanel.PeerStatusPanel+serialVersionUID java.awt.Color+DARK_GRAY,976,36,10,,"private static class PeerStatusPanel
        extends TransparentPanel
    {

        /*
         * Silence the serial warning. Though there isn't a plan to serialize
         * the instances of the class, there're no fields so the default
         * serialization routine will work.
         */
        private static final long serialVersionUID = 0L;

        public PeerStatusPanel(LayoutManager layout)
        {
            super(layout);
            this.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));
        }

        public void paintComponent(Graphics g)
        {
            super.paintComponent(g);

            g = g.create();

            try
            {
                AntialiasingManager.activateAntialiasing(g);

                g.setColor(Color.DARK_GRAY);
                g.fillRoundRect(0, 0, this.getWidth(), this.getHeight(), 20, 20);
            }
            finally
            {
                g.dispose();
            }
        }
    }",False,False,,False,
