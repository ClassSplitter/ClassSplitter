index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,mListeners,Field,,,,,77,1,0,,ArrayList<AsyncServerSocket> mListeners = new ArrayList<AsyncServerSocket>();,False
2,stop(),Method,,com.koushikdutta.async.test.HttpServerTests+tearDown() com.koushikdutta.async.test.MultipartTests+tearDown() com.koushikdutta.async.test.TimeoutTests+tearDown() com.koushikdutta.async.test.WebSocketTests+tearDown(),com.koushikdutta.async.AsyncServerSocket+stop() com.koushikdutta.async.AsyncServerSocket+stop(),com.koushikdutta.async.http.server.AsyncHttpServer+mListeners com.koushikdutta.async.http.server.AsyncHttpServer+mListeners,176,7,1,,"public void stop() {
        if (mListeners != null) {
            for (AsyncServerSocket listener: mListeners) {
                listener.stop();
            }
        }
    }",False
3,"onRequest(AsyncHttpServerRequest,AsyncHttpServerResponse)",Method,,,"com.koushikdutta.async.http.Headers+get(String) com.koushikdutta.async.http.server.AsyncHttpServerRequest+getHeaders() com.koushikdutta.async.http.server.AsyncHttpServerRequest+getHeaders() com.koushikdutta.async.http.Headers+get(String) java.lang.String+split(String) java.lang.String+split(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) java.lang.String+trim() java.lang.String+trim() java.lang.String+equalsIgnoreCase(String) java.lang.String+equalsIgnoreCase(String) com.koushikdutta.async.http.Headers+get(String) com.koushikdutta.async.http.server.AsyncHttpServerRequest+getHeaders() com.koushikdutta.async.http.server.AsyncHttpServerRequest+getHeaders() com.koushikdutta.async.http.Headers+get(String) com.koushikdutta.async.http.server.AsyncHttpServerResponse+code(int) com.koushikdutta.async.http.server.AsyncHttpServerResponse+code(int) com.koushikdutta.async.http.server.AsyncHttpServerResponse+end() com.koushikdutta.async.http.server.AsyncHttpServerResponse+end() com.koushikdutta.async.http.Headers+get(String) com.koushikdutta.async.http.server.AsyncHttpServerRequest+getHeaders() com.koushikdutta.async.http.server.AsyncHttpServerRequest+getHeaders() com.koushikdutta.async.http.Headers+get(String) android.text.TextUtils+equals(CharSequence,CharSequence) android.text.TextUtils+equals(CharSequence,CharSequence) com.koushikdutta.async.http.server.AsyncHttpServerResponse+code(int) com.koushikdutta.async.http.server.AsyncHttpServerResponse+code(int) com.koushikdutta.async.http.server.AsyncHttpServerResponse+end() com.koushikdutta.async.http.server.AsyncHttpServerResponse+end() com.koushikdutta.async.http.server.AsyncHttpServer.WebSocketRequestCallback+onConnected(WebSocket,AsyncHttpServerRequest) com.koushikdutta.async.http.server.AsyncHttpServer.WebSocketRequestCallback+onConnected(WebSocket,AsyncHttpServerRequest) com.koushikdutta.async.http.WebSocketImpl+WebSocketImpl(AsyncHttpServerRequest,AsyncHttpServerResponse) java.util.regex.Matcher+replaceAll(String) com.koushikdutta.async.http.server.AsyncHttpServerRequest+getMatcher() com.koushikdutta.async.http.server.AsyncHttpServerRequest+getMatcher() java.util.regex.Matcher+replaceAll(String) com.koushikdutta.async.http.server.AsyncHttpServer+getAssetStream(Context,String) com.koushikdutta.async.http.server.AsyncHttpServer+getAssetStream(Context,String) com.koushikdutta.async.http.server.AsyncHttpServerResponse+code(int) com.koushikdutta.async.http.server.AsyncHttpServerResponse+code(int) com.koushikdutta.async.http.server.AsyncHttpServerResponse+end() com.koushikdutta.async.http.server.AsyncHttpServerResponse+end() com.koushikdutta.async.http.Headers+set(String,String) com.koushikdutta.async.http.server.AsyncHttpServerResponse+getHeaders() com.koushikdutta.async.http.server.AsyncHttpServerResponse+getHeaders() com.koushikdutta.async.http.Headers+set(String,String) java.lang.String+valueOf(Object) java.lang.String+valueOf(Object) com.koushikdutta.async.http.server.AsyncHttpServerResponse+code(int) com.koushikdutta.async.http.server.AsyncHttpServerResponse+code(int) com.koushikdutta.async.http.Headers+add(String,String) com.koushikdutta.async.http.server.AsyncHttpServerResponse+getHeaders() com.koushikdutta.async.http.server.AsyncHttpServerResponse+getHeaders() com.koushikdutta.async.http.Headers+add(String,String) com.koushikdutta.async.http.server.AsyncHttpServer+getContentType(String) com.koushikdutta.async.http.server.AsyncHttpServer+getContentType(String) com.koushikdutta.async.Util+pump(InputStream,DataSink,CompletedCallback) com.koushikdutta.async.Util+pump(InputStream,DataSink,CompletedCallback) +() +onCompleted(Exception) java.util.regex.Matcher+replaceAll(String) com.koushikdutta.async.http.server.AsyncHttpServerRequest+getMatcher() com.koushikdutta.async.http.server.AsyncHttpServerRequest+getMatcher() java.util.regex.Matcher+replaceAll(String) com.koushikdutta.async.http.server.AsyncHttpServer+getAssetStream(Context,String) com.koushikdutta.async.http.server.AsyncHttpServer+getAssetStream(Context,String) com.koushikdutta.async.http.server.AsyncHttpServerResponse+code(int) com.koushikdutta.async.http.server.AsyncHttpServerResponse+code(int) com.koushikdutta.async.http.server.AsyncHttpServerResponse+end() com.koushikdutta.async.http.server.AsyncHttpServerResponse+end() com.koushikdutta.async.util.StreamUtility+closeQuietly(Closeable[]) com.koushikdutta.async.util.StreamUtility+closeQuietly(Closeable[]) com.koushikdutta.async.http.Headers+set(String,String) com.koushikdutta.async.http.server.AsyncHttpServerResponse+getHeaders() com.koushikdutta.async.http.server.AsyncHttpServerResponse+getHeaders() com.koushikdutta.async.http.Headers+set(String,String) java.lang.String+valueOf(Object) java.lang.String+valueOf(Object) com.koushikdutta.async.http.server.AsyncHttpServerResponse+code(int) com.koushikdutta.async.http.server.AsyncHttpServerResponse+code(int) com.koushikdutta.async.http.Headers+add(String,String) com.koushikdutta.async.http.server.AsyncHttpServerResponse+getHeaders() com.koushikdutta.async.http.server.AsyncHttpServerResponse+getHeaders() com.koushikdutta.async.http.Headers+add(String,String) com.koushikdutta.async.http.server.AsyncHttpServer+getContentType(String) com.koushikdutta.async.http.server.AsyncHttpServer+getContentType(String) com.koushikdutta.async.http.server.AsyncHttpServerResponse+writeHead() com.koushikdutta.async.http.server.AsyncHttpServerResponse+writeHead() com.koushikdutta.async.http.server.AsyncHttpServerResponse+end() com.koushikdutta.async.http.server.AsyncHttpServerResponse+end()",android.util.Pair+second android.util.Pair+second android.util.Pair+first android.util.Pair+second android.util.Pair+second android.util.Pair+first,123,3,4,,"protected boolean onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse response) {
        return false;
    }",False
4,"onRequest(HttpServerRequestCallback,AsyncHttpServerRequest,AsyncHttpServerResponse)",Method,,,"com.koushikdutta.async.http.server.HttpServerRequestCallback+onRequest(AsyncHttpServerRequest,AsyncHttpServerResponse) com.koushikdutta.async.http.server.HttpServerRequestCallback+onRequest(AsyncHttpServerRequest,AsyncHttpServerResponse)",,215,4,4,,"protected void onRequest(HttpServerRequestCallback callback, AsyncHttpServerRequest request, AsyncHttpServerResponse response) {
        if (callback != null)
            callback.onRequest(request, response);
    }",False
5,onUnknownBody(Headers),Method,,,com.koushikdutta.async.http.server.UnknownRequestBody+UnknownRequestBody(String) com.koushikdutta.async.http.Headers+get(String) com.koushikdutta.async.http.Headers+get(String) com.koushikdutta.async.http.server.AsyncHttpServer+onUnknownBody(Headers) com.koushikdutta.async.http.server.AsyncHttpServer+onUnknownBody(Headers),,137,3,4,,"protected AsyncHttpRequestBody onUnknownBody(Headers headers) {
        return new UnknownRequestBody(headers.get(""Content-Type""));
    }",False
6,mListenCallback,Field,,,,,6471,158,0,,"ListenCallback mListenCallback = new ListenCallback() {
        @Override
        public void onAccepted(final AsyncSocket socket) {
            AsyncHttpServerRequestImpl req = new AsyncHttpServerRequestImpl() {
                HttpServerRequestCallback match;
                String fullPath;
                String path;
                boolean responseComplete;
                boolean requestComplete;
                AsyncHttpServerResponseImpl res;
                boolean hasContinued;

                @Override
                protected AsyncHttpRequestBody onUnknownBody(Headers headers) {
                    return AsyncHttpServer.this.onUnknownBody(headers);
                }

                @Override
                protected void onHeadersReceived() {
                    Headers headers = getHeaders();

                    // should the negotiation of 100 continue be here, or in the request impl?
                    // probably here, so AsyncResponse can negotiate a 100 continue.
                    if (!hasContinued && ""100-continue"".equals(headers.get(""Expect""))) {
                        pause();
//                        System.out.println(""continuing..."");
                        Util.writeAll(mSocket, ""HTTP/1.1 100 Continue\r\n\r\n"".getBytes(), new CompletedCallback() {
                            @Override
                            public void onCompleted(Exception ex) {
                                resume();
                                if (ex != null) {
                                    report(ex);
                                    return;
                                }
                                hasContinued = true;
                                onHeadersReceived();
                            }
                        });
                        return;
                    }
//                    System.out.println(headers.toHeaderString());
                    
                    String statusLine = getStatusLine();
                    String[] parts = statusLine.split("" "");
                    fullPath = parts[1];
                    path = fullPath.split(""\\?"")[0];
                    method = parts[0];
                    synchronized (mActions) {
                        ArrayList<Pair> pairs = mActions.get(method);
                        if (pairs != null) {
                            for (Pair p: pairs) {
                                Matcher m = p.regex.matcher(path);
                                if (m.matches()) {
                                    mMatcher = m;
                                    match = p.callback;
                                    break;
                                }
                            }
                        }
                    }
                    res = new AsyncHttpServerResponseImpl(socket, this) {
                        @Override
                        protected void report(Exception e) {
                            super.report(e);
                            if (e != null) {
                                socket.setDataCallback(new NullDataCallback());
                                socket.setEndCallback(new NullCompletedCallback());
                                socket.close();
                            }
                        }

                        @Override
                        protected void onEnd() {
                            super.onEnd();
                            mSocket.setEndCallback(null);
                            responseComplete = true;
                            // reuse the socket for a subsequent request.
                            handleOnCompleted();
                        }
                    };
                    
                    boolean handled = onRequest(this, res);

                    if (match == null && !handled) {
                        res.code(404);
                        res.end();
                        return;
                    }

                    if (!getBody().readFullyOnRequest()) {
                        onRequest(match, this, res);
                    }
                    else if (requestComplete) {
                        onRequest(match, this, res);
                    }
                }

                @Override
                public void onCompleted(Exception e) {
                    // if the protocol was switched off http, ignore this request/response.
                    if (res.code() == 101)
                        return;
                    requestComplete = true;
                    super.onCompleted(e);
                    // no http pipelining, gc trashing if the socket dies
                    // while the request is being sent and is paused or something
                    mSocket.setDataCallback(new NullDataCallback() {
                        @Override
                        public void onDataAvailable(DataEmitter emitter, ByteBufferList bb) {
                            super.onDataAvailable(emitter, bb);
                            mSocket.close();
                        }
                    });
                    handleOnCompleted();

                    if (getBody().readFullyOnRequest()) {
                        onRequest(match, this, res);
                    }
                }
                
                private void handleOnCompleted() {
                    if (requestComplete && responseComplete) {
                        if (HttpUtil.isKeepAlive(Protocol.HTTP_1_1, getHeaders())) {
                            onAccepted(socket);
                        }
                        else {
                            socket.close();
                        }
                    }
                }

                @Override
                public String getPath() {
                    return path;
                }

                @Override
                public Multimap getQuery() {
                    String[] parts = fullPath.split(""\\?"", 2);
                    if (parts.length < 2)
                        return new Multimap();
                    return Multimap.parseQuery(parts[1]);
                }
            };
            req.setSocket(socket);
            socket.resume();
        }

        @Override
        public void onCompleted(Exception error) {
            report(error);
        }

        @Override
        public void onListening(AsyncServerSocket socket) {
            mListeners.add(socket);
        }
    };",False
7,"listen(AsyncServer,int)",Method,listen(int),com.koushikdutta.async.test.TimeoutTests+setUp(),"com.koushikdutta.async.AsyncServer+listen(InetAddress,int,ListenCallback) com.koushikdutta.async.AsyncServer+listen(InetAddress,int,ListenCallback)",com.koushikdutta.async.http.server.AsyncHttpServer+mListenCallback,128,3,1,,"public AsyncServerSocket listen(AsyncServer server, int port) {
        return server.listen(null, port, mListenCallback);
    }",False
8,report(Exception),Method,,,com.koushikdutta.async.callback.CompletedCallback+onCompleted(Exception) com.koushikdutta.async.callback.CompletedCallback+onCompleted(Exception),com.koushikdutta.async.http.server.AsyncHttpServer+mCompletedCallback com.koushikdutta.async.http.server.AsyncHttpServer+mCompletedCallback,129,4,2,,"private void report(Exception ex) {
        if (mCompletedCallback != null)
            mCompletedCallback.onCompleted(ex);
    }",False
9,listen(int),Method,,com.koushikdutta.async.test.RedirectTests+setUp(),"com.koushikdutta.async.http.server.AsyncHttpServer+listen(AsyncServer,int) com.koushikdutta.async.http.server.AsyncHttpServer+listen(AsyncServer,int) com.koushikdutta.async.AsyncServer+getDefault() com.koushikdutta.async.AsyncServer+getDefault()",,104,3,1,,"public AsyncServerSocket listen(int port) {
        return listen(AsyncServer.getDefault(), port);
    }",False
10,"listenSecure(int,SSLContext)",Method,,com.koushikdutta.async.test.SSLTests+testKeys(),"com.koushikdutta.async.AsyncServer+listen(InetAddress,int,ListenCallback) com.koushikdutta.async.AsyncServer+getDefault() com.koushikdutta.async.AsyncServer+getDefault() com.koushikdutta.async.AsyncServer+listen(InetAddress,int,ListenCallback) +() +onAccepted(AsyncSocket)",,1001,25,1,,"public void listenSecure(final int port, final SSLContext sslContext) {
        AsyncServer.getDefault().listen(null, port, new ListenCallback() {
            @Override
            public void onAccepted(AsyncSocket socket) {
                AsyncSSLSocketWrapper.handshake(socket, null, port, sslContext.createSSLEngine(), null, null, false,
                new AsyncSSLSocketWrapper.HandshakeCallback() {
                    @Override
                    public void onHandshakeCompleted(Exception e, AsyncSSLSocket socket) {
                        if (socket != null)
                            mListenCallback.onAccepted(socket);
                    }
                });
            }

            @Override
            public void onListening(AsyncServerSocket socket) {
                mListenCallback.onListening(socket);
            }

            @Override
            public void onCompleted(Exception ex) {
                mListenCallback.onCompleted(ex);
            }
        });
    }",False
11,getListenCallback(),Method,,,,com.koushikdutta.async.http.server.AsyncHttpServer+mListenCallback,81,3,1,,"public ListenCallback getListenCallback() {
        return mListenCallback;
    }",False
12,mCompletedCallback,Field,,,,,37,1,0,,CompletedCallback mCompletedCallback;,False
13,setErrorCallback(CompletedCallback),Method,,com.koushikdutta.async.test.HttpServerTests+setUp() com.koushikdutta.async.test.MultipartTests+setUp() com.koushikdutta.async.test.WebSocketTests+setUp(),,com.koushikdutta.async.http.server.AsyncHttpServer+mCompletedCallback,111,3,1,,"public void setErrorCallback(CompletedCallback callback) {
        mCompletedCallback = callback;        
    }",False
14,getErrorCallback(),Method,,,,com.koushikdutta.async.http.server.AsyncHttpServer+mCompletedCallback,86,3,1,,"public CompletedCallback getErrorCallback() {
        return mCompletedCallback;
    }",False
15,Pair,MemberClass,,,,com.koushikdutta.async.http.server.AsyncHttpServer.Pair+regex com.koushikdutta.async.http.server.AsyncHttpServer.Pair+callback,100,4,10,,"private static class Pair {
        Pattern regex;
        HttpServerRequestCallback callback;
    }",True
16,mActions,Field,,,,,93,1,16,,"final Hashtable<String, ArrayList<Pair>> mActions = new Hashtable<String, ArrayList<Pair>>();",True
17,"removeAction(String,String)",Method,,,java.util.Hashtable+get(Object) java.util.Hashtable+get(Object) java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) java.lang.String+equals(Object) java.lang.String+equals(Object) java.util.regex.Pattern+toString() java.util.regex.Pattern+toString() java.util.ArrayList+remove(int) java.util.ArrayList+remove(int),com.koushikdutta.async.http.server.AsyncHttpServer+mActions com.koushikdutta.async.http.server.AsyncHttpServer+mActions com.koushikdutta.async.http.server.AsyncHttpServer.Pair+regex,463,14,1,,"public void removeAction(String action, String regex) {
        synchronized (mActions) {
            ArrayList<Pair> pairs = mActions.get(action);
            if (pairs == null)
                return;
            for (int i = 0; i < pairs.size(); i++) {
                Pair p = pairs.get(i);
                if (regex.equals(p.regex.toString())) {
                    pairs.remove(i);
                    return;
                }
            }
        }
    }",True
18,"addAction(String,String,HttpServerRequestCallback)",Method,"get(String,HttpServerRequestCallback) post(String,HttpServerRequestCallback) directory(Context,String,String)",,"com.koushikdutta.async.http.server.AsyncHttpServer.Pair+Pair() java.util.regex.Pattern+compile(String) java.util.regex.Pattern+compile(String) java.util.Hashtable+get(Object) java.util.Hashtable+get(Object) java.util.ArrayList+ArrayList() java.util.Hashtable+put(K,V) java.util.Hashtable+put(K,V) java.util.ArrayList+add(E) java.util.ArrayList+add(E)",com.koushikdutta.async.http.server.AsyncHttpServer.Pair+regex com.koushikdutta.async.http.server.AsyncHttpServer.Pair+callback com.koushikdutta.async.http.server.AsyncHttpServer+mActions com.koushikdutta.async.http.server.AsyncHttpServer+mActions com.koushikdutta.async.http.server.AsyncHttpServer+mActions,494,14,1,,"public void addAction(String action, String regex, HttpServerRequestCallback callback) {
        Pair p = new Pair();
        p.regex = Pattern.compile(""^"" + regex);
        p.callback = callback;
        
        synchronized (mActions) {
            ArrayList<Pair> pairs = mActions.get(action);
            if (pairs == null) {
                pairs = new ArrayList<AsyncHttpServer.Pair>();
                mActions.put(action, pairs);
            }
            pairs.add(p);
        }
    }",True
19,WebSocketRequestCallback,MemberClass,,,"com.koushikdutta.async.http.server.AsyncHttpServer.WebSocketRequestCallback+onConnected(WebSocket,AsyncHttpServerRequest)",,142,3,9,,"public static interface WebSocketRequestCallback {
        public void onConnected(WebSocket webSocket, AsyncHttpServerRequest request);
    }",True
20,"websocket(String,WebSocketRequestCallback)",Method,,com.koushikdutta.async.test.IssueWithWebSocketFuturesTests+testWebSocketFutureWithHandshakeFailureCallback(),"com.koushikdutta.async.http.server.AsyncHttpServer+websocket(String,String,WebSocketRequestCallback) com.koushikdutta.async.http.server.AsyncHttpServer+websocket(String,String,WebSocketRequestCallback)",,126,3,1,,"public void websocket(String regex, final WebSocketRequestCallback callback) {
        websocket(regex, null, callback);
    }",True
21,"websocket(String,String,WebSocketRequestCallback)",Method,"websocket(String,WebSocketRequestCallback)",,"com.koushikdutta.async.http.server.AsyncHttpServer+get(String,HttpServerRequestCallback) com.koushikdutta.async.http.server.AsyncHttpServer+get(String,HttpServerRequestCallback) +() +onRequest(AsyncHttpServerRequest,AsyncHttpServerResponse)",,1405,30,1,,"public void websocket(String regex, final String protocol, final WebSocketRequestCallback callback) {
        get(regex, new HttpServerRequestCallback() {
            @Override
            public void onRequest(final AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
                boolean hasUpgrade = false;
                String connection = request.getHeaders().get(""Connection"");
                if (connection != null) {
                    String[] connections = connection.split("","");
                    for (String c: connections) {
                        if (""Upgrade"".equalsIgnoreCase(c.trim())) {
                            hasUpgrade = true;
                            break;
                        }
                    }
                }
                if (!""websocket"".equalsIgnoreCase(request.getHeaders().get(""Upgrade"")) || !hasUpgrade) {
                    response.code(404);
                    response.end();
                    return;
                }
                String peerProtocol = request.getHeaders().get(""Sec-WebSocket-Protocol"");
                if (!TextUtils.equals(protocol, peerProtocol)) {
                    response.code(404);
                    response.end();
                    return;
                }
                callback.onConnected(new WebSocketImpl(request, response), request);
            }
        });
    }",True
22,"get(String,HttpServerRequestCallback)",Method,"websocket(String,String,WebSocketRequestCallback)",com.koushikdutta.async.test.CacheTests+testMaxAgePrivate() com.koushikdutta.async.test.Issue59+testIssue() com.koushikdutta.async.test.RedirectTests+setUp() com.koushikdutta.async.test.SSLTests+testKeys() com.koushikdutta.async.test.TimeoutTests+TimeoutTests(),"com.koushikdutta.async.http.server.AsyncHttpServer+addAction(String,String,HttpServerRequestCallback) com.koushikdutta.async.http.server.AsyncHttpServer+addAction(String,String,HttpServerRequestCallback)",com.koushikdutta.async.http.AsyncHttpGet+METHOD,130,3,1,,"public void get(String regex, HttpServerRequestCallback callback) {
        addAction(AsyncHttpGet.METHOD, regex, callback);
    }",True
23,"post(String,HttpServerRequestCallback)",Method,,,"com.koushikdutta.async.http.server.AsyncHttpServer+addAction(String,String,HttpServerRequestCallback) com.koushikdutta.async.http.server.AsyncHttpServer+addAction(String,String,HttpServerRequestCallback)",com.koushikdutta.async.http.AsyncHttpPost+METHOD,132,3,1,,"public void post(String regex, HttpServerRequestCallback callback) {
        addAction(AsyncHttpPost.METHOD, regex, callback);
    }",True
24,"getAssetStream(Context,String)",Method,,,"android.content.Context+getAssets() android.content.Context+getAssets() android.content.res.AssetManager+open(String) android.content.res.AssetManager+open(String) android.util.Pair+Pair(F,S) java.io.InputStream+available() java.io.InputStream+available()",,380,10,9,,"public static android.util.Pair<Integer, InputStream> getAssetStream(final Context context, String asset) {
        AssetManager am = context.getAssets();
        try {
            InputStream is = am.open(asset);
            return new android.util.Pair<Integer, InputStream>(is.available(), is);
        }
        catch (IOException e) {
            return null;
        }
    }",True
25,mContentTypes,Field,,,,,81,1,8,,"static Hashtable<String, String> mContentTypes = new Hashtable<String, String>();",True
26,getContentType(String),Method,,com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl+sendFile(File),com.koushikdutta.async.http.server.AsyncHttpServer+tryGetContentType(String) com.koushikdutta.async.http.server.AsyncHttpServer+tryGetContentType(String),,183,6,9,,"public static String getContentType(String path) {
        String type = tryGetContentType(path);
        if (type != null)
            return type;
        return ""text/plain"";
    }",True
27,tryGetContentType(String),Method,getContentType(String),,java.lang.String+lastIndexOf(String) java.lang.String+lastIndexOf(String) java.lang.String+substring(int) java.lang.String+substring(int) java.util.Hashtable+get(Object) java.util.Hashtable+get(Object),com.koushikdutta.async.http.server.AsyncHttpServer+mContentTypes,311,10,9,,"public static String tryGetContentType(String path) {
        int index = path.lastIndexOf(""."");
        if (index != -1) {
            String e = path.substring(index + 1);
            String ct = mContentTypes.get(e);
            if (ct != null)
                return ct;
        }
        return null;
    }",True
28,"directory(Context,String,String)",Method,,,"android.content.Context+getApplicationContext() android.content.Context+getApplicationContext() com.koushikdutta.async.http.server.AsyncHttpServer+addAction(String,String,HttpServerRequestCallback) com.koushikdutta.async.http.server.AsyncHttpServer+addAction(String,String,HttpServerRequestCallback) +() +onRequest(AsyncHttpServerRequest,AsyncHttpServerResponse)",com.koushikdutta.async.http.AsyncHttpGet+METHOD,2285,45,1,,"public void directory(Context context, String regex, final String assetPath) {
        final Context _context = context.getApplicationContext();
        addAction(AsyncHttpGet.METHOD, regex, new HttpServerRequestCallback() {
            @Override
            public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
                String path = request.getMatcher().replaceAll("""");
                android.util.Pair<Integer, InputStream> pair = getAssetStream(_context, assetPath + path);
                if (pair == null || pair.second == null) {
                    response.code(404);
                    response.end();
                    return;
                }
                final InputStream is = pair.second;
                response.getHeaders().set(""Content-Length"", String.valueOf(pair.first));
                response.code(200);
                response.getHeaders().add(""Content-Type"", getContentType(assetPath + path));
                Util.pump(is, response, new CompletedCallback() {
                    @Override
                    public void onCompleted(Exception ex) {
                        response.end();
                        StreamUtility.closeQuietly(is);
                    }
                });
            }
        });
        addAction(AsyncHttpHead.METHOD, regex, new HttpServerRequestCallback() {
            @Override
            public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
                String path = request.getMatcher().replaceAll("""");
                android.util.Pair<Integer, InputStream> pair = getAssetStream(_context, assetPath + path);
                if (pair == null || pair.second == null) {
                    response.code(404);
                    response.end();
                    return;
                }
                final InputStream is = pair.second;
                StreamUtility.closeQuietly(is);
                response.getHeaders().set(""Content-Length"", String.valueOf(pair.first));
                response.code(200);
                response.getHeaders().add(""Content-Type"", getContentType(assetPath + path));
                response.writeHead();
                response.end();
            }
        });
    }",True
29,"directory(String,File)",Method,,,"com.koushikdutta.async.http.server.AsyncHttpServer+directory(String,File,boolean) com.koushikdutta.async.http.server.AsyncHttpServer+directory(String,File,boolean)",,109,3,1,,"public void directory(String regex, final File directory) {
        directory(regex, directory, false);
    }",True
30,"directory(String,File,boolean)",Method,"directory(String,File)",,,,2173,54,1,,"public void directory(String regex, final File directory, final boolean list) {
        assert directory.isDirectory();
        addAction(""GET"", regex, new HttpServerRequestCallback() {
            @Override
            public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
                String path = request.getMatcher().replaceAll("""");
                File file = new File(directory, path);
                
                if (file.isDirectory() && list) {
                    ArrayList<File> dirs = new ArrayList<File>();
                    ArrayList<File> files = new ArrayList<File>();
                    for (File f: file.listFiles()) {
                        if (f.isDirectory())
                            dirs.add(f);
                        else
                            files.add(f);
                    }
                    
                    Comparator<File> c = new Comparator<File>() {
                        @Override
                        public int compare(File lhs, File rhs) {
                            return lhs.getName().compareTo(rhs.getName());
                        }
                    };
                    
                    Collections.sort(dirs, c);
                    Collections.sort(files, c);
                    
                    files.addAll(0, dirs);
                    
                    return;
                }
                if (!file.isFile()) {
                    response.code(404);
                    response.end();
                    return;
                }
                try {
                    FileInputStream is = new FileInputStream(file);
                    response.code(200);
                    Util.pump(is, response, new CompletedCallback() {
                        @Override
                        public void onCompleted(Exception ex) {
                            response.end();
                        }
                    });
                }
                catch (FileNotFoundException ex) {
                    response.code(404);
                    response.end();
                }
            }
        });
    }",True
31,mCodes,Field,,,,,84,1,10,,"private static Hashtable<Integer, String> mCodes = new Hashtable<Integer, String>();",False
32,getResponseCodeDescription(int),Method,,com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl+initFirstWrite() com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl+toString(),java.util.Hashtable+get(Object) java.util.Hashtable+get(Object),com.koushikdutta.async.http.server.AsyncHttpServer+mCodes,173,6,9,,"public static String getResponseCodeDescription(int code) {
        String d = mCodes.get(code);
        if (d == null)
            return ""Unknown"";
        return d;
    }",False
