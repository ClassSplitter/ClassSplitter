index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,BLOCK_COMPARISON_SIZE,Field,,,,,53,1,26,,private static final int BLOCK_COMPARISON_SIZE = 512;,False
2,"rangeCheckUnknown(long,long)",Method,"rangeInputStream(InputStream,long,long,long) rangeReader(Reader,long,long,long)",,"org.h2.message.DbException+getInvalidValueException(String,Object) org.h2.message.DbException+getInvalidValueException(String,Object) org.h2.message.DbException+getInvalidValueException(String,Object) org.h2.message.DbException+getInvalidValueException(String,Object)",,322,8,10,,"private static void rangeCheckUnknown(long zeroBasedOffset, long length) {
        if (zeroBasedOffset < 0) {
            throw DbException.getInvalidValueException(""offset"", zeroBasedOffset + 1);
        }
        if (length < 0) {
            throw DbException.getInvalidValueException(""length"", length);
        }
    }",False
3,"rangeInputStream(InputStream,long,long,long)",Method,"getInputStream(long,long)",,"org.h2.value.Value+rangeCheck(long,long,long) org.h2.value.Value+rangeCheck(long,long,long) org.h2.value.ValueLob+rangeCheckUnknown(long,long) org.h2.value.ValueLob+rangeCheckUnknown(long,long) org.h2.store.RangeInputStream+RangeInputStream(InputStream,long,long) org.h2.message.DbException+getInvalidValueException(String,Object) org.h2.message.DbException+getInvalidValueException(String,Object)",,889,22,10,"/** 
 * Create an input stream that is s subset of the given stream.
 * @param inputStream the source input stream
 * @param oneBasedOffset the offset (1 means no offset)
 * @param length the length of the result, in bytes
 * @param dataSize the length of the input, in bytes
 * @return the smaller input stream
 */
","/**
     * Create an input stream that is s subset of the given stream.
     *
     * @param inputStream the source input stream
     * @param oneBasedOffset the offset (1 means no offset)
     * @param length the length of the result, in bytes
     * @param dataSize the length of the input, in bytes
     * @return the smaller input stream
     */
    private static InputStream rangeInputStream(InputStream inputStream, long oneBasedOffset, long length,
            long dataSize) {
        if (dataSize > 0) {
            rangeCheck(oneBasedOffset - 1, length, dataSize);
        } else {
            rangeCheckUnknown(oneBasedOffset - 1, length);
        }
        try {
            return new RangeInputStream(inputStream, oneBasedOffset - 1, length);
        } catch (IOException e) {
            throw DbException.getInvalidValueException(""offset"", oneBasedOffset);
        }
    }",False
4,"rangeReader(Reader,long,long,long)",Method,"getReader(long,long)",,"org.h2.value.Value+rangeCheck(long,long,long) org.h2.value.Value+rangeCheck(long,long,long) org.h2.value.ValueLob+rangeCheckUnknown(long,long) org.h2.value.ValueLob+rangeCheckUnknown(long,long) org.h2.store.RangeReader+RangeReader(Reader,long,long) org.h2.message.DbException+getInvalidValueException(String,Object) org.h2.message.DbException+getInvalidValueException(String,Object)",,828,21,10,"/** 
 * Create a reader that is s subset of the given reader.
 * @param reader the input reader
 * @param oneBasedOffset the offset (1 means no offset)
 * @param length the length of the result, in bytes
 * @param dataSize the length of the input, in bytes
 * @return the smaller input stream
 */
","/**
     * Create a reader that is s subset of the given reader.
     *
     * @param reader the input reader
     * @param oneBasedOffset the offset (1 means no offset)
     * @param length the length of the result, in bytes
     * @param dataSize the length of the input, in bytes
     * @return the smaller input stream
     */
    private static Reader rangeReader(Reader reader, long oneBasedOffset, long length, long dataSize) {
        if (dataSize > 0) {
            rangeCheck(oneBasedOffset - 1, length, dataSize);
        } else {
            rangeCheckUnknown(oneBasedOffset - 1, length);
        }
        try {
            return new RangeReader(reader, oneBasedOffset - 1, length);
        } catch (IOException e) {
            throw DbException.getInvalidValueException(""offset"", oneBasedOffset);
        }
    }",False
5,"compare(ValueLob,ValueLob)",Method,"compareTypeSafe(Value,CompareMode,CastDataProvider)",,,,3504,81,10,"/** 
 * Compares LOBs of the same type.
 * @param v1 first LOB value
 * @param v2 second LOB value
 * @return result of comparison
 */
","/**
     * Compares LOBs of the same type.
     *
     * @param v1 first LOB value
     * @param v2 second LOB value
     * @return result of comparison
     */
    private static int compare(ValueLob v1, ValueLob v2) {
        int valueType = v1.getValueType();
        assert valueType == v2.getValueType();
        byte[] small1 = v1.getSmall(), small2 = v2.getSmall();
        if (small1 != null && small2 != null) {
            if (valueType == Value.BLOB) {
                return Bits.compareNotNullSigned(small1, small2);
            } else {
                return Integer.signum(v1.getString().compareTo(v2.getString()));
            }
        }
        long minPrec = Math.min(v1.getType().getPrecision(), v2.getType().getPrecision());
        if (valueType == Value.BLOB) {
            try (InputStream is1 = v1.getInputStream();
                    InputStream is2 = v2.getInputStream()) {
                byte[] buf1 = new byte[BLOCK_COMPARISON_SIZE];
                byte[] buf2 = new byte[BLOCK_COMPARISON_SIZE];
                for (; minPrec >= BLOCK_COMPARISON_SIZE; minPrec -= BLOCK_COMPARISON_SIZE) {
                    if (IOUtils.readFully(is1, buf1, BLOCK_COMPARISON_SIZE) != BLOCK_COMPARISON_SIZE
                            || IOUtils.readFully(is2, buf2, BLOCK_COMPARISON_SIZE) != BLOCK_COMPARISON_SIZE) {
                        throw DbException.getUnsupportedException(""Invalid LOB"");
                    }
                    int cmp = Bits.compareNotNullSigned(buf1, buf2);
                    if (cmp != 0) {
                        return cmp;
                    }
                }
                for (;;) {
                    int c1 = is1.read(), c2 = is2.read();
                    if (c1 < 0) {
                        return c2 < 0 ? 0 : -1;
                    }
                    if (c2 < 0) {
                        return 1;
                    }
                    if (c1 != c2) {
                        return Integer.compare(c1, c2);
                    }
                }
            } catch (IOException ex) {
                throw DbException.convert(ex);
            }
        } else {
            try (Reader reader1 = v1.getReader();
                    Reader reader2 = v2.getReader()) {
                char[] buf1 = new char[BLOCK_COMPARISON_SIZE];
                char[] buf2 = new char[BLOCK_COMPARISON_SIZE];
                for (; minPrec >= BLOCK_COMPARISON_SIZE; minPrec -= BLOCK_COMPARISON_SIZE) {
                    if (IOUtils.readFully(reader1, buf1, BLOCK_COMPARISON_SIZE) != BLOCK_COMPARISON_SIZE
                            || IOUtils.readFully(reader2, buf2, BLOCK_COMPARISON_SIZE) != BLOCK_COMPARISON_SIZE) {
                        throw DbException.getUnsupportedException(""Invalid LOB"");
                    }
                    int cmp = Bits.compareNotNull(buf1, buf2);
                    if (cmp != 0) {
                        return cmp;
                    }
                }
                for (;;) {
                    int c1 = reader1.read(), c2 = reader2.read();
                    if (c1 < 0) {
                        return c2 < 0 ? 0 : -1;
                    }
                    if (c2 < 0) {
                        return 1;
                    }
                    if (c1 != c2) {
                        return Integer.compare(c1, c2);
                    }
                }
            } catch (IOException ex) {
                throw DbException.convert(ex);
            }
        }
    }",False
6,valueType,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,87,4,18,"/** 
 * the value type (Value.BLOB or CLOB)
 */
","/**
     * the value type (Value.BLOB or CLOB)
     */
    private final int valueType;",False
7,type,Field,getType() getType(),,,,22,1,2,,private TypeInfo type;,False
8,tableId,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,166,5,18,"/** 
 * If the LOB is managed by the one the LobStorageBackend classes, these are the unique key inside that storage.
 */
","/**
     * If the LOB is managed by the one the LobStorageBackend classes, these are the
     * unique key inside that storage.
     */
    private final int tableId;",True
9,lobId,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,25,1,18,,private final long lobId;,True
10,hmac,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,244,6,18,"/** 
 * If this is a client-side ValueLobDb object returned by a ResultSet, the hmac acts a security cookie that the client can send back to the server to ask for data related to this LOB.
 */
","/**
     * If this is a client-side ValueLobDb object returned by a ResultSet, the
     * hmac acts a security cookie that the client can send back to the server
     * to ask for data related to this LOB.
     */
    private final byte[] hmac;",True
11,small,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,131,5,18,"/** 
 * If the LOB is below the inline size, we just store/load it directly here.
 */
","/**
     * If the LOB is below the inline size, we just store/load it directly
     * here.
     */
    private final byte[] small;",True
12,handler,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,28,1,2,,private DataHandler handler;,True
13,precision,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long) convertPrecision(long)",,,,143,5,18,"/** 
 * For a BLOB, precision is length in bytes. For a CLOB, precision is length in chars.
 */
","/**
     * For a BLOB, precision is length in bytes.
     * For a CLOB, precision is length in chars.
     */
    private final long precision;",True
14,fileName,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,164,5,18,"/** 
 * If the LOB is a temporary LOB being managed by a temporary ResultSet, it is stored in a temporary file.
 */
","/**
     * If the LOB is a temporary LOB being managed by a temporary ResultSet,
     * it is stored in a temporary file.
     */
    private final String fileName;",True
15,tempFile,Field,"ValueLob(int,DataHandler,int,long,byte[],long) ValueLob(int,byte[],long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,,,33,1,18,,private final FileStore tempFile;,True
16,hash,Field,,,,,99,4,2,"/** 
 * Cache the hashCode because it can be expensive to compute.
 */
","/**
     * Cache the hashCode because it can be expensive to compute.
     */
    private int hash;",False
17,isRecoveryReference,Field,setRecoveryReference(boolean),,,,36,1,2,,private boolean isRecoveryReference;,True
18,"ValueLob(int,DataHandler,int,long,byte[],long)",Method,,,,org.h2.value.ValueLob+valueType org.h2.value.ValueLob+valueType org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler org.h2.value.ValueLob+tableId org.h2.value.ValueLob+tableId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+hmac org.h2.value.ValueLob+hmac org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+small org.h2.value.ValueLob+small org.h2.value.ValueLob+fileName org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile,393,12,2,,"private ValueLob(int type, DataHandler handler, int tableId, long lobId,
            byte[] hmac, long precision) {
        this.valueType = type;
        this.handler = handler;
        this.tableId = tableId;
        this.lobId = lobId;
        this.hmac = hmac;
        this.precision = precision;
        this.small = null;
        this.fileName = null;
        this.tempFile = null;
    }",True
19,"ValueLob(int,byte[],long)",Method,,,,org.h2.value.ValueLob+valueType org.h2.value.ValueLob+valueType org.h2.value.ValueLob+small org.h2.value.ValueLob+small org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+lobId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+hmac org.h2.value.ValueLob+hmac org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler org.h2.value.ValueLob+fileName org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tableId org.h2.value.ValueLob+tableId,324,11,2,,"private ValueLob(int type, byte[] small, long precision) {
        this.valueType = type;
        this.small = small;
        this.precision = precision;
        this.lobId = 0;
        this.hmac = null;
        this.handler = null;
        this.fileName = null;
        this.tempFile = null;
        this.tableId = 0;
    }",True
20,"ValueLob(DataHandler,Reader,long)",Method,,,"org.h2.value.ValueLob+createTempLobFileName(DataHandler) org.h2.value.ValueLob+createTempLobFileName(DataHandler) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.FileStore+autoDelete() org.h2.store.FileStore+autoDelete() org.h2.store.FileStoreOutputStream+FileStoreOutputStream(FileStore,DataHandler,String) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.util.IOUtils+readFully(Reader,char[],int) org.h2.util.IOUtils+readFully(Reader,char[],int) java.lang.String+getBytes(Charset) java.lang.String+String(char[],int,int) java.lang.String+getBytes(Charset) org.h2.store.FileStoreOutputStream+write(byte[]) org.h2.store.FileStoreOutputStream+write(byte[])",org.h2.value.ValueLob+valueType org.h2.value.ValueLob+valueType org.h2.value.Value+CLOB org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler org.h2.value.ValueLob+small org.h2.value.ValueLob+small org.h2.value.ValueLob+lobId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+hmac org.h2.value.ValueLob+hmac org.h2.value.ValueLob+fileName org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.engine.Constants+IO_BUFFER_SIZE java.nio.charset.StandardCharsets+UTF_8 org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+tableId org.h2.value.ValueLob+tableId,1126,31,2,"/** 
 * Create a CLOB in a temporary file.
 */
","/**
     * Create a CLOB in a temporary file.
     */
    private ValueLob(DataHandler handler, Reader in, long remaining)
            throws IOException {
        this.valueType = Value.CLOB;
        this.handler = handler;
        this.small = null;
        this.lobId = 0;
        this.hmac = null;
        this.fileName = createTempLobFileName(handler);
        this.tempFile = handler.openFile(fileName, ""rw"", false);
        this.tempFile.autoDelete();

        long tmpPrecision = 0;
        try (FileStoreOutputStream out = new FileStoreOutputStream(tempFile, null, null)) {
            char[] buff = new char[Constants.IO_BUFFER_SIZE];
            while (true) {
                int len = getBufferSize(handler, false, remaining);
                len = IOUtils.readFully(in, buff, len);
                if (len == 0) {
                    break;
                }
                byte[] data = new String(buff, 0, len).getBytes(StandardCharsets.UTF_8);
                out.write(data);
                tmpPrecision += len;
            }
        }
        this.precision = tmpPrecision;
        this.tableId = 0;
    }",True
21,"ValueLob(DataHandler,byte[],int,InputStream,long)",Method,,,"org.h2.value.ValueLob+createTempLobFileName(DataHandler) org.h2.value.ValueLob+createTempLobFileName(DataHandler) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.FileStore+autoDelete() org.h2.store.FileStore+autoDelete() org.h2.store.DataHandler+getLobCompressionAlgorithm(int) org.h2.store.DataHandler+getLobCompressionAlgorithm(int) org.h2.store.FileStoreOutputStream+FileStoreOutputStream(FileStore,DataHandler,String) org.h2.store.FileStoreOutputStream+write(byte[],int,int) org.h2.store.FileStoreOutputStream+write(byte[],int,int) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.util.IOUtils+readFully(InputStream,byte[],int) org.h2.util.IOUtils+readFully(InputStream,byte[],int)",org.h2.value.ValueLob+valueType org.h2.value.ValueLob+valueType org.h2.value.Value+BLOB org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler org.h2.value.ValueLob+small org.h2.value.ValueLob+small org.h2.value.ValueLob+lobId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+hmac org.h2.value.ValueLob+hmac org.h2.value.ValueLob+fileName org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.value.Value+BLOB org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+tableId org.h2.value.ValueLob+tableId,1208,33,2,"/** 
 * Create a BLOB in a temporary file.
 */
","/**
     * Create a BLOB in a temporary file.
     */
    private ValueLob(DataHandler handler, byte[] buff, int len, InputStream in,
            long remaining) throws IOException {
        this.valueType = Value.BLOB;
        this.handler = handler;
        this.small = null;
        this.lobId = 0;
        this.hmac = null;
        this.fileName = createTempLobFileName(handler);
        this.tempFile = handler.openFile(fileName, ""rw"", false);
        this.tempFile.autoDelete();
        long tmpPrecision = 0;
        boolean compress = handler.getLobCompressionAlgorithm(Value.BLOB) != null;
        try (FileStoreOutputStream out = new FileStoreOutputStream(tempFile, null, null)) {
            while (true) {
                tmpPrecision += len;
                out.write(buff, 0, len);
                remaining -= len;
                if (remaining <= 0) {
                    break;
                }
                len = getBufferSize(handler, compress, remaining);
                len = IOUtils.readFully(in, buff, len);
                if (len <= 0) {
                    break;
                }
            }
        }
        this.precision = tmpPrecision;
        this.tableId = 0;
    }",True
22,createTempLobFileName(DataHandler),Method,"ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long)",,"org.h2.store.DataHandler+getDatabasePath() org.h2.store.DataHandler+getDatabasePath() java.lang.String+isEmpty() java.lang.String+isEmpty() org.h2.store.fs.FileUtils+createTempFile(String,String,boolean) org.h2.store.fs.FileUtils+createTempFile(String,String,boolean)",org.h2.engine.SysProperties+PREFIX_TEMP_FILE org.h2.engine.Constants+SUFFIX_TEMP_FILE,324,8,10,,"private static String createTempLobFileName(DataHandler handler)
            throws IOException {
        String path = handler.getDatabasePath();
        if (path.isEmpty()) {
            path = SysProperties.PREFIX_TEMP_FILE;
        }
        return FileUtils.createTempFile(path, Constants.SUFFIX_TEMP_FILE, true);
    }",True
23,"create(int,DataHandler,int,long,byte[],long)",Method,,"org.h2.mvstore.db.LobStorageMap+createClob(Reader,long) org.h2.mvstore.db.LobStorageMap+createLob(InputStream,int) org.h2.mvstore.db.LobStorageMap+copyLob(ValueLob,int,long) org.h2.pagestore.db.LobStorageBackend+registerLob(int,long,int,long,long) org.h2.pagestore.db.LobStorageBackend+copyLob(ValueLob,int,long) org.h2.pagestore.db.LobStorageBackend+copyLob(ValueLob,int,long) org.h2.server.TcpServerThread+process() org.h2.tools.Recover+readBlobDb(Connection,long,long) org.h2.tools.Recover+readClobDb(Connection,long,long) org.h2.value.Transfer+readValue() org.h2.value.Transfer+readValue()","org.h2.value.ValueLob+ValueLob(int,DataHandler,int,long,byte[],long)",,551,15,9,"/** 
 * Create a LOB value.
 * @param type the type (Value.BLOB or CLOB)
 * @param handler the data handler
 * @param tableId the table id
 * @param id the lob id
 * @param hmac the message authentication code
 * @param precision the precision (number of bytes / characters)
 * @return the value
 */
","/**
     * Create a LOB value.
     *
     * @param type the type (Value.BLOB or CLOB)
     * @param handler the data handler
     * @param tableId the table id
     * @param id the lob id
     * @param hmac the message authentication code
     * @param precision the precision (number of bytes / characters)
     * @return the value
     */
    public static ValueLob create(int type, DataHandler handler,
            int tableId, long id, byte[] hmac, long precision) {
        return new ValueLob(type, handler, tableId, id, hmac, precision);
    }",True
24,isLinkedToTable(),Method,,org.h2.engine.Session+removeAtCommit(ValueLob) org.h2.engine.Session+removeAtCommitStop(ValueLob) org.h2.result.RowList+readRow(Data),,org.h2.value.ValueLob+small org.h2.value.ValueLob+tableId,272,9,1,"/** 
 * Check if this value is linked to a specific table. For values that are kept fully in memory, this method returns false.
 * @return true if it is
 */
","/**
     * Check if this value is linked to a specific table. For values that are
     * kept fully in memory, this method returns false.
     *
     * @return true if it is
     */
    public boolean isLinkedToTable() {
        return small == null && tableId >= 0;
    }",False
25,isStored(),Method,,org.h2.value.Transfer+writeValue(Value) org.h2.value.Transfer+writeValue(Value),,org.h2.value.ValueLob+small org.h2.value.ValueLob+fileName,83,3,1,,"public boolean isStored() {
        return small == null && fileName == null;
    }",False
26,remove(),Method,"copy(DataHandler,int)","org.h2.command.CommandRemote+close() org.h2.engine.Session+setVariable(String,Value) org.h2.engine.Session+endTransaction(boolean) org.h2.expression.ParameterRemote+setValue(Value,boolean)",org.h2.store.FileStore+stopAutoDelete() org.h2.store.FileStore+stopAutoDelete() org.h2.store.DataHandler+getLobSyncObject() org.h2.store.DataHandler+getLobSyncObject() org.h2.store.fs.FileUtils+delete(String) org.h2.store.fs.FileUtils+delete(String) org.h2.store.LobStorageInterface+removeLob(ValueLob) org.h2.store.DataHandler+getLobStorage() org.h2.store.DataHandler+getLobStorage() org.h2.store.LobStorageInterface+removeLob(ValueLob),org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+tempFile org.h2.value.ValueLob+handler org.h2.value.ValueLob+fileName org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler,627,19,1,"/** 
 * Remove the underlying resource, if any. For values that are kept fully in memory this method has no effect.
 */
","/**
     * Remove the underlying resource, if any. For values that are kept fully in
     * memory this method has no effect.
     */
    public void remove() {
        if (fileName != null) {
            if (tempFile != null) {
                tempFile.stopAutoDelete();
            }
            // synchronize on the database, to avoid concurrent temp file
            // creation / deletion / backup
            synchronized (handler.getLobSyncObject()) {
                FileUtils.delete(fileName);
            }
        }
        if (handler != null) {
            handler.getLobStorage().removeLob(this);
        }
    }",True
27,"copy(DataHandler,int)",Method,"copy(DataHandler,int)","org.h2.engine.Session+setVariable(String,Value) org.h2.mvstore.db.MVPrimaryIndex+add(Session,Row)","org.h2.store.LobStorageInterface+copyLob(ValueLob,int,long) org.h2.store.DataHandler+getLobStorage() org.h2.store.DataHandler+getLobStorage() org.h2.store.LobStorageInterface+copyLob(ValueLob,int,long) org.h2.store.DataHandler+getMaxLengthInplaceLob() org.h2.store.DataHandler+getMaxLengthInplaceLob() org.h2.store.DataHandler+getLobStorage() org.h2.store.DataHandler+getLobStorage() org.h2.store.LobStorageInterface+createBlob(InputStream,long) org.h2.store.LobStorageInterface+createBlob(InputStream,long) org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream() org.h2.store.LobStorageInterface+createClob(Reader,long) org.h2.store.LobStorageInterface+createClob(Reader,long) org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+copy(DataHandler,int) org.h2.value.ValueLob+copy(DataHandler,int) org.h2.value.ValueLob+remove() org.h2.value.ValueLob+remove()",org.h2.value.ValueLob+small org.h2.value.ValueLob+handler org.h2.value.ValueLob+precision org.h2.value.ValueLob+small org.h2.value.ValueLob+valueType org.h2.value.Value+BLOB org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision,950,25,1,"/** 
 * Copy a large value, to be used in the given table. For values that are kept fully in memory this method has no effect.
 * @param database the data handler
 * @param tableId the table where this object is used
 * @return the new value or itself
 */
","/**
     * Copy a large value, to be used in the given table. For values that are
     * kept fully in memory this method has no effect.
     *
     * @param database the data handler
     * @param tableId the table where this object is used
     * @return the new value or itself
     */
    public ValueLob copy(DataHandler database, int tableId) {
        if (small == null) {
            return handler.getLobStorage().copyLob(this, tableId, precision);
        } else if (small.length > database.getMaxLengthInplaceLob()) {
            LobStorageInterface s = database.getLobStorage();
            ValueLob v;
            if (valueType == Value.BLOB) {
                v = s.createBlob(getInputStream(), precision);
            } else {
                v = s.createClob(getReader(), precision);
            }
            ValueLob v2 = v.copy(database, tableId);
            v.remove();
            return v2;
        }
        return this;
    }",False
28,getTableId(),Method,,"org.h2.engine.Session+addTemporaryLob(ValueLob) org.h2.mvstore.db.LobStorageMap+createClob(Reader,long) org.h2.mvstore.db.LobStorageMap+copyLob(ValueLob,int,long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+removeLob(ValueLob) org.h2.result.RowList+writeRow(Data,Row) org.h2.result.RowList+readRow(Data) org.h2.value.Transfer+writeValue(Value) org.h2.value.Transfer+writeValue(Value)",,org.h2.value.ValueLob+tableId,151,8,1,"/** 
 * Get the current table id of this lob.
 * @return the table id
 */
","/**
     * Get the current table id of this lob.
     *
     * @return the table id
     */
    public int getTableId() {
        return tableId;
    }",True
29,getType(),Method,,"org.h2.mvstore.db.LobStorageMap+copyLob(ValueLob,int,long) org.h2.tools.Recover+getSQL(StringBuilder,String,Value) org.h2.value.Transfer+writeValue(Value) org.h2.value.Transfer+writeValue(Value)","org.h2.value.TypeInfo+TypeInfo(int,long,int,int,ExtTypeInfo) org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long)",org.h2.value.ValueLob+type org.h2.value.ValueLob+type org.h2.value.ValueLob+type org.h2.value.ValueLob+type org.h2.value.ValueLob+valueType org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision,256,8,1,,"@Override
    public TypeInfo getType() {
        TypeInfo type = this.type;
        if (type == null) {
            this.type = type = new TypeInfo(valueType, precision, 0, MathUtils.convertLongToInt(precision), null);
        }
        return type;
    }",False
30,getValueType(),Method,,"org.h2.mvstore.db.LobStorageMap+copyLob(ValueLob,int,long) org.h2.pagestore.db.LobStorageBackend+copyLob(ValueLob,int,long) org.h2.tools.Recover+getSQL(StringBuilder,String,Value) org.h2.util.JdbcUtils+setLob(PreparedStatement,int,ValueLob)",,org.h2.value.ValueLob+valueType,73,4,1,,"@Override
    public int getValueType() {
        return valueType;
    }",False
31,getString(),Method,"getSQL(StringBuilder,int) getSQL(StringBuilder,int)",,"java.lang.String+String(byte[],Charset) org.h2.util.IOUtils+readStringAndClose(Reader,int) org.h2.util.IOUtils+readStringAndClose(Reader,int) org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getReader() org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+toString() org.h2.value.ValueLob+toString()",org.h2.value.ValueLob+precision java.lang.Integer+MAX_VALUE org.h2.value.ValueLob+precision java.lang.Integer+MAX_VALUE org.h2.value.ValueLob+precision org.h2.value.ValueLob+small org.h2.value.ValueLob+small java.nio.charset.StandardCharsets+UTF_8,469,13,1,,"@Override
    public String getString() {
        int len = precision > Integer.MAX_VALUE || precision == 0 ?
                Integer.MAX_VALUE : (int) precision;
        try {
            if (small != null) {
                return new String(small, StandardCharsets.UTF_8);
            }
            return IOUtils.readStringAndClose(getReader(), len);
        } catch (IOException e) {
            throw DbException.convertIOException(e, toString());
        }
    }",False
32,getBytes(),Method,,,"org.h2.util.Utils+cloneByteArray(byte[]) org.h2.util.Utils+cloneByteArray(byte[]) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream() org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+toString() org.h2.value.ValueLob+toString()",org.h2.value.ValueLob+small org.h2.value.ValueLob+small java.lang.Integer+MAX_VALUE,339,11,1,,"@Override
    public byte[] getBytes() {
        if (small != null) {
            return Utils.cloneByteArray(small);
        }
        try {
            return IOUtils.readBytesAndClose(getInputStream(), Integer.MAX_VALUE);
        } catch (IOException e) {
            throw DbException.convertIOException(e, toString());
        }
    }",False
33,getBytesNoCopy(),Method,"hashCode() getSQL(StringBuilder,int) getSQL(StringBuilder,int)","org.h2.value.Value+convertToBlob(TypeInfo,int,Object)","org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream() org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+toString() org.h2.value.ValueLob+toString()",org.h2.value.ValueLob+small org.h2.value.ValueLob+small java.lang.Integer+MAX_VALUE,323,11,1,,"@Override
    public byte[] getBytesNoCopy() {
        if (small != null) {
            return small;
        }
        try {
            return IOUtils.readBytesAndClose(getInputStream(), Integer.MAX_VALUE);
        } catch (IOException e) {
            throw DbException.convertIOException(e, toString());
        }
    }",False
34,hashCode(),Method,equals(Object) equals(Object),,org.h2.util.Utils+getByteArrayHash(byte[]) org.h2.util.Utils+getByteArrayHash(byte[]) org.h2.value.ValueLob+getBytesNoCopy() org.h2.value.ValueLob+getBytesNoCopy(),org.h2.value.ValueLob+hash org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+hash org.h2.value.ValueLob+hash,395,12,1,,"@Override
    public int hashCode() {
        if (hash == 0) {
            if (precision > 4096) {
                // TODO: should calculate the hash code when saving, and store
                // it in the database file
                return (int) (precision ^ (precision >>> 32));
            }
            hash = Utils.getByteArrayHash(getBytesNoCopy());
        }
        return hash;
    }",False
35,"compareTypeSafe(Value,CompareMode,CastDataProvider)",Method,equals(Object),,"org.h2.value.ValueLob+compare(ValueLob,ValueLob) org.h2.value.ValueLob+compare(ValueLob,ValueLob)",org.h2.value.ValueLob+lobId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+small org.h2.value.ValueLob+small,331,11,1,,"@Override
    public int compareTypeSafe(Value v, CompareMode mode, CastDataProvider provider) {
        if (v == this) {
            return 0;
        }
        ValueLob v2 = (ValueLob) v;
        if (lobId == v2.lobId && small == null && v2.small == null) {
            return 0;
        }
        return compare(this, v2);
    }",False
36,getObject(),Method,,,org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream(),org.h2.value.ValueLob+valueType org.h2.value.Value+CLOB,161,7,1,,"@Override
    public Object getObject() {
        if (valueType == Value.CLOB) {
            return getReader();
        }
        return getInputStream();
    }",False
37,getReader(),Method,"copy(DataHandler,int) getString() getObject() getReader(long,long) convertPrecision(long) convertPrecision(long)","org.h2.util.JdbcUtils+setLob(PreparedStatement,int,ValueLob) org.h2.value.Value+convertToClob(TypeInfo,int,Object)",org.h2.util.IOUtils+getBufferedReader(InputStream) org.h2.util.IOUtils+getBufferedReader(InputStream) org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream(),,107,4,1,,"@Override
    public Reader getReader() {
        return IOUtils.getBufferedReader(getInputStream());
    }",False
38,"getReader(long,long)",Method,,,"org.h2.value.ValueLob+rangeReader(Reader,long,long,long) org.h2.value.ValueLob+rangeReader(Reader,long,long,long) org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getReader()",org.h2.value.ValueLob+valueType org.h2.value.Value+CLOB org.h2.value.ValueLob+precision,186,4,1,,"@Override
    public Reader getReader(long oneBasedOffset, long length) {
        return rangeReader(getReader(), oneBasedOffset, length, valueType == Value.CLOB ? precision : -1);
    }",False
39,getInputStream(),Method,"copy(DataHandler,int) getBytes() getBytesNoCopy() getObject() getReader() convertPrecision(long) convertPrecision(long)","org.h2.util.JdbcUtils+setLob(PreparedStatement,int,ValueLob) org.h2.value.Value+convertToBlob(TypeInfo,int,Object)","java.io.ByteArrayInputStream+ByteArrayInputStream(byte[]) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.DataHandler+openFile(String,String,boolean) java.io.BufferedInputStream+BufferedInputStream(InputStream,int) org.h2.store.FileStoreInputStream+FileStoreInputStream(FileStore,DataHandler,boolean,boolean) org.h2.store.LobStorageInterface+getInputStream(ValueLob,byte[],long) org.h2.store.DataHandler+getLobStorage() org.h2.store.DataHandler+getLobStorage() org.h2.store.LobStorageInterface+getInputStream(ValueLob,byte[],long) org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+toString() org.h2.value.ValueLob+toString()",org.h2.value.ValueLob+small org.h2.value.ValueLob+small org.h2.value.ValueLob+fileName org.h2.value.ValueLob+handler org.h2.value.ValueLob+fileName org.h2.engine.SysProperties+lobCloseBetweenReads org.h2.value.ValueLob+handler org.h2.engine.Constants+IO_BUFFER_SIZE org.h2.value.ValueLob+valueType org.h2.value.Value+BLOB org.h2.value.ValueLob+precision org.h2.value.ValueLob+handler org.h2.value.ValueLob+hmac,752,17,1,,"@Override
    public InputStream getInputStream() {
        if (small != null) {
            return new ByteArrayInputStream(small);
        } else if (fileName != null) {
            FileStore store = handler.openFile(fileName, ""r"", true);
            boolean alwaysClose = SysProperties.lobCloseBetweenReads;
            return new BufferedInputStream(new FileStoreInputStream(store,
                    handler, false, alwaysClose), Constants.IO_BUFFER_SIZE);
        }
        long byteCount = (valueType == Value.BLOB) ? precision : -1;
        try {
            return handler.getLobStorage().getInputStream(this, hmac, byteCount);
        } catch (IOException e) {
            throw DbException.convertIOException(e, toString());
        }
    }",False
40,"getInputStream(long,long)",Method,,,"org.h2.value.Value+getInputStream(long,long) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.DataHandler+openFile(String,String,boolean) org.h2.store.FileStore+length() org.h2.store.FileStore+length() java.io.BufferedInputStream+BufferedInputStream(InputStream,int) org.h2.store.FileStoreInputStream+FileStoreInputStream(FileStore,DataHandler,boolean,boolean) org.h2.store.LobStorageInterface+getInputStream(ValueLob,byte[],long) org.h2.store.DataHandler+getLobStorage() org.h2.store.DataHandler+getLobStorage() org.h2.store.LobStorageInterface+getInputStream(ValueLob,byte[],long) org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+toString() org.h2.value.ValueLob+toString() org.h2.value.ValueLob+rangeInputStream(InputStream,long,long,long) org.h2.value.ValueLob+rangeInputStream(InputStream,long,long,long)",org.h2.value.ValueLob+small org.h2.value.ValueLob+fileName org.h2.value.ValueLob+handler org.h2.value.ValueLob+fileName org.h2.engine.SysProperties+lobCloseBetweenReads org.h2.value.ValueLob+handler org.h2.engine.Constants+IO_BUFFER_SIZE org.h2.value.ValueLob+valueType org.h2.value.Value+BLOB org.h2.value.ValueLob+precision org.h2.value.ValueLob+handler org.h2.value.ValueLob+hmac,1025,22,1,,"@Override
    public InputStream getInputStream(long oneBasedOffset, long length) {
        long byteCount;
        InputStream inputStream;
        if (small != null) {
            return super.getInputStream(oneBasedOffset, length);
        } else if (fileName != null) {
            FileStore store = handler.openFile(fileName, ""r"", true);
            boolean alwaysClose = SysProperties.lobCloseBetweenReads;
            byteCount = store.length();
            inputStream = new BufferedInputStream(new FileStoreInputStream(store,
                    handler, false, alwaysClose), Constants.IO_BUFFER_SIZE);
        } else {
            byteCount = (valueType == Value.BLOB) ? precision : -1;
            try {
                inputStream = handler.getLobStorage().getInputStream(this, hmac, byteCount);
            } catch (IOException e) {
                throw DbException.convertIOException(e, toString());
            }
        }
        return rangeInputStream(inputStream, oneBasedOffset, length, byteCount);
    }",False
41,"getSQL(StringBuilder,int)",Method,,,"java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(int) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) org.h2.util.StringUtils+quoteStringSQL(StringBuilder,String) org.h2.util.StringUtils+quoteStringSQL(StringBuilder,String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.h2.value.ValueLob+getString() org.h2.value.ValueLob+getString() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) org.h2.util.StringUtils+quoteStringSQL(StringBuilder,String) org.h2.util.StringUtils+quoteStringSQL(StringBuilder,String) org.h2.value.ValueLob+getString() org.h2.value.ValueLob+getString() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) org.h2.util.StringUtils+convertBytesToHex(StringBuilder,byte[]) org.h2.util.StringUtils+convertBytesToHex(StringBuilder,byte[]) org.h2.value.ValueLob+getBytesNoCopy() org.h2.value.ValueLob+getBytesNoCopy() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(long) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(char) org.h2.util.StringUtils+convertBytesToHex(StringBuilder,byte[]) org.h2.util.StringUtils+convertBytesToHex(StringBuilder,byte[]) org.h2.value.ValueLob+getBytesNoCopy() org.h2.value.ValueLob+getBytesNoCopy() java.lang.StringBuilder+append(char)",org.h2.util.HasSQL+REPLACE_LOBS_FOR_TRACE org.h2.value.ValueLob+small org.h2.value.ValueLob+precision org.h2.engine.SysProperties+MAX_TRACE_DATA_LENGTH org.h2.value.ValueLob+valueType org.h2.value.Value+CLOB org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+tableId org.h2.value.ValueLob+lobId org.h2.value.ValueLob+valueType org.h2.value.Value+CLOB org.h2.util.HasSQL+REPLACE_LOBS_FOR_TRACE org.h2.util.HasSQL+NO_CASTS org.h2.value.ValueLob+precision org.h2.util.HasSQL+REPLACE_LOBS_FOR_TRACE org.h2.util.HasSQL+NO_CASTS org.h2.value.ValueLob+precision,1423,30,1,,"@Override
    public StringBuilder getSQL(StringBuilder builder, int sqlFlags) {
        if ((sqlFlags & REPLACE_LOBS_FOR_TRACE) != 0
                && (small == null || precision > SysProperties.MAX_TRACE_DATA_LENGTH)) {
            if (valueType == Value.CLOB) {
                builder.append(""SPACE("").append(precision);
            } else {
                builder.append(""CAST(REPEAT('00', "").append(precision).append("") AS BINARY"");
            }
            builder.append("" /* table: "").append(tableId).append("" id: "").append(lobId).append("" */)"");
        }
        if (valueType == Value.CLOB) {
            if ((sqlFlags & (REPLACE_LOBS_FOR_TRACE | NO_CASTS)) == 0) {
                StringUtils.quoteStringSQL(builder.append(""CAST(""), getString()).append("" AS CLOB("").append(precision)
                        .append(""))"");
            } else {
                StringUtils.quoteStringSQL(builder, getString());
            }
        } else {
            if ((sqlFlags & (REPLACE_LOBS_FOR_TRACE | NO_CASTS)) == 0) {
                builder.append(""CAST(X'"");
                StringUtils.convertBytesToHex(builder, getBytesNoCopy()).append(""' AS BLOB("").append(precision)
                        .append(""))"");
            } else {
                builder.append(""X'"");
                StringUtils.convertBytesToHex(builder, getBytesNoCopy()).append('\'');
            }
        }
        return builder;
    }",False
42,getPrecision(),Method,,"org.h2.util.JdbcUtils+setLob(PreparedStatement,int,ValueLob) org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToClob(TypeInfo,int,Object)",,org.h2.value.ValueLob+precision,142,8,1,"/** 
 * Returns the precision.
 * @return the precision
 */
","/**
     * Returns the precision.
     *
     * @return the precision
     */
    public long getPrecision() {
        return precision;
    }",False
43,getSmall(),Method,,"org.h2.result.RowList+writeRow(Data,Row) org.h2.tools.Recover+getSQL(StringBuilder,String,Value) org.h2.value.Value+convertToClob(TypeInfo,int,Object)",,org.h2.value.ValueLob+small,148,8,1,"/** 
 * Get the data if this a small lob value.
 * @return the data
 */
","/**
     * Get the data if this a small lob value.
     *
     * @return the data
     */
    public byte[] getSmall() {
        return small;
    }",True
44,getDataHandler(),Method,,"org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToClob(TypeInfo,int,Object)",,org.h2.value.ValueLob+handler,172,8,1,"/** 
 * Returns the data handler.
 * @return the data handler, or {@code null}
 */
","/**
     * Returns the data handler.
     *
     * @return the data handler, or {@code null}
     */
    public DataHandler getDataHandler() {
        return handler;
    }",True
45,equals(Object),Method,,,"org.h2.value.ValueLob+hashCode() org.h2.value.ValueLob+hashCode() org.h2.value.ValueLob+hashCode() org.h2.value.ValueLob+hashCode() org.h2.value.ValueLob+compareTypeSafe(Value,CompareMode,CastDataProvider) org.h2.value.ValueLob+compareTypeSafe(Value,CompareMode,CastDataProvider)",,308,9,1,,"@Override
    public boolean equals(Object other) {
        if (!(other instanceof ValueLob))
            return false;
        ValueLob otherLob = (ValueLob) other;
        if (hashCode() != otherLob.hashCode())
            return false;
        return compareTypeSafe((Value) other, null, null) == 0;
    }",False
46,getMemory(),Method,,,,org.h2.value.ValueLob+small org.h2.value.ValueLob+small,291,12,1,,"@Override
    public int getMemory() {
        if (small != null) {
            /*
             * Java 11 with -XX:-UseCompressedOops
             * 0 bytes: 120 bytes
             * 1 byte: 128 bytes
             */
            return small.length + 127;
        }
        return 140;
    }",False
47,copyToTemp(),Method,,"org.h2.result.RowList+writeRow(Data,Row)",,,215,9,1,"/** 
 * Create an independent copy of this temporary value. The file will not be deleted automatically.
 * @return the value
 */
","/**
     * Create an independent copy of this temporary value.
     * The file will not be deleted automatically.
     *
     * @return the value
     */
    public ValueLob copyToTemp() {
        return this;
    }",False
48,copyToResult(),Method,,org.h2.result.LocalResult+cloneLobs(Value[]),"org.h2.store.DataHandler+getLobStorage() org.h2.store.DataHandler+getLobStorage() org.h2.store.LobStorageInterface+isReadOnly() org.h2.store.LobStorageInterface+isReadOnly() org.h2.store.LobStorageInterface+copyLob(ValueLob,int,long) org.h2.store.LobStorageInterface+copyLob(ValueLob,int,long)",org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler org.h2.store.LobStorageFrontend+TABLE_RESULT org.h2.value.ValueLob+precision,463,16,1,"/** 
 * Create an independent copy of this value, that will be bound to a result.
 * @return the value (this for small objects)
 */
","/**
     * Create an independent copy of this value,
     * that will be bound to a result.
     *
     * @return the value (this for small objects)
     */
    public ValueLob copyToResult() {
        if (handler == null) {
            return this;
        }
        LobStorageInterface s = handler.getLobStorage();
        if (s.isReadOnly()) {
            return this;
        }
        return s.copyLob(this, LobStorageFrontend.TABLE_RESULT, precision);
    }",False
49,getLobId(),Method,,"org.h2.mvstore.db.LobStorageMap+createClob(Reader,long) org.h2.mvstore.db.LobStorageMap+copyLob(ValueLob,int,long) org.h2.mvstore.db.LobStorageMap+copyLob(ValueLob,int,long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+getInputStream(ValueLob,byte[],long) org.h2.mvstore.db.LobStorageMap+removeLob(ValueLob) org.h2.pagestore.db.LobStorageBackend+removeLob(ValueLob) org.h2.pagestore.db.LobStorageBackend+getInputStream(ValueLob,byte[],long) org.h2.pagestore.db.LobStorageBackend+copyLob(ValueLob,int,long) org.h2.store.LobStorageInterface+LobStorageRemoteInputStream(DataHandler,ValueLob,byte[],long) org.h2.tools.Recover+getSQL(StringBuilder,String,Value) org.h2.value.Transfer+writeValue(Value) org.h2.value.Transfer+writeValue(Value) org.h2.value.Transfer+writeValue(Value) org.h2.value.Transfer+writeValue(Value)",,org.h2.value.ValueLob+lobId,52,3,1,,"public long getLobId() {
        return lobId;
    }",True
50,toString(),Method,"getString() getBytes() getBytesNoCopy() getInputStream() getInputStream(long,long)",org.h2.engine.Session+removeAtCommit(ValueLob) org.h2.engine.Session+removeAtCommitStop(ValueLob),,org.h2.value.ValueLob+fileName org.h2.value.ValueLob+tableId org.h2.value.ValueLob+lobId,122,4,1,,"@Override
    public String toString() {
        return ""lob: "" + fileName + "" table: "" + tableId + "" id: "" + lobId;
    }",True
51,"createTempClob(Reader,long,DataHandler)",Method,convertPrecision(long),"org.h2.store.LobStorageFrontend+createClob(Reader,long)","org.h2.store.RangeReader+RangeReader(Reader,long,long) org.h2.message.DbException+convert(Throwable) org.h2.message.DbException+convert(Throwable) java.io.BufferedReader+BufferedReader(Reader,int) org.h2.store.DataHandler+getLobCompressionAlgorithm(int) org.h2.store.DataHandler+getLobCompressionAlgorithm(int) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.util.IOUtils+readStringAndClose(Reader,int) org.h2.util.IOUtils+readStringAndClose(Reader,int) java.lang.String+toCharArray() java.lang.String+toCharArray() java.io.BufferedReader+mark(int) java.io.BufferedReader+mark(int) org.h2.util.IOUtils+readFully(Reader,char[],int) org.h2.util.IOUtils+readFully(Reader,char[],int) org.h2.store.DataHandler+getMaxLengthInplaceLob() org.h2.store.DataHandler+getMaxLengthInplaceLob() java.lang.String+getBytes(Charset) java.lang.String+String(char[],int,int) java.lang.String+getBytes(Charset) org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.value.ValueLob+createSmallLob(int,byte[],long) java.io.BufferedReader+reset() java.io.BufferedReader+reset() org.h2.value.ValueLob+ValueLob(DataHandler,Reader,long) org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String)",org.h2.engine.Constants+IO_BUFFER_SIZE org.h2.value.Value+CLOB java.lang.Long+MAX_VALUE java.lang.Integer+MAX_VALUE java.nio.charset.StandardCharsets+UTF_8 org.h2.value.Value+CLOB,2022,52,9,"/** 
 * Create a temporary CLOB value from a stream.
 * @param in the reader
 * @param length the number of characters to read, or -1 for no limit
 * @param handler the data handler
 * @return the lob value
 */
","/**
     * Create a temporary CLOB value from a stream.
     *
     * @param in the reader
     * @param length the number of characters to read, or -1 for no limit
     * @param handler the data handler
     * @return the lob value
     */
    public static ValueLob createTempClob(Reader in, long length,
            DataHandler handler) {
        if (length >= 0) {
            // Otherwise BufferedReader may try to read more data than needed and that
            // blocks the network level
            try {
                in = new RangeReader(in, 0, length);
            } catch (IOException e) {
                throw DbException.convert(e);
            }
        }
        BufferedReader reader;
        if (in instanceof BufferedReader) {
            reader = (BufferedReader) in;
        } else {
            reader = new BufferedReader(in, Constants.IO_BUFFER_SIZE);
        }
        try {
            boolean compress = handler.getLobCompressionAlgorithm(Value.CLOB) != null;
            long remaining = Long.MAX_VALUE;
            if (length >= 0 && length < remaining) {
                remaining = length;
            }
            int len = getBufferSize(handler, compress, remaining);
            char[] buff;
            if (len >= Integer.MAX_VALUE) {
                String data = IOUtils.readStringAndClose(reader, -1);
                buff = data.toCharArray();
                len = buff.length;
            } else {
                buff = new char[len];
                reader.mark(len);
                len = IOUtils.readFully(reader, buff, len);
            }
            if (len <= handler.getMaxLengthInplaceLob()) {
                byte[] small = new String(buff, 0, len).getBytes(StandardCharsets.UTF_8);
                return ValueLob.createSmallLob(Value.CLOB, small, len);
            }
            reader.reset();
            return new ValueLob(handler, reader, remaining);
        } catch (IOException e) {
            throw DbException.convertIOException(e, null);
        }
    }",True
52,"createTempBlob(InputStream,long,DataHandler)",Method,convertPrecision(long),"org.h2.store.LobStorageFrontend+createBlob(InputStream,long)","org.h2.store.DataHandler+getLobCompressionAlgorithm(int) org.h2.store.DataHandler+getLobCompressionAlgorithm(int) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.value.ValueLob+getBufferSize(DataHandler,boolean,long) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.util.Utils+newBytes(int) org.h2.util.Utils+newBytes(int) org.h2.util.IOUtils+readFully(InputStream,byte[],int) org.h2.util.IOUtils+readFully(InputStream,byte[],int) org.h2.store.DataHandler+getMaxLengthInplaceLob() org.h2.store.DataHandler+getMaxLengthInplaceLob() org.h2.util.Utils+copyBytes(byte[],int) org.h2.util.Utils+copyBytes(byte[],int) org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.value.ValueLob+ValueLob(DataHandler,byte[],int,InputStream,long) org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String)",java.lang.Long+MAX_VALUE org.h2.value.Value+BLOB java.lang.Integer+MAX_VALUE org.h2.value.Value+BLOB,1355,34,9,"/** 
 * Create a temporary BLOB value from a stream.
 * @param in the input stream
 * @param length the number of characters to read, or -1 for no limit
 * @param handler the data handler
 * @return the lob value
 */
","/**
     * Create a temporary BLOB value from a stream.
     *
     * @param in the input stream
     * @param length the number of characters to read, or -1 for no limit
     * @param handler the data handler
     * @return the lob value
     */
    public static ValueLob createTempBlob(InputStream in, long length,
            DataHandler handler) {
        try {
            long remaining = Long.MAX_VALUE;
            boolean compress = handler.getLobCompressionAlgorithm(Value.BLOB) != null;
            if (length >= 0 && length < remaining) {
                remaining = length;
            }
            int len = getBufferSize(handler, compress, remaining);
            byte[] buff;
            if (len >= Integer.MAX_VALUE) {
                buff = IOUtils.readBytesAndClose(in, -1);
                len = buff.length;
            } else {
                buff = Utils.newBytes(len);
                len = IOUtils.readFully(in, buff, len);
            }
            if (len <= handler.getMaxLengthInplaceLob()) {
                byte[] small = Utils.copyBytes(buff, len);
                return ValueLob.createSmallLob(Value.BLOB, small, small.length);
            }
            return new ValueLob(handler, buff, len, in, remaining);
        } catch (IOException e) {
            throw DbException.convertIOException(e, null);
        }
    }",True
53,"getBufferSize(DataHandler,boolean,long)",Method,"ValueLob(DataHandler,Reader,long) ValueLob(DataHandler,byte[],int,InputStream,long) createTempClob(Reader,long,DataHandler) createTempBlob(InputStream,long,DataHandler)",,"org.h2.store.DataHandler+getMaxLengthInplaceLob() org.h2.store.DataHandler+getMaxLengthInplaceLob() java.lang.Math+min(long,long) java.lang.Math+min(long,long) org.h2.util.MathUtils+roundUpLong(long,long) org.h2.util.MathUtils+roundUpLong(long,long) java.lang.Math+min(long,long) java.lang.Math+min(long,long) org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long)",java.lang.Integer+MAX_VALUE java.lang.Integer+MAX_VALUE org.h2.engine.Constants+IO_BUFFER_SIZE_COMPRESS org.h2.engine.Constants+IO_BUFFER_SIZE org.h2.engine.Constants+IO_BUFFER_SIZE java.lang.Integer+MAX_VALUE,980,23,10,,"private static int getBufferSize(DataHandler handler, boolean compress,
            long remaining) {
        if (remaining < 0 || remaining > Integer.MAX_VALUE) {
            remaining = Integer.MAX_VALUE;
        }
        int inplace = handler.getMaxLengthInplaceLob();
        long m = compress ? Constants.IO_BUFFER_SIZE_COMPRESS
                : Constants.IO_BUFFER_SIZE;
        if (m < remaining && m <= inplace) {
            // using ""1L"" to force long arithmetic because
            // inplace could be Integer.MAX_VALUE
            m = Math.min(remaining, inplace + 1L);
            // the buffer size must be bigger than the inplace lob, otherwise we
            // can't know if it must be stored in-place or not
            m = MathUtils.roundUpLong(m, Constants.IO_BUFFER_SIZE);
        }
        m = Math.min(remaining, m);
        m = MathUtils.convertLongToInt(m);
        if (m < 0) {
            m = Integer.MAX_VALUE;
        }
        return (int) m;
    }",False
54,convertPrecision(long),Method,,"org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToClob(TypeInfo,int,Object)","org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.IOUtils+readStringAndClose(Reader,int) org.h2.util.IOUtils+readStringAndClose(Reader,int) org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getReader() java.lang.String+getBytes(Charset) java.lang.String+getBytes(Charset) org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.value.ValueLob+createSmallLob(int,byte[],long) java.lang.String+length() java.lang.String+length() org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+createTempClob(Reader,long,DataHandler) org.h2.value.ValueLob+createTempClob(Reader,long,DataHandler) org.h2.value.ValueLob+getReader() org.h2.value.ValueLob+getReader() org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.util.IOUtils+readBytesAndClose(InputStream,int) org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String) org.h2.value.ValueLob+createTempBlob(InputStream,long,DataHandler) org.h2.value.ValueLob+createTempBlob(InputStream,long,DataHandler) org.h2.value.ValueLob+getInputStream() org.h2.value.ValueLob+getInputStream()",org.h2.value.ValueLob+precision org.h2.value.ValueLob+precision org.h2.value.ValueLob+valueType org.h2.value.Value+CLOB org.h2.value.ValueLob+handler java.nio.charset.StandardCharsets+UTF_8 org.h2.value.ValueLob+valueType org.h2.value.ValueLob+handler org.h2.value.ValueLob+handler org.h2.value.ValueLob+valueType org.h2.value.ValueLob+handler,1515,39,0,"/** 
 * Convert the precision to the requested value.
 * @param precision the new precision
 * @return the truncated or this value
 */
","/**
     * Convert the precision to the requested value.
     *
     * @param precision the new precision
     * @return the truncated or this value
     */
    ValueLob convertPrecision(long precision) {
        if (this.precision <= precision) {
            return this;
        }
        ValueLob lob;
        if (valueType == CLOB) {
            if (handler == null) {
                try {
                    int p = MathUtils.convertLongToInt(precision);
                    String s = IOUtils.readStringAndClose(getReader(), p);
                    byte[] data = s.getBytes(StandardCharsets.UTF_8);
                    lob = ValueLob.createSmallLob(valueType, data, s.length());
                } catch (IOException e) {
                    throw DbException.convertIOException(e, null);
                }
            } else {
                lob = ValueLob.createTempClob(getReader(), precision, handler);
            }
        } else {
            if (handler == null) {
                try {
                    int p = MathUtils.convertLongToInt(precision);
                    byte[] data = IOUtils.readBytesAndClose(getInputStream(), p);
                    lob = ValueLob.createSmallLob(valueType, data, data.length);
                } catch (IOException e) {
                    throw DbException.convertIOException(e, null);
                }
            } else {
                lob = ValueLob.createTempBlob(getInputStream(), precision, handler);
            }
        }
        return lob;
    }",False
55,"createSmallLob(int,byte[])",Method,,"org.h2.mvstore.db.LobStorageMap+createBlob(InputStream,long) org.h2.mvstore.db.LobStorageMap+createClob(Reader,long) org.h2.value.DataType+readValue(SessionInterface,ResultSet,int,int) org.h2.value.DataType+readValue(SessionInterface,ResultSet,int,int) org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToBlob(TypeInfo,int,Object) org.h2.value.Value+convertToClob(TypeInfo,int,Object) org.h2.value.Value+convertToClob(TypeInfo,int,Object) org.h2.test.unit.TestValue+createLob(DataHandler,int,byte[])","java.lang.String+length() java.lang.String+String(byte[],Charset) java.lang.String+length() org.h2.value.ValueLob+createSmallLob(int,byte[],long) org.h2.value.ValueLob+createSmallLob(int,byte[],long)",org.h2.value.Value+CLOB java.nio.charset.StandardCharsets+UTF_8,500,16,9,"/** 
 * Create a LOB object that fits in memory.
 * @param type the type (Value.BLOB or CLOB)
 * @param small the byte array
 * @return the LOB
 */
","/**
     * Create a LOB object that fits in memory.
     *
     * @param type the type (Value.BLOB or CLOB)
     * @param small the byte array
     * @return the LOB
     */
    public static ValueLob createSmallLob(int type, byte[] small) {
        int precision;
        if (type == Value.CLOB) {
            precision = new String(small, StandardCharsets.UTF_8).length();
        } else {
            precision = small.length;
        }
        return createSmallLob(type, small, precision);
    }",True
56,"createSmallLob(int,byte[],long)",Method,"createTempClob(Reader,long,DataHandler) createTempBlob(InputStream,long,DataHandler) convertPrecision(long) convertPrecision(long) createSmallLob(int,byte[])","org.h2.pagestore.db.LobStorageBackend+addLob(InputStream,long,int,CountingReaderInputStream) org.h2.test.unit.TestValue+testCastTrim() org.h2.test.unit.TestValue+testCastTrim()","org.h2.value.ValueLob+ValueLob(int,byte[],long)",,366,12,9,"/** 
 * Create a LOB object that fits in memory.
 * @param type the type (Value.BLOB or CLOB)
 * @param small the byte array
 * @param precision the precision
 * @return the LOB
 */
","/**
     * Create a LOB object that fits in memory.
     *
     * @param type the type (Value.BLOB or CLOB)
     * @param small the byte array
     * @param precision the precision
     * @return the LOB
     */
    public static ValueLob createSmallLob(int type, byte[] small,
            long precision) {
        return new ValueLob(type, small, precision);
    }",True
57,setRecoveryReference(boolean),Method,,"org.h2.tools.Recover+readBlobDb(Connection,long,long) org.h2.tools.Recover+readClobDb(Connection,long,long)",,org.h2.value.ValueLob+isRecoveryReference org.h2.value.ValueLob+isRecoveryReference,125,3,1,,"public void setRecoveryReference(boolean isRecoveryReference) {
        this.isRecoveryReference = isRecoveryReference;
    }",True
58,isRecoveryReference(),Method,,"org.h2.pagestore.db.LobStorageBackend+copyLob(ValueLob,int,long)",,org.h2.value.ValueLob+isRecoveryReference,80,3,1,,"public boolean isRecoveryReference() {
        return isRecoveryReference;
    }",True
