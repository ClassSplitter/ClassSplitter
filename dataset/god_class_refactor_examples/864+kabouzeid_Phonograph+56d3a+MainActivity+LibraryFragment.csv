index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,TAG,tag ,Field,,,,,68,1,25,,public static final String TAG = MainActivity.class.getSimpleName();,False,False,,False,
2,APP_INTRO_REQUEST,app intro request ,Field,,,,,48,1,25,,public static final int APP_INTRO_REQUEST = 100;,False,False,,False,
3,toolbar,toolbar ,Field,,,,,40,2,0,,"@Bind(R.id.toolbar)
    Toolbar toolbar;",True,True,,False,
4,tabs,tabs ,Field,,,,,36,2,0,,"@Bind(R.id.tabs)
    TabLayout tabs;",True,True,,False,
5,appbar,appbar ,Field,,,,,43,2,0,,"@Bind(R.id.appbar)
    AppBarLayout appbar;",True,True,,False,
6,pager,pager ,Field,,,,,38,2,0,,"@Bind(R.id.pager)
    ViewPager pager;",True,True,,False,
7,navigationView,navigation view ,Field,,,,,62,2,0,,"@Bind(R.id.navigation_view)
    NavigationView navigationView;",False,False,,False,
8,drawerLayout,drawer layout ,Field,,,,,56,2,0,,"@Bind(R.id.drawer_layout)
    DrawerLayout drawerLayout;",False,False,,False,
9,navigationDrawerHeader,navigation drawer header ,Field,,,,,50,2,2,,"@Nullable
    private View navigationDrawerHeader;",False,False,,False,
10,pagerAdapter,pager adapter ,Field,,,,,46,1,2,,private MusicLibraryPagerAdapter pagerAdapter;,True,True,,False,
11,cab,cab ,Field,,,,,24,1,2,,private MaterialCab cab;,True,True,,False,
12,blockRequestPermissions,block request permissions ,Field,,,,,40,1,2,,private boolean blockRequestPermissions;,False,False,,False,
13,onCreate(Bundle),on create saved instance state ,Method,,,"com.kabouzeid.gramophone.ui.activities.base.AbsSlidingMusicPanelActivity+onCreate(Bundle) com.kabouzeid.gramophone.util.Util+setStatusBarTranslucent(Window) com.kabouzeid.gramophone.util.Util+setStatusBarTranslucent(Window) com.kabouzeid.gramophone.ui.activities.base.AbsThemeActivity+setStatusbarColorAuto() com.kabouzeid.gramophone.ui.activities.base.AbsThemeActivity+setStatusbarColorAuto() com.kabouzeid.gramophone.ui.activities.base.AbsThemeActivity+setNavigationbarColorAuto() com.kabouzeid.gramophone.ui.activities.base.AbsThemeActivity+setNavigationbarColorAuto() com.kabouzeid.gramophone.ui.activities.base.AbsThemeActivity+setTaskDescriptionColorAuto() com.kabouzeid.gramophone.ui.activities.base.AbsThemeActivity+setTaskDescriptionColorAuto() com.kabouzeid.gramophone.ui.activities.MainActivity+setUpDrawerLayout() com.kabouzeid.gramophone.ui.activities.MainActivity+setUpDrawerLayout() com.kabouzeid.gramophone.ui.activities.MainActivity+setUpToolbar() com.kabouzeid.gramophone.ui.activities.MainActivity+setUpToolbar() com.kabouzeid.gramophone.ui.activities.MainActivity+setUpViewPager() com.kabouzeid.gramophone.ui.activities.MainActivity+setUpViewPager() com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.dialogs.ChangelogDialog+setChangelogRead(Context) com.kabouzeid.gramophone.dialogs.ChangelogDialog+setChangelogRead(Context) android.os.Handler+postDelayed(Runnable,long) android.os.Handler+Handler() android.os.Handler+postDelayed(Runnable,long) +() +run()",android.os.Build.VERSION+SDK_INT com.kabouzeid.gramophone.ui.activities.MainActivity+drawerLayout com.kabouzeid.gramophone.ui.activities.MainActivity+navigationView com.kabouzeid.gramophone.ui.activities.MainActivity+blockRequestPermissions,1222,34,4,,"@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ButterKnife.bind(this);

        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {
            Util.setStatusBarTranslucent(getWindow());
            drawerLayout.setFitsSystemWindows(false);
            navigationView.setFitsSystemWindows(false);
            findViewById(R.id.drawer_content_container).setFitsSystemWindows(false);
        }

        setStatusbarColorAuto();
        setNavigationbarColorAuto();
        setTaskDescriptionColorAuto();

        setUpDrawerLayout();
        setUpToolbar();
        setUpViewPager();

        if (!PreferenceUtil.getInstance(this).introShown()) {
            PreferenceUtil.getInstance(this).setIntroShown();
            ChangelogDialog.setChangelogRead(this);
            blockRequestPermissions = true;
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    startActivityForResult(new Intent(MainActivity.this, AppIntroActivity.class), APP_INTRO_REQUEST);
                }
            }, 200);
        } else {
            checkShowChangelog();
        }
    }",False,False,"This method is the ""onCreate"" method of an Android activity. It is responsible for initializing the activity, setting up the user interface, and handling any necessary setup tasks. It also checks if the app is running on Android KitKat and performs some specific actions for that version. Finally, it checks if the app's introduction has been shown before and either shows it or checks for any changelog updates.",False,"This code is the `onCreate` method of an Android activity. It initializes various UI elements, sets up the navigation drawer, toolbar, and view pager. It also checks if the app's introduction has been shown before and displays it if necessary."
14,"onActivityResult(int,int,Intent)",on activity result request code result code data ,Method,,,com.kabouzeid.gramophone.ui.activities.base.AbsBaseActivity+hasPermissions() com.kabouzeid.gramophone.ui.activities.base.AbsBaseActivity+hasPermissions() com.kabouzeid.gramophone.ui.activities.MainActivity+requestPermissions() com.kabouzeid.gramophone.ui.activities.MainActivity+requestPermissions(),com.kabouzeid.gramophone.ui.activities.MainActivity+APP_INTRO_REQUEST com.kabouzeid.gramophone.ui.activities.MainActivity+blockRequestPermissions,354,10,4,,"@Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == APP_INTRO_REQUEST) {
            blockRequestPermissions = false;
            if (!hasPermissions()) {
                requestPermissions();
            }
        }
    }",False,False,"This method is used to handle the result of an activity that was started for a result. It checks if the request code matches a specific code, and if so, it sets a flag and requests permissions if they are not already granted.",False,"This code is an overridden method that handles the result of an activity. It checks if the request code matches a specific value, and if so, it sets a boolean variable to false and checks if certain permissions are granted. If the permissions are not granted, it requests them."
15,requestPermissions(),request permissions ,Method,"onActivityResult(int,int,Intent)",,com.kabouzeid.gramophone.ui.activities.base.AbsBaseActivity+requestPermissions(),com.kabouzeid.gramophone.ui.activities.MainActivity+blockRequestPermissions,123,4,4,,"@Override
    protected void requestPermissions() {
        if (!blockRequestPermissions) super.requestPermissions();
    }",False,False,"This method is used to request permissions. If the ""blockRequestPermissions"" flag is not set, it calls the superclass's ""requestPermissions"" method.",False,"The code is overriding the `requestPermissions()` method. It checks if the `blockRequestPermissions` flag is false, and if so, it calls the superclass's `requestPermissions()` method. This allows the code to selectively block or allow permission requests based on the value of `blockRequestPermissions`."
16,createContentView(),create content view ,Method,,,android.view.ViewGroup+addView(View) android.view.ViewGroup+addView(View) com.kabouzeid.gramophone.ui.activities.base.AbsSlidingMusicPanelActivity+wrapSlidingMusicPanel(int) com.kabouzeid.gramophone.ui.activities.base.AbsSlidingMusicPanelActivity+wrapSlidingMusicPanel(int),,409,8,4,,"@Override
    protected View createContentView() {
        @SuppressLint(""InflateParams"")
        View contentView = getLayoutInflater().inflate(R.layout.activity_main_drawer_layout, null);
        ViewGroup drawerContent = ButterKnife.findById(contentView, R.id.drawer_content_container);
        drawerContent.addView(wrapSlidingMusicPanel(R.layout.activity_main_content));
        return contentView;
    }",False,False,"This method creates the content view for the main activity by inflating the layout file ""activity_main_drawer_layout"" and adding a sliding music panel to the drawer content container.",False,This code overrides the method `createContentView()` to inflate a layout file and add it to a ViewGroup. It also adds a sliding music panel to the ViewGroup before returning the inflated layout as the content view.
17,setUpViewPager(),set up view pager ,Method,onCreate(Bundle),,"com.kabouzeid.gramophone.adapter.MusicLibraryPagerAdapter+MusicLibraryPagerAdapter(Context,FragmentManager) android.support.v4.view.ViewPager+setAdapter(PagerAdapter) android.support.v4.view.ViewPager+setAdapter(PagerAdapter) android.support.v4.view.ViewPager+setOffscreenPageLimit(int) android.support.v4.view.ViewPager+setOffscreenPageLimit(int) com.kabouzeid.gramophone.adapter.MusicLibraryPagerAdapter+getCount() com.kabouzeid.gramophone.adapter.MusicLibraryPagerAdapter+getCount() com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) android.support.v4.view.ViewPager+setCurrentItem(int) android.support.v4.view.ViewPager+setCurrentItem(int)",com.kabouzeid.gramophone.ui.activities.MainActivity+pagerAdapter com.kabouzeid.gramophone.ui.activities.MainActivity+pager com.kabouzeid.gramophone.ui.activities.MainActivity+pagerAdapter com.kabouzeid.gramophone.ui.activities.MainActivity+pager com.kabouzeid.gramophone.ui.activities.MainActivity+pagerAdapter com.kabouzeid.gramophone.ui.activities.MainActivity+tabs com.kabouzeid.gramophone.ui.activities.MainActivity+pager com.kabouzeid.gramophone.ui.activities.MainActivity+tabs com.kabouzeid.gramophone.ui.activities.MainActivity+tabs com.kabouzeid.gramophone.ui.activities.MainActivity+tabs com.kabouzeid.gramophone.ui.activities.MainActivity+pager,977,18,2,,"private void setUpViewPager() {
        pagerAdapter = new MusicLibraryPagerAdapter(this, getSupportFragmentManager());
        pager.setAdapter(pagerAdapter);
        pager.setOffscreenPageLimit(pagerAdapter.getCount() - 1); // => all

        tabs.setupWithViewPager(pager);

        int primaryColor = ThemeStore.primaryColor(this);
        int normalColor = ToolbarContentTintHelper.toolbarSubtitleColor(this, primaryColor);
        int selectedColor = ToolbarContentTintHelper.toolbarTitleColor(this, primaryColor);
        TabLayoutUtil.setTabIconColors(tabs, normalColor, selectedColor);
        tabs.setTabTextColors(normalColor, selectedColor);
        tabs.setSelectedTabIndicatorColor(ThemeStore.accentColor(this));

        int startPosition = PreferenceUtil.getInstance(this).getDefaultStartPage();
        startPosition = startPosition == -1 ? PreferenceUtil.getInstance(this).getLastStartPage() : startPosition;
        pager.setCurrentItem(startPosition);
    }",True,True,"The function of the method is to set up a ViewPager with a MusicLibraryPagerAdapter, set the offscreen page limit, set up tabs with the ViewPager, set tab icon and text colors, set the selected tab indicator color, and set the current item of the ViewPager based on a preference.",True,"The `setUpViewPager()` method sets up a ViewPager with a custom adapter and configures various properties such as offscreen page limit, tab colors, and selected tab indicator color. It also sets the current item of the ViewPager based on a preference value."
18,setUpToolbar(),set up toolbar ,Method,onCreate(Bundle),,,com.kabouzeid.gramophone.ui.activities.MainActivity+appbar com.kabouzeid.gramophone.ui.activities.MainActivity+toolbar com.kabouzeid.gramophone.ui.activities.MainActivity+toolbar com.kabouzeid.gramophone.ui.activities.MainActivity+toolbar,359,8,2,,"private void setUpToolbar() {
        int primaryColor = ThemeStore.primaryColor(this);
        appbar.setBackgroundColor(primaryColor);
        toolbar.setBackgroundColor(primaryColor);
        toolbar.setNavigationIcon(R.drawable.ic_menu_white_24dp);
        setTitle(getResources().getString(R.string.app_name));
        setSupportActionBar(toolbar);
    }",True,True,"This method sets up the toolbar by getting the primary color from the theme store, setting the background color of the appbar and toolbar, setting the navigation icon, setting the title, and setting the toolbar as the support action bar.",True,"The `setUpToolbar()` method is used to set up the toolbar in an Android application. It sets the background color of the appbar and toolbar to the primary color defined in the theme, sets a navigation icon, sets the title of the toolbar, and sets the toolbar as the action bar for the activity."
19,setUpNavigationView(),set up navigation view ,Method,setUpDrawerLayout(),,+onNavigationItemSelected(MenuItem),com.kabouzeid.gramophone.ui.activities.MainActivity+navigationView com.kabouzeid.gramophone.ui.activities.MainActivity+navigationView com.kabouzeid.gramophone.ui.activities.MainActivity+navigationView com.kabouzeid.gramophone.ui.activities.MainActivity+navigationView,2208,47,2,,"private void setUpNavigationView() {
        navigationView.setCheckedItem(R.id.nav_library);

        int accentColor = ThemeStore.accentColor(this);
        NavigationViewUtil.setItemIconColors(navigationView, ATHUtil.resolveColor(this, R.attr.iconColor, ThemeStore.textColorSecondary(this)), accentColor);
        NavigationViewUtil.setItemTextColors(navigationView, ThemeStore.textColorPrimary(this), accentColor);

        navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {
                drawerLayout.closeDrawers();
                switch (menuItem.getItemId()) {
                    case R.id.nav_library:
                        // TODO
                        break;
                    case R.id.nav_folders:
                        // TODO
                        break;
                    case R.id.support_development:
                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                DonationDialog.create().show(getSupportFragmentManager(), ""DONATION_DIALOG"");
                            }
                        }, 200);
                        break;
                    case R.id.nav_settings:
                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                startActivity(new Intent(MainActivity.this, SettingsActivity.class));
                            }
                        }, 200);
                        break;
                    case R.id.nav_about:
                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                startActivity(new Intent(MainActivity.this, AboutActivity.class));
                            }
                        }, 200);
                        break;
                }
                return true;
            }
        });
    }",False,False,"The function of the method is to set up the navigation view by checking the library item, setting the icon and text colors, and handling the selection of different menu items to perform specific actions such as opening dialogs or starting activities.",True,"The code sets up a navigation view by selecting the ""Library"" item, setting icon and text colors, and defining actions for each navigation item. The actions include opening a donation dialog, starting the settings activity, and starting the about activity with a delay of 200 milliseconds."
20,setUpDrawerLayout(),set up drawer layout ,Method,onCreate(Bundle),,com.kabouzeid.gramophone.ui.activities.MainActivity+setUpNavigationView() com.kabouzeid.gramophone.ui.activities.MainActivity+setUpNavigationView() android.support.v4.widget.DrawerLayout+setDrawerListener(DrawerListener) android.support.v4.widget.DrawerLayout+setDrawerListener(DrawerListener),com.kabouzeid.gramophone.ui.activities.MainActivity+drawerLayout,117,4,2,,"private void setUpDrawerLayout() {
        setUpNavigationView();
        drawerLayout.setDrawerListener(this);
    }",False,False,"The function of the method ""setUpDrawerLayout"" is to set up the drawer layout by calling the ""setUpNavigationView"" method and setting the drawer listener to ""this"".",True,"The code defines a private method called ""setUpDrawerLayout"" that sets up the navigation view and assigns a drawer listener to the drawer layout. It is likely used to initialize the drawer layout and its associated components for a user interface."
21,updateNavigationDrawerHeader(),update navigation drawer header ,Method,onPlayingMetaChanged(),,java.util.ArrayList+isEmpty() com.kabouzeid.gramophone.helper.MusicPlayerRemote+getPlayingQueue() com.kabouzeid.gramophone.helper.MusicPlayerRemote+getPlayingQueue() java.util.ArrayList+isEmpty() com.kabouzeid.gramophone.helper.MusicPlayerRemote+getCurrentSong() com.kabouzeid.gramophone.helper.MusicPlayerRemote+getCurrentSong() android.view.View+setOnClickListener(OnClickListener) android.view.View+setOnClickListener(OnClickListener) +() +onClick(View),com.kabouzeid.gramophone.ui.activities.MainActivity+navigationDrawerHeader com.kabouzeid.gramophone.ui.activities.MainActivity+navigationDrawerHeader com.kabouzeid.gramophone.ui.activities.MainActivity+navigationView com.kabouzeid.gramophone.ui.activities.MainActivity+navigationDrawerHeader,1436,28,2,,"private void updateNavigationDrawerHeader() {
        if (!MusicPlayerRemote.getPlayingQueue().isEmpty()) {
            Song song = MusicPlayerRemote.getCurrentSong();
            if (navigationDrawerHeader == null) {
                navigationDrawerHeader = navigationView.inflateHeaderView(R.layout.navigation_drawer_header);
                //noinspection ConstantConditions
                navigationDrawerHeader.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        drawerLayout.closeDrawers();
                        if (getPanelState() == SlidingUpPanelLayout.PanelState.COLLAPSED) {
                            expandPanel();
                        }
                    }
                });
            }
            ((TextView) navigationDrawerHeader.findViewById(R.id.title)).setText(song.title);
            ((TextView) navigationDrawerHeader.findViewById(R.id.text)).setText(song.artistName);
            SongGlideRequest.Builder.from(Glide.with(this), song)
                    .checkIgnoreMediaStore(this).build()
                    .into(((ImageView) navigationDrawerHeader.findViewById(R.id.image)));
        } else {
            if (navigationDrawerHeader != null) {
                navigationView.removeHeaderView(navigationDrawerHeader);
                navigationDrawerHeader = null;
            }
        }
    }",False,False,"The function of this method is to update the header of the navigation drawer with the current song information. If there is a song playing, it sets the title, artist name, and image of the song in the header. If there is no song playing, it removes the header from the navigation drawer.",True,"The `updateNavigationDrawerHeader()` method updates the header of a navigation drawer based on the current song being played. If there is a song playing, it sets the title, artist name, and image of the header. If there is no song playing, it removes the header from the navigation drawer."
22,enableViews(),enable views ,Method,,,com.kabouzeid.gramophone.ui.activities.base.AbsBaseActivity+enableViews() com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityFragment+enableViews() com.kabouzeid.gramophone.ui.activities.MainActivity+getCurrentFragment() com.kabouzeid.gramophone.ui.activities.MainActivity+getCurrentFragment() com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityFragment+enableViews(),com.kabouzeid.gramophone.ui.activities.MainActivity+toolbar,267,9,1,,"@Override
    public void enableViews() {
        try {
            super.enableViews();
            toolbar.setEnabled(true);
            ((AbsMainActivityFragment) getCurrentFragment()).enableViews();
        } catch (NullPointerException ignored) {
        }
    }",False,False,"This method enables views by calling the superclass's enableViews method, enabling the toolbar, and enabling views in the current fragment. It handles any NullPointerExceptions that may occur.",False,The `enableViews()` method overrides a superclass method and enables views by setting the toolbar as enabled and calling the `enableViews()` method of the current fragment. It handles any `NullPointerException` by ignoring it.
23,disableViews(),disable views ,Method,,,com.kabouzeid.gramophone.ui.activities.base.AbsBaseActivity+disableViews() com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityFragment+disableViews() com.kabouzeid.gramophone.ui.activities.MainActivity+getCurrentFragment() com.kabouzeid.gramophone.ui.activities.MainActivity+getCurrentFragment() com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityFragment+disableViews(),,232,8,1,,"@Override
    public void disableViews() {
        try {
            super.disableViews();
            ((AbsMainActivityFragment) getCurrentFragment()).disableViews();
        } catch (NullPointerException ignored) {
        }
    }",False,False,This method is used to disable views in the current fragment of the main activity. It calls the superclass method to disable views and then calls the disableViews method of the current fragment.,False,"The `disableViews()` method is overridden to disable views in the current fragment. It first calls the superclass's `disableViews()` method and then calls the `disableViews()` method of the current fragment. If a `NullPointerException` occurs, it is ignored."
24,onPlayingMetaChanged(),on playing meta changed ,Method,,,com.kabouzeid.gramophone.ui.activities.base.AbsMusicServiceActivity+onPlayingMetaChanged() com.kabouzeid.gramophone.ui.activities.MainActivity+updateNavigationDrawerHeader() com.kabouzeid.gramophone.ui.activities.MainActivity+updateNavigationDrawerHeader(),,134,5,1,,"@Override
    public void onPlayingMetaChanged() {
        super.onPlayingMetaChanged();
        updateNavigationDrawerHeader();
    }",False,False,This method is an override of the onPlayingMetaChanged() method. It calls the superclass's onPlayingMetaChanged() method and then updates the navigation drawer header.,False,"The method ""onPlayingMetaChanged()"" overrides a superclass method and is called when the playing metadata changes. It calls the ""updateNavigationDrawerHeader()"" function to update the header of the navigation drawer."
25,"onServiceConnected(ComponentName,IBinder)",on service connected name service ,Method,,,"com.kabouzeid.gramophone.ui.activities.base.AbsSlidingMusicPanelActivity+onServiceConnected(ComponentName,IBinder) com.kabouzeid.gramophone.ui.activities.MainActivity+handlePlaybackIntent(Intent) com.kabouzeid.gramophone.ui.activities.MainActivity+handlePlaybackIntent(Intent)",,181,5,1,,"@Override
    public void onServiceConnected(ComponentName name, IBinder service) {
        super.onServiceConnected(name, service);
        handlePlaybackIntent(getIntent());
    }",False,False,"This method is used to handle the connection to a service. It calls the superclass method, then passes the intent to handlePlaybackIntent().",False,"The code is an implementation of the `onServiceConnected` method, which is called when a service is connected. It calls the `handlePlaybackIntent` function with the current intent as a parameter."
26,onCreateOptionsMenu(Menu),on create options menu menu ,Method,,,"com.kabouzeid.gramophone.ui.activities.MainActivity+isPlaylistPage() com.kabouzeid.gramophone.ui.activities.MainActivity+isPlaylistPage() android.view.Menu+add(int,int,int,CharSequence) android.view.Menu+add(int,int,int,CharSequence) com.kabouzeid.gramophone.ui.activities.MainActivity+getCurrentFragment() com.kabouzeid.gramophone.ui.activities.MainActivity+getCurrentFragment() android.support.v4.app.Fragment+isAdded() android.support.v4.app.Fragment+isAdded() android.view.Menu+findItem(int) android.view.Menu+findItem(int) com.kabouzeid.gramophone.util.Util+isLandscape(Resources) com.kabouzeid.gramophone.util.Util+isLandscape(Resources) android.view.MenuItem+setTitle(CharSequence) android.view.MenuItem+setTitle(CharSequence) com.kabouzeid.gramophone.ui.activities.MainActivity+setUpGridSizeMenu(AbsMainActivityRecyclerViewCustomGridSizeFragment,SubMenu) com.kabouzeid.gramophone.ui.activities.MainActivity+setUpGridSizeMenu(AbsMainActivityRecyclerViewCustomGridSizeFragment,SubMenu) android.view.MenuItem+getSubMenu() android.view.MenuItem+getSubMenu() android.view.Menu+findItem(int) android.view.Menu+findItem(int) com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+usePalette() com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+usePalette() android.view.Menu+findItem(int) android.view.Menu+findItem(int) com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+canUsePalette() com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+canUsePalette() android.view.Menu+removeItem(int) android.view.Menu+removeItem(int) android.view.Menu+removeItem(int) android.view.Menu+removeItem(int)",,1393,24,1,,"@Override
    public boolean onCreateOptionsMenu(@NonNull Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        if (isPlaylistPage()) {
            menu.add(0, R.id.action_new_playlist, 0, R.string.new_playlist_title);
        }
        Fragment currentFragment = getCurrentFragment();
        if (currentFragment instanceof AbsMainActivityRecyclerViewCustomGridSizeFragment && currentFragment.isAdded()) {
            AbsMainActivityRecyclerViewCustomGridSizeFragment absMainActivityRecyclerViewCustomGridSizeFragment = (AbsMainActivityRecyclerViewCustomGridSizeFragment) currentFragment;

            MenuItem gridSizeItem = menu.findItem(R.id.action_grid_size);
            if (Util.isLandscape(getResources())) {
                gridSizeItem.setTitle(R.string.action_grid_size_land);
            }
            setUpGridSizeMenu(absMainActivityRecyclerViewCustomGridSizeFragment, gridSizeItem.getSubMenu());

            menu.findItem(R.id.action_colored_footers).setChecked(absMainActivityRecyclerViewCustomGridSizeFragment.usePalette());
            menu.findItem(R.id.action_colored_footers).setEnabled(absMainActivityRecyclerViewCustomGridSizeFragment.canUsePalette());
        } else {
            menu.removeItem(R.id.action_grid_size);
            menu.removeItem(R.id.action_colored_footers);
        }
        return super.onCreateOptionsMenu(menu);
    }",True,True,"This method is used to create the options menu for an activity. It inflates a menu resource, adds menu items based on certain conditions, sets up the grid size menu, and enables/disables certain menu items based on the current fragment. Finally, it returns a boolean value indicating whether the menu creation was successful.",False,"This code overrides the onCreateOptionsMenu method in an Android activity. It inflates a menu layout, adds menu items conditionally based on the current page, and sets up menu items based on the current fragment. It also handles removing menu items if the current fragment does not match a specific type."
27,onOptionsItemSelected(MenuItem),on options item selected item ,Method,,,"android.view.MenuItem+getItemId() android.view.MenuItem+getItemId() android.support.v4.widget.DrawerLayout+isDrawerOpen(View) android.support.v4.widget.DrawerLayout+isDrawerOpen(View) android.support.v4.widget.DrawerLayout+closeDrawer(View) android.support.v4.widget.DrawerLayout+closeDrawer(View) android.support.v4.widget.DrawerLayout+openDrawer(View) android.support.v4.widget.DrawerLayout+openDrawer(View) com.kabouzeid.gramophone.ui.activities.MainActivity+getCurrentFragment() com.kabouzeid.gramophone.ui.activities.MainActivity+getCurrentFragment() android.view.MenuItem+getItemId() android.view.MenuItem+getItemId() android.view.MenuItem+setChecked(boolean) android.view.MenuItem+setChecked(boolean) android.view.MenuItem+isChecked() android.view.MenuItem+isChecked() com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+setAndSaveUsePalette(boolean) com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+setAndSaveUsePalette(boolean) android.view.MenuItem+isChecked() android.view.MenuItem+isChecked() com.kabouzeid.gramophone.ui.activities.MainActivity+handleGridSizeMenuItem(AbsMainActivityRecyclerViewCustomGridSizeFragment,MenuItem) com.kabouzeid.gramophone.ui.activities.MainActivity+handleGridSizeMenuItem(AbsMainActivityRecyclerViewCustomGridSizeFragment,MenuItem) android.view.MenuItem+getItemId() android.view.MenuItem+getItemId() android.support.v4.app.DialogFragment+show(FragmentManager,String) com.kabouzeid.gramophone.dialogs.SleepTimerDialog+SleepTimerDialog() android.support.v4.app.DialogFragment+show(FragmentManager,String) com.kabouzeid.gramophone.util.NavigationUtil+openEqualizer(Activity) com.kabouzeid.gramophone.util.NavigationUtil+openEqualizer(Activity) com.kabouzeid.gramophone.helper.MusicPlayerRemote+openAndShuffleQueue(ArrayList<Song>,boolean) com.kabouzeid.gramophone.helper.MusicPlayerRemote+openAndShuffleQueue(ArrayList<Song>,boolean) com.kabouzeid.gramophone.loader.SongLoader+getAllSongs(Context) com.kabouzeid.gramophone.loader.SongLoader+getAllSongs(Context) android.support.v4.app.DialogFragment+show(FragmentManager,String) com.kabouzeid.gramophone.dialogs.CreatePlaylistDialog+create() com.kabouzeid.gramophone.dialogs.CreatePlaylistDialog+create() android.support.v4.app.DialogFragment+show(FragmentManager,String) android.content.Intent+Intent()",com.kabouzeid.gramophone.ui.activities.MainActivity+drawerLayout com.kabouzeid.gramophone.ui.activities.MainActivity+navigationView com.kabouzeid.gramophone.ui.activities.MainActivity+drawerLayout com.kabouzeid.gramophone.ui.activities.MainActivity+navigationView com.kabouzeid.gramophone.ui.activities.MainActivity+drawerLayout com.kabouzeid.gramophone.ui.activities.MainActivity+navigationView,2021,44,1,,"@Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        if (item.getItemId() == android.R.id.home) {
            if (drawerLayout.isDrawerOpen(navigationView)) {
                drawerLayout.closeDrawer(navigationView);
            } else {
                drawerLayout.openDrawer(navigationView);
            }
            return true;
        }

        Fragment currentFragment = getCurrentFragment();
        if (currentFragment instanceof AbsMainActivityRecyclerViewCustomGridSizeFragment) {
            AbsMainActivityRecyclerViewCustomGridSizeFragment absMainActivityRecyclerViewCustomGridSizeFragment = (AbsMainActivityRecyclerViewCustomGridSizeFragment) currentFragment;
            if (item.getItemId() == R.id.action_colored_footers) {
                item.setChecked(!item.isChecked());
                absMainActivityRecyclerViewCustomGridSizeFragment.setAndSaveUsePalette(item.isChecked());
                return true;
            }
            if (handleGridSizeMenuItem(absMainActivityRecyclerViewCustomGridSizeFragment, item)) {
                return true;
            }
        }

        int id = item.getItemId();
        switch (id) {
            case R.id.action_sleep_timer:
                new SleepTimerDialog().show(getSupportFragmentManager(), ""SET_SLEEP_TIMER"");
                return true;
            case R.id.action_equalizer:
                NavigationUtil.openEqualizer(this);
                return true;
            case R.id.action_shuffle_all:
                MusicPlayerRemote.openAndShuffleQueue(SongLoader.getAllSongs(this), true);
                return true;
            case R.id.action_new_playlist:
                CreatePlaylistDialog.create().show(getSupportFragmentManager(), ""CREATE_PLAYLIST"");
                return true;
            case R.id.action_search:
                startActivity(new Intent(MainActivity.this, SearchActivity.class));
                return true;
        }
        return super.onOptionsItemSelected(item);
    }",False,False,"This method serves as an event handler for when a menu item is selected. It performs different actions based on the selected item, such as opening or closing a drawer, setting a sleep timer, opening an equalizer, shuffling a music queue, creating a new playlist, or starting a search activity.",False,"This code is an implementation of the `onOptionsItemSelected` method in an Android activity. It handles various menu item selections, including toggling a drawer, handling actions specific to a certain fragment, and performing actions such as opening a sleep timer dialog, opening the equalizer, shuffling a music queue, creating a new playlist, and starting a search activity."
28,"setUpGridSizeMenu(AbsMainActivityRecyclerViewCustomGridSizeFragment,SubMenu)",set up grid size menu fragment grid size menu ,Method,onCreateOptionsMenu(Menu),,com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+getGridSize() com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+getGridSize() android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+getMaxGridSize() com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+getMaxGridSize() android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int) android.view.Menu+findItem(int),,1949,47,2,,"private void setUpGridSizeMenu(@NonNull AbsMainActivityRecyclerViewCustomGridSizeFragment fragment, @NonNull SubMenu gridSizeMenu) {
        switch (fragment.getGridSize()) {
            case 1:
                gridSizeMenu.findItem(R.id.action_grid_size_1).setChecked(true);
                break;
            case 2:
                gridSizeMenu.findItem(R.id.action_grid_size_2).setChecked(true);
                break;
            case 3:
                gridSizeMenu.findItem(R.id.action_grid_size_3).setChecked(true);
                break;
            case 4:
                gridSizeMenu.findItem(R.id.action_grid_size_4).setChecked(true);
                break;
            case 5:
                gridSizeMenu.findItem(R.id.action_grid_size_5).setChecked(true);
                break;
            case 6:
                gridSizeMenu.findItem(R.id.action_grid_size_6).setChecked(true);
                break;
            case 7:
                gridSizeMenu.findItem(R.id.action_grid_size_7).setChecked(true);
                break;
            case 8:
                gridSizeMenu.findItem(R.id.action_grid_size_8).setChecked(true);
                break;
        }
        int maxGridSize = fragment.getMaxGridSize();
        if (maxGridSize < 8) {
            gridSizeMenu.findItem(R.id.action_grid_size_8).setVisible(false);
        }
        if (maxGridSize < 7) {
            gridSizeMenu.findItem(R.id.action_grid_size_7).setVisible(false);
        }
        if (maxGridSize < 6) {
            gridSizeMenu.findItem(R.id.action_grid_size_6).setVisible(false);
        }
        if (maxGridSize < 5) {
            gridSizeMenu.findItem(R.id.action_grid_size_5).setVisible(false);
        }
        if (maxGridSize < 4) {
            gridSizeMenu.findItem(R.id.action_grid_size_4).setVisible(false);
        }
        if (maxGridSize < 3) {
            gridSizeMenu.findItem(R.id.action_grid_size_3).setVisible(false);
        }
    }",True,True,This method sets up a grid size menu in a RecyclerView fragment. It checks the current grid size and sets the corresponding menu item as checked. It also hides menu items based on the maximum grid size allowed.,False,The `setUpGridSizeMenu` method sets the checked state of menu items based on the grid size obtained from the `fragment`. It also hides menu items based on the maximum grid size obtained from the `fragment`.
29,"handleGridSizeMenuItem(AbsMainActivityRecyclerViewCustomGridSizeFragment,MenuItem)",handle grid size menu item fragment item ,Method,onOptionsItemSelected(MenuItem),,android.view.MenuItem+getItemId() android.view.MenuItem+getItemId() android.view.MenuItem+setChecked(boolean) android.view.MenuItem+setChecked(boolean) com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+setAndSaveGridSize(int) com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+setAndSaveGridSize(int) com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+canUsePalette() com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewCustomGridSizeFragment+canUsePalette(),com.kabouzeid.gramophone.ui.activities.MainActivity+toolbar,1248,36,2,,"private boolean handleGridSizeMenuItem(@NonNull AbsMainActivityRecyclerViewCustomGridSizeFragment fragment, @NonNull MenuItem item) {
        int gridSize = 0;
        switch (item.getItemId()) {
            case R.id.action_grid_size_1:
                gridSize = 1;
                break;
            case R.id.action_grid_size_2:
                gridSize = 2;
                break;
            case R.id.action_grid_size_3:
                gridSize = 3;
                break;
            case R.id.action_grid_size_4:
                gridSize = 4;
                break;
            case R.id.action_grid_size_5:
                gridSize = 5;
                break;
            case R.id.action_grid_size_6:
                gridSize = 6;
                break;
            case R.id.action_grid_size_7:
                gridSize = 7;
                break;
            case R.id.action_grid_size_8:
                gridSize = 8;
                break;
        }
        if (gridSize > 0) {
            item.setChecked(true);
            fragment.setAndSaveGridSize(gridSize);
            toolbar.getMenu().findItem(R.id.action_colored_footers).setEnabled(fragment.canUsePalette());
            return true;
        }
        return false;
    }",False,True,"This method handles the selection of a grid size menu item. It sets the grid size based on the selected item, updates the UI, and returns true if a valid grid size was selected. Otherwise, it returns false.",True,"This code is a private method that handles the selection of a grid size menu item. It assigns the selected grid size value based on the item ID, updates the fragment's grid size, and enables or disables a menu item based on the fragment's ability to use a color palette. The method returns true if a valid grid size is selected, otherwise false."
30,onBackPressed(),on back pressed ,Method,,,android.support.v4.widget.DrawerLayout+isDrawerOpen(View) android.support.v4.widget.DrawerLayout+isDrawerOpen(View) android.support.v4.widget.DrawerLayout+closeDrawers() android.support.v4.widget.DrawerLayout+closeDrawers() com.kabouzeid.gramophone.ui.activities.base.AbsSlidingMusicPanelActivity+onBackPressed(),com.kabouzeid.gramophone.ui.activities.MainActivity+drawerLayout com.kabouzeid.gramophone.ui.activities.MainActivity+navigationView com.kabouzeid.gramophone.ui.activities.MainActivity+drawerLayout com.kabouzeid.gramophone.ui.activities.MainActivity+cab com.kabouzeid.gramophone.ui.activities.MainActivity+cab com.kabouzeid.gramophone.ui.activities.MainActivity+cab,231,6,1,,"@Override
    public void onBackPressed() {
        if (drawerLayout.isDrawerOpen(navigationView)) drawerLayout.closeDrawers();
        else if (cab != null && cab.isActive()) cab.finish();
        else super.onBackPressed();
    }",False,False,"This method is used to handle the back button press event. It checks if the navigation drawer is open and closes it, or if the contextual action bar is active and finishes it. Otherwise, it calls the superclass implementation of the back button press.",False,"The code overrides the onBackPressed() method in an Android activity. It checks if a navigation drawer is open and closes it, or if a contextual action bar (cab) is active and finishes it, otherwise it calls the default behavior of the super class."
31,onPause(),on pause ,Method,,,com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) android.support.v4.view.ViewPager+getCurrentItem() android.support.v4.view.ViewPager+getCurrentItem(),com.kabouzeid.gramophone.ui.activities.MainActivity+pager,167,5,4,,"@Override
    protected void onPause() {
        super.onPause();
        PreferenceUtil.getInstance(MainActivity.this).setLastStartPage(pager.getCurrentItem());
    }",False,False,This method is called when the activity is about to be paused. It saves the current page of a ViewPager into shared preferences using a utility class.,False,The code is overriding the onPause() method in the MainActivity class. It calls the super.onPause() method and then uses the PreferenceUtil class to set the last start page of the pager.
32,handlePlaybackIntent(Intent),handle playback intent intent ,Method,"onServiceConnected(ComponentName,IBinder)",,"android.content.Intent+getData() android.content.Intent+getData() android.content.Intent+getType() android.content.Intent+getType() android.content.Intent+getAction() android.content.Intent+getAction() java.lang.String+equals(Object) android.content.Intent+getAction() android.content.Intent+getAction() java.lang.String+equals(Object) com.kabouzeid.gramophone.helper.SearchQueryHelper+getSongs(Context,Bundle) com.kabouzeid.gramophone.helper.SearchQueryHelper+getSongs(Context,Bundle) android.content.Intent+getExtras() android.content.Intent+getExtras() com.kabouzeid.gramophone.helper.MusicPlayerRemote+getShuffleMode() com.kabouzeid.gramophone.helper.MusicPlayerRemote+getShuffleMode() com.kabouzeid.gramophone.helper.MusicPlayerRemote+openAndShuffleQueue(ArrayList<Song>,boolean) com.kabouzeid.gramophone.helper.MusicPlayerRemote+openAndShuffleQueue(ArrayList<Song>,boolean) com.kabouzeid.gramophone.helper.MusicPlayerRemote+openQueue(ArrayList<Song>,int,boolean) com.kabouzeid.gramophone.helper.MusicPlayerRemote+openQueue(ArrayList<Song>,int,boolean) java.lang.String+length() android.net.Uri+toString() android.net.Uri+toString() java.lang.String+length() com.kabouzeid.gramophone.helper.MusicPlayerRemote+playFile(String) com.kabouzeid.gramophone.helper.MusicPlayerRemote+playFile(String) java.io.File+getAbsolutePath() java.io.File+File(String) android.net.Uri+getPath() android.net.Uri+getPath() java.io.File+getAbsolutePath() java.lang.String+equals(Object) java.lang.String+equals(Object) com.kabouzeid.gramophone.ui.activities.MainActivity+parseIdFromIntent(Intent,String,String) com.kabouzeid.gramophone.ui.activities.MainActivity+parseIdFromIntent(Intent,String,String) android.content.Intent+getIntExtra(String,int) android.content.Intent+getIntExtra(String,int) java.util.ArrayList+addAll(Collection) java.util.ArrayList+addAll(Collection) com.kabouzeid.gramophone.loader.PlaylistSongLoader+getPlaylistSongList(Context,int) com.kabouzeid.gramophone.loader.PlaylistSongLoader+getPlaylistSongList(Context,int) com.kabouzeid.gramophone.helper.MusicPlayerRemote+openQueue(ArrayList<Song>,int,boolean) com.kabouzeid.gramophone.helper.MusicPlayerRemote+openQueue(ArrayList<Song>,int,boolean) java.lang.String+equals(Object) java.lang.String+equals(Object) com.kabouzeid.gramophone.ui.activities.MainActivity+parseIdFromIntent(Intent,String,String) com.kabouzeid.gramophone.ui.activities.MainActivity+parseIdFromIntent(Intent,String,String) android.content.Intent+getIntExtra(String,int) android.content.Intent+getIntExtra(String,int) com.kabouzeid.gramophone.helper.MusicPlayerRemote+openQueue(ArrayList<Song>,int,boolean) com.kabouzeid.gramophone.helper.MusicPlayerRemote+openQueue(ArrayList<Song>,int,boolean) com.kabouzeid.gramophone.loader.AlbumLoader+getAlbum(Context,int) com.kabouzeid.gramophone.loader.AlbumLoader+getAlbum(Context,int) java.lang.String+equals(Object) java.lang.String+equals(Object) com.kabouzeid.gramophone.ui.activities.MainActivity+parseIdFromIntent(Intent,String,String) com.kabouzeid.gramophone.ui.activities.MainActivity+parseIdFromIntent(Intent,String,String) android.content.Intent+getIntExtra(String,int) android.content.Intent+getIntExtra(String,int) com.kabouzeid.gramophone.helper.MusicPlayerRemote+openQueue(ArrayList<Song>,int,boolean) com.kabouzeid.gramophone.helper.MusicPlayerRemote+openQueue(ArrayList<Song>,int,boolean) com.kabouzeid.gramophone.loader.ArtistSongLoader+getArtistSongList(Context,int) com.kabouzeid.gramophone.loader.ArtistSongLoader+getArtistSongList(Context,int) android.content.Intent+Intent()",com.kabouzeid.gramophone.service.MusicService+SHUFFLE_MODE_SHUFFLE android.provider.MediaStore.Audio.Playlists+CONTENT_TYPE android.provider.MediaStore.Audio.Albums+CONTENT_TYPE android.provider.MediaStore.Audio.Artists+CONTENT_TYPE,2282,49,2,,"private void handlePlaybackIntent(@Nullable Intent intent) {
        if (intent == null) {
            return;
        }

        Uri uri = intent.getData();
        String mimeType = intent.getType();
        boolean handled = false;

        if (intent.getAction() != null && intent.getAction().equals(MediaStore.INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH)) {
            final ArrayList<Song> songs = SearchQueryHelper.getSongs(this, intent.getExtras());
            if (MusicPlayerRemote.getShuffleMode() == MusicService.SHUFFLE_MODE_SHUFFLE) {
                MusicPlayerRemote.openAndShuffleQueue(songs, true);
            } else {
                MusicPlayerRemote.openQueue(songs, 0, true);
            }
        }

        if (uri != null && uri.toString().length() > 0) {
            MusicPlayerRemote.playFile(new File(uri.getPath()).getAbsolutePath());
            handled = true;
        } else if (MediaStore.Audio.Playlists.CONTENT_TYPE.equals(mimeType)) {
            final int id = (int) parseIdFromIntent(intent, ""playlistId"", ""playlist"");
            if (id >= 0) {
                int position = intent.getIntExtra(""position"", 0);
                ArrayList<Song> songs = new ArrayList<>();
                songs.addAll(PlaylistSongLoader.getPlaylistSongList(this, id));
                MusicPlayerRemote.openQueue(songs, position, true);
                handled = true;
            }
        } else if (MediaStore.Audio.Albums.CONTENT_TYPE.equals(mimeType)) {
            final int id = (int) parseIdFromIntent(intent, ""albumId"", ""album"");
            if (id >= 0) {
                int position = intent.getIntExtra(""position"", 0);
                MusicPlayerRemote.openQueue(AlbumLoader.getAlbum(this, id).songs, position, true);
                handled = true;
            }
        } else if (MediaStore.Audio.Artists.CONTENT_TYPE.equals(mimeType)) {
            final int id = (int) parseIdFromIntent(intent, ""artistId"", ""artist"");
            if (id >= 0) {
                int position = intent.getIntExtra(""position"", 0);
                MusicPlayerRemote.openQueue(ArtistSongLoader.getArtistSongList(this, id), position, true);
                handled = true;
            }
        }
        if (handled) {
            setIntent(new Intent());
        }
    }",False,False,"This method handles different playback intents based on the type of media specified in the intent. It opens and plays songs, playlists, albums, or artist songs based on the intent data and type. If the intent is handled successfully, it sets a new empty intent.",True,"The `handlePlaybackIntent` method handles different types of playback intents in an Android music player app. It opens and plays songs from a search query, a file URI, a playlist, an album, or an artist, based on the intent data and type."
33,"parseIdFromIntent(Intent,String,String)",parse id from intent intent long key string key ,Method,handlePlaybackIntent(Intent) handlePlaybackIntent(Intent) handlePlaybackIntent(Intent),,"android.content.Intent+getLongExtra(String,long) android.content.Intent+getLongExtra(String,long) android.content.Intent+getStringExtra(String) android.content.Intent+getStringExtra(String) java.lang.Long+parseLong(String) java.lang.Long+parseLong(String) android.util.Log+e(String,String) android.util.Log+e(String,String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage()",com.kabouzeid.gramophone.ui.activities.MainActivity+TAG,539,15,2,,"private long parseIdFromIntent(@NonNull Intent intent, String longKey,
                                   String stringKey) {
        long id = intent.getLongExtra(longKey, -1);
        if (id < 0) {
            String idString = intent.getStringExtra(stringKey);
            if (idString != null) {
                try {
                    id = Long.parseLong(idString);
                } catch (NumberFormatException e) {
                    Log.e(TAG, e.getMessage());
                }
            }
        }
        return id;
    }",False,False,"This method parses an ID from an Intent object. It first tries to retrieve a long value using a specified key, and if that fails, it tries to retrieve a string value and parse it as a long. If successful, it returns the parsed ID, otherwise it returns -1.",False,"The `parseIdFromIntent` method takes an `Intent` object, a `longKey`, and a `stringKey` as parameters. It attempts to extract a long value from the intent using the `longKey`, and if that fails, it tries to parse a long value from the intent using the `stringKey`. If successful, it returns the parsed long value, otherwise it returns -1."
34,getCurrentFragment(),get current fragment ,Method,enableViews() disableViews() onCreateOptionsMenu(Menu) onOptionsItemSelected(MenuItem),,com.kabouzeid.gramophone.adapter.MusicLibraryPagerAdapter+getFragment(int) com.kabouzeid.gramophone.adapter.MusicLibraryPagerAdapter+getFragment(int) android.support.v4.view.ViewPager+getCurrentItem() android.support.v4.view.ViewPager+getCurrentItem(),com.kabouzeid.gramophone.ui.activities.MainActivity+pagerAdapter com.kabouzeid.gramophone.ui.activities.MainActivity+pager,109,3,1,,"public Fragment getCurrentFragment() {
        return pagerAdapter.getFragment(pager.getCurrentItem());
    }",True,True,The function of the method is to retrieve the current Fragment from the pagerAdapter based on the current item of the pager.,False,"The code defines a method named ""getCurrentFragment"" that returns the currently displayed fragment from a ViewPager. It achieves this by calling the ""getFragment"" method of a pagerAdapter object, passing the current item index of the pager."
35,isPlaylistPage(),is playlist page ,Method,onCreateOptionsMenu(Menu),,android.support.v4.view.ViewPager+getCurrentItem() android.support.v4.view.ViewPager+getCurrentItem(),com.kabouzeid.gramophone.ui.activities.MainActivity+pager,141,3,2,,"private boolean isPlaylistPage() {
        return pager.getCurrentItem() == MusicLibraryPagerAdapter.MusicFragments.PLAYLIST.ordinal();
    }",True,True,This method checks if the current page in the pager is the playlist page by comparing the current item with the ordinal value of the playlist fragment in the MusicLibraryPagerAdapter. It returns a boolean value indicating whether it is the playlist page or not.,False,"The method ""isPlaylistPage()"" checks if the current page in a pager is the playlist page. It does this by comparing the current item index with the ordinal value of the playlist fragment in the MusicLibraryPagerAdapter. It returns a boolean value indicating whether the current page is the playlist page or not."
36,"openCab(int,MaterialCab.Callback)",open cab menu callback ,Method,,,java.lang.Object+Object() com.kabouzeid.gramophone.util.PhonographColorUtil+shiftBackgroundColorForLightText(int) com.kabouzeid.gramophone.util.PhonographColorUtil+shiftBackgroundColorForLightText(int),com.kabouzeid.gramophone.ui.activities.MainActivity+cab com.kabouzeid.gramophone.ui.activities.MainActivity+cab com.kabouzeid.gramophone.ui.activities.MainActivity+cab com.kabouzeid.gramophone.ui.activities.MainActivity+cab com.kabouzeid.gramophone.ui.activities.MainActivity+cab,484,10,1,,"@Override
    public MaterialCab openCab(final int menu, final MaterialCab.Callback callback) {
        if (cab != null && cab.isActive()) cab.finish();
        cab = new MaterialCab(this, R.id.cab_stub)
                .setMenu(menu)
                .setCloseDrawableRes(R.drawable.ic_close_white_24dp)
                .setBackgroundColor(PhonographColorUtil.shiftBackgroundColorForLightText(ThemeStore.primaryColor(this)))
                .start(callback);
        return cab;
    }",True,True,"This method opens a MaterialCab (a contextual action bar) with a specified menu and callback. If there is already an active cab, it is finished before creating a new one. The cab is then customized with a close drawable, background color, and started with the provided callback. Finally, the cab is returned.",False,"This code defines a method called ""openCab"" that creates and opens a MaterialCab (a contextual action bar) with a specified menu and callback. It also sets the close drawable, background color, and starts the cab with the given callback. The method returns the created MaterialCab object."
37,addOnAppBarOffsetChangedListener(OnOffsetChangedListener),add on app bar offset changed listener on offset changed listener ,Method,,"com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewFragment+onViewCreated(View,Bundle)",,com.kabouzeid.gramophone.ui.activities.MainActivity+appbar,169,3,1,,"public void addOnAppBarOffsetChangedListener(OnOffsetChangedListener onOffsetChangedListener) {
        appbar.addOnOffsetChangedListener(onOffsetChangedListener);
    }",True,True,This method adds an OnOffsetChangedListener to the AppBarLayout's list of listeners.,False,"This code defines a method called ""addOnAppBarOffsetChangedListener"" that takes an ""OnOffsetChangedListener"" as a parameter. It adds the provided listener to the ""appbar"" object's list of offset changed listeners."
38,removeOnAppBarOffsetChangedListener(OnOffsetChangedListener),remove on app bar offset changed listener on offset changed listener ,Method,,com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewFragment+onDestroyView(),,com.kabouzeid.gramophone.ui.activities.MainActivity+appbar,175,3,1,,"public void removeOnAppBarOffsetChangedListener(OnOffsetChangedListener onOffsetChangedListener) {
        appbar.removeOnOffsetChangedListener(onOffsetChangedListener);
    }",False,True,This method removes an OnOffsetChangedListener from the appbar.,False,"The given code defines a method called ""removeOnAppBarOffsetChangedListener"" which takes an ""OnOffsetChangedListener"" as a parameter. This method is responsible for removing the specified listener from the appbar's list of offset changed listeners."
39,getTotalAppBarScrollingRange(),get total app bar scrolling range ,Method,,"com.kabouzeid.gramophone.ui.fragments.mainactivityfragments.AbsMainActivityRecyclerViewFragment+onOffsetChanged(AppBarLayout,int)",,com.kabouzeid.gramophone.ui.activities.MainActivity+appbar,94,3,1,,"public int getTotalAppBarScrollingRange() {
        return appbar.getTotalScrollRange();
    }",True,True,This method returns the total scrolling range of the app bar.,False,The code defines a method named `getTotalAppBarScrollingRange()` that returns an integer value. This method retrieves the total scrolling range of an `appbar` object and returns it as the result.
40,onPanelExpanded(View),on panel expanded view ,Method,,,com.kabouzeid.gramophone.ui.activities.base.AbsSlidingMusicPanelActivity+onPanelExpanded(View) android.support.v4.widget.DrawerLayout+setDrawerLockMode(int) android.support.v4.widget.DrawerLayout+setDrawerLockMode(int),com.kabouzeid.gramophone.ui.activities.MainActivity+drawerLayout android.support.v4.widget.DrawerLayout+LOCK_MODE_LOCKED_CLOSED,175,5,1,,"@Override
    public void onPanelExpanded(View view) {
        super.onPanelExpanded(view);
        drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);
    }",False,False,This method is used to lock the drawer layout in a closed state when the panel is expanded.,False,"This code is an overridden method that is called when a panel is expanded. It locks the drawer layout, preventing it from being opened or closed while the panel is expanded."
41,onPanelCollapsed(View),on panel collapsed view ,Method,,,com.kabouzeid.gramophone.ui.activities.base.AbsSlidingMusicPanelActivity+onPanelCollapsed(View) android.support.v4.widget.DrawerLayout+setDrawerLockMode(int) android.support.v4.widget.DrawerLayout+setDrawerLockMode(int),com.kabouzeid.gramophone.ui.activities.MainActivity+drawerLayout android.support.v4.widget.DrawerLayout+LOCK_MODE_UNLOCKED,172,5,1,,"@Override
    public void onPanelCollapsed(View view) {
        super.onPanelCollapsed(view);
        drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);
    }",False,False,This method is used to handle the event when a panel is collapsed. It unlocks the drawer layout by setting the drawer lock mode to unlocked.,False,This code is an overridden method that is called when a panel is collapsed. It unlocks the drawer layout by setting the drawer lock mode to unlocked.
42,checkShowChangelog(),check show changelog ,Method,,,"com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) com.kabouzeid.gramophone.util.PreferenceUtil+getInstance(Context) android.support.v4.app.DialogFragment+show(FragmentManager,String) com.kabouzeid.gramophone.dialogs.ChangelogDialog+create() com.kabouzeid.gramophone.dialogs.ChangelogDialog+create() android.support.v4.app.DialogFragment+show(FragmentManager,String) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()",android.content.pm.PackageInfo+versionCode,505,11,2,,"private void checkShowChangelog() {
        try {
            PackageInfo pInfo = getPackageManager().getPackageInfo(getPackageName(), 0);
            int currentVersion = pInfo.versionCode;
            if (currentVersion != PreferenceUtil.getInstance(this).getLastChangelogVersion()) {
                ChangelogDialog.create().show(getSupportFragmentManager(), ""CHANGE_LOG_DIALOG"");
            }
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
    }",False,False,"This method checks if the current version of the app is different from the last version that showed the changelog. If they are different, it shows a dialog with the changelog.",True,"The `checkShowChangelog()` method checks if the current version of the app is different from the last version that the user saw the changelog for. If it is different, it shows a changelog dialog. This method is typically used to display the changelog to the user when a new version of the app is installed."
43,"onDrawerSlide(View,float)",on drawer slide drawer view slide offset ,Method,,,,,84,4,1,,"@Override
    public void onDrawerSlide(View drawerView, float slideOffset) {

    }",False,False,This method is used to handle the event when the drawer is being slid. It takes in the drawer view and the slide offset as parameters.,False,"The code snippet is an implementation of the `onDrawerSlide` method, which is called when a drawer view is being slid. However, the method does not contain any specific functionality or logic, as it is empty."
44,onDrawerOpened(View),on drawer opened drawer view ,Method,,,com.kabouzeid.gramophone.ui.activities.base.AbsSlidingMusicPanelActivity+setLightStatusbar(boolean) com.kabouzeid.gramophone.ui.activities.base.AbsSlidingMusicPanelActivity+setLightStatusbar(boolean),,99,4,1,,"@Override
    public void onDrawerOpened(View drawerView) {
        setLightStatusbar(false);
    }",False,False,"This method is used to handle the event when the drawer is opened. It calls the method ""setLightStatusbar"" and passes a boolean value of false as an argument.",False,"This code is an implementation of the `onDrawerOpened` method, which is called when a drawer is opened. It calls the `setLightStatusbar` function with a `false` parameter, indicating that the status bar should not have a light theme."
45,onDrawerClosed(View),on drawer closed drawer view ,Method,,,com.kabouzeid.gramophone.ui.activities.base.AbsThemeActivity+setLightStatusbarAuto(int) com.kabouzeid.gramophone.ui.activities.base.AbsThemeActivity+setLightStatusbarAuto(int),,127,4,1,,"@Override
    public void onDrawerClosed(View drawerView) {
        setLightStatusbarAuto(ThemeStore.primaryColor(this));
    }",False,False,The function of the method is to automatically set the status bar color based on the primary color of the theme when the drawer is closed.,False,"The code is an implementation of the `onDrawerClosed` method, which is called when a drawer view is closed. It calls the `setLightStatusbarAuto` function with the primary color obtained from the `ThemeStore` class as an argument, presumably to update the status bar color."
46,onDrawerStateChanged(int),on drawer state changed new state ,Method,,,,,69,4,1,,"@Override
    public void onDrawerStateChanged(int newState) {

    }",False,False,This method is used to handle changes in the state of a drawer.,False,"The code snippet defines an overridden method called ""onDrawerStateChanged"" which takes an integer parameter ""newState"". However, the method does not contain any implementation or functionality."
