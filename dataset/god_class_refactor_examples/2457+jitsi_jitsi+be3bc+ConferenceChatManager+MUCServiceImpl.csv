index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,logger,logger the object used for logging ,Field,,,,,143,5,26,"/** 
 * The object used for logging.
 */
","/**
     * The object used for logging.
     */
    private static final Logger logger
        = Logger.getLogger(ConferenceChatManager.class);",False,False,"/** 
 * The object used for logging.
 */
",False,"/** 
 * The object used for logging.
 */
"
2,chatRoomHistory,chat room history maps each history window to a chat room wrapper ,Field,,,,,209,5,18,"/** 
 * Maps each history window to a <tt>ChatRoomWrapper</tt>.
 */
","/**
     * Maps each history window to a <tt>ChatRoomWrapper</tt>.
     */
    private final Hashtable<ChatRoomWrapper, HistoryWindow> chatRoomHistory =
        new Hashtable<ChatRoomWrapper, HistoryWindow>();",False,False,"/** 
 * Maps each history window to a <tt>ChatRoomWrapper</tt>.
 */
",False,"/** 
 * Maps each history window to a <tt>ChatRoomWrapper</tt>.
 */
"
3,chatRoomList,chat room list the list of persistent chat rooms ,Field,,,,,119,4,18,"/** 
 * The list of persistent chat rooms.
 */
","/**
     * The list of persistent chat rooms.
     */
    private final ChatRoomList chatRoomList = new ChatRoomList();",False,False,"/** 
 * The list of persistent chat rooms.
 */
",False,"/** 
 * The list of persistent chat rooms.
 */
"
4,adHocChatRoomList,ad hoc chat room list the list of ad hoc chat rooms ,Field,,,,,130,4,18,"/** 
 * The list of ad-hoc chat rooms.
 */
","/**
     * The list of ad-hoc chat rooms.
     */
    private final AdHocChatRoomList adHocChatRoomList = new AdHocChatRoomList();",False,False,"/** 
 * The list of ad-hoc chat rooms.
 */
",False,"/** 
 * The list of ad-hoc chat rooms.
 */
"
5,listChangeListeners,list change listeners a list of all chat room list change listener s ,Field,,,,,196,5,18,"/** 
 * A list of all <tt>ChatRoomListChangeListener</tt>-s.
 */
","/**
     * A list of all <tt>ChatRoomListChangeListener</tt>-s.
     */
    private final Vector<ChatRoomListChangeListener> listChangeListeners
        = new Vector<ChatRoomListChangeListener>();",False,False,"/** 
 * A list of all <tt>ChatRoomListChangeListener</tt>-s.
 */
",False,"/** 
 * A list of all <tt>ChatRoomListChangeListener</tt>-s.
 */
"
6,adHoclistChangeListeners,ad hoclist change listeners a list of all ad hoc chat room list change listener s ,Field,,,,,216,5,18,"/** 
 * A list of all <tt>AdHocChatRoomListChangeListener</tt>-s.
 */
","/**
     * A list of all <tt>AdHocChatRoomListChangeListener</tt>-s.
     */
    private final Vector<AdHocChatRoomListChangeListener>
        adHoclistChangeListeners = new Vector<AdHocChatRoomListChangeListener>();",False,False,"/** 
 * A list of all <tt>AdHocChatRoomListChangeListener</tt>-s.
 */
",False,"/** 
 * A list of all <tt>AdHocChatRoomListChangeListener</tt>-s.
 */
"
7,ConferenceChatManager(),conference chat manager creates an instance of conference chat manager ,Method,,,java.lang.Thread+start() +() +run(),,458,18,1,"/** 
 * Creates an instance of <tt>ConferenceChatManager</tt>.
 */
","/**
     * Creates an instance of <tt>ConferenceChatManager</tt>.
     */
    public ConferenceChatManager()
    {
        // Loads the chat rooms list in a separate thread.
        new Thread()
        {
            @Override
            public void run()
            {
                chatRoomList.loadList();
                adHocChatRoomList.loadList();
            }
        }.start();

        GuiActivator.bundleContext.addServiceListener(this);
    }",False,False,The function of this method is to create an instance of ConferenceChatManager and load the chat rooms list and ad hoc chat room list in a separate thread. It also adds a service listener to the GuiActivator.bundleContext.,True,The code creates an instance of the ConferenceChatManager class. It loads the chat rooms list and the ad hoc chat room list in a separate thread. It also adds a service listener to the GuiActivator bundle context.
8,getChatRoomList(),get chat room list returns all chat room providers currently contained in the chat room list return all chat room providers currently contained in the chat roomlist ,Method,,"net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChatInternal(ChatRoom,boolean,String) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListModel+ChatRoomListModel() net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableModel+ChatRoomTableModel(JTable) net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.JoinChatRoomWindow+JoinChatRoomWindow(ChatRoomProviderWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.JoinChatRoomWizard+JoinChatRoomWizard(MainFrame) net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+contactClicked(ContactListEvent) net.java.sip.communicator.impl.gui.main.contactlist.ContactListTreeCellRenderer+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.login.LoginRendererSwingImpl+protocolProviderConnected(ProtocolProviderService,long)",,net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList,273,10,1,"/** 
 * Returns all chat room providers currently contained in the chat room list.
 * @return  all chat room providers currently contained in the chat roomlist.
 */
","/**
     * Returns all chat room providers currently contained in the chat room
     * list.
     * @return  all chat room providers currently contained in the chat room
     * list.
     */
    public ChatRoomList getChatRoomList()
    {
        return chatRoomList;
    }",True,True,"This method returns the chat room list, which contains all chat room providers currently in the chat room list.",False,"This code defines a method named ""getChatRoomList"" that returns the chat room list. The method has a summary description stating that it returns all chat room providers currently contained in the chat room list."
9,getAdHocChatRoomList(),get ad hoc chat room list returns all chat room providers currently contained in the ad hoc chat room list return all chat room providers currently contained in the ad hoc chatroom list ,Method,,"net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChatInternal(AdHocChatRoom,boolean,String)",,net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList,309,11,1,"/** 
 * Returns all chat room providers currently contained in the ad-hoc chat room list.
 * @return  all chat room providers currently contained in the ad-hoc chatroom list.
 */
","/**
     * Returns all chat room providers currently contained in the ad-hoc chat
     * room list.
     *
     * @return  all chat room providers currently contained in the ad-hoc chat
     * room list.
     */
    public AdHocChatRoomList getAdHocChatRoomList()
    {
        return adHocChatRoomList;
    }",False,False,"This method returns the ad-hoc chat room list, which contains all chat room providers currently in the list.",False,"This code defines a method named ""getAdHocChatRoomList"" that returns the ad-hoc chat room list. The method returns an object of type ""AdHocChatRoomList"" which contains all the chat room providers currently present in the ad-hoc chat room list."
10,invitationReceived(ChatRoomInvitationReceivedEvent),invitation received evt handles chat room invitation received event s ,Method,,,"net.java.sip.communicator.impl.gui.main.chat.conference.InvitationReceivedDialog+InvitationReceivedDialog(ConferenceChatManager,OperationSetMultiUserChat,ChatRoomInvitation) net.java.sip.communicator.service.protocol.event.ChatRoomInvitationReceivedEvent+getSourceOperationSet() net.java.sip.communicator.service.protocol.event.ChatRoomInvitationReceivedEvent+getSourceOperationSet() net.java.sip.communicator.service.protocol.event.ChatRoomInvitationReceivedEvent+getInvitation() net.java.sip.communicator.service.protocol.event.ChatRoomInvitationReceivedEvent+getInvitation() net.java.sip.communicator.plugin.desktoputil.SIPCommDialog+setVisible(boolean) net.java.sip.communicator.plugin.desktoputil.SIPCommDialog+setVisible(boolean)",,389,13,1,"/** 
 * Handles <tt>ChatRoomInvitationReceivedEvent</tt>-s.
 */
","/**
     * Handles <tt>ChatRoomInvitationReceivedEvent</tt>-s.
     */
    public void invitationReceived(ChatRoomInvitationReceivedEvent evt)
    {
        InvitationReceivedDialog dialog
            = new InvitationReceivedDialog(
                    this,
                    evt.getSourceOperationSet(),
                    evt.getInvitation());

        dialog.setVisible(true);
    }",False,False,This method handles ChatRoomInvitationReceivedEvent by creating a new InvitationReceivedDialog and making it visible.,False,This method handles the event of receiving a chat room invitation. It creates a dialog box to display the invitation and makes it visible to the user.
11,invitationRejected(ChatRoomInvitationRejectedEvent),invitation rejected evt ,Method,,,,,70,1,1,,public void invitationRejected(ChatRoomInvitationRejectedEvent evt) {},False,False,This method handles the event of a chat room invitation being rejected.,False,"The code contains a method named ""invitationRejected"" which takes a ChatRoomInvitationRejectedEvent as a parameter. The purpose or functionality of this method is not specified in the given code snippet."
12,messageDelivered(ChatRoomMessageDeliveredEvent),message delivered evt implements the chat room message listener message delivered method shows the message in the conversation area and clears the write message area param evt the chat room message delivered event that notified usthat the message was delivered to its destination ,Method,,,"java.util.EventObject+getSource() java.util.EventObject+getSource() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.service.protocol.ChatRoom+getName() net.java.sip.communicator.service.protocol.ChatRoom+getName() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoom,boolean) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoom,boolean) net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getEventType() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getEventType() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getMessage() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getMessage() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.service.protocol.ChatRoom+getUserNickname() net.java.sip.communicator.service.protocol.ChatRoom+getUserNickname() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getTimestamp() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID()",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+CONVERSATION_MESSAGE_DELIVERED net.java.sip.communicator.service.gui.Chat+OUTGOING_MESSAGE net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+ACTION_MESSAGE_DELIVERED net.java.sip.communicator.service.gui.Chat+ACTION_MESSAGE,1631,49,1,"/** 
 * Implements the <tt>ChatRoomMessageListener.messageDelivered</tt> method. <br> Shows the message in the conversation area and clears the write message area.
 * @param evt the <tt>ChatRoomMessageDeliveredEvent</tt> that notified usthat the message was delivered to its destination
 */
","/**
     * Implements the <tt>ChatRoomMessageListener.messageDelivered</tt> method.
     * <br>
     * Shows the message in the conversation area and clears the write message
     * area.
     * @param evt the <tt>ChatRoomMessageDeliveredEvent</tt> that notified us
     * that the message was delivered to its destination
     */
    public void messageDelivered(ChatRoomMessageDeliveredEvent evt)
    {
        ChatRoom sourceChatRoom = (ChatRoom) evt.getSource();

        if (logger.isTraceEnabled())
            logger.trace(
                ""MESSAGE DELIVERED to chat room: "" + sourceChatRoom.getName());

        ChatPanel chatPanel = GuiActivator.getUIService().getChatWindowManager()
            .getMultiChat(sourceChatRoom, false);

        if(chatPanel != null)
        {
            String messageType;

            switch (evt.getEventType())
            {
            case ChatRoomMessageDeliveredEvent.CONVERSATION_MESSAGE_DELIVERED:
                messageType = Chat.OUTGOING_MESSAGE;
                break;
            case ChatRoomMessageDeliveredEvent.ACTION_MESSAGE_DELIVERED:
                messageType = Chat.ACTION_MESSAGE;
                break;
            default:
                messageType = null;
                break;
            }

            Message msg = evt.getMessage();

            chatPanel.addMessage(
                sourceChatRoom.getUserNickname(),
                null,
                evt.getTimestamp(),
                messageType,
                msg.getContent(),
                msg.getContentType(),
                msg.getMessageUID(),
                null);
        }
    }",False,False,"This method is a listener for the event of a chat room message being delivered. It retrieves the source chat room, checks the type of message delivered, and adds the message to the chat panel.",False,"This code implements the messageDelivered method, which is called when a message is successfully delivered to a chat room. It retrieves the source chat room, determines the message type, and adds the message to the chat panel with relevant details such as sender, timestamp, content, and message UID."
13,messageReceived(ChatRoomMessageReceivedEvent),message received evt implements the chat room message listener message received method obtains the corresponding chat panel and process the message there param evt the chat room message received event that notified usthat a message has been received ,Method,,,"net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getSourceChatRoomMember() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getSourceChatRoomMember() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getEventType() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getEventType() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.service.protocol.ChatRoomMember+getContactAddress() net.java.sip.communicator.service.protocol.ChatRoomMember+getContactAddress() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getMessage() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getMessage() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.service.protocol.ChatRoom+isSystem() net.java.sip.communicator.service.protocol.ChatRoom+isSystem() net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getSystemRoomWrapper() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getSystemRoomWrapper() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoom,boolean,String) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoom,boolean,String) net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+isHistoryMessage() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+isHistoryMessage() net.java.sip.communicator.impl.gui.main.chat.ChatConversationPanel+getLastIncomingMsgTimestamp() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+getChatConversationPanel() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+getChatConversationPanel() net.java.sip.communicator.impl.gui.main.chat.ChatConversationPanel+getLastIncomingMsgTimestamp() net.java.sip.communicator.impl.gui.main.chat.ChatSession+getHistoryBeforeDate(Date,int) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+getChatSession() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+getChatSession() net.java.sip.communicator.impl.gui.main.chat.ChatSession+getHistoryBeforeDate(Date,int) java.util.Date+Date(long) java.util.Date+equals(Object) java.util.Date+equals(Object) java.util.Date+Date(long) java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() java.util.Date+getTime() java.util.Date+getTime() java.util.Collection+size() java.util.Collection+size() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() java.util.Date+equals(Object) net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() java.util.Date+equals(Object) net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() java.util.Date+equals(Object) net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() java.util.Date+equals(Object) net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean)",net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+CONVERSATION_MESSAGE_RECEIVED net.java.sip.communicator.service.gui.Chat+INCOMING_MESSAGE net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+SYSTEM_MESSAGE_RECEIVED net.java.sip.communicator.service.gui.Chat+SYSTEM_MESSAGE net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+ACTION_MESSAGE_RECEIVED net.java.sip.communicator.service.gui.Chat+ACTION_MESSAGE net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList,3948,113,1,"/** 
 * Implements the <tt>ChatRoomMessageListener.messageReceived</tt> method. <br> Obtains the corresponding <tt>ChatPanel</tt> and process the message there.
 * @param evt the <tt>ChatRoomMessageReceivedEvent</tt> that notified usthat a message has been received
 */
","/**
     * Implements the <tt>ChatRoomMessageListener.messageReceived</tt> method.
     * <br>
     * Obtains the corresponding <tt>ChatPanel</tt> and process the message
     * there.
     * @param evt the <tt>ChatRoomMessageReceivedEvent</tt> that notified us
     * that a message has been received
     */
    public void messageReceived(ChatRoomMessageReceivedEvent evt)
    {
        ChatRoom sourceChatRoom = evt.getSourceChatRoom();
        ChatRoomMember sourceMember = evt.getSourceChatRoomMember();

        String messageType = null;

        switch (evt.getEventType())
        {
        case ChatRoomMessageReceivedEvent.CONVERSATION_MESSAGE_RECEIVED:
            messageType = Chat.INCOMING_MESSAGE;
            break;
        case ChatRoomMessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED:
            messageType = Chat.SYSTEM_MESSAGE;
            break;
        case ChatRoomMessageReceivedEvent.ACTION_MESSAGE_RECEIVED:
            messageType = Chat.ACTION_MESSAGE;
            break;
        }

        if (logger.isTraceEnabled())
            logger.trace(""MESSAGE RECEIVED from contact: ""
            + sourceMember.getContactAddress());

        Message message = evt.getMessage();

        ChatPanel chatPanel = null;

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();

        if(sourceChatRoom.isSystem())
        {
            ChatRoomProviderWrapper serverWrapper
                = chatRoomList.findServerWrapperFromProvider(
                    sourceChatRoom.getParentProvider());

            chatPanel = chatWindowManager.getMultiChat(
                serverWrapper.getSystemRoomWrapper(), true);
        }
        else
        {
            chatPanel = chatWindowManager.getMultiChat(
                sourceChatRoom, true, message.getMessageUID());
        }

        String messageContent = message.getContent();

        if (evt.isHistoryMessage())
        {
            Date timeStamp = chatPanel.getChatConversationPanel()
                .getLastIncomingMsgTimestamp();
            Collection<Object> c =
                chatPanel.getChatSession().getHistoryBeforeDate(
                    new Date(
                        timeStamp.equals(new Date(0))
                        ? System.currentTimeMillis() - 10000
                        : timeStamp.getTime()
                    ), 20);
            if (c.size() > 0)
            {
                boolean isPresent = false;
                for (Object o : c)
                {
                    if (o instanceof ChatRoomMessageDeliveredEvent)
                    {
                        ChatRoomMessageDeliveredEvent ev =
                            (ChatRoomMessageDeliveredEvent) o;
                        if (evt.getTimestamp() != null
                            && evt.getTimestamp().equals(ev.getTimestamp()))
                        {
                            isPresent = true;
                            break;
                        }
                    }
                    else if(o instanceof ChatRoomMessageReceivedEvent)
                    {
                        ChatRoomMessageReceivedEvent ev =
                            (ChatRoomMessageReceivedEvent) o;
                        if (evt.getTimestamp() != null
                            && evt.getTimestamp().equals(ev.getTimestamp()))
                        {
                            isPresent = true;
                            break;
                        }
                    }
                }

                if (isPresent)
                    return;
            }
        }

        chatPanel.addMessage(
            sourceMember.getName(),
            null,
            evt.getTimestamp(),
            messageType,
            messageContent,
            message.getContentType(),
            message.getMessageUID(),
            null);

        chatWindowManager.openChat(chatPanel, false);
    }",False,False,"This method is used to handle received chat room messages. It obtains the chat room and chat room member from the event, determines the type of message received, and processes the message in the corresponding chat panel. It also handles history messages and adds the message to the chat panel. Finally, it opens the chat panel in the chat window manager.",False,"This code implements the messageReceived method, which is called when a message is received in a chat room. It processes the message by obtaining the chat panel, determining the message type, and adding the message to the chat panel."
14,isPrivate(ChatRoom),is private chat room determines whether a specific chat room is private i e represents a one to one conversation which is not a channel since the interface link chat room does not expose the private property anheuristic is used as a workaround 1 a system chat room is obviously not private and 2 a chat room is private if it has only one chat room member who is not the local user param chat room the chat room to be determined as private or not return true if the specified chat room is private otherwise false ,Method,,net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatSession+isContactListSupported(),net.java.sip.communicator.service.protocol.ChatRoom+isSystem() net.java.sip.communicator.service.protocol.ChatRoom+isSystem() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.service.protocol.ChatRoom+getMembersCount() net.java.sip.communicator.service.protocol.ChatRoom+getMembersCount() net.java.sip.communicator.service.protocol.ChatRoom+getUserNickname() net.java.sip.communicator.service.protocol.ChatRoom+getUserNickname() net.java.sip.communicator.service.protocol.ChatRoom+getMembers() net.java.sip.communicator.service.protocol.ChatRoom+getMembers() java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.ChatRoomMember+getName(),,1237,31,8,"/** 
 * Determines whether a specific <code>ChatRoom</code> is private i.e. represents a one-to-one conversation which is not a channel. Since the interface  {@link ChatRoom} does not expose the private property, anheuristic is used as a workaround: (1) a system <code>ChatRoom</code> is obviously not private and (2) a <code>ChatRoom</code> is private if it has only one <code>ChatRoomMember</code> who is not the local user.
 * @param chatRoom the <code>ChatRoom</code> to be determined as private or not
 * @return <tt>true</tt> if the specified <code>ChatRoom</code> is private;otherwise, <tt>false</tt>
 */
","/**
     * Determines whether a specific <code>ChatRoom</code> is private i.e.
     * represents a one-to-one conversation which is not a channel. Since the
     * interface {@link ChatRoom} does not expose the private property, an
     * heuristic is used as a workaround: (1) a system <code>ChatRoom</code> is
     * obviously not private and (2) a <code>ChatRoom</code> is private if it
     * has only one <code>ChatRoomMember</code> who is not the local user.
     *
     * @param chatRoom
     *            the <code>ChatRoom</code> to be determined as private or not
     * @return <tt>true</tt> if the specified <code>ChatRoom</code> is private;
     *         otherwise, <tt>false</tt>
     */
    static boolean isPrivate(ChatRoom chatRoom)
    {
        if (!chatRoom.isSystem()
            && chatRoom.isJoined()
            && (chatRoom.getMembersCount() == 1))
        {
            String nickname = chatRoom.getUserNickname();

            if (nickname != null)
            {
                for (ChatRoomMember member : chatRoom.getMembers())
                    if (nickname.equals(member.getName()))
                        return false;
                return true;
            }
        }
        return false;
    }",False,True,"The function determines whether a given ChatRoom is private or not. It checks if the ChatRoom is not a system ChatRoom, is joined, and has only one member who is not the local user. If these conditions are met, it further checks if the local user's nickname is not equal to any of the member's names. If it is not equal, then the ChatRoom is considered private and the function returns true. Otherwise, it returns false.",False,"This code defines a method called ""isPrivate"" that determines whether a given ChatRoom is private or not. It checks if the ChatRoom is not a system room, is joined, and has only one member who is not the local user. If these conditions are met, the method returns true; otherwise, it returns false."
15,messageDeliveryFailed(ChatRoomMessageDeliveryFailedEvent),message delivery failed evt implements the chat room message listener message delivery failed method in the conversation area shows an error message explaining the problem param evt the chat room message delivery failed event that notifiedus of a delivery failure ,Method,,,"net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getMessage() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getMessage() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getDestinationChatRoomMember() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getDestinationChatRoomMember() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getReason() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getReason() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoom,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoom,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,Date,String,String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,Date,String,String,String) net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.ChatRoomMember+getName() java.util.Date+Date() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addErrorMessage(String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addErrorMessage(String,String) net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean)",net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+OFFLINE_MESSAGES_NOT_SUPPORTED net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+NETWORK_FAILURE net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+PROVIDER_NOT_REGISTERED net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+INTERNAL_ERROR net.java.sip.communicator.service.gui.Chat+OUTGOING_MESSAGE,3059,82,1,"/** 
 * Implements the <tt>ChatRoomMessageListener.messageDeliveryFailed</tt> method. <br> In the conversation area shows an error message, explaining the problem.
 * @param evt the <tt>ChatRoomMessageDeliveryFailedEvent</tt> that notifiedus of a delivery failure
 */
","/**
     * Implements the <tt>ChatRoomMessageListener.messageDeliveryFailed</tt>
     * method.
     * <br>
     * In the conversation area shows an error message, explaining the problem.
     * @param evt the <tt>ChatRoomMessageDeliveryFailedEvent</tt> that notified
     * us of a delivery failure
     */
    public void messageDeliveryFailed(ChatRoomMessageDeliveryFailedEvent evt)
    {
        ChatRoom sourceChatRoom = evt.getSourceChatRoom();

        String errorMsg = null;

        /*
         * FIXME ChatRoomMessageDeliveryFailedEvent#getSource() is not a Message
         * instance at the time of this writing and the attempt ""(Message)
         * evt.getSource()"" seems to be to get the message which failed to be
         * delivered. I'm not sure it's
         * ChatRoomMessageDeliveryFailedEvent#getMessage() but since it's the
         * only message I can get out of ChatRoomMessageDeliveryFailedEvent, I'm
         * using it.
         */
        Message sourceMessage = evt.getMessage();

        ChatRoomMember destMember = evt.getDestinationChatRoomMember();

        if (evt.getErrorCode()
            == MessageDeliveryFailedEvent.OFFLINE_MESSAGES_NOT_SUPPORTED)
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                ""service.gui.MSG_DELIVERY_NOT_SUPPORTED"",
                new String[]{destMember.getName()});
        }
        else if (evt.getErrorCode()
            == MessageDeliveryFailedEvent.NETWORK_FAILURE)
        {
            errorMsg = GuiActivator.getResources()
                .getI18NString(""service.gui.MSG_NOT_DELIVERED"");
        }
        else if (evt.getErrorCode()
            == MessageDeliveryFailedEvent.PROVIDER_NOT_REGISTERED)
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                ""service.gui.MSG_SEND_CONNECTION_PROBLEM"");
        }
        else if (evt.getErrorCode()
            == MessageDeliveryFailedEvent.INTERNAL_ERROR)
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                ""service.gui.MSG_DELIVERY_INTERNAL_ERROR"");
        }
        else
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                 ""service.gui.MSG_DELIVERY_UNKNOWN_ERROR"");
        }

        String reason = evt.getReason();
        if (reason != null)
            errorMsg += "" "" + GuiActivator.getResources().getI18NString(
                ""service.gui.ERROR_WAS"",
                new String[]{reason});

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();
        ChatPanel chatPanel
            = chatWindowManager.getMultiChat(sourceChatRoom, true);

        chatPanel.addMessage(
            destMember.getName(),
            new Date(),
            Chat.OUTGOING_MESSAGE,
            sourceMessage.getContent(),
            sourceMessage.getContentType());

        chatPanel.addErrorMessage(
            destMember.getName(),
            errorMsg);

        chatWindowManager.openChat(chatPanel, false);
    }",False,False,"This method serves to handle the event of a message delivery failure in a chat room. It retrieves information about the failure, such as the source chat room, the failed message, and the destination chat room member. Based on the error code of the failure, it generates an error message to be displayed in the conversation area. It then adds the failed message and the error message to the chat panel, and opens the chat window.",False,"This code implements the method ""messageDeliveryFailed"" which is called when a chat room message fails to be delivered. It displays an error message in the conversation area, indicating the reason for the delivery failure and adds the failed message to the chat panel."
16,localUserAdHocPresenceChanged(LocalUserAdHocChatRoomPresenceChangeEvent),local user ad hoc presence changed evt implements the local user ad hoc chat room presence listener local user presence changed method param evt the local user ad hoc chat room presence change event thatnotified us of a presence change ,Method,,,"net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getAdHocChatRoom() net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getAdHocChatRoom() net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findChatRoomWrapperFromAdHocChatRoom(AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findChatRoomWrapperFromAdHocChatRoom(AdHocChatRoom) net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getEventType() net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getEventType() java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+isShown() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+isShown() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocConferenceChatSession+loadChatRoom(AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+getChatSession() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+getChatSession() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocConferenceChatSession+loadChatRoom(AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.service.protocol.AdHocChatRoom+addMessageListener(AdHocChatRoomMessageListener) net.java.sip.communicator.service.protocol.AdHocChatRoom+addMessageListener(AdHocChatRoomMessageListener) java.lang.String+equals(Object) net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getEventType() net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getEventType() java.lang.String+equals(Object) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.AdHocChatRoom+getName() net.java.sip.communicator.service.protocol.AdHocChatRoom+getName() net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getReason() net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getReason() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+closeAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+closeAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.service.protocol.AdHocChatRoom+removeMessageListener(AdHocChatRoomMessageListener) net.java.sip.communicator.service.protocol.AdHocChatRoom+removeMessageListener(AdHocChatRoomMessageListener)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+LOCAL_USER_JOINED net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeEvent+AD_HOC_CHAT_ROOM_CHANGED net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+LOCAL_USER_JOIN_FAILED net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+LOCAL_USER_LEFT net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+LOCAL_USER_DROPPED net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeEvent+AD_HOC_CHAT_ROOM_CHANGED,3061,73,1,"/** 
 * Implements the <tt>LocalUserAdHocChatRoomPresenceListener.localUserPresenceChanged</tt> method
 * @param evt the <tt>LocalUserAdHocChatRoomPresenceChangeEvent</tt> thatnotified us of a presence change
 */
","/**
     * Implements the
     * <tt>LocalUserAdHocChatRoomPresenceListener.localUserPresenceChanged</tt>
     * method
     *
     * @param evt the <tt>LocalUserAdHocChatRoomPresenceChangeEvent</tt> that
     * notified us of a presence change
     */
    public void localUserAdHocPresenceChanged(
            LocalUserAdHocChatRoomPresenceChangeEvent evt)
    {
        AdHocChatRoom sourceAdHocChatRoom = evt.getAdHocChatRoom();
        AdHocChatRoomWrapper adHocChatRoomWrapper
            = adHocChatRoomList
                .findChatRoomWrapperFromAdHocChatRoom(sourceAdHocChatRoom);

        String eventType = evt.getEventType();

        if (LocalUserAdHocChatRoomPresenceChangeEvent
                .LOCAL_USER_JOINED.equals(eventType))
        {
            if(adHocChatRoomWrapper != null)
            {
                this.fireAdHocChatRoomListChangedEvent(
                        adHocChatRoomWrapper,
                        AdHocChatRoomListChangeEvent.AD_HOC_CHAT_ROOM_CHANGED);

                ChatWindowManager chatWindowManager
                    = GuiActivator.getUIService().getChatWindowManager();
                ChatPanel chatPanel
                    = chatWindowManager
                        .getMultiChat(adHocChatRoomWrapper, true);

                // Check if we have already opened a chat window for this chat
                // wrapper and load the real chat room corresponding to the
                // wrapper.
                if(chatPanel.isShown())
                    ((AdHocConferenceChatSession) chatPanel.getChatSession())
                        .loadChatRoom(sourceAdHocChatRoom);
                else
                    chatWindowManager.openChat(chatPanel, true);
            }

            sourceAdHocChatRoom.addMessageListener(this);
        }
        else if (evt.getEventType().equals(
            LocalUserAdHocChatRoomPresenceChangeEvent.LOCAL_USER_JOIN_FAILED))
        {
            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                        ""service.gui.FAILED_TO_JOIN_CHAT_ROOM"",
                        new String[]{sourceAdHocChatRoom.getName()})
                        + evt.getReason())
            .showDialog();
        }
        else if (LocalUserAdHocChatRoomPresenceChangeEvent
                        .LOCAL_USER_LEFT.equals(eventType)
                    || LocalUserAdHocChatRoomPresenceChangeEvent
                            .LOCAL_USER_DROPPED.equals(eventType))
        {
            this.closeAdHocChatRoom(adHocChatRoomWrapper);

            // Need to refresh the chat room's list in order to change
            // the state of the chat room to offline.
            fireAdHocChatRoomListChangedEvent(
                    adHocChatRoomWrapper,
                    AdHocChatRoomListChangeEvent.AD_HOC_CHAT_ROOM_CHANGED);

            sourceAdHocChatRoom.removeMessageListener(this);
        }
    }",False,False,"This method serves to handle changes in the presence of the local user in an ad hoc chat room. It performs various actions based on the type of presence change, such as updating the chat room list, opening chat windows, displaying error dialogs, and removing message listeners.",False,"This code implements the `localUserAdHocPresenceChanged` method, which handles presence changes in an ad hoc chat room. It performs various actions based on the type of presence change, such as updating the chat room list, opening chat windows, displaying error dialogs, and removing message listeners."
17,localUserPresenceChanged(LocalUserChatRoomPresenceChangeEvent),local user presence changed evt implements the local user chat room presence listener local user presence changed method param evt the local user chat room presence change event thatnotified us ,Method,,,javax.swing.SwingUtilities+isEventDispatchThread() javax.swing.SwingUtilities+isEventDispatchThread() javax.swing.SwingUtilities+invokeLater(Runnable) javax.swing.SwingUtilities+invokeLater(Runnable) +() +run(),,3746,100,1,"/** 
 * Implements the <tt>LocalUserChatRoomPresenceListener.localUserPresenceChanged</tt> method.
 * @param evt the <tt>LocalUserChatRoomPresenceChangeEvent</tt> thatnotified us
 */
","/**
     * Implements the
     * <tt>LocalUserChatRoomPresenceListener.localUserPresenceChanged</tt>
     * method.
     * @param evt the <tt>LocalUserChatRoomPresenceChangeEvent</tt> that
     * notified us
     */
    public void localUserPresenceChanged(
        final LocalUserChatRoomPresenceChangeEvent evt)
    {
        if(!SwingUtilities.isEventDispatchThread())
        {
            SwingUtilities.invokeLater(new Runnable()
            {
                @Override
                public void run()
                {
                    localUserPresenceChanged(evt);
                }
            });
            return;
        }

        ChatRoom sourceChatRoom = evt.getChatRoom();
        ChatRoomWrapper chatRoomWrapper
            = chatRoomList.findChatRoomWrapperFromChatRoom(sourceChatRoom);

        String eventType = evt.getEventType();

        if (LocalUserChatRoomPresenceChangeEvent
                .LOCAL_USER_JOINED.equals(eventType))
        {
            if(chatRoomWrapper != null)
            {
                this.fireChatRoomListChangedEvent(
                    chatRoomWrapper,
                    ChatRoomListChangeEvent.CHAT_ROOM_CHANGED);

                ChatWindowManager chatWindowManager
                    = GuiActivator.getUIService().getChatWindowManager();
                ChatPanel chatPanel
                    = chatWindowManager.getMultiChat(chatRoomWrapper, true);

                chatPanel.setChatIcon(
                    chatPanel.getChatSession().getChatStatusIcon());

                // Check if we have already opened a chat window for this chat
                // wrapper and load the real chat room corresponding to the
                // wrapper.
                if(chatPanel.isShown())
                    ((ConferenceChatSession) chatPanel.getChatSession())
                        .loadChatRoom(sourceChatRoom);
                else
                    chatWindowManager.openChat(chatPanel, true);
            }

            if (sourceChatRoom.isSystem())
            {
                ChatRoomProviderWrapper serverWrapper
                    = chatRoomList.findServerWrapperFromProvider(
                        sourceChatRoom.getParentProvider());

                serverWrapper.setSystemRoom(sourceChatRoom);
            }

            sourceChatRoom.addMessageListener(this);
        }
        else if (LocalUserChatRoomPresenceChangeEvent
                    .LOCAL_USER_JOIN_FAILED.equals(eventType))
        {
            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                    ""service.gui.FAILED_TO_JOIN_CHAT_ROOM"",
                    new String[]{sourceChatRoom.getName()}) + evt.getReason())
                .showDialog();
        }
        else if (LocalUserChatRoomPresenceChangeEvent
                        .LOCAL_USER_LEFT.equals(eventType)
                    || LocalUserChatRoomPresenceChangeEvent
                            .LOCAL_USER_KICKED.equals(eventType)
                    || LocalUserChatRoomPresenceChangeEvent
                            .LOCAL_USER_DROPPED.equals(eventType))
        {
            if(chatRoomWrapper != null)
            {
                this.closeChatRoom(chatRoomWrapper);

                // Need to refresh the chat room's list in order to change
                // the state of the chat room to offline.

                fireChatRoomListChangedEvent(
                    chatRoomWrapper,
                    ChatRoomListChangeEvent.CHAT_ROOM_CHANGED);
            }

            sourceChatRoom.removeMessageListener(this);
        }
    }",False,False,"This method serves as an implementation of the ""LocalUserChatRoomPresenceListener.localUserPresenceChanged"" method. It handles various events related to the presence of the local user in a chat room, such as joining, leaving, or being kicked from a chat room. It also performs actions like updating the chat room list, opening chat windows, and displaying error messages.",False,"This code implements the `localUserPresenceChanged` method, which handles events related to the local user's presence in a chat room. It performs various actions based on the type of event, such as updating the chat room list, opening chat windows, handling join failures, and removing the local user from the chat room."
18,acceptInvitation(ChatRoomInvitation),accept invitation invitation called to accept an incoming invitation adds the invitation chat room to the list of chat rooms and joins it param invitation the invitation to accept ,Method,,net.java.sip.communicator.impl.gui.main.chat.conference.InvitationReceivedDialog+actionPerformed(ActionEvent),"net.java.sip.communicator.service.protocol.ChatRoomInvitation+getTargetChatRoom() net.java.sip.communicator.service.protocol.ChatRoomInvitation+getTargetChatRoom() net.java.sip.communicator.service.protocol.ChatRoomInvitation+getChatRoomPassword() net.java.sip.communicator.service.protocol.ChatRoomInvitation+getChatRoomPassword() net.java.sip.communicator.service.protocol.AccountID+getUserID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getUserID() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoom,String,byte[]) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoom,String,byte[])",,539,16,1,"/** 
 * Called to accept an incoming invitation. Adds the invitation chat room to the list of chat rooms and joins it.
 * @param invitation the invitation to accept.
 */
","/**
     * Called to accept an incoming invitation. Adds the invitation chat room
     * to the list of chat rooms and joins it.
     *
     * @param invitation the invitation to accept.
     */
    public void acceptInvitation(ChatRoomInvitation invitation)
    {
        ChatRoom chatRoom = invitation.getTargetChatRoom();
        byte[] password = invitation.getChatRoomPassword();

        String nickName
            = chatRoom.getParentProvider().getAccountID().getUserID();

        joinChatRoom(chatRoom, nickName, password);
    }",True,False,This method is called to accept an incoming invitation. It adds the invitation chat room to the list of chat rooms and joins it using the provided nickname and password.,True,The `acceptInvitation` method is used to accept an incoming chat room invitation. It adds the chat room to the list of chat rooms and joins it using the user's nickname and password.
19,"acceptInvitation(AdHocChatRoomInvitation,OperationSetAdHocMultiUserChat)",accept invitation invitation multi user chat op set called to accept an incoming invitation adds the invitation chat room to the list of chat rooms and joins it param invitation the invitation to accept param multi user chat op set the operation set for chat conferencing throws operation failed exception if the accept fails ,Method,,net.java.sip.communicator.impl.gui.main.chat.conference.InvitationReceivedDialog+actionPerformed(ActionEvent),net.java.sip.communicator.service.protocol.AdHocChatRoomInvitation+getTargetAdHocChatRoom() net.java.sip.communicator.service.protocol.AdHocChatRoomInvitation+getTargetAdHocChatRoom() net.java.sip.communicator.service.protocol.AdHocChatRoom+join() net.java.sip.communicator.service.protocol.AdHocChatRoom+join(),,611,17,1,"/** 
 * Called to accept an incoming invitation. Adds the invitation chat room to the list of chat rooms and joins it.
 * @param invitation the invitation to accept
 * @param multiUserChatOpSet the operation set for chat conferencing
 * @throws OperationFailedException if the accept fails
 */
","/**
     * Called to accept an incoming invitation. Adds the invitation chat room
     * to the list of chat rooms and joins it.
     *
     * @param invitation the invitation to accept
     * @param multiUserChatOpSet the operation set for chat conferencing
     * @throws OperationFailedException if the accept fails
     */
    public void acceptInvitation(
        AdHocChatRoomInvitation invitation,
        OperationSetAdHocMultiUserChat multiUserChatOpSet)
        throws OperationFailedException
    {
        AdHocChatRoom chatRoom = invitation.getTargetAdHocChatRoom();

        chatRoom.join();
    }",False,False,This method is used to accept an incoming invitation for a chat room. It adds the chat room to the list of chat rooms and joins it.,True,"This code defines a method called ""acceptInvitation"" that is used to accept an incoming invitation to join an ad hoc chat room. It takes the invitation and the operation set for chat conferencing as parameters, and then joins the chat room."
20,"rejectInvitation(OperationSetMultiUserChat,ChatRoomInvitation,String)",reject invitation multi user chat op set invitation reason rejects the given invitation with the specified reason param multi user chat op set the operation set to use for rejecting theinvitation param invitation the invitation to reject param reason the reason for the rejection ,Method,,net.java.sip.communicator.impl.gui.main.chat.conference.InvitationReceivedDialog+actionPerformed(ActionEvent),"net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+rejectInvitation(ChatRoomInvitation,String) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+rejectInvitation(ChatRoomInvitation,String)",,549,14,1,"/** 
 * Rejects the given invitation with the specified reason.
 * @param multiUserChatOpSet the operation set to use for rejecting theinvitation
 * @param invitation the invitation to reject
 * @param reason the reason for the rejection
 */
","/**
     * Rejects the given invitation with the specified reason.
     *
     * @param multiUserChatOpSet the operation set to use for rejecting the
     * invitation
     * @param invitation the invitation to reject
     * @param reason the reason for the rejection
     */
    public void rejectInvitation(  OperationSetMultiUserChat multiUserChatOpSet,
                                   ChatRoomInvitation invitation,
                                   String reason)
    {
        multiUserChatOpSet.rejectInvitation(invitation, reason);
    }",True,False,"This method is used to reject a chat room invitation by providing the necessary information such as the operation set, the invitation, and the reason for rejection. It calls the rejectInvitation method from the OperationSetMultiUserChat class.",False,"This code defines a method called ""rejectInvitation"" that takes in an operation set for multi-user chat, a chat room invitation, and a reason for rejection as parameters. It then calls the ""rejectInvitation"" method from the multiUserChatOpSet object with the given invitation and reason."
21,"rejectInvitation(OperationSetAdHocMultiUserChat,AdHocChatRoomInvitation,String)",reject invitation multi user chat ad hoc op set invitation reason rejects the given invitation with the specified reason param multi user chat ad hoc op set the operation set to use for rejecting theinvitation param invitation the invitation to reject param reason the reason for the rejection ,Method,,net.java.sip.communicator.impl.gui.main.chat.conference.InvitationReceivedDialog+actionPerformed(ActionEvent),"net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+rejectInvitation(AdHocChatRoomInvitation,String) net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+rejectInvitation(AdHocChatRoomInvitation,String)",,580,15,1,"/** 
 * Rejects the given invitation with the specified reason.
 * @param multiUserChatAdHocOpSet the operation set to use for rejecting theinvitation
 * @param invitation the invitation to reject
 * @param reason the reason for the rejection
 */
","/**
     * Rejects the given invitation with the specified reason.
     *
     * @param multiUserChatAdHocOpSet the operation set to use for rejecting the
     * invitation
     * @param invitation the invitation to reject
     * @param reason the reason for the rejection
     */
    public void rejectInvitation(
            OperationSetAdHocMultiUserChat     multiUserChatAdHocOpSet,
            AdHocChatRoomInvitation         invitation,
            String                             reason)
    {
         multiUserChatAdHocOpSet.rejectInvitation(invitation, reason);
    }",False,False,This method serves to reject an invitation to an ad hoc chat room by using the specified reason.,False,"This code defines a method called ""rejectInvitation"" that takes in an operation set, an invitation, and a reason as parameters. It uses the operation set to reject the given invitation with the specified reason by calling the ""rejectInvitation"" method on the operation set."
22,"joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean,String)",join chat room chat room wrapper nick name password remember password is first attempt subject joins the given chat room with the given password and manages all the exceptions that could occur during the join process param chat room wrapper the chat room to join param nick name the nickname we choose for the given chat room param password the password param remember password if true the password should be saved param is first attempt is this the first attempt to join room usedto check whether to show some error messages param subject the subject which will be set to the room after the user join successful ,Method,"joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean) JoinChatRoomTask.done()",,"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() org.jdesktop.swingworker.SwingWorker+execute() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[],boolean,boolean,String) org.jdesktop.swingworker.SwingWorker+execute()",,1628,38,1,"/** 
 * Joins the given chat room with the given password and manages all the exceptions that could occur during the join process.
 * @param chatRoomWrapper the chat room to join.
 * @param nickName the nickname we choose for the given chat room.
 * @param password the password.
 * @param rememberPassword if true the password should be saved.
 * @param isFirstAttempt is this the first attempt to join room, usedto check whether to show some error messages
 * @param subject the subject which will be set to the room after the user join successful.
 */
","/**
     * Joins the given chat room with the given password and manages all the
     * exceptions that could occur during the join process.
     *
     * @param chatRoomWrapper the chat room to join.
     * @param nickName the nickname we choose for the given chat room.
     * @param password the password.
     * @param rememberPassword if true the password should be saved.
     * @param isFirstAttempt is this the first attempt to join room, used
     *                       to check whether to show some error messages
     * @param subject the subject which will be set to the room after the user 
     * join successful.
     */
    public void joinChatRoom(   ChatRoomWrapper chatRoomWrapper,
                                String nickName,
                                byte[] password,
                                boolean rememberPassword,
                                boolean isFirstAttempt,
                                String subject)
    {
        ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

        if(chatRoom == null)
        {
            new ErrorDialog(
               GuiActivator.getUIService().getMainFrame(),
               GuiActivator.getResources().getI18NString(""service.gui.WARNING""),
               GuiActivator.getResources().getI18NString(
                    ""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                    new String[]{chatRoomWrapper.getChatRoomName()}))
                    .showDialog();

            return;
        }

        new JoinChatRoomTask(chatRoomWrapper, nickName, password,
            rememberPassword, isFirstAttempt, subject).execute();
    }",True,True,"The function of this method is to join a chat room with a given password and handle any exceptions that may occur during the join process. It also allows the user to choose a nickname, save the password, and set a subject for the room after successful join.",True,"This code defines a method called ""joinChatRoom"" that handles the process of joining a chat room. It takes various parameters such as the chat room to join, nickname, password, and other flags. It checks if the chat room is connected and then executes a task to join the chat room."
23,"joinChatRoom(ChatRoomWrapper,String,byte[],boolean)",join chat room chat room wrapper nick name password remember password joins the given chat room with the given password and manages all the exceptions that could occur during the join process param chat room wrapper the chat room to join param nick name the nickname we choose for the given chat room param password the password param remember password if true the password should be saved ,Method,,,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean)",,724,17,1,"/** 
 * Joins the given chat room with the given password and manages all the exceptions that could occur during the join process.
 * @param chatRoomWrapper the chat room to join.
 * @param nickName the nickname we choose for the given chat room.
 * @param password the password.
 * @param rememberPassword if true the password should be saved.
 */
","/**
     * Joins the given chat room with the given password and manages all the
     * exceptions that could occur during the join process.
     *
     * @param chatRoomWrapper the chat room to join.
     * @param nickName the nickname we choose for the given chat room.
     * @param password the password.
     * @param rememberPassword if true the password should be saved.
     */
    public void joinChatRoom(   ChatRoomWrapper chatRoomWrapper,
                                String nickName,
                                byte[] password, 
                                boolean rememberPassword)
    {
        this.joinChatRoom(
                chatRoomWrapper, nickName, password, rememberPassword, true);
    }",False,True,The function of this method is to join a chat room with a given password and handle any exceptions that may occur during the join process. It also provides an option to save the password if desired.,True,The `joinChatRoom` method is used to join a chat room with a given nickname and password. It also provides an option to remember the password. This method calls another overloaded version of `joinChatRoom` with an additional parameter set to true.
24,"joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean)",join chat room chat room wrapper nick name password remember password is first attempt joins the given chat room with the given password and manages all the exceptions that could occur during the join process param chat room wrapper the chat room to join param nick name the nickname we choose for the given chat room param password the password param remember password if true the password should be saved param is first attempt is this the first attempt to join room usedto check whether to show some error messages ,Method,"joinChatRoom(ChatRoomWrapper,String,byte[],boolean)",,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean,String) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean,String)",,952,21,1,"/** 
 * Joins the given chat room with the given password and manages all the exceptions that could occur during the join process.
 * @param chatRoomWrapper the chat room to join.
 * @param nickName the nickname we choose for the given chat room.
 * @param password the password.
 * @param rememberPassword if true the password should be saved.
 * @param isFirstAttempt is this the first attempt to join room, usedto check whether to show some error messages
 */
","/**
     * Joins the given chat room with the given password and manages all the
     * exceptions that could occur during the join process.
     *
     * @param chatRoomWrapper the chat room to join.
     * @param nickName the nickname we choose for the given chat room.
     * @param password the password.
     * @param rememberPassword if true the password should be saved.
     * @param isFirstAttempt is this the first attempt to join room, used
     *                       to check whether to show some error messages
     */
    public void joinChatRoom(   ChatRoomWrapper chatRoomWrapper,
                                String nickName,
                                byte[] password,
                                boolean rememberPassword,
                                boolean isFirstAttempt)
    {
        this.joinChatRoom(
            chatRoomWrapper, nickName, password, rememberPassword, 
            isFirstAttempt, null);
    }",False,True,"The function of this method is to join a chat room with a given password, manage any exceptions that may occur during the join process, and provide options for saving the password and displaying error messages.",True,"The method ""joinChatRoom"" is used to join a chat room with a given nickname, password, and other parameters. It manages exceptions that may occur during the join process and has an overloaded version of the method with an additional parameter."
25,"joinChatRoom(ChatRoomWrapper,String,byte[])",join chat room chat room wrapper nick name password joins the given chat room with the given password and manages all the exceptions that could occur during the join process param chat room wrapper the chat room to join param nick name the nickname we choose for the given chat room param password the password ,Method,"joinChatRoom(ChatRoom,String,byte[]) openChatRoom(ChatRoomWrapper)",net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableUI+openChatForSelection(),"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() org.jdesktop.swingworker.SwingWorker+execute() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[]) org.jdesktop.swingworker.SwingWorker+execute()",,1090,29,1,"/** 
 * Joins the given chat room with the given password and manages all the exceptions that could occur during the join process.
 * @param chatRoomWrapper the chat room to join.
 * @param nickName the nickname we choose for the given chat room.
 * @param password the password.
 */
","/**
     * Joins the given chat room with the given password and manages all the
     * exceptions that could occur during the join process.
     *
     * @param chatRoomWrapper the chat room to join.
     * @param nickName the nickname we choose for the given chat room.
     * @param password the password.
     */
    public void joinChatRoom(   ChatRoomWrapper chatRoomWrapper,
                                String nickName,
                                byte[] password)
    {
        ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

        if(chatRoom == null)
        {
            new ErrorDialog(
               GuiActivator.getUIService().getMainFrame(),
               GuiActivator.getResources().getI18NString(""service.gui.WARNING""),
               GuiActivator.getResources().getI18NString(
                    ""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                    new String[]{chatRoomWrapper.getChatRoomName()}))
                    .showDialog();

            return;
        }

        new JoinChatRoomTask(chatRoomWrapper, nickName, password).execute();
    }",False,True,The function of this method is to join a chat room with a given password and handle any exceptions that may occur during the join process. It also displays an error dialog if the chat room is not connected.,True,"This code defines a method called ""joinChatRoom"" that takes a chat room, nickname, and password as parameters. It checks if the chat room is null and displays an error dialog if it is, otherwise it creates a new task to join the chat room and executes it."
26,"joinChatRoom(ChatRoomWrapper,String,byte[],String)",join chat room chat room wrapper nick name password subject joins the given chat room with the given password and manages all the exceptions that could occur during the join process param chat room wrapper the chat room to join param nick name the nickname we choose for the given chat room param password the password param subject the subject which will be set to the room after the user join successful ,Method,openChatRoom(ChatRoomWrapper),net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomRightButtonMenu+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomRightButtonMenu+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomRightButtonMenu+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableUI+openChatForSelection(),"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() org.jdesktop.swingworker.SwingWorker+execute() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[],String) org.jdesktop.swingworker.SwingWorker+execute()",,1264,33,1,"/** 
 * Joins the given chat room with the given password and manages all the exceptions that could occur during the join process.
 * @param chatRoomWrapper the chat room to join.
 * @param nickName the nickname we choose for the given chat room.
 * @param password the password.
 * @param subject the subject which will be set to the room after the user join successful.
 */
","/**
     * Joins the given chat room with the given password and manages all the
     * exceptions that could occur during the join process.
     *
     * @param chatRoomWrapper the chat room to join.
     * @param nickName the nickname we choose for the given chat room.
     * @param password the password.
     * @param subject the subject which will be set to the room after the user 
     * join successful.
     */
    public void joinChatRoom(   ChatRoomWrapper chatRoomWrapper,
                                String nickName,
                                byte[] password,
                                String subject)
    {
        ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

        if(chatRoom == null)
        {
            new ErrorDialog(
               GuiActivator.getUIService().getMainFrame(),
               GuiActivator.getResources().getI18NString(""service.gui.WARNING""),
               GuiActivator.getResources().getI18NString(
                    ""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                    new String[]{chatRoomWrapper.getChatRoomName()}))
                    .showDialog();

            return;
        }

        new JoinChatRoomTask(chatRoomWrapper, nickName, password, subject)
            .execute();
    }",False,True,The function of this method is to join a chat room with a given password and manage any exceptions that may occur during the join process. It also sets the subject of the room after a successful join.,True,"This code defines a method called ""joinChatRoom"" that joins a chat room with a given password and manages exceptions that may occur during the join process. It displays an error dialog if the chat room is not connected and then executes a task to join the chat room with the provided parameters."
27,"createChatRoom(ProtocolProviderService,Collection<String>,String,boolean)",create chat room protocol provider contacts reason persistent creates a chat room by specifying the chat room name the parent protocol provider and eventually the contacts invited to participate in this chat room param protocol provider the parent protocol provider param contacts the contacts invited when creating the chat room param reason param persistent is the room persistent return the chat room wrapper corresponding to the created room ,Method,,,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean)",,778,20,1,"/** 
 * Creates a chat room, by specifying the chat room name, the parent protocol provider and eventually, the contacts invited to participate in this chat room.
 * @param protocolProvider the parent protocol provider.
 * @param contacts the contacts invited when creating the chat room.
 * @param reason
 * @param persistent is the room persistent
 * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
 */
","/**
     * Creates a chat room, by specifying the chat room name, the parent
     * protocol provider and eventually, the contacts invited to participate in
     * this chat room.
     *
     * @param protocolProvider the parent protocol provider.
     * @param contacts the contacts invited when creating the chat room.
     * @param reason
     * @param persistent is the room persistent
     * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
     */
    public ChatRoomWrapper createChatRoom(
        ProtocolProviderService protocolProvider,
        Collection<String> contacts,
        String reason,
        boolean persistent)
    {
        return this.createChatRoom(
            null, protocolProvider, contacts, reason, persistent, false);
    }",True,True,"This method creates a chat room by specifying the chat room name, the parent protocol provider, the contacts invited to participate, and other optional parameters. It returns the ChatRoomWrapper corresponding to the created room.",True,"This code defines a method called ""createChatRoom"" that creates a chat room with a specified name, parent protocol provider, invited contacts, reason, and persistence. It returns a ChatRoomWrapper object corresponding to the created room."
28,"createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean)",create chat room room name protocol provider contacts reason persistent is private creates a chat room by specifying the chat room name the parent protocol provider and eventually the contacts invited to participate in this chat room param room name the name of the room param protocol provider the parent protocol provider param contacts the contacts invited when creating the chat room param reason param persistent is the room persistent param is private whether the room will be private or public return the chat room wrapper corresponding to the created room ,Method,"createChatRoom(ProtocolProviderService,Collection<String>,String,boolean) createPrivateChatRoom(ProtocolProviderService,Collection<String>,String,boolean)",net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+run(),"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean)",,963,25,1,"/** 
 * Creates a chat room, by specifying the chat room name, the parent protocol provider and eventually, the contacts invited to participate in this chat room.
 * @param roomName the name of the room
 * @param protocolProvider the parent protocol provider.
 * @param contacts the contacts invited when creating the chat room.
 * @param reason
 * @param persistent is the room persistent
 * @param isPrivate whether the room will be private or public.
 * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
 */
","/**
     * Creates a chat room, by specifying the chat room name, the parent
     * protocol provider and eventually, the contacts invited to participate in
     * this chat room.
     *
     * @param roomName the name of the room
     * @param protocolProvider the parent protocol provider.
     * @param contacts the contacts invited when creating the chat room.
     * @param reason
     * @param persistent is the room persistent
     * @param isPrivate whether the room will be private or public.
     * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
     */
    public ChatRoomWrapper createChatRoom(
        String roomName,
        ProtocolProviderService protocolProvider,
        Collection<String> contacts,
        String reason,
        boolean persistent,
        boolean isPrivate)
    {
        return createChatRoom(
            roomName, protocolProvider, contacts, reason, true, persistent,
            isPrivate);
    }",True,True,"This method creates a chat room with the specified name, parent protocol provider, invited contacts, reason, persistence, and privacy settings. It returns a ChatRoomWrapper object corresponding to the created room.",True,"This code defines a method called ""createChatRoom"" that creates a chat room with the specified name, parent protocol provider, invited contacts, reason, persistence, and privacy settings. It returns a ChatRoomWrapper object corresponding to the created room."
29,"createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean)",create chat room room name protocol provider contacts reason persistent creates a chat room by specifying the chat room name the parent protocol provider and eventually the contacts invited to participate in this chat room param room name the name of the room param protocol provider the parent protocol provider param contacts the contacts invited when creating the chat room param reason param persistent is the room persistent return the chat room wrapper corresponding to the created room ,Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.createforms.CreateChatRoomDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.createforms.CreateChatRoomWizard+wizardFinished(WizardEvent),"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean)",,864,23,1,"/** 
 * Creates a chat room, by specifying the chat room name, the parent protocol provider and eventually, the contacts invited to participate in this chat room.
 * @param roomName the name of the room
 * @param protocolProvider the parent protocol provider.
 * @param contacts the contacts invited when creating the chat room.
 * @param reason
 * @param persistent is the room persistent
 * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
 */
","/**
     * Creates a chat room, by specifying the chat room name, the parent
     * protocol provider and eventually, the contacts invited to participate in
     * this chat room.
     *
     * @param roomName the name of the room
     * @param protocolProvider the parent protocol provider.
     * @param contacts the contacts invited when creating the chat room.
     * @param reason
     * @param persistent is the room persistent
     * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
     */
    public ChatRoomWrapper createChatRoom(
        String roomName,
        ProtocolProviderService protocolProvider,
        Collection<String> contacts,
        String reason,
        boolean persistent)
    {
        return createChatRoom(
            roomName, protocolProvider, contacts, reason, true, persistent,
            false);
    }",True,True,"This method creates a chat room with the specified name, parent protocol provider, invited contacts, reason, and persistence. It returns a ChatRoomWrapper object corresponding to the created room.",True,"This code defines a method called ""createChatRoom"" that creates a chat room with a specified name, parent protocol provider, invited contacts, reason, and persistence. It returns a ChatRoomWrapper object corresponding to the created room."
30,"createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean)",create chat room room name protocol provider contacts reason join persistent is private creates a chat room by specifying the chat room name the parent protocol provider and eventually the contacts invited to participate in this chat room param room name the name of the room param protocol provider the parent protocol provider param contacts the contacts invited when creating the chat room param reason param join whether we should join the room after creating it param persistent whether the newly created room will be persistent param is private whether the room will be private or public return the chat room wrapper corresponding to the created room ,Method,"createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean) createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean) openChatRoom(ChatRoomWrapper)",net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomRightButtonMenu+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableUI+openChatForSelection(),"net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) java.util.HashMap+HashMap() java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+createChatRoom(String,Map<String,Object>) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+createChatRoom(String,Map<String,Object>) net.java.sip.communicator.service.protocol.ChatRoom+join() net.java.sip.communicator.service.protocol.ChatRoom+join() net.java.sip.communicator.service.protocol.ChatRoom+invite(String,String) net.java.sip.communicator.service.protocol.ChatRoom+invite(String,String) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String,Throwable) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String,Throwable) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+ChatRoomWrapper(ChatRoomProviderWrapper,ChatRoom) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+setPersistent(boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+setPersistent(boolean) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeEvent+CHAT_ROOM_ADDED,3680,99,1,"/** 
 * Creates a chat room, by specifying the chat room name, the parent protocol provider and eventually, the contacts invited to participate in this chat room.
 * @param roomName the name of the room
 * @param protocolProvider the parent protocol provider.
 * @param contacts the contacts invited when creating the chat room.
 * @param reason
 * @param join whether we should join the room after creating it.
 * @param persistent whether the newly created room will be persistent.
 * @param isPrivate whether the room will be private or public.
 * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
 */
","/**
     * Creates a chat room, by specifying the chat room name, the parent
     * protocol provider and eventually, the contacts invited to participate in
     * this chat room.
     *
     * @param roomName the name of the room
     * @param protocolProvider the parent protocol provider.
     * @param contacts the contacts invited when creating the chat room.
     * @param reason
     * @param join whether we should join the room after creating it.
     * @param persistent whether the newly created room will be persistent.
     * @param isPrivate whether the room will be private or public.
     * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
     */
    public ChatRoomWrapper createChatRoom(
        String roomName,
        ProtocolProviderService protocolProvider,
        Collection<String> contacts,
        String reason,
        boolean join,
        boolean persistent,
        boolean isPrivate)
    {
        ChatRoomWrapper chatRoomWrapper = null;

        OperationSetMultiUserChat groupChatOpSet
            = protocolProvider.getOperationSet(OperationSetMultiUserChat.class);

        // If there's no group chat operation set we have nothing to do here.
        if (groupChatOpSet == null)
            return null;

        ChatRoom chatRoom = null;
        try
        {
            HashMap<String, Object> roomProperties = 
                new HashMap<String, Object>();
            roomProperties.put(""isPrivate"", isPrivate);
            chatRoom = groupChatOpSet.createChatRoom(roomName, roomProperties);

            if(join)
            {
                chatRoom.join();

                for(String contact : contacts)
                    chatRoom.invite(contact, reason);
            }
        }
        catch (OperationFailedException ex)
        {
            logger.error(""Failed to create chat room."", ex);

            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                    ""service.gui.CREATE_CHAT_ROOM_ERROR"",
                    new String[]{protocolProvider.getProtocolName()}),
                    ex)
            .showDialog();
        }
        catch (OperationNotSupportedException ex)
        {
            logger.error(""Failed to create chat room."", ex);

            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                    ""service.gui.CREATE_CHAT_ROOM_ERROR"",
                    new String[]{protocolProvider.getProtocolName()}),
                    ex)
            .showDialog();
        }

        if(chatRoom != null)
        {
            ChatRoomProviderWrapper parentProvider
                = chatRoomList.findServerWrapperFromProvider(protocolProvider);

            // if there is the same room ids don't add new wrapper as old one
            // maybe already created
            chatRoomWrapper =
                chatRoomList.findChatRoomWrapperFromChatRoom(chatRoom);

            if(chatRoomWrapper == null)
            {
                chatRoomWrapper = new ChatRoomWrapper(parentProvider, chatRoom);
                chatRoomWrapper.setPersistent(persistent);
                chatRoomList.addChatRoom(chatRoomWrapper);

                fireChatRoomListChangedEvent(
                    chatRoomWrapper,
                    ChatRoomListChangeEvent.CHAT_ROOM_ADDED);
            }
        }

        return chatRoomWrapper;
    }",True,True,"This method creates a chat room by specifying the room name, parent protocol provider, invited contacts, and other parameters. It returns the ChatRoomWrapper corresponding to the created room.",True,"This code defines a method called `createChatRoom` that creates a chat room with the specified name, protocol provider, invited contacts, and other parameters. It uses the provided protocol provider to create the chat room and handles exceptions if the operation fails. If the chat room is successfully created, it adds it to a chat room list and fires an event to notify listeners."
31,"createPrivateChatRoom(ProtocolProviderService,Collection<String>,String,boolean)",create private chat room protocol provider contacts reason persistent creates a private chat room by specifying the parent protocol provider and eventually the contacts invited to participate in this chat room param protocol provider the parent protocol provider param contacts the contacts invited when creating the chat room param reason param persistent is the room persistent return the chat room wrapper corresponding to the created room ,Method,,"net.java.sip.communicator.impl.gui.main.chat.ChatPanel+inviteContacts(ChatTransport,Collection<String>,String)","net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean)",,772,20,1,"/** 
 * Creates a private chat room, by specifying the parent protocol provider and eventually, the contacts invited to participate in this chat room.
 * @param protocolProvider the parent protocol provider.
 * @param contacts the contacts invited when creating the chat room.
 * @param reason
 * @param persistent is the room persistent
 * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
 */
","/**
     * Creates a private chat room, by specifying the parent
     * protocol provider and eventually, the contacts invited to participate in
     * this chat room.
     *
     * @param protocolProvider the parent protocol provider.
     * @param contacts the contacts invited when creating the chat room.
     * @param reason
     * @param persistent is the room persistent
     * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
     */
    public ChatRoomWrapper createPrivateChatRoom(
        ProtocolProviderService protocolProvider,
        Collection<String> contacts,
        String reason,
        boolean persistent)
    {
        return this.createChatRoom(
            null, protocolProvider, contacts, reason, persistent, true);
    }",True,True,"This method creates a private chat room by specifying the parent protocol provider, the contacts invited to participate, and other parameters. It returns a ChatRoomWrapper object corresponding to the created room.",False,"This code defines a method called ""createPrivateChatRoom"" that creates a private chat room. It takes a protocol provider, a collection of contacts, a reason, and a boolean indicating whether the room should be persistent. It returns a ChatRoomWrapper object corresponding to the created room."
32,"createAdHocChatRoom(ProtocolProviderService,Collection<String>,String)",create ad hoc chat room protocol provider contacts reason creates an ad hoc chat room by specifying the ad hoc chat room name the parent protocol provider and eventually the contacts invited to participate in this ad hoc chat room param protocol provider the parent protocol provider param contacts the contacts invited when creating the chat room param reason the reason for this invitation return the ad hoc chat room wrapper corresponding to the createdad hoc chat room ,Method,,"net.java.sip.communicator.impl.gui.main.chat.ChatPanel+inviteContacts(ChatTransport,Collection<String>,String)","net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) java.util.LinkedList+LinkedList() java.util.List+add(E) java.util.List+add(E) net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+createAdHocChatRoom(String,List<String>,String) net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+createAdHocChatRoom(String,List<String>,String) java.util.Date+getTime() java.util.Date+Date() java.util.Date+getTime() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String,Throwable) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String,Throwable) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+AdHocChatRoomWrapper(AdHocChatRoomProviderWrapper,AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomProviderWrapper+addAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomProviderWrapper+addAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+addAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+addAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeEvent+AD_HOC_CHAT_ROOM_ADDED,2957,79,1,"/** 
 * Creates an ad-hoc chat room, by specifying the ad-hoc chat room name, the parent protocol provider and eventually, the contacts invited to participate in this ad-hoc chat room.
 * @param protocolProvider the parent protocol provider.
 * @param contacts the contacts invited when creating the chat room.
 * @param reason the reason for this invitation
 * @return the <tt>AdHocChatRoomWrapper</tt> corresponding to the createdad hoc chat room
 */
","/**
     * Creates an ad-hoc chat room, by specifying the ad-hoc chat room name, the
     * parent protocol provider and eventually, the contacts invited to
     * participate in this ad-hoc chat room.
     *
     * @param protocolProvider the parent protocol provider.
     * @param contacts the contacts invited when creating the chat room.
     * @param reason the reason for this invitation
     * @return the <tt>AdHocChatRoomWrapper</tt> corresponding to the created
     * ad hoc chat room
     */
    public AdHocChatRoomWrapper createAdHocChatRoom(
        ProtocolProviderService protocolProvider,
        Collection<String> contacts,
        String reason)
    {
        AdHocChatRoomWrapper chatRoomWrapper = null;

        OperationSetAdHocMultiUserChat groupChatOpSet
            = protocolProvider
                .getOperationSet(OperationSetAdHocMultiUserChat.class);

        // If there's no group chat operation set we have nothing to do here.
        if (groupChatOpSet == null)
            return null;

        AdHocChatRoom chatRoom = null;

        try
        {
            List<String> members = new LinkedList<String>();

            for(String address : contacts)
                members.add(address);

            chatRoom = groupChatOpSet.createAdHocChatRoom(
                ""chatroom-"" + new Date().getTime(), members, reason);
        }
        catch (OperationFailedException ex)
        {
            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                    ""service.gui.CREATE_CHAT_ROOM_ERROR"",
                    new String[]{protocolProvider.getProtocolName()}),
                    ex)
            .showDialog();
        }
        catch (OperationNotSupportedException ex)
        {
            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                    ""service.gui.CREATE_CHAT_ROOM_ERROR"",
                    new String[]{protocolProvider.getProtocolName()}),
                    ex)
            .showDialog();
        }

        if(chatRoom != null)
        {
            AdHocChatRoomProviderWrapper parentProvider
                = adHocChatRoomList.findServerWrapperFromProvider(
                        protocolProvider);

            chatRoomWrapper = new AdHocChatRoomWrapper(
                    parentProvider, chatRoom);
            parentProvider.addAdHocChatRoom(chatRoomWrapper);
            adHocChatRoomList.addAdHocChatRoom(chatRoomWrapper);

            fireAdHocChatRoomListChangedEvent(
                chatRoomWrapper,
                AdHocChatRoomListChangeEvent.AD_HOC_CHAT_ROOM_ADDED);
        }

        return chatRoomWrapper;
    }",False,False,"This method creates an ad-hoc chat room by specifying the chat room name, the parent protocol provider, and the contacts invited to participate. It returns the corresponding AdHocChatRoomWrapper object.",True,"This code defines a method called `createAdHocChatRoom` that creates an ad-hoc chat room by specifying the chat room name, the parent protocol provider, and the contacts invited to participate. It uses the provided protocol provider to create the chat room and handles any exceptions that may occur during the process. If the chat room is successfully created, it adds the chat room to the list of ad-hoc chat rooms and notifies listeners of the change."
33,joinChatRoom(ChatRoomWrapper),join chat room chat room wrapper join chat room param chat room wrapper ,Method,joinChatRoom(ChatRoom),net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+run(),"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() org.jdesktop.swingworker.SwingWorker+execute() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[]) org.jdesktop.swingworker.SwingWorker+execute()",,737,23,1,"/** 
 * Join chat room.
 * @param chatRoomWrapper
 */
","/**
     * Join chat room.
     * @param chatRoomWrapper
     */
    public void joinChatRoom(ChatRoomWrapper chatRoomWrapper)
    {
        ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

        if(chatRoom == null)
        {
            new ErrorDialog(
               GuiActivator.getUIService().getMainFrame(),
               GuiActivator.getResources().getI18NString(""service.gui.WARNING""),
               GuiActivator.getResources().getI18NString(
                        ""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                        new String[]{chatRoomWrapper.getChatRoomName()}))
                    .showDialog();

            return;
        }

        new JoinChatRoomTask(chatRoomWrapper, null, null).execute();
    }",True,True,"The function of this method is to join a chat room. It takes a ChatRoomWrapper as a parameter, retrieves the ChatRoom object from it, and then checks if the chat room is null. If it is null, it displays an error dialog. If the chat room is not null, it creates a new JoinChatRoomTask and executes it.",True,"This code defines a method called ""joinChatRoom"" that takes a ChatRoomWrapper object as a parameter. It checks if the chat room is null and displays an error dialog if it is. Otherwise, it creates a new JoinChatRoomTask and executes it."
34,joinChatRoom(AdHocChatRoomWrapper),join chat room chat room wrapper joins the given ad hoc chat room param chat room wrapper ,Method,joinChatRoom(AdHocChatRoom),,"net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoom() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() org.jdesktop.swingworker.SwingWorker+execute() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+JoinAdHocChatRoomTask(AdHocChatRoomWrapper) org.jdesktop.swingworker.SwingWorker+execute()",,774,24,1,"/** 
 * Joins the given ad-hoc chat room
 * @param chatRoomWrapper
 */
","/**
     * Joins the given ad-hoc chat room
     *
     * @param chatRoomWrapper
     */
    public void joinChatRoom(AdHocChatRoomWrapper chatRoomWrapper)
    {
        AdHocChatRoom chatRoom = chatRoomWrapper.getAdHocChatRoom();

        if(chatRoom == null)
        {
            new ErrorDialog(
               GuiActivator.getUIService().getMainFrame(),
               GuiActivator.getResources().getI18NString(""service.gui.WARNING""),
               GuiActivator.getResources().getI18NString(
                        ""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                        new String[]{chatRoomWrapper.getAdHocChatRoomName()}))
                    .showDialog();

            return;
        }

        new JoinAdHocChatRoomTask(chatRoomWrapper).execute();
    }",False,False,"This method joins an ad-hoc chat room. It first checks if the chat room is null, and if so, displays an error dialog. If the chat room is not null, it executes a task to join the chat room.",True,"This method joins an ad-hoc chat room by retrieving the chat room object from the given wrapper. If the chat room is null, it displays an error dialog indicating that the chat room is not connected. Otherwise, it executes a task to join the chat room."
35,removeChatRoom(ChatRoomWrapper),remove chat room chat room wrapper removes the given chat room from the ui param chat room wrapper the chat room to remove ,Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomRightButtonMenu+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableUI+removeSelectedRoom(),"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+leaveChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+leaveChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+closeChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+closeChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+removeChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+removeChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeEvent+CHAT_ROOM_REMOVED,556,20,1,"/** 
 * Removes the given chat room from the UI.
 * @param chatRoomWrapper the chat room to remove.
 */
","/**
     * Removes the given chat room from the UI.
     *
     * @param chatRoomWrapper the chat room to remove.
     */
    public void removeChatRoom(ChatRoomWrapper chatRoomWrapper)
    {
        ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

        if (chatRoom != null)
            leaveChatRoom(chatRoomWrapper);

        this.closeChatRoom(chatRoomWrapper);

        chatRoomList.removeChatRoom(chatRoomWrapper);

        fireChatRoomListChangedEvent(
            chatRoomWrapper,
            ChatRoomListChangeEvent.CHAT_ROOM_REMOVED);
    }",False,False,"This method removes a chat room from the user interface. It first checks if the chat room exists, then leaves the chat room, closes the chat room, removes it from the chat room list, and fires an event to notify that the chat room has been removed.",False,"This method removes a chat room from the user interface. It first checks if the chat room is not null and leaves the chat room if it is not. Then, it closes the chat room and removes it from the chat room list. Finally, it fires an event to notify that the chat room has been removed."
36,joinChatRoom(ChatRoom),join chat room chat room joins the given chat room and manages all the exceptions that could occur during the join process param chat room the chat room to join ,Method,"joinChatRoom(String,ChatRoomProviderWrapper)",net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+run(),"net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+ChatRoomWrapper(ChatRoomProviderWrapper,ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeEvent+CHAT_ROOM_ADDED,1160,37,1,"/** 
 * Joins the given chat room and manages all the exceptions that could occur during the join process.
 * @param chatRoom the chat room to join
 */
","/**
     * Joins the given chat room and manages all the exceptions that could
     * occur during the join process.
     *
     * @param chatRoom the chat room to join
     */
    public void joinChatRoom(ChatRoom chatRoom)
    {
        ChatRoomWrapper chatRoomWrapper
            = chatRoomList.findChatRoomWrapperFromChatRoom(chatRoom);

        if(chatRoomWrapper == null)
        {
            ChatRoomProviderWrapper parentProvider
                = chatRoomList
                    .findServerWrapperFromProvider(
                        chatRoom.getParentProvider());

            chatRoomWrapper = new ChatRoomWrapper(parentProvider, chatRoom);

            chatRoomList.addChatRoom(chatRoomWrapper);

            fireChatRoomListChangedEvent(
                chatRoomWrapper,
                ChatRoomListChangeEvent.CHAT_ROOM_ADDED);
        }

        this.joinChatRoom(chatRoomWrapper);

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();

        chatWindowManager
            .openChat(
                chatWindowManager.getMultiChat(chatRoomWrapper, true),
                true);
    }",True,True,"This method joins a chat room by finding the chat room in a list, creating a wrapper for it if it doesn't exist, adding it to the list, and then opening the chat window for the joined chat room.",True,"This method joins a chat room by first checking if the chat room is already in the chat room list, and if not, it creates a new chat room wrapper and adds it to the list. It then proceeds to join the chat room and opens a chat window for it."
37,joinChatRoom(AdHocChatRoom),join chat room chat room joins the given chat room and manages all the exceptions that could occur during the join process param chat room the chat room to join ,Method,,,"net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findChatRoomWrapperFromAdHocChatRoom(AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findChatRoomWrapperFromAdHocChatRoom(AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.service.protocol.AdHocChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.AdHocChatRoom+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+AdHocChatRoomWrapper(AdHocChatRoomProviderWrapper,AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+addAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+addAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoomWrapper,boolean)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeEvent+AD_HOC_CHAT_ROOM_ADDED,1205,37,1,"/** 
 * Joins the given chat room and manages all the exceptions that could occur during the join process.
 * @param chatRoom the chat room to join
 */
","/**
     * Joins the given chat room and manages all the exceptions that could
     * occur during the join process.
     *
     * @param chatRoom the chat room to join
     */
    public void joinChatRoom(AdHocChatRoom chatRoom)
    {
        AdHocChatRoomWrapper chatRoomWrapper
            = adHocChatRoomList.findChatRoomWrapperFromAdHocChatRoom(chatRoom);

        if(chatRoomWrapper == null)
        {
            AdHocChatRoomProviderWrapper parentProvider
            = adHocChatRoomList.findServerWrapperFromProvider(
                chatRoom.getParentProvider());

            chatRoomWrapper =
                new AdHocChatRoomWrapper(parentProvider, chatRoom);

            adHocChatRoomList.addAdHocChatRoom(chatRoomWrapper);

            fireAdHocChatRoomListChangedEvent(
                chatRoomWrapper,
                AdHocChatRoomListChangeEvent.AD_HOC_CHAT_ROOM_ADDED);
        }

        this.joinChatRoom(chatRoomWrapper);

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();

        chatWindowManager
            .openChat(
                chatWindowManager.getMultiChat(chatRoomWrapper, true),
                true);
    }",False,False,"This method joins a chat room by finding the chat room wrapper from the given chat room, creating a new wrapper if it doesn't exist, adding the wrapper to the chat room list, and firing an event to notify listeners. It then joins the chat room using the wrapper and opens the chat window for the chat room.",True,"This method joins a chat room by creating a wrapper for the chat room if it doesn't already exist, adding it to the chat room list, and firing an event to notify listeners. It then joins the chat room using the wrapper, and opens the chat window for the joined chat room."
38,"joinChatRoom(ChatRoom,String,byte[])",join chat room chat room nickname password joins the given chat room and manages all the exceptions that could occur during the join process param chat room the chat room to join param nickname the nickname we re using to join param password the password we re using to join ,Method,acceptInvitation(ChatRoomInvitation),net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+run() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+run(),"net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+ChatRoomWrapper(ChatRoomProviderWrapper,ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[]) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[])",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeEvent+CHAT_ROOM_ADDED,1113,32,1,"/** 
 * Joins the given chat room and manages all the exceptions that could occur during the join process.
 * @param chatRoom the chat room to join
 * @param nickname the nickname we're using to join
 * @param password the password we're using to join
 */
","/**
     * Joins the given chat room and manages all the exceptions that could
     * occur during the join process.
     *
     * @param chatRoom the chat room to join
     * @param nickname the nickname we're using to join
     * @param password the password we're using to join
     */
    public void joinChatRoom(   ChatRoom chatRoom,
                                String nickname,
                                byte[] password)
    {
        ChatRoomWrapper chatRoomWrapper
            = chatRoomList.findChatRoomWrapperFromChatRoom(chatRoom);

        if(chatRoomWrapper == null)
        {
            ChatRoomProviderWrapper parentProvider
                = chatRoomList.findServerWrapperFromProvider(
                    chatRoom.getParentProvider());

            chatRoomWrapper = new ChatRoomWrapper(parentProvider, chatRoom);

            chatRoomList.addChatRoom(chatRoomWrapper);

            fireChatRoomListChangedEvent(
                chatRoomWrapper,
                ChatRoomListChangeEvent.CHAT_ROOM_ADDED);
        }

        this.joinChatRoom(chatRoomWrapper, nickname, password);
    }",True,True,"This method joins a chat room by handling any exceptions that may occur during the join process. It first checks if the chat room is already joined, and if not, creates a new chat room wrapper and adds it to the chat room list. Then, it calls another method to actually join the chat room using the provided nickname and password.",True,"The `joinChatRoom` method is responsible for joining a chat room, handling any exceptions that may occur during the process. It first checks if the chat room is already in the chat room list, and if not, it creates a new chat room wrapper and adds it to the list. Then, it calls another method to actually join the chat room using the provided nickname and password."
39,"joinChatRoom(String,ChatRoomProviderWrapper)",join chat room chat room name chat room provider joins the room with the given name though the given chat room provider param chat room name the name of the room to join param chat room provider the chat room provider to join through ,Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.JoinChatRoomDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.JoinChatRoomWindow+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.JoinChatRoomWizard+wizardFinished(WizardEvent),"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+FindRoomTask(String,ChatRoomProviderWrapper) org.jdesktop.swingworker.SwingWorker+execute() org.jdesktop.swingworker.SwingWorker+execute() org.jdesktop.swingworker.SwingWorker+get() org.jdesktop.swingworker.SwingWorker+get() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoom) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.AccountID+getService() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getService() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog()",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,1568,43,1,"/** 
 * Joins the room with the given name though the given chat room provider.
 * @param chatRoomName the name of the room to join.
 * @param chatRoomProvider the chat room provider to join through.
 */
","/**
     * Joins the room with the given name though the given chat room provider.
     *
     * @param chatRoomName the name of the room to join.
     * @param chatRoomProvider the chat room provider to join through.
     */
    public void joinChatRoom(   String chatRoomName,
                                ChatRoomProviderWrapper chatRoomProvider)
    {
        FindRoomTask findRoomTask = new FindRoomTask(   chatRoomName,
                                                        chatRoomProvider);

        findRoomTask.execute();

        ChatRoom chatRoom = null;
        try
        {
            chatRoom = findRoomTask.get();
        }
        catch (InterruptedException e)
        {
            if (logger.isTraceEnabled())
                logger.trace(""FindRoomTask has been interrupted."", e);
        }
        catch (ExecutionException e)
        {
            if (logger.isTraceEnabled())
                logger.trace(""Execution exception occurred in FindRoomTask."", e);
        }

        if (chatRoom != null)
            this.joinChatRoom(chatRoom);
        else
            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                    ""service.gui.CHAT_ROOM_NOT_EXIST"",
                    new String[]{chatRoomName,
                    chatRoomProvider.getProtocolProvider()
                        .getAccountID().getService()}))
                    .showDialog();
    }",True,True,"This method joins a chat room with the given name through the given chat room provider. It creates a task to find the room, executes the task, and then retrieves the chat room. If the chat room is found, it joins the chat room. If the chat room is not found, it displays an error dialog.",True,"This code defines a method called `joinChatRoom` that takes a chat room name and a chat room provider as parameters. It creates a `FindRoomTask` to search for the specified chat room, and if found, it joins the chat room. If the chat room is not found, it displays an error dialog."
40,leaveChatRoom(ChatRoomWrapper),leave chat room chat room wrapper leaves the given chat room param chat room wrapper the chat room to leave ,Method,removeChatRoom(ChatRoomWrapper),net.java.sip.communicator.impl.gui.main.chat.toolBars.MainToolBar+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomRightButtonMenu+actionPerformed(ActionEvent),"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.service.protocol.ChatRoom+leave() net.java.sip.communicator.service.protocol.ChatRoom+leave() net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.util.ConfigurationUtils+updateChatRoomStatus(ProtocolProviderService,String,String) net.java.sip.communicator.util.ConfigurationUtils+updateChatRoomStatus(ProtocolProviderService,String,String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomID() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomID() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+closeChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+closeChatRoom(ChatRoomWrapper)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.service.protocol.globalstatus.GlobalStatusEnum+OFFLINE_STATUS,1456,43,1,"/** 
 * Leaves the given <tt>ChatRoom</tt>.
 * @param chatRoomWrapper the <tt>ChatRoom</tt> to leave.
 */
","/**
     * Leaves the given <tt>ChatRoom</tt>.
     *
     * @param chatRoomWrapper the <tt>ChatRoom</tt> to leave.
     */
    public void leaveChatRoom(ChatRoomWrapper chatRoomWrapper)
    {
        ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

        if (chatRoom == null)
        {
            ResourceManagementService resources = GuiActivator.getResources();

            new ErrorDialog(
                    GuiActivator.getUIService().getMainFrame(),
                    resources.getI18NString(""service.gui.WARNING""),
                    resources
                        .getI18NString(
                            ""service.gui.CHAT_ROOM_LEAVE_NOT_CONNECTED""))
                .showDialog();

            return;
        }

        if (chatRoom.isJoined())
            chatRoom.leave();

        ChatRoomWrapper existChatRoomWrapper
            = chatRoomList.findChatRoomWrapperFromChatRoom(chatRoom);

        if(existChatRoomWrapper == null)
            return;

        // We save the choice of the user, before the chat room is really
        // joined, because even the join fails we want the next time when
        // we login to join this chat room automatically.
        ConfigurationUtils.updateChatRoomStatus(
            chatRoomWrapper.getParentProvider().getProtocolProvider(),
            chatRoomWrapper.getChatRoomID(),
            GlobalStatusEnum.OFFLINE_STATUS);

        this.closeChatRoom(existChatRoomWrapper);
    }",False,False,"This method is used to leave a chat room. It checks if the chat room is null, displays an error dialog if it is, and then leaves the chat room if it is joined. It also updates the chat room status and closes the chat room.",True,"This code defines a method called ""leaveChatRoom"" which is used to leave a specified chat room. It first checks if the chat room is connected, displays a warning dialog if not, and then leaves the chat room and updates its status before closing it."
41,leaveChatRoom(AdHocChatRoomWrapper),leave chat room chat room wrapper leaves the given chat room param chat room wrapper the chat room to leave ,Method,,"net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+closeAllChats(ChatContainer,boolean)","net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoom() net.java.sip.communicator.service.protocol.AdHocChatRoom+leave() net.java.sip.communicator.service.protocol.AdHocChatRoom+leave() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog()",,712,23,1,"/** 
 * Leaves the given <tt>ChatRoom</tt>.
 * @param chatRoomWrapper the <tt>ChatRoom</tt> to leave.
 */
","/**
     * Leaves the given <tt>ChatRoom</tt>.
     *
     * @param chatRoomWrapper the <tt>ChatRoom</tt> to leave.
     */
    public void leaveChatRoom(AdHocChatRoomWrapper chatRoomWrapper)
    {
        AdHocChatRoom chatRoom = chatRoomWrapper.getAdHocChatRoom();

        if (chatRoom != null)
        {
            chatRoom.leave();
        }
        else
        {
            new ErrorDialog(
               GuiActivator.getUIService().getMainFrame(),
               GuiActivator.getResources().getI18NString(""service.gui.WARNING""),
               GuiActivator.getResources().getI18NString(
                   ""service.gui.CHAT_ROOM_LEAVE_NOT_CONNECTED""))
                   .showDialog();
        }
    }",False,False,"The function of this method is to leave a chat room. It takes a ChatRoomWrapper as a parameter, retrieves the AdHocChatRoom from it, and calls the leave() method on the chat room. If the chat room is null, it displays an error dialog indicating that the user is not connected to the chat room.",True,"This code defines a method called ""leaveChatRoom"" that takes an AdHocChatRoomWrapper object as a parameter. It checks if the chat room is not null, and if so, it calls the ""leave"" method on the chat room. If the chat room is null, it displays an error dialog indicating that the user is not connected to the chat room."
42,getExistingChatRooms(ChatRoomProviderWrapper),get existing chat rooms chat room provider returns existing chat rooms for the given chat room provider param chat room provider the chat room provider wrapper whichchat rooms we re looking for return existing chat rooms for the given chat room provider ,Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+LoadProvidersWorker.construct() net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.JoinChatRoomWindow+loadProviderRooms() net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.SearchChatRoomPanel+loadChatRoomsList() net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.SearchChatRoomPanel+setChatRoomProvider(ChatRoomProviderWrapper),"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+FindAllRoomsTask(ChatRoomProviderWrapper) org.jdesktop.swingworker.SwingWorker+execute() org.jdesktop.swingworker.SwingWorker+execute() org.jdesktop.swingworker.SwingWorker+get() org.jdesktop.swingworker.SwingWorker+get() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,1020,32,1,"/** 
 * Returns existing chat rooms for the given <tt>chatRoomProvider</tt>.
 * @param chatRoomProvider the <tt>ChatRoomProviderWrapper</tt>, whichchat rooms we're looking for
 * @return  existing chat rooms for the given <tt>chatRoomProvider</tt>
 */
","/**
     * Returns existing chat rooms for the given <tt>chatRoomProvider</tt>.
     * @param chatRoomProvider the <tt>ChatRoomProviderWrapper</tt>, which
     * chat rooms we're looking for
     * @return  existing chat rooms for the given <tt>chatRoomProvider</tt>
     */
    public List<String> getExistingChatRooms(
        ChatRoomProviderWrapper chatRoomProvider)
    {
        FindAllRoomsTask findAllRoomsTask
            = new FindAllRoomsTask(chatRoomProvider);

        findAllRoomsTask.execute();

        List<String> chatRooms = null;
        try
        {
            chatRooms = findAllRoomsTask.get();
        }
        catch (InterruptedException e)
        {
            if (logger.isTraceEnabled())
                logger.trace(""FindAllRoomsTask has been interrupted."", e);
        }
        catch (ExecutionException e)
        {
            if (logger.isTraceEnabled())
                logger.trace(""Execution exception occurred in FindAllRoomsTask"", e);
        }

        return chatRooms;
    }",True,True,"This method returns a list of existing chat rooms for a given chat room provider. It creates a task to find all the rooms, executes the task, and retrieves the list of chat rooms from the task.",False,"This code defines a method called ""getExistingChatRooms"" that takes a ChatRoomProviderWrapper object as a parameter and returns a list of existing chat rooms for that provider. It creates a FindAllRoomsTask object, executes it, and retrieves the result to populate the chatRooms list."
43,containsHistoryWindowForChatRoom(ChatRoomWrapper),contains history window for chat room chat room wrapper checks if there s an open history window for the given chat room param chat room wrapper the chat room wrapper to check for return true if there s an opened history window for the given chat room false otherwise ,Method,,,java.util.Hashtable+containsKey(Object) java.util.Hashtable+containsKey(Object),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomHistory,436,12,1,"/** 
 * Checks if there's an open history window for the given chat room.
 * @param chatRoomWrapper the chat room wrapper to check for
 * @return TRUE if there's an opened history window for the given chat room,FALSE otherwise.
 */
","/**
     * Checks if there's an open history window for the given chat room.
     *
     * @param chatRoomWrapper the chat room wrapper to check for
     * @return TRUE if there's an opened history window for the given chat room,
     *         FALSE otherwise.
     */
    public boolean containsHistoryWindowForChatRoom(
        ChatRoomWrapper chatRoomWrapper)
    {
        return chatRoomHistory.containsKey(chatRoomWrapper);
    }",False,False,"This method checks if there is an open history window for a given chat room by checking if the chat room wrapper is present in the chat room history. It returns true if there is an open history window, and false otherwise.",False,"This code defines a method called `containsHistoryWindowForChatRoom` that checks if there is an open history window for a given chat room. It takes a `ChatRoomWrapper` object as a parameter and returns `true` if there is an open history window for that chat room, and `false` otherwise."
44,getHistoryWindowForChatRoom(ChatRoomWrapper),get history window for chat room chat room wrapper returns the history window for the given chat room param chat room wrapper the chat room wrapper to search for return the history window for the given chat room ,Method,,,java.util.Hashtable+get(Object) java.util.Hashtable+get(Object),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomHistory,361,11,1,"/** 
 * Returns the history window for the given chat room.
 * @param chatRoomWrapper the chat room wrapper to search for
 * @return the history window for the given chat room
 */
","/**
     * Returns the history window for the given chat room.
     *
     * @param chatRoomWrapper the chat room wrapper to search for
     * @return the history window for the given chat room
     */
    public HistoryWindow getHistoryWindowForChatRoom(
        ChatRoomWrapper chatRoomWrapper)
    {
        return chatRoomHistory.get(chatRoomWrapper);
    }",False,False,This method returns the history window for a given chat room by searching for the chat room wrapper in the chat room history.,False,"This code defines a method called ""getHistoryWindowForChatRoom"" that takes a ChatRoomWrapper object as input and returns the corresponding HistoryWindow object from a map called ""chatRoomHistory"". The method retrieves the history window for a given chat room."
45,"addHistoryWindowForChatRoom(ChatRoomWrapper,HistoryWindow)",add history window for chat room chat room wrapper history window adds a history window for a given chat room in the table of opened history windows param chat room wrapper the chat room wrapper to add param history window the history window to add ,Method,,,"java.util.Hashtable+put(K,V) java.util.Hashtable+put(K,V)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomHistory,416,12,1,"/** 
 * Adds a history window for a given chat room in the table of opened history windows.
 * @param chatRoomWrapper the chat room wrapper to add
 * @param historyWindow the history window to add
 */
","/**
     * Adds a history window for a given chat room in the table of opened
     * history windows.
     *
     * @param chatRoomWrapper the chat room wrapper to add
     * @param historyWindow the history window to add
     */
    public void addHistoryWindowForChatRoom(ChatRoomWrapper chatRoomWrapper,
        HistoryWindow historyWindow)
    {
        chatRoomHistory.put(chatRoomWrapper, historyWindow);
    }",False,False,This method adds a history window for a given chat room to a table of opened history windows. It takes a chat room wrapper and a history window as parameters and adds them to a map called chatRoomHistory.,False,This method adds a history window for a specific chat room to a table of opened history windows. It takes a chat room wrapper and a history window as parameters and associates them in a map called chatRoomHistory.
46,removeHistoryWindowForChatRoom(ChatRoomWrapper),remove history window for chat room chat room wrapper removes the history window for the given chat room param chat room wrapper the chat room wrapper to remove the history window ,Method,,,java.util.Hashtable+remove(Object) java.util.Hashtable+remove(Object),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomHistory,299,9,1,"/** 
 * Removes the history window for the given chat room.
 * @param chatRoomWrapper the chat room wrapper to remove the history window
 */
","/**
     * Removes the history window for the given chat room.
     *
     * @param chatRoomWrapper the chat room wrapper to remove the history window
     */
    public void removeHistoryWindowForChatRoom(ChatRoomWrapper chatRoomWrapper)
    {
        chatRoomHistory.remove(chatRoomWrapper);
    }",False,False,This method removes the history window for a given chat room by removing the chat room wrapper from the chat room history.,False,"This code defines a method called ""removeHistoryWindowForChatRoom"" that takes a ChatRoomWrapper object as a parameter. It removes the history window associated with the given chat room by removing it from the chatRoomHistory collection."
47,addChatRoomListChangeListener(ChatRoomListChangeListener),add chat room list change listener l adds the given chat room list change listener that will listen for all changes of the chat room list data model param l the listener to add ,Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListUI+ChatRoomListUI(ChatRoomListDialog) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableUI+initChatRoomList(),java.util.Vector+add(E) java.util.Vector+add(E),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+listChangeListeners net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+listChangeListeners,378,13,1,"/** 
 * Adds the given <tt>ChatRoomListChangeListener</tt> that will listen for all changes of the chat room list data model.
 * @param l the listener to add.
 */
","/**
     * Adds the given <tt>ChatRoomListChangeListener</tt> that will listen for
     * all changes of the chat room list data model.
     *
     * @param l the listener to add.
     */
    public void addChatRoomListChangeListener(ChatRoomListChangeListener l)
    {
        synchronized (listChangeListeners)
        {
            listChangeListeners.add(l);
        }
    }",True,True,This method adds a listener to the chat room list data model that will be notified of any changes to the list.,False,"This code adds a listener to the chat room list data model, allowing it to listen for any changes made to the list. The listener is added to a synchronized list of listeners, ensuring thread safety."
48,removeChatRoomListChangeListener(ChatRoomListChangeListener),remove chat room list change listener l removes the given chat room list change listener param l the listener to remove ,Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableUI+dispose(),java.util.Vector+remove(Object) java.util.Vector+remove(Object),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+listChangeListeners net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+listChangeListeners,317,12,1,"/** 
 * Removes the given <tt>ChatRoomListChangeListener</tt>.
 * @param l the listener to remove.
 */
","/**
     * Removes the given <tt>ChatRoomListChangeListener</tt>.
     *
     * @param l the listener to remove.
     */
    public void removeChatRoomListChangeListener(ChatRoomListChangeListener l)
    {
        synchronized (listChangeListeners)
        {
            listChangeListeners.remove(l);
        }
    }",True,True,This method removes a given ChatRoomListChangeListener from the list of listeners.,False,"This code defines a method called ""removeChatRoomListChangeListener"" that removes a given listener from a list of chat room list change listeners. The method is synchronized to ensure thread safety."
49,addAdHocChatRoomListChangeListener(AdHocChatRoomListChangeListener),add ad hoc chat room list change listener l adds the given ad hoc chat room list change listener that will listen for all changes of the chat room list data model param l the listener to add ,Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListUI+ChatRoomListUI(ChatRoomListDialog),java.util.Vector+add(E) java.util.Vector+add(E),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHoclistChangeListeners net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHoclistChangeListeners,416,14,1,"/** 
 * Adds the given <tt>AdHocChatRoomListChangeListener</tt> that will listen for all changes of the chat room list data model.
 * @param l the listener to add.
 */
","/**
     * Adds the given <tt>AdHocChatRoomListChangeListener</tt> that will listen
     * for all changes of the chat room list data model.
     *
     * @param l the listener to add.
     */
    public void addAdHocChatRoomListChangeListener(
            AdHocChatRoomListChangeListener l)
    {
        synchronized (adHoclistChangeListeners)
        {
            adHoclistChangeListeners.add(l);
        }
    }",False,False,This method adds a listener to the chat room list data model that will be notified of any changes to the list.,False,"This code defines a method called ""addAdHocChatRoomListChangeListener"" that adds a listener to the chat room list data model. The listener will be notified of any changes to the chat room list. The method takes an instance of the ""AdHocChatRoomListChangeListener"" interface as a parameter."
50,removeAdHocChatRoomListChangeListener(AdHocChatRoomListChangeListener),remove ad hoc chat room list change listener l removes the given ad hoc chat room list change listener param l the listener to remove ,Method,,,java.util.Vector+remove(Object) java.util.Vector+remove(Object),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHoclistChangeListeners net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHoclistChangeListeners,351,13,1,"/** 
 * Removes the given <tt>AdHocChatRoomListChangeListener</tt>.
 * @param l the listener to remove.
 */
","/**
     * Removes the given <tt>AdHocChatRoomListChangeListener</tt>.
     *
     * @param l the listener to remove.
     */
    public void removeAdHocChatRoomListChangeListener(
        AdHocChatRoomListChangeListener l)
    {
        synchronized (adHoclistChangeListeners)
        {
            adHoclistChangeListeners.remove(l);
        }
    }",False,False,This method removes a given AdHocChatRoomListChangeListener from a list of listeners.,False,"This code defines a method called ""removeAdHocChatRoomListChangeListener"" that takes an AdHocChatRoomListChangeListener as a parameter and removes it from a list of listeners. The method is synchronized to ensure thread safety."
51,"fireChatRoomListChangedEvent(ChatRoomWrapper,int)",fire chat room list changed event chat room wrapper event id notifies all interested listeners that a change in the chat room list model has occurred param chat room wrapper the chat room wrapper that identifies the chatroom param event id the identifier of the event ,Method,"createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean) removeChatRoom(ChatRoomWrapper) joinChatRoom(ChatRoom) joinChatRoom(ChatRoom,String,byte[])",,"net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeEvent+ChatRoomListChangeEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeListener+contentChanged(ChatRoomListChangeEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeListener+contentChanged(ChatRoomListChangeEvent)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+listChangeListeners,634,18,2,"/** 
 * Notifies all interested listeners that a change in the chat room list model has occurred.
 * @param chatRoomWrapper the chat room wrapper that identifies the chatroom
 * @param eventID the identifier of the event
 */
","/**
     * Notifies all interested listeners that a change in the chat room list
     * model has occurred.
     * @param chatRoomWrapper the chat room wrapper that identifies the chat
     * room
     * @param eventID the identifier of the event
     */
    private void fireChatRoomListChangedEvent(  ChatRoomWrapper chatRoomWrapper,
                                                int eventID)
    {
        ChatRoomListChangeEvent evt
            = new ChatRoomListChangeEvent(chatRoomWrapper, eventID);

        for (ChatRoomListChangeListener l : listChangeListeners)
        {
            l.contentChanged(evt);
        }
    }",True,True,This method is used to notify all listeners that a change has occurred in the chat room list model. It creates a new event object and passes it to each listener's contentChanged method.,False,"The method ""fireChatRoomListChangedEvent"" is used to notify all registered listeners that a change has occurred in the chat room list model. It creates a new event object with the provided chat room wrapper and event ID, and then iterates through the list of listeners, calling the ""contentChanged"" method on each listener with the event object as the argument."
52,"fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int)",fire ad hoc chat room list changed event ad hoc chat room wrapper event id notifies all interested listeners that a change in the chat room list model has occurred param ad hoc chat room wrapper the chat room wrapper that identifies thechat room param event id the identifier of the event ,Method,"localUserAdHocPresenceChanged(LocalUserAdHocChatRoomPresenceChangeEvent) localUserAdHocPresenceChanged(LocalUserAdHocChatRoomPresenceChangeEvent) createAdHocChatRoom(ProtocolProviderService,Collection<String>,String) joinChatRoom(AdHocChatRoom)",,"net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeEvent+AdHocChatRoomListChangeEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeListener+contentChanged(AdHocChatRoomListChangeEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeListener+contentChanged(AdHocChatRoomListChangeEvent)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHoclistChangeListeners,719,19,2,"/** 
 * Notifies all interested listeners that a change in the chat room list model has occurred.
 * @param adHocChatRoomWrapper the chat room wrapper that identifies thechat room
 * @param eventID the identifier of the event
 */
","/**
     * Notifies all interested listeners that a change in the chat room list
     * model has occurred.
     * @param adHocChatRoomWrapper the chat room wrapper that identifies the
     * chat room
     * @param eventID the identifier of the event
     */
    private void fireAdHocChatRoomListChangedEvent(
                                    AdHocChatRoomWrapper adHocChatRoomWrapper,
                                    int                  eventID)
    {
        AdHocChatRoomListChangeEvent evt
            = new AdHocChatRoomListChangeEvent(adHocChatRoomWrapper, eventID);

        for (AdHocChatRoomListChangeListener l : adHoclistChangeListeners)
        {
            l.contentChanged(evt);
        }
    }",False,False,"This method notifies all listeners that a change in the chat room list model has occurred. It creates an event object with the chat room wrapper and event ID, and then calls the contentChanged method on each listener with the event object as the parameter.",False,"This code defines a private method called ""fireAdHocChatRoomListChangedEvent"" that is responsible for notifying all registered listeners about a change in the chat room list model. It creates a new event object and then iterates through the list of listeners, invoking the ""contentChanged"" method on each listener with the event object as the argument."
53,closeChatRoom(ChatRoomWrapper),close chat room chat room wrapper closes the chat corresponding to the given chat room wrapper if such exists param chat room wrapper the chat room wrapper for which we search a chatto close ,Method,removeChatRoom(ChatRoomWrapper) leaveChatRoom(ChatRoomWrapper),"net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+removeChatProvider(ChatRoomProviderWrapper,boolean)","net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+closeChat(ChatPanel) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+closeChat(ChatPanel)",,573,17,1,"/** 
 * Closes the chat corresponding to the given chat room wrapper, if such exists.
 * @param chatRoomWrapper the chat room wrapper for which we search a chatto close.
 */
","/**
     * Closes the chat corresponding to the given chat room wrapper, if such
     * exists.
     *
     * @param chatRoomWrapper the chat room wrapper for which we search a chat
     * to close.
     */
    public void closeChatRoom(ChatRoomWrapper chatRoomWrapper)
    {
        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();
        ChatPanel chatPanel
            = chatWindowManager.getMultiChat(chatRoomWrapper, false);

        if (chatPanel != null)
            chatWindowManager.closeChat(chatPanel);
    }",False,False,This method closes a chat room by finding the corresponding chat panel and closing it using the chat window manager.,False,"This code defines a method called `closeChatRoom` that closes a chat room if it exists. It takes a `ChatRoomWrapper` object as a parameter and uses the `ChatWindowManager` to retrieve the corresponding chat panel. If the chat panel exists, it is closed using the `closeChat` method of the `ChatWindowManager`."
54,closeAdHocChatRoom(AdHocChatRoomWrapper),close ad hoc chat room chat room wrapper closes the chat corresponding to the given ad hoc chat room wrapper if such exists param chat room wrapper the ad hoc chat room wrapper for which we search achat to close ,Method,localUserAdHocPresenceChanged(LocalUserAdHocChatRoomPresenceChangeEvent),,"net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+closeChat(ChatPanel) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+closeChat(ChatPanel)",,598,17,2,"/** 
 * Closes the chat corresponding to the given ad-hoc chat room wrapper, if such exists.
 * @param chatRoomWrapper the ad-hoc chat room wrapper for which we search achat to close.
 */
","/**
     * Closes the chat corresponding to the given ad-hoc chat room wrapper, if
     * such exists.
     *
     * @param chatRoomWrapper the ad-hoc chat room wrapper for which we search a
     * chat to close.
     */
    private void closeAdHocChatRoom(AdHocChatRoomWrapper chatRoomWrapper)
    {
        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();
        ChatPanel chatPanel
            = chatWindowManager.getMultiChat(chatRoomWrapper, false);

        if (chatPanel != null)
            chatWindowManager.closeChat(chatPanel);
    }",False,False,"This method closes the chat corresponding to the given ad-hoc chat room wrapper, if it exists. It retrieves the chat window manager, gets the chat panel for the given chat room wrapper, and if it is not null, closes the chat.",False,"This code defines a private method called `closeAdHocChatRoom` that closes a chat corresponding to a given ad-hoc chat room wrapper. It retrieves the chat panel from the chat window manager using the wrapper, and if it exists, it closes the chat using the chat window manager."
55,serviceChanged(ServiceEvent),service changed event handles service event s triggered by adding or removing a protocol provider service updates the list of available chat rooms and chat room servers param event the event to handle ,Method,,,org.osgi.framework.Bundle+getState() org.osgi.framework.ServiceReference+getBundle() org.osgi.framework.ServiceEvent+getServiceReference() org.osgi.framework.ServiceEvent+getServiceReference() org.osgi.framework.ServiceReference+getBundle() org.osgi.framework.Bundle+getState() org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.ServiceEvent+getServiceReference() org.osgi.framework.ServiceEvent+getServiceReference() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+addChatProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+addChatProvider(ProtocolProviderService) org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+removeChatProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+removeChatProvider(ProtocolProviderService) org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatProvider(ProtocolProviderService) org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+removeChatProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+removeChatProvider(ProtocolProviderService),org.osgi.framework.Bundle+STOPPING net.java.sip.communicator.impl.gui.GuiActivator+bundleContext org.osgi.framework.ServiceEvent+REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList org.osgi.framework.ServiceEvent+UNREGISTERING net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList org.osgi.framework.ServiceEvent+REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList org.osgi.framework.ServiceEvent+UNREGISTERING net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList,1994,56,1,"/** 
 * Handles <tt>ServiceEvent</tt>s triggered by adding or removing a ProtocolProviderService. Updates the list of available chat rooms and chat room servers.
 * @param event The event to handle.
 */
","/**
     * Handles <tt>ServiceEvent</tt>s triggered by adding or removing a
     * ProtocolProviderService. Updates the list of available chat rooms and
     * chat room servers.
     *
     * @param event The event to handle.
     */
    public void serviceChanged(ServiceEvent event)
    {
        // if the event is caused by a bundle being stopped, we don't want to
        // know
        if (event.getServiceReference().getBundle().getState()
                == Bundle.STOPPING)
            return;

        Object service = GuiActivator.bundleContext.getService(event
            .getServiceReference());

        // we don't care if the source service is not a protocol provider
        if (!(service instanceof ProtocolProviderService))
            return;

        ProtocolProviderService protocolProvider
            = (ProtocolProviderService) service;

        Object multiUserChatOpSet
            = protocolProvider
                .getOperationSet(OperationSetMultiUserChat.class);

        Object multiUserChatAdHocOpSet
            = protocolProvider
            .getOperationSet(OperationSetAdHocMultiUserChat.class);

        if (multiUserChatOpSet == null && multiUserChatAdHocOpSet != null)
        {
             if (event.getType() == ServiceEvent.REGISTERED)
             {
                 adHocChatRoomList.addChatProvider(protocolProvider);
             }
             else if (event.getType() == ServiceEvent.UNREGISTERING)
             {
                 adHocChatRoomList.removeChatProvider(protocolProvider);
             }
        }
        else if (multiUserChatAdHocOpSet == null && multiUserChatOpSet != null)
        {
             if (event.getType() == ServiceEvent.REGISTERED)
             {
                 chatRoomList.addChatProvider(protocolProvider);
             }
             else if (event.getType() == ServiceEvent.UNREGISTERING)
             {
                 chatRoomList.removeChatProvider(protocolProvider);
             }
        }
    }",False,False,This method handles ServiceEvents triggered by adding or removing a ProtocolProviderService. It updates the list of available chat rooms and chat room servers based on the type of event and the capabilities of the protocol provider.,False,This code handles service events triggered by adding or removing a ProtocolProviderService. It updates the list of available chat rooms and chat room servers based on the type of operation set provided by the protocol provider.
56,JoinChatRoomTask,join chat room task joins a chat room in an asynchronous way ,MemberClass,,,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[],boolean,boolean,String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+loadPassword() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+loadPassword() java.lang.String+getBytes() java.lang.String+getBytes() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[]) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[],String) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.service.protocol.ChatRoom+joinAs(String,byte[]) net.java.sip.communicator.service.protocol.ChatRoom+joinAs(String,byte[]) net.java.sip.communicator.service.protocol.ChatRoom+joinAs(String) net.java.sip.communicator.service.protocol.ChatRoom+joinAs(String) net.java.sip.communicator.service.protocol.ChatRoom+join() net.java.sip.communicator.service.protocol.ChatRoom+join() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.service.protocol.ChatRoom+getName() net.java.sip.communicator.service.protocol.ChatRoom+getName() net.java.sip.communicator.service.protocol.OperationFailedException+getErrorCode() net.java.sip.communicator.service.protocol.OperationFailedException+getErrorCode() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+done() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+done() org.jdesktop.swingworker.SwingWorker+get() org.jdesktop.swingworker.SwingWorker+get() net.java.sip.communicator.util.ConfigurationUtils+updateChatRoomStatus(ProtocolProviderService,String,String) net.java.sip.communicator.util.ConfigurationUtils+updateChatRoomStatus(ProtocolProviderService,String,String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomID() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomID() java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+removePassword() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+removePassword() net.java.sip.communicator.util.ServiceUtils+getService(BundleContext,Class<T>) net.java.sip.communicator.util.ServiceUtils+getService(BundleContext,Class<T>) net.java.sip.communicator.service.gui.AuthenticationWindowService+create(String,char[],String,boolean,boolean,Object,String,String,String,String,String,String) net.java.sip.communicator.service.gui.AuthenticationWindowService+create(String,char[],String,boolean,boolean,Object,String,String,String,String,String,String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+isPersistent() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+isPersistent() net.java.sip.communicator.impl.gui.utils.ImageLoader+getAuthenticationWindowIcon(ProtocolProviderService) net.java.sip.communicator.impl.gui.utils.ImageLoader+getAuthenticationWindowIcon(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getName() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+setVisible(boolean) net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+setVisible(boolean) net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+isCanceled() net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+isCanceled() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getConferenceChatManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getConferenceChatManager() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean,String) java.lang.String+getBytes() java.lang.String+String(char[]) net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+getPassword() net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+getPassword() java.lang.String+getBytes() net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+isRememberPassword() net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+isRememberPassword() java.lang.String+equals(Object) java.lang.String+equals(Object) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() java.lang.String+equals(Object) java.lang.String+equals(Object) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() java.lang.String+equals(Object) java.lang.String+equals(Object) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+savePassword(String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+savePassword(String) java.lang.String+String(byte[]) net.java.sip.communicator.service.protocol.ChatRoom+setSubject(String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.service.protocol.ChatRoom+setSubject(String) net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+AUTHENTICATION_FAILED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+REGISTRATION_REQUIRED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+PROVIDER_NOT_REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+UNKNOWN_ERROR net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+nickName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+rememberPassword net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+isFirstAttempt net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+subject net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+nickName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+isFirstAttempt net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+subject net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+rememberPassword net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+nickName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+nickName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+nickName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.service.protocol.OperationFailedException+AUTHENTICATION_FAILED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+AUTHENTICATION_FAILED net.java.sip.communicator.service.protocol.OperationFailedException+REGISTRATION_REQUIRED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+REGISTRATION_REQUIRED net.java.sip.communicator.service.protocol.OperationFailedException+PROVIDER_NOT_REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+PROVIDER_NOT_REGISTERED net.java.sip.communicator.service.protocol.OperationFailedException+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+UNKNOWN_ERROR net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.service.protocol.globalstatus.GlobalStatusEnum+ONLINE_STATUS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+AUTHENTICATION_FAILED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.GuiActivator+bundleContext net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+isFirstAttempt net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+nickName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+subject net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+REGISTRATION_REQUIRED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+PROVIDER_NOT_REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+AUTHENTICATION_FAILED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+rememberPassword net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+subject net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+subject net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,9245,253,10,"/** 
 * Joins a chat room in an asynchronous way.
 */
","/**
     * Joins a chat room in an asynchronous way.
     */
    private static class JoinChatRoomTask
        extends SwingWorker<String, Object>
    {
        private static final String SUCCESS = ""Success"";

        private static final String AUTHENTICATION_FAILED
            = ""AuthenticationFailed"";

        private static final String REGISTRATION_REQUIRED
            = ""RegistrationRequired"";

        private static final String PROVIDER_NOT_REGISTERED
            = ""ProviderNotRegistered"";

        private static final String SUBSCRIPTION_ALREADY_EXISTS
            = ""SubscriptionAlreadyExists"";

        private static final String UNKNOWN_ERROR
            = ""UnknownError"";

        private final ChatRoomWrapper chatRoomWrapper;

        private final String nickName;

        private final byte[] password;
        
        private final boolean rememberPassword;

        private final boolean isFirstAttempt;
        
        private final String subject;

        JoinChatRoomTask(   ChatRoomWrapper chatRoomWrapper,
                            String nickName,
                            byte[] password,
                            boolean rememberPassword,
                            boolean isFirstAttempt,
                            String subject)
        {
            this.chatRoomWrapper = chatRoomWrapper;
            this.nickName = nickName;
            this.isFirstAttempt = isFirstAttempt;
            this.subject = subject;

            if(password == null)
            {
                String passString = chatRoomWrapper.loadPassword();
                if(passString != null)
                {
                    this.password = passString.getBytes();
                }
                else
                {
                    this.password = null;
                }
            }
            else
            {
                this.password = password;
            }
            this.rememberPassword = rememberPassword;
        }
        
        JoinChatRoomTask(   ChatRoomWrapper chatRoomWrapper,
            String nickName,
            byte[] password)
        {
            this(chatRoomWrapper, nickName, password, false, true, null);
        }
        
        JoinChatRoomTask(   ChatRoomWrapper chatRoomWrapper,
            String nickName,
            byte[] password,
            String subject)
        {
            this(chatRoomWrapper, nickName, password, false, true, subject);
        }

        /**
         * @override {@link SwingWorker}{@link #doInBackground()} to perform
         * all asynchronous tasks.
         * @return SUCCESS if success, otherwise the error code
         */
        @Override
        public String doInBackground()
        {
            ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

            try
            {
                if(password != null && password.length > 0)
                    chatRoom.joinAs(nickName, password);
                else if (nickName != null)
                    chatRoom.joinAs(nickName);
                else
                    chatRoom.join();

                return SUCCESS;
            }
            catch (OperationFailedException e)
            {
                if (logger.isTraceEnabled())
                    logger.trace(""Failed to join chat room: ""
                    + chatRoom.getName(), e);

                switch (e.getErrorCode())
                {
                case OperationFailedException.AUTHENTICATION_FAILED:
                    return AUTHENTICATION_FAILED;
                case OperationFailedException.REGISTRATION_REQUIRED:
                    return REGISTRATION_REQUIRED;
                case OperationFailedException.PROVIDER_NOT_REGISTERED:
                    return PROVIDER_NOT_REGISTERED;
                case OperationFailedException.SUBSCRIPTION_ALREADY_EXISTS:
                    return SUBSCRIPTION_ALREADY_EXISTS;
                default:
                    return UNKNOWN_ERROR;
                }
            }
        }

        /**
         * @override {@link SwingWorker}{@link #done()} to perform UI changes
         * after the chat room join task has finished.
         */
        @Override
        protected void done()
        {
            String returnCode = null;
            try
            {
                returnCode = get();
            }
            catch (InterruptedException ignore)
            {}
            catch (ExecutionException ignore)
            {}

            ConfigurationUtils.updateChatRoomStatus(
                chatRoomWrapper.getParentProvider().getProtocolProvider(),
                chatRoomWrapper.getChatRoomID(),
                GlobalStatusEnum.ONLINE_STATUS);

            String errorMessage = null;
            if(AUTHENTICATION_FAILED.equals(returnCode))
            {
                chatRoomWrapper.removePassword();

                AuthenticationWindowService authWindowsService
                    = ServiceUtils.getService(
                        GuiActivator.bundleContext,
                        AuthenticationWindowService.class);

                AuthenticationWindowService.AuthenticationWindow authWindow =
                    authWindowsService.create(
                        null, null, null, false,
                        chatRoomWrapper.isPersistent(),
                        ImageLoader.getAuthenticationWindowIcon(
                            chatRoomWrapper.getParentProvider()
                                .getProtocolProvider()),
                        GuiActivator.getResources().getI18NString(
                            ""service.gui.AUTHENTICATION_WINDOW_TITLE"",
                            new String[]{chatRoomWrapper.getParentProvider()
                                            .getName()}),
                        GuiActivator.getResources().getI18NString(
                                ""service.gui.CHAT_ROOM_REQUIRES_PASSWORD"",
                                new String[]{
                                        chatRoomWrapper.getChatRoomName()}),
                        """", null,
                        isFirstAttempt ?
                            null :
                            GuiActivator.getResources().getI18NString(
                                ""service.gui.AUTHENTICATION_FAILED"",
                                new String[]{chatRoomWrapper.getChatRoomName()}),
                        null);

                authWindow.setVisible(true);

                if (!authWindow.isCanceled())
                {
                    GuiActivator.getUIService().getConferenceChatManager()
                        .joinChatRoom(
                            chatRoomWrapper,
                            nickName,
                            new String(authWindow.getPassword()).getBytes(),
                            authWindow.isRememberPassword(),
                            false,
                            subject);
                }
            }
            else if(REGISTRATION_REQUIRED.equals(returnCode))
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(
                            ""service.gui.CHAT_ROOM_REGISTRATION_REQUIRED"",
                            new String[]{chatRoomWrapper.getChatRoomName()});
            }
            else if(PROVIDER_NOT_REGISTERED.equals(returnCode))
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                        new String[]{chatRoomWrapper.getChatRoomName()});
            }
            else if(SUBSCRIPTION_ALREADY_EXISTS.equals(returnCode))
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(""service.gui.CHAT_ROOM_ALREADY_JOINED"",
                            new String[]{chatRoomWrapper.getChatRoomName()});
            }
            else
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(""service.gui.FAILED_TO_JOIN_CHAT_ROOM"",
                            new String[]{chatRoomWrapper.getChatRoomName()});
            }

            if (!SUCCESS.equals(returnCode) && 
                !AUTHENTICATION_FAILED.equals(returnCode))
            {
                new ErrorDialog(
                    GuiActivator.getUIService().getMainFrame(),
                    GuiActivator.getResources().getI18NString(
                            ""service.gui.ERROR""), errorMessage).showDialog();
            }

            if (SUCCESS.equals(returnCode))
            {
                if(rememberPassword)
                {
                    chatRoomWrapper.savePassword(new String(password));
                }
                
                if(subject != null)
                {
                    try
                    {
                        chatRoomWrapper.getChatRoom().setSubject(subject);
                    }
                    catch(OperationFailedException ex)
                    {
                        logger.warn(""Failed to set subject."");
                    }
                }
            }
        }
    }",False,True,"/** 
 * Joins a chat room in an asynchronous way.
 */
",False,"/** 
 * Joins a chat room in an asynchronous way.
 */
"
57,JoinAdHocChatRoomTask,join ad hoc chat room task joins an ad hoc chat room in an asynchronous way ,MemberClass,,,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+JoinAdHocChatRoomTask(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoom() net.java.sip.communicator.service.protocol.AdHocChatRoom+join() net.java.sip.communicator.service.protocol.AdHocChatRoom+join() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.service.protocol.AdHocChatRoom+getName() net.java.sip.communicator.service.protocol.AdHocChatRoom+getName() net.java.sip.communicator.service.protocol.OperationFailedException+getErrorCode() net.java.sip.communicator.service.protocol.OperationFailedException+getErrorCode() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+done() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+done() org.jdesktop.swingworker.SwingWorker+get() org.jdesktop.swingworker.SwingWorker+get() net.java.sip.communicator.util.ConfigurationUtils+updateChatRoomStatus(ProtocolProviderService,String,String) net.java.sip.communicator.util.ConfigurationUtils+updateChatRoomStatus(ProtocolProviderService,String,String) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomID() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomID() java.lang.String+equals(Object) java.lang.String+equals(Object) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() java.lang.String+equals(Object) java.lang.String+equals(Object) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog()",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+AUTHENTICATION_FAILED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+REGISTRATION_REQUIRED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+PROVIDER_NOT_REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+UNKNOWN_ERROR net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.service.protocol.OperationFailedException+AUTHENTICATION_FAILED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+AUTHENTICATION_FAILED net.java.sip.communicator.service.protocol.OperationFailedException+REGISTRATION_REQUIRED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+REGISTRATION_REQUIRED net.java.sip.communicator.service.protocol.OperationFailedException+PROVIDER_NOT_REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+PROVIDER_NOT_REGISTERED net.java.sip.communicator.service.protocol.OperationFailedException+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+UNKNOWN_ERROR net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.service.protocol.globalstatus.GlobalStatusEnum+ONLINE_STATUS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+PROVIDER_NOT_REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+AUTHENTICATION_FAILED,4446,126,10,"/** 
 * Joins an ad-hoc chat room in an asynchronous way.
 */
","/**
     * Joins an ad-hoc chat room in an asynchronous way.
     */
    private static class JoinAdHocChatRoomTask
        extends SwingWorker<String, Object>
    {
        private static final String SUCCESS = ""Success"";

        private static final String AUTHENTICATION_FAILED
            = ""AuthenticationFailed"";

        private static final String REGISTRATION_REQUIRED
            = ""RegistrationRequired"";

        private static final String PROVIDER_NOT_REGISTERED
            = ""ProviderNotRegistered"";

        private static final String SUBSCRIPTION_ALREADY_EXISTS
            = ""SubscriptionAlreadyExists"";

        private static final String UNKNOWN_ERROR
            = ""UnknownError"";

        private final AdHocChatRoomWrapper adHocChatRoomWrapper;

        JoinAdHocChatRoomTask(AdHocChatRoomWrapper chatRoomWrapper)
        {
            this.adHocChatRoomWrapper = chatRoomWrapper;
        }

        /**
         * @override {@link SwingWorker}{@link #doInBackground()} to perform
         * all asynchronous tasks.
         * @return SUCCESS if success, otherwise the error code
         */
        @Override
        public String doInBackground()
        {
            AdHocChatRoom chatRoom = adHocChatRoomWrapper.getAdHocChatRoom();

            try
            {
                chatRoom.join();

                return SUCCESS;
            }
            catch (OperationFailedException e)
            {
                if (logger.isTraceEnabled())
                    logger.trace(""Failed to join ad-hoc chat room: ""
                    + chatRoom.getName(), e);

                switch (e.getErrorCode())
                {
                case OperationFailedException.AUTHENTICATION_FAILED:
                    return AUTHENTICATION_FAILED;
                case OperationFailedException.REGISTRATION_REQUIRED:
                    return REGISTRATION_REQUIRED;
                case OperationFailedException.PROVIDER_NOT_REGISTERED:
                    return PROVIDER_NOT_REGISTERED;
                case OperationFailedException.SUBSCRIPTION_ALREADY_EXISTS:
                    return SUBSCRIPTION_ALREADY_EXISTS;
                default:
                    return UNKNOWN_ERROR;
                }
            }
        }

        /**
         * @override {@link SwingWorker}{@link #done()} to perform UI changes
         * after the ad-hoc chat room join task has finished.
         */
        @Override
        protected void done()
        {
            String returnCode = null;
            try
            {
                returnCode = get();
            }
            catch (InterruptedException ignore)
            {}
            catch (ExecutionException ignore)
            {}

            ConfigurationUtils.updateChatRoomStatus(
                adHocChatRoomWrapper.getParentProvider().getProtocolProvider(),
                adHocChatRoomWrapper.getAdHocChatRoomID(),
                GlobalStatusEnum.ONLINE_STATUS);

            String errorMessage = null;
            if(PROVIDER_NOT_REGISTERED.equals(returnCode))
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                        new String[]{
                            adHocChatRoomWrapper.getAdHocChatRoomName()});
            }
            else if(SUBSCRIPTION_ALREADY_EXISTS.equals(returnCode))
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(""service.gui.CHAT_ROOM_ALREADY_JOINED"",
                            new String[]{
                            adHocChatRoomWrapper.getAdHocChatRoomName()});
            }
            else
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(""service.gui.FAILED_TO_JOIN_CHAT_ROOM"",
                            new String[]{
                            adHocChatRoomWrapper.getAdHocChatRoomName()});
            }

            if (!SUCCESS.equals(returnCode)
                    && !AUTHENTICATION_FAILED.equals(returnCode))
            {
                new ErrorDialog(
                    GuiActivator.getUIService().getMainFrame(),
                    GuiActivator.getResources().getI18NString(
                            ""service.gui.ERROR""), errorMessage).showDialog();
            }
        }
    }",False,False,"/** 
 * Joins an ad-hoc chat room in an asynchronous way.
 */
",False,"/** 
 * Joins an ad-hoc chat room in an asynchronous way.
 */
"
58,FindRoomTask,find room task finds a chat room in asynchronous way ,MemberClass,,,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+FindRoomTask(String,ChatRoomProviderWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+doInBackground() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+findRoom(String) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+findRoom(String) net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomProvider net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomProvider net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomProvider net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomName,1357,45,10,"/** 
 * Finds a chat room in asynchronous way.
 */
","/**
     * Finds a chat room in asynchronous way.
     */
    private static class FindRoomTask
        extends SwingWorker<ChatRoom, Object>
    {
        private final String chatRoomName;

        private final ChatRoomProviderWrapper chatRoomProvider;

        FindRoomTask(   String chatRoomName,
                        ChatRoomProviderWrapper chatRoomProvider)
        {
            this.chatRoomName = chatRoomName;
            this.chatRoomProvider = chatRoomProvider;
        }

        /**
         * @override {@link SwingWorker}{@link #doInBackground()} to perform
         * all asynchronous tasks.
         * @return the chat room
         */
        @Override
        public ChatRoom doInBackground()
        {
            OperationSetMultiUserChat groupChatOpSet
                = chatRoomProvider
                      .getProtocolProvider().getOperationSet(
                        OperationSetMultiUserChat.class);

            ChatRoom chatRoom = null;
            try
            {
                chatRoom = groupChatOpSet.findRoom(chatRoomName);
            }
            catch (Exception e)
            {
                if (logger.isTraceEnabled())
                    logger.trace(""Un exception occurred while searching for room:""
                    + chatRoomName, e);
            }

            return chatRoom;
        }
    }",False,False,"/** 
 * Finds a chat room in asynchronous way.
 */
",False,"/** 
 * Finds a chat room in asynchronous way.
 */
"
59,FindAllRoomsTask,find all rooms task ,MemberClass,,,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+FindAllRoomsTask(ChatRoomProviderWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+getExistingChatRooms() net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+getExistingChatRooms() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.service.protocol.AccountID+getService() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getService() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.service.protocol.AccountID+getService() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getService()",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+chatRoomProvider net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+chatRoomProvider net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+chatRoomProvider net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,1664,51,10,,"private static class FindAllRoomsTask
        extends SwingWorker<List<String>, Object>
    {
        private final ChatRoomProviderWrapper chatRoomProvider;

        FindAllRoomsTask(ChatRoomProviderWrapper provider)
        {
            this.chatRoomProvider = provider;
        }

        /**
         * @override {@link SwingWorker}{@link #doInBackground()} to perform
         * all asynchronous tasks.
         * @return a list of existing chat rooms
         */
        @Override
        public List<String> doInBackground()
        {
            ProtocolProviderService protocolProvider
                = chatRoomProvider.getProtocolProvider();

            if (protocolProvider == null)
                return null;

            OperationSetMultiUserChat groupChatOpSet
                = protocolProvider
                    .getOperationSet(OperationSetMultiUserChat.class);

            if (groupChatOpSet == null)
                return null;

            try
            {
                return groupChatOpSet.getExistingChatRooms();
            }
            catch (OperationFailedException e)
            {
                if (logger.isTraceEnabled())
                    logger.trace(""Failed to obtain existing chat rooms for server: ""
                    + protocolProvider.getAccountID().getService(), e);
            }
            catch (OperationNotSupportedException e)
            {
                if (logger.isTraceEnabled())
                    logger.trace(""Failed to obtain existing chat rooms for server: ""
                    + protocolProvider.getAccountID().getService(), e);
            }

            return null;
        }
    }",False,False,,False,
60,invitationReceived(AdHocChatRoomInvitationReceivedEvent),invitation received evt indicates that an invitation has been received and opens the invitation dialog to notify the user param evt the ad hoc chat room invitation received event thatnotified us ,Method,,,"net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.util.Logger+info(Object) java.util.EventObject+toString() java.util.EventObject+toString() net.java.sip.communicator.service.protocol.event.AdHocChatRoomInvitationReceivedEvent+getSourceOperationSet() net.java.sip.communicator.service.protocol.event.AdHocChatRoomInvitationReceivedEvent+getSourceOperationSet() net.java.sip.communicator.impl.gui.main.chat.conference.InvitationReceivedDialog+InvitationReceivedDialog(ConferenceChatManager,OperationSetAdHocMultiUserChat,AdHocChatRoomInvitation) net.java.sip.communicator.service.protocol.event.AdHocChatRoomInvitationReceivedEvent+getInvitation() net.java.sip.communicator.service.protocol.event.AdHocChatRoomInvitationReceivedEvent+getInvitation() net.java.sip.communicator.plugin.desktoputil.SIPCommDialog+setVisible(boolean) net.java.sip.communicator.plugin.desktoputil.SIPCommDialog+setVisible(boolean)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,678,18,1,"/** 
 * Indicates that an invitation has been received and opens the invitation dialog to notify the user.
 * @param evt the <tt>AdHocChatRoomInvitationReceivedEvent</tt> thatnotified us
 */
","/**
     * Indicates that an invitation has been received and opens the invitation
     * dialog to notify the user.
     * @param evt the <tt>AdHocChatRoomInvitationReceivedEvent</tt> that
     * notified us
     */
    public void invitationReceived(AdHocChatRoomInvitationReceivedEvent evt)
    {
        if (logger.isInfoEnabled())
            logger.info(""Invitation received: ""+evt.toString());
        OperationSetAdHocMultiUserChat multiUserChatOpSet
            = evt.getSourceOperationSet();

        InvitationReceivedDialog dialog = new InvitationReceivedDialog(
                this, multiUserChatOpSet, evt.getInvitation());

        dialog.setVisible(true);
    }",False,False,"This method serves to handle the event of receiving an invitation for an ad hoc chat room. It logs the event, retrieves the source operation set, creates a dialog to display the invitation, and makes the dialog visible to the user.",False,"This code defines a method called ""invitationReceived"" that is triggered when an invitation to join a chat room is received. It logs the event, retrieves the necessary chat room information, and opens a dialog box to notify the user about the invitation."
61,messageDelivered(AdHocChatRoomMessageDeliveredEvent),message delivered evt implements the ad hoc chat room message listener message delivered method shows the message in the conversation area and clears the write message area param evt the ad hoc chat room message delivered event that notifiedus ,Method,,,"java.util.EventObject+getSource() java.util.EventObject+getSource() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.service.protocol.AdHocChatRoom+getName() net.java.sip.communicator.service.protocol.AdHocChatRoom+getName() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoom,boolean) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoom,boolean) net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+getEventType() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+getEventType() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+getMessage() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+getMessage() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.service.protocol.AccountID+getUserID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AdHocChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.AdHocChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getUserID() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+getTimestamp() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.util.Logger+error(Object) net.java.sip.communicator.util.Logger+error(Object)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+CONVERSATION_MESSAGE_DELIVERED net.java.sip.communicator.service.gui.Chat+OUTGOING_MESSAGE net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+ACTION_MESSAGE_DELIVERED net.java.sip.communicator.service.gui.Chat+ACTION_MESSAGE net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,1891,58,1,"/** 
 * Implements the <tt>AdHocChatRoomMessageListener.messageDelivered</tt> method. <br> Shows the message in the conversation area and clears the write message area.
 * @param evt the <tt>AdHocChatRoomMessageDeliveredEvent</tt> that notifiedus
 */
","/**
     * Implements the <tt>AdHocChatRoomMessageListener.messageDelivered</tt>
     * method.
     * <br>
     * Shows the message in the conversation area and clears the write message
     * area.
     * @param evt the <tt>AdHocChatRoomMessageDeliveredEvent</tt> that notified
     * us
     */
    public void messageDelivered(AdHocChatRoomMessageDeliveredEvent evt)
    {
        AdHocChatRoom sourceChatRoom = (AdHocChatRoom) evt.getSource();

        if (logger.isInfoEnabled())
            logger.info(""MESSAGE DELIVERED to ad-hoc chat room: ""
            + sourceChatRoom.getName());

        ChatPanel chatPanel
            = GuiActivator
                .getUIService()
                    .getChatWindowManager()
                        .getMultiChat(sourceChatRoom, false);

        if(chatPanel != null)
        {
            String messageType;
            switch (evt.getEventType())
            {
            case AdHocChatRoomMessageDeliveredEvent
                    .CONVERSATION_MESSAGE_DELIVERED:
                messageType = Chat.OUTGOING_MESSAGE;
                break;
            case AdHocChatRoomMessageDeliveredEvent.ACTION_MESSAGE_DELIVERED:
                messageType = Chat.ACTION_MESSAGE;
                break;
            default:
                messageType = null;
            }

            Message msg = evt.getMessage();

            chatPanel
                .addMessage(
                    sourceChatRoom
                        .getParentProvider().getAccountID().getUserID(),
                    null,
                    evt.getTimestamp(),
                    messageType,
                    msg.getContent(),
                    msg.getContentType(),
                    msg.getMessageUID(),
                    null);
        }
        else
        {
            logger.error(""chat panel is null, message NOT DELIVERED !"");
        }
    }",False,False,This method serves to handle the event of a message being delivered in an ad-hoc chat room. It displays the message in the conversation area and clears the write message area.,False,"This code implements the messageDelivered method, which is called when a message is delivered in an ad-hoc chat room. It retrieves the chat panel associated with the chat room and adds the delivered message to the panel, displaying it in the conversation area."
62,messageDeliveryFailed(AdHocChatRoomMessageDeliveryFailedEvent),message delivery failed evt implements ad hoc chat room message listener message delivery failed method in the conversation area shows an error message explaining the problem param evt the ad hoc chat room message delivery failed event thatnotified us ,Method,,,"net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getMessage() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getMessage() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getDestinationParticipant() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getDestinationParticipant() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoom,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoom,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,Date,String,String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,Date,String,String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() java.util.Date+Date() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addErrorMessage(String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addErrorMessage(String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean)",net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+OFFLINE_MESSAGES_NOT_SUPPORTED net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+NETWORK_FAILURE net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+PROVIDER_NOT_REGISTERED net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+INTERNAL_ERROR net.java.sip.communicator.service.gui.Chat+OUTGOING_MESSAGE,2457,65,1,"/** 
 * Implements <tt>AdHocChatRoomMessageListener.messageDeliveryFailed</tt> method. <br> In the conversation area shows an error message, explaining the problem.
 * @param evt the <tt>AdHocChatRoomMessageDeliveryFailedEvent</tt> thatnotified us
 */
","/**
     * Implements <tt>AdHocChatRoomMessageListener.messageDeliveryFailed</tt>
     * method.
     * <br>
     * In the conversation area shows an error message, explaining the problem.
     * @param evt the <tt>AdHocChatRoomMessageDeliveryFailedEvent</tt> that
     * notified us
     */
    public void messageDeliveryFailed(
            AdHocChatRoomMessageDeliveryFailedEvent evt)
    {
        AdHocChatRoom sourceChatRoom = evt.getSourceChatRoom();
        Message sourceMessage = evt.getMessage();
        Contact destParticipant = evt.getDestinationParticipant();

        String errorMsg = null;
        if (evt.getErrorCode()
                == MessageDeliveryFailedEvent.OFFLINE_MESSAGES_NOT_SUPPORTED)
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                    ""service.gui.MSG_DELIVERY_NOT_SUPPORTED"",
                    new String[]{destParticipant.getDisplayName()});
        }
        else if (evt.getErrorCode()
                == MessageDeliveryFailedEvent.NETWORK_FAILURE)
        {
            errorMsg = GuiActivator.getResources()
                .getI18NString(""service.gui.MSG_NOT_DELIVERED"");
        }
        else if (evt.getErrorCode()
                == MessageDeliveryFailedEvent.PROVIDER_NOT_REGISTERED)
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                    ""service.gui.MSG_SEND_CONNECTION_PROBLEM"");
        }
        else if (evt.getErrorCode()
                == MessageDeliveryFailedEvent.INTERNAL_ERROR)
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                    ""service.gui.MSG_DELIVERY_INTERNAL_ERROR"");
        }
        else
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                    ""service.gui.MSG_DELIVERY_UNKNOWN_ERROR"");
        }

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();
        ChatPanel chatPanel
            = chatWindowManager.getMultiChat(sourceChatRoom, true);

        chatPanel.addMessage(
                destParticipant.getDisplayName(),
                new Date(),
                Chat.OUTGOING_MESSAGE,
                sourceMessage.getContent(),
                sourceMessage.getContentType());

        chatPanel.addErrorMessage(
                destParticipant.getDisplayName(),
                errorMsg);

        chatWindowManager.openChat(chatPanel, false);
    }",False,False,"This method serves to handle the event of a failed message delivery in an ad hoc chat room. It displays an error message in the conversation area, explaining the specific problem that occurred.",False,"This code implements the method ""messageDeliveryFailed"" which handles the event of a failed message delivery in an ad hoc chat room. It displays an error message in the conversation area, indicating the reason for the failure and opens a chat window for further interaction."
63,messageReceived(AdHocChatRoomMessageReceivedEvent),message received evt implements the ad hoc chat room message listener message received method obtains the corresponding chat panel and process the message there param evt the ad hoc chat room message received event that notifiedus ,Method,,,"net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getSourceChatRoomParticipant() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getSourceChatRoomParticipant() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getEventType() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getEventType() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getMessage() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getMessage() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoom,boolean,String) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoom,boolean,String) net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean)",net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+CONVERSATION_MESSAGE_RECEIVED net.java.sip.communicator.service.gui.Chat+INCOMING_MESSAGE net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+SYSTEM_MESSAGE_RECEIVED net.java.sip.communicator.service.gui.Chat+SYSTEM_MESSAGE net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+ACTION_MESSAGE_RECEIVED net.java.sip.communicator.service.gui.Chat+ACTION_MESSAGE net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,1849,55,1,"/** 
 * Implements the <tt>AdHocChatRoomMessageListener.messageReceived</tt> method. <br> Obtains the corresponding <tt>ChatPanel</tt> and process the message there.
 * @param evt the <tt>AdHocChatRoomMessageReceivedEvent</tt> that notifiedus
 */
","/**
     * Implements the <tt>AdHocChatRoomMessageListener.messageReceived</tt>
     * method.
     * <br>
     * Obtains the corresponding <tt>ChatPanel</tt> and process the message
     * there.
     * @param evt the <tt>AdHocChatRoomMessageReceivedEvent</tt> that notified
     * us
     */
    public void messageReceived(AdHocChatRoomMessageReceivedEvent evt)
    {
        AdHocChatRoom sourceChatRoom = evt.getSourceChatRoom();
        Contact sourceParticipant = evt.getSourceChatRoomParticipant();

        String messageType = null;

        switch (evt.getEventType())
        {
        case AdHocChatRoomMessageReceivedEvent.CONVERSATION_MESSAGE_RECEIVED:
            messageType = Chat.INCOMING_MESSAGE;
            break;
        case AdHocChatRoomMessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED:
            messageType = Chat.SYSTEM_MESSAGE;
            break;
        case AdHocChatRoomMessageReceivedEvent.ACTION_MESSAGE_RECEIVED:
            messageType = Chat.ACTION_MESSAGE;
            break;
        }

        if (logger.isInfoEnabled())
            logger.info(""MESSAGE RECEIVED from contact: ""
            + sourceParticipant.getAddress());

        Message message = evt.getMessage();

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();
        ChatPanel chatPanel
            = chatWindowManager
                .getMultiChat(sourceChatRoom, true, message.getMessageUID());

        String messageContent = message.getContent();

        chatPanel.addMessage(
            sourceParticipant.getDisplayName(),
            null,
            evt.getTimestamp(),
            messageType,
            messageContent,
            message.getContentType(),
            message.getMessageUID(),
            null);

        chatWindowManager.openChat(chatPanel, false);
    }",False,False,"This method serves to handle received messages in an ad hoc chat room. It obtains the chat room and participant information from the event, determines the type of message received, logs the message if enabled, retrieves the message content, adds the message to the chat panel, and opens the chat window.",False,"This code implements the messageReceived method, which is called when a message is received in an ad hoc chat room. It processes the message by obtaining the corresponding ChatPanel and adding the message content to it, then opens the chat panel in the chat window manager."
64,invitationRejected(AdHocChatRoomInvitationRejectedEvent),invitation rejected evt ,Method,,,,,75,1,1,,public void invitationRejected(AdHocChatRoomInvitationRejectedEvent evt) {},False,False,This method handles the event of an ad hoc chat room invitation being rejected.,False,"The code contains a method named ""invitationRejected"" which takes an event object as a parameter. The purpose of this method is not specified in the given code snippet."
65,openChatRoom(ChatRoomWrapper),open chat room room opens a chat window for the chat room param room the chat room ,Method,,net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+contactClicked(ContactListEvent) net.java.sip.communicator.impl.gui.main.contactlist.ContactListTreeCellRenderer+actionPerformed(ActionEvent),"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() java.util.ArrayList+ArrayList() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.service.protocol.ChatRoom+leave() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.service.protocol.ChatRoom+leave() net.java.sip.communicator.util.ConfigurationUtils+getChatRoomProperty(ProtocolProviderService,String,String) net.java.sip.communicator.util.ConfigurationUtils+getChatRoomProperty(ProtocolProviderService,String,String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomID() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomID() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getJoinOptions() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getJoinOptions() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],String) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],String) net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[]) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[]) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean)",,1594,53,1,"/** 
 * Opens a chat window for the chat room.
 * @param room the chat room.
 */
","/**
     * Opens a chat window for the chat room.
     * 
     * @param room the chat room.
     */
    public void openChatRoom(ChatRoomWrapper room)
    {
        if (room.getChatRoom() == null)
        {
            room = createChatRoom(
                room.getChatRoomName(),
                room.getParentProvider().getProtocolProvider(), 
                new ArrayList<String>(),"""", false, false, true);

            // leave the chatroom because getChatRoom().isJoined() returns true
            // otherwise
            if (room.getChatRoom().isJoined())
                room.getChatRoom().leave();

        }

        String savedNick =
            ConfigurationUtils.getChatRoomProperty(room
                .getParentProvider().getProtocolProvider(), room
                .getChatRoomID(), ""userNickName"");

        if (savedNick == null)
        {
            String[] joinOptions = room.getJoinOptions();
            String nickName = joinOptions[0];
            if(nickName == null)
                return;

            if (!room.getChatRoom().isJoined())
            {
                joinChatRoom(room, nickName, null, 
                        joinOptions[1]);
            }

        }
        else
        {
            if (!room.getChatRoom().isJoined())
                joinChatRoom(room, savedNick, null);
        }

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();
        ChatPanel chatPanel
            = chatWindowManager.getMultiChat(room, true);

        chatWindowManager.openChat(chatPanel, true);
    }",False,False,"This method opens a chat window for a given chat room. It checks if the chat room exists, creates it if necessary, and then joins the chat room. It also retrieves the saved nickname for the user and uses it to join the chat room. Finally, it opens the chat window for the chat room.",False,"The `openChatRoom` method opens a chat window for a given chat room. It first checks if the chat room exists, and if not, creates it. Then, it retrieves the saved nickname for the user and joins the chat room using that nickname. Finally, it retrieves the chat window manager and opens the chat window for the specified chat room."
