index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,logger,Field,,,,,143,5,26,"/** 
 * The object used for logging.
 */
","/**
     * The object used for logging.
     */
    private static final Logger logger
        = Logger.getLogger(ConferenceChatManager.class);",False
2,chatRoomHistory,Field,,,,,209,5,18,"/** 
 * Maps each history window to a <tt>ChatRoomWrapper</tt>.
 */
","/**
     * Maps each history window to a <tt>ChatRoomWrapper</tt>.
     */
    private final Hashtable<ChatRoomWrapper, HistoryWindow> chatRoomHistory =
        new Hashtable<ChatRoomWrapper, HistoryWindow>();",False
3,chatRoomList,Field,,,,,119,4,18,"/** 
 * The list of persistent chat rooms.
 */
","/**
     * The list of persistent chat rooms.
     */
    private final ChatRoomList chatRoomList = new ChatRoomList();",False
4,adHocChatRoomList,Field,,,,,130,4,18,"/** 
 * The list of ad-hoc chat rooms.
 */
","/**
     * The list of ad-hoc chat rooms.
     */
    private final AdHocChatRoomList adHocChatRoomList = new AdHocChatRoomList();",False
5,listChangeListeners,Field,,,,,196,5,18,"/** 
 * A list of all <tt>ChatRoomListChangeListener</tt>-s.
 */
","/**
     * A list of all <tt>ChatRoomListChangeListener</tt>-s.
     */
    private final Vector<ChatRoomListChangeListener> listChangeListeners
        = new Vector<ChatRoomListChangeListener>();",False
6,adHoclistChangeListeners,Field,,,,,216,5,18,"/** 
 * A list of all <tt>AdHocChatRoomListChangeListener</tt>-s.
 */
","/**
     * A list of all <tt>AdHocChatRoomListChangeListener</tt>-s.
     */
    private final Vector<AdHocChatRoomListChangeListener>
        adHoclistChangeListeners = new Vector<AdHocChatRoomListChangeListener>();",False
7,ConferenceChatManager(),Method,,,java.lang.Thread+start() +() +run(),,458,18,1,"/** 
 * Creates an instance of <tt>ConferenceChatManager</tt>.
 */
","/**
     * Creates an instance of <tt>ConferenceChatManager</tt>.
     */
    public ConferenceChatManager()
    {
        // Loads the chat rooms list in a separate thread.
        new Thread()
        {
            @Override
            public void run()
            {
                chatRoomList.loadList();
                adHocChatRoomList.loadList();
            }
        }.start();

        GuiActivator.bundleContext.addServiceListener(this);
    }",False
8,getChatRoomList(),Method,,"net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChatInternal(ChatRoom,boolean,String) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListModel+ChatRoomListModel() net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableModel+ChatRoomTableModel(JTable) net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.JoinChatRoomWindow+JoinChatRoomWindow(ChatRoomProviderWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.JoinChatRoomWizard+JoinChatRoomWizard(MainFrame) net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+contactClicked(ContactListEvent) net.java.sip.communicator.impl.gui.main.contactlist.ContactListTreeCellRenderer+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.login.LoginRendererSwingImpl+protocolProviderConnected(ProtocolProviderService,long)",,net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList,273,10,1,"/** 
 * Returns all chat room providers currently contained in the chat room list.
 * @return  all chat room providers currently contained in the chat roomlist.
 */
","/**
     * Returns all chat room providers currently contained in the chat room
     * list.
     * @return  all chat room providers currently contained in the chat room
     * list.
     */
    public ChatRoomList getChatRoomList()
    {
        return chatRoomList;
    }",True
9,getAdHocChatRoomList(),Method,,"net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChatInternal(AdHocChatRoom,boolean,String)",,net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList,309,11,1,"/** 
 * Returns all chat room providers currently contained in the ad-hoc chat room list.
 * @return  all chat room providers currently contained in the ad-hoc chatroom list.
 */
","/**
     * Returns all chat room providers currently contained in the ad-hoc chat
     * room list.
     *
     * @return  all chat room providers currently contained in the ad-hoc chat
     * room list.
     */
    public AdHocChatRoomList getAdHocChatRoomList()
    {
        return adHocChatRoomList;
    }",False
10,invitationReceived(ChatRoomInvitationReceivedEvent),Method,,,"net.java.sip.communicator.impl.gui.main.chat.conference.InvitationReceivedDialog+InvitationReceivedDialog(ConferenceChatManager,OperationSetMultiUserChat,ChatRoomInvitation) net.java.sip.communicator.service.protocol.event.ChatRoomInvitationReceivedEvent+getSourceOperationSet() net.java.sip.communicator.service.protocol.event.ChatRoomInvitationReceivedEvent+getSourceOperationSet() net.java.sip.communicator.service.protocol.event.ChatRoomInvitationReceivedEvent+getInvitation() net.java.sip.communicator.service.protocol.event.ChatRoomInvitationReceivedEvent+getInvitation() net.java.sip.communicator.plugin.desktoputil.SIPCommDialog+setVisible(boolean) net.java.sip.communicator.plugin.desktoputil.SIPCommDialog+setVisible(boolean)",,389,13,1,"/** 
 * Handles <tt>ChatRoomInvitationReceivedEvent</tt>-s.
 */
","/**
     * Handles <tt>ChatRoomInvitationReceivedEvent</tt>-s.
     */
    public void invitationReceived(ChatRoomInvitationReceivedEvent evt)
    {
        InvitationReceivedDialog dialog
            = new InvitationReceivedDialog(
                    this,
                    evt.getSourceOperationSet(),
                    evt.getInvitation());

        dialog.setVisible(true);
    }",False
11,invitationRejected(ChatRoomInvitationRejectedEvent),Method,,,,,70,1,1,,public void invitationRejected(ChatRoomInvitationRejectedEvent evt) {},False
12,messageDelivered(ChatRoomMessageDeliveredEvent),Method,,,"java.util.EventObject+getSource() java.util.EventObject+getSource() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.service.protocol.ChatRoom+getName() net.java.sip.communicator.service.protocol.ChatRoom+getName() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoom,boolean) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoom,boolean) net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getEventType() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getEventType() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getMessage() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getMessage() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.service.protocol.ChatRoom+getUserNickname() net.java.sip.communicator.service.protocol.ChatRoom+getUserNickname() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getTimestamp() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID()",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+CONVERSATION_MESSAGE_DELIVERED net.java.sip.communicator.service.gui.Chat+OUTGOING_MESSAGE net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+ACTION_MESSAGE_DELIVERED net.java.sip.communicator.service.gui.Chat+ACTION_MESSAGE,1631,49,1,"/** 
 * Implements the <tt>ChatRoomMessageListener.messageDelivered</tt> method. <br> Shows the message in the conversation area and clears the write message area.
 * @param evt the <tt>ChatRoomMessageDeliveredEvent</tt> that notified usthat the message was delivered to its destination
 */
","/**
     * Implements the <tt>ChatRoomMessageListener.messageDelivered</tt> method.
     * <br>
     * Shows the message in the conversation area and clears the write message
     * area.
     * @param evt the <tt>ChatRoomMessageDeliveredEvent</tt> that notified us
     * that the message was delivered to its destination
     */
    public void messageDelivered(ChatRoomMessageDeliveredEvent evt)
    {
        ChatRoom sourceChatRoom = (ChatRoom) evt.getSource();

        if (logger.isTraceEnabled())
            logger.trace(
                ""MESSAGE DELIVERED to chat room: "" + sourceChatRoom.getName());

        ChatPanel chatPanel = GuiActivator.getUIService().getChatWindowManager()
            .getMultiChat(sourceChatRoom, false);

        if(chatPanel != null)
        {
            String messageType;

            switch (evt.getEventType())
            {
            case ChatRoomMessageDeliveredEvent.CONVERSATION_MESSAGE_DELIVERED:
                messageType = Chat.OUTGOING_MESSAGE;
                break;
            case ChatRoomMessageDeliveredEvent.ACTION_MESSAGE_DELIVERED:
                messageType = Chat.ACTION_MESSAGE;
                break;
            default:
                messageType = null;
                break;
            }

            Message msg = evt.getMessage();

            chatPanel.addMessage(
                sourceChatRoom.getUserNickname(),
                null,
                evt.getTimestamp(),
                messageType,
                msg.getContent(),
                msg.getContentType(),
                msg.getMessageUID(),
                null);
        }
    }",False
13,messageReceived(ChatRoomMessageReceivedEvent),Method,,,"net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getSourceChatRoomMember() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getSourceChatRoomMember() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getEventType() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getEventType() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.util.Logger+trace(Object) net.java.sip.communicator.service.protocol.ChatRoomMember+getContactAddress() net.java.sip.communicator.service.protocol.ChatRoomMember+getContactAddress() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getMessage() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getMessage() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.service.protocol.ChatRoom+isSystem() net.java.sip.communicator.service.protocol.ChatRoom+isSystem() net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getSystemRoomWrapper() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getSystemRoomWrapper() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoom,boolean,String) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoom,boolean,String) net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+isHistoryMessage() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+isHistoryMessage() net.java.sip.communicator.impl.gui.main.chat.ChatConversationPanel+getLastIncomingMsgTimestamp() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+getChatConversationPanel() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+getChatConversationPanel() net.java.sip.communicator.impl.gui.main.chat.ChatConversationPanel+getLastIncomingMsgTimestamp() net.java.sip.communicator.impl.gui.main.chat.ChatSession+getHistoryBeforeDate(Date,int) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+getChatSession() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+getChatSession() net.java.sip.communicator.impl.gui.main.chat.ChatSession+getHistoryBeforeDate(Date,int) java.util.Date+Date(long) java.util.Date+equals(Object) java.util.Date+equals(Object) java.util.Date+Date(long) java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() java.util.Date+getTime() java.util.Date+getTime() java.util.Collection+size() java.util.Collection+size() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() java.util.Date+equals(Object) net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() java.util.Date+equals(Object) net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveredEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() java.util.Date+equals(Object) net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() java.util.Date+equals(Object) net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean)",net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+CONVERSATION_MESSAGE_RECEIVED net.java.sip.communicator.service.gui.Chat+INCOMING_MESSAGE net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+SYSTEM_MESSAGE_RECEIVED net.java.sip.communicator.service.gui.Chat+SYSTEM_MESSAGE net.java.sip.communicator.service.protocol.event.ChatRoomMessageReceivedEvent+ACTION_MESSAGE_RECEIVED net.java.sip.communicator.service.gui.Chat+ACTION_MESSAGE net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList,3948,113,1,"/** 
 * Implements the <tt>ChatRoomMessageListener.messageReceived</tt> method. <br> Obtains the corresponding <tt>ChatPanel</tt> and process the message there.
 * @param evt the <tt>ChatRoomMessageReceivedEvent</tt> that notified usthat a message has been received
 */
","/**
     * Implements the <tt>ChatRoomMessageListener.messageReceived</tt> method.
     * <br>
     * Obtains the corresponding <tt>ChatPanel</tt> and process the message
     * there.
     * @param evt the <tt>ChatRoomMessageReceivedEvent</tt> that notified us
     * that a message has been received
     */
    public void messageReceived(ChatRoomMessageReceivedEvent evt)
    {
        ChatRoom sourceChatRoom = evt.getSourceChatRoom();
        ChatRoomMember sourceMember = evt.getSourceChatRoomMember();

        String messageType = null;

        switch (evt.getEventType())
        {
        case ChatRoomMessageReceivedEvent.CONVERSATION_MESSAGE_RECEIVED:
            messageType = Chat.INCOMING_MESSAGE;
            break;
        case ChatRoomMessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED:
            messageType = Chat.SYSTEM_MESSAGE;
            break;
        case ChatRoomMessageReceivedEvent.ACTION_MESSAGE_RECEIVED:
            messageType = Chat.ACTION_MESSAGE;
            break;
        }

        if (logger.isTraceEnabled())
            logger.trace(""MESSAGE RECEIVED from contact: ""
            + sourceMember.getContactAddress());

        Message message = evt.getMessage();

        ChatPanel chatPanel = null;

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();

        if(sourceChatRoom.isSystem())
        {
            ChatRoomProviderWrapper serverWrapper
                = chatRoomList.findServerWrapperFromProvider(
                    sourceChatRoom.getParentProvider());

            chatPanel = chatWindowManager.getMultiChat(
                serverWrapper.getSystemRoomWrapper(), true);
        }
        else
        {
            chatPanel = chatWindowManager.getMultiChat(
                sourceChatRoom, true, message.getMessageUID());
        }

        String messageContent = message.getContent();

        if (evt.isHistoryMessage())
        {
            Date timeStamp = chatPanel.getChatConversationPanel()
                .getLastIncomingMsgTimestamp();
            Collection<Object> c =
                chatPanel.getChatSession().getHistoryBeforeDate(
                    new Date(
                        timeStamp.equals(new Date(0))
                        ? System.currentTimeMillis() - 10000
                        : timeStamp.getTime()
                    ), 20);
            if (c.size() > 0)
            {
                boolean isPresent = false;
                for (Object o : c)
                {
                    if (o instanceof ChatRoomMessageDeliveredEvent)
                    {
                        ChatRoomMessageDeliveredEvent ev =
                            (ChatRoomMessageDeliveredEvent) o;
                        if (evt.getTimestamp() != null
                            && evt.getTimestamp().equals(ev.getTimestamp()))
                        {
                            isPresent = true;
                            break;
                        }
                    }
                    else if(o instanceof ChatRoomMessageReceivedEvent)
                    {
                        ChatRoomMessageReceivedEvent ev =
                            (ChatRoomMessageReceivedEvent) o;
                        if (evt.getTimestamp() != null
                            && evt.getTimestamp().equals(ev.getTimestamp()))
                        {
                            isPresent = true;
                            break;
                        }
                    }
                }

                if (isPresent)
                    return;
            }
        }

        chatPanel.addMessage(
            sourceMember.getName(),
            null,
            evt.getTimestamp(),
            messageType,
            messageContent,
            message.getContentType(),
            message.getMessageUID(),
            null);

        chatWindowManager.openChat(chatPanel, false);
    }",False
14,isPrivate(ChatRoom),Method,,net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatSession+isContactListSupported(),net.java.sip.communicator.service.protocol.ChatRoom+isSystem() net.java.sip.communicator.service.protocol.ChatRoom+isSystem() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.service.protocol.ChatRoom+getMembersCount() net.java.sip.communicator.service.protocol.ChatRoom+getMembersCount() net.java.sip.communicator.service.protocol.ChatRoom+getUserNickname() net.java.sip.communicator.service.protocol.ChatRoom+getUserNickname() net.java.sip.communicator.service.protocol.ChatRoom+getMembers() net.java.sip.communicator.service.protocol.ChatRoom+getMembers() java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.ChatRoomMember+getName(),,1237,31,8,"/** 
 * Determines whether a specific <code>ChatRoom</code> is private i.e. represents a one-to-one conversation which is not a channel. Since the interface  {@link ChatRoom} does not expose the private property, anheuristic is used as a workaround: (1) a system <code>ChatRoom</code> is obviously not private and (2) a <code>ChatRoom</code> is private if it has only one <code>ChatRoomMember</code> who is not the local user.
 * @param chatRoom the <code>ChatRoom</code> to be determined as private or not
 * @return <tt>true</tt> if the specified <code>ChatRoom</code> is private;otherwise, <tt>false</tt>
 */
","/**
     * Determines whether a specific <code>ChatRoom</code> is private i.e.
     * represents a one-to-one conversation which is not a channel. Since the
     * interface {@link ChatRoom} does not expose the private property, an
     * heuristic is used as a workaround: (1) a system <code>ChatRoom</code> is
     * obviously not private and (2) a <code>ChatRoom</code> is private if it
     * has only one <code>ChatRoomMember</code> who is not the local user.
     *
     * @param chatRoom
     *            the <code>ChatRoom</code> to be determined as private or not
     * @return <tt>true</tt> if the specified <code>ChatRoom</code> is private;
     *         otherwise, <tt>false</tt>
     */
    static boolean isPrivate(ChatRoom chatRoom)
    {
        if (!chatRoom.isSystem()
            && chatRoom.isJoined()
            && (chatRoom.getMembersCount() == 1))
        {
            String nickname = chatRoom.getUserNickname();

            if (nickname != null)
            {
                for (ChatRoomMember member : chatRoom.getMembers())
                    if (nickname.equals(member.getName()))
                        return false;
                return true;
            }
        }
        return false;
    }",True
15,messageDeliveryFailed(ChatRoomMessageDeliveryFailedEvent),Method,,,"net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getMessage() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getMessage() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getDestinationChatRoomMember() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getDestinationChatRoomMember() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getReason() net.java.sip.communicator.service.protocol.event.ChatRoomMessageDeliveryFailedEvent+getReason() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoom,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoom,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,Date,String,String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,Date,String,String,String) net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.ChatRoomMember+getName() java.util.Date+Date() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addErrorMessage(String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addErrorMessage(String,String) net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.service.protocol.ChatRoomMember+getName() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean)",net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+OFFLINE_MESSAGES_NOT_SUPPORTED net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+NETWORK_FAILURE net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+PROVIDER_NOT_REGISTERED net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+INTERNAL_ERROR net.java.sip.communicator.service.gui.Chat+OUTGOING_MESSAGE,3059,82,1,"/** 
 * Implements the <tt>ChatRoomMessageListener.messageDeliveryFailed</tt> method. <br> In the conversation area shows an error message, explaining the problem.
 * @param evt the <tt>ChatRoomMessageDeliveryFailedEvent</tt> that notifiedus of a delivery failure
 */
","/**
     * Implements the <tt>ChatRoomMessageListener.messageDeliveryFailed</tt>
     * method.
     * <br>
     * In the conversation area shows an error message, explaining the problem.
     * @param evt the <tt>ChatRoomMessageDeliveryFailedEvent</tt> that notified
     * us of a delivery failure
     */
    public void messageDeliveryFailed(ChatRoomMessageDeliveryFailedEvent evt)
    {
        ChatRoom sourceChatRoom = evt.getSourceChatRoom();

        String errorMsg = null;

        /*
         * FIXME ChatRoomMessageDeliveryFailedEvent#getSource() is not a Message
         * instance at the time of this writing and the attempt ""(Message)
         * evt.getSource()"" seems to be to get the message which failed to be
         * delivered. I'm not sure it's
         * ChatRoomMessageDeliveryFailedEvent#getMessage() but since it's the
         * only message I can get out of ChatRoomMessageDeliveryFailedEvent, I'm
         * using it.
         */
        Message sourceMessage = evt.getMessage();

        ChatRoomMember destMember = evt.getDestinationChatRoomMember();

        if (evt.getErrorCode()
            == MessageDeliveryFailedEvent.OFFLINE_MESSAGES_NOT_SUPPORTED)
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                ""service.gui.MSG_DELIVERY_NOT_SUPPORTED"",
                new String[]{destMember.getName()});
        }
        else if (evt.getErrorCode()
            == MessageDeliveryFailedEvent.NETWORK_FAILURE)
        {
            errorMsg = GuiActivator.getResources()
                .getI18NString(""service.gui.MSG_NOT_DELIVERED"");
        }
        else if (evt.getErrorCode()
            == MessageDeliveryFailedEvent.PROVIDER_NOT_REGISTERED)
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                ""service.gui.MSG_SEND_CONNECTION_PROBLEM"");
        }
        else if (evt.getErrorCode()
            == MessageDeliveryFailedEvent.INTERNAL_ERROR)
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                ""service.gui.MSG_DELIVERY_INTERNAL_ERROR"");
        }
        else
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                 ""service.gui.MSG_DELIVERY_UNKNOWN_ERROR"");
        }

        String reason = evt.getReason();
        if (reason != null)
            errorMsg += "" "" + GuiActivator.getResources().getI18NString(
                ""service.gui.ERROR_WAS"",
                new String[]{reason});

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();
        ChatPanel chatPanel
            = chatWindowManager.getMultiChat(sourceChatRoom, true);

        chatPanel.addMessage(
            destMember.getName(),
            new Date(),
            Chat.OUTGOING_MESSAGE,
            sourceMessage.getContent(),
            sourceMessage.getContentType());

        chatPanel.addErrorMessage(
            destMember.getName(),
            errorMsg);

        chatWindowManager.openChat(chatPanel, false);
    }",False
16,localUserAdHocPresenceChanged(LocalUserAdHocChatRoomPresenceChangeEvent),Method,,,"net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getAdHocChatRoom() net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getAdHocChatRoom() net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findChatRoomWrapperFromAdHocChatRoom(AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findChatRoomWrapperFromAdHocChatRoom(AdHocChatRoom) net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getEventType() net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getEventType() java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+isShown() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+isShown() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocConferenceChatSession+loadChatRoom(AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+getChatSession() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+getChatSession() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocConferenceChatSession+loadChatRoom(AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.service.protocol.AdHocChatRoom+addMessageListener(AdHocChatRoomMessageListener) net.java.sip.communicator.service.protocol.AdHocChatRoom+addMessageListener(AdHocChatRoomMessageListener) java.lang.String+equals(Object) net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getEventType() net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getEventType() java.lang.String+equals(Object) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.AdHocChatRoom+getName() net.java.sip.communicator.service.protocol.AdHocChatRoom+getName() net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getReason() net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+getReason() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+closeAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+closeAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.service.protocol.AdHocChatRoom+removeMessageListener(AdHocChatRoomMessageListener) net.java.sip.communicator.service.protocol.AdHocChatRoom+removeMessageListener(AdHocChatRoomMessageListener)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+LOCAL_USER_JOINED net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeEvent+AD_HOC_CHAT_ROOM_CHANGED net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+LOCAL_USER_JOIN_FAILED net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+LOCAL_USER_LEFT net.java.sip.communicator.service.protocol.event.LocalUserAdHocChatRoomPresenceChangeEvent+LOCAL_USER_DROPPED net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeEvent+AD_HOC_CHAT_ROOM_CHANGED,3061,73,1,"/** 
 * Implements the <tt>LocalUserAdHocChatRoomPresenceListener.localUserPresenceChanged</tt> method
 * @param evt the <tt>LocalUserAdHocChatRoomPresenceChangeEvent</tt> thatnotified us of a presence change
 */
","/**
     * Implements the
     * <tt>LocalUserAdHocChatRoomPresenceListener.localUserPresenceChanged</tt>
     * method
     *
     * @param evt the <tt>LocalUserAdHocChatRoomPresenceChangeEvent</tt> that
     * notified us of a presence change
     */
    public void localUserAdHocPresenceChanged(
            LocalUserAdHocChatRoomPresenceChangeEvent evt)
    {
        AdHocChatRoom sourceAdHocChatRoom = evt.getAdHocChatRoom();
        AdHocChatRoomWrapper adHocChatRoomWrapper
            = adHocChatRoomList
                .findChatRoomWrapperFromAdHocChatRoom(sourceAdHocChatRoom);

        String eventType = evt.getEventType();

        if (LocalUserAdHocChatRoomPresenceChangeEvent
                .LOCAL_USER_JOINED.equals(eventType))
        {
            if(adHocChatRoomWrapper != null)
            {
                this.fireAdHocChatRoomListChangedEvent(
                        adHocChatRoomWrapper,
                        AdHocChatRoomListChangeEvent.AD_HOC_CHAT_ROOM_CHANGED);

                ChatWindowManager chatWindowManager
                    = GuiActivator.getUIService().getChatWindowManager();
                ChatPanel chatPanel
                    = chatWindowManager
                        .getMultiChat(adHocChatRoomWrapper, true);

                // Check if we have already opened a chat window for this chat
                // wrapper and load the real chat room corresponding to the
                // wrapper.
                if(chatPanel.isShown())
                    ((AdHocConferenceChatSession) chatPanel.getChatSession())
                        .loadChatRoom(sourceAdHocChatRoom);
                else
                    chatWindowManager.openChat(chatPanel, true);
            }

            sourceAdHocChatRoom.addMessageListener(this);
        }
        else if (evt.getEventType().equals(
            LocalUserAdHocChatRoomPresenceChangeEvent.LOCAL_USER_JOIN_FAILED))
        {
            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                        ""service.gui.FAILED_TO_JOIN_CHAT_ROOM"",
                        new String[]{sourceAdHocChatRoom.getName()})
                        + evt.getReason())
            .showDialog();
        }
        else if (LocalUserAdHocChatRoomPresenceChangeEvent
                        .LOCAL_USER_LEFT.equals(eventType)
                    || LocalUserAdHocChatRoomPresenceChangeEvent
                            .LOCAL_USER_DROPPED.equals(eventType))
        {
            this.closeAdHocChatRoom(adHocChatRoomWrapper);

            // Need to refresh the chat room's list in order to change
            // the state of the chat room to offline.
            fireAdHocChatRoomListChangedEvent(
                    adHocChatRoomWrapper,
                    AdHocChatRoomListChangeEvent.AD_HOC_CHAT_ROOM_CHANGED);

            sourceAdHocChatRoom.removeMessageListener(this);
        }
    }",False
17,localUserPresenceChanged(LocalUserChatRoomPresenceChangeEvent),Method,,,javax.swing.SwingUtilities+isEventDispatchThread() javax.swing.SwingUtilities+isEventDispatchThread() javax.swing.SwingUtilities+invokeLater(Runnable) javax.swing.SwingUtilities+invokeLater(Runnable) +() +run(),,3746,100,1,"/** 
 * Implements the <tt>LocalUserChatRoomPresenceListener.localUserPresenceChanged</tt> method.
 * @param evt the <tt>LocalUserChatRoomPresenceChangeEvent</tt> thatnotified us
 */
","/**
     * Implements the
     * <tt>LocalUserChatRoomPresenceListener.localUserPresenceChanged</tt>
     * method.
     * @param evt the <tt>LocalUserChatRoomPresenceChangeEvent</tt> that
     * notified us
     */
    public void localUserPresenceChanged(
        final LocalUserChatRoomPresenceChangeEvent evt)
    {
        if(!SwingUtilities.isEventDispatchThread())
        {
            SwingUtilities.invokeLater(new Runnable()
            {
                @Override
                public void run()
                {
                    localUserPresenceChanged(evt);
                }
            });
            return;
        }

        ChatRoom sourceChatRoom = evt.getChatRoom();
        ChatRoomWrapper chatRoomWrapper
            = chatRoomList.findChatRoomWrapperFromChatRoom(sourceChatRoom);

        String eventType = evt.getEventType();

        if (LocalUserChatRoomPresenceChangeEvent
                .LOCAL_USER_JOINED.equals(eventType))
        {
            if(chatRoomWrapper != null)
            {
                this.fireChatRoomListChangedEvent(
                    chatRoomWrapper,
                    ChatRoomListChangeEvent.CHAT_ROOM_CHANGED);

                ChatWindowManager chatWindowManager
                    = GuiActivator.getUIService().getChatWindowManager();
                ChatPanel chatPanel
                    = chatWindowManager.getMultiChat(chatRoomWrapper, true);

                chatPanel.setChatIcon(
                    chatPanel.getChatSession().getChatStatusIcon());

                // Check if we have already opened a chat window for this chat
                // wrapper and load the real chat room corresponding to the
                // wrapper.
                if(chatPanel.isShown())
                    ((ConferenceChatSession) chatPanel.getChatSession())
                        .loadChatRoom(sourceChatRoom);
                else
                    chatWindowManager.openChat(chatPanel, true);
            }

            if (sourceChatRoom.isSystem())
            {
                ChatRoomProviderWrapper serverWrapper
                    = chatRoomList.findServerWrapperFromProvider(
                        sourceChatRoom.getParentProvider());

                serverWrapper.setSystemRoom(sourceChatRoom);
            }

            sourceChatRoom.addMessageListener(this);
        }
        else if (LocalUserChatRoomPresenceChangeEvent
                    .LOCAL_USER_JOIN_FAILED.equals(eventType))
        {
            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                    ""service.gui.FAILED_TO_JOIN_CHAT_ROOM"",
                    new String[]{sourceChatRoom.getName()}) + evt.getReason())
                .showDialog();
        }
        else if (LocalUserChatRoomPresenceChangeEvent
                        .LOCAL_USER_LEFT.equals(eventType)
                    || LocalUserChatRoomPresenceChangeEvent
                            .LOCAL_USER_KICKED.equals(eventType)
                    || LocalUserChatRoomPresenceChangeEvent
                            .LOCAL_USER_DROPPED.equals(eventType))
        {
            if(chatRoomWrapper != null)
            {
                this.closeChatRoom(chatRoomWrapper);

                // Need to refresh the chat room's list in order to change
                // the state of the chat room to offline.

                fireChatRoomListChangedEvent(
                    chatRoomWrapper,
                    ChatRoomListChangeEvent.CHAT_ROOM_CHANGED);
            }

            sourceChatRoom.removeMessageListener(this);
        }
    }",False
18,acceptInvitation(ChatRoomInvitation),Method,,net.java.sip.communicator.impl.gui.main.chat.conference.InvitationReceivedDialog+actionPerformed(ActionEvent),"net.java.sip.communicator.service.protocol.ChatRoomInvitation+getTargetChatRoom() net.java.sip.communicator.service.protocol.ChatRoomInvitation+getTargetChatRoom() net.java.sip.communicator.service.protocol.ChatRoomInvitation+getChatRoomPassword() net.java.sip.communicator.service.protocol.ChatRoomInvitation+getChatRoomPassword() net.java.sip.communicator.service.protocol.AccountID+getUserID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getUserID() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoom,String,byte[]) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoom,String,byte[])",,539,16,1,"/** 
 * Called to accept an incoming invitation. Adds the invitation chat room to the list of chat rooms and joins it.
 * @param invitation the invitation to accept.
 */
","/**
     * Called to accept an incoming invitation. Adds the invitation chat room
     * to the list of chat rooms and joins it.
     *
     * @param invitation the invitation to accept.
     */
    public void acceptInvitation(ChatRoomInvitation invitation)
    {
        ChatRoom chatRoom = invitation.getTargetChatRoom();
        byte[] password = invitation.getChatRoomPassword();

        String nickName
            = chatRoom.getParentProvider().getAccountID().getUserID();

        joinChatRoom(chatRoom, nickName, password);
    }",False
19,"acceptInvitation(AdHocChatRoomInvitation,OperationSetAdHocMultiUserChat)",Method,,net.java.sip.communicator.impl.gui.main.chat.conference.InvitationReceivedDialog+actionPerformed(ActionEvent),net.java.sip.communicator.service.protocol.AdHocChatRoomInvitation+getTargetAdHocChatRoom() net.java.sip.communicator.service.protocol.AdHocChatRoomInvitation+getTargetAdHocChatRoom() net.java.sip.communicator.service.protocol.AdHocChatRoom+join() net.java.sip.communicator.service.protocol.AdHocChatRoom+join(),,611,17,1,"/** 
 * Called to accept an incoming invitation. Adds the invitation chat room to the list of chat rooms and joins it.
 * @param invitation the invitation to accept
 * @param multiUserChatOpSet the operation set for chat conferencing
 * @throws OperationFailedException if the accept fails
 */
","/**
     * Called to accept an incoming invitation. Adds the invitation chat room
     * to the list of chat rooms and joins it.
     *
     * @param invitation the invitation to accept
     * @param multiUserChatOpSet the operation set for chat conferencing
     * @throws OperationFailedException if the accept fails
     */
    public void acceptInvitation(
        AdHocChatRoomInvitation invitation,
        OperationSetAdHocMultiUserChat multiUserChatOpSet)
        throws OperationFailedException
    {
        AdHocChatRoom chatRoom = invitation.getTargetAdHocChatRoom();

        chatRoom.join();
    }",False
20,"rejectInvitation(OperationSetMultiUserChat,ChatRoomInvitation,String)",Method,,net.java.sip.communicator.impl.gui.main.chat.conference.InvitationReceivedDialog+actionPerformed(ActionEvent),"net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+rejectInvitation(ChatRoomInvitation,String) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+rejectInvitation(ChatRoomInvitation,String)",,549,14,1,"/** 
 * Rejects the given invitation with the specified reason.
 * @param multiUserChatOpSet the operation set to use for rejecting theinvitation
 * @param invitation the invitation to reject
 * @param reason the reason for the rejection
 */
","/**
     * Rejects the given invitation with the specified reason.
     *
     * @param multiUserChatOpSet the operation set to use for rejecting the
     * invitation
     * @param invitation the invitation to reject
     * @param reason the reason for the rejection
     */
    public void rejectInvitation(  OperationSetMultiUserChat multiUserChatOpSet,
                                   ChatRoomInvitation invitation,
                                   String reason)
    {
        multiUserChatOpSet.rejectInvitation(invitation, reason);
    }",False
21,"rejectInvitation(OperationSetAdHocMultiUserChat,AdHocChatRoomInvitation,String)",Method,,net.java.sip.communicator.impl.gui.main.chat.conference.InvitationReceivedDialog+actionPerformed(ActionEvent),"net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+rejectInvitation(AdHocChatRoomInvitation,String) net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+rejectInvitation(AdHocChatRoomInvitation,String)",,580,15,1,"/** 
 * Rejects the given invitation with the specified reason.
 * @param multiUserChatAdHocOpSet the operation set to use for rejecting theinvitation
 * @param invitation the invitation to reject
 * @param reason the reason for the rejection
 */
","/**
     * Rejects the given invitation with the specified reason.
     *
     * @param multiUserChatAdHocOpSet the operation set to use for rejecting the
     * invitation
     * @param invitation the invitation to reject
     * @param reason the reason for the rejection
     */
    public void rejectInvitation(
            OperationSetAdHocMultiUserChat     multiUserChatAdHocOpSet,
            AdHocChatRoomInvitation         invitation,
            String                             reason)
    {
         multiUserChatAdHocOpSet.rejectInvitation(invitation, reason);
    }",False
22,"joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean,String)",Method,"joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean) JoinChatRoomTask.done()",,"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() org.jdesktop.swingworker.SwingWorker+execute() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[],boolean,boolean,String) org.jdesktop.swingworker.SwingWorker+execute()",,1628,38,1,"/** 
 * Joins the given chat room with the given password and manages all the exceptions that could occur during the join process.
 * @param chatRoomWrapper the chat room to join.
 * @param nickName the nickname we choose for the given chat room.
 * @param password the password.
 * @param rememberPassword if true the password should be saved.
 * @param isFirstAttempt is this the first attempt to join room, usedto check whether to show some error messages
 * @param subject the subject which will be set to the room after the user join successful.
 */
","/**
     * Joins the given chat room with the given password and manages all the
     * exceptions that could occur during the join process.
     *
     * @param chatRoomWrapper the chat room to join.
     * @param nickName the nickname we choose for the given chat room.
     * @param password the password.
     * @param rememberPassword if true the password should be saved.
     * @param isFirstAttempt is this the first attempt to join room, used
     *                       to check whether to show some error messages
     * @param subject the subject which will be set to the room after the user 
     * join successful.
     */
    public void joinChatRoom(   ChatRoomWrapper chatRoomWrapper,
                                String nickName,
                                byte[] password,
                                boolean rememberPassword,
                                boolean isFirstAttempt,
                                String subject)
    {
        ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

        if(chatRoom == null)
        {
            new ErrorDialog(
               GuiActivator.getUIService().getMainFrame(),
               GuiActivator.getResources().getI18NString(""service.gui.WARNING""),
               GuiActivator.getResources().getI18NString(
                    ""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                    new String[]{chatRoomWrapper.getChatRoomName()}))
                    .showDialog();

            return;
        }

        new JoinChatRoomTask(chatRoomWrapper, nickName, password,
            rememberPassword, isFirstAttempt, subject).execute();
    }",True
23,"joinChatRoom(ChatRoomWrapper,String,byte[],boolean)",Method,,,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean)",,724,17,1,"/** 
 * Joins the given chat room with the given password and manages all the exceptions that could occur during the join process.
 * @param chatRoomWrapper the chat room to join.
 * @param nickName the nickname we choose for the given chat room.
 * @param password the password.
 * @param rememberPassword if true the password should be saved.
 */
","/**
     * Joins the given chat room with the given password and manages all the
     * exceptions that could occur during the join process.
     *
     * @param chatRoomWrapper the chat room to join.
     * @param nickName the nickname we choose for the given chat room.
     * @param password the password.
     * @param rememberPassword if true the password should be saved.
     */
    public void joinChatRoom(   ChatRoomWrapper chatRoomWrapper,
                                String nickName,
                                byte[] password, 
                                boolean rememberPassword)
    {
        this.joinChatRoom(
                chatRoomWrapper, nickName, password, rememberPassword, true);
    }",True
24,"joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean)",Method,"joinChatRoom(ChatRoomWrapper,String,byte[],boolean)",,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean,String) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean,String)",,952,21,1,"/** 
 * Joins the given chat room with the given password and manages all the exceptions that could occur during the join process.
 * @param chatRoomWrapper the chat room to join.
 * @param nickName the nickname we choose for the given chat room.
 * @param password the password.
 * @param rememberPassword if true the password should be saved.
 * @param isFirstAttempt is this the first attempt to join room, usedto check whether to show some error messages
 */
","/**
     * Joins the given chat room with the given password and manages all the
     * exceptions that could occur during the join process.
     *
     * @param chatRoomWrapper the chat room to join.
     * @param nickName the nickname we choose for the given chat room.
     * @param password the password.
     * @param rememberPassword if true the password should be saved.
     * @param isFirstAttempt is this the first attempt to join room, used
     *                       to check whether to show some error messages
     */
    public void joinChatRoom(   ChatRoomWrapper chatRoomWrapper,
                                String nickName,
                                byte[] password,
                                boolean rememberPassword,
                                boolean isFirstAttempt)
    {
        this.joinChatRoom(
            chatRoomWrapper, nickName, password, rememberPassword, 
            isFirstAttempt, null);
    }",True
25,"joinChatRoom(ChatRoomWrapper,String,byte[])",Method,"joinChatRoom(ChatRoom,String,byte[]) openChatRoom(ChatRoomWrapper)",net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableUI+openChatForSelection(),"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() org.jdesktop.swingworker.SwingWorker+execute() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[]) org.jdesktop.swingworker.SwingWorker+execute()",,1090,29,1,"/** 
 * Joins the given chat room with the given password and manages all the exceptions that could occur during the join process.
 * @param chatRoomWrapper the chat room to join.
 * @param nickName the nickname we choose for the given chat room.
 * @param password the password.
 */
","/**
     * Joins the given chat room with the given password and manages all the
     * exceptions that could occur during the join process.
     *
     * @param chatRoomWrapper the chat room to join.
     * @param nickName the nickname we choose for the given chat room.
     * @param password the password.
     */
    public void joinChatRoom(   ChatRoomWrapper chatRoomWrapper,
                                String nickName,
                                byte[] password)
    {
        ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

        if(chatRoom == null)
        {
            new ErrorDialog(
               GuiActivator.getUIService().getMainFrame(),
               GuiActivator.getResources().getI18NString(""service.gui.WARNING""),
               GuiActivator.getResources().getI18NString(
                    ""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                    new String[]{chatRoomWrapper.getChatRoomName()}))
                    .showDialog();

            return;
        }

        new JoinChatRoomTask(chatRoomWrapper, nickName, password).execute();
    }",True
26,"joinChatRoom(ChatRoomWrapper,String,byte[],String)",Method,openChatRoom(ChatRoomWrapper),net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomRightButtonMenu+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomRightButtonMenu+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomRightButtonMenu+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableUI+openChatForSelection(),"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() org.jdesktop.swingworker.SwingWorker+execute() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[],String) org.jdesktop.swingworker.SwingWorker+execute()",,1264,33,1,"/** 
 * Joins the given chat room with the given password and manages all the exceptions that could occur during the join process.
 * @param chatRoomWrapper the chat room to join.
 * @param nickName the nickname we choose for the given chat room.
 * @param password the password.
 * @param subject the subject which will be set to the room after the user join successful.
 */
","/**
     * Joins the given chat room with the given password and manages all the
     * exceptions that could occur during the join process.
     *
     * @param chatRoomWrapper the chat room to join.
     * @param nickName the nickname we choose for the given chat room.
     * @param password the password.
     * @param subject the subject which will be set to the room after the user 
     * join successful.
     */
    public void joinChatRoom(   ChatRoomWrapper chatRoomWrapper,
                                String nickName,
                                byte[] password,
                                String subject)
    {
        ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

        if(chatRoom == null)
        {
            new ErrorDialog(
               GuiActivator.getUIService().getMainFrame(),
               GuiActivator.getResources().getI18NString(""service.gui.WARNING""),
               GuiActivator.getResources().getI18NString(
                    ""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                    new String[]{chatRoomWrapper.getChatRoomName()}))
                    .showDialog();

            return;
        }

        new JoinChatRoomTask(chatRoomWrapper, nickName, password, subject)
            .execute();
    }",True
27,"createChatRoom(ProtocolProviderService,Collection<String>,String,boolean)",Method,,,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean)",,778,20,1,"/** 
 * Creates a chat room, by specifying the chat room name, the parent protocol provider and eventually, the contacts invited to participate in this chat room.
 * @param protocolProvider the parent protocol provider.
 * @param contacts the contacts invited when creating the chat room.
 * @param reason
 * @param persistent is the room persistent
 * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
 */
","/**
     * Creates a chat room, by specifying the chat room name, the parent
     * protocol provider and eventually, the contacts invited to participate in
     * this chat room.
     *
     * @param protocolProvider the parent protocol provider.
     * @param contacts the contacts invited when creating the chat room.
     * @param reason
     * @param persistent is the room persistent
     * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
     */
    public ChatRoomWrapper createChatRoom(
        ProtocolProviderService protocolProvider,
        Collection<String> contacts,
        String reason,
        boolean persistent)
    {
        return this.createChatRoom(
            null, protocolProvider, contacts, reason, persistent, false);
    }",True
28,"createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean)",Method,"createChatRoom(ProtocolProviderService,Collection<String>,String,boolean) createPrivateChatRoom(ProtocolProviderService,Collection<String>,String,boolean)",net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+run(),"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean)",,963,25,1,"/** 
 * Creates a chat room, by specifying the chat room name, the parent protocol provider and eventually, the contacts invited to participate in this chat room.
 * @param roomName the name of the room
 * @param protocolProvider the parent protocol provider.
 * @param contacts the contacts invited when creating the chat room.
 * @param reason
 * @param persistent is the room persistent
 * @param isPrivate whether the room will be private or public.
 * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
 */
","/**
     * Creates a chat room, by specifying the chat room name, the parent
     * protocol provider and eventually, the contacts invited to participate in
     * this chat room.
     *
     * @param roomName the name of the room
     * @param protocolProvider the parent protocol provider.
     * @param contacts the contacts invited when creating the chat room.
     * @param reason
     * @param persistent is the room persistent
     * @param isPrivate whether the room will be private or public.
     * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
     */
    public ChatRoomWrapper createChatRoom(
        String roomName,
        ProtocolProviderService protocolProvider,
        Collection<String> contacts,
        String reason,
        boolean persistent,
        boolean isPrivate)
    {
        return createChatRoom(
            roomName, protocolProvider, contacts, reason, true, persistent,
            isPrivate);
    }",True
29,"createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean)",Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.createforms.CreateChatRoomDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.createforms.CreateChatRoomWizard+wizardFinished(WizardEvent),"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean)",,864,23,1,"/** 
 * Creates a chat room, by specifying the chat room name, the parent protocol provider and eventually, the contacts invited to participate in this chat room.
 * @param roomName the name of the room
 * @param protocolProvider the parent protocol provider.
 * @param contacts the contacts invited when creating the chat room.
 * @param reason
 * @param persistent is the room persistent
 * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
 */
","/**
     * Creates a chat room, by specifying the chat room name, the parent
     * protocol provider and eventually, the contacts invited to participate in
     * this chat room.
     *
     * @param roomName the name of the room
     * @param protocolProvider the parent protocol provider.
     * @param contacts the contacts invited when creating the chat room.
     * @param reason
     * @param persistent is the room persistent
     * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
     */
    public ChatRoomWrapper createChatRoom(
        String roomName,
        ProtocolProviderService protocolProvider,
        Collection<String> contacts,
        String reason,
        boolean persistent)
    {
        return createChatRoom(
            roomName, protocolProvider, contacts, reason, true, persistent,
            false);
    }",True
30,"createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean)",Method,"createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean) createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean) openChatRoom(ChatRoomWrapper)",net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomRightButtonMenu+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableUI+openChatForSelection(),"net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) java.util.HashMap+HashMap() java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+createChatRoom(String,Map<String,Object>) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+createChatRoom(String,Map<String,Object>) net.java.sip.communicator.service.protocol.ChatRoom+join() net.java.sip.communicator.service.protocol.ChatRoom+join() net.java.sip.communicator.service.protocol.ChatRoom+invite(String,String) net.java.sip.communicator.service.protocol.ChatRoom+invite(String,String) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String,Throwable) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String,Throwable) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+ChatRoomWrapper(ChatRoomProviderWrapper,ChatRoom) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+setPersistent(boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+setPersistent(boolean) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeEvent+CHAT_ROOM_ADDED,3680,99,1,"/** 
 * Creates a chat room, by specifying the chat room name, the parent protocol provider and eventually, the contacts invited to participate in this chat room.
 * @param roomName the name of the room
 * @param protocolProvider the parent protocol provider.
 * @param contacts the contacts invited when creating the chat room.
 * @param reason
 * @param join whether we should join the room after creating it.
 * @param persistent whether the newly created room will be persistent.
 * @param isPrivate whether the room will be private or public.
 * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
 */
","/**
     * Creates a chat room, by specifying the chat room name, the parent
     * protocol provider and eventually, the contacts invited to participate in
     * this chat room.
     *
     * @param roomName the name of the room
     * @param protocolProvider the parent protocol provider.
     * @param contacts the contacts invited when creating the chat room.
     * @param reason
     * @param join whether we should join the room after creating it.
     * @param persistent whether the newly created room will be persistent.
     * @param isPrivate whether the room will be private or public.
     * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
     */
    public ChatRoomWrapper createChatRoom(
        String roomName,
        ProtocolProviderService protocolProvider,
        Collection<String> contacts,
        String reason,
        boolean join,
        boolean persistent,
        boolean isPrivate)
    {
        ChatRoomWrapper chatRoomWrapper = null;

        OperationSetMultiUserChat groupChatOpSet
            = protocolProvider.getOperationSet(OperationSetMultiUserChat.class);

        // If there's no group chat operation set we have nothing to do here.
        if (groupChatOpSet == null)
            return null;

        ChatRoom chatRoom = null;
        try
        {
            HashMap<String, Object> roomProperties = 
                new HashMap<String, Object>();
            roomProperties.put(""isPrivate"", isPrivate);
            chatRoom = groupChatOpSet.createChatRoom(roomName, roomProperties);

            if(join)
            {
                chatRoom.join();

                for(String contact : contacts)
                    chatRoom.invite(contact, reason);
            }
        }
        catch (OperationFailedException ex)
        {
            logger.error(""Failed to create chat room."", ex);

            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                    ""service.gui.CREATE_CHAT_ROOM_ERROR"",
                    new String[]{protocolProvider.getProtocolName()}),
                    ex)
            .showDialog();
        }
        catch (OperationNotSupportedException ex)
        {
            logger.error(""Failed to create chat room."", ex);

            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                    ""service.gui.CREATE_CHAT_ROOM_ERROR"",
                    new String[]{protocolProvider.getProtocolName()}),
                    ex)
            .showDialog();
        }

        if(chatRoom != null)
        {
            ChatRoomProviderWrapper parentProvider
                = chatRoomList.findServerWrapperFromProvider(protocolProvider);

            // if there is the same room ids don't add new wrapper as old one
            // maybe already created
            chatRoomWrapper =
                chatRoomList.findChatRoomWrapperFromChatRoom(chatRoom);

            if(chatRoomWrapper == null)
            {
                chatRoomWrapper = new ChatRoomWrapper(parentProvider, chatRoom);
                chatRoomWrapper.setPersistent(persistent);
                chatRoomList.addChatRoom(chatRoomWrapper);

                fireChatRoomListChangedEvent(
                    chatRoomWrapper,
                    ChatRoomListChangeEvent.CHAT_ROOM_ADDED);
            }
        }

        return chatRoomWrapper;
    }",True
31,"createPrivateChatRoom(ProtocolProviderService,Collection<String>,String,boolean)",Method,,"net.java.sip.communicator.impl.gui.main.chat.ChatPanel+inviteContacts(ChatTransport,Collection<String>,String)","net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean)",,772,20,1,"/** 
 * Creates a private chat room, by specifying the parent protocol provider and eventually, the contacts invited to participate in this chat room.
 * @param protocolProvider the parent protocol provider.
 * @param contacts the contacts invited when creating the chat room.
 * @param reason
 * @param persistent is the room persistent
 * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
 */
","/**
     * Creates a private chat room, by specifying the parent
     * protocol provider and eventually, the contacts invited to participate in
     * this chat room.
     *
     * @param protocolProvider the parent protocol provider.
     * @param contacts the contacts invited when creating the chat room.
     * @param reason
     * @param persistent is the room persistent
     * @return the <tt>ChatRoomWrapper</tt> corresponding to the created room
     */
    public ChatRoomWrapper createPrivateChatRoom(
        ProtocolProviderService protocolProvider,
        Collection<String> contacts,
        String reason,
        boolean persistent)
    {
        return this.createChatRoom(
            null, protocolProvider, contacts, reason, persistent, true);
    }",True
32,"createAdHocChatRoom(ProtocolProviderService,Collection<String>,String)",Method,,"net.java.sip.communicator.impl.gui.main.chat.ChatPanel+inviteContacts(ChatTransport,Collection<String>,String)","net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) java.util.LinkedList+LinkedList() java.util.List+add(E) java.util.List+add(E) net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+createAdHocChatRoom(String,List<String>,String) net.java.sip.communicator.service.protocol.OperationSetAdHocMultiUserChat+createAdHocChatRoom(String,List<String>,String) java.util.Date+getTime() java.util.Date+Date() java.util.Date+getTime() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String,Throwable) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String,Throwable) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.service.protocol.ProtocolProviderService+getProtocolName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+AdHocChatRoomWrapper(AdHocChatRoomProviderWrapper,AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomProviderWrapper+addAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomProviderWrapper+addAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+addAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+addAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeEvent+AD_HOC_CHAT_ROOM_ADDED,2957,79,1,"/** 
 * Creates an ad-hoc chat room, by specifying the ad-hoc chat room name, the parent protocol provider and eventually, the contacts invited to participate in this ad-hoc chat room.
 * @param protocolProvider the parent protocol provider.
 * @param contacts the contacts invited when creating the chat room.
 * @param reason the reason for this invitation
 * @return the <tt>AdHocChatRoomWrapper</tt> corresponding to the createdad hoc chat room
 */
","/**
     * Creates an ad-hoc chat room, by specifying the ad-hoc chat room name, the
     * parent protocol provider and eventually, the contacts invited to
     * participate in this ad-hoc chat room.
     *
     * @param protocolProvider the parent protocol provider.
     * @param contacts the contacts invited when creating the chat room.
     * @param reason the reason for this invitation
     * @return the <tt>AdHocChatRoomWrapper</tt> corresponding to the created
     * ad hoc chat room
     */
    public AdHocChatRoomWrapper createAdHocChatRoom(
        ProtocolProviderService protocolProvider,
        Collection<String> contacts,
        String reason)
    {
        AdHocChatRoomWrapper chatRoomWrapper = null;

        OperationSetAdHocMultiUserChat groupChatOpSet
            = protocolProvider
                .getOperationSet(OperationSetAdHocMultiUserChat.class);

        // If there's no group chat operation set we have nothing to do here.
        if (groupChatOpSet == null)
            return null;

        AdHocChatRoom chatRoom = null;

        try
        {
            List<String> members = new LinkedList<String>();

            for(String address : contacts)
                members.add(address);

            chatRoom = groupChatOpSet.createAdHocChatRoom(
                ""chatroom-"" + new Date().getTime(), members, reason);
        }
        catch (OperationFailedException ex)
        {
            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                    ""service.gui.CREATE_CHAT_ROOM_ERROR"",
                    new String[]{protocolProvider.getProtocolName()}),
                    ex)
            .showDialog();
        }
        catch (OperationNotSupportedException ex)
        {
            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                    ""service.gui.CREATE_CHAT_ROOM_ERROR"",
                    new String[]{protocolProvider.getProtocolName()}),
                    ex)
            .showDialog();
        }

        if(chatRoom != null)
        {
            AdHocChatRoomProviderWrapper parentProvider
                = adHocChatRoomList.findServerWrapperFromProvider(
                        protocolProvider);

            chatRoomWrapper = new AdHocChatRoomWrapper(
                    parentProvider, chatRoom);
            parentProvider.addAdHocChatRoom(chatRoomWrapper);
            adHocChatRoomList.addAdHocChatRoom(chatRoomWrapper);

            fireAdHocChatRoomListChangedEvent(
                chatRoomWrapper,
                AdHocChatRoomListChangeEvent.AD_HOC_CHAT_ROOM_ADDED);
        }

        return chatRoomWrapper;
    }",False
33,joinChatRoom(ChatRoomWrapper),Method,joinChatRoom(ChatRoom),net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+run(),"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() org.jdesktop.swingworker.SwingWorker+execute() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[]) org.jdesktop.swingworker.SwingWorker+execute()",,737,23,1,"/** 
 * Join chat room.
 * @param chatRoomWrapper
 */
","/**
     * Join chat room.
     * @param chatRoomWrapper
     */
    public void joinChatRoom(ChatRoomWrapper chatRoomWrapper)
    {
        ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

        if(chatRoom == null)
        {
            new ErrorDialog(
               GuiActivator.getUIService().getMainFrame(),
               GuiActivator.getResources().getI18NString(""service.gui.WARNING""),
               GuiActivator.getResources().getI18NString(
                        ""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                        new String[]{chatRoomWrapper.getChatRoomName()}))
                    .showDialog();

            return;
        }

        new JoinChatRoomTask(chatRoomWrapper, null, null).execute();
    }",True
34,joinChatRoom(AdHocChatRoomWrapper),Method,joinChatRoom(AdHocChatRoom),,"net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoom() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() org.jdesktop.swingworker.SwingWorker+execute() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+JoinAdHocChatRoomTask(AdHocChatRoomWrapper) org.jdesktop.swingworker.SwingWorker+execute()",,774,24,1,"/** 
 * Joins the given ad-hoc chat room
 * @param chatRoomWrapper
 */
","/**
     * Joins the given ad-hoc chat room
     *
     * @param chatRoomWrapper
     */
    public void joinChatRoom(AdHocChatRoomWrapper chatRoomWrapper)
    {
        AdHocChatRoom chatRoom = chatRoomWrapper.getAdHocChatRoom();

        if(chatRoom == null)
        {
            new ErrorDialog(
               GuiActivator.getUIService().getMainFrame(),
               GuiActivator.getResources().getI18NString(""service.gui.WARNING""),
               GuiActivator.getResources().getI18NString(
                        ""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                        new String[]{chatRoomWrapper.getAdHocChatRoomName()}))
                    .showDialog();

            return;
        }

        new JoinAdHocChatRoomTask(chatRoomWrapper).execute();
    }",False
35,removeChatRoom(ChatRoomWrapper),Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomRightButtonMenu+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableUI+removeSelectedRoom(),"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+leaveChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+leaveChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+closeChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+closeChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+removeChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+removeChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeEvent+CHAT_ROOM_REMOVED,556,20,1,"/** 
 * Removes the given chat room from the UI.
 * @param chatRoomWrapper the chat room to remove.
 */
","/**
     * Removes the given chat room from the UI.
     *
     * @param chatRoomWrapper the chat room to remove.
     */
    public void removeChatRoom(ChatRoomWrapper chatRoomWrapper)
    {
        ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

        if (chatRoom != null)
            leaveChatRoom(chatRoomWrapper);

        this.closeChatRoom(chatRoomWrapper);

        chatRoomList.removeChatRoom(chatRoomWrapper);

        fireChatRoomListChangedEvent(
            chatRoomWrapper,
            ChatRoomListChangeEvent.CHAT_ROOM_REMOVED);
    }",False
36,joinChatRoom(ChatRoom),Method,"joinChatRoom(String,ChatRoomProviderWrapper)",net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+run(),"net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+ChatRoomWrapper(ChatRoomProviderWrapper,ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeEvent+CHAT_ROOM_ADDED,1160,37,1,"/** 
 * Joins the given chat room and manages all the exceptions that could occur during the join process.
 * @param chatRoom the chat room to join
 */
","/**
     * Joins the given chat room and manages all the exceptions that could
     * occur during the join process.
     *
     * @param chatRoom the chat room to join
     */
    public void joinChatRoom(ChatRoom chatRoom)
    {
        ChatRoomWrapper chatRoomWrapper
            = chatRoomList.findChatRoomWrapperFromChatRoom(chatRoom);

        if(chatRoomWrapper == null)
        {
            ChatRoomProviderWrapper parentProvider
                = chatRoomList
                    .findServerWrapperFromProvider(
                        chatRoom.getParentProvider());

            chatRoomWrapper = new ChatRoomWrapper(parentProvider, chatRoom);

            chatRoomList.addChatRoom(chatRoomWrapper);

            fireChatRoomListChangedEvent(
                chatRoomWrapper,
                ChatRoomListChangeEvent.CHAT_ROOM_ADDED);
        }

        this.joinChatRoom(chatRoomWrapper);

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();

        chatWindowManager
            .openChat(
                chatWindowManager.getMultiChat(chatRoomWrapper, true),
                true);
    }",True
37,joinChatRoom(AdHocChatRoom),Method,,,"net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findChatRoomWrapperFromAdHocChatRoom(AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findChatRoomWrapperFromAdHocChatRoom(AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.service.protocol.AdHocChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.AdHocChatRoom+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+AdHocChatRoomWrapper(AdHocChatRoomProviderWrapper,AdHocChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+addAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+addAdHocChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoomWrapper,boolean)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeEvent+AD_HOC_CHAT_ROOM_ADDED,1205,37,1,"/** 
 * Joins the given chat room and manages all the exceptions that could occur during the join process.
 * @param chatRoom the chat room to join
 */
","/**
     * Joins the given chat room and manages all the exceptions that could
     * occur during the join process.
     *
     * @param chatRoom the chat room to join
     */
    public void joinChatRoom(AdHocChatRoom chatRoom)
    {
        AdHocChatRoomWrapper chatRoomWrapper
            = adHocChatRoomList.findChatRoomWrapperFromAdHocChatRoom(chatRoom);

        if(chatRoomWrapper == null)
        {
            AdHocChatRoomProviderWrapper parentProvider
            = adHocChatRoomList.findServerWrapperFromProvider(
                chatRoom.getParentProvider());

            chatRoomWrapper =
                new AdHocChatRoomWrapper(parentProvider, chatRoom);

            adHocChatRoomList.addAdHocChatRoom(chatRoomWrapper);

            fireAdHocChatRoomListChangedEvent(
                chatRoomWrapper,
                AdHocChatRoomListChangeEvent.AD_HOC_CHAT_ROOM_ADDED);
        }

        this.joinChatRoom(chatRoomWrapper);

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();

        chatWindowManager
            .openChat(
                chatWindowManager.getMultiChat(chatRoomWrapper, true),
                true);
    }",False
38,"joinChatRoom(ChatRoom,String,byte[])",Method,acceptInvitation(ChatRoomInvitation),net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+run() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+run(),"net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findServerWrapperFromProvider(ProtocolProviderService) net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.ChatRoom+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+ChatRoomWrapper(ChatRoomProviderWrapper,ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+fireChatRoomListChangedEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[]) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[])",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeEvent+CHAT_ROOM_ADDED,1113,32,1,"/** 
 * Joins the given chat room and manages all the exceptions that could occur during the join process.
 * @param chatRoom the chat room to join
 * @param nickname the nickname we're using to join
 * @param password the password we're using to join
 */
","/**
     * Joins the given chat room and manages all the exceptions that could
     * occur during the join process.
     *
     * @param chatRoom the chat room to join
     * @param nickname the nickname we're using to join
     * @param password the password we're using to join
     */
    public void joinChatRoom(   ChatRoom chatRoom,
                                String nickname,
                                byte[] password)
    {
        ChatRoomWrapper chatRoomWrapper
            = chatRoomList.findChatRoomWrapperFromChatRoom(chatRoom);

        if(chatRoomWrapper == null)
        {
            ChatRoomProviderWrapper parentProvider
                = chatRoomList.findServerWrapperFromProvider(
                    chatRoom.getParentProvider());

            chatRoomWrapper = new ChatRoomWrapper(parentProvider, chatRoom);

            chatRoomList.addChatRoom(chatRoomWrapper);

            fireChatRoomListChangedEvent(
                chatRoomWrapper,
                ChatRoomListChangeEvent.CHAT_ROOM_ADDED);
        }

        this.joinChatRoom(chatRoomWrapper, nickname, password);
    }",True
39,"joinChatRoom(String,ChatRoomProviderWrapper)",Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.JoinChatRoomDialog+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.JoinChatRoomWindow+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.JoinChatRoomWizard+wizardFinished(WizardEvent),"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+FindRoomTask(String,ChatRoomProviderWrapper) org.jdesktop.swingworker.SwingWorker+execute() org.jdesktop.swingworker.SwingWorker+execute() org.jdesktop.swingworker.SwingWorker+get() org.jdesktop.swingworker.SwingWorker+get() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoom) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.AccountID+getService() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getService() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog()",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,1568,43,1,"/** 
 * Joins the room with the given name though the given chat room provider.
 * @param chatRoomName the name of the room to join.
 * @param chatRoomProvider the chat room provider to join through.
 */
","/**
     * Joins the room with the given name though the given chat room provider.
     *
     * @param chatRoomName the name of the room to join.
     * @param chatRoomProvider the chat room provider to join through.
     */
    public void joinChatRoom(   String chatRoomName,
                                ChatRoomProviderWrapper chatRoomProvider)
    {
        FindRoomTask findRoomTask = new FindRoomTask(   chatRoomName,
                                                        chatRoomProvider);

        findRoomTask.execute();

        ChatRoom chatRoom = null;
        try
        {
            chatRoom = findRoomTask.get();
        }
        catch (InterruptedException e)
        {
            if (logger.isTraceEnabled())
                logger.trace(""FindRoomTask has been interrupted."", e);
        }
        catch (ExecutionException e)
        {
            if (logger.isTraceEnabled())
                logger.trace(""Execution exception occurred in FindRoomTask."", e);
        }

        if (chatRoom != null)
            this.joinChatRoom(chatRoom);
        else
            new ErrorDialog(
                GuiActivator.getUIService().getMainFrame(),
                GuiActivator.getResources().getI18NString(""service.gui.ERROR""),
                GuiActivator.getResources().getI18NString(
                    ""service.gui.CHAT_ROOM_NOT_EXIST"",
                    new String[]{chatRoomName,
                    chatRoomProvider.getProtocolProvider()
                        .getAccountID().getService()}))
                    .showDialog();
    }",True
40,leaveChatRoom(ChatRoomWrapper),Method,removeChatRoom(ChatRoomWrapper),net.java.sip.communicator.impl.gui.main.chat.toolBars.MainToolBar+actionPerformed(ActionEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomRightButtonMenu+actionPerformed(ActionEvent),"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.service.protocol.ChatRoom+leave() net.java.sip.communicator.service.protocol.ChatRoom+leave() net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+findChatRoomWrapperFromChatRoom(ChatRoom) net.java.sip.communicator.util.ConfigurationUtils+updateChatRoomStatus(ProtocolProviderService,String,String) net.java.sip.communicator.util.ConfigurationUtils+updateChatRoomStatus(ProtocolProviderService,String,String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomID() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomID() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+closeChatRoom(ChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+closeChatRoom(ChatRoomWrapper)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList net.java.sip.communicator.service.protocol.globalstatus.GlobalStatusEnum+OFFLINE_STATUS,1456,43,1,"/** 
 * Leaves the given <tt>ChatRoom</tt>.
 * @param chatRoomWrapper the <tt>ChatRoom</tt> to leave.
 */
","/**
     * Leaves the given <tt>ChatRoom</tt>.
     *
     * @param chatRoomWrapper the <tt>ChatRoom</tt> to leave.
     */
    public void leaveChatRoom(ChatRoomWrapper chatRoomWrapper)
    {
        ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

        if (chatRoom == null)
        {
            ResourceManagementService resources = GuiActivator.getResources();

            new ErrorDialog(
                    GuiActivator.getUIService().getMainFrame(),
                    resources.getI18NString(""service.gui.WARNING""),
                    resources
                        .getI18NString(
                            ""service.gui.CHAT_ROOM_LEAVE_NOT_CONNECTED""))
                .showDialog();

            return;
        }

        if (chatRoom.isJoined())
            chatRoom.leave();

        ChatRoomWrapper existChatRoomWrapper
            = chatRoomList.findChatRoomWrapperFromChatRoom(chatRoom);

        if(existChatRoomWrapper == null)
            return;

        // We save the choice of the user, before the chat room is really
        // joined, because even the join fails we want the next time when
        // we login to join this chat room automatically.
        ConfigurationUtils.updateChatRoomStatus(
            chatRoomWrapper.getParentProvider().getProtocolProvider(),
            chatRoomWrapper.getChatRoomID(),
            GlobalStatusEnum.OFFLINE_STATUS);

        this.closeChatRoom(existChatRoomWrapper);
    }",False
41,leaveChatRoom(AdHocChatRoomWrapper),Method,,"net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+closeAllChats(ChatContainer,boolean)","net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoom() net.java.sip.communicator.service.protocol.AdHocChatRoom+leave() net.java.sip.communicator.service.protocol.AdHocChatRoom+leave() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog()",,712,23,1,"/** 
 * Leaves the given <tt>ChatRoom</tt>.
 * @param chatRoomWrapper the <tt>ChatRoom</tt> to leave.
 */
","/**
     * Leaves the given <tt>ChatRoom</tt>.
     *
     * @param chatRoomWrapper the <tt>ChatRoom</tt> to leave.
     */
    public void leaveChatRoom(AdHocChatRoomWrapper chatRoomWrapper)
    {
        AdHocChatRoom chatRoom = chatRoomWrapper.getAdHocChatRoom();

        if (chatRoom != null)
        {
            chatRoom.leave();
        }
        else
        {
            new ErrorDialog(
               GuiActivator.getUIService().getMainFrame(),
               GuiActivator.getResources().getI18NString(""service.gui.WARNING""),
               GuiActivator.getResources().getI18NString(
                   ""service.gui.CHAT_ROOM_LEAVE_NOT_CONNECTED""))
                   .showDialog();
        }
    }",False
42,getExistingChatRooms(ChatRoomProviderWrapper),Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableDialog+LoadProvidersWorker.construct() net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.JoinChatRoomWindow+loadProviderRooms() net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.SearchChatRoomPanel+loadChatRoomsList() net.java.sip.communicator.impl.gui.main.chatroomslist.joinforms.SearchChatRoomPanel+setChatRoomProvider(ChatRoomProviderWrapper),"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+FindAllRoomsTask(ChatRoomProviderWrapper) org.jdesktop.swingworker.SwingWorker+execute() org.jdesktop.swingworker.SwingWorker+execute() org.jdesktop.swingworker.SwingWorker+get() org.jdesktop.swingworker.SwingWorker+get() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,1020,32,1,"/** 
 * Returns existing chat rooms for the given <tt>chatRoomProvider</tt>.
 * @param chatRoomProvider the <tt>ChatRoomProviderWrapper</tt>, whichchat rooms we're looking for
 * @return  existing chat rooms for the given <tt>chatRoomProvider</tt>
 */
","/**
     * Returns existing chat rooms for the given <tt>chatRoomProvider</tt>.
     * @param chatRoomProvider the <tt>ChatRoomProviderWrapper</tt>, which
     * chat rooms we're looking for
     * @return  existing chat rooms for the given <tt>chatRoomProvider</tt>
     */
    public List<String> getExistingChatRooms(
        ChatRoomProviderWrapper chatRoomProvider)
    {
        FindAllRoomsTask findAllRoomsTask
            = new FindAllRoomsTask(chatRoomProvider);

        findAllRoomsTask.execute();

        List<String> chatRooms = null;
        try
        {
            chatRooms = findAllRoomsTask.get();
        }
        catch (InterruptedException e)
        {
            if (logger.isTraceEnabled())
                logger.trace(""FindAllRoomsTask has been interrupted."", e);
        }
        catch (ExecutionException e)
        {
            if (logger.isTraceEnabled())
                logger.trace(""Execution exception occurred in FindAllRoomsTask"", e);
        }

        return chatRooms;
    }",True
43,containsHistoryWindowForChatRoom(ChatRoomWrapper),Method,,,java.util.Hashtable+containsKey(Object) java.util.Hashtable+containsKey(Object),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomHistory,436,12,1,"/** 
 * Checks if there's an open history window for the given chat room.
 * @param chatRoomWrapper the chat room wrapper to check for
 * @return TRUE if there's an opened history window for the given chat room,FALSE otherwise.
 */
","/**
     * Checks if there's an open history window for the given chat room.
     *
     * @param chatRoomWrapper the chat room wrapper to check for
     * @return TRUE if there's an opened history window for the given chat room,
     *         FALSE otherwise.
     */
    public boolean containsHistoryWindowForChatRoom(
        ChatRoomWrapper chatRoomWrapper)
    {
        return chatRoomHistory.containsKey(chatRoomWrapper);
    }",False
44,getHistoryWindowForChatRoom(ChatRoomWrapper),Method,,,java.util.Hashtable+get(Object) java.util.Hashtable+get(Object),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomHistory,361,11,1,"/** 
 * Returns the history window for the given chat room.
 * @param chatRoomWrapper the chat room wrapper to search for
 * @return the history window for the given chat room
 */
","/**
     * Returns the history window for the given chat room.
     *
     * @param chatRoomWrapper the chat room wrapper to search for
     * @return the history window for the given chat room
     */
    public HistoryWindow getHistoryWindowForChatRoom(
        ChatRoomWrapper chatRoomWrapper)
    {
        return chatRoomHistory.get(chatRoomWrapper);
    }",False
45,"addHistoryWindowForChatRoom(ChatRoomWrapper,HistoryWindow)",Method,,,"java.util.Hashtable+put(K,V) java.util.Hashtable+put(K,V)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomHistory,416,12,1,"/** 
 * Adds a history window for a given chat room in the table of opened history windows.
 * @param chatRoomWrapper the chat room wrapper to add
 * @param historyWindow the history window to add
 */
","/**
     * Adds a history window for a given chat room in the table of opened
     * history windows.
     *
     * @param chatRoomWrapper the chat room wrapper to add
     * @param historyWindow the history window to add
     */
    public void addHistoryWindowForChatRoom(ChatRoomWrapper chatRoomWrapper,
        HistoryWindow historyWindow)
    {
        chatRoomHistory.put(chatRoomWrapper, historyWindow);
    }",False
46,removeHistoryWindowForChatRoom(ChatRoomWrapper),Method,,,java.util.Hashtable+remove(Object) java.util.Hashtable+remove(Object),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomHistory,299,9,1,"/** 
 * Removes the history window for the given chat room.
 * @param chatRoomWrapper the chat room wrapper to remove the history window
 */
","/**
     * Removes the history window for the given chat room.
     *
     * @param chatRoomWrapper the chat room wrapper to remove the history window
     */
    public void removeHistoryWindowForChatRoom(ChatRoomWrapper chatRoomWrapper)
    {
        chatRoomHistory.remove(chatRoomWrapper);
    }",False
47,addChatRoomListChangeListener(ChatRoomListChangeListener),Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListUI+ChatRoomListUI(ChatRoomListDialog) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableUI+initChatRoomList(),java.util.Vector+add(E) java.util.Vector+add(E),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+listChangeListeners net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+listChangeListeners,378,13,1,"/** 
 * Adds the given <tt>ChatRoomListChangeListener</tt> that will listen for all changes of the chat room list data model.
 * @param l the listener to add.
 */
","/**
     * Adds the given <tt>ChatRoomListChangeListener</tt> that will listen for
     * all changes of the chat room list data model.
     *
     * @param l the listener to add.
     */
    public void addChatRoomListChangeListener(ChatRoomListChangeListener l)
    {
        synchronized (listChangeListeners)
        {
            listChangeListeners.add(l);
        }
    }",True
48,removeChatRoomListChangeListener(ChatRoomListChangeListener),Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomTableUI+dispose(),java.util.Vector+remove(Object) java.util.Vector+remove(Object),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+listChangeListeners net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+listChangeListeners,317,12,1,"/** 
 * Removes the given <tt>ChatRoomListChangeListener</tt>.
 * @param l the listener to remove.
 */
","/**
     * Removes the given <tt>ChatRoomListChangeListener</tt>.
     *
     * @param l the listener to remove.
     */
    public void removeChatRoomListChangeListener(ChatRoomListChangeListener l)
    {
        synchronized (listChangeListeners)
        {
            listChangeListeners.remove(l);
        }
    }",True
49,addAdHocChatRoomListChangeListener(AdHocChatRoomListChangeListener),Method,,net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListUI+ChatRoomListUI(ChatRoomListDialog),java.util.Vector+add(E) java.util.Vector+add(E),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHoclistChangeListeners net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHoclistChangeListeners,416,14,1,"/** 
 * Adds the given <tt>AdHocChatRoomListChangeListener</tt> that will listen for all changes of the chat room list data model.
 * @param l the listener to add.
 */
","/**
     * Adds the given <tt>AdHocChatRoomListChangeListener</tt> that will listen
     * for all changes of the chat room list data model.
     *
     * @param l the listener to add.
     */
    public void addAdHocChatRoomListChangeListener(
            AdHocChatRoomListChangeListener l)
    {
        synchronized (adHoclistChangeListeners)
        {
            adHoclistChangeListeners.add(l);
        }
    }",False
50,removeAdHocChatRoomListChangeListener(AdHocChatRoomListChangeListener),Method,,,java.util.Vector+remove(Object) java.util.Vector+remove(Object),net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHoclistChangeListeners net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHoclistChangeListeners,351,13,1,"/** 
 * Removes the given <tt>AdHocChatRoomListChangeListener</tt>.
 * @param l the listener to remove.
 */
","/**
     * Removes the given <tt>AdHocChatRoomListChangeListener</tt>.
     *
     * @param l the listener to remove.
     */
    public void removeAdHocChatRoomListChangeListener(
        AdHocChatRoomListChangeListener l)
    {
        synchronized (adHoclistChangeListeners)
        {
            adHoclistChangeListeners.remove(l);
        }
    }",False
51,"fireChatRoomListChangedEvent(ChatRoomWrapper,int)",Method,"createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean) removeChatRoom(ChatRoomWrapper) joinChatRoom(ChatRoom) joinChatRoom(ChatRoom,String,byte[])",,"net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeEvent+ChatRoomListChangeEvent(ChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeListener+contentChanged(ChatRoomListChangeEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomListChangeListener+contentChanged(ChatRoomListChangeEvent)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+listChangeListeners,634,18,2,"/** 
 * Notifies all interested listeners that a change in the chat room list model has occurred.
 * @param chatRoomWrapper the chat room wrapper that identifies the chatroom
 * @param eventID the identifier of the event
 */
","/**
     * Notifies all interested listeners that a change in the chat room list
     * model has occurred.
     * @param chatRoomWrapper the chat room wrapper that identifies the chat
     * room
     * @param eventID the identifier of the event
     */
    private void fireChatRoomListChangedEvent(  ChatRoomWrapper chatRoomWrapper,
                                                int eventID)
    {
        ChatRoomListChangeEvent evt
            = new ChatRoomListChangeEvent(chatRoomWrapper, eventID);

        for (ChatRoomListChangeListener l : listChangeListeners)
        {
            l.contentChanged(evt);
        }
    }",True
52,"fireAdHocChatRoomListChangedEvent(AdHocChatRoomWrapper,int)",Method,"localUserAdHocPresenceChanged(LocalUserAdHocChatRoomPresenceChangeEvent) localUserAdHocPresenceChanged(LocalUserAdHocChatRoomPresenceChangeEvent) createAdHocChatRoom(ProtocolProviderService,Collection<String>,String) joinChatRoom(AdHocChatRoom)",,"net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeEvent+AdHocChatRoomListChangeEvent(AdHocChatRoomWrapper,int) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeListener+contentChanged(AdHocChatRoomListChangeEvent) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomListChangeListener+contentChanged(AdHocChatRoomListChangeEvent)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHoclistChangeListeners,719,19,2,"/** 
 * Notifies all interested listeners that a change in the chat room list model has occurred.
 * @param adHocChatRoomWrapper the chat room wrapper that identifies thechat room
 * @param eventID the identifier of the event
 */
","/**
     * Notifies all interested listeners that a change in the chat room list
     * model has occurred.
     * @param adHocChatRoomWrapper the chat room wrapper that identifies the
     * chat room
     * @param eventID the identifier of the event
     */
    private void fireAdHocChatRoomListChangedEvent(
                                    AdHocChatRoomWrapper adHocChatRoomWrapper,
                                    int                  eventID)
    {
        AdHocChatRoomListChangeEvent evt
            = new AdHocChatRoomListChangeEvent(adHocChatRoomWrapper, eventID);

        for (AdHocChatRoomListChangeListener l : adHoclistChangeListeners)
        {
            l.contentChanged(evt);
        }
    }",False
53,closeChatRoom(ChatRoomWrapper),Method,removeChatRoom(ChatRoomWrapper) leaveChatRoom(ChatRoomWrapper),"net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+removeChatProvider(ChatRoomProviderWrapper,boolean)","net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+closeChat(ChatPanel) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+closeChat(ChatPanel)",,573,17,1,"/** 
 * Closes the chat corresponding to the given chat room wrapper, if such exists.
 * @param chatRoomWrapper the chat room wrapper for which we search a chatto close.
 */
","/**
     * Closes the chat corresponding to the given chat room wrapper, if such
     * exists.
     *
     * @param chatRoomWrapper the chat room wrapper for which we search a chat
     * to close.
     */
    public void closeChatRoom(ChatRoomWrapper chatRoomWrapper)
    {
        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();
        ChatPanel chatPanel
            = chatWindowManager.getMultiChat(chatRoomWrapper, false);

        if (chatPanel != null)
            chatWindowManager.closeChat(chatPanel);
    }",False
54,closeAdHocChatRoom(AdHocChatRoomWrapper),Method,localUserAdHocPresenceChanged(LocalUserAdHocChatRoomPresenceChangeEvent),,"net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+closeChat(ChatPanel) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+closeChat(ChatPanel)",,598,17,2,"/** 
 * Closes the chat corresponding to the given ad-hoc chat room wrapper, if such exists.
 * @param chatRoomWrapper the ad-hoc chat room wrapper for which we search achat to close.
 */
","/**
     * Closes the chat corresponding to the given ad-hoc chat room wrapper, if
     * such exists.
     *
     * @param chatRoomWrapper the ad-hoc chat room wrapper for which we search a
     * chat to close.
     */
    private void closeAdHocChatRoom(AdHocChatRoomWrapper chatRoomWrapper)
    {
        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();
        ChatPanel chatPanel
            = chatWindowManager.getMultiChat(chatRoomWrapper, false);

        if (chatPanel != null)
            chatWindowManager.closeChat(chatPanel);
    }",False
55,serviceChanged(ServiceEvent),Method,,,org.osgi.framework.Bundle+getState() org.osgi.framework.ServiceReference+getBundle() org.osgi.framework.ServiceEvent+getServiceReference() org.osgi.framework.ServiceEvent+getServiceReference() org.osgi.framework.ServiceReference+getBundle() org.osgi.framework.Bundle+getState() org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.ServiceEvent+getServiceReference() org.osgi.framework.ServiceEvent+getServiceReference() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+addChatProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+addChatProvider(ProtocolProviderService) org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+removeChatProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.AdHocChatRoomList+removeChatProvider(ProtocolProviderService) org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+addChatProvider(ProtocolProviderService) org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+removeChatProvider(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chatroomslist.ChatRoomList+removeChatProvider(ProtocolProviderService),org.osgi.framework.Bundle+STOPPING net.java.sip.communicator.impl.gui.GuiActivator+bundleContext org.osgi.framework.ServiceEvent+REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList org.osgi.framework.ServiceEvent+UNREGISTERING net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+adHocChatRoomList org.osgi.framework.ServiceEvent+REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList org.osgi.framework.ServiceEvent+UNREGISTERING net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+chatRoomList,1994,56,1,"/** 
 * Handles <tt>ServiceEvent</tt>s triggered by adding or removing a ProtocolProviderService. Updates the list of available chat rooms and chat room servers.
 * @param event The event to handle.
 */
","/**
     * Handles <tt>ServiceEvent</tt>s triggered by adding or removing a
     * ProtocolProviderService. Updates the list of available chat rooms and
     * chat room servers.
     *
     * @param event The event to handle.
     */
    public void serviceChanged(ServiceEvent event)
    {
        // if the event is caused by a bundle being stopped, we don't want to
        // know
        if (event.getServiceReference().getBundle().getState()
                == Bundle.STOPPING)
            return;

        Object service = GuiActivator.bundleContext.getService(event
            .getServiceReference());

        // we don't care if the source service is not a protocol provider
        if (!(service instanceof ProtocolProviderService))
            return;

        ProtocolProviderService protocolProvider
            = (ProtocolProviderService) service;

        Object multiUserChatOpSet
            = protocolProvider
                .getOperationSet(OperationSetMultiUserChat.class);

        Object multiUserChatAdHocOpSet
            = protocolProvider
            .getOperationSet(OperationSetAdHocMultiUserChat.class);

        if (multiUserChatOpSet == null && multiUserChatAdHocOpSet != null)
        {
             if (event.getType() == ServiceEvent.REGISTERED)
             {
                 adHocChatRoomList.addChatProvider(protocolProvider);
             }
             else if (event.getType() == ServiceEvent.UNREGISTERING)
             {
                 adHocChatRoomList.removeChatProvider(protocolProvider);
             }
        }
        else if (multiUserChatAdHocOpSet == null && multiUserChatOpSet != null)
        {
             if (event.getType() == ServiceEvent.REGISTERED)
             {
                 chatRoomList.addChatProvider(protocolProvider);
             }
             else if (event.getType() == ServiceEvent.UNREGISTERING)
             {
                 chatRoomList.removeChatProvider(protocolProvider);
             }
        }
    }",False
56,JoinChatRoomTask,MemberClass,,,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[],boolean,boolean,String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+loadPassword() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+loadPassword() java.lang.String+getBytes() java.lang.String+getBytes() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[]) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+JoinChatRoomTask(ChatRoomWrapper,String,byte[],String) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.service.protocol.ChatRoom+joinAs(String,byte[]) net.java.sip.communicator.service.protocol.ChatRoom+joinAs(String,byte[]) net.java.sip.communicator.service.protocol.ChatRoom+joinAs(String) net.java.sip.communicator.service.protocol.ChatRoom+joinAs(String) net.java.sip.communicator.service.protocol.ChatRoom+join() net.java.sip.communicator.service.protocol.ChatRoom+join() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.service.protocol.ChatRoom+getName() net.java.sip.communicator.service.protocol.ChatRoom+getName() net.java.sip.communicator.service.protocol.OperationFailedException+getErrorCode() net.java.sip.communicator.service.protocol.OperationFailedException+getErrorCode() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+done() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+done() org.jdesktop.swingworker.SwingWorker+get() org.jdesktop.swingworker.SwingWorker+get() net.java.sip.communicator.util.ConfigurationUtils+updateChatRoomStatus(ProtocolProviderService,String,String) net.java.sip.communicator.util.ConfigurationUtils+updateChatRoomStatus(ProtocolProviderService,String,String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomID() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomID() java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+removePassword() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+removePassword() net.java.sip.communicator.util.ServiceUtils+getService(BundleContext,Class<T>) net.java.sip.communicator.util.ServiceUtils+getService(BundleContext,Class<T>) net.java.sip.communicator.service.gui.AuthenticationWindowService+create(String,char[],String,boolean,boolean,Object,String,String,String,String,String,String) net.java.sip.communicator.service.gui.AuthenticationWindowService+create(String,char[],String,boolean,boolean,Object,String,String,String,String,String,String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+isPersistent() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+isPersistent() net.java.sip.communicator.impl.gui.utils.ImageLoader+getAuthenticationWindowIcon(ProtocolProviderService) net.java.sip.communicator.impl.gui.utils.ImageLoader+getAuthenticationWindowIcon(ProtocolProviderService) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getName() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+setVisible(boolean) net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+setVisible(boolean) net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+isCanceled() net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+isCanceled() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getConferenceChatManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getConferenceChatManager() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],boolean,boolean,String) java.lang.String+getBytes() java.lang.String+String(char[]) net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+getPassword() net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+getPassword() java.lang.String+getBytes() net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+isRememberPassword() net.java.sip.communicator.service.gui.AuthenticationWindowService.AuthenticationWindow+isRememberPassword() java.lang.String+equals(Object) java.lang.String+equals(Object) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() java.lang.String+equals(Object) java.lang.String+equals(Object) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() java.lang.String+equals(Object) java.lang.String+equals(Object) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+savePassword(String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+savePassword(String) java.lang.String+String(byte[]) net.java.sip.communicator.service.protocol.ChatRoom+setSubject(String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.service.protocol.ChatRoom+setSubject(String) net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+AUTHENTICATION_FAILED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+REGISTRATION_REQUIRED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+PROVIDER_NOT_REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+UNKNOWN_ERROR net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+nickName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+rememberPassword net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+isFirstAttempt net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+subject net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+nickName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+isFirstAttempt net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+subject net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+rememberPassword net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+nickName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+nickName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+nickName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.service.protocol.OperationFailedException+AUTHENTICATION_FAILED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+AUTHENTICATION_FAILED net.java.sip.communicator.service.protocol.OperationFailedException+REGISTRATION_REQUIRED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+REGISTRATION_REQUIRED net.java.sip.communicator.service.protocol.OperationFailedException+PROVIDER_NOT_REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+PROVIDER_NOT_REGISTERED net.java.sip.communicator.service.protocol.OperationFailedException+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+UNKNOWN_ERROR net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.service.protocol.globalstatus.GlobalStatusEnum+ONLINE_STATUS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+AUTHENTICATION_FAILED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.GuiActivator+bundleContext net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+isFirstAttempt net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+nickName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+subject net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+REGISTRATION_REQUIRED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+PROVIDER_NOT_REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+AUTHENTICATION_FAILED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+rememberPassword net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+password net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+subject net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+chatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinChatRoomTask+subject net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,9245,253,10,"/** 
 * Joins a chat room in an asynchronous way.
 */
","/**
     * Joins a chat room in an asynchronous way.
     */
    private static class JoinChatRoomTask
        extends SwingWorker<String, Object>
    {
        private static final String SUCCESS = ""Success"";

        private static final String AUTHENTICATION_FAILED
            = ""AuthenticationFailed"";

        private static final String REGISTRATION_REQUIRED
            = ""RegistrationRequired"";

        private static final String PROVIDER_NOT_REGISTERED
            = ""ProviderNotRegistered"";

        private static final String SUBSCRIPTION_ALREADY_EXISTS
            = ""SubscriptionAlreadyExists"";

        private static final String UNKNOWN_ERROR
            = ""UnknownError"";

        private final ChatRoomWrapper chatRoomWrapper;

        private final String nickName;

        private final byte[] password;
        
        private final boolean rememberPassword;

        private final boolean isFirstAttempt;
        
        private final String subject;

        JoinChatRoomTask(   ChatRoomWrapper chatRoomWrapper,
                            String nickName,
                            byte[] password,
                            boolean rememberPassword,
                            boolean isFirstAttempt,
                            String subject)
        {
            this.chatRoomWrapper = chatRoomWrapper;
            this.nickName = nickName;
            this.isFirstAttempt = isFirstAttempt;
            this.subject = subject;

            if(password == null)
            {
                String passString = chatRoomWrapper.loadPassword();
                if(passString != null)
                {
                    this.password = passString.getBytes();
                }
                else
                {
                    this.password = null;
                }
            }
            else
            {
                this.password = password;
            }
            this.rememberPassword = rememberPassword;
        }
        
        JoinChatRoomTask(   ChatRoomWrapper chatRoomWrapper,
            String nickName,
            byte[] password)
        {
            this(chatRoomWrapper, nickName, password, false, true, null);
        }
        
        JoinChatRoomTask(   ChatRoomWrapper chatRoomWrapper,
            String nickName,
            byte[] password,
            String subject)
        {
            this(chatRoomWrapper, nickName, password, false, true, subject);
        }

        /**
         * @override {@link SwingWorker}{@link #doInBackground()} to perform
         * all asynchronous tasks.
         * @return SUCCESS if success, otherwise the error code
         */
        @Override
        public String doInBackground()
        {
            ChatRoom chatRoom = chatRoomWrapper.getChatRoom();

            try
            {
                if(password != null && password.length > 0)
                    chatRoom.joinAs(nickName, password);
                else if (nickName != null)
                    chatRoom.joinAs(nickName);
                else
                    chatRoom.join();

                return SUCCESS;
            }
            catch (OperationFailedException e)
            {
                if (logger.isTraceEnabled())
                    logger.trace(""Failed to join chat room: ""
                    + chatRoom.getName(), e);

                switch (e.getErrorCode())
                {
                case OperationFailedException.AUTHENTICATION_FAILED:
                    return AUTHENTICATION_FAILED;
                case OperationFailedException.REGISTRATION_REQUIRED:
                    return REGISTRATION_REQUIRED;
                case OperationFailedException.PROVIDER_NOT_REGISTERED:
                    return PROVIDER_NOT_REGISTERED;
                case OperationFailedException.SUBSCRIPTION_ALREADY_EXISTS:
                    return SUBSCRIPTION_ALREADY_EXISTS;
                default:
                    return UNKNOWN_ERROR;
                }
            }
        }

        /**
         * @override {@link SwingWorker}{@link #done()} to perform UI changes
         * after the chat room join task has finished.
         */
        @Override
        protected void done()
        {
            String returnCode = null;
            try
            {
                returnCode = get();
            }
            catch (InterruptedException ignore)
            {}
            catch (ExecutionException ignore)
            {}

            ConfigurationUtils.updateChatRoomStatus(
                chatRoomWrapper.getParentProvider().getProtocolProvider(),
                chatRoomWrapper.getChatRoomID(),
                GlobalStatusEnum.ONLINE_STATUS);

            String errorMessage = null;
            if(AUTHENTICATION_FAILED.equals(returnCode))
            {
                chatRoomWrapper.removePassword();

                AuthenticationWindowService authWindowsService
                    = ServiceUtils.getService(
                        GuiActivator.bundleContext,
                        AuthenticationWindowService.class);

                AuthenticationWindowService.AuthenticationWindow authWindow =
                    authWindowsService.create(
                        null, null, null, false,
                        chatRoomWrapper.isPersistent(),
                        ImageLoader.getAuthenticationWindowIcon(
                            chatRoomWrapper.getParentProvider()
                                .getProtocolProvider()),
                        GuiActivator.getResources().getI18NString(
                            ""service.gui.AUTHENTICATION_WINDOW_TITLE"",
                            new String[]{chatRoomWrapper.getParentProvider()
                                            .getName()}),
                        GuiActivator.getResources().getI18NString(
                                ""service.gui.CHAT_ROOM_REQUIRES_PASSWORD"",
                                new String[]{
                                        chatRoomWrapper.getChatRoomName()}),
                        """", null,
                        isFirstAttempt ?
                            null :
                            GuiActivator.getResources().getI18NString(
                                ""service.gui.AUTHENTICATION_FAILED"",
                                new String[]{chatRoomWrapper.getChatRoomName()}),
                        null);

                authWindow.setVisible(true);

                if (!authWindow.isCanceled())
                {
                    GuiActivator.getUIService().getConferenceChatManager()
                        .joinChatRoom(
                            chatRoomWrapper,
                            nickName,
                            new String(authWindow.getPassword()).getBytes(),
                            authWindow.isRememberPassword(),
                            false,
                            subject);
                }
            }
            else if(REGISTRATION_REQUIRED.equals(returnCode))
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(
                            ""service.gui.CHAT_ROOM_REGISTRATION_REQUIRED"",
                            new String[]{chatRoomWrapper.getChatRoomName()});
            }
            else if(PROVIDER_NOT_REGISTERED.equals(returnCode))
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                        new String[]{chatRoomWrapper.getChatRoomName()});
            }
            else if(SUBSCRIPTION_ALREADY_EXISTS.equals(returnCode))
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(""service.gui.CHAT_ROOM_ALREADY_JOINED"",
                            new String[]{chatRoomWrapper.getChatRoomName()});
            }
            else
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(""service.gui.FAILED_TO_JOIN_CHAT_ROOM"",
                            new String[]{chatRoomWrapper.getChatRoomName()});
            }

            if (!SUCCESS.equals(returnCode) && 
                !AUTHENTICATION_FAILED.equals(returnCode))
            {
                new ErrorDialog(
                    GuiActivator.getUIService().getMainFrame(),
                    GuiActivator.getResources().getI18NString(
                            ""service.gui.ERROR""), errorMessage).showDialog();
            }

            if (SUCCESS.equals(returnCode))
            {
                if(rememberPassword)
                {
                    chatRoomWrapper.savePassword(new String(password));
                }
                
                if(subject != null)
                {
                    try
                    {
                        chatRoomWrapper.getChatRoom().setSubject(subject);
                    }
                    catch(OperationFailedException ex)
                    {
                        logger.warn(""Failed to set subject."");
                    }
                }
            }
        }
    }",True
57,JoinAdHocChatRoomTask,MemberClass,,,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+JoinAdHocChatRoomTask(AdHocChatRoomWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoom() net.java.sip.communicator.service.protocol.AdHocChatRoom+join() net.java.sip.communicator.service.protocol.AdHocChatRoom+join() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.service.protocol.AdHocChatRoom+getName() net.java.sip.communicator.service.protocol.AdHocChatRoom+getName() net.java.sip.communicator.service.protocol.OperationFailedException+getErrorCode() net.java.sip.communicator.service.protocol.OperationFailedException+getErrorCode() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+done() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+done() org.jdesktop.swingworker.SwingWorker+get() org.jdesktop.swingworker.SwingWorker+get() net.java.sip.communicator.util.ConfigurationUtils+updateChatRoomStatus(ProtocolProviderService,String,String) net.java.sip.communicator.util.ConfigurationUtils+updateChatRoomStatus(ProtocolProviderService,String,String) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomID() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomID() java.lang.String+equals(Object) java.lang.String+equals(Object) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() java.lang.String+equals(Object) java.lang.String+equals(Object) org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.AdHocChatRoomWrapper+getAdHocChatRoomName() java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) java.lang.String+equals(Object) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog() net.java.sip.communicator.plugin.desktoputil.ErrorDialog+ErrorDialog(Frame,String,String) net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getMainFrame() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.plugin.desktoputil.ErrorDialog+showDialog()",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+AUTHENTICATION_FAILED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+REGISTRATION_REQUIRED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+PROVIDER_NOT_REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+UNKNOWN_ERROR net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.service.protocol.OperationFailedException+AUTHENTICATION_FAILED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+AUTHENTICATION_FAILED net.java.sip.communicator.service.protocol.OperationFailedException+REGISTRATION_REQUIRED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+REGISTRATION_REQUIRED net.java.sip.communicator.service.protocol.OperationFailedException+PROVIDER_NOT_REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+PROVIDER_NOT_REGISTERED net.java.sip.communicator.service.protocol.OperationFailedException+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+UNKNOWN_ERROR net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.service.protocol.globalstatus.GlobalStatusEnum+ONLINE_STATUS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+PROVIDER_NOT_REGISTERED net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+SUBSCRIPTION_ALREADY_EXISTS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+adHocChatRoomWrapper net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+SUCCESS net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.JoinAdHocChatRoomTask+AUTHENTICATION_FAILED,4446,126,10,"/** 
 * Joins an ad-hoc chat room in an asynchronous way.
 */
","/**
     * Joins an ad-hoc chat room in an asynchronous way.
     */
    private static class JoinAdHocChatRoomTask
        extends SwingWorker<String, Object>
    {
        private static final String SUCCESS = ""Success"";

        private static final String AUTHENTICATION_FAILED
            = ""AuthenticationFailed"";

        private static final String REGISTRATION_REQUIRED
            = ""RegistrationRequired"";

        private static final String PROVIDER_NOT_REGISTERED
            = ""ProviderNotRegistered"";

        private static final String SUBSCRIPTION_ALREADY_EXISTS
            = ""SubscriptionAlreadyExists"";

        private static final String UNKNOWN_ERROR
            = ""UnknownError"";

        private final AdHocChatRoomWrapper adHocChatRoomWrapper;

        JoinAdHocChatRoomTask(AdHocChatRoomWrapper chatRoomWrapper)
        {
            this.adHocChatRoomWrapper = chatRoomWrapper;
        }

        /**
         * @override {@link SwingWorker}{@link #doInBackground()} to perform
         * all asynchronous tasks.
         * @return SUCCESS if success, otherwise the error code
         */
        @Override
        public String doInBackground()
        {
            AdHocChatRoom chatRoom = adHocChatRoomWrapper.getAdHocChatRoom();

            try
            {
                chatRoom.join();

                return SUCCESS;
            }
            catch (OperationFailedException e)
            {
                if (logger.isTraceEnabled())
                    logger.trace(""Failed to join ad-hoc chat room: ""
                    + chatRoom.getName(), e);

                switch (e.getErrorCode())
                {
                case OperationFailedException.AUTHENTICATION_FAILED:
                    return AUTHENTICATION_FAILED;
                case OperationFailedException.REGISTRATION_REQUIRED:
                    return REGISTRATION_REQUIRED;
                case OperationFailedException.PROVIDER_NOT_REGISTERED:
                    return PROVIDER_NOT_REGISTERED;
                case OperationFailedException.SUBSCRIPTION_ALREADY_EXISTS:
                    return SUBSCRIPTION_ALREADY_EXISTS;
                default:
                    return UNKNOWN_ERROR;
                }
            }
        }

        /**
         * @override {@link SwingWorker}{@link #done()} to perform UI changes
         * after the ad-hoc chat room join task has finished.
         */
        @Override
        protected void done()
        {
            String returnCode = null;
            try
            {
                returnCode = get();
            }
            catch (InterruptedException ignore)
            {}
            catch (ExecutionException ignore)
            {}

            ConfigurationUtils.updateChatRoomStatus(
                adHocChatRoomWrapper.getParentProvider().getProtocolProvider(),
                adHocChatRoomWrapper.getAdHocChatRoomID(),
                GlobalStatusEnum.ONLINE_STATUS);

            String errorMessage = null;
            if(PROVIDER_NOT_REGISTERED.equals(returnCode))
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(""service.gui.CHAT_ROOM_NOT_CONNECTED"",
                        new String[]{
                            adHocChatRoomWrapper.getAdHocChatRoomName()});
            }
            else if(SUBSCRIPTION_ALREADY_EXISTS.equals(returnCode))
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(""service.gui.CHAT_ROOM_ALREADY_JOINED"",
                            new String[]{
                            adHocChatRoomWrapper.getAdHocChatRoomName()});
            }
            else
            {
                errorMessage
                    = GuiActivator.getResources()
                        .getI18NString(""service.gui.FAILED_TO_JOIN_CHAT_ROOM"",
                            new String[]{
                            adHocChatRoomWrapper.getAdHocChatRoomName()});
            }

            if (!SUCCESS.equals(returnCode)
                    && !AUTHENTICATION_FAILED.equals(returnCode))
            {
                new ErrorDialog(
                    GuiActivator.getUIService().getMainFrame(),
                    GuiActivator.getResources().getI18NString(
                            ""service.gui.ERROR""), errorMessage).showDialog();
            }
        }
    }",False
58,FindRoomTask,MemberClass,,,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+FindRoomTask(String,ChatRoomProviderWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+doInBackground() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+findRoom(String) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+findRoom(String) net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomProvider net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomProvider net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomProvider net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomName net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindRoomTask+chatRoomName,1357,45,10,"/** 
 * Finds a chat room in asynchronous way.
 */
","/**
     * Finds a chat room in asynchronous way.
     */
    private static class FindRoomTask
        extends SwingWorker<ChatRoom, Object>
    {
        private final String chatRoomName;

        private final ChatRoomProviderWrapper chatRoomProvider;

        FindRoomTask(   String chatRoomName,
                        ChatRoomProviderWrapper chatRoomProvider)
        {
            this.chatRoomName = chatRoomName;
            this.chatRoomProvider = chatRoomProvider;
        }

        /**
         * @override {@link SwingWorker}{@link #doInBackground()} to perform
         * all asynchronous tasks.
         * @return the chat room
         */
        @Override
        public ChatRoom doInBackground()
        {
            OperationSetMultiUserChat groupChatOpSet
                = chatRoomProvider
                      .getProtocolProvider().getOperationSet(
                        OperationSetMultiUserChat.class);

            ChatRoom chatRoom = null;
            try
            {
                chatRoom = groupChatOpSet.findRoom(chatRoomName);
            }
            catch (Exception e)
            {
                if (logger.isTraceEnabled())
                    logger.trace(""Un exception occurred while searching for room:""
                    + chatRoomName, e);
            }

            return chatRoom;
        }
    }",False
59,FindAllRoomsTask,MemberClass,,,"net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+FindAllRoomsTask(ChatRoomProviderWrapper) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+doInBackground() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<T>) net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+getExistingChatRooms() net.java.sip.communicator.service.protocol.OperationSetMultiUserChat+getExistingChatRooms() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.service.protocol.AccountID+getService() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getService() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+isTraceEnabled() net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.util.Logger+trace(Object,Throwable) net.java.sip.communicator.service.protocol.AccountID+getService() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getService()",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+chatRoomProvider net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+chatRoomProvider net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager.FindAllRoomsTask+chatRoomProvider net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,1664,51,10,,"private static class FindAllRoomsTask
        extends SwingWorker<List<String>, Object>
    {
        private final ChatRoomProviderWrapper chatRoomProvider;

        FindAllRoomsTask(ChatRoomProviderWrapper provider)
        {
            this.chatRoomProvider = provider;
        }

        /**
         * @override {@link SwingWorker}{@link #doInBackground()} to perform
         * all asynchronous tasks.
         * @return a list of existing chat rooms
         */
        @Override
        public List<String> doInBackground()
        {
            ProtocolProviderService protocolProvider
                = chatRoomProvider.getProtocolProvider();

            if (protocolProvider == null)
                return null;

            OperationSetMultiUserChat groupChatOpSet
                = protocolProvider
                    .getOperationSet(OperationSetMultiUserChat.class);

            if (groupChatOpSet == null)
                return null;

            try
            {
                return groupChatOpSet.getExistingChatRooms();
            }
            catch (OperationFailedException e)
            {
                if (logger.isTraceEnabled())
                    logger.trace(""Failed to obtain existing chat rooms for server: ""
                    + protocolProvider.getAccountID().getService(), e);
            }
            catch (OperationNotSupportedException e)
            {
                if (logger.isTraceEnabled())
                    logger.trace(""Failed to obtain existing chat rooms for server: ""
                    + protocolProvider.getAccountID().getService(), e);
            }

            return null;
        }
    }",False
60,invitationReceived(AdHocChatRoomInvitationReceivedEvent),Method,,,"net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.util.Logger+info(Object) java.util.EventObject+toString() java.util.EventObject+toString() net.java.sip.communicator.service.protocol.event.AdHocChatRoomInvitationReceivedEvent+getSourceOperationSet() net.java.sip.communicator.service.protocol.event.AdHocChatRoomInvitationReceivedEvent+getSourceOperationSet() net.java.sip.communicator.impl.gui.main.chat.conference.InvitationReceivedDialog+InvitationReceivedDialog(ConferenceChatManager,OperationSetAdHocMultiUserChat,AdHocChatRoomInvitation) net.java.sip.communicator.service.protocol.event.AdHocChatRoomInvitationReceivedEvent+getInvitation() net.java.sip.communicator.service.protocol.event.AdHocChatRoomInvitationReceivedEvent+getInvitation() net.java.sip.communicator.plugin.desktoputil.SIPCommDialog+setVisible(boolean) net.java.sip.communicator.plugin.desktoputil.SIPCommDialog+setVisible(boolean)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,678,18,1,"/** 
 * Indicates that an invitation has been received and opens the invitation dialog to notify the user.
 * @param evt the <tt>AdHocChatRoomInvitationReceivedEvent</tt> thatnotified us
 */
","/**
     * Indicates that an invitation has been received and opens the invitation
     * dialog to notify the user.
     * @param evt the <tt>AdHocChatRoomInvitationReceivedEvent</tt> that
     * notified us
     */
    public void invitationReceived(AdHocChatRoomInvitationReceivedEvent evt)
    {
        if (logger.isInfoEnabled())
            logger.info(""Invitation received: ""+evt.toString());
        OperationSetAdHocMultiUserChat multiUserChatOpSet
            = evt.getSourceOperationSet();

        InvitationReceivedDialog dialog = new InvitationReceivedDialog(
                this, multiUserChatOpSet, evt.getInvitation());

        dialog.setVisible(true);
    }",False
61,messageDelivered(AdHocChatRoomMessageDeliveredEvent),Method,,,"java.util.EventObject+getSource() java.util.EventObject+getSource() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.service.protocol.AdHocChatRoom+getName() net.java.sip.communicator.service.protocol.AdHocChatRoom+getName() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoom,boolean) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoom,boolean) net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+getEventType() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+getEventType() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+getMessage() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+getMessage() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.service.protocol.AccountID+getUserID() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AdHocChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.AdHocChatRoom+getParentProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getAccountID() net.java.sip.communicator.service.protocol.AccountID+getUserID() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+getTimestamp() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.util.Logger+error(Object) net.java.sip.communicator.util.Logger+error(Object)",net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+CONVERSATION_MESSAGE_DELIVERED net.java.sip.communicator.service.gui.Chat+OUTGOING_MESSAGE net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveredEvent+ACTION_MESSAGE_DELIVERED net.java.sip.communicator.service.gui.Chat+ACTION_MESSAGE net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,1891,58,1,"/** 
 * Implements the <tt>AdHocChatRoomMessageListener.messageDelivered</tt> method. <br> Shows the message in the conversation area and clears the write message area.
 * @param evt the <tt>AdHocChatRoomMessageDeliveredEvent</tt> that notifiedus
 */
","/**
     * Implements the <tt>AdHocChatRoomMessageListener.messageDelivered</tt>
     * method.
     * <br>
     * Shows the message in the conversation area and clears the write message
     * area.
     * @param evt the <tt>AdHocChatRoomMessageDeliveredEvent</tt> that notified
     * us
     */
    public void messageDelivered(AdHocChatRoomMessageDeliveredEvent evt)
    {
        AdHocChatRoom sourceChatRoom = (AdHocChatRoom) evt.getSource();

        if (logger.isInfoEnabled())
            logger.info(""MESSAGE DELIVERED to ad-hoc chat room: ""
            + sourceChatRoom.getName());

        ChatPanel chatPanel
            = GuiActivator
                .getUIService()
                    .getChatWindowManager()
                        .getMultiChat(sourceChatRoom, false);

        if(chatPanel != null)
        {
            String messageType;
            switch (evt.getEventType())
            {
            case AdHocChatRoomMessageDeliveredEvent
                    .CONVERSATION_MESSAGE_DELIVERED:
                messageType = Chat.OUTGOING_MESSAGE;
                break;
            case AdHocChatRoomMessageDeliveredEvent.ACTION_MESSAGE_DELIVERED:
                messageType = Chat.ACTION_MESSAGE;
                break;
            default:
                messageType = null;
            }

            Message msg = evt.getMessage();

            chatPanel
                .addMessage(
                    sourceChatRoom
                        .getParentProvider().getAccountID().getUserID(),
                    null,
                    evt.getTimestamp(),
                    messageType,
                    msg.getContent(),
                    msg.getContentType(),
                    msg.getMessageUID(),
                    null);
        }
        else
        {
            logger.error(""chat panel is null, message NOT DELIVERED !"");
        }
    }",False
62,messageDeliveryFailed(AdHocChatRoomMessageDeliveryFailedEvent),Method,,,"net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getMessage() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getMessage() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getDestinationParticipant() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getDestinationParticipant() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String,String[]) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageDeliveryFailedEvent+getErrorCode() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.GuiActivator+getResources() net.java.sip.communicator.impl.gui.GuiActivator+getResources() org.jitsi.service.resources.ResourceManagementService+getI18NString(String) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoom,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoom,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,Date,String,String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,Date,String,String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() java.util.Date+Date() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addErrorMessage(String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addErrorMessage(String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean)",net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+OFFLINE_MESSAGES_NOT_SUPPORTED net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+NETWORK_FAILURE net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+PROVIDER_NOT_REGISTERED net.java.sip.communicator.service.protocol.event.MessageDeliveryFailedEvent+INTERNAL_ERROR net.java.sip.communicator.service.gui.Chat+OUTGOING_MESSAGE,2457,65,1,"/** 
 * Implements <tt>AdHocChatRoomMessageListener.messageDeliveryFailed</tt> method. <br> In the conversation area shows an error message, explaining the problem.
 * @param evt the <tt>AdHocChatRoomMessageDeliveryFailedEvent</tt> thatnotified us
 */
","/**
     * Implements <tt>AdHocChatRoomMessageListener.messageDeliveryFailed</tt>
     * method.
     * <br>
     * In the conversation area shows an error message, explaining the problem.
     * @param evt the <tt>AdHocChatRoomMessageDeliveryFailedEvent</tt> that
     * notified us
     */
    public void messageDeliveryFailed(
            AdHocChatRoomMessageDeliveryFailedEvent evt)
    {
        AdHocChatRoom sourceChatRoom = evt.getSourceChatRoom();
        Message sourceMessage = evt.getMessage();
        Contact destParticipant = evt.getDestinationParticipant();

        String errorMsg = null;
        if (evt.getErrorCode()
                == MessageDeliveryFailedEvent.OFFLINE_MESSAGES_NOT_SUPPORTED)
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                    ""service.gui.MSG_DELIVERY_NOT_SUPPORTED"",
                    new String[]{destParticipant.getDisplayName()});
        }
        else if (evt.getErrorCode()
                == MessageDeliveryFailedEvent.NETWORK_FAILURE)
        {
            errorMsg = GuiActivator.getResources()
                .getI18NString(""service.gui.MSG_NOT_DELIVERED"");
        }
        else if (evt.getErrorCode()
                == MessageDeliveryFailedEvent.PROVIDER_NOT_REGISTERED)
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                    ""service.gui.MSG_SEND_CONNECTION_PROBLEM"");
        }
        else if (evt.getErrorCode()
                == MessageDeliveryFailedEvent.INTERNAL_ERROR)
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                    ""service.gui.MSG_DELIVERY_INTERNAL_ERROR"");
        }
        else
        {
            errorMsg = GuiActivator.getResources().getI18NString(
                    ""service.gui.MSG_DELIVERY_UNKNOWN_ERROR"");
        }

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();
        ChatPanel chatPanel
            = chatWindowManager.getMultiChat(sourceChatRoom, true);

        chatPanel.addMessage(
                destParticipant.getDisplayName(),
                new Date(),
                Chat.OUTGOING_MESSAGE,
                sourceMessage.getContent(),
                sourceMessage.getContentType());

        chatPanel.addErrorMessage(
                destParticipant.getDisplayName(),
                errorMsg);

        chatWindowManager.openChat(chatPanel, false);
    }",False
63,messageReceived(AdHocChatRoomMessageReceivedEvent),Method,,,"net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getSourceChatRoom() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getSourceChatRoomParticipant() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getSourceChatRoomParticipant() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getEventType() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getEventType() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getMessage() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getMessage() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoom,boolean,String) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(AdHocChatRoom,boolean,String) net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.service.protocol.Message+getContent() net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.impl.gui.main.chat.ChatPanel+addMessage(String,String,Date,String,String,String,String,String) net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.Contact+getDisplayName() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+getTimestamp() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getContentType() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.service.protocol.Message+getMessageUID() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean)",net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+CONVERSATION_MESSAGE_RECEIVED net.java.sip.communicator.service.gui.Chat+INCOMING_MESSAGE net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+SYSTEM_MESSAGE_RECEIVED net.java.sip.communicator.service.gui.Chat+SYSTEM_MESSAGE net.java.sip.communicator.service.protocol.event.AdHocChatRoomMessageReceivedEvent+ACTION_MESSAGE_RECEIVED net.java.sip.communicator.service.gui.Chat+ACTION_MESSAGE net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+logger,1849,55,1,"/** 
 * Implements the <tt>AdHocChatRoomMessageListener.messageReceived</tt> method. <br> Obtains the corresponding <tt>ChatPanel</tt> and process the message there.
 * @param evt the <tt>AdHocChatRoomMessageReceivedEvent</tt> that notifiedus
 */
","/**
     * Implements the <tt>AdHocChatRoomMessageListener.messageReceived</tt>
     * method.
     * <br>
     * Obtains the corresponding <tt>ChatPanel</tt> and process the message
     * there.
     * @param evt the <tt>AdHocChatRoomMessageReceivedEvent</tt> that notified
     * us
     */
    public void messageReceived(AdHocChatRoomMessageReceivedEvent evt)
    {
        AdHocChatRoom sourceChatRoom = evt.getSourceChatRoom();
        Contact sourceParticipant = evt.getSourceChatRoomParticipant();

        String messageType = null;

        switch (evt.getEventType())
        {
        case AdHocChatRoomMessageReceivedEvent.CONVERSATION_MESSAGE_RECEIVED:
            messageType = Chat.INCOMING_MESSAGE;
            break;
        case AdHocChatRoomMessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED:
            messageType = Chat.SYSTEM_MESSAGE;
            break;
        case AdHocChatRoomMessageReceivedEvent.ACTION_MESSAGE_RECEIVED:
            messageType = Chat.ACTION_MESSAGE;
            break;
        }

        if (logger.isInfoEnabled())
            logger.info(""MESSAGE RECEIVED from contact: ""
            + sourceParticipant.getAddress());

        Message message = evt.getMessage();

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();
        ChatPanel chatPanel
            = chatWindowManager
                .getMultiChat(sourceChatRoom, true, message.getMessageUID());

        String messageContent = message.getContent();

        chatPanel.addMessage(
            sourceParticipant.getDisplayName(),
            null,
            evt.getTimestamp(),
            messageType,
            messageContent,
            message.getContentType(),
            message.getMessageUID(),
            null);

        chatWindowManager.openChat(chatPanel, false);
    }",False
64,invitationRejected(AdHocChatRoomInvitationRejectedEvent),Method,,,,,75,1,1,,public void invitationRejected(AdHocChatRoomInvitationRejectedEvent evt) {},False
65,openChatRoom(ChatRoomWrapper),Method,,net.java.sip.communicator.impl.gui.main.contactlist.ContactListPane+contactClicked(ContactListEvent) net.java.sip.communicator.impl.gui.main.contactlist.ContactListTreeCellRenderer+actionPerformed(ActionEvent),"net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+createChatRoom(String,ProtocolProviderService,Collection<String>,String,boolean,boolean,boolean) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomName() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() java.util.ArrayList+ArrayList() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.service.protocol.ChatRoom+leave() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.service.protocol.ChatRoom+leave() net.java.sip.communicator.util.ConfigurationUtils+getChatRoomProperty(ProtocolProviderService,String,String) net.java.sip.communicator.util.ConfigurationUtils+getChatRoomProperty(ProtocolProviderService,String,String) net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getParentProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomProviderWrapper+getProtocolProvider() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomID() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoomID() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getJoinOptions() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getJoinOptions() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],String) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[],String) net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.impl.gui.main.chat.conference.ChatRoomWrapper+getChatRoom() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[]) net.java.sip.communicator.impl.gui.main.chat.conference.ConferenceChatManager+joinChatRoom(ChatRoomWrapper,String,byte[]) net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.GuiActivator+getUIService() net.java.sip.communicator.impl.gui.UIServiceImpl+getChatWindowManager() net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+getMultiChat(ChatRoomWrapper,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean) net.java.sip.communicator.impl.gui.main.chat.ChatWindowManager+openChat(ChatPanel,boolean)",,1594,53,1,"/** 
 * Opens a chat window for the chat room.
 * @param room the chat room.
 */
","/**
     * Opens a chat window for the chat room.
     * 
     * @param room the chat room.
     */
    public void openChatRoom(ChatRoomWrapper room)
    {
        if (room.getChatRoom() == null)
        {
            room = createChatRoom(
                room.getChatRoomName(),
                room.getParentProvider().getProtocolProvider(), 
                new ArrayList<String>(),"""", false, false, true);

            // leave the chatroom because getChatRoom().isJoined() returns true
            // otherwise
            if (room.getChatRoom().isJoined())
                room.getChatRoom().leave();

        }

        String savedNick =
            ConfigurationUtils.getChatRoomProperty(room
                .getParentProvider().getProtocolProvider(), room
                .getChatRoomID(), ""userNickName"");

        if (savedNick == null)
        {
            String[] joinOptions = room.getJoinOptions();
            String nickName = joinOptions[0];
            if(nickName == null)
                return;

            if (!room.getChatRoom().isJoined())
            {
                joinChatRoom(room, nickName, null, 
                        joinOptions[1]);
            }

        }
        else
        {
            if (!room.getChatRoom().isJoined())
                joinChatRoom(room, savedNick, null);
        }

        ChatWindowManager chatWindowManager
            = GuiActivator.getUIService().getChatWindowManager();
        ChatPanel chatPanel
            = chatWindowManager.getMultiChat(room, true);

        chatWindowManager.openChat(chatPanel, true);
    }",False
