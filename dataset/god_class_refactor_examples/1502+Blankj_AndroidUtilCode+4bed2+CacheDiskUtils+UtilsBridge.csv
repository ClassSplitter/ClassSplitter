index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,DEFAULT_MAX_SIZE,Field,,,,,63,1,26,,private static final long   DEFAULT_MAX_SIZE  = Long.MAX_VALUE;,False
2,DEFAULT_MAX_COUNT,Field,,,,,66,1,26,,private static final int    DEFAULT_MAX_COUNT = Integer.MAX_VALUE;,False
3,CACHE_PREFIX,Field,,,,,55,1,26,,"private static final String CACHE_PREFIX      = ""cdu_"";",False
4,TYPE_BYTE,Field,,,,,54,1,26,,"private static final String TYPE_BYTE         = ""by_"";",False
5,TYPE_STRING,Field,,,,,54,1,26,,"private static final String TYPE_STRING       = ""st_"";",False
6,TYPE_JSON_OBJECT,Field,,,,,54,1,26,,"private static final String TYPE_JSON_OBJECT  = ""jo_"";",False
7,TYPE_JSON_ARRAY,Field,,,,,54,1,26,,"private static final String TYPE_JSON_ARRAY   = ""ja_"";",False
8,TYPE_BITMAP,Field,,,,,54,1,26,,"private static final String TYPE_BITMAP       = ""bi_"";",False
9,TYPE_DRAWABLE,Field,,,,,54,1,26,,"private static final String TYPE_DRAWABLE     = ""dr_"";",False
10,TYPE_PARCELABLE,Field,,,,,54,1,26,,"private static final String TYPE_PARCELABLE   = ""pa_"";",False
11,TYPE_SERIALIZABLE,Field,,,,,54,1,26,,"private static final String TYPE_SERIALIZABLE = ""se_"";",False
12,CACHE_MAP,Field,,,,,77,1,26,,"private static final Map<String, CacheDiskUtils> CACHE_MAP = new HashMap<>();",False
13,mCacheKey,Field,,,,,41,1,18,,private final String           mCacheKey;,False
14,mCacheDir,Field,,,,,41,1,18,,private final File             mCacheDir;,False
15,mMaxSize,Field,,,,,40,1,18,,private final long             mMaxSize;,False
16,mMaxCount,Field,,,,,41,1,18,,private final int              mMaxCount;,False
17,mDiskCacheManager,Field,,,,,49,1,2,,private       DiskCacheManager mDiskCacheManager;,False
18,getInstance(),Method,,com.blankj.utilcode.util.CacheDiskStaticUtils+getDefaultCacheDiskUtils() com.blankj.utilcode.util.CacheDoubleUtils+getInstance(),"com.blankj.utilcode.util.CacheDiskUtils+getInstance(String,long,int) com.blankj.utilcode.util.CacheDiskUtils+getInstance(String,long,int)",com.blankj.utilcode.util.CacheDiskUtils+DEFAULT_MAX_SIZE com.blankj.utilcode.util.CacheDiskUtils+DEFAULT_MAX_COUNT,398,11,9,"/** 
 * Return the single  {@link CacheDiskUtils} instance.<p>cache directory: /data/data/package/cache/cacheUtils</p> <p>cache size: unlimited</p> <p>cache count: unlimited</p>
 * @return the single {@link CacheDiskUtils} instance
 */
","/**
     * Return the single {@link CacheDiskUtils} instance.
     * <p>cache directory: /data/data/package/cache/cacheUtils</p>
     * <p>cache size: unlimited</p>
     * <p>cache count: unlimited</p>
     *
     * @return the single {@link CacheDiskUtils} instance
     */
    public static CacheDiskUtils getInstance() {
        return getInstance("""", DEFAULT_MAX_SIZE, DEFAULT_MAX_COUNT);
    }",False
19,getInstance(String),Method,,,"com.blankj.utilcode.util.CacheDiskUtils+getInstance(String,long,int) com.blankj.utilcode.util.CacheDiskUtils+getInstance(String,long,int)",com.blankj.utilcode.util.CacheDiskUtils+DEFAULT_MAX_SIZE com.blankj.utilcode.util.CacheDiskUtils+DEFAULT_MAX_COUNT,470,12,9,"/** 
 * Return the single  {@link CacheDiskUtils} instance.<p>cache directory: /data/data/package/cache/cacheUtils</p> <p>cache size: unlimited</p> <p>cache count: unlimited</p>
 * @param cacheName The name of cache.
 * @return the single {@link CacheDiskUtils} instance
 */
","/**
     * Return the single {@link CacheDiskUtils} instance.
     * <p>cache directory: /data/data/package/cache/cacheUtils</p>
     * <p>cache size: unlimited</p>
     * <p>cache count: unlimited</p>
     *
     * @param cacheName The name of cache.
     * @return the single {@link CacheDiskUtils} instance
     */
    public static CacheDiskUtils getInstance(final String cacheName) {
        return getInstance(cacheName, DEFAULT_MAX_SIZE, DEFAULT_MAX_COUNT);
    }",False
20,"getInstance(long,int)",Method,,,"com.blankj.utilcode.util.CacheDiskUtils+getInstance(String,long,int) com.blankj.utilcode.util.CacheDiskUtils+getInstance(String,long,int)",,448,11,9,"/** 
 * Return the single  {@link CacheDiskUtils} instance.<p>cache directory: /data/data/package/cache/cacheUtils</p>
 * @param maxSize  The max size of cache, in bytes.
 * @param maxCount The max count of cache.
 * @return the single {@link CacheDiskUtils} instance
 */
","/**
     * Return the single {@link CacheDiskUtils} instance.
     * <p>cache directory: /data/data/package/cache/cacheUtils</p>
     *
     * @param maxSize  The max size of cache, in bytes.
     * @param maxCount The max count of cache.
     * @return the single {@link CacheDiskUtils} instance
     */
    public static CacheDiskUtils getInstance(final long maxSize, final int maxCount) {
        return getInstance("""", maxSize, maxCount);
    }",False
21,"getInstance(String,long,int)",Method,"getInstance() getInstance(String) getInstance(long,int)",,"com.blankj.utilcode.util.CacheDiskUtils+isSpace(String) com.blankj.utilcode.util.CacheDiskUtils+isSpace(String) java.io.File+File(String,String) com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.CacheDiskUtils+getInstance(File,long,int) com.blankj.utilcode.util.CacheDiskUtils+getInstance(File,long,int)",,641,14,9,"/** 
 * Return the single  {@link CacheDiskUtils} instance.<p>cache directory: /data/data/package/cache/cacheName</p>
 * @param cacheName The name of cache.
 * @param maxSize   The max size of cache, in bytes.
 * @param maxCount  The max count of cache.
 * @return the single {@link CacheDiskUtils} instance
 */
","/**
     * Return the single {@link CacheDiskUtils} instance.
     * <p>cache directory: /data/data/package/cache/cacheName</p>
     *
     * @param cacheName The name of cache.
     * @param maxSize   The max size of cache, in bytes.
     * @param maxCount  The max count of cache.
     * @return the single {@link CacheDiskUtils} instance
     */
    public static CacheDiskUtils getInstance(String cacheName, final long maxSize, final int maxCount) {
        if (isSpace(cacheName)) cacheName = ""cacheUtils"";
        File file = new File(Utils.getApp().getCacheDir(), cacheName);
        return getInstance(file, maxSize, maxCount);
    }",False
22,getInstance(File),Method,,,"com.blankj.utilcode.util.CacheDiskUtils+getInstance(File,long,int) com.blankj.utilcode.util.CacheDiskUtils+getInstance(File,long,int)",com.blankj.utilcode.util.CacheDiskUtils+DEFAULT_MAX_SIZE com.blankj.utilcode.util.CacheDiskUtils+DEFAULT_MAX_COUNT,412,11,9,"/** 
 * Return the single  {@link CacheDiskUtils} instance.<p>cache size: unlimited</p> <p>cache count: unlimited</p>
 * @param cacheDir The directory of cache.
 * @return the single {@link CacheDiskUtils} instance
 */
","/**
     * Return the single {@link CacheDiskUtils} instance.
     * <p>cache size: unlimited</p>
     * <p>cache count: unlimited</p>
     *
     * @param cacheDir The directory of cache.
     * @return the single {@link CacheDiskUtils} instance
     */
    public static CacheDiskUtils getInstance(@NonNull final File cacheDir) {
        return getInstance(cacheDir, DEFAULT_MAX_SIZE, DEFAULT_MAX_COUNT);
    }",False
23,"getInstance(File,long,int)",Method,"getInstance(String,long,int) getInstance(File)",,"java.io.File+getAbsoluteFile() java.io.File+getAbsoluteFile() java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) com.blankj.utilcode.util.CacheDiskUtils+CacheDiskUtils(String,File,long,int) java.util.Map+put(K,V) java.util.Map+put(K,V)",com.blankj.utilcode.util.CacheDiskUtils+CACHE_MAP com.blankj.utilcode.util.CacheDiskUtils+CACHE_MAP com.blankj.utilcode.util.CacheDiskUtils+CACHE_MAP,1014,24,9,"/** 
 * Return the single  {@link CacheDiskUtils} instance.
 * @param cacheDir The directory of cache.
 * @param maxSize  The max size of cache, in bytes.
 * @param maxCount The max count of cache.
 * @return the single {@link CacheDiskUtils} instance
 */
","/**
     * Return the single {@link CacheDiskUtils} instance.
     *
     * @param cacheDir The directory of cache.
     * @param maxSize  The max size of cache, in bytes.
     * @param maxCount The max count of cache.
     * @return the single {@link CacheDiskUtils} instance
     */
    public static CacheDiskUtils getInstance(@NonNull final File cacheDir,
                                             final long maxSize,
                                             final int maxCount) {
        final String cacheKey = cacheDir.getAbsoluteFile() + ""_"" + maxSize + ""_"" + maxCount;
        CacheDiskUtils cache = CACHE_MAP.get(cacheKey);
        if (cache == null) {
            synchronized (CacheDiskUtils.class) {
                cache = CACHE_MAP.get(cacheKey);
                if (cache == null) {
                    cache = new CacheDiskUtils(cacheKey, cacheDir, maxSize, maxCount);
                    CACHE_MAP.put(cacheKey, cache);
                }
            }
        }
        return cache;
    }",False
24,"CacheDiskUtils(String,File,long,int)",Method,,,,com.blankj.utilcode.util.CacheDiskUtils+mCacheKey com.blankj.utilcode.util.CacheDiskUtils+mCacheDir com.blankj.utilcode.util.CacheDiskUtils+mMaxSize com.blankj.utilcode.util.CacheDiskUtils+mMaxCount,313,9,2,,"private CacheDiskUtils(final String cacheKey,
                           final File cacheDir,
                           final long maxSize,
                           final int maxCount) {
        mCacheKey = cacheKey;
        mCacheDir = cacheDir;
        mMaxSize = maxSize;
        mMaxCount = maxCount;
    }",False
25,getDiskCacheManager(),Method,"realPutBytes(String,byte[],int) realGetBytes(String,byte[]) getCacheSize() getCacheCount() remove(String) clear()",,"java.io.File+exists() java.io.File+exists() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+DiskCacheManager(File,long,int) java.io.File+mkdirs() java.io.File+mkdirs() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+DiskCacheManager(File,long,int) java.io.File+getAbsolutePath() java.io.File+getAbsolutePath()",com.blankj.utilcode.util.CacheDiskUtils+mCacheDir com.blankj.utilcode.util.CacheDiskUtils+mDiskCacheManager com.blankj.utilcode.util.CacheDiskUtils+mDiskCacheManager com.blankj.utilcode.util.CacheDiskUtils+mCacheDir com.blankj.utilcode.util.CacheDiskUtils+mMaxSize com.blankj.utilcode.util.CacheDiskUtils+mMaxCount com.blankj.utilcode.util.CacheDiskUtils+mCacheDir com.blankj.utilcode.util.CacheDiskUtils+mDiskCacheManager com.blankj.utilcode.util.CacheDiskUtils+mCacheDir com.blankj.utilcode.util.CacheDiskUtils+mMaxSize com.blankj.utilcode.util.CacheDiskUtils+mMaxCount com.blankj.utilcode.util.CacheDiskUtils+mCacheDir com.blankj.utilcode.util.CacheDiskUtils+mDiskCacheManager,555,14,2,,"private DiskCacheManager getDiskCacheManager() {
        if (mCacheDir.exists()) {
            if (mDiskCacheManager == null) {
                mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);
            }
        } else {
            if (mCacheDir.mkdirs()) {
                mDiskCacheManager = new DiskCacheManager(mCacheDir, mMaxSize, mMaxCount);
            } else {
                Log.e(""CacheDiskUtils"", ""can't make dirs in "" + mCacheDir.getAbsolutePath());
            }
        }
        return mDiskCacheManager;
    }",False
26,toString(),Method,,"com.blankj.utilcode.util.CacheDoubleUtils+getInstance(CacheMemoryUtils,CacheDiskUtils)",java.lang.Integer+toHexString(int) java.lang.Integer+toHexString(int) java.lang.Object+hashCode() java.lang.Object+hashCode(),com.blankj.utilcode.util.CacheDiskUtils+mCacheKey,112,4,1,,"@Override
    public String toString() {
        return mCacheKey + ""@"" + Integer.toHexString(hashCode());
    }",False
27,"put(String,byte[])",Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,byte[],CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int)",,227,9,1,"/** 
 * Put bytes in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put bytes in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final byte[] value) {
        put(key, value, -1);
    }",False
28,"put(String,byte[],int)",Method,"put(String,byte[])","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,byte[],int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_BYTE,339,10,1,"/** 
 * Put bytes in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put bytes in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final byte[] value, final int saveTime) {
        realPutBytes(TYPE_BYTE + key, value, saveTime);
    }",False
29,"realPutBytes(String,byte[],int)",Method,"put(String,byte[],int) put(String,String,int) put(String,JSONObject,int) put(String,JSONArray,int) put(String,Bitmap,int) put(String,Drawable,int) put(String,Parcelable,int) put(String,Serializable,int)",,"com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+newByteArrayWithTime(int,byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+newByteArrayWithTime(int,byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileBeforePut(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileBeforePut(String) com.blankj.utilcode.util.CacheDiskUtils+writeFileFromBytes(File,byte[]) com.blankj.utilcode.util.CacheDiskUtils+writeFileFromBytes(File,byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+updateModify(File) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+updateModify(File) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+put(File) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+put(File)",,499,10,2,,"private void realPutBytes(final String key, byte[] value, int saveTime) {
        if (value == null) return;
        DiskCacheManager diskCacheManager = getDiskCacheManager();
        if (diskCacheManager == null) return;
        if (saveTime >= 0) value = DiskCacheHelper.newByteArrayWithTime(saveTime, value);
        File file = diskCacheManager.getFileBeforePut(key);
        writeFileFromBytes(file, value);
        diskCacheManager.updateModify(file);
        diskCacheManager.put(file);
    }",False
30,getBytes(String),Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getBytes(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getBytes() com.blankj.utilcode.util.CacheDiskUtilsTest+getBytes() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getBytes(String,byte[]) com.blankj.utilcode.util.CacheDiskUtils+getBytes(String,byte[])",,245,9,1,"/** 
 * Return the bytes in cache.
 * @param key The key of cache.
 * @return the bytes if cache exists or null otherwise
 */
","/**
     * Return the bytes in cache.
     *
     * @param key The key of cache.
     * @return the bytes if cache exists or null otherwise
     */
    public byte[] getBytes(@NonNull final String key) {
        return getBytes(key, null);
    }",False
31,"getBytes(String,byte[])",Method,getBytes(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getBytes(String,byte[],CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getBytes(String,byte[]) com.blankj.utilcode.util.CacheDiskUtilsTest+getBytes() com.blankj.utilcode.util.CacheDiskUtilsTest+getBytes() com.blankj.utilcode.util.CacheDiskUtilsTest+getBytes() com.blankj.utilcode.util.CacheDiskUtilsTest+getBytes()","com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String,byte[]) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String,byte[])",com.blankj.utilcode.util.CacheDiskUtils+TYPE_BYTE,386,10,1,"/** 
 * Return the bytes in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the bytes if cache exists or defaultValue otherwise
 */
","/**
     * Return the bytes in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the bytes if cache exists or defaultValue otherwise
     */
    public byte[] getBytes(@NonNull final String key, final byte[] defaultValue) {
        return realGetBytes(TYPE_BYTE + key, defaultValue);
    }",False
32,realGetBytes(String),Method,"getString(String,String) getJSONObject(String,JSONObject) getJSONArray(String,JSONArray) getBitmap(String,Bitmap) getDrawable(String,Drawable) getParcelable(String,Parcelable.Creator<T>,T) getSerializable(String,Object)",,"com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String,byte[]) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String,byte[])",,102,3,2,,"private byte[] realGetBytes(@NonNull final String key) {
        return realGetBytes(key, null);
    }",False
33,"realGetBytes(String,byte[])",Method,"getBytes(String,byte[]) realGetBytes(String)",,com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileIfExists(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileIfExists(String) com.blankj.utilcode.util.CacheDiskUtils+readFile2Bytes(File) com.blankj.utilcode.util.CacheDiskUtils+readFile2Bytes(File) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+isDue(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+isDue(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+updateModify(File) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+updateModify(File) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+getDataWithoutDueTime(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+getDataWithoutDueTime(byte[]),,609,13,2,,"private byte[] realGetBytes(@NonNull final String key, final byte[] defaultValue) {
        DiskCacheManager diskCacheManager = getDiskCacheManager();
        if (diskCacheManager == null) return defaultValue;
        final File file = diskCacheManager.getFileIfExists(key);
        if (file == null) return defaultValue;
        byte[] data = readFile2Bytes(file);
        if (DiskCacheHelper.isDue(data)) {
            diskCacheManager.removeByKey(key);
            return defaultValue;
        }
        diskCacheManager.updateModify(file);
        return DiskCacheHelper.getDataWithoutDueTime(data);
    }",False
34,"put(String,String)",Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,String,int) com.blankj.utilcode.util.CacheDiskUtils+put(String,String,int)",,234,9,1,"/** 
 * Put string value in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put string value in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final String value) {
        put(key, value, -1);
    }",False
35,"put(String,String,int)",Method,"put(String,String)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,String,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,String,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+string2Bytes(String) com.blankj.utilcode.util.CacheDiskUtils+string2Bytes(String)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_STRING,362,10,1,"/** 
 * Put string value in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put string value in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final String value, final int saveTime) {
        realPutBytes(TYPE_STRING + key, string2Bytes(value), saveTime);
    }",False
36,getString(String),Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getString(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getString() com.blankj.utilcode.util.CacheDiskUtilsTest+getString() com.blankj.utilcode.util.CacheDiskUtilsTest+remove() com.blankj.utilcode.util.CacheDiskUtilsTest+remove() com.blankj.utilcode.util.CacheDiskUtilsTest+remove() com.blankj.utilcode.util.CacheDiskUtilsTest+remove() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getString(String,String) com.blankj.utilcode.util.CacheDiskUtils+getString(String,String)",,261,9,1,"/** 
 * Return the string value in cache.
 * @param key The key of cache.
 * @return the string value if cache exists or null otherwise
 */
","/**
     * Return the string value in cache.
     *
     * @param key The key of cache.
     * @return the string value if cache exists or null otherwise
     */
    public String getString(@NonNull final String key) {
        return getString(key, null);
    }",False
37,"getString(String,String)",Method,getString(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getString(String,String,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getString(String,String) com.blankj.utilcode.util.CacheDiskUtilsTest+getString() com.blankj.utilcode.util.CacheDiskUtilsTest+getString() com.blankj.utilcode.util.CacheDiskUtilsTest+getString() com.blankj.utilcode.util.CacheDiskUtilsTest+getString()",com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+bytes2String(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2String(byte[]),com.blankj.utilcode.util.CacheDiskUtils+TYPE_STRING,481,12,1,"/** 
 * Return the string value in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the string value if cache exists or defaultValue otherwise
 */
","/**
     * Return the string value in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the string value if cache exists or defaultValue otherwise
     */
    public String getString(@NonNull final String key, final String defaultValue) {
        byte[] bytes = realGetBytes(TYPE_STRING + key);
        if (bytes == null) return defaultValue;
        return bytes2String(bytes);
    }",False
38,"put(String,JSONObject)",Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,JSONObject,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,JSONObject,int) com.blankj.utilcode.util.CacheDiskUtils+put(String,JSONObject,int)",,236,9,1,"/** 
 * Put JSONObject in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put JSONObject in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final JSONObject value) {
        put(key, value, -1);
    }",False
39,"put(String,JSONObject,int)",Method,"put(String,JSONObject)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,JSONObject,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,JSONObject,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+jsonObject2Bytes(JSONObject) com.blankj.utilcode.util.CacheDiskUtils+jsonObject2Bytes(JSONObject)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_JSON_OBJECT,413,12,1,"/** 
 * Put JSONObject in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put JSONObject in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key,
                    final JSONObject value,
                    final int saveTime) {
        realPutBytes(TYPE_JSON_OBJECT + key, jsonObject2Bytes(value), saveTime);
    }",False
40,getJSONObject(String),Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getJSONObject(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getJSONObject(String,JSONObject) com.blankj.utilcode.util.CacheDiskUtils+getJSONObject(String,JSONObject)",,269,9,1,"/** 
 * Return the JSONObject in cache.
 * @param key The key of cache.
 * @return the JSONObject if cache exists or null otherwise
 */
","/**
     * Return the JSONObject in cache.
     *
     * @param key The key of cache.
     * @return the JSONObject if cache exists or null otherwise
     */
    public JSONObject getJSONObject(@NonNull final String key) {
        return getJSONObject(key, null);
    }",False
41,"getJSONObject(String,JSONObject)",Method,getJSONObject(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getJSONObject(String,JSONObject,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getJSONObject(String,JSONObject) com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONObject()",com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+bytes2JSONObject(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2JSONObject(byte[]),com.blankj.utilcode.util.CacheDiskUtils+TYPE_JSON_OBJECT,498,12,1,"/** 
 * Return the JSONObject in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the JSONObject if cache exists or defaultValue otherwise
 */
","/**
     * Return the JSONObject in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the JSONObject if cache exists or defaultValue otherwise
     */
    public JSONObject getJSONObject(@NonNull final String key, final JSONObject defaultValue) {
        byte[] bytes = realGetBytes(TYPE_JSON_OBJECT + key);
        if (bytes == null) return defaultValue;
        return bytes2JSONObject(bytes);
    }",False
42,"put(String,JSONArray)",Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,JSONArray,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,JSONArray,int) com.blankj.utilcode.util.CacheDiskUtils+put(String,JSONArray,int)",,234,9,1,"/** 
 * Put JSONArray in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put JSONArray in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final JSONArray value) {
        put(key, value, -1);
    }",False
43,"put(String,JSONArray,int)",Method,"put(String,JSONArray)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,JSONArray,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,JSONArray,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+jsonArray2Bytes(JSONArray) com.blankj.utilcode.util.CacheDiskUtils+jsonArray2Bytes(JSONArray)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_JSON_ARRAY,369,10,1,"/** 
 * Put JSONArray in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put JSONArray in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final JSONArray value, final int saveTime) {
        realPutBytes(TYPE_JSON_ARRAY + key, jsonArray2Bytes(value), saveTime);
    }",False
44,getJSONArray(String),Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getJSONArray(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getJSONArray(String,JSONArray) com.blankj.utilcode.util.CacheDiskUtils+getJSONArray(String,JSONArray)",,264,9,1,"/** 
 * Return the JSONArray in cache.
 * @param key The key of cache.
 * @return the JSONArray if cache exists or null otherwise
 */
","/**
     * Return the JSONArray in cache.
     *
     * @param key The key of cache.
     * @return the JSONArray if cache exists or null otherwise
     */
    public JSONArray getJSONArray(@NonNull final String key) {
        return getJSONArray(key, null);
    }",False
45,"getJSONArray(String,JSONArray)",Method,getJSONArray(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getJSONArray(String,JSONArray,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getJSONArray(String,JSONArray) com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDiskUtilsTest+getJSONArray()",com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+bytes2JSONArray(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2JSONArray(byte[]),com.blankj.utilcode.util.CacheDiskUtils+TYPE_JSON_ARRAY,491,12,1,"/** 
 * Return the JSONArray in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the JSONArray if cache exists or defaultValue otherwise
 */
","/**
     * Return the JSONArray in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the JSONArray if cache exists or defaultValue otherwise
     */
    public JSONArray getJSONArray(@NonNull final String key, final JSONArray defaultValue) {
        byte[] bytes = realGetBytes(TYPE_JSON_ARRAY + key);
        if (bytes == null) return defaultValue;
        return bytes2JSONArray(bytes);
    }",False
46,"put(String,Bitmap)",Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Bitmap,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int)",,228,9,1,"/** 
 * Put bitmap in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put bitmap in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final Bitmap value) {
        put(key, value, -1);
    }",False
47,"put(String,Bitmap,int)",Method,"put(String,Bitmap)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Bitmap,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,Bitmap,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+bitmap2Bytes(Bitmap) com.blankj.utilcode.util.CacheDiskUtils+bitmap2Bytes(Bitmap)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_BITMAP,356,10,1,"/** 
 * Put bitmap in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put bitmap in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final Bitmap value, final int saveTime) {
        realPutBytes(TYPE_BITMAP + key, bitmap2Bytes(value), saveTime);
    }",False
48,getBitmap(String),Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getBitmap(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDiskUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getBitmap(String,Bitmap) com.blankj.utilcode.util.CacheDiskUtils+getBitmap(String,Bitmap)",,249,9,1,"/** 
 * Return the bitmap in cache.
 * @param key The key of cache.
 * @return the bitmap if cache exists or null otherwise
 */
","/**
     * Return the bitmap in cache.
     *
     * @param key The key of cache.
     * @return the bitmap if cache exists or null otherwise
     */
    public Bitmap getBitmap(@NonNull final String key) {
        return getBitmap(key, null);
    }",False
49,"getBitmap(String,Bitmap)",Method,getBitmap(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getBitmap(String,Bitmap,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getBitmap(String,Bitmap) com.blankj.utilcode.util.CacheDiskUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDiskUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDiskUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDiskUtilsTest+getBitmap()",com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+bytes2Bitmap(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2Bitmap(byte[]),com.blankj.utilcode.util.CacheDiskUtils+TYPE_BITMAP,469,12,1,"/** 
 * Return the bitmap in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the bitmap if cache exists or defaultValue otherwise
 */
","/**
     * Return the bitmap in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the bitmap if cache exists or defaultValue otherwise
     */
    public Bitmap getBitmap(@NonNull final String key, final Bitmap defaultValue) {
        byte[] bytes = realGetBytes(TYPE_BITMAP + key);
        if (bytes == null) return defaultValue;
        return bytes2Bitmap(bytes);
    }",False
50,"put(String,Drawable)",Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Drawable,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int)",,232,9,1,"/** 
 * Put drawable in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put drawable in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final Drawable value) {
        put(key, value, -1);
    }",False
51,"put(String,Drawable,int)",Method,"put(String,Drawable)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Drawable,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,Drawable,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+drawable2Bytes(Drawable) com.blankj.utilcode.util.CacheDiskUtils+drawable2Bytes(Drawable)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_DRAWABLE,364,10,1,"/** 
 * Put drawable in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put drawable in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final Drawable value, final int saveTime) {
        realPutBytes(TYPE_DRAWABLE + key, drawable2Bytes(value), saveTime);
    }",False
52,getDrawable(String),Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getDrawable(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDiskUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getDrawable(String,Drawable) com.blankj.utilcode.util.CacheDiskUtils+getDrawable(String,Drawable)",,259,9,1,"/** 
 * Return the drawable in cache.
 * @param key The key of cache.
 * @return the drawable if cache exists or null otherwise
 */
","/**
     * Return the drawable in cache.
     *
     * @param key The key of cache.
     * @return the drawable if cache exists or null otherwise
     */
    public Drawable getDrawable(@NonNull final String key) {
        return getDrawable(key, null);
    }",False
53,"getDrawable(String,Drawable)",Method,getDrawable(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getDrawable(String,Drawable,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getDrawable(String,Drawable) com.blankj.utilcode.util.CacheDiskUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDiskUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDiskUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDiskUtilsTest+getDrawable()",com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+bytes2Drawable(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2Drawable(byte[]),com.blankj.utilcode.util.CacheDiskUtils+TYPE_DRAWABLE,483,12,1,"/** 
 * Return the drawable in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the drawable if cache exists or defaultValue otherwise
 */
","/**
     * Return the drawable in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the drawable if cache exists or defaultValue otherwise
     */
    public Drawable getDrawable(@NonNull final String key, final Drawable defaultValue) {
        byte[] bytes = realGetBytes(TYPE_DRAWABLE + key);
        if (bytes == null) return defaultValue;
        return bytes2Drawable(bytes);
    }",False
54,"put(String,Parcelable)",Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Parcelable,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+put(String,byte[],int)",,236,9,1,"/** 
 * Put parcelable in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put parcelable in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final Parcelable value) {
        put(key, value, -1);
    }",False
55,"put(String,Parcelable,int)",Method,"put(String,Parcelable)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Parcelable,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,Parcelable,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+parcelable2Bytes(Parcelable) com.blankj.utilcode.util.CacheDiskUtils+parcelable2Bytes(Parcelable)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_PARCELABLE,372,10,1,"/** 
 * Put parcelable in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put parcelable in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final Parcelable value, final int saveTime) {
        realPutBytes(TYPE_PARCELABLE + key, parcelable2Bytes(value), saveTime);
    }",False
56,"getParcelable(String,Parcelable.Creator<T>)",Method,,,,,427,12,1,"/** 
 * Return the parcelable in cache.
 * @param key     The key of cache.
 * @param creator The creator.
 * @param < T >     The value type.
 * @return the parcelable if cache exists or null otherwise
 */
","/**
     * Return the parcelable in cache.
     *
     * @param key     The key of cache.
     * @param creator The creator.
     * @param <T>     The value type.
     * @return the parcelable if cache exists or null otherwise
     */
    public <T> T getParcelable(@NonNull final String key,
                               @NonNull final Parcelable.Creator<T> creator) {
        return getParcelable(key, creator, null);
    }",False
57,"getParcelable(String,Parcelable.Creator<T>,T)",Method,,,com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String),com.blankj.utilcode.util.CacheDiskUtils+TYPE_PARCELABLE,683,16,1,"/** 
 * Return the parcelable in cache.
 * @param key          The key of cache.
 * @param creator      The creator.
 * @param defaultValue The default value if the cache doesn't exist.
 * @param < T >          The value type.
 * @return the parcelable if cache exists or defaultValue otherwise
 */
","/**
     * Return the parcelable in cache.
     *
     * @param key          The key of cache.
     * @param creator      The creator.
     * @param defaultValue The default value if the cache doesn't exist.
     * @param <T>          The value type.
     * @return the parcelable if cache exists or defaultValue otherwise
     */
    public <T> T getParcelable(@NonNull final String key,
                               @NonNull final Parcelable.Creator<T> creator,
                               final T defaultValue) {
        byte[] bytes = realGetBytes(TYPE_PARCELABLE + key);
        if (bytes == null) return defaultValue;
        return bytes2Parcelable(bytes, creator);
    }",False
58,"put(String,Serializable)",Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Serializable,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+put(String,Serializable,int) com.blankj.utilcode.util.CacheDiskUtils+put(String,Serializable,int)",,240,9,1,"/** 
 * Put serializable in cache.
 * @param key   The key of cache.
 * @param value The value of cache.
 */
","/**
     * Put serializable in cache.
     *
     * @param key   The key of cache.
     * @param value The value of cache.
     */
    public void put(@NonNull final String key, final Serializable value) {
        put(key, value, -1);
    }",False
59,"put(String,Serializable,int)",Method,"put(String,Serializable)","com.blankj.utilcode.util.CacheDiskStaticUtils+put(String,Serializable,int,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+put(String,Serializable,int) com.blankj.utilcode.util.CacheDiskUtilsTest+setUp()","com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+realPutBytes(String,byte[],int) com.blankj.utilcode.util.CacheDiskUtils+serializable2Bytes(Serializable) com.blankj.utilcode.util.CacheDiskUtils+serializable2Bytes(Serializable)",com.blankj.utilcode.util.CacheDiskUtils+TYPE_SERIALIZABLE,380,10,1,"/** 
 * Put serializable in cache.
 * @param key      The key of cache.
 * @param value    The value of cache.
 * @param saveTime The save time of cache, in seconds.
 */
","/**
     * Put serializable in cache.
     *
     * @param key      The key of cache.
     * @param value    The value of cache.
     * @param saveTime The save time of cache, in seconds.
     */
    public void put(@NonNull final String key, final Serializable value, final int saveTime) {
        realPutBytes(TYPE_SERIALIZABLE + key, serializable2Bytes(value), saveTime);
    }",False
60,getSerializable(String),Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+getSerializable(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDiskUtilsTest+getSerializable() com.blankj.utilcode.util.CacheDiskUtilsTest+getSerializable() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear()","com.blankj.utilcode.util.CacheDiskUtils+getSerializable(String,Object) com.blankj.utilcode.util.CacheDiskUtils+getSerializable(String,Object)",,267,9,1,"/** 
 * Return the serializable in cache.
 * @param key The key of cache.
 * @return the bitmap if cache exists or null otherwise
 */
","/**
     * Return the serializable in cache.
     *
     * @param key The key of cache.
     * @return the bitmap if cache exists or null otherwise
     */
    public Object getSerializable(@NonNull final String key) {
        return getSerializable(key, null);
    }",False
61,"getSerializable(String,Object)",Method,getSerializable(String),"com.blankj.utilcode.util.CacheDiskStaticUtils+getSerializable(String,Object,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getSerializable(String,Object) com.blankj.utilcode.util.CacheDiskUtilsTest+getSerializable() com.blankj.utilcode.util.CacheDiskUtilsTest+getSerializable() com.blankj.utilcode.util.CacheDiskUtilsTest+getSerializable() com.blankj.utilcode.util.CacheDiskUtilsTest+getSerializable()",com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+realGetBytes(String) com.blankj.utilcode.util.CacheDiskUtils+bytes2Object(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2Object(byte[]),com.blankj.utilcode.util.CacheDiskUtils+TYPE_SERIALIZABLE,487,12,1,"/** 
 * Return the serializable in cache.
 * @param key          The key of cache.
 * @param defaultValue The default value if the cache doesn't exist.
 * @return the bitmap if cache exists or defaultValue otherwise
 */
","/**
     * Return the serializable in cache.
     *
     * @param key          The key of cache.
     * @param defaultValue The default value if the cache doesn't exist.
     * @return the bitmap if cache exists or defaultValue otherwise
     */
    public Object getSerializable(@NonNull final String key, final Object defaultValue) {
        byte[] bytes = realGetBytes(TYPE_SERIALIZABLE + key);
        if (bytes == null) return defaultValue;
        return bytes2Object(bytes);
    }",False
62,getCacheSize(),Method,,com.blankj.utilcode.util.CacheDiskStaticUtils+getCacheSize(CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getCacheDiskSize() com.blankj.utilcode.util.CacheDiskUtilsTest+getCacheSize() com.blankj.utilcode.util.CacheDiskUtilsTest+getCacheSize() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear(),com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheSize() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheSize(),,306,10,1,"/** 
 * Return the size of cache, in bytes.
 * @return the size of cache, in bytes
 */
","/**
     * Return the size of cache, in bytes.
     *
     * @return the size of cache, in bytes
     */
    public long getCacheSize() {
        DiskCacheManager diskCacheManager = getDiskCacheManager();
        if (diskCacheManager == null) return 0;
        return diskCacheManager.getCacheSize();
    }",False
63,getCacheCount(),Method,,com.blankj.utilcode.util.CacheDiskStaticUtils+getCacheCount(CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+getCacheDiskCount() com.blankj.utilcode.util.CacheDiskUtilsTest+getCacheCount() com.blankj.utilcode.util.CacheDiskUtilsTest+getCacheCount() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear(),com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheCount() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheCount(),,289,10,1,"/** 
 * Return the count of cache.
 * @return the count of cache
 */
","/**
     * Return the count of cache.
     *
     * @return the count of cache
     */
    public int getCacheCount() {
        DiskCacheManager diskCacheManager = getDiskCacheManager();
        if (diskCacheManager == null) return 0;
        return diskCacheManager.getCacheCount();
    }",False
64,remove(String),Method,,"com.blankj.utilcode.util.CacheDiskStaticUtils+remove(String,CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+remove(String) com.blankj.utilcode.util.CacheDiskUtilsTest+remove() com.blankj.utilcode.util.CacheDiskUtilsTest+remove() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getBytes() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getString() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getParcel() com.blankj.utilcode.util.CacheDoubleStaticUtilsTest+getSerializable() com.blankj.utilcode.util.CacheDoubleUtilsTest+getBytes() com.blankj.utilcode.util.CacheDoubleUtilsTest+getString() com.blankj.utilcode.util.CacheDoubleUtilsTest+getJSONObject() com.blankj.utilcode.util.CacheDoubleUtilsTest+getJSONArray() com.blankj.utilcode.util.CacheDoubleUtilsTest+getBitmap() com.blankj.utilcode.util.CacheDoubleUtilsTest+getDrawable() com.blankj.utilcode.util.CacheDoubleUtilsTest+getParcel() com.blankj.utilcode.util.CacheDoubleUtilsTest+getSerializable()",com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String),com.blankj.utilcode.util.CacheDiskUtils+TYPE_BYTE com.blankj.utilcode.util.CacheDiskUtils+TYPE_STRING com.blankj.utilcode.util.CacheDiskUtils+TYPE_JSON_OBJECT com.blankj.utilcode.util.CacheDiskUtils+TYPE_JSON_ARRAY com.blankj.utilcode.util.CacheDiskUtils+TYPE_BITMAP com.blankj.utilcode.util.CacheDiskUtils+TYPE_DRAWABLE com.blankj.utilcode.util.CacheDiskUtils+TYPE_PARCELABLE com.blankj.utilcode.util.CacheDiskUtils+TYPE_SERIALIZABLE,877,18,1,"/** 
 * Remove the cache by key.
 * @param key The key of cache.
 * @return {@code true}: success<br> {@code false}: fail
 */
","/**
     * Remove the cache by key.
     *
     * @param key The key of cache.
     * @return {@code true}: success<br>{@code false}: fail
     */
    public boolean remove(@NonNull final String key) {
        DiskCacheManager diskCacheManager = getDiskCacheManager();
        if (diskCacheManager == null) return true;
        return diskCacheManager.removeByKey(TYPE_BYTE + key)
                && diskCacheManager.removeByKey(TYPE_STRING + key)
                && diskCacheManager.removeByKey(TYPE_JSON_OBJECT + key)
                && diskCacheManager.removeByKey(TYPE_JSON_ARRAY + key)
                && diskCacheManager.removeByKey(TYPE_BITMAP + key)
                && diskCacheManager.removeByKey(TYPE_DRAWABLE + key)
                && diskCacheManager.removeByKey(TYPE_PARCELABLE + key)
                && diskCacheManager.removeByKey(TYPE_SERIALIZABLE + key);
    }",False
65,clear(),Method,,com.blankj.utilcode.util.CacheDiskStaticUtils+clear(CacheDiskUtils) com.blankj.utilcode.util.CacheDoubleUtils+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+clear() com.blankj.utilcode.util.CacheDiskUtilsTest+tearDown() com.blankj.utilcode.util.CacheDiskUtilsTest+tearDown(),com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils+getDiskCacheManager() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+clear() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+clear(),,303,10,1,"/** 
 * Clear all of the cache.
 * @return {@code true}: success<br> {@code false}: fail
 */
","/**
     * Clear all of the cache.
     *
     * @return {@code true}: success<br>{@code false}: fail
     */
    public boolean clear() {
        DiskCacheManager diskCacheManager = getDiskCacheManager();
        if (diskCacheManager == null) return true;
        return diskCacheManager.clear();
    }",False
66,DiskCacheManager,MemberClass,,,"java.util.Collections+synchronizedMap(Map) java.util.Collections+synchronizedMap(Map) java.util.HashMap+HashMap() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+DiskCacheManager(File,long,int) java.util.concurrent.atomic.AtomicLong+AtomicLong() java.util.concurrent.atomic.AtomicInteger+AtomicInteger() java.lang.Thread+Thread(Runnable) +() +run() java.io.File+listFiles(FilenameFilter) java.io.File+listFiles(FilenameFilter) +() +accept(File,String) java.lang.String+startsWith(String) java.lang.String+startsWith(String) java.io.File+length() java.io.File+length() java.util.Map+put(K,V) java.util.Map+put(K,V) java.io.File+lastModified() java.io.File+lastModified() java.util.concurrent.atomic.AtomicLong+getAndAdd(long) java.util.concurrent.atomic.AtomicLong+getAndAdd(long) java.util.concurrent.atomic.AtomicInteger+getAndAdd(int) java.util.concurrent.atomic.AtomicInteger+getAndAdd(int) java.lang.Thread+start() java.lang.Thread+start() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheSize() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() java.util.concurrent.atomic.AtomicLong+get() java.util.concurrent.atomic.AtomicLong+get() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheCount() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() java.util.concurrent.atomic.AtomicInteger+get() java.util.concurrent.atomic.AtomicInteger+get() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileBeforePut(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() java.io.File+File(File,String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheNameByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheNameByKey(String) java.io.File+exists() java.io.File+exists() java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.io.File+length() java.io.File+length() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+wait2InitOk() java.lang.Thread+join() java.lang.Thread+join() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileIfExists(String) java.io.File+File(File,String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheNameByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheNameByKey(String) java.io.File+exists() java.io.File+exists() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getCacheNameByKey(String) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+hashCode() java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+hashCode() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+put(File) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.io.File+length() java.io.File+length() java.util.concurrent.atomic.AtomicInteger+get() java.util.concurrent.atomic.AtomicInteger+get() java.util.concurrent.atomic.AtomicLong+get() java.util.concurrent.atomic.AtomicLong+get() java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.util.concurrent.atomic.AtomicLong+addAndGet(long) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeOldest() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeOldest() java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+updateModify(File) java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() java.io.File+setLastModified(long) java.io.File+setLastModified(long) java.util.Map+put(K,V) java.util.Map+put(K,V) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeByKey(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileIfExists(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+getFileIfExists(String) java.io.File+delete() java.io.File+delete() java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.io.File+length() java.io.File+length() java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.Map+remove(Object) java.util.Map+remove(Object) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+clear() java.io.File+listFiles(FilenameFilter) java.io.File+listFiles(FilenameFilter) +() +accept(File,String) java.lang.String+startsWith(String) java.lang.String+startsWith(String) java.io.File+delete() java.io.File+delete() java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.util.concurrent.atomic.AtomicLong+addAndGet(long) java.io.File+length() java.io.File+length() java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.concurrent.atomic.AtomicInteger+addAndGet(int) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Map+clear() java.util.Map+clear() java.util.concurrent.atomic.AtomicLong+set(long) java.util.concurrent.atomic.AtomicLong+set(long) java.util.concurrent.atomic.AtomicInteger+set(int) java.util.concurrent.atomic.AtomicInteger+set(int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+removeOldest() java.util.Map+isEmpty() java.util.Map+isEmpty() java.util.Map+entrySet() java.util.Map+entrySet() java.util.Map.Entry+getValue() java.util.Map.Entry+getValue() java.util.Map.Entry+getKey() java.util.Map.Entry+getKey() java.io.File+length() java.io.File+length() java.io.File+delete() java.io.File+delete() java.util.Map+remove(Object) java.util.Map+remove(Object)",com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+sizeLimit com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+countLimit com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheDir com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+mThread com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheDir com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+sizeLimit com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+countLimit com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+mThread com.blankj.utilcode.util.CacheDiskUtils+CACHE_PREFIX com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+mThread com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheDir com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+mThread com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheDir com.blankj.utilcode.util.CacheDiskUtils+CACHE_PREFIX com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+countLimit com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+sizeLimit com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheDir com.blankj.utilcode.util.CacheDiskUtils+CACHE_PREFIX com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheSize com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+cacheCount com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates java.lang.Long+MAX_VALUE com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates com.blankj.utilcode.util.CacheDiskUtils.DiskCacheManager+lastUsageDates,5697,158,26,,"private static final class DiskCacheManager {
        private final AtomicLong      cacheSize;
        private final AtomicInteger   cacheCount;
        private final long            sizeLimit;
        private final int             countLimit;
        private final Map<File, Long> lastUsageDates
                = Collections.synchronizedMap(new HashMap<File, Long>());
        private final File            cacheDir;
        private final Thread          mThread;

        private DiskCacheManager(final File cacheDir, final long sizeLimit, final int countLimit) {
            this.cacheDir = cacheDir;
            this.sizeLimit = sizeLimit;
            this.countLimit = countLimit;
            cacheSize = new AtomicLong();
            cacheCount = new AtomicInteger();
            mThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int size = 0;
                    int count = 0;
                    final File[] cachedFiles = cacheDir.listFiles(new FilenameFilter() {
                        @Override
                        public boolean accept(File dir, String name) {
                            return name.startsWith(CACHE_PREFIX);
                        }
                    });
                    if (cachedFiles != null) {
                        for (File cachedFile : cachedFiles) {
                            size += cachedFile.length();
                            count += 1;
                            lastUsageDates.put(cachedFile, cachedFile.lastModified());
                        }
                        cacheSize.getAndAdd(size);
                        cacheCount.getAndAdd(count);
                    }
                }
            });
            mThread.start();
        }

        private long getCacheSize() {
            wait2InitOk();
            return cacheSize.get();
        }

        private int getCacheCount() {
            wait2InitOk();
            return cacheCount.get();
        }

        private File getFileBeforePut(final String key) {
            wait2InitOk();
            File file = new File(cacheDir, getCacheNameByKey(key));
            if (file.exists()) {
                cacheCount.addAndGet(-1);
                cacheSize.addAndGet(-file.length());
            }
            return file;
        }

        private void wait2InitOk() {
            try {
                mThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        private File getFileIfExists(final String key) {
            File file = new File(cacheDir, getCacheNameByKey(key));
            if (!file.exists()) return null;
            return file;
        }

        private String getCacheNameByKey(final String key) {
            return CACHE_PREFIX + key.substring(0, 3) + key.substring(3).hashCode();
        }

        private void put(final File file) {
            cacheCount.addAndGet(1);
            cacheSize.addAndGet(file.length());
            while (cacheCount.get() > countLimit || cacheSize.get() > sizeLimit) {
                cacheSize.addAndGet(-removeOldest());
                cacheCount.addAndGet(-1);
            }
        }

        private void updateModify(final File file) {
            Long millis = System.currentTimeMillis();
            file.setLastModified(millis);
            lastUsageDates.put(file, millis);
        }

        private boolean removeByKey(final String key) {
            File file = getFileIfExists(key);
            if (file == null) return true;
            if (!file.delete()) return false;
            cacheSize.addAndGet(-file.length());
            cacheCount.addAndGet(-1);
            lastUsageDates.remove(file);
            return true;
        }

        private boolean clear() {
            File[] files = cacheDir.listFiles(new FilenameFilter() {
                @Override
                public boolean accept(File dir, String name) {
                    return name.startsWith(CACHE_PREFIX);
                }
            });
            if (files == null || files.length <= 0) return true;
            boolean flag = true;
            for (File file : files) {
                if (!file.delete()) {
                    flag = false;
                    continue;
                }
                cacheSize.addAndGet(-file.length());
                cacheCount.addAndGet(-1);
                lastUsageDates.remove(file);
            }
            if (flag) {
                lastUsageDates.clear();
                cacheSize.set(0);
                cacheCount.set(0);
            }
            return flag;
        }

        /**
         * Remove the oldest files.
         *
         * @return the size of oldest files, in bytes
         */
        private long removeOldest() {
            if (lastUsageDates.isEmpty()) return 0;
            Long oldestUsage = Long.MAX_VALUE;
            File oldestFile = null;
            Set<Map.Entry<File, Long>> entries = lastUsageDates.entrySet();
            synchronized (lastUsageDates) {
                for (Map.Entry<File, Long> entry : entries) {
                    Long lastValueUsage = entry.getValue();
                    if (lastValueUsage < oldestUsage) {
                        oldestUsage = lastValueUsage;
                        oldestFile = entry.getKey();
                    }
                }
            }
            if (oldestFile == null) return 0;
            long fileSize = oldestFile.length();
            if (oldestFile.delete()) {
                lastUsageDates.remove(oldestFile);
                return fileSize;
            }
            return 0;
        }
    }",False
67,DiskCacheHelper,MemberClass,,,"com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+newByteArrayWithTime(int,byte[]) java.lang.String+getBytes() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+createDueTime(int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+createDueTime(int) java.lang.String+getBytes() java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+createDueTime(int) java.lang.String+format(Locale,String,Object[]) java.lang.String+format(Locale,String,Object[]) java.util.Locale+getDefault() java.util.Locale+getDefault() java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+isDue(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+getDueTime(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+getDueTime(byte[]) java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+getDueTime(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+hasTimeInfo(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+hasTimeInfo(byte[]) java.lang.String+String(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+copyOfRange(byte[],int,int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+copyOfRange(byte[],int,int) java.lang.Long+parseLong(String) java.lang.Long+parseLong(String) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+getDataWithoutDueTime(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+hasTimeInfo(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+hasTimeInfo(byte[]) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+copyOfRange(byte[],int,int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+copyOfRange(byte[],int,int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+copyOfRange(byte[],int,int) java.lang.IllegalArgumentException+IllegalArgumentException(String) java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.System+arraycopy(Object,int,Object,int,int) java.lang.Math+min(int,int) java.lang.Math+min(int,int) com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+hasTimeInfo(byte[])",com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+TIME_INFO_LEN com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+TIME_INFO_LEN com.blankj.utilcode.util.CacheDiskUtils.DiskCacheHelper+TIME_INFO_LEN,2420,66,26,,"private static final class DiskCacheHelper {

        static final int TIME_INFO_LEN = 14;

        private static byte[] newByteArrayWithTime(final int second, final byte[] data) {
            byte[] time = createDueTime(second).getBytes();
            byte[] content = new byte[time.length + data.length];
            System.arraycopy(time, 0, content, 0, time.length);
            System.arraycopy(data, 0, content, time.length, data.length);
            return content;
        }

        /**
         * Return the string of due time.
         *
         * @param seconds The seconds.
         * @return the string of due time
         */
        private static String createDueTime(final int seconds) {
            return String.format(
                    Locale.getDefault(), ""_$%010d$_"",
                    System.currentTimeMillis() / 1000 + seconds
            );
        }

        private static boolean isDue(final byte[] data) {
            long millis = getDueTime(data);
            return millis != -1 && System.currentTimeMillis() > millis;
        }

        private static long getDueTime(final byte[] data) {
            if (hasTimeInfo(data)) {
                String millis = new String(copyOfRange(data, 2, 12));
                try {
                    return Long.parseLong(millis) * 1000;
                } catch (NumberFormatException e) {
                    return -1;
                }
            }
            return -1;
        }

        private static byte[] getDataWithoutDueTime(final byte[] data) {
            if (hasTimeInfo(data)) {
                return copyOfRange(data, TIME_INFO_LEN, data.length);
            }
            return data;
        }

        private static byte[] copyOfRange(final byte[] original, final int from, final int to) {
            int newLength = to - from;
            if (newLength < 0) throw new IllegalArgumentException(from + "" > "" + to);
            byte[] copy = new byte[newLength];
            System.arraycopy(original, from, copy, 0, Math.min(original.length - from, newLength));
            return copy;
        }

        private static boolean hasTimeInfo(final byte[] data) {
            return data != null
                    && data.length >= TIME_INFO_LEN
                    && data[0] == '_'
                    && data[1] == '$'
                    && data[12] == '$'
                    && data[13] == '_';
        }
    }",False
68,string2Bytes(String),Method,"put(String,String,int)",,java.lang.String+getBytes() java.lang.String+getBytes(),,138,4,10,,"private static byte[] string2Bytes(final String string) {
        if (string == null) return null;
        return string.getBytes();
    }",True
69,bytes2String(byte[]),Method,"getString(String,String)",,java.lang.String+String(byte[]),,136,4,10,,"private static String bytes2String(final byte[] bytes) {
        if (bytes == null) return null;
        return new String(bytes);
    }",True
70,jsonObject2Bytes(JSONObject),Method,"put(String,JSONObject,int)",,java.lang.String+getBytes() org.json.JSONObject+toString() org.json.JSONObject+toString() java.lang.String+getBytes(),,169,4,10,,"private static byte[] jsonObject2Bytes(final JSONObject jsonObject) {
        if (jsonObject == null) return null;
        return jsonObject.toString().getBytes();
    }",True
71,bytes2JSONObject(byte[]),Method,"getJSONObject(String,JSONObject)",,org.json.JSONObject+JSONObject(String) java.lang.String+String(byte[]) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,278,9,10,,"private static JSONObject bytes2JSONObject(final byte[] bytes) {
        if (bytes == null) return null;
        try {
            return new JSONObject(new String(bytes));
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }",True
72,jsonArray2Bytes(JSONArray),Method,"put(String,JSONArray,int)",,java.lang.String+getBytes() org.json.JSONArray+toString() org.json.JSONArray+toString() java.lang.String+getBytes(),,164,4,10,,"private static byte[] jsonArray2Bytes(final JSONArray jsonArray) {
        if (jsonArray == null) return null;
        return jsonArray.toString().getBytes();
    }",True
73,bytes2JSONArray(byte[]),Method,"getJSONArray(String,JSONArray)",,org.json.JSONArray+JSONArray(String) java.lang.String+String(byte[]) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,275,9,10,,"private static JSONArray bytes2JSONArray(final byte[] bytes) {
        if (bytes == null) return null;
        try {
            return new JSONArray(new String(bytes));
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }",True
74,parcelable2Bytes(Parcelable),Method,"put(String,Parcelable,int)",,,,296,8,10,,"private static byte[] parcelable2Bytes(final Parcelable parcelable) {
        if (parcelable == null) return null;
        Parcel parcel = Parcel.obtain();
        parcelable.writeToParcel(parcel, 0);
        byte[] bytes = parcel.marshall();
        parcel.recycle();
        return bytes;
    }",True
75,"bytes2Parcelable(byte[],Parcelable.Creator<T>)",Method,,,,,413,10,10,,"private static <T> T bytes2Parcelable(final byte[] bytes,
                                          final Parcelable.Creator<T> creator) {
        if (bytes == null) return null;
        Parcel parcel = Parcel.obtain();
        parcel.unmarshall(bytes, 0, bytes.length);
        parcel.setDataPosition(0);
        T result = creator.createFromParcel(parcel);
        parcel.recycle();
        return result;
    }",True
76,serializable2Bytes(Serializable),Method,"put(String,Serializable,int)",,java.io.ObjectOutputStream+ObjectOutputStream(OutputStream) java.io.ByteArrayOutputStream+ByteArrayOutputStream() java.io.ObjectOutputStream+writeObject(Object) java.io.ObjectOutputStream+writeObject(Object) java.io.ByteArrayOutputStream+toByteArray() java.io.ByteArrayOutputStream+toByteArray() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.io.ObjectOutputStream+close() java.io.ObjectOutputStream+close() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,690,21,10,,"private static byte[] serializable2Bytes(final Serializable serializable) {
        if (serializable == null) return null;
        ByteArrayOutputStream baos;
        ObjectOutputStream oos = null;
        try {
            oos = new ObjectOutputStream(baos = new ByteArrayOutputStream());
            oos.writeObject(serializable);
            return baos.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            try {
                if (oos != null) {
                    oos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }",True
77,bytes2Object(byte[]),Method,"getSerializable(String,Object)",,java.io.ObjectInputStream+ObjectInputStream(InputStream) java.io.ByteArrayInputStream+ByteArrayInputStream(byte[]) java.io.ObjectInputStream+readObject() java.io.ObjectInputStream+readObject() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.io.ObjectInputStream+close() java.io.ObjectInputStream+close() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace(),,578,19,10,,"private static Object bytes2Object(final byte[] bytes) {
        if (bytes == null) return null;
        ObjectInputStream ois = null;
        try {
            ois = new ObjectInputStream(new ByteArrayInputStream(bytes));
            return ois.readObject();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            try {
                if (ois != null) {
                    ois.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }",True
78,bitmap2Bytes(Bitmap),Method,"put(String,Bitmap,int) drawable2Bytes(Drawable)",,java.io.ByteArrayOutputStream+ByteArrayOutputStream() java.io.ByteArrayOutputStream+toByteArray() java.io.ByteArrayOutputStream+toByteArray(),,268,6,10,,"private static byte[] bitmap2Bytes(final Bitmap bitmap) {
        if (bitmap == null) return null;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
        return baos.toByteArray();
    }",True
79,bytes2Bitmap(byte[]),Method,"getBitmap(String,Bitmap) bytes2Drawable(byte[])",,,,210,5,10,,"private static Bitmap bytes2Bitmap(final byte[] bytes) {
        return (bytes == null || bytes.length <= 0)
                ? null
                : BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
    }",True
80,drawable2Bytes(Drawable),Method,"put(String,Drawable,int)",,com.blankj.utilcode.util.CacheDiskUtils+bitmap2Bytes(Bitmap) com.blankj.utilcode.util.CacheDiskUtils+bitmap2Bytes(Bitmap) com.blankj.utilcode.util.CacheDiskUtils+drawable2Bitmap(Drawable) com.blankj.utilcode.util.CacheDiskUtils+drawable2Bitmap(Drawable),,151,3,10,,"private static byte[] drawable2Bytes(final Drawable drawable) {
        return drawable == null ? null : bitmap2Bytes(drawable2Bitmap(drawable));
    }",True
81,bytes2Drawable(byte[]),Method,"getDrawable(String,Drawable)",,com.blankj.utilcode.util.CacheDiskUtils+bitmap2Drawable(Bitmap) com.blankj.utilcode.util.CacheDiskUtils+bitmap2Drawable(Bitmap) com.blankj.utilcode.util.CacheDiskUtils+bytes2Bitmap(byte[]) com.blankj.utilcode.util.CacheDiskUtils+bytes2Bitmap(byte[]),,142,3,10,,"private static Drawable bytes2Drawable(final byte[] bytes) {
        return bytes == null ? null : bitmap2Drawable(bytes2Bitmap(bytes));
    }",True
82,drawable2Bitmap(Drawable),Method,drawable2Bytes(Drawable),,java.lang.Object+Object(),,1229,30,10,,"private static Bitmap drawable2Bitmap(final Drawable drawable) {
        if (drawable instanceof BitmapDrawable) {
            BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
            if (bitmapDrawable.getBitmap() != null) {
                return bitmapDrawable.getBitmap();
            }
        }
        Bitmap bitmap;
        if (drawable.getIntrinsicWidth() <= 0 || drawable.getIntrinsicHeight() <= 0) {
            bitmap = Bitmap.createBitmap(
                    1,
                    1,
                    drawable.getOpacity() != PixelFormat.OPAQUE
                            ? Bitmap.Config.ARGB_8888
                            : Bitmap.Config.RGB_565
            );
        } else {
            bitmap = Bitmap.createBitmap(
                    drawable.getIntrinsicWidth(),
                    drawable.getIntrinsicHeight(),
                    drawable.getOpacity() != PixelFormat.OPAQUE
                            ? Bitmap.Config.ARGB_8888
                            : Bitmap.Config.RGB_565
            );
        }
        Canvas canvas = new Canvas(bitmap);
        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        drawable.draw(canvas);
        return bitmap;
    }",True
83,bitmap2Drawable(Bitmap),Method,bytes2Drawable(byte[]),,java.lang.Object+Object() com.blankj.utilcode.util.Utils+getApp() com.blankj.utilcode.util.Utils+getApp(),,198,5,10,,"private static Drawable bitmap2Drawable(final Bitmap bitmap) {
        return bitmap == null
                ? null
                : new BitmapDrawable(Utils.getApp().getResources(), bitmap);
    }",True
84,"writeFileFromBytes(File,byte[])",Method,"realPutBytes(String,byte[],int)",,"java.io.FileOutputStream+getChannel() java.io.FileOutputStream+FileOutputStream(File,boolean) java.io.FileOutputStream+getChannel() java.nio.channels.FileChannel+write(ByteBuffer) java.nio.channels.FileChannel+write(ByteBuffer) java.nio.ByteBuffer+wrap(byte[]) java.nio.ByteBuffer+wrap(byte[]) java.nio.channels.FileChannel+force(boolean) java.nio.channels.FileChannel+force(boolean) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.nio.channels.spi.AbstractInterruptibleChannel+close() java.nio.channels.spi.AbstractInterruptibleChannel+close() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()",,555,18,10,,"private static void writeFileFromBytes(final File file, final byte[] bytes) {
        FileChannel fc = null;
        try {
            fc = new FileOutputStream(file, false).getChannel();
            fc.write(ByteBuffer.wrap(bytes));
            fc.force(true);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fc != null) {
                    fc.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }",True
85,readFile2Bytes(File),Method,"realGetBytes(String,byte[])",,"java.io.RandomAccessFile+getChannel() java.io.RandomAccessFile+RandomAccessFile(File,String) java.io.RandomAccessFile+getChannel() java.nio.channels.FileChannel+size() java.nio.channels.FileChannel+size() java.nio.MappedByteBuffer+load() java.nio.channels.FileChannel+map(MapMode,long,long) java.nio.channels.FileChannel+map(MapMode,long,long) java.nio.MappedByteBuffer+load() java.nio.ByteBuffer+get(byte[],int,int) java.nio.ByteBuffer+get(byte[],int,int) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() java.nio.channels.spi.AbstractInterruptibleChannel+close() java.nio.channels.spi.AbstractInterruptibleChannel+close() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()",java.nio.channels.FileChannel.MapMode+READ_ONLY,715,22,10,,"private static byte[] readFile2Bytes(final File file) {
        FileChannel fc = null;
        try {
            fc = new RandomAccessFile(file, ""r"").getChannel();
            int size = (int) fc.size();
            MappedByteBuffer mbb = fc.map(FileChannel.MapMode.READ_ONLY, 0, size).load();
            byte[] data = new byte[size];
            mbb.get(data, 0, size);
            return data;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        } finally {
            try {
                if (fc != null) {
                    fc.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }",True
86,isSpace(String),Method,"getInstance(String,long,int)",,java.lang.String+length() java.lang.String+length() java.lang.Character+isWhitespace(char) java.lang.Character+isWhitespace(char) java.lang.String+charAt(int) java.lang.String+charAt(int),,279,9,10,,"private static boolean isSpace(final String s) {
        if (s == null) return true;
        for (int i = 0, len = s.length(); i < len; ++i) {
            if (!Character.isWhitespace(s.charAt(i))) {
                return false;
            }
        }
        return true;
    }",True
