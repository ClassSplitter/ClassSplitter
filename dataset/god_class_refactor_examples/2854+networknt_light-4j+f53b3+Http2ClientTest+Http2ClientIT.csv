index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,logger,Field,,,,,76,1,24,,static final Logger logger = LoggerFactory.getLogger(Http2ClientTest.class);,False
2,server,Field,,,,,30,1,8,,static Undertow server = null;,False
3,sslContext,Field,,,,,29,1,8,,static SSLContext sslContext;,False
4,message,Field,,,,,53,1,26,,"private static final String message = ""Hello World!"";",False
5,MESSAGE,Field,,,,,48,1,25,,"public static final String MESSAGE = ""/message"";",False
6,POST,Field,,,,,42,1,25,,"public static final String POST = ""/post"";",False
7,FORM,Field,,,,,42,1,25,,"public static final String FORM = ""/form"";",False
8,TOKEN,Field,,,,,51,1,25,,"public static final String TOKEN = ""/oauth2/token"";",False
9,API,Field,,,,,40,1,25,,"public static final String API = ""/api"";",False
10,KEY,Field,,,,,47,1,25,,"public static final String KEY = ""/oauth2/key"";",False
11,SERVER_KEY_STORE,Field,,,,,69,1,26,,"private static final String SERVER_KEY_STORE = ""tls/server.keystore"";",False
12,SERVER_TRUST_STORE,Field,,,,,73,1,26,,"private static final String SERVER_TRUST_STORE = ""tls/server.truststore"";",False
13,CLIENT_KEY_STORE,Field,,,,,69,1,26,,"private static final String CLIENT_KEY_STORE = ""tls/client.keystore"";",False
14,CLIENT_TRUST_STORE,Field,,,,,73,1,26,,"private static final String CLIENT_TRUST_STORE = ""tls/client.truststore"";",False
15,STORE_PASSWORD,Field,,,,,70,1,26,,"private static final char[] STORE_PASSWORD = ""password"".toCharArray();",False
16,worker,Field,,,,,33,1,10,,private static XnioWorker worker;,False
17,ADDRESS,Field,,,,,33,1,26,,private static final URI ADDRESS;,False
18,sendMessage(HttpServerExchange),Method,,,java.lang.String+length() java.lang.String+length(),com.networknt.client.Http2ClientTest+message com.networknt.client.Http2ClientTest+message,294,6,8,,"static void sendMessage(final HttpServerExchange exchange) {
        exchange.setStatusCode(StatusCodes.OK);
        exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH, message.length() + """");
        final Sender sender = exchange.getResponseSender();
        sender.send(message);
    }",False
19,beforeClass(),Method,,,"java.io.PrintStream+println(String) java.io.PrintStream+println(String) com.networknt.client.Http2ClientTest+createSSLContext(KeyStore,KeyStore,boolean) com.networknt.client.Http2ClientTest+createSSLContext(KeyStore,KeyStore,boolean) com.networknt.client.Http2ClientTest+loadKeyStore(String) com.networknt.client.Http2ClientTest+loadKeyStore(String) com.networknt.client.Http2ClientTest+loadKeyStore(String) com.networknt.client.Http2ClientTest+loadKeyStore(String) java.lang.Runtime+availableProcessors() java.lang.Runtime+getRuntime() java.lang.Runtime+getRuntime() java.lang.Runtime+availableProcessors()",com.networknt.client.Http2Client+DEFAULT_OPTIONS com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2ClientTest+server java.lang.System+out com.networknt.client.Http2ClientTest+sslContext com.networknt.client.Http2ClientTest+SERVER_KEY_STORE com.networknt.client.Http2ClientTest+SERVER_TRUST_STORE com.networknt.client.Http2ClientTest+sslContext com.networknt.client.Http2ClientTest+server com.networknt.client.Http2ClientTest+MESSAGE com.networknt.client.Http2ClientTest+KEY com.networknt.client.Http2ClientTest+API com.networknt.client.Http2ClientTest+FORM,5159,83,9,,"@BeforeClass
    public static void beforeClass() throws IOException {
        // Create xnio worker
        final Xnio xnio = Xnio.getInstance();
        final XnioWorker xnioWorker = xnio.createWorker(null, Http2Client.DEFAULT_OPTIONS);
        worker = xnioWorker;

        if(server == null) {
            System.out.println(""starting server"");
            Undertow.Builder builder = Undertow.builder();

            sslContext = createSSLContext(loadKeyStore(SERVER_KEY_STORE), loadKeyStore(SERVER_TRUST_STORE), false);
            builder.addHttpsListener(7778, ""localhost"", sslContext);
            builder.addHttpListener(7777, ""localhost"");

            builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true);


            server = builder
                    .setBufferSize(1024 * 16)
                    .setIoThreads(Runtime.getRuntime().availableProcessors() * 2) //this seems slightly faster in some configurations
                    .setSocketOption(Options.BACKLOG, 10000)
                    .setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, false) //don't send a keep-alive header for HTTP/1.1 requests, as it is not required
                    .setServerOption(UndertowOptions.ALWAYS_SET_DATE, true)
                    .setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false)
                    .setHandler(new PathHandler()
                            .addExactPath(MESSAGE, exchange -> sendMessage(exchange))
                            .addExactPath(KEY, exchange -> sendMessage(exchange))
                            .addExactPath(API, (exchange) -> {
                                boolean hasScopeToken = exchange.getRequestHeaders().contains(Constants.SCOPE_TOKEN);
                                Assert.assertTrue(hasScopeToken);
                                String scopeToken = exchange.getRequestHeaders().get(Constants.SCOPE_TOKEN, 0);
                                boolean expired = isTokenExpired(scopeToken);
                                Assert.assertFalse(expired);
                                exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, ""application/json"");
                                exchange.getResponseSender().send(ByteBuffer.wrap(
                                        Config.getInstance().getMapper().writeValueAsBytes(
                                                Collections.singletonMap(""message"", ""OK!""))));

                            })
                            .addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {
                                @Override
                                public void handle(HttpServerExchange exchange, String message) {
                                    exchange.getResponseSender().send(message);
                                }
                            }))
                            .addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {
                                @Override
                                public void handle(HttpServerExchange exchange, String message) {
                                    try {
                                        int sleepTime = randInt(1, 3) * 1000;
                                        if(sleepTime >= 2000) {
                                            sleepTime = 3000;
                                        } else {
                                            sleepTime = 1000;
                                        }
                                        Thread.sleep(sleepTime);
                                        // create a token that expired in 5 seconds.
                                        Map<String, Object> map = new HashMap<>();
                                        String token = getJwt(5);
                                        map.put(""access_token"", token);
                                        map.put(""token_type"", ""Bearer"");
                                        map.put(""expires_in"", 5);
                                        exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, ""application/json"");
                                        exchange.getResponseSender().send(ByteBuffer.wrap(
                                                Config.getInstance().getMapper().writeValueAsBytes(map)));
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }))
                            .addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {
                                @Override
                                public void handle(HttpServerExchange exchange, String message) {
                                    exchange.getResponseSender().send(message);
                                }
                            })))
                    .setWorkerThreads(200)
                    .build();

            server.start();
        }
    }",False
20,afterClass(),Method,,,java.lang.Thread+sleep(long) java.lang.Thread+sleep(long) java.io.PrintStream+println(String) java.io.PrintStream+println(String) java.lang.Thread+sleep(long) java.lang.Thread+sleep(long),com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2ClientTest+server com.networknt.client.Http2ClientTest+server java.lang.System+out,447,17,9,,"@AfterClass
    public static void afterClass() {
        worker.shutdown();
        if(server != null) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ignored) {
            }
            server.stop();
            System.out.println(""The server is stopped."");
            try {
                Thread.sleep(100);
            } catch (InterruptedException ignored) {
            }
        }

    }",False
21,createClient(),Method,testMultipleHttpGet() testMultipleHttpPost() testMultipleHttpGetSsl() testMultipleHttp2GetSsl() testMultipleHttpPostSsl() testMultipleHttp2PostSsl() testSingleHttp2PostSsl() testSingleHttp2FormSsl() testConnectionClose() callApiAsync(),,com.networknt.client.Http2ClientTest+createClient(OptionMap) com.networknt.client.Http2ClientTest+createClient(OptionMap),,87,3,8,,"static Http2Client createClient() {
        return createClient(OptionMap.EMPTY);
    }",False
22,createClient(OptionMap),Method,createClient(),,com.networknt.client.Http2Client+getInstance() com.networknt.client.Http2Client+getInstance(),,106,3,8,,"static Http2Client createClient(final OptionMap options) {
        return Http2Client.getInstance();
    }",False
23,testMultipleHttpGet(),Method,,,"com.networknt.client.Http2ClientTest+createClient() com.networknt.client.Http2ClientTest+createClient() java.util.concurrent.CountDownLatch+CountDownLatch(int) com.networknt.client.Http2Client+connect(URI,XnioWorker,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+connect(URI,XnioWorker,ByteBufferPool,OptionMap) +() +run()",com.networknt.client.Http2ClientTest+ADDRESS com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+POOL,1569,34,1,,"@Test
    public void testMultipleHttpGet() throws Exception {
        //
        final Http2Client client = createClient();

        final List<AtomicReference<ClientResponse>> references = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(10);
        final ClientConnection connection = client.connect(ADDRESS, worker, Http2Client.POOL, OptionMap.EMPTY).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 10; i++) {
                        AtomicReference<ClientResponse> reference = new AtomicReference<>();
                        references.add(i, reference);
                        final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);
                        request.getRequestHeaders().put(Headers.HOST, ""localhost"");
                        connection.sendRequest(request, client.createClientCallback(reference, latch));
                    }
                }

            });

            latch.await(10, TimeUnit.SECONDS);

            Assert.assertEquals(10, references.size());
            for (final AtomicReference<ClientResponse> reference : references) {
                Assert.assertEquals(message, reference.get().getAttachment(Http2Client.RESPONSE_BODY));
                Assert.assertEquals(""HTTP/1.1"", reference.get().getProtocol().toString());
            }
        } finally {
            IoUtils.safeClose(connection);
        }
    }",True
24,testMultipleHttpPost(),Method,,,"com.networknt.client.Http2ClientTest+createClient() com.networknt.client.Http2ClientTest+createClient() java.util.concurrent.CountDownLatch+CountDownLatch(int) com.networknt.client.Http2Client+connect(URI,XnioWorker,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+connect(URI,XnioWorker,ByteBufferPool,OptionMap) +() +run()",com.networknt.client.Http2ClientTest+ADDRESS com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+POOL,3289,69,1,,"@Test
    public void testMultipleHttpPost() throws Exception {
        //
        final Http2Client client = createClient();
        final String postMessage = ""This is a post request"";

        final List<String> responses = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(10);
        final ClientConnection connection = client.connect(ADDRESS, worker, Http2Client.POOL, OptionMap.EMPTY).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 10; i++) {
                        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(POST);
                        request.getRequestHeaders().put(Headers.HOST, ""localhost"");
                        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");
                        connection.sendRequest(request, new ClientCallback<ClientExchange>() {
                            @Override
                            public void completed(ClientExchange result) {
                                new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());
                                result.setResponseListener(new ClientCallback<ClientExchange>() {
                                    @Override
                                    public void completed(ClientExchange result) {
                                        new StringReadChannelListener(Http2Client.POOL) {

                                            @Override
                                            protected void stringDone(String string) {
                                                responses.add(string);
                                                latch.countDown();
                                            }

                                            @Override
                                            protected void error(IOException e) {
                                                e.printStackTrace();
                                                latch.countDown();
                                            }
                                        }.setup(result.getResponseChannel());
                                    }

                                    @Override
                                    public void failed(IOException e) {
                                        e.printStackTrace();
                                        latch.countDown();
                                    }
                                });
                            }

                            @Override
                            public void failed(IOException e) {
                                e.printStackTrace();
                                latch.countDown();
                            }
                        });
                    }
                }

            });

            latch.await(10, TimeUnit.SECONDS);

            Assert.assertEquals(10, responses.size());
            for (final String response : responses) {
                Assert.assertEquals(postMessage, response);
            }
        } finally {
            IoUtils.safeClose(connection);
        }
    }",True
25,testMultipleHttpGetSsl(),Method,,,"com.networknt.client.Http2ClientTest+createClient() com.networknt.client.Http2ClientTest+createClient() java.util.concurrent.CountDownLatch+CountDownLatch(int) com.networknt.client.Http2Client+createSSLContext() com.networknt.client.Http2Client+createSSLContext() java.lang.Object+Object() com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) java.net.URI+URI(String) +() +run()",com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+SSL_BUFFER_POOL com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+POOL,1942,42,1,,"@Test
    public void testMultipleHttpGetSsl() throws Exception {
        //
        final Http2Client client = createClient();

        final List<AtomicReference<ClientResponse>> references = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(10);
        SSLContext context = client.createSSLContext();
        XnioSsl ssl = new UndertowXnioSsl(worker.getXnio(), OptionMap.EMPTY, Http2Client.SSL_BUFFER_POOL, context);

        final ClientConnection connection = client.connect(new URI(""https://localhost:7778""), worker, ssl, Http2Client.POOL, OptionMap.EMPTY).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 10; i++) {
                        AtomicReference<ClientResponse> reference = new AtomicReference<>();
                        references.add(i, reference);
                        final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);
                        request.getRequestHeaders().put(Headers.HOST, ""localhost"");
                        connection.sendRequest(request, client.createClientCallback(reference, latch));
                    }
                }

            });

            latch.await(10, TimeUnit.SECONDS);

            Assert.assertEquals(10, references.size());
            for (final AtomicReference<ClientResponse> reference : references) {
                Assert.assertEquals(message, reference.get().getAttachment(Http2Client.RESPONSE_BODY));
                Assert.assertEquals(""HTTP/1.1"", reference.get().getProtocol().toString());
            }
        } finally {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    IoUtils.safeClose(connection);
                }
            });
        }
    }",True
26,testMultipleHttp2GetSsl(),Method,,,"com.networknt.client.Http2ClientTest+createClient() com.networknt.client.Http2ClientTest+createClient() java.util.concurrent.CountDownLatch+CountDownLatch(int) com.networknt.client.Http2Client+createSSLContext() com.networknt.client.Http2Client+createSSLContext() java.lang.Object+Object() com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) java.net.URI+URI(String) +() +run()",com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+SSL_BUFFER_POOL com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+POOL,1980,42,1,,"@Test
    public void testMultipleHttp2GetSsl() throws Exception {
        //
        final Http2Client client = createClient();

        final List<AtomicReference<ClientResponse>> references = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(10);
        SSLContext context = client.createSSLContext();
        XnioSsl ssl = new UndertowXnioSsl(worker.getXnio(), OptionMap.EMPTY, Http2Client.SSL_BUFFER_POOL, context);

        final ClientConnection connection = client.connect(new URI(""https://localhost:7778""), worker, ssl, Http2Client.POOL, OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 10; i++) {
                        AtomicReference<ClientResponse> reference = new AtomicReference<>();
                        references.add(i, reference);
                        final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);
                        request.getRequestHeaders().put(Headers.HOST, ""localhost"");
                        connection.sendRequest(request, client.createClientCallback(reference, latch));
                    }
                }

            });

            latch.await(10, TimeUnit.SECONDS);

            Assert.assertEquals(10, references.size());
            for (final AtomicReference<ClientResponse> reference : references) {
                Assert.assertEquals(message, reference.get().getAttachment(Http2Client.RESPONSE_BODY));
                Assert.assertEquals(""HTTP/2.0"", reference.get().getProtocol().toString());
            }
        } finally {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    IoUtils.safeClose(connection);
                }
            });
        }
    }",True
27,testMultipleHttpPostSsl(),Method,,,"com.networknt.client.Http2ClientTest+createClient() com.networknt.client.Http2ClientTest+createClient() java.util.concurrent.CountDownLatch+CountDownLatch(int) com.networknt.client.Http2Client+createSSLContext() com.networknt.client.Http2Client+createSSLContext() java.lang.Object+Object() com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) java.net.URI+URI(String) +() +run()",com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+SSL_BUFFER_POOL com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+POOL,3496,72,1,,"@Test
    public void testMultipleHttpPostSsl() throws Exception {
        //
        final Http2Client client = createClient();
        final String postMessage = ""This is a post request"";

        final List<String> responses = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(10);
        SSLContext context = client.createSSLContext();
        XnioSsl ssl = new UndertowXnioSsl(worker.getXnio(), OptionMap.EMPTY, Http2Client.SSL_BUFFER_POOL, context);

        final ClientConnection connection = client.connect(new URI(""https://localhost:7778""), worker, ssl, Http2Client.POOL, OptionMap.EMPTY).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 10; i++) {
                        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(POST);
                        request.getRequestHeaders().put(Headers.HOST, ""localhost"");
                        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");
                        connection.sendRequest(request, new ClientCallback<ClientExchange>() {
                            @Override
                            public void completed(ClientExchange result) {
                                new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());
                                result.setResponseListener(new ClientCallback<ClientExchange>() {
                                    @Override
                                    public void completed(ClientExchange result) {
                                        new StringReadChannelListener(Http2Client.POOL) {

                                            @Override
                                            protected void stringDone(String string) {
                                                responses.add(string);
                                                latch.countDown();
                                            }

                                            @Override
                                            protected void error(IOException e) {
                                                e.printStackTrace();
                                                latch.countDown();
                                            }
                                        }.setup(result.getResponseChannel());
                                    }

                                    @Override
                                    public void failed(IOException e) {
                                        e.printStackTrace();
                                        latch.countDown();
                                    }
                                });
                            }

                            @Override
                            public void failed(IOException e) {
                                e.printStackTrace();
                                latch.countDown();
                            }
                        });
                    }
                }

            });

            latch.await(10, TimeUnit.SECONDS);

            Assert.assertEquals(10, responses.size());
            for (final String response : responses) {
                Assert.assertEquals(postMessage, response);
            }
        } finally {
            IoUtils.safeClose(connection);
        }
    }",True
28,testMultipleHttp2PostSsl(),Method,,,"com.networknt.client.Http2ClientTest+createClient() com.networknt.client.Http2ClientTest+createClient() java.util.concurrent.CountDownLatch+CountDownLatch(int) com.networknt.client.Http2Client+createSSLContext() com.networknt.client.Http2Client+createSSLContext() java.lang.Object+Object() com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) java.net.URI+URI(String) +() +run()",com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+SSL_BUFFER_POOL com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+POOL,3534,72,1,,"@Test
    public void testMultipleHttp2PostSsl() throws Exception {
        //
        final Http2Client client = createClient();
        final String postMessage = ""This is a post request"";

        final List<String> responses = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(10);
        SSLContext context = client.createSSLContext();
        XnioSsl ssl = new UndertowXnioSsl(worker.getXnio(), OptionMap.EMPTY, Http2Client.SSL_BUFFER_POOL, context);

        final ClientConnection connection = client.connect(new URI(""https://localhost:7778""), worker, ssl, Http2Client.POOL, OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 10; i++) {
                        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(POST);
                        request.getRequestHeaders().put(Headers.HOST, ""localhost"");
                        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");
                        connection.sendRequest(request, new ClientCallback<ClientExchange>() {
                            @Override
                            public void completed(ClientExchange result) {
                                new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());
                                result.setResponseListener(new ClientCallback<ClientExchange>() {
                                    @Override
                                    public void completed(ClientExchange result) {
                                        new StringReadChannelListener(Http2Client.POOL) {

                                            @Override
                                            protected void stringDone(String string) {
                                                responses.add(string);
                                                latch.countDown();
                                            }

                                            @Override
                                            protected void error(IOException e) {
                                                e.printStackTrace();
                                                latch.countDown();
                                            }
                                        }.setup(result.getResponseChannel());
                                    }

                                    @Override
                                    public void failed(IOException e) {
                                        e.printStackTrace();
                                        latch.countDown();
                                    }
                                });
                            }

                            @Override
                            public void failed(IOException e) {
                                e.printStackTrace();
                                latch.countDown();
                            }
                        });
                    }
                }

            });

            latch.await(10, TimeUnit.SECONDS);

            Assert.assertEquals(10, responses.size());
            for (final String response : responses) {
                Assert.assertEquals(postMessage, response);
            }
        } finally {
            IoUtils.safeClose(connection);
        }
    }",True
29,testSingleHttp2PostSsl(),Method,,,"com.networknt.client.Http2ClientTest+createClient() com.networknt.client.Http2ClientTest+createClient() java.util.concurrent.CountDownLatch+CountDownLatch(int) com.networknt.client.Http2Client+createSSLContext() com.networknt.client.Http2Client+createSSLContext() java.lang.Object+Object() com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) java.net.URI+URI(String) +() +run()",com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+SSL_BUFFER_POOL com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+POOL,3312,69,1,,"@Test
    public void testSingleHttp2PostSsl() throws Exception {
        //
        final Http2Client client = createClient();
        final String postMessage = ""This is a post request"";

        final List<String> responses = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(1);
        SSLContext context = client.createSSLContext();
        XnioSsl ssl = new UndertowXnioSsl(worker.getXnio(), OptionMap.EMPTY, Http2Client.SSL_BUFFER_POOL, context);

        final ClientConnection connection = client.connect(new URI(""https://localhost:7778""), worker, ssl, Http2Client.POOL, OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(POST);
                    request.getRequestHeaders().put(Headers.HOST, ""localhost"");
                    request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");
                    connection.sendRequest(request, new ClientCallback<ClientExchange>() {
                        @Override
                        public void completed(ClientExchange result) {
                            new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());
                            result.setResponseListener(new ClientCallback<ClientExchange>() {
                                @Override
                                public void completed(ClientExchange result) {
                                    new StringReadChannelListener(Http2Client.POOL) {

                                        @Override
                                        protected void stringDone(String string) {
                                            responses.add(string);
                                            latch.countDown();
                                        }

                                        @Override
                                        protected void error(IOException e) {
                                            e.printStackTrace();
                                            latch.countDown();
                                        }
                                    }.setup(result.getResponseChannel());
                                }

                                @Override
                                public void failed(IOException e) {
                                    e.printStackTrace();
                                    latch.countDown();
                                }
                            });
                        }

                        @Override
                        public void failed(IOException e) {
                            e.printStackTrace();
                            latch.countDown();
                        }
                    });
                }
            });

            latch.await(10, TimeUnit.SECONDS);

            Assert.assertEquals(1, responses.size());
            for (final String response : responses) {
                Assert.assertEquals(postMessage, response);
            }
        } finally {
            IoUtils.safeClose(connection);
        }
    }",False
30,testSingleHttp2FormSsl(),Method,,,"com.networknt.client.Http2ClientTest+createClient() com.networknt.client.Http2ClientTest+createClient() java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) com.networknt.client.Http2Client+getFormDataString(Map<String,String>) com.networknt.client.Http2Client+getFormDataString(Map<String,String>) java.util.concurrent.CountDownLatch+CountDownLatch(int) com.networknt.client.Http2Client+createSSLContext() com.networknt.client.Http2Client+createSSLContext() java.lang.Object+Object() com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+connect(URI,XnioWorker,XnioSsl,ByteBufferPool,OptionMap) java.net.URI+URI(String) +() +run()",com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+SSL_BUFFER_POOL com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+POOL,3649,75,1,,"@Test
    public void testSingleHttp2FormSsl() throws Exception {
        //
        final Http2Client client = createClient();
        Map<String, String> params = new HashMap<>();
        params.put(""key1"", ""value1"");
        params.put(""key2"", ""value2"");

        final String postMessage = client.getFormDataString(params);

        final List<String> responses = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(1);
        SSLContext context = client.createSSLContext();
        XnioSsl ssl = new UndertowXnioSsl(worker.getXnio(), OptionMap.EMPTY, Http2Client.SSL_BUFFER_POOL, context);

        final ClientConnection connection = client.connect(new URI(""https://localhost:7778""), worker, ssl, Http2Client.POOL, OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(FORM);
                    request.getRequestHeaders().put(Headers.HOST, ""localhost"");
                    request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");
                    request.getRequestHeaders().put(Headers.CONTENT_TYPE, ""application/x-www-form-urlencoded"");
                    connection.sendRequest(request, new ClientCallback<ClientExchange>() {
                        @Override
                        public void completed(ClientExchange result) {
                            new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());
                            result.setResponseListener(new ClientCallback<ClientExchange>() {
                                @Override
                                public void completed(ClientExchange result) {
                                    new StringReadChannelListener(Http2Client.POOL) {

                                        @Override
                                        protected void stringDone(String string) {
                                            System.out.println(""string = "" + string);
                                            responses.add(string);
                                            latch.countDown();
                                        }

                                        @Override
                                        protected void error(IOException e) {
                                            e.printStackTrace();
                                            latch.countDown();
                                        }
                                    }.setup(result.getResponseChannel());
                                }

                                @Override
                                public void failed(IOException e) {
                                    e.printStackTrace();
                                    latch.countDown();
                                }
                            });
                        }

                        @Override
                        public void failed(IOException e) {
                            e.printStackTrace();
                            latch.countDown();
                        }
                    });
                }
            });

            latch.await(10, TimeUnit.SECONDS);

            Assert.assertEquals(1, responses.size());
            for (final String response : responses) {
                Assert.assertEquals(postMessage, response);
            }
        } finally {
            IoUtils.safeClose(connection);
        }
    }",False
31,testConnectionClose(),Method,,,"com.networknt.client.Http2ClientTest+createClient() com.networknt.client.Http2ClientTest+createClient() java.util.concurrent.CountDownLatch+CountDownLatch(int) com.networknt.client.Http2Client+connect(URI,XnioWorker,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+connect(URI,XnioWorker,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+createClientCallback(AtomicReference<ClientResponse>,CountDownLatch) com.networknt.client.Http2Client+createClientCallback(AtomicReference<ClientResponse>,CountDownLatch) java.util.concurrent.CountDownLatch+await() java.util.concurrent.CountDownLatch+await()",com.networknt.client.Http2ClientTest+ADDRESS com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+POOL com.networknt.client.Http2ClientTest+MESSAGE com.networknt.client.Http2ClientTest+message com.networknt.client.Http2Client+RESPONSE_BODY,1078,22,1,,"@Test
    public void testConnectionClose() throws Exception {
        //
        final Http2Client client = createClient();

        final CountDownLatch latch = new CountDownLatch(1);
        final ClientConnection connection = client.connect(ADDRESS, worker, Http2Client.POOL, OptionMap.EMPTY).get();
        try {
            ClientRequest request = new ClientRequest().setPath(MESSAGE).setMethod(Methods.GET);
            request.getRequestHeaders().put(Headers.HOST, ""localhost"");
            final AtomicReference<ClientResponse> reference = new AtomicReference<>();
            request.getRequestHeaders().add(Headers.CONNECTION, Headers.CLOSE.toString());
            connection.sendRequest(request, client.createClientCallback(reference, latch));
            latch.await();
            final ClientResponse response = reference.get();
            Assert.assertEquals(message, response.getAttachment(Http2Client.RESPONSE_BODY));
            Assert.assertEquals(false, connection.isOpen());
        } finally {
            IoUtils.safeClose(connection);
        }

    }",False
32,testSingleAsych(),Method,,,com.networknt.client.Http2ClientTest+callApiAsync() com.networknt.client.Http2ClientTest+callApiAsync(),,88,4,1,,"@Test
    public void testSingleAsych() throws Exception {
        callApiAsync();
    }",False
33,callApiAsync(),Method,testSingleAsych(),,"com.networknt.client.Http2ClientTest+createClient() com.networknt.client.Http2ClientTest+createClient() java.util.concurrent.CountDownLatch+CountDownLatch(int) com.networknt.client.Http2Client+connect(URI,XnioWorker,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+connect(URI,XnioWorker,ByteBufferPool,OptionMap) com.networknt.client.Http2Client+populateHeader(ClientRequest,String,String,String) com.networknt.client.Http2Client+populateHeader(ClientRequest,String,String,String) com.networknt.client.Http2Client+createClientCallback(AtomicReference<ClientResponse>,CountDownLatch) com.networknt.client.Http2Client+createClientCallback(AtomicReference<ClientResponse>,CountDownLatch) java.util.concurrent.CountDownLatch+await() java.util.concurrent.CountDownLatch+await()",com.networknt.client.Http2ClientTest+ADDRESS com.networknt.client.Http2ClientTest+worker com.networknt.client.Http2Client+POOL com.networknt.client.Http2ClientTest+API com.networknt.client.Http2Client+RESPONSE_BODY com.networknt.client.Http2Client+RESPONSE_BODY,1205,20,1,,"public String callApiAsync() throws Exception {
        final Http2Client client = createClient();
        final CountDownLatch latch = new CountDownLatch(1);
        final ClientConnection connection = client.connect(ADDRESS, worker, Http2Client.POOL, OptionMap.EMPTY).get();
        final AtomicReference<ClientResponse> reference = new AtomicReference<>();
        try {
            ClientRequest request = new ClientRequest().setPath(API).setMethod(Methods.GET);
            request.getRequestHeaders().put(Headers.HOST, ""localhost"");
            client.populateHeader(request, ""Bearer token"", ""cid"", ""tid"");
            request.getRequestHeaders().add(Headers.CONNECTION, Headers.CLOSE.toString());
            connection.sendRequest(request, client.createClientCallback(reference, latch));
            latch.await();
            final ClientResponse response = reference.get();
            Assert.assertEquals(""{\""message\"":\""OK!\""}"", response.getAttachment(Http2Client.RESPONSE_BODY));
            Assert.assertEquals(false, connection.isOpen());
        } finally {
            IoUtils.safeClose(connection);
        }
        return reference.get().getAttachment(Http2Client.RESPONSE_BODY);
    }",False
34,testAsyncAboutToExpire(),Method,,,com.networknt.client.Http2ClientTest+callApiAsyncMultiThread(int) com.networknt.client.Http2ClientTest+callApiAsyncMultiThread(int) java.lang.Thread+sleep(long) java.lang.Thread+sleep(long),com.networknt.client.Http2ClientTest+logger,358,11,1,,"@Test
    public void testAsyncAboutToExpire() throws InterruptedException, ExecutionException {
        for(int i = 0; i < 10; i++) {
            callApiAsyncMultiThread(4);
            logger.info(""called times: "" + i);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ignored) {
            }
        }
    }",False
35,testAsyncExpired(),Method,,,com.networknt.client.Http2ClientTest+callApiAsyncMultiThread(int) com.networknt.client.Http2ClientTest+callApiAsyncMultiThread(int) java.lang.Thread+sleep(long) java.lang.Thread+sleep(long),com.networknt.client.Http2ClientTest+logger,352,11,1,,"@Test
    public void testAsyncExpired() throws InterruptedException, ExecutionException {
        for(int i = 0; i < 10; i++) {
            callApiAsyncMultiThread(4);
            logger.info(""called times: "" + i);
            try {
                Thread.sleep(6000);
            } catch (InterruptedException ignored) {
            }
        }
    }",False
36,testMixed(),Method,,,"com.networknt.client.Http2ClientTest+callApiAsyncMultiThread(int) com.networknt.client.Http2ClientTest+callApiAsyncMultiThread(int) com.networknt.client.Http2ClientTest+randInt(int,int) com.networknt.client.Http2ClientTest+randInt(int,int) java.lang.Thread+sleep(long) java.lang.Thread+sleep(long)",com.networknt.client.Http2ClientTest+logger,576,18,1,,"@Test
    public void testMixed() throws InterruptedException, ExecutionException {
        for(int i = 0; i < 10; i++) {
            callApiAsyncMultiThread(4
            );
            logger.info(""called times: "" + i);
            try {
                int sleepTime = randInt(1, 6) * 1000;
                if (sleepTime > 3000) {
                    sleepTime = 6000;
                } else {
                    sleepTime = 1000;
                }
                Thread.sleep(sleepTime);
            } catch (InterruptedException ignored) {
            }
        }
    }",False
37,callApiAsyncMultiThread(int),Method,testAsyncAboutToExpire() testAsyncExpired() testMixed(),,"com.networknt.client.Http2ClientTest+callApiAsync() java.util.Collections+nCopies(int,T) java.util.Collections+nCopies(int,T) java.util.concurrent.Executors+newFixedThreadPool(int) java.util.concurrent.Executors+newFixedThreadPool(int) java.util.concurrent.ExecutorService+invokeAll(Collection) java.util.concurrent.ExecutorService+invokeAll(Collection) java.util.List+size() java.util.List+size() java.util.List+add(E) java.util.List+add(E) java.util.concurrent.Future+get() java.util.concurrent.Future+get() java.io.PrintStream+println(String) java.io.PrintStream+println(String)",java.lang.System+out,629,11,2,,"private void callApiAsyncMultiThread(final int threadCount) throws InterruptedException, ExecutionException {
        Callable<String> task = this::callApiAsync;
        List<Callable<String>> tasks = Collections.nCopies(threadCount, task);
        ExecutorService executorService = Executors.newFixedThreadPool(threadCount);
        List<Future<String>> futures = executorService.invokeAll(tasks);
        List<String> resultList = new ArrayList<>(futures.size());
        for (Future<String> future : futures) {
            resultList.add(future.get());
        }
        System.out.println(""resultList = "" + resultList);
    }",False
38,loadKeyStore(String),Method,beforeClass() beforeClass(),,"com.networknt.config.Config+getInputStreamFromFile(String) com.networknt.config.Config+getInstance() com.networknt.config.Config+getInstance() com.networknt.config.Config+getInputStreamFromFile(String) java.lang.RuntimeException+RuntimeException(String) java.security.KeyStore+getInstance(String) java.security.KeyStore+getInstance(String) java.security.KeyStore+load(InputStream,char[]) java.security.KeyStore+load(InputStream,char[]) java.io.IOException+IOException(String,Throwable) java.lang.String+format(String,Object[]) java.lang.String+format(String,Object[])",com.networknt.client.Http2ClientTest+STORE_PASSWORD,696,16,10,,"private static KeyStore loadKeyStore(final String name) throws IOException {
        final InputStream stream = Config.getInstance().getInputStreamFromFile(name);
        if(stream == null) {
            throw new RuntimeException(""Could not load keystore"");
        }
        try {
            KeyStore loadedKeystore = KeyStore.getInstance(""JKS"");
            loadedKeystore.load(stream, STORE_PASSWORD);

            return loadedKeystore;
        } catch (KeyStoreException | NoSuchAlgorithmException | CertificateException e) {
            throw new IOException(String.format(""Unable to load KeyStore %s"", name), e);
        } finally {
            IoUtils.safeClose(stream);
        }
    }",False
39,"createSSLContext(KeyStore,KeyStore,boolean)",Method,beforeClass(),,"javax.net.ssl.KeyManagerFactory+getInstance(String) javax.net.ssl.KeyManagerFactory+getInstance(String) javax.net.ssl.KeyManagerFactory+getDefaultAlgorithm() javax.net.ssl.KeyManagerFactory+getDefaultAlgorithm() javax.net.ssl.KeyManagerFactory+init(KeyStore,char[]) javax.net.ssl.KeyManagerFactory+init(KeyStore,char[]) javax.net.ssl.KeyManagerFactory+getKeyManagers() javax.net.ssl.KeyManagerFactory+getKeyManagers() java.io.IOException+IOException(String,Throwable) javax.net.ssl.TrustManagerFactory+getInstance(String) javax.net.ssl.TrustManagerFactory+getInstance(String) javax.net.ssl.KeyManagerFactory+getDefaultAlgorithm() javax.net.ssl.KeyManagerFactory+getDefaultAlgorithm() javax.net.ssl.TrustManagerFactory+init(KeyStore) javax.net.ssl.TrustManagerFactory+init(KeyStore) javax.net.ssl.TrustManagerFactory+getTrustManagers() javax.net.ssl.TrustManagerFactory+getTrustManagers() java.io.IOException+IOException(String,Throwable) javax.net.ssl.SSLContext+getInstance(String) javax.net.ssl.SSLContext+getInstance(String) javax.net.ssl.SSLContext+getInstance(String) javax.net.ssl.SSLContext+getInstance(String) javax.net.ssl.SSLContext+init(KeyManager[],TrustManager[],SecureRandom) javax.net.ssl.SSLContext+init(KeyManager[],TrustManager[],SecureRandom) java.io.IOException+IOException(String,Throwable)",com.networknt.client.Http2ClientTest+STORE_PASSWORD,1559,33,10,,"private static SSLContext createSSLContext(final KeyStore keyStore, final KeyStore trustStore, boolean client) throws IOException {
        KeyManager[] keyManagers;
        try {
            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
            keyManagerFactory.init(keyStore, STORE_PASSWORD);
            keyManagers = keyManagerFactory.getKeyManagers();
        } catch (NoSuchAlgorithmException | UnrecoverableKeyException | KeyStoreException e) {
            throw new IOException(""Unable to initialise KeyManager[]"", e);
        }

        TrustManager[] trustManagers = null;
        try {
            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
            trustManagerFactory.init(trustStore);
            trustManagers = trustManagerFactory.getTrustManagers();
        } catch (NoSuchAlgorithmException | KeyStoreException e) {
            throw new IOException(""Unable to initialise TrustManager[]"", e);
        }

        SSLContext sslContext;
        try {
            if(!client) {
                sslContext = SSLContext.getInstance(""TLS"");
            } else {
                sslContext = SSLContext.getInstance(""TLS"");
            }
            sslContext.init(keyManagers, trustManagers, null);
        } catch (NoSuchAlgorithmException | KeyManagementException e) {
            throw new IOException(""Unable to create and initialise the SSLContext"", e);
        }

        return sslContext;
    }",False
40,"randInt(int,int)",Method,testMixed(),,java.util.Random+Random() java.util.Random+nextInt(int) java.util.Random+nextInt(int),,138,4,10,,"private static int randInt(int min, int max) {
        Random rand = new Random();
        return rand.nextInt((max-min) + 1) + min;
    }",False
41,isTokenExpired(String),Method,,,com.networknt.client.Http2ClientTest+getJwtFromAuthorization(String) com.networknt.client.Http2ClientTest+getJwtFromAuthorization(String),com.networknt.client.Http2ClientTest+logger,1049,27,10,,"private static boolean isTokenExpired(String authorization) {
        boolean expired = false;
        String jwt = getJwtFromAuthorization(authorization);
        if(jwt != null) {
            try {
                JwtConsumer consumer = new JwtConsumerBuilder()
                        .setSkipAllValidators()
                        .setDisableRequireSignature()
                        .setSkipSignatureVerification()
                        .build();

                JwtContext jwtContext = consumer.process(jwt);
                JwtClaims jwtClaims = jwtContext.getJwtClaims();

                try {
                    if ((NumericDate.now().getValue() - 60) >= jwtClaims.getExpirationTime().getValue()) {
                        expired = true;
                    }
                } catch (MalformedClaimException e) {
                    logger.error(""MalformedClaimException:"", e);
                }
            } catch(InvalidJwtException e) {
                e.printStackTrace();
            }
        }
        return expired;
    }",False
42,getJwt(int),Method,,,com.networknt.client.Http2ClientTest+getTestClaims() com.networknt.client.Http2ClientTest+getTestClaims() java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() com.networknt.client.Http2ClientTest+getJwt(JwtClaims) com.networknt.client.Http2ClientTest+getJwt(JwtClaims),,268,5,10,,"private static String getJwt(int expiredInSeconds) throws Exception {
        JwtClaims claims = getTestClaims();
        claims.setExpirationTime(NumericDate.fromMilliseconds(System.currentTimeMillis() + expiredInSeconds * 1000));
        return getJwt(claims);
    }",False
43,getTestClaims(),Method,getJwt(int),,java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]),,931,17,10,,"private static JwtClaims getTestClaims() {
        JwtClaims claims = new JwtClaims();
        claims.setIssuer(""urn:com:networknt:oauth2:v1"");
        claims.setAudience(""urn:com.networknt"");
        claims.setExpirationTimeMinutesInTheFuture(10);
        claims.setGeneratedJwtId(); // a unique identifier for the token
        claims.setIssuedAtToNow();  // when the token was issued/created (now)
        claims.setNotBeforeMinutesInThePast(2); // time before which the token is not yet valid (2 minutes ago)
        claims.setClaim(""version"", ""1.0"");

        claims.setClaim(""user_id"", ""steve"");
        claims.setClaim(""user_type"", ""EMPLOYEE"");
        claims.setClaim(""client_id"", ""aaaaaaaa-1234-1234-1234-bbbbbbbb"");
        List<String> scope = Arrays.asList(""api.r"", ""api.w"");
        claims.setStringListClaim(""scope"", scope); // multi-valued claims work too and will end up as a JSON array
        return claims;
    }",False
44,getJwtFromAuthorization(String),Method,isTokenExpired(String),,"java.lang.String+split(String) java.lang.String+split(String) java.util.regex.Pattern+compile(String,int) java.util.regex.Pattern+compile(String,int) java.util.regex.Matcher+matches() java.util.regex.Pattern+matcher(CharSequence) java.util.regex.Pattern+matcher(CharSequence) java.util.regex.Matcher+matches()",java.util.regex.Pattern+CASE_INSENSITIVE,565,15,9,,"public static String getJwtFromAuthorization(String authorization) {
        String jwt = null;
        if(authorization != null) {
            String[] parts = authorization.split("" "");
            if (parts.length == 2) {
                String scheme = parts[0];
                String credentials = parts[1];
                Pattern pattern = Pattern.compile(""^Bearer$"", Pattern.CASE_INSENSITIVE);
                if (pattern.matcher(scheme).matches()) {
                    jwt = credentials;
                }
            }
        }
        return jwt;
    }",False
45,getJwt(JwtClaims),Method,getJwt(int),,"com.networknt.client.Http2ClientTest+getPrivateKey(String,String,String) com.networknt.client.Http2ClientTest+getPrivateKey(String,String,String)",,1208,27,9,,"public static String getJwt(JwtClaims claims) throws JoseException {
        String jwt;

        RSAPrivateKey privateKey = (RSAPrivateKey) getPrivateKey(
                ""/config/oauth/primary.jks"", ""password"", ""selfsigned"");

        // A JWT is a JWS and/or a JWE with JSON claims as the payload.
        // In this example it is a JWS nested inside a JWE
        // So we first create a JsonWebSignature object.
        JsonWebSignature jws = new JsonWebSignature();

        // The payload of the JWS is JSON content of the JWT Claims
        jws.setPayload(claims.toJson());

        // The JWT is signed using the sender's private key
        jws.setKey(privateKey);
        jws.setKeyIdHeaderValue(""100"");

        // Set the signature algorithm on the JWT/JWS that will integrity protect the claims
        jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);

        // Sign the JWS and produce the compact serialization, which will be the inner JWT/JWS
        // representation, which is a string consisting of three dot ('.') separated
        // base64url-encoded parts in the form Header.Payload.Signature
        jwt = jws.getCompactSerialization();
        return jwt;
    }",False
46,"getPrivateKey(String,String,String)",Method,getJwt(JwtClaims),,"java.security.KeyStore+getInstance(String) java.security.KeyStore+getInstance(String) java.security.KeyStore+load(InputStream,char[]) java.security.KeyStore+load(InputStream,char[]) java.lang.Class+getResourceAsStream(String) java.lang.Class+getResourceAsStream(String) java.lang.String+toCharArray() java.lang.String+toCharArray() java.security.KeyStore+getKey(String,char[]) java.security.KeyStore+getKey(String,char[]) java.lang.String+toCharArray() java.lang.String+toCharArray()",com.networknt.client.Http2ClientTest+logger com.networknt.client.Http2ClientTest+logger,664,20,10,,"private static PrivateKey getPrivateKey(String filename, String password, String key) {
        PrivateKey privateKey = null;

        try {
            KeyStore keystore = KeyStore.getInstance(""JKS"");
            keystore.load(Http2Client.class.getResourceAsStream(filename),
                    password.toCharArray());

            privateKey = (PrivateKey) keystore.getKey(key,
                    password.toCharArray());
        } catch (Exception e) {
            logger.error(""Exception:"", e);
        }

        if (privateKey == null) {
            logger.error(""Failed to retrieve private key from keystore"");
        }

        return privateKey;
    }",False
