index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,executorDriver,Field,,,,,48,2,2,,"@Mock
    private ExecutorDriver executorDriver;",False
2,executorInfo,Field,,,,,34,1,2,,private ExecutorInfo executorInfo;,False
3,slaveInfo,Field,,,,,61,1,2,,private SlaveInfo slaveInfo = SlaveInfo.getDefaultInstance();,False
4,frameworkInfo,Field,,,,,73,1,2,,private FrameworkInfo frameworkInfo = FrameworkInfo.getDefaultInstance();,False
5,taskExecutor,Field,,,,,34,1,2,,private TaskExecutor taskExecutor;,False
6,setUp(),Method,,,com.dangdang.ddframe.job.cloud.executor.TaskExecutor+TaskExecutor(),com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorInfo,221,6,1,,"@Before
    public void setUp() throws NoSuchFieldException {
        executorDriver = mock(ExecutorDriver.class);
        taskExecutor = new TaskExecutor();
        executorInfo = ExecutorInfo.getDefaultInstance();
    }",False
7,assertKillTask(),Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutor+killTask(ExecutorDriver,TaskID) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+killTask(ExecutorDriver,TaskID)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,327,6,1,,"@Test
    public void assertKillTask() {
        TaskID taskID = Protos.TaskID.newBuilder().setValue(""task_id"").build();
        taskExecutor.killTask(executorDriver, taskID);
        verify(executorDriver).sendStatusUpdate(Protos.TaskStatus.newBuilder().setTaskId(taskID).setState(Protos.TaskState.TASK_KILLED).build());
    }",False
8,assertLaunchTaskWithDaemonTaskAndJavaSimpleJob(),Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTransientTaskInfo() com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTransientTaskInfo() com.dangdang.ddframe.job.cloud.executor.TaskExecutor+launchTask(ExecutorDriver,TaskInfo) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+launchTask(ExecutorDriver,TaskInfo)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,191,5,1,,"@Test
    public void assertLaunchTaskWithDaemonTaskAndJavaSimpleJob() {
        TaskInfo taskInfo = buildTransientTaskInfo();
        taskExecutor.launchTask(executorDriver, taskInfo);
    }",True
9,assertLaunchTaskWithTransientTaskAndSpringSimpleJob(),Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildDaemonTaskInfo() com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildDaemonTaskInfo() com.dangdang.ddframe.job.cloud.executor.TaskExecutor+launchTask(ExecutorDriver,TaskInfo) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+launchTask(ExecutorDriver,TaskInfo)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,193,5,1,,"@Test
    public void assertLaunchTaskWithTransientTaskAndSpringSimpleJob() {
        TaskInfo taskInfo = buildDaemonTaskInfo();
        taskExecutor.launchTask(executorDriver, taskInfo);
    }",True
10,assertLaunchTaskWithTransientTaskAndJavaScriptJob(),Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildScriptDaemonTaskInfo() com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildScriptDaemonTaskInfo() com.dangdang.ddframe.job.cloud.executor.TaskExecutor+launchTask(ExecutorDriver,TaskInfo) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+launchTask(ExecutorDriver,TaskInfo)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,197,5,1,,"@Test
    public void assertLaunchTaskWithTransientTaskAndJavaScriptJob() {
        TaskInfo taskInfo = buildScriptDaemonTaskInfo();
        taskExecutor.launchTask(executorDriver, taskInfo);
    }",True
11,assertRegisteredWithoutData(),Method,,,"java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) com.google.protobuf.ByteString+copyFrom(byte[]) com.google.protobuf.ByteString+copyFrom(byte[]) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+registered(ExecutorDriver,ExecutorInfo,FrameworkInfo,SlaveInfo) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+registered(ExecutorDriver,ExecutorInfo,FrameworkInfo,SlaveInfo)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+frameworkInfo com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+slaveInfo,769,13,1,,"@Test
    public void assertRegisteredWithoutData() {
        // CHECKSTYLE:OFF
        HashMap<String, String> data = new HashMap<>(4, 1);
        // CHECKSTYLE:ON
        data.put(""event_trace_rdb_driver"", ""org.h2.Driver"");
        data.put(""event_trace_rdb_url"", ""jdbc:h2:mem:test_executor"");
        data.put(""event_trace_rdb_username"", ""sa"");
        data.put(""event_trace_rdb_password"", """");
        ExecutorInfo executorInfo = ExecutorInfo.newBuilder().setExecutorId(Protos.ExecutorID.newBuilder().setValue(""test_executor"")).setCommand(Protos.CommandInfo.getDefaultInstance())
                .setData(ByteString.copyFrom(SerializationUtils.serialize(data))).build();
        taskExecutor.registered(executorDriver, executorInfo, frameworkInfo, slaveInfo);
    }",False
12,assertRegisteredWithData(),Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutor+registered(ExecutorDriver,ExecutorInfo,FrameworkInfo,SlaveInfo) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+registered(ExecutorDriver,ExecutorInfo,FrameworkInfo,SlaveInfo)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorInfo com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+frameworkInfo com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+slaveInfo,145,4,1,,"@Test
    public void assertRegisteredWithData() {
        taskExecutor.registered(executorDriver, executorInfo, frameworkInfo, slaveInfo);
    }",False
13,assertReregistered(),Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutor+reregistered(ExecutorDriver,SlaveInfo) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+reregistered(ExecutorDriver,SlaveInfo)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+slaveInfo,112,4,1,,"@Test
    public void assertReregistered() {
        taskExecutor.reregistered(executorDriver, slaveInfo);
    }",False
14,assertDisconnected(),Method,,,com.dangdang.ddframe.job.cloud.executor.TaskExecutor+disconnected(ExecutorDriver) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+disconnected(ExecutorDriver),com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,101,4,1,,"@Test
    public void assertDisconnected() {
        taskExecutor.disconnected(executorDriver);
    }",False
15,assertFrameworkMessage(),Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutor+frameworkMessage(ExecutorDriver,byte[]) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+frameworkMessage(ExecutorDriver,byte[])",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,115,4,1,,"@Test
    public void assertFrameworkMessage() {
        taskExecutor.frameworkMessage(executorDriver, null);
    }",False
16,assertShutdown(),Method,,,com.dangdang.ddframe.job.cloud.executor.TaskExecutor+shutdown(ExecutorDriver) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+shutdown(ExecutorDriver),com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,93,4,1,,"@Test
    public void assertShutdown() {
        taskExecutor.shutdown(executorDriver);
    }",False
17,assertError(),Method,,,"com.dangdang.ddframe.job.cloud.executor.TaskExecutor+error(ExecutorDriver,String) com.dangdang.ddframe.job.cloud.executor.TaskExecutor+error(ExecutorDriver,String)",com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+taskExecutor com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+executorDriver,91,4,1,,"@Test
    public void assertError() {
        taskExecutor.error(executorDriver, """");
    }",False
18,buildTransientTaskInfo(),Method,assertLaunchTaskWithDaemonTaskAndJavaSimpleJob(),,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTaskInfo(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTaskInfo(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildSpringJobConfigurationContextMap() com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildSpringJobConfigurationContextMap()",,128,3,2,,"private TaskInfo buildTransientTaskInfo() {
        return buildTaskInfo(buildSpringJobConfigurationContextMap()).build();
    }",True
19,buildDaemonTaskInfo(),Method,assertLaunchTaskWithTransientTaskAndSpringSimpleJob(),,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTaskInfo(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTaskInfo(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMapWithJobClassAndCron(String,String) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMapWithJobClassAndCron(String,String) java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName()",,189,3,2,,"private TaskInfo buildDaemonTaskInfo() {
        return buildTaskInfo(buildBaseJobConfigurationContextMapWithJobClassAndCron(TestJob.class.getCanonicalName(), ""ignoredCron"")).build();
    }",True
20,buildScriptDaemonTaskInfo(),Method,assertLaunchTaskWithTransientTaskAndJavaScriptJob(),,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTaskInfo(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildTaskInfo(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMap(String,String,JobType) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMap(String,String,JobType) java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName()",,192,3,2,,"private TaskInfo buildScriptDaemonTaskInfo() {
        return buildTaskInfo(buildBaseJobConfigurationContextMap(TestJob.class.getCanonicalName(), ""ignoredCron"", JobType.SCRIPT)).build();
    }",True
21,"buildTaskInfo(Map<String,String>)",Method,buildTransientTaskInfo() buildDaemonTaskInfo() buildScriptDaemonTaskInfo(),,"com.google.protobuf.ByteString+copyFrom(byte[]) com.google.protobuf.ByteString+copyFrom(byte[]) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+serialize(Map<String,String>) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+serialize(Map<String,String>)",,356,4,2,,"private TaskInfo.Builder buildTaskInfo(final Map<String, String> jobConfigurationContext) {
        return TaskInfo.newBuilder().setData(ByteString.copyFrom(serialize(jobConfigurationContext)))
                .setName(""test_job"").setTaskId(Protos.TaskID.newBuilder().setValue(""task_id"")).setSlaveId(Protos.SlaveID.newBuilder().setValue(""slave-S0""));
    }",True
22,"serialize(Map<String,String>)",Method,"buildTaskInfo(Map<String,String>)",,"com.dangdang.ddframe.job.executor.ShardingContexts+ShardingContexts() java.util.Collections+singletonMap(K,V) java.util.Collections+singletonMap(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V) java.util.HashMap+put(K,V)",,518,9,2,,"private byte[] serialize(final Map<String, String> jobConfigurationContext) {
        // CHECKSTYLE:OFF
        LinkedHashMap<String, Object> result = new LinkedHashMap<>(2, 1);
        // CHECKSTYLE:ON
        ShardingContexts shardingContexts = new ShardingContexts(""fake_task_id"", ""test_job"", 1, """", Collections.singletonMap(1, ""a""));
        result.put(""shardingContext"", shardingContexts);
        result.put(""jobConfigContext"", jobConfigurationContext);
        return SerializationUtils.serialize(result);
    }",True
23,buildSpringJobConfigurationContextMap(),Method,buildTransientTaskInfo(),,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMapWithJobClass(String) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMapWithJobClass(String) java.lang.Class+getCanonicalName() java.lang.Class+getCanonicalName() java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V)",,333,6,2,,"private Map<String, String> buildSpringJobConfigurationContextMap() {
        Map<String, String> context = buildBaseJobConfigurationContextMapWithJobClass(TestJob.class.getCanonicalName());
        context.put(""beanName"", ""testJob"");
        context.put(""applicationContext"", ""applicationContext.xml"");
        return context;
    }",True
24,buildBaseJobConfigurationContextMapWithJobClass(String),Method,buildSpringJobConfigurationContextMap(),,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMapWithJobClassAndCron(String,String) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMapWithJobClassAndCron(String,String)",,204,3,2,,"private Map<String, String> buildBaseJobConfigurationContextMapWithJobClass(final String jobClass) {
        return buildBaseJobConfigurationContextMapWithJobClassAndCron(jobClass, ""0/1 * * * * ?"");
    }",True
25,"buildBaseJobConfigurationContextMapWithJobClassAndCron(String,String)",Method,buildDaemonTaskInfo() buildBaseJobConfigurationContextMapWithJobClass(String),,"com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMap(String,String,JobType) com.dangdang.ddframe.job.cloud.executor.TaskExecutorTest+buildBaseJobConfigurationContextMap(String,String,JobType)",,216,3,2,,"private Map<String, String> buildBaseJobConfigurationContextMapWithJobClassAndCron(final String jobClass, final String cron) {
        return buildBaseJobConfigurationContextMap(jobClass, cron, JobType.SIMPLE);
    }",True
26,"buildBaseJobConfigurationContextMap(String,String,JobType)",Method,"buildScriptDaemonTaskInfo() buildBaseJobConfigurationContextMapWithJobClassAndCron(String,String)",,"java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V)",,433,9,2,,"private Map<String, String> buildBaseJobConfigurationContextMap(final String jobClass, final String cron, final JobType jobType) {
        Map<String, String> result = new HashMap<>();
        result.put(""jobName"", ""test_job"");
        result.put(""cron"", cron);
        result.put(""jobClass"", jobClass);
        result.put(""jobType"", jobType.name());
        result.put(""scriptCommandLine"", ""echo \""\"""");
        return result;
    }",True
