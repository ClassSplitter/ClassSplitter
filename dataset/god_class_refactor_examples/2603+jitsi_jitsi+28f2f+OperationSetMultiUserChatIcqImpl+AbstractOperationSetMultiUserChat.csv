index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,logger,logger ,Field,,,,,106,2,26,,"private static final Logger logger = Logger
           .getLogger(OperationSetMultiUserChatIcqImpl.class);",False,False,,False,
2,icqProvider,icq provider the currently valid icq protocol provider service implementation ,Field,OperationSetMultiUserChatIcqImpl(ProtocolProviderServiceIcqImpl),,,,144,4,2,"/** 
 * The currently valid ICQ protocol provider service implementation.
 */
","/**
    * The currently valid ICQ protocol provider service implementation.
    */
   private ProtocolProviderServiceIcqImpl icqProvider = null;",False,False,"/** 
 * The currently valid ICQ protocol provider service implementation.
 */
",False,"/** 
 * The currently valid ICQ protocol provider service implementation.
 */
"
3,invitationListeners,invitation listeners a list of listeners subscribed for invitations multi user chat events ,Field,,,,,141,4,2,"/** 
 * A list of listeners subscribed for invitations multi user chat events.
 */
","/**
    * A list of listeners subscribed for invitations multi user chat events.
    */
   private Vector invitationListeners = new Vector();",False,True,"/** 
 * A list of listeners subscribed for invitations multi user chat events.
 */
",False,"/** 
 * A list of listeners subscribed for invitations multi user chat events.
 */
"
4,invitationRejectionListeners,invitation rejection listeners a list of listeners subscribed for events indicating rejection of a multi user chat invitation sent by us ,Field,,,,,192,5,2,"/** 
 * A list of listeners subscribed for events indicating rejection of a multi user chat invitation sent by us.
 */
","/**
    * A list of listeners subscribed for events indicating rejection of a
    * multi user chat invitation sent by us.
    */
   private Vector invitationRejectionListeners = new Vector();",False,True,"/** 
 * A list of listeners subscribed for events indicating rejection of a multi user chat invitation sent by us.
 */
",False,"/** 
 * A list of listeners subscribed for events indicating rejection of a multi user chat invitation sent by us.
 */
"
5,presenceListeners,presence listeners listeners that will be notified of changes in our status in the room such as us being kicked banned or granted admin permissions ,Field,,,,,206,5,2,"/** 
 * Listeners that will be notified of changes in our status in the room such as us being kicked, banned, or granted admin permissions.
 */
","/**
    * Listeners that will be notified of changes in our status in the
    * room such as us being kicked, banned, or granted admin permissions.
    */
   private Vector presenceListeners = new Vector();",False,True,"/** 
 * Listeners that will be notified of changes in our status in the room such as us being kicked, banned, or granted admin permissions.
 */
",False,"/** 
 * Listeners that will be notified of changes in our status in the room such as us being kicked, banned, or granted admin permissions.
 */
"
6,chatRoomCache,chat room cache a list of the rooms that are currently open by this account note that we have not necessarily joined these rooms we might have simply been searching through them ,Field,getCurrentlyJoinedChatRooms() getCurrentlyJoinedChatRooms(ChatRoomMember),,,,247,6,2,"/** 
 * A list of the rooms that are currently open by this account. Note that we have not necessarily joined these rooms, we might have simply been searching through them.
 */
","/**
    * A list of the rooms that are currently open by this account. Note that
    * we have not necessarily joined these rooms, we might have simply been
    * searching through them.
    */
   private Hashtable chatRoomCache = new Hashtable();",False,False,"/** 
 * A list of the rooms that are currently open by this account. Note that we have not necessarily joined these rooms, we might have simply been searching through them.
 */
",False,"/** 
 * A list of the rooms that are currently open by this account. Note that we have not necessarily joined these rooms, we might have simply been searching through them.
 */
"
7,providerRegListener,provider reg listener the registration listener that would get notified when the underlying icq provider gets registered ,Field,,,,,218,6,2,"/** 
 * The registration listener that would get notified when the underlying ICQ provider gets registered.
 */
","/**
   * The registration listener that would get notified when the underlying
   * ICQ provider gets registered.
   */
   private RegistrationStateListener providerRegListener
       = new RegistrationStateListener();",False,False,"/** 
 * The registration listener that would get notified when the underlying ICQ provider gets registered.
 */
",False,"/** 
 * The registration listener that would get notified when the underlying ICQ provider gets registered.
 */
"
8,opSetPersPresence,op set pers presence a reference to the persistent presence operation set that we use to match incoming messages to contact s and vice versa ,Field,,,,,225,5,4,"/** 
 * A reference to the persistent presence operation set that we use to match incoming messages to <tt>Contact</tt>s and vice versa.
 */
","/**
   * A reference to the persistent presence operation set that we use
   * to match incoming messages to <tt>Contact</tt>s and vice versa.
   */
   protected OperationSetPersistentPresenceIcqImpl opSetPersPresence = null;",False,False,"/** 
 * A reference to the persistent presence operation set that we use to match incoming messages to <tt>Contact</tt>s and vice versa.
 */
",False,"/** 
 * A reference to the persistent presence operation set that we use to match incoming messages to <tt>Contact</tt>s and vice versa.
 */
"
9,invitations,invitations hash table that contains all invitations this is needed if the user wants to reject an invitation ,Field,,,,,174,5,2,"/** 
 * Hash table that contains all invitations, this is needed if the user wants to reject an invitation.
 */
","/**
    * Hash table that contains all invitations, this is needed if the user wants
    * to reject an invitation.
    */
   private Hashtable invitations = new Hashtable();",False,False,"/** 
 * Hash table that contains all invitations, this is needed if the user wants to reject an invitation.
 */
",False,"/** 
 * Hash table that contains all invitations, this is needed if the user wants to reject an invitation.
 */
"
10,DEFAULT_INVITATION,default invitation default invitation message ,Field,,,,,118,4,18,"/** 
 * Default Invitation message.
 */
","/**
    * Default Invitation message.
    */
   private final String DEFAULT_INVITATION = ""Please join my chat room!"";",False,False,"/** 
 * Default Invitation message.
 */
",False,"/** 
 * Default Invitation message.
 */
"
11,OperationSetMultiUserChatIcqImpl(ProtocolProviderServiceIcqImpl),operation set multi user chat icq impl icq provider instantiates the user operation set with a currently valid instance of the icq protocol provider param icq provider a currently valid instance of protocol provider service icq impl ,Method,,,net.java.sip.communicator.service.protocol.AbstractProtocolProviderService+addRegistrationStateChangeListener(RegistrationStateChangeListener) net.java.sip.communicator.service.protocol.AbstractProtocolProviderService+addRegistrationStateChangeListener(RegistrationStateChangeListener) net.java.sip.communicator.service.protocol.AbstractProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.AbstractProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.OperationSetPresence+addSubscriptionListener(SubscriptionListener) net.java.sip.communicator.service.protocol.OperationSetPresence+addSubscriptionListener(SubscriptionListener),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+icqProvider net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+icqProvider net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+providerRegListener,648,17,0,"/** 
 * Instantiates the user operation set with a currently valid instance of the Icq protocol provider.
 * @param icqProvider a currently valid instance ofProtocolProviderServiceIcqImpl.
 */
","/**
   * Instantiates the user operation set with a currently valid instance of
   * the Icq protocol provider.
   * @param icqProvider a currently valid instance of
   * ProtocolProviderServiceIcqImpl.
   */
   OperationSetMultiUserChatIcqImpl(ProtocolProviderServiceIcqImpl icqProvider)
   {
       this.icqProvider = icqProvider;
       icqProvider.addRegistrationStateChangeListener(providerRegListener);

       OperationSetPersistentPresence presenceOpSet
           = (OperationSetPersistentPresence) icqProvider
               .getOperationSet(OperationSetPersistentPresence.class);

       presenceOpSet.addSubscriptionListener(this);
   }",False,False,This method instantiates the user operation set with a currently valid instance of the Icq protocol provider. It also adds a registration state change listener and a subscription listener to the provider.,False,This code is a constructor for the OperationSetMultiUserChatIcqImpl class. It takes an instance of the ProtocolProviderServiceIcqImpl class as a parameter and initializes the icqProvider variable with it. It also adds a registration state change listener and a subscription listener to the icqProvider instance.
12,addInvitationListener(ChatRoomInvitationListener),add invitation listener listener adds a listener to invitation notifications param listener an invitation listener ,Method,,,java.util.Vector+contains(Object) java.util.Vector+contains(Object) java.util.Vector+add(E) java.util.Vector+add(E),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitationListeners net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitationListeners net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitationListeners,359,13,1,"/** 
 * Adds a listener to invitation notifications.
 * @param listener an invitation listener.
 */
","/**
   * Adds a listener to invitation notifications.
   *
   * @param listener an invitation listener.
   */
   public void addInvitationListener(ChatRoomInvitationListener listener)
   {
       synchronized (invitationListeners)
       {
           if (!invitationListeners.contains(listener))
               invitationListeners.add(listener);
       }
   }",True,True,"This method adds an invitation listener to a list of invitation listeners, ensuring that the listener is not already in the list before adding it.",True,"This code defines a method called ""addInvitationListener"" that adds a given ChatRoomInvitationListener to a list of invitation listeners. The method ensures that the listener is not already present in the list before adding it."
13,addInvitationRejectionListener(ChatRoomInvitationRejectionListener),add invitation rejection listener listener subscribes listener so that it would receive events indicating rejection of a multi user chat invitation that we ve sent earlier param listener the listener that we ll subscribe for invitationrejection events ,Method,,,java.util.Vector+contains(Object) java.util.Vector+contains(Object) java.util.Vector+add(E) java.util.Vector+add(E),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitationRejectionListeners net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitationRejectionListeners net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitationRejectionListeners,569,16,1,"/** 
 * Subscribes <tt>listener</tt> so that it would receive events indicating rejection of a multi user chat invitation that we've sent earlier.
 * @param listener the listener that we'll subscribe for invitationrejection events.
 */
","/**
    * Subscribes <tt>listener</tt> so that it would receive events indicating
    * rejection of a multi user chat invitation that we've sent earlier.
    *
    * @param listener the listener that we'll subscribe for invitation
    * rejection events.
    */
   public void addInvitationRejectionListener(
           ChatRoomInvitationRejectionListener listener)
   {
       synchronized (invitationRejectionListeners)
       {
           if (!invitationRejectionListeners.contains(listener))
               invitationRejectionListeners.add(listener);
       }
   }",True,True,This method adds a listener to receive events indicating the rejection of a multi-user chat invitation that was previously sent.,True,"This code defines a method called ""addInvitationRejectionListener"" which allows a listener to be subscribed for receiving events indicating the rejection of a multi-user chat invitation. The method ensures that the listener is not already subscribed before adding it to the list of invitation rejection listeners."
14,addPresenceListener(LocalUserChatRoomPresenceListener),add presence listener listener adds a listener that will be notified of changes in our status in a chat room such as us being kicked banned or dropped param listener the local user chat room presence listener ,Method,,,java.util.Vector+contains(Object) java.util.Vector+contains(Object) java.util.Vector+add(E) java.util.Vector+add(E),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+presenceListeners net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+presenceListeners net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+presenceListeners,469,14,1,"/** 
 * Adds a listener that will be notified of changes in our status in a chat room such as us being kicked, banned or dropped.
 * @param listener the <tt>LocalUserChatRoomPresenceListener</tt>.
 */
","/**
    * Adds a listener that will be notified of changes in our status in a chat
    * room such as us being kicked, banned or dropped.
    *
    * @param listener the <tt>LocalUserChatRoomPresenceListener</tt>.
    */
   public void addPresenceListener(LocalUserChatRoomPresenceListener listener)
   {
       synchronized (presenceListeners)
       {
           if (!presenceListeners.contains(listener))
               presenceListeners.add(listener);
       }
   }",False,True,"This method adds a listener to be notified of changes in the status of a chat room, such as being kicked, banned, or dropped.",True,"This code defines a method called ""addPresenceListener"" that adds a listener to a list of presence listeners. The listener will be notified of any changes in the status of the chat room, such as being kicked, banned, or dropped. The method ensures that the listener is not added multiple times by checking if it already exists in the list before adding it."
15,findRoom(ChatInvitation),find room chat invitation returns a reference to a chat room by an given chat invitation this method is called when the user received a chat invitation the chat room will be created and the chat invitation will be saved in the created chat room this ensures to get the chat room session for each chat room param chat invitation the chat invitation the user received return a chat room based on the chat invitation throws operation failed exception if an error occurs while trying todiscover the room on the server throws operation not supported exception if the server does not supportmulti user chat ,Method,"ChatRoomManagerListenerImpl.handleInvitation(ChatRoomManager,ChatInvitation)",,java.util.Hashtable+get(Object) java.util.Hashtable+get(Object) net.kano.joustsim.oscar.oscar.service.chatrooms.ChatInvitation+getRoomName() net.kano.joustsim.oscar.oscar.service.chatrooms.ChatInvitation+getRoomName() net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+createLocalChatRoomInstance(ChatInvitation) net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+createLocalChatRoomInstance(ChatInvitation),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+chatRoomCache,1031,26,1,"/** 
 * Returns a reference to a chatRoom by an given chat invitation. This method is called, when the user received a chat invitation. The chat room will be created and the chatInvitation will be saved in the created chat room. This ensures to get the chat room session for each chat room.
 * @param chatInvitation The Chat invitation the user received
 * @return A chat room based on the chat invitation
 * @throws OperationFailedException if an error occurs while trying todiscover the room on the server.
 * @throws OperationNotSupportedException if the server does not supportmulti user chat
 */
","/**
   * Returns a reference to a chatRoom by an given chat invitation. This method
   * is called, when the user received a chat invitation. The chat room will be
   * created and the chatInvitation will be saved in the created chat room. This
   * ensures to get the chat room session for each chat room.
   * 
   * @param chatInvitation The Chat invitation the user received
   * @return A chat room based on the chat invitation
   * @throws OperationFailedException if an error occurs while trying to
   * discover the room on the server.
   * @throws OperationNotSupportedException if the server does not support
   * multi user chat
   */
   public ChatRoom findRoom(ChatInvitation chatInvitation)
           throws OperationFailedException, OperationNotSupportedException
   {
       ChatRoom chatRoom = (ChatRoom) chatRoomCache.get(chatInvitation
               .getRoomName());

       if (chatRoom == null)
       {
           chatRoom = createLocalChatRoomInstance(chatInvitation);
       }

       return chatRoom;
   }",False,False,"This method serves to find a chat room based on a given chat invitation. If the chat room is not found in the cache, it creates a new local chat room instance and returns it.",False,"This code defines a method called ""findRoom"" that returns a chat room based on a given chat invitation. If the chat room is not found in the cache, it creates a new local chat room instance using the chat invitation and returns it. The method also handles exceptions related to server operations and multi-user chat support."
16,createLocalChatRoomInstance(ChatInvitation),create local chat room instance chat invitation creates a chat room from the specified smack multi user chat param chat invitation the chat invitation we received from thechat room manager return chat room the chat room that we ve just created ,Method,findRoom(ChatInvitation),,"net.java.sip.communicator.impl.protocol.icq.ChatRoomIcqImpl+ChatRoomIcqImpl(ChatInvitation,ProtocolProviderServiceIcqImpl) java.util.Hashtable+put(K,V) java.util.Hashtable+put(K,V) net.kano.joustsim.oscar.oscar.service.chatrooms.ChatInvitation+getRoomName() net.kano.joustsim.oscar.oscar.service.chatrooms.ChatInvitation+getRoomName()",net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+chatRoomCache net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+icqProvider net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+chatRoomCache,616,21,2,"/** 
 * Creates a <tt>ChatRoom</tt> from the specified smack <tt>MultiUserChat</tt>.
 * @param chatInvitation The chat invitation we received from thechatRoomManager
 * @return ChatRoom the chat room that we've just created.
 */
","/**
    * Creates a <tt>ChatRoom</tt> from the specified smack
    * <tt>MultiUserChat</tt>.
    *
    * @param chatInvitation The chat invitation we received from the
    * chatRoomManager
    *
    * @return ChatRoom the chat room that we've just created.
    */

   private ChatRoom createLocalChatRoomInstance(ChatInvitation chatInvitation)
   {
       synchronized (chatRoomCache)
       {
           ChatRoom newChatRoom = new ChatRoomIcqImpl(chatInvitation,
                   icqProvider);

           chatRoomCache.put(chatInvitation.getRoomName(), newChatRoom);
           return newChatRoom;
       }
   }",False,False,This method creates a local instance of a chat room using a chat invitation and adds it to a cache. It then returns the newly created chat room.,False,"This code defines a private method called ""createLocalChatRoomInstance"" that takes a chat invitation as a parameter and returns a newly created chat room. The method creates a new instance of the ChatRoomIcqImpl class, adds it to a cache, and then returns it."
17,"createChatRoom(String,Map<String,Object>)",create chat room room name room properties creates a room with the named room name and according to the specified room properties on the server that this protocol provider is currently connected to param room name the name of the chat room to create param room properties properties specifying how the room should becreated contains list of invitees and the invitation message throws operation failed exception if the room couldn t be created forsome reason e g room already exists user already joined to an existent room or user has no permissions to create a chat room throws operation not supported exception if chat room creation is notsupported by this server return chat room the chat room that we ve just created ,Method,,,"net.kano.joustsim.oscar.AimConnection+getChatRoomManager() net.java.sip.communicator.impl.protocol.icq.ProtocolProviderServiceIcqImpl+getAimConnection() net.java.sip.communicator.impl.protocol.icq.ProtocolProviderServiceIcqImpl+getAimConnection() net.kano.joustsim.oscar.AimConnection+getChatRoomManager() net.kano.joustsim.oscar.oscar.service.chatrooms.ChatRoomManager+joinRoom(String) net.kano.joustsim.oscar.oscar.service.chatrooms.ChatRoomManager+joinRoom(String) net.java.sip.communicator.impl.protocol.icq.ChatRoomIcqImpl+ChatRoomIcqImpl(String,ChatRoomSession,ProtocolProviderServiceIcqImpl)",net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+icqProvider net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+icqProvider,1515,38,1,"/** 
 * Creates a room with the named <tt>roomName</tt> and according to the specified <tt>roomProperties</tt> on the server that this protocol provider is currently connected to.
 * @param roomName the name of the <tt>ChatRoom</tt> to create.
 * @param roomProperties properties specifying how the room should becreated. Contains list of invitees and the invitation message.
 * @throws OperationFailedException if the room couldn't be created forsome reason (e.g. room already exists; user already joined to an existent room or user has no permissions to create a chat room).
 * @throws OperationNotSupportedException if chat room creation is notsupported by this server
 * @return ChatRoom the chat room that we've just created.
 */
","/**
    * Creates a room with the named <tt>roomName</tt> and according to the
    * specified <tt>roomProperties</tt> on the server that this protocol
    * provider is currently connected to.
    *
    * @param roomName the name of the <tt>ChatRoom</tt> to create.
    * @param roomProperties properties specifying how the room should be
    *   created. Contains list of invitees and the invitation message.
    *
    * @throws OperationFailedException if the room couldn't be created for
    * some reason (e.g. room already exists; user already joined to an
    * existent room or user has no permissions to create a chat room).
    * @throws OperationNotSupportedException if chat room creation is not
    * supported by this server
    *
    * @return ChatRoom the chat room that we've just created.
    */
   public ChatRoom createChatRoom( String roomName,
                                   Map<String, Object> roomProperties)
           throws  OperationFailedException,
                   OperationNotSupportedException
   {
       ChatRoom chatRoom = null;

       ChatRoomManager chatRoomManager = icqProvider.getAimConnection()
               .getChatRoomManager();

       ChatRoomSession chatRoomSession = chatRoomManager.joinRoom(roomName);

       if(chatRoomSession != null)
       {
           chatRoom = new ChatRoomIcqImpl(  roomName,
                                            chatRoomSession,
                                            icqProvider);
       }

       return chatRoom;
   }",False,False,This method creates a chat room with the specified name and properties on the connected server. It returns the chat room that was created.,False,This code defines a method called createChatRoom that creates a chat room with the specified name and properties on the server. It returns the newly created chat room object. It handles exceptions for cases such as room creation failure or lack of support for chat room creation by the server.
18,findRoom(String),find room room name returns a reference to a chat room named room name or null if no such room exists param room name the name of the chat room that we re lookingfor return the chat room named room name or null if nosuch room exists on the server that this provider is currently connected to throws operation failed exception if an error occurs while trying todiscover the room on the server throws operation not supported exception if the server does not supportmulti user chat ,Method,,,java.util.Hashtable+get(Object) java.util.Hashtable+get(Object),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+chatRoomCache,799,22,1,"/** 
 * Returns a reference to a chatRoom named <tt>roomName</tt> or null if no such room exists.
 * @param roomName the name of the <tt>ChatRoom</tt> that we're lookingfor.
 * @return the <tt>ChatRoom</tt> named <tt>roomName</tt> or null if nosuch room exists on the server that this provider is currently connected to.
 * @throws OperationFailedException if an error occurs while trying todiscover the room on the server.
 * @throws OperationNotSupportedException if the server does not supportmulti user chat
 */
","/**
    * Returns a reference to a chatRoom named <tt>roomName</tt> or null if
    * no such room exists.
    *
    * @param roomName the name of the <tt>ChatRoom</tt> that we're looking
    *   for.
    * @return the <tt>ChatRoom</tt> named <tt>roomName</tt> or null if no
    *   such room exists on the server that this provider is currently
    *   connected to.
    * @throws OperationFailedException if an error occurs while trying to
    * discover the room on the server.
    * @throws OperationNotSupportedException if the server does not support
    * multi user chat
    */

   public ChatRoom findRoom(String roomName) throws OperationFailedException,
           OperationNotSupportedException
   {
       ChatRoom room = (ChatRoom) chatRoomCache.get(roomName);

       return room;
   }",False,False,"The function of this method is to find and return a reference to a chat room with the specified name. If no such room exists, it returns null. It may throw exceptions if there are errors or if the server does not support multi-user chat.",False,"This code defines a method called ""findRoom"" that takes a room name as input and returns a reference to a chat room with that name. If no such room exists, it returns null. It may throw exceptions if there are errors while trying to discover the room or if the server does not support multi-user chat."
19,getCurrentlyJoinedChatRooms(),get currently joined chat rooms returns a list of the chat rooms that we have joined and are currently active in return a list of the rooms where the user has joined usinga given connection ,Method,,,java.util.LinkedList+LinkedList(Collection) java.util.Hashtable+values() java.util.Hashtable+values() java.util.List+iterator() java.util.List+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() java.util.Iterator+next() java.util.Iterator+next() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() java.util.Iterator+remove() java.util.Iterator+remove(),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+chatRoomCache net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+chatRoomCache net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+chatRoomCache,677,24,1,"/** 
 * Returns a list of the chat rooms that we have joined and are currently active in.
 * @return a <tt>List</tt> of the rooms where the user has joined usinga given connection.
 */
","/**
    * Returns a list of the chat rooms that we have joined and are currently
    * active in.
    *
    * @return a <tt>List</tt> of the rooms where the user has joined using
    *   a given connection.
    */
   public List getCurrentlyJoinedChatRooms()
   {
       synchronized (chatRoomCache)
       {
           List joinedRooms = new LinkedList(this.chatRoomCache.values());

           Iterator joinedRoomsIter = joinedRooms.iterator();

           while (joinedRoomsIter.hasNext())
           {
               if (!((ChatRoom) joinedRoomsIter.next()).isJoined())
                   joinedRoomsIter.remove();
           }

           return joinedRooms;
       }
   }",False,False,This method returns a list of chat rooms that the user has joined and is currently active in. It filters out any chat rooms that the user has not joined.,False,"This code defines a method called ""getCurrentlyJoinedChatRooms"" that returns a list of chat rooms that the user has joined and are currently active. It iterates through the chat room cache, removes any rooms that are not joined, and returns the remaining joined rooms."
20,getCurrentlyJoinedChatRooms(ChatRoomMember),get currently joined chat rooms chat room member returns a list of the names of all chat rooms that contact is currently a member of param contact the contact whose current chat rooms we will bequerying return a list of string indicating the names of the chat roomsthat contact has joined and is currently active in throws operation failed exception if an error occurs while trying todiscover the room on the server throws operation not supported exception if the server does not supportmulti user chat ,Method,,,java.util.LinkedList+LinkedList(Collection) java.util.Hashtable+values() java.util.Hashtable+values() java.util.List+iterator() java.util.List+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() java.util.Iterator+next() java.util.Iterator+next() net.java.sip.communicator.service.protocol.ChatRoom+isJoined() java.util.Iterator+remove() java.util.Iterator+remove(),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+chatRoomCache net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+chatRoomCache net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+chatRoomCache,1141,32,1,"/** 
 * Returns a list of the names of all chat rooms that <tt>contact</tt> is currently a  member of.
 * @param contact the contact whose current ChatRooms we will bequerying.
 * @return a list of <tt>String</tt> indicating the names of  the chat roomsthat <tt>contact</tt> has joined and is currently active in.
 * @throws OperationFailedException if an error occurs while trying todiscover the room on the server.
 * @throws OperationNotSupportedException if the server does not supportmulti user chat
 */
","/**
    * Returns a list of the names of all chat rooms that <tt>contact</tt> is
    * currently a  member of.
    *
    * @param contact the contact whose current ChatRooms we will be
    *   querying.
    * @return a list of <tt>String</tt> indicating the names of  the chat rooms
    * that <tt>contact</tt> has joined and is currently active in.
    *
    * @throws OperationFailedException if an error occurs while trying to
    * discover the room on the server.
    * @throws OperationNotSupportedException if the server does not support
    * multi user chat
    */
   public List getCurrentlyJoinedChatRooms(ChatRoomMember chatRoomMember)
           throws OperationFailedException, OperationNotSupportedException
   {
       synchronized (chatRoomCache)
       {
           List joinedRooms = new LinkedList(this.chatRoomCache.values());

           Iterator joinedRoomsIter = joinedRooms.iterator();

           while (joinedRoomsIter.hasNext())
           {
               if (!((ChatRoom) joinedRoomsIter.next()).isJoined())
                   joinedRoomsIter.remove();
           }

           return joinedRooms;
       }
   }",False,False,This method returns a list of the names of all chat rooms that a given contact is currently a member of. It throws exceptions if there are errors or if the server does not support multi-user chat.,False,"This code defines a method called ""getCurrentlyJoinedChatRooms"" that takes a ChatRoomMember as input and returns a list of the names of all chat rooms that the member is currently a part of. It throws exceptions if there are any errors or if the server does not support multi-user chat. The method uses a synchronized block to ensure thread safety while accessing the chat room cache."
21,getExistingChatRooms(),get existing chat rooms returns the list of string s indicating chat rooms currently available on the server that this protocol provider is connected to note there are no more system chat rooms in the icq network at this moment return a java util list of the name string s for chatrooms that are currently available on the server that this protocol provider is connected to throws operation failed exception if we failed retrieving this list fromthe server throws operation not supported exception if the server does not supportmulti user chat ,Method,,,java.util.LinkedList+LinkedList(),,803,20,1,"/** 
 * Returns the <tt>List</tt> of <tt>String</tt>s indicating chat rooms currently available on the server that this protocol provider is connected to. Note: There are no more system chat rooms in the ICQ network at this moment.
 * @return a <tt>java.util.List</tt> of the name <tt>String</tt>s for chatrooms that are currently available on the server that this protocol provider is connected to.
 * @throws OperationFailedException if we failed retrieving this list fromthe server.
 * @throws OperationNotSupportedException if the server does not supportmulti user chat
 */
","/**
    * Returns the <tt>List</tt> of <tt>String</tt>s indicating chat rooms
    * currently available on the server that this protocol provider is
    * connected to. Note: There are no more system chat rooms in the ICQ
    * network at this moment.
    *
    * @return a <tt>java.util.List</tt> of the name <tt>String</tt>s for chat
    * rooms that are currently available on the server that this protocol
    * provider is connected to.
    *
    * @throws OperationFailedException if we failed retrieving this list from
    * the server.
    * @throws OperationNotSupportedException if the server does not support
    * multi user chat
    */
   public List getExistingChatRooms() throws OperationFailedException,
           OperationNotSupportedException
   {
       return new LinkedList();
   }",False,False,This method returns a list of strings representing the chat rooms currently available on the server that the protocol provider is connected to. It throws exceptions if there is an operation failure or if the server does not support multi-user chat.,False,"This code defines a method called ""getExistingChatRooms"" that returns a list of available chat rooms on the server. It throws an exception if the list cannot be retrieved or if the server does not support multi-user chat. The method currently returns an empty linked list."
22,isMultiChatSupportedByContact(Contact),is multi chat supported by contact contact returns true if contact supports multi user chat sessions param contact reference to the contact whose support for chat roomswe are currently querying return a boolean indicating whether contact supportschat rooms ,Method,,,net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.Contact+getProtocolProvider() net.java.sip.communicator.service.protocol.ProtocolProviderService+getOperationSet(Class<? extends OperationSet>),,525,16,1,"/** 
 * Returns true if <tt>contact</tt> supports multi user chat sessions.
 * @param contact reference to the contact whose support for chat roomswe are currently querying.
 * @return a boolean indicating whether <tt>contact</tt> supportschat rooms.
 */
","/**
    * Returns true if <tt>contact</tt> supports multi user chat sessions.
    *
    * @param contact reference to the contact whose support for chat rooms
    *   we are currently querying.
    * @return a boolean indicating whether <tt>contact</tt> supports
    *   chat rooms.
    */
   public boolean isMultiChatSupportedByContact(Contact contact)
   {
       if (contact.getProtocolProvider().getOperationSet(
               OperationSetMultiUserChat.class) != null)
           return true;

       return false;
   }",False,False,"This method checks if a given contact supports multi-user chat sessions by checking if the contact's protocol provider has the OperationSetMultiUserChat class. It returns true if the contact supports multi-user chat sessions, and false otherwise.",False,"This code defines a method called ""isMultiChatSupportedByContact"" that takes a Contact object as a parameter and checks if the contact supports multi-user chat sessions. It does this by checking if the contact's protocol provider has an OperationSetMultiUserChat class. If it does, the method returns true; otherwise, it returns false."
23,"rejectInvitation(ChatRoomInvitation,String)",reject invitation invitation reject reason informs the sender of an invitation that we decline their invitation param invitation the connection to use for sending the rejection param reject reason the reason to reject the given invitation ,Method,,,java.util.Hashtable+get(Object) java.util.Hashtable+get(Object) net.java.sip.communicator.service.protocol.ChatRoomInvitation+getTargetChatRoom() net.java.sip.communicator.service.protocol.ChatRoomInvitation+getTargetChatRoom() net.kano.joustsim.oscar.oscar.service.chatrooms.ChatInvitation+reject() net.kano.joustsim.oscar.oscar.service.chatrooms.ChatInvitation+reject() java.util.Hashtable+remove(Object) java.util.Hashtable+remove(Object) net.java.sip.communicator.service.protocol.ChatRoomInvitation+getTargetChatRoom() net.java.sip.communicator.service.protocol.ChatRoomInvitation+getTargetChatRoom(),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitations net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitations,624,19,1,"/** 
 * Informs the sender of an invitation that we decline their invitation.
 * @param invitation the connection to use for sending the rejection.
 * @param rejectReason the reason to reject the given invitation
 */
","/**
   * Informs the sender of an invitation that we decline their invitation.
   *
   * @param invitation the connection to use for sending the rejection.
   * @param rejectReason the reason to reject the given invitation
   */
   public void rejectInvitation(ChatRoomInvitation invitation,
           String rejectReason)
   {
       ChatInvitation inv = (ChatInvitation) invitations.get(invitation
               .getTargetChatRoom());

       if (inv != null)
       {   //send the rejection
           inv.reject();
       }
       //remove the invitation
       invitations.remove(invitation.getTargetChatRoom());
   }",False,False,This method is used to reject a chat room invitation. It takes the invitation and the reason for rejection as parameters. It sends a rejection message to the sender and removes the invitation from the list of invitations.,True,"This code defines a method called ""rejectInvitation"" that is used to decline a chat room invitation. It takes an invitation object and a reason for rejection as parameters. The method checks if the invitation exists, sends the rejection, and removes the invitation from the list."
24,removeInvitationListener(ChatRoomInvitationListener),remove invitation listener listener removes listener from the list of invitation listeners registered to receive invitation events param listener the invitation listener to remove ,Method,,,java.util.Vector+remove(Object) java.util.Vector+remove(Object),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitationListeners net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitationListeners,386,13,1,"/** 
 * Removes <tt>listener</tt> from the list of invitation listeners registered to receive invitation events.
 * @param listener the invitation listener to remove.
 */
","/**
    * Removes <tt>listener</tt> from the list of invitation listeners
    * registered to receive invitation events.
    *
    * @param listener the invitation listener to remove.
    */
   public void removeInvitationListener(ChatRoomInvitationListener listener)
   {
       synchronized (invitationListeners)
       {
           invitationListeners.remove(listener);
       }
   }",False,True,This method removes a specified listener from the list of invitation listeners registered to receive invitation events in a chat room.,True,"This code defines a method called ""removeInvitationListener"" that removes a given listener from a list of invitation listeners. The method is synchronized to ensure thread safety, and it takes a ChatRoomInvitationListener object as a parameter."
25,removeInvitationRejectionListener(ChatRoomInvitationRejectionListener),remove invitation rejection listener listener removes listener from the list of invitation listeners registered to receive invitation rejection events param listener the invitation listener to remove ,Method,,,java.util.Vector+remove(Object) java.util.Vector+remove(Object),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitationRejectionListeners net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitationRejectionListeners,444,14,1,"/** 
 * Removes <tt>listener</tt> from the list of invitation listeners registered to receive invitation rejection events.
 * @param listener the invitation listener to remove.
 */
","/**
    * Removes <tt>listener</tt> from the list of invitation listeners
    * registered to receive invitation rejection events.
    *
    * @param listener the invitation listener to remove.
    */
   public void removeInvitationRejectionListener(
           ChatRoomInvitationRejectionListener listener)
   {
       synchronized (invitationRejectionListeners)
       {
           invitationRejectionListeners.remove(listener);
       }
   }",True,True,This method removes a specified listener from the list of invitation listeners that are registered to receive invitation rejection events.,True,"This code defines a method called ""removeInvitationRejectionListener"" that removes a given listener from a list of invitation rejection listeners. The method is synchronized to ensure thread safety while removing the listener from the list."
26,removePresenceListener(LocalUserChatRoomPresenceListener),remove presence listener listener removes a listener that was being notified of changes in our status in a room such as us being kicked banned or dropped param listener the local user chat room presence listener ,Method,,,java.util.Vector+remove(Object) java.util.Vector+remove(Object),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+presenceListeners net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+presenceListeners,429,14,1,"/** 
 * Removes a listener that was being notified of changes in our status in a room such as us being kicked, banned or dropped.
 * @param listener the <tt>LocalUserChatRoomPresenceListener</tt>.
 */
","/**
    * Removes a listener that was being notified of changes in our status in
    * a room such as us being kicked, banned or dropped.
    *
    * @param listener the <tt>LocalUserChatRoomPresenceListener</tt>.
    */
   public void removePresenceListener(
           LocalUserChatRoomPresenceListener listener)
   {
       synchronized (presenceListeners)
       {
           presenceListeners.remove(listener);
       }
   }",True,True,"This method removes a listener that was being notified of changes in our status in a room, such as being kicked, banned, or dropped.",True,"This code defines a method called ""removePresenceListener"" which is used to remove a listener that was previously added to be notified of changes in the user's status in a chat room. The method takes a parameter of type ""LocalUserChatRoomPresenceListener"" and removes it from the list of presence listeners."
27,"fireInvitationEvent(ChatRoom,String,String,byte[])",fire invitation event target chat room inviter reason password delivers a chat room invitation received event to all registered chat room invitation listener s param target chat room the room that invitation refers to param inviter the inviter that sent the invitation param reason the reason why the inviter sent the invitation param password the password to use when joining the room ,Method,"ChatRoomManagerListenerImpl.handleInvitation(ChatRoomManager,ChatInvitation)",,"net.java.sip.communicator.impl.protocol.icq.ChatRoomInvitationIcqImpl+ChatRoomInvitationIcqImpl(ChatRoom,String,String,byte[]) net.java.sip.communicator.service.protocol.event.ChatRoomInvitationReceivedEvent+ChatRoomInvitationReceivedEvent(OperationSetMultiUserChat,ChatRoomInvitation,Date) java.util.Date+Date(long) java.lang.System+currentTimeMillis() java.lang.System+currentTimeMillis() java.util.ArrayList+iterator() java.util.ArrayList+ArrayList(Collection) java.util.ArrayList+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() net.java.sip.communicator.service.protocol.event.ChatRoomInvitationListener+invitationReceived(ChatRoomInvitationReceivedEvent) net.java.sip.communicator.service.protocol.event.ChatRoomInvitationListener+invitationReceived(ChatRoomInvitationReceivedEvent)",net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitationListeners net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitationListeners,1189,33,1,"/** 
 * Delivers a <tt>ChatRoomInvitationReceivedEvent</tt> to all registered <tt>ChatRoomInvitationListener</tt>s.
 * @param targetChatRoom the room that invitation refers to
 * @param inviter the inviter that sent the invitation
 * @param reason the reason why the inviter sent the invitation
 * @param password the password to use when joining the room 
 */
","/**
   * Delivers a <tt>ChatRoomInvitationReceivedEvent</tt> to all
   * registered <tt>ChatRoomInvitationListener</tt>s.
   * 
   * @param targetChatRoom the room that invitation refers to
   * @param inviter the inviter that sent the invitation
   * @param reason the reason why the inviter sent the invitation
   * @param password the password to use when joining the room 
   */
   public void fireInvitationEvent(ChatRoom targetChatRoom, String inviter,
           String reason, byte[] password)
   {
       ChatRoomInvitationIcqImpl invitation = new ChatRoomInvitationIcqImpl(
               targetChatRoom, inviter, reason, password);

       ChatRoomInvitationReceivedEvent evt
           = new ChatRoomInvitationReceivedEvent(
               this, invitation, new Date(System.currentTimeMillis()));

       Iterator listeners = null;
       synchronized (invitationListeners)
       {
           listeners = new ArrayList(invitationListeners).iterator();
       }

       while (listeners.hasNext())
       {
           ChatRoomInvitationListener listener
               = (ChatRoomInvitationListener) listeners.next();

           listener.invitationReceived(evt);
       }
   }",False,True,"This method delivers a ChatRoomInvitationReceivedEvent to all registered ChatRoomInvitationListeners. It creates an invitation object and an event object, then iterates through the listeners and calls the invitationReceived method on each listener.",True,"This code defines a method called ""fireInvitationEvent"" that sends a chat room invitation event to all registered listeners. The method creates an invitation object, creates an event object with the invitation, and then iterates through the listeners, invoking the ""invitationReceived"" method on each listener with the event object as a parameter."
28,"fireLocalUserPresenceEvent(ChatRoom,String,String)",fire local user presence event chat room event type reason delivers a local user chat room presence change event to all registered local user chat room presence listener s param chat room the chat room which has been joined left etc param event type the type of this event one of local user joined local user left etc param reason the reason ,Method,,net.java.sip.communicator.impl.protocol.icq.ChatRoomIcqImpl+joinAs(String),"net.java.sip.communicator.service.protocol.event.LocalUserChatRoomPresenceChangeEvent+LocalUserChatRoomPresenceChangeEvent(OperationSetMultiUserChat,ChatRoom,String,String) java.util.ArrayList+iterator() java.util.ArrayList+ArrayList(Collection) java.util.ArrayList+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() net.java.sip.communicator.service.protocol.event.LocalUserChatRoomPresenceListener+localUserPresenceChanged(LocalUserChatRoomPresenceChangeEvent) net.java.sip.communicator.service.protocol.event.LocalUserChatRoomPresenceListener+localUserPresenceChanged(LocalUserChatRoomPresenceChangeEvent)",net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+presenceListeners net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+presenceListeners,1009,29,1,"/** 
 * Delivers a <tt>LocalUserChatRoomPresenceChangeEvent</tt> to all registered <tt>LocalUserChatRoomPresenceListener</tt>s.
 * @param chatRoom the <tt>ChatRoom</tt> which has been joined, left, etc.
 * @param eventType the type of this event; one of LOCAL_USER_JOINED,LOCAL_USER_LEFT, etc.
 * @param reason the reason
 */
","/**
    * Delivers a <tt>LocalUserChatRoomPresenceChangeEvent</tt> to all
    * registered <tt>LocalUserChatRoomPresenceListener</tt>s.
    * 
    * @param chatRoom the <tt>ChatRoom</tt> which has been joined, left, etc.
    * @param eventType the type of this event; one of LOCAL_USER_JOINED,
    * LOCAL_USER_LEFT, etc.
    * @param reason the reason
    */
   public void fireLocalUserPresenceEvent(ChatRoom chatRoom, String eventType,
           String reason)
   {
       LocalUserChatRoomPresenceChangeEvent evt = new LocalUserChatRoomPresenceChangeEvent(
               this, chatRoom, eventType, reason);

       Iterator listeners = null;
       synchronized (presenceListeners)
       {
           listeners = new ArrayList(presenceListeners).iterator();
       }

       while (listeners.hasNext())
       {
           LocalUserChatRoomPresenceListener listener
               = (LocalUserChatRoomPresenceListener) listeners.next();

           listener.localUserPresenceChanged(evt);
       }
   }",True,True,"This method delivers a LocalUserChatRoomPresenceChangeEvent to all registered LocalUserChatRoomPresenceListeners. It takes in the chatRoom, eventType, and reason as parameters and creates an event object. It then iterates through the presenceListeners and calls the localUserPresenceChanged method on each listener with the event object as the argument.",True,"This code defines a method called ""fireLocalUserPresenceEvent"" that is responsible for notifying all registered listeners about changes in the presence of a local user in a chat room. It creates an event object, iterates through the listeners, and invokes the ""localUserPresenceChanged"" method on each listener passing the event object as an argument."
29,RegistrationStateListener,registration state listener our listener that will tell us when we re registered to icq and joust sim is ready to accept us as a listener ,MemberClass,,,net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl.RegistrationStateListener+registrationStateChanged(RegistrationStateChangeEvent) net.java.sip.communicator.util.Logger+debug(Object) net.java.sip.communicator.util.Logger+debug(Object) net.java.sip.communicator.service.protocol.event.RegistrationStateChangeEvent+getOldState() net.java.sip.communicator.service.protocol.event.RegistrationStateChangeEvent+getOldState() net.java.sip.communicator.service.protocol.event.RegistrationStateChangeEvent+getNewState() net.java.sip.communicator.service.protocol.event.RegistrationStateChangeEvent+getNewState() net.java.sip.communicator.service.protocol.event.RegistrationStateChangeEvent+getNewState() net.java.sip.communicator.service.protocol.event.RegistrationStateChangeEvent+getNewState() java.lang.System+getProperty(String) java.lang.System+getProperty(String) net.kano.joscar.OscarTools+setDefaultCharset(String) net.kano.joscar.OscarTools+setDefaultCharset(String) net.java.sip.communicator.service.protocol.AbstractProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.java.sip.communicator.service.protocol.AbstractProtocolProviderService+getOperationSet(Class<? extends OperationSet>) net.kano.joustsim.oscar.oscar.service.chatrooms.ChatRoomManager+addListener(ChatRoomManagerListener) net.kano.joustsim.oscar.AimConnection+getChatRoomManager() net.java.sip.communicator.impl.protocol.icq.ProtocolProviderServiceIcqImpl+getAimConnection() net.java.sip.communicator.impl.protocol.icq.ProtocolProviderServiceIcqImpl+getAimConnection() net.kano.joustsim.oscar.AimConnection+getChatRoomManager() net.kano.joustsim.oscar.oscar.service.chatrooms.ChatRoomManager+addListener(ChatRoomManagerListener) net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl.ChatRoomManagerListenerImpl+ChatRoomManagerListenerImpl(),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+logger net.java.sip.communicator.service.protocol.RegistrationState+REGISTERED net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+opSetPersPresence net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+icqProvider net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+icqProvider,1482,35,2,"/** 
 * Our listener that will tell us when we're registered to icq and joust sim is ready to accept us as a listener.
 */
","/**
    * Our listener that will tell us when we're registered to icq and joust
    * sim is ready to accept us as a listener.
    */
   private class RegistrationStateListener implements
           RegistrationStateChangeListener
   {
       /**
        * The method is called by a ProtocolProvider implementation whenver
        * a change in the registration state of the corresponding provider had
        * occurred.
        * @param evt ProviderStatusChangeEvent the event describing the status
        * change.
        */
       public void registrationStateChanged(RegistrationStateChangeEvent evt)
       {
           logger.debug(""The ICQ provider changed state from: ""
                   + evt.getOldState() + "" to: "" + evt.getNewState());
           if (evt.getNewState() == RegistrationState.REGISTERED)
           {
               String customMessageEncoding = null;
               if ((customMessageEncoding = System
                       .getProperty(""icq.custom.message.charset"")) != null)
                   OscarTools.setDefaultCharset(customMessageEncoding);

               opSetPersPresence =
                    (OperationSetPersistentPresenceIcqImpl) icqProvider
                        .getOperationSet(OperationSetPersistentPresence.class);

               //add ChatRoomMangagerListener
               icqProvider.getAimConnection().getChatRoomManager()
                       .addListener(new ChatRoomManagerListenerImpl());
           }
       }
   }",False,False,"/** 
 * Our listener that will tell us when we're registered to icq and joust sim is ready to accept us as a listener.
 */
",False,"/** 
 * Our listener that will tell us when we're registered to icq and joust sim is ready to accept us as a listener.
 */
"
30,ChatRoomManagerListenerImpl,chat room manager listener impl our listener for chat room invitations ,MemberClass,,,"net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl.ChatRoomManagerListenerImpl+handleInvitation(ChatRoomManager,ChatInvitation) net.java.sip.communicator.util.Logger+debug(Object) net.java.sip.communicator.util.Logger+debug(Object) net.kano.joustsim.oscar.oscar.service.chatrooms.ChatInvitation+getRoomName() net.kano.joustsim.oscar.oscar.service.chatrooms.ChatInvitation+getRoomName() net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+findRoom(ChatInvitation) net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+findRoom(ChatInvitation) java.util.Hashtable+put(K,V) java.util.Hashtable+put(K,V) net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+fireInvitationEvent(ChatRoom,String,String,byte[]) net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+fireInvitationEvent(ChatRoom,String,String,byte[]) net.kano.joustsim.Screenname+toString() net.kano.joustsim.oscar.oscar.service.chatrooms.ChatInvitation+getScreenname() net.kano.joustsim.oscar.oscar.service.chatrooms.ChatInvitation+getScreenname() net.kano.joustsim.Screenname+toString() net.kano.joustsim.oscar.oscar.service.chatrooms.ChatInvitation+getMessage() net.kano.joustsim.oscar.oscar.service.chatrooms.ChatInvitation+getMessage() net.java.sip.communicator.util.Logger+debug(Object) net.java.sip.communicator.util.Logger+debug(Object) net.java.sip.communicator.util.Logger+debug(Object) net.java.sip.communicator.util.Logger+debug(Object)",net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+logger net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+invitations net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+logger net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+logger,1099,33,2,"/** 
 * Our listener for chat room invitations. 
 */
","/**
    * Our listener for chat room invitations. 
    *
    */
   private class ChatRoomManagerListenerImpl implements
           ChatRoomManagerListener
   {
       public void handleInvitation(ChatRoomManager chatRoomManager,
               ChatInvitation chatInvitation)
       {
           logger
                   .debug(""Invitation received: ""
                           + chatInvitation.getRoomName());
           try
           {
               ChatRoom chatRoom = findRoom(chatInvitation);
               // save chatInvitation, for a possible rejection
               invitations.put(chatRoom, chatInvitation);

               fireInvitationEvent(chatRoom, chatInvitation.getScreenname()
                       .toString(), chatInvitation.getMessage(), null);

           }
           catch (OperationNotSupportedException onse)
           {
               logger.debug(""Failed to handle ChatInvitation: "" + onse);
           }
           catch (OperationFailedException ofe)
           {
               logger.debug(""Failed to handle ChatInvitation: "" + ofe);
           }
       }
   }",False,False,"/** 
 * Our listener for chat room invitations. 
 */
",False,"/** 
 * Our listener for chat room invitations. 
 */
"
31,contactModified(ContactPropertyChangeEvent),contact modified evt updates corresponding chat room members when a contact has been modified in our contact list ,Method,,,net.java.sip.communicator.service.protocol.event.ContactPropertyChangeEvent+getSourceContact() net.java.sip.communicator.service.protocol.event.ContactPropertyChangeEvent+getSourceContact() net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+updateChatRoomMembers(Contact) net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+updateChatRoomMembers(Contact),,304,10,1,"/** 
 * Updates corresponding chat room members when a contact has been modified in our contact list.
 */
","/**
    * Updates corresponding chat room members when a contact has been modified
    * in our contact list.
    */
    public void contactModified(ContactPropertyChangeEvent evt)
    {
        Contact modifiedContact = evt.getSourceContact();

        this.updateChatRoomMembers(modifiedContact);
    }",False,False,The function of this method is to update the chat room members when a contact has been modified in the contact list.,True,"This code defines a method called ""contactModified"" that is triggered when a contact is modified in a contact list. It retrieves the modified contact and calls another method called ""updateChatRoomMembers"" to update the members of a chat room with the modified contact."
32,subscriptionCreated(SubscriptionEvent),subscription created evt updates corresponding chat room members when a contact has been created in our contact list ,Method,,,net.java.sip.communicator.service.protocol.event.SubscriptionEvent+getSourceContact() net.java.sip.communicator.service.protocol.event.SubscriptionEvent+getSourceContact() net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+updateChatRoomMembers(Contact) net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+updateChatRoomMembers(Contact),,299,10,1,"/** 
 * Updates corresponding chat room members when a contact has been created in our contact list.
 */
","/**
     * Updates corresponding chat room members when a contact has been created
     * in our contact list.
     */
    public void subscriptionCreated(SubscriptionEvent evt)
    {
        Contact createdContact = evt.getSourceContact();

        this.updateChatRoomMembers(createdContact);
    }",False,False,The function of this method is to update the members of a chat room when a contact is created in the contact list.,True,"This code is a method called ""subscriptionCreated"" that is triggered when a contact is created in a contact list. It retrieves the created contact and updates the chat room members accordingly."
33,subscriptionFailed(SubscriptionEvent),subscription failed evt not interested in this event for our member update purposes ,Method,,,,,144,5,1,"/** 
 * Not interested in this event for our member update purposes.
 */
","/**
     * Not interested in this event for our member update purposes.
     */
    public void subscriptionFailed(SubscriptionEvent evt)
    {}",False,False,"This method serves as a placeholder for handling subscription events that have failed, but it does not perform any actions related to updating the member.",False,"The method ""subscriptionFailed"" is a callback function that is not interested in handling the event ""SubscriptionEvent"" for member update purposes. It does not perform any actions or have any functionality."
34,subscriptionMoved(SubscriptionMovedEvent),subscription moved evt not interested in this event for our member update purposes ,Method,,,,,148,5,1,"/** 
 * Not interested in this event for our member update purposes.
 */
","/**
     * Not interested in this event for our member update purposes.
     */
    public void subscriptionMoved(SubscriptionMovedEvent evt)
    {}",False,False,"This method serves as a placeholder for an event handler that is not interested in the ""subscriptionMoved"" event for member update purposes.",False,"The method ""subscriptionMoved"" is a void function that does not perform any actions. It is used to handle the event of a subscription being moved, but it is not relevant for the purpose of updating a member."
35,subscriptionRemoved(SubscriptionEvent),subscription removed evt updates corresponding chat room members when a contact has been removed from our contact list ,Method,,,net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+updateChatRoomMembers(Contact) net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+updateChatRoomMembers(Contact),,329,10,1,"/** 
 * Updates corresponding chat room members when a contact has been removed from our contact list.
 */
","/**
     * Updates corresponding chat room members when a contact has been removed
     * from our contact list.
     */
    public void subscriptionRemoved(SubscriptionEvent evt)
    {
        // Set to null the contact reference in all corresponding chat room
        // members.
        this.updateChatRoomMembers(null);
    }",False,False,This method updates the chat room members when a contact is removed from the contact list by setting the contact reference to null in all corresponding chat room members.,True,"This code is a method called ""subscriptionRemoved"" that is responsible for updating chat room members when a contact is removed from the contact list. It sets the contact reference to null in all corresponding chat room members."
36,subscriptionResolved(SubscriptionEvent),subscription resolved evt not interested in this event for our member update purposes ,Method,,,,,146,5,1,"/** 
 * Not interested in this event for our member update purposes.
 */
","/**
     * Not interested in this event for our member update purposes.
     */
    public void subscriptionResolved(SubscriptionEvent evt)
    {}",False,False,This method serves as a placeholder for an event handler that is not interested in the subscription event for member update purposes.,False,"The code contains a method named ""subscriptionResolved"" which takes a SubscriptionEvent as a parameter. The method does not perform any actions and is used to indicate that the event is not relevant for member update purposes."
37,updateChatRoomMembers(Contact),update chat room members contact finds all chat room members which name corresponds to the name of the given contact and updates their contact references param contact the contact we re looking correspondences for ,Method,contactModified(ContactPropertyChangeEvent) subscriptionCreated(SubscriptionEvent) subscriptionRemoved(SubscriptionEvent),,java.util.Hashtable+elements() java.util.Hashtable+elements() java.util.Enumeration+hasMoreElements() java.util.Enumeration+hasMoreElements() java.util.Enumeration+nextElement() java.util.Enumeration+nextElement() net.java.sip.communicator.impl.protocol.icq.ChatRoomIcqImpl+findMemberForNickName(String) net.java.sip.communicator.impl.protocol.icq.ChatRoomIcqImpl+findMemberForNickName(String) net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.sip.communicator.service.protocol.Contact+getAddress() net.java.sip.communicator.impl.protocol.icq.ChatRoomMemberIcqImpl+setContact(Contact) net.java.sip.communicator.impl.protocol.icq.ChatRoomMemberIcqImpl+setContact(Contact) net.java.sip.communicator.impl.protocol.icq.ChatRoomMemberIcqImpl+setAvatar(byte[]) net.java.sip.communicator.impl.protocol.icq.ChatRoomMemberIcqImpl+setAvatar(byte[]) net.java.sip.communicator.service.protocol.Contact+getImage() net.java.sip.communicator.service.protocol.Contact+getImage(),net.java.sip.communicator.impl.protocol.icq.OperationSetMultiUserChatIcqImpl+chatRoomCache,770,24,2,"/** 
 * Finds all chat room members, which name corresponds to the name of the given contact and updates their contact references.
 * @param contact the contact we're looking correspondences for.
 */
","/**
     * Finds all chat room members, which name corresponds to the name of the
     * given contact and updates their contact references.
     * 
     * @param contact the contact we're looking correspondences for.
     */
    private void updateChatRoomMembers(Contact contact)
    {
        Enumeration<ChatRoomIcqImpl> chatRooms = chatRoomCache.elements();

        while (chatRooms.hasMoreElements())
        {
            ChatRoomIcqImpl chatRoom = chatRooms.nextElement();

            ChatRoomMemberIcqImpl member
                = chatRoom.findMemberForNickName(contact.getAddress());

            if (member != null)
            {
                member.setContact(contact);
                member.setAvatar(contact.getImage());
            }
        }
    }",False,False,This method updates the contact references for all chat room members whose name corresponds to the name of the given contact.,True,"This code is a private method that updates the contact references for all chat room members whose name corresponds to the given contact's address. It iterates through all chat rooms in the cache, finds the member with a matching nickname, and updates their contact and avatar with the given contact's information."
