index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,OnCompositionLoadedListener,MemberClass,,,com.airbnb.lottie.LottieComposition.OnCompositionLoadedListener+onCompositionLoaded(LottieComposition),,111,3,1,,"public interface OnCompositionLoadedListener {
    void onCompositionLoaded(LottieComposition composition);
  }",False
2,Cancellable,MemberClass,,,com.airbnb.lottie.LottieComposition.Cancellable+cancel(),,46,3,0,,"interface Cancellable {
    void cancel();
  }",False
3,MAX_PIXELS,Field,,,,,299,8,26,"/** 
 * The largest bitmap drawing cache can be is 8,294,400 bytes. There are 4 bytes per pixel leaving ~2.3M pixels available. Reduce the number a little bit for safety. <p> Hopefully this can be hardware accelerated someday.
 */
","/**
   * The largest bitmap drawing cache can be is 8,294,400 bytes. There are 4 bytes per pixel
   * leaving ~2.3M pixels available.
   * Reduce the number a little bit for safety.
   * <p>
   * Hopefully this can be hardware accelerated someday.
   */
  private static final int MAX_PIXELS = 1000;",False
4,"fromAssetFileName(Context,String,OnCompositionLoadedListener)",Method,,"com.airbnb.lottie.LottieAnimationView+setAnimation(String,CacheStrategy) com.airbnb.lottie.samples.AnimationFragment+onActivityResult(int,int,Intent) com.airbnb.lottie.samples.LottieFontViewGroup+init() com.airbnb.lottie.samples.LottieFontViewGroup+onKeyUp(int,KeyEvent)","java.lang.IllegalStateException+IllegalStateException(String,Throwable) com.airbnb.lottie.LottieComposition+fromInputStream(Context,InputStream,OnCompositionLoadedListener) com.airbnb.lottie.LottieComposition+fromInputStream(Context,InputStream,OnCompositionLoadedListener)",,460,13,9,"/** 
 * Loads a composition from a file stored in /assets.
 */
","/**
   * Loads a composition from a file stored in /assets.
   */
  public static Cancellable fromAssetFileName(Context context, String fileName,
      OnCompositionLoadedListener loadedListener) {
    InputStream stream;
    try {
      stream = context.getAssets().open(fileName);
    } catch (IOException e) {
      throw new IllegalStateException(""Unable to find file "" + fileName, e);
    }
    return fromInputStream(context, stream, loadedListener);
  }",True
5,"fromInputStream(Context,InputStream,OnCompositionLoadedListener)",Method,"fromAssetFileName(Context,String,OnCompositionLoadedListener)",com.airbnb.lottie.samples.AnimationFragment+onFileLoaded(Uri),"com.airbnb.lottie.LottieComposition.FileCompositionLoader+FileCompositionLoader(Resources,OnCompositionLoadedListener)",,456,12,9,"/** 
 * Loads a composition from an arbitrary input stream. <p> ex: fromInputStream(context, new FileInputStream(filePath), (composition) -> {});
 */
","/**
   * Loads a composition from an arbitrary input stream.
   * <p>
   * ex: fromInputStream(context, new FileInputStream(filePath), (composition) -> {});
   */
  public static Cancellable fromInputStream(Context context, InputStream stream,
      OnCompositionLoadedListener loadedListener) {
    FileCompositionLoader loader =
        new FileCompositionLoader(context.getResources(), loadedListener);
    loader.execute(stream);
    return loader;
  }",True
6,"fromFileSync(Context,String)",Method,,"com.airbnb.lottie.LottieTest+testAnimation(MainActivity,String,String,float[])","java.lang.IllegalStateException+IllegalStateException(String,Throwable) com.airbnb.lottie.LottieComposition+fromInputStream(Resources,InputStream) com.airbnb.lottie.LottieComposition+fromInputStream(Resources,InputStream)",,329,9,8,,"static LottieComposition fromFileSync(Context context, String fileName) {
    InputStream file;
    try {
      file = context.getAssets().open(fileName);
    } catch (IOException e) {
      throw new IllegalStateException(""Unable to find file "" + fileName, e);
    }
    return fromInputStream(context.getResources(), file);
  }",True
7,"fromJson(Resources,JSONObject,OnCompositionLoadedListener)",Method,,"com.airbnb.lottie.LottieAnimationView+setAnimation(JSONObject) com.airbnb.lottie.samples.AnimationFragment+onResponse(Call,Response)","com.airbnb.lottie.LottieComposition.JsonCompositionLoader+JsonCompositionLoader(Resources,OnCompositionLoadedListener)",,371,10,9,"/** 
 * Loads a composition from a raw json object. This is useful for animations loaded from the network.
 */
","/**
   * Loads a composition from a raw json object. This is useful for animations loaded from the
   * network.
   */
  public static Cancellable fromJson(Resources res, JSONObject json,
      OnCompositionLoadedListener loadedListener) {
    JsonCompositionLoader loader = new JsonCompositionLoader(res, loadedListener);
    loader.execute(json);
    return loader;
  }",True
8,"fromInputStream(Resources,InputStream)",Method,"fromFileSync(Context,String) FileCompositionLoader.doInBackground(InputStream)",,"java.io.InputStream+available() java.io.InputStream+available() java.io.InputStream+read(byte[]) java.io.InputStream+read(byte[]) java.io.InputStream+close() java.io.InputStream+close() java.lang.String+String(byte[],String) com.airbnb.lottie.LottieComposition+fromJsonSync(Resources,JSONObject) com.airbnb.lottie.LottieComposition+fromJsonSync(Resources,JSONObject) java.lang.IllegalStateException+IllegalStateException(String,Throwable) java.lang.IllegalStateException+IllegalStateException(String,Throwable)",,654,18,8,,"@SuppressWarnings(""WeakerAccess"")
  static LottieComposition fromInputStream(Resources res, InputStream file) {
    try {
      int size = file.available();
      byte[] buffer = new byte[size];
      //noinspection ResultOfMethodCallIgnored
      file.read(buffer);
      file.close();
      String json = new String(buffer, ""UTF-8"");

      JSONObject jsonObject = new JSONObject(json);
      return LottieComposition.fromJsonSync(res, jsonObject);
    } catch (IOException e) {
      throw new IllegalStateException(""Unable to find file."", e);
    } catch (JSONException e) {
      throw new IllegalStateException(""Unable to load JSON."", e);
    }
  }",True
9,"fromJsonSync(Resources,JSONObject)",Method,"fromInputStream(Resources,InputStream) JsonCompositionLoader.doInBackground(JSONObject)",,"com.airbnb.lottie.LottieComposition+LottieComposition(Resources) java.lang.Math+max(int,int) java.lang.Math+max(int,int) java.lang.Math+max(int,int) java.lang.Math+max(int,int) com.airbnb.lottie.Layer+Layer(JSONObject,LottieComposition) com.airbnb.lottie.LottieComposition+addLayer(LottieComposition,Layer) com.airbnb.lottie.LottieComposition+addLayer(LottieComposition,Layer) com.airbnb.lottie.LottieComposition+parsePrecomps(LottieComposition,JSONArray) com.airbnb.lottie.LottieComposition+parsePrecomps(LottieComposition,JSONArray) com.airbnb.lottie.LottieComposition+parseImages(LottieComposition,JSONArray) com.airbnb.lottie.LottieComposition+parseImages(LottieComposition,JSONArray)",com.airbnb.lottie.LottieComposition+scale com.airbnb.lottie.LottieComposition+scale com.airbnb.lottie.LottieComposition+MAX_PIXELS com.airbnb.lottie.LottieComposition+MAX_PIXELS com.airbnb.lottie.LottieComposition+scale com.airbnb.lottie.LottieComposition+bounds com.airbnb.lottie.LottieComposition+startFrame com.airbnb.lottie.LottieComposition+endFrame com.airbnb.lottie.LottieComposition+frameRate,1292,34,8,,"@SuppressWarnings(""WeakerAccess"")
  static LottieComposition fromJsonSync(Resources res, JSONObject json) {
    LottieComposition composition = new LottieComposition(res);

    int width = json.optInt(""w"", -1);
    int height = json.optInt(""h"", -1);
    if (width != -1 && height != -1) {
      int scaledWidth = (int) (width * composition.scale);
      int scaledHeight = (int) (height * composition.scale);
      if (Math.max(scaledWidth, scaledHeight) > MAX_PIXELS) {
        float factor = (float) MAX_PIXELS / (float) Math.max(scaledWidth, scaledHeight);
        scaledWidth *= factor;
        scaledHeight *= factor;
        composition.scale *= factor;
      }
      composition.bounds = new Rect(0, 0, scaledWidth, scaledHeight);
    }

    composition.startFrame = json.optLong(""ip"", 0);
    composition.endFrame = json.optLong(""op"", 0);
    composition.frameRate = json.optInt(""fr"", 0);

    JSONArray jsonLayers = json.optJSONArray(""layers"");
    for (int i = 0; i < jsonLayers.length(); i++) {
      Layer layer = new Layer(jsonLayers.optJSONObject(i), composition);
      addLayer(composition, layer);
    }

    JSONArray assetsJson = json.optJSONArray(""assets"");
    parsePrecomps(composition, assetsJson);
    parseImages(composition, assetsJson);

    return composition;
  }",True
10,"parsePrecomps(LottieComposition,JSONArray)",Method,"fromJsonSync(Resources,JSONObject)",,"com.airbnb.lottie.Layer+Layer(JSONObject,LottieComposition) com.airbnb.lottie.Layer+getId() com.airbnb.lottie.Layer+getId() java.util.List+add(E) java.util.List+add(E) java.util.Map+put(K,V) java.util.Map+put(K,V)",com.airbnb.lottie.LottieComposition+precomps,756,18,10,,"private static void parsePrecomps(LottieComposition composition, JSONArray assetsJson) {
    for (int i = 0; i < assetsJson.length(); i++) {
      JSONObject assetJson = assetsJson.optJSONObject(i);
      JSONArray layersJson = assetJson.optJSONArray(""layers"");
      if (layersJson == null) {
        continue;
      }
      List<Layer> layers = new ArrayList<>(layersJson.length());
      LongSparseArray<Layer> layerMap = new LongSparseArray<>();
      for (int j = 0; j < layersJson.length(); j++) {
        Layer layer = new Layer(layersJson.optJSONObject(j), composition);
        layerMap.put(layer.getId(), layer);
        layers.add(layer);
      }
      String id = assetJson.optString(""id"");
      composition.precomps.put(id, layers);
    }
  }",True
11,"parseImages(LottieComposition,JSONArray)",Method,"fromJsonSync(Resources,JSONObject)",,"com.airbnb.lottie.ImageAsset+ImageAsset(JSONObject) java.util.Map+put(K,V) java.util.Map+put(K,V) com.airbnb.lottie.ImageAsset+getId() com.airbnb.lottie.ImageAsset+getId()",com.airbnb.lottie.LottieComposition+images,369,10,10,,"private static void parseImages(LottieComposition composition, JSONArray assetsJson) {
    for (int i = 0; i < assetsJson.length(); i++) {
      JSONObject assetJson = assetsJson.optJSONObject(i);
      if (!assetJson.has(""p"")) {
        continue;
      }
      ImageAsset image = new ImageAsset(assetJson);
      composition.images.put(image.getId(), image);
    }
  }",True
12,"addLayer(LottieComposition,Layer)",Method,"fromJsonSync(Resources,JSONObject)",,java.util.List+add(E) java.util.List+add(E) com.airbnb.lottie.Layer+getId() com.airbnb.lottie.Layer+getId(),com.airbnb.lottie.LottieComposition+layers com.airbnb.lottie.LottieComposition+layerMap,165,4,10,,"private static void addLayer(LottieComposition composition, Layer layer) {
    composition.layers.add(layer);
    composition.layerMap.put(layer.getId(), layer);
  }",True
13,precomps,Field,,,,,66,1,18,,"private final Map<String, List<Layer>> precomps = new HashMap<>();",False
14,images,Field,,,,,63,1,18,,"private final Map<String, ImageAsset> images = new HashMap<>();",False
15,layerMap,Field,,,,,72,1,18,,private final LongSparseArray<Layer> layerMap = new LongSparseArray<>();,False
16,layers,Field,,,,,53,1,18,,private final List<Layer> layers = new ArrayList<>();,False
17,bounds,Field,,,,,20,1,2,,private Rect bounds;,False
18,startFrame,Field,,,,,24,1,2,,private long startFrame;,False
19,endFrame,Field,,,,,22,1,2,,private long endFrame;,False
20,frameRate,Field,,,,,22,1,2,,private int frameRate;,False
21,scale,Field,,,,,20,1,2,,private float scale;,False
22,LottieComposition(Resources),Method,,,,com.airbnb.lottie.LottieComposition+scale,91,3,2,,"private LottieComposition(Resources res) {
    scale = res.getDisplayMetrics().density;
  }",False
23,layerModelForId(long),Method,,com.airbnb.lottie.L+toString(String) com.airbnb.lottie.L+toString(String) com.airbnb.lottie.L+toString(String),,com.airbnb.lottie.LottieComposition+layerMap,65,3,0,,"Layer layerModelForId(long id) {
    return layerMap.get(id);
  }",False
24,getBounds(),Method,,"com.airbnb.lottie.L+Layer(JSONObject,LottieComposition) com.airbnb.lottie.L+LayerView(Layer,LottieComposition,Callback,CanvasPool) com.airbnb.lottie.LottieDrawable+setComposition(LottieComposition) com.airbnb.lottie.LottieDrawable+setComposition(LottieComposition) com.airbnb.lottie.LottieDrawable+draw(Canvas) com.airbnb.lottie.LottieDrawable+getIntrinsicWidth() com.airbnb.lottie.LottieDrawable+getIntrinsicHeight()",,com.airbnb.lottie.LottieComposition+bounds,82,3,1,,"@SuppressWarnings(""WeakerAccess"") public Rect getBounds() {
    return bounds;
  }",False
25,getDuration(),Method,getDurationFrames(),com.airbnb.lottie.LottieAnimationView+getDuration() com.airbnb.lottie.LottieDrawable+setSpeed(float),,com.airbnb.lottie.LottieComposition+endFrame com.airbnb.lottie.LottieComposition+startFrame com.airbnb.lottie.LottieComposition+frameRate,175,4,1,,"@SuppressWarnings(""WeakerAccess"") public long getDuration() {
    long frameDuration = endFrame - startFrame;
    return (long) (frameDuration / (float) frameRate * 1000);
  }",False
26,getEndFrame(),Method,,"com.airbnb.lottie.L+Layer(JSONObject,LottieComposition) com.airbnb.lottie.L+Layer(JSONObject,LottieComposition)",,com.airbnb.lottie.LottieComposition+endFrame,45,3,0,,"long getEndFrame() {
    return endFrame;
  }",False
27,getLayers(),Method,,com.airbnb.lottie.LottieDrawable+buildLayersForComposition(LottieComposition) com.airbnb.lottie.LottieDrawable+buildLayersForComposition(LottieComposition) com.airbnb.lottie.LottieDrawable+buildLayersForComposition(LottieComposition) com.airbnb.lottie.LottieDrawable+buildLayersForComposition(LottieComposition),,com.airbnb.lottie.LottieComposition+layers,48,3,0,,"List<Layer> getLayers() {
    return layers;
  }",False
28,getPrecomps(String),Method,,com.airbnb.lottie.L+setupPreCompLayer(),java.util.Map+get(Object) java.util.Map+get(Object),com.airbnb.lottie.LottieComposition+precomps,81,4,0,,"@Nullable
  List<Layer> getPrecomps(String id) {
    return precomps.get(id);
  }",False
29,hasImages(),Method,,com.airbnb.lottie.L+drawBitmapIfNeeded(Canvas),java.util.Map+isEmpty() java.util.Map+isEmpty(),com.airbnb.lottie.LottieComposition+images,55,3,0,,"boolean hasImages() {
    return !images.isEmpty();
  }",False
30,getImages(),Method,,com.airbnb.lottie.LottieDrawable+getImageAssetBitmapManager(),,com.airbnb.lottie.LottieComposition+images,60,3,0,,"Map<String, ImageAsset> getImages() {
    return images;
  }",False
31,getDurationFrames(),Method,,"com.airbnb.lottie.Keyframe+getStartProgress() com.airbnb.lottie.Keyframe+getEndProgress() com.airbnb.lottie.L+Layer(JSONObject,LottieComposition) com.airbnb.lottie.L+Layer(JSONObject,LottieComposition)",com.airbnb.lottie.LottieComposition+getDuration() com.airbnb.lottie.LottieComposition+getDuration(),com.airbnb.lottie.LottieComposition+frameRate,85,3,0,,"float getDurationFrames() {
    return getDuration() * (float) frameRate / 1000f;
  }",False
32,getScale(),Method,,"null+AnimatablePathValue(Object,LottieComposition) null+getScale() com.airbnb.lottie.L+Layer(JSONObject,LottieComposition) com.airbnb.lottie.L+Layer(JSONObject,LottieComposition) com.airbnb.lottie.L+Layer(JSONObject,LottieComposition) com.airbnb.lottie.L+Layer(JSONObject,LottieComposition) com.airbnb.lottie.LottieDrawable+PathKeyframe(JSONObject,LottieComposition,AnimatableValue<PointF,?>) com.airbnb.lottie.LottieDrawable+PathKeyframe(JSONObject,LottieComposition,AnimatableValue<PointF,?>) com.airbnb.lottie.LottieDrawable+PathKeyframe(JSONObject,LottieComposition,AnimatableValue<PointF,?>)",,com.airbnb.lottie.LottieComposition+scale,47,3,1,,"public float getScale() {
    return scale;
  }",False
33,toString(),Method,,,java.lang.StringBuilder+StringBuilder(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) com.airbnb.lottie.Layer+toString(String) com.airbnb.lottie.Layer+toString(String) java.lang.StringBuilder+toString() java.lang.StringBuilder+toString(),com.airbnb.lottie.LottieComposition+layers,216,7,1,,"@Override public String toString() {
    final StringBuilder sb = new StringBuilder(""LottieComposition:\n"");
    for (Layer layer : layers) {
      sb.append(layer.toString(""\t""));
    }
    return sb.toString();
  }",False
34,FileCompositionLoader,MemberClass,,,"com.airbnb.lottie.LottieComposition.FileCompositionLoader+FileCompositionLoader(Resources,OnCompositionLoadedListener) com.airbnb.lottie.LottieComposition.FileCompositionLoader+doInBackground(InputStream[]) com.airbnb.lottie.LottieComposition+fromInputStream(Resources,InputStream) com.airbnb.lottie.LottieComposition+fromInputStream(Resources,InputStream) com.airbnb.lottie.LottieComposition.FileCompositionLoader+onPostExecute(LottieComposition) com.airbnb.lottie.LottieComposition.OnCompositionLoadedListener+onCompositionLoaded(LottieComposition) com.airbnb.lottie.LottieComposition.OnCompositionLoadedListener+onCompositionLoaded(LottieComposition)",com.airbnb.lottie.LottieComposition.FileCompositionLoader+res com.airbnb.lottie.LottieComposition.FileCompositionLoader+loadedListener com.airbnb.lottie.LottieComposition.FileCompositionLoader+res com.airbnb.lottie.LottieComposition.FileCompositionLoader+loadedListener com.airbnb.lottie.LottieComposition.FileCompositionLoader+res com.airbnb.lottie.LottieComposition.FileCompositionLoader+loadedListener,630,20,26,,"private static final class FileCompositionLoader extends CompositionLoader<InputStream> {

    private final Resources res;
    private final OnCompositionLoadedListener loadedListener;

    FileCompositionLoader(Resources res, OnCompositionLoadedListener loadedListener) {
      this.res = res;
      this.loadedListener = loadedListener;
    }

    @Override
    protected LottieComposition doInBackground(InputStream... params) {
      return fromInputStream(res, params[0]);
    }

    @Override
    protected void onPostExecute(LottieComposition composition) {
      loadedListener.onCompositionLoaded(composition);
    }
  }",False
35,JsonCompositionLoader,MemberClass,,,"com.airbnb.lottie.LottieComposition.JsonCompositionLoader+JsonCompositionLoader(Resources,OnCompositionLoadedListener) com.airbnb.lottie.LottieComposition.JsonCompositionLoader+doInBackground(JSONObject[]) com.airbnb.lottie.LottieComposition+fromJsonSync(Resources,JSONObject) com.airbnb.lottie.LottieComposition+fromJsonSync(Resources,JSONObject) com.airbnb.lottie.LottieComposition.JsonCompositionLoader+onPostExecute(LottieComposition) com.airbnb.lottie.LottieComposition.OnCompositionLoadedListener+onCompositionLoaded(LottieComposition) com.airbnb.lottie.LottieComposition.OnCompositionLoadedListener+onCompositionLoaded(LottieComposition)",com.airbnb.lottie.LottieComposition.JsonCompositionLoader+res com.airbnb.lottie.LottieComposition.JsonCompositionLoader+loadedListener com.airbnb.lottie.LottieComposition.JsonCompositionLoader+res com.airbnb.lottie.LottieComposition.JsonCompositionLoader+loadedListener com.airbnb.lottie.LottieComposition.JsonCompositionLoader+res com.airbnb.lottie.LottieComposition.JsonCompositionLoader+loadedListener,625,20,26,,"private static final class JsonCompositionLoader extends CompositionLoader<JSONObject> {

    private final Resources res;
    private final OnCompositionLoadedListener loadedListener;

    JsonCompositionLoader(Resources res, OnCompositionLoadedListener loadedListener) {
      this.res = res;
      this.loadedListener = loadedListener;
    }

    @Override
    protected LottieComposition doInBackground(JSONObject... params) {
      return fromJsonSync(res, params[0]);
    }

    @Override
    protected void onPostExecute(LottieComposition composition) {
      loadedListener.onCompositionLoaded(composition);
    }
  }",False
36,CompositionLoader,MemberClass,,,com.airbnb.lottie.LottieComposition.CompositionLoader+cancel() com.airbnb.lottie.LottieComposition.CompositionLoader+cancel() com.airbnb.lottie.LottieComposition.CompositionLoader+cancel(),,211,8,1034,,"private abstract static class CompositionLoader<Params>
      extends AsyncTask<Params, Void, LottieComposition>
      implements Cancellable {

    @Override public void cancel() {
      cancel(true);
    }
  }",False
