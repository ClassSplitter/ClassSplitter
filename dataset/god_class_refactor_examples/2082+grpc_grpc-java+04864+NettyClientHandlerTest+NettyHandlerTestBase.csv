index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,handler,handler ,Field,,,,,35,1,2,,private NettyClientHandler handler;,False,False,,False,
2,channel,channel ,Field,,,,,32,2,2,,"@Mock
  private Channel channel;",True,True,,False,
3,ctx,ctx ,Field,inboundHeadersShouldForwardToStream() inboundDataShouldForwardToStream(),,,,42,2,2,,"@Mock
  private ChannelHandlerContext ctx;",True,True,,False,
4,future,future ,Field,,,,,37,2,2,,"@Mock
  private ChannelFuture future;",True,True,,False,
5,promise,promise ,Field,,,,,39,2,2,,"@Mock
  private ChannelPromise promise;",True,True,,False,
6,stream,stream ,Field,,,,,41,2,2,,"@Mock
  private NettyClientStream stream;",False,False,,False,
7,method,method ,Field,,,,,46,2,2,,"@Mock
  private MethodDescriptor<?, ?> method;",False,False,,False,
8,frameListener,frame listener ,Field,,,,,49,2,2,,"@Mock
  private Http2FrameListener frameListener;",True,True,,False,
9,frameWriter,frame writer ,Field,,,,,37,1,2,,private Http2FrameWriter frameWriter;,True,True,,False,
10,frameReader,frame reader ,Field,,,,,37,1,2,,private Http2FrameReader frameReader;,True,True,,False,
11,content,content ,Field,,,,,24,1,2,,private ByteBuf content;,False,False,,False,
12,setup(),setup ,Method,,,"com.google.net.stubby.newtransport.netty.NettyClientHandler+NettyClientHandler(String,boolean,Http2StreamRemovalPolicy) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+mockContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+mockContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+mockFuture(boolean) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+mockFuture(boolean) com.google.net.stubby.MethodDescriptor+getName() com.google.net.stubby.MethodDescriptor+getName() com.google.net.stubby.MethodDescriptor+getHeaders() com.google.net.stubby.MethodDescriptor+getHeaders() com.google.net.stubby.newtransport.AbstractStream+state() com.google.net.stubby.newtransport.AbstractStream+state() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+serializeSettings(Http2Settings) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+serializeSettings(Http2Settings) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+mockContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+mockContext()",com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+frameWriter com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+frameReader com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+content com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+channel com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+method com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+method com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx,1039,28,1,,"@Before
  public void setup() throws Exception {
    MockitoAnnotations.initMocks(this);

    frameWriter = new DefaultHttp2FrameWriter();
    frameReader = new DefaultHttp2FrameReader();
    handler = new NettyClientHandler(""www.fake.com"", true, immediateRemovalPolicy());
    content = Unpooled.copiedBuffer(""hello world"", UTF_8);

    when(channel.isActive()).thenReturn(true);
    mockContext();
    mockFuture(true);

    when(method.getName()).thenReturn(""fakemethod"");
    when(method.getHeaders()).thenReturn(ImmutableMap.of(""auth"", ""sometoken""));
    when(stream.state()).thenReturn(StreamState.OPEN);

    // Simulate activation of the handler to force writing of the initial settings
    handler.handlerAdded(ctx);

    // Simulate receipt of initial remote settings.
    ByteBuf serializedSettings = serializeSettings(new Http2Settings());
    handler.channelRead(ctx, serializedSettings);

    // Reset the context to clear any interactions resulting from the HTTP/2
    // connection preface handshake.
    mockContext();
  }",False,False,"The function of this method is to set up the necessary objects and mock behaviors for testing a NettyClientHandler. It initializes the frame writer and reader, creates a NettyClientHandler with specified parameters, sets up content for testing, mocks certain behaviors using Mockito, simulates activation and receipt of initial settings, and resets the context.",False,"The code is a setup method for a unit test. It initializes various objects and mocks, sets up the necessary conditions for the test, and simulates the activation of a handler and receipt of initial remote settings for an HTTP/2 connection."
13,createStreamShouldSucceed(),create stream should succeed ,Method,,,"com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.CreateStreamCommand+CreateStreamCommand(MethodDescriptor<?,?>,NettyClientStream) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+captureWrite(ChannelHandlerContext) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+captureWrite(ChannelHandlerContext) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newContext()",com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+method com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+frameReader com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+frameListener com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+frameListener,1094,27,1,,"@Test
  public void createStreamShouldSucceed() throws Exception {
    handler.write(ctx, new CreateStreamCommand(method, stream), promise);
    verify(promise).setSuccess();
    verify(stream).id(eq(3));

    // Capture and verify the written headers frame.
    ByteBuf serializedHeaders = captureWrite(ctx);
    ChannelHandlerContext ctx = newContext();
    frameReader.readFrame(ctx, serializedHeaders, frameListener);
    ArgumentCaptor<Http2Headers> captor = ArgumentCaptor.forClass(Http2Headers.class);
    verify(frameListener).onHeadersRead(eq(ctx),
        eq(3),
        captor.capture(),
        eq(0),
        eq(Http2CodecUtil.DEFAULT_PRIORITY_WEIGHT),
        eq(false),
        eq(0),
        eq(false));
    Http2Headers headers = captor.getValue();
    assertEquals(""https"", headers.scheme());
    assertEquals(HTTP_METHOD, headers.method());
    assertEquals(""www.fake.com"", headers.authority());
    assertEquals(CONTENT_TYPE_PROTORPC, headers.get(CONTENT_TYPE_HEADER));
    assertEquals(""/fakemethod"", headers.path());
    assertEquals(""sometoken"", headers.get(""auth""));
  }",False,False,"The function of the method is to test the successful creation of a stream. It writes a command to a handler, verifies that the promise is set to success, verifies the stream ID, captures and verifies the written headers frame, and asserts the values of the headers.",True,"The code is a unit test for a method called `createStreamShouldSucceed()`. It verifies that the method correctly writes headers to a channel context and captures and verifies the written headers frame. It also checks if the headers contain the expected values for scheme, method, authority, content type, path, and authentication token."
14,cancelShouldSucceed(),cancel should succeed ,Method,,,"com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+createStream() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+createStream() com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.CancelStreamCommand+CancelStreamCommand(NettyClientStream) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+rstStreamFrame(int,int) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+rstStreamFrame(int,int)",com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx,295,10,1,,"@Test
  public void cancelShouldSucceed() throws Exception {
    createStream();

    handler.write(ctx, new CancelStreamCommand(stream), promise);

    ByteBuf expected = rstStreamFrame(3, Http2Error.CANCEL.code());
    verify(ctx).write(eq(expected), eq(promise));
    verify(ctx).flush();
  }",False,False,"The function of the method is to test the successful cancellation of a stream. It creates a stream, writes a cancel command to the handler, verifies that the expected frame is written, and flushes the context.",True,"The code is a test method named ""cancelShouldSucceed"" that verifies the behavior of a cancel operation. It creates a stream, writes a cancel command to a handler, and then verifies that the expected reset stream frame with the appropriate error code is written to the context and flushed."
15,cancelForUnknownStreamShouldFail(),cancel for unknown stream should fail ,Method,,,"com.google.net.stubby.newtransport.netty.NettyClientStream+id() com.google.net.stubby.newtransport.netty.NettyClientStream+id() com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.CancelStreamCommand+CancelStreamCommand(NettyClientStream)",com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise,234,6,1,,"@Test
  public void cancelForUnknownStreamShouldFail() throws Exception {
    when(stream.id()).thenReturn(3);
    handler.write(ctx, new CancelStreamCommand(stream), promise);
    verify(promise).setFailure(any(Throwable.class));
  }",False,False,This method is a unit test that verifies if calling the cancelForUnknownStreamShouldFail() method will result in a failure by setting the promise to fail with any Throwable.,True,"The code is a unit test that verifies the behavior of a method called `cancelForUnknownStreamShouldFail()`. It sets up a mock object `stream` with an ID of 3, then calls the `write()` method of `handler` with a `CancelStreamCommand` object and a `promise`. Finally, it verifies that the `promise` is set to fail with any type of `Throwable` object."
16,sendFrameShouldSucceed(),send frame should succeed ,Method,,,"com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+createStream() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+createStream() com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.SendGrpcFrameCommand+SendGrpcFrameCommand(NettyClientStream,ByteBuf,boolean)",com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+content com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx,366,10,1,,"@Test
  public void sendFrameShouldSucceed() throws Exception {
    createStream();

    // Send a frame and verify that it was written.
    handler.write(ctx, new SendGrpcFrameCommand(stream, content, true), promise);
    verify(promise, never()).setFailure(any(Throwable.class));
    verify(ctx).write(any(ByteBuf.class), eq(promise));
    verify(ctx).flush();
  }",False,False,"The function of the method is to test the successful sending of a frame by creating a stream, writing a frame, and verifying that it was written without any failure.",True,"The code is a unit test for a method called `sendFrameShouldSucceed()`. It creates a stream, sends a frame using a `SendGrpcFrameCommand`, and verifies that the frame was written successfully by checking if the promise was not set to failure and if the `write()` and `flush()` methods were called on the context."
17,sendForUnknownStreamShouldFail(),send for unknown stream should fail ,Method,,,"com.google.net.stubby.newtransport.netty.NettyClientStream+id() com.google.net.stubby.newtransport.netty.NettyClientStream+id() com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.SendGrpcFrameCommand+SendGrpcFrameCommand(NettyClientStream,ByteBuf,boolean)",com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+content com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise,248,6,1,,"@Test
  public void sendForUnknownStreamShouldFail() throws Exception {
    when(stream.id()).thenReturn(3);
    handler.write(ctx, new SendGrpcFrameCommand(stream, content, true), promise);
    verify(promise).setFailure(any(Throwable.class));
  }",False,False,"This method is a unit test that verifies if sending a gRPC frame for an unknown stream should fail. It mocks the stream ID, writes a command, and verifies if the promise is set to failure.",True,"The code is a unit test that verifies the behavior of a method called `sendForUnknownStreamShouldFail()`. It sets up a mock object, calls the `write()` method of a `handler` object with a `SendGrpcFrameCommand` object, and then verifies that the `promise` object is set to fail with any type of `Throwable` exception."
18,inboundHeadersShouldForwardToStream(),inbound headers should forward to stream ,Method,,,"com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+createStream() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+createStream() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+headersFrame(int,Http2Headers) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+headersFrame(int,Http2Headers)",com.google.net.stubby.newtransport.HttpUtil+CONTENT_TYPE_HEADER com.google.net.stubby.newtransport.HttpUtil+CONTENT_TYPE_PROTORPC com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream,455,11,1,,"@Test
  public void inboundHeadersShouldForwardToStream() throws Exception {
    createStream();

    // Read a headers frame first.
    Http2Headers headers = DefaultHttp2Headers.newBuilder().status(""200"")
        .set(HttpUtil.CONTENT_TYPE_HEADER, HttpUtil.CONTENT_TYPE_PROTORPC).build();
    ByteBuf headersFrame = headersFrame(3, headers);
    handler.channelRead(this.ctx, headersFrame);
    verify(stream).inboundHeadersRecieved(headers, false);
  }",False,False,"The function of the method is to test if inbound headers are forwarded to a stream correctly. It creates a stream, reads a headers frame, and verifies that the stream's inbound headers are received correctly.",True,"The code is a unit test that verifies the behavior of a method called `inboundHeadersShouldForwardToStream()`. It creates a stream, reads a headers frame, and then verifies that the `inboundHeadersReceived()` method of the `stream` object is called with the expected headers and a `false` flag."
19,inboundDataShouldForwardToStream(),inbound data should forward to stream ,Method,,,"com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+createStream() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+createStream() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+dataFrame(int,boolean) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+dataFrame(int,boolean)",com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+content com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise,397,10,1,,"@Test
  public void inboundDataShouldForwardToStream() throws Exception {
    createStream();

    // Create a data frame and then trigger the handler to read it.
    // Need to retain to simulate what is done by the stream.
    ByteBuf frame = dataFrame(3, false).retain();
    handler.channelRead(this.ctx, frame);
    verify(stream).inboundDataReceived(eq(content), eq(false), eq(promise));
  }",False,False,"The function of the method is to test if inbound data is correctly forwarded to a stream. It creates a stream, creates a data frame, triggers the handler to read the data frame, and verifies if the stream correctly receives the inbound data.",True,"The code is a unit test that verifies if inbound data is correctly forwarded to a stream. It creates a data frame, triggers the handler to read it, and then verifies if the stream's `inboundDataReceived` method is called with the expected parameters."
20,createShouldQueueStream(),create should queue stream ,Method,,,"com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+setMaxConcurrentStreams(int) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+setMaxConcurrentStreams(int) com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.CreateStreamCommand+CreateStreamCommand(MethodDescriptor<?,?>,NettyClientStream)",com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+method com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+frameListener com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx,532,16,1,,"@Test
  public void createShouldQueueStream() throws Exception {
    // Disallow stream creation to force the stream to get added to the pending queue.
    setMaxConcurrentStreams(0);
    handler.write(ctx, new CreateStreamCommand(method, stream), promise);

    // Make sure the write never occurred.
    verify(frameListener, never()).onHeadersRead(eq(ctx),
        eq(3),
        any(Http2Headers.class),
        eq(0),
        eq(Http2CodecUtil.DEFAULT_PRIORITY_WEIGHT),
        eq(false),
        eq(0),
        eq(false));
  }",False,False,"The function of this method is to test the behavior of the ""create"" method by queuing a stream and ensuring that the write operation did not occur.",True,"This code is a unit test for a method called ""createShouldQueueStream"". It sets the maximum concurrent streams to 0, writes a command to create a stream, and then verifies that the write did not occur by checking that a specific method was never called."
21,receivedGoAwayShouldFailQueuedStreams(),received go away should fail queued streams ,Method,,,"com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+setMaxConcurrentStreams(int) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+setMaxConcurrentStreams(int) com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.CreateStreamCommand+CreateStreamCommand(MethodDescriptor<?,?>,NettyClientStream) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+goAwayFrame(int) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+goAwayFrame(int)",com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+method com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise,346,9,1,,"@Test
  public void receivedGoAwayShouldFailQueuedStreams() throws Exception {
    // Force a stream to get added to the pending queue.
    setMaxConcurrentStreams(0);
    handler.write(ctx, new CreateStreamCommand(method, stream), promise);

    handler.channelRead(ctx, goAwayFrame(0));
    verify(promise).setFailure(any(Throwable.class));
  }",False,False,"This method is a test case that verifies if the ""receivedGoAwayShouldFailQueuedStreams"" function correctly fails queued streams when a ""goAway"" frame is received.",True,"The code is a test method that verifies the behavior of a method called `receivedGoAwayShouldFailQueuedStreams()`. It sets the maximum concurrent streams to 0, adds a stream to the pending queue, simulates receiving a go-away frame, and verifies that the promise associated with the stream is set to failure."
22,receivedGoAwayShouldFailUnknownStreams(),received go away should fail unknown streams ,Method,,,"com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.CreateStreamCommand+CreateStreamCommand(MethodDescriptor<?,?>,NettyClientStream) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+goAwayFrame(int) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+goAwayFrame(int)",com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+method com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream,598,12,1,,"@Test
  public void receivedGoAwayShouldFailUnknownStreams() throws Exception {
    // Force a stream to get added to the pending queue.
    handler.write(ctx, new CreateStreamCommand(method, stream), promise);

    // Read a GOAWAY that indicates our stream was never processed by the server.
    handler.channelRead(ctx, goAwayFrame(0));
    ArgumentCaptor<Status> captor = ArgumentCaptor.forClass(Status.class);
    InOrder inOrder = inOrder(stream);
    inOrder.verify(stream, calls(1)).setStatus(captor.capture());
    assertEquals(Transport.Code.UNAVAILABLE, captor.getValue().getCode());
  }",False,False,"The function of the given method is to test that when a GOAWAY frame is received indicating that a stream was not processed by the server, the method sets the status of the stream to UNAVAILABLE.",True,The code is a unit test that verifies the behavior of a method called `receivedGoAwayShouldFailUnknownStreams()`. It simulates a scenario where a stream is added to a pending queue and then receives a GOAWAY frame indicating that the stream was never processed by the server. The test checks if the stream's status is set to UNAVAILABLE.
23,setMaxConcurrentStreams(int),set max concurrent streams max ,Method,createShouldQueueStream() receivedGoAwayShouldFailQueuedStreams(),,com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+serializeSettings(Http2Settings) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+serializeSettings(Http2Settings) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+mockContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+mockContext(),com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx,282,6,2,,"private void setMaxConcurrentStreams(int max) throws Exception {
    ByteBuf serializedSettings = serializeSettings(new Http2Settings().maxConcurrentStreams(max));
    handler.channelRead(ctx, serializedSettings);
    // Reset the context to clear this write.
    mockContext();
  }",False,False,"This method sets the maximum number of concurrent streams for HTTP/2 communication. It serializes the settings, reads the serialized settings using a handler, and then resets the context.",False,"The code defines a private method called ""setMaxConcurrentStreams"" that takes an integer parameter ""max"" and throws an exception. It serializes the settings using the ""serializeSettings"" method, then calls the ""channelRead"" method on the ""handler"" object with the serialized settings. Finally, it resets the context by calling the ""mockContext"" method."
24,"headersFrame(int,Http2Headers)",headers frame stream id headers ,Method,inboundHeadersShouldForwardToStream(),,com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+captureWrite(ChannelHandlerContext) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+captureWrite(ChannelHandlerContext),com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+frameWriter com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise,219,5,2,,"private ByteBuf headersFrame(int streamId, Http2Headers headers) {
    ChannelHandlerContext ctx = newContext();
    frameWriter.writeHeaders(ctx, streamId, headers, 0, false, promise);
    return captureWrite(ctx);
  }",False,False,"This method creates a headers frame for a given stream ID and headers, writes the headers frame to the channel context using the frame writer, and returns the captured write.",False,"The given code is a private method that takes a stream ID and HTTP2 headers as input. It creates a new context, writes the headers using a frame writer, and returns the captured write."
25,"dataFrame(int,boolean)",data frame stream id end stream ,Method,inboundDataShouldForwardToStream(),,com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newPromise() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newPromise() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+captureWrite(ChannelHandlerContext) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+captureWrite(ChannelHandlerContext),com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+content com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+frameWriter com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+content,310,7,2,,"private ByteBuf dataFrame(int streamId, boolean endStream) {
    // Need to retain the content since the frameWriter releases it.
    content.retain();
    ChannelHandlerContext ctx = newContext();
    frameWriter.writeData(ctx, streamId, content, 0, endStream, newPromise());
    return captureWrite(ctx);
  }",False,False,"This method creates a data frame with the given stream ID and endStream flag. It retains the content, writes the data frame using the frameWriter, and returns the captured write.",False,"The `dataFrame` method takes a stream ID and a boolean flag indicating if the stream has ended. It retains the content, writes the data to the channel using a frame writer, and returns the captured write."
26,goAwayFrame(int),go away frame last stream id ,Method,receivedGoAwayShouldFailQueuedStreams() receivedGoAwayShouldFailUnknownStreams(),,com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newPromise() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newPromise() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+captureWrite(ChannelHandlerContext) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+captureWrite(ChannelHandlerContext),com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+frameWriter,215,5,2,,"private ByteBuf goAwayFrame(int lastStreamId) {
    ChannelHandlerContext ctx = newContext();
    frameWriter.writeGoAway(ctx, lastStreamId, 0, Unpooled.EMPTY_BUFFER, newPromise());
    return captureWrite(ctx);
  }",True,True,"This method creates a GoAway frame with the given lastStreamId, writes it to the channel context using the frameWriter, and returns the captured write.",False,"The `goAwayFrame` method creates a new context, writes a go-away frame with the given last stream ID and empty buffer using the frame writer, and returns the captured write from the context."
27,"rstStreamFrame(int,int)",rst stream frame stream id error code ,Method,cancelShouldSucceed(),,com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newPromise() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newPromise() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+captureWrite(ChannelHandlerContext) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+captureWrite(ChannelHandlerContext),com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+frameWriter,213,5,2,,"private ByteBuf rstStreamFrame(int streamId, int errorCode) {
    ChannelHandlerContext ctx = newContext();
    frameWriter.writeRstStream(ctx, streamId, errorCode, newPromise());
    return captureWrite(ctx);
  }",True,True,"This method creates a new context, writes a reset stream frame with the given stream ID and error code using the frame writer, and returns the captured write from the context.",False,"The `rstStreamFrame` method creates a new context, writes a reset stream frame with the given stream ID and error code using a frame writer, and returns the captured write from the context."
28,serializeSettings(Http2Settings),serialize settings settings ,Method,setup() setMaxConcurrentStreams(int),,com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newPromise() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+newPromise() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+captureWrite(ChannelHandlerContext) com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+captureWrite(ChannelHandlerContext),com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+frameWriter,199,5,2,,"private ByteBuf serializeSettings(Http2Settings settings) {
    ChannelHandlerContext ctx = newContext();
    frameWriter.writeSettings(ctx, settings, newPromise());
    return captureWrite(ctx);
  }",True,True,"This method serializes the given Http2Settings object by writing it to the ChannelHandlerContext using the frameWriter, and then captures the written data using the captureWrite method.",False,"The given code is a private method that serializes the provided Http2Settings object. It creates a new ChannelHandlerContext, writes the settings using a frame writer, and returns the serialized settings as a ByteBuf object."
29,newContext(),new context ,Method,"createStreamShouldSucceed() headersFrame(int,Http2Headers) dataFrame(int,boolean) goAwayFrame(int) rstStreamFrame(int,int) serializeSettings(Http2Settings)",,,,207,5,2,,"private ChannelHandlerContext newContext() {
    ChannelHandlerContext ctx = Mockito.mock(ChannelHandlerContext.class);
    when(ctx.alloc()).thenReturn(UnpooledByteBufAllocator.DEFAULT);
    return ctx;
  }",True,True,This method creates a new instance of ChannelHandlerContext by mocking the ChannelHandlerContext class using Mockito. It sets the allocation strategy of the context to UnpooledByteBufAllocator.DEFAULT and returns the created context.,False,"The code defines a private method named `newContext()` that returns a mocked instance of `ChannelHandlerContext`. The method sets up a mock behavior for the `alloc()` method of the mocked context, returning the `UnpooledByteBufAllocator.DEFAULT`."
30,newPromise(),new promise ,Method,"dataFrame(int,boolean) goAwayFrame(int) rstStreamFrame(int,int) serializeSettings(Http2Settings)",,,,88,3,2,,"private ChannelPromise newPromise() {
    return Mockito.mock(ChannelPromise.class);
  }",True,True,This method serves to create and return a new instance of a mocked ChannelPromise object.,False,"The code defines a private method named `newPromise()` that returns a mocked instance of the `ChannelPromise` class. This method is likely used for testing purposes, allowing the developer to create a fake `ChannelPromise` object without invoking its actual behavior."
31,captureWrite(ChannelHandlerContext),capture write ctx ,Method,"createStreamShouldSucceed() headersFrame(int,Http2Headers) dataFrame(int,boolean) goAwayFrame(int) rstStreamFrame(int,int) serializeSettings(Http2Settings)",,,,236,5,2,,"private ByteBuf captureWrite(ChannelHandlerContext ctx) {
    ArgumentCaptor<ByteBuf> captor = ArgumentCaptor.forClass(ByteBuf.class);
    verify(ctx).write(captor.capture(), any(ChannelPromise.class));
    return captor.getValue();
  }",True,True,The function of the given method is to capture and return the ByteBuf argument passed to the write method of the ChannelHandlerContext object.,False,The given code is a private method that captures the ByteBuf argument passed to the write method of the ChannelHandlerContext object. It uses the ArgumentCaptor class from the Mockito library to capture the argument and returns the captured ByteBuf value.
32,createStream(),create stream ,Method,cancelShouldSucceed() sendFrameShouldSucceed() inboundHeadersShouldForwardToStream() inboundDataShouldForwardToStream(),,"com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.NettyClientHandler+write(ChannelHandlerContext,Object,ChannelPromise) com.google.net.stubby.newtransport.netty.CreateStreamCommand+CreateStreamCommand(MethodDescriptor<?,?>,NettyClientStream) com.google.net.stubby.newtransport.netty.NettyClientStream+id() com.google.net.stubby.newtransport.netty.NettyClientStream+id() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+mockContext() com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+mockContext()",com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+handler com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+method com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+stream,278,7,2,,"private void createStream() throws Exception {
    // Create the stream.
    handler.write(ctx, new CreateStreamCommand(method, stream), promise);
    when(stream.id()).thenReturn(3);
    // Reset the context mock to clear recording of sent headers frame.
    mockContext();
  }",False,False,"The function of the method is to create a stream. It does this by writing a command to the handler, setting the stream ID to 3, and resetting the context mock.",False,"The `createStream()` method is a private method that creates a stream. It writes a command to the handler, sets the stream ID to 3, and resets the context mock. It throws an exception if any error occurs during the process."
33,mockContext(),mock context ,Method,setup() setup() setMaxConcurrentStreams(int) createStream(),,,com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+channel com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+future com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+future com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+future com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+future com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+ctx com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+promise,475,11,2,,"private void mockContext() {
    Mockito.reset(ctx);
    Mockito.reset(promise);
    when(ctx.alloc()).thenReturn(UnpooledByteBufAllocator.DEFAULT);
    when(ctx.channel()).thenReturn(channel);
    when(ctx.write(any())).thenReturn(future);
    when(ctx.write(any(), eq(promise))).thenReturn(future);
    when(ctx.writeAndFlush(any())).thenReturn(future);
    when(ctx.writeAndFlush(any(), eq(promise))).thenReturn(future);
    when(ctx.newPromise()).thenReturn(promise);
  }",False,True,"The function of the method ""mockContext"" is to reset the ""ctx"" and ""promise"" objects using Mockito, and then set up various mock behaviors for the ""ctx"" object.",False,"The code defines a private method called ""mockContext"" that uses Mockito to mock certain behaviors of a given context object. It resets the context and promise objects, and then sets up various mock behaviors for methods like ""alloc"", ""channel"", ""write"", ""writeAndFlush"", and ""newPromise""."
34,mockFuture(boolean),mock future succeeded ,Method,setup(),,java.lang.Exception+Exception(String) +answer(InvocationOnMock),com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+future com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+future com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+future com.google.net.stubby.newtransport.netty.NettyClientHandlerTest+future,663,17,2,,"private void mockFuture(boolean succeeded) {
    when(future.isDone()).thenReturn(true);
    when(future.isCancelled()).thenReturn(false);
    when(future.isSuccess()).thenReturn(succeeded);
    if (!succeeded) {
      when(future.cause()).thenReturn(new Exception(""fake""));
    }

    doAnswer(new Answer<ChannelFuture>() {
      @Override
      public ChannelFuture answer(InvocationOnMock invocation) throws Throwable {
        ChannelFutureListener listener = (ChannelFutureListener) invocation.getArguments()[0];
        listener.operationComplete(future);
        return future;
      }
    }).when(future).addListener(any(ChannelFutureListener.class));
  }",True,True,"The function of the method is to mock a future object with specific behaviors. It sets the future to be done and not cancelled, and sets the success status based on the input parameter. If the success status is false, it sets the cause of the future to be a fake exception. It also adds a listener to the future that invokes the operationComplete method on the listener with the future as an argument.",False,"The code defines a private method called ""mockFuture"" that sets up mock behavior for a given future object. It sets the behavior for methods like ""isDone"", ""isCancelled"", ""isSuccess"", and ""cause"" based on a boolean parameter. It also sets up a listener for the future object that invokes the ""operationComplete"" method and returns the future object."
