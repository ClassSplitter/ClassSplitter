index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,log,log ,Field,,,,,75,1,18,,private final Logger log = LoggerFactory.getLogger(ModelServiceImpl.class);,False,False,,False,
2,NAMESPACE,namespace ,Field,,,,,69,1,25,,"public static final String NAMESPACE = ""http://activiti.com/modeler"";",False,False,,False,
3,THUMBNAIL_WIDTH,thumbnail width ,Field,,,,,44,1,10,,private static float THUMBNAIL_WIDTH = 300f;,True,True,,False,
4,deploymentService,deployment service ,Field,,,,,59,2,4,,"@Autowired
  protected DeploymentService deploymentService;",False,False,,False,
5,modelRepository,model repository ,Field,,,,,55,2,4,,"@Autowired
  protected ModelRepository modelRepository;",False,False,,False,
6,modelHistoryRepository,model history repository ,Field,,,,,69,2,4,,"@Autowired
  protected ModelHistoryRepository modelHistoryRepository;",False,False,,False,
7,modelRelationRepository,model relation repository ,Field,,,,,71,2,4,,"@Autowired
  protected ModelRelationRepository modelRelationRepository;",False,False,,False,
8,objectMapper,object mapper ,Field,,,,,49,2,4,,"@Autowired
  protected ObjectMapper objectMapper;",False,False,,False,
9,userCache,user cache ,Field,,,,,43,2,4,,"@Autowired
  protected UserCache userCache;",False,False,,False,
10,bpmnJsonConverter,bpmn json converter ,Field,,,,,72,1,4,,protected BpmnJsonConverter bpmnJsonConverter = new BpmnJsonConverter();,False,False,,False,
11,bpmnXMLConverter,bpmn xml converter ,Field,,,,,69,1,4,,protected BpmnXMLConverter bpmnXMLConverter = new BpmnXMLConverter();,False,False,,False,
12,getModel(Long),get model model id ,Method,,,,com.activiti.service.editor.ModelServiceImpl+modelRepository,106,4,1,,"@Override
  public AbstractModel getModel(Long modelId) {
    return modelRepository.findOne(modelId);
  }",False,False,This method serves to retrieve an AbstractModel object from the modelRepository based on the given modelId.,False,"The given code is an implementation of a method named ""getModel"" which takes a Long parameter ""modelId"" and returns an instance of the AbstractModel class. It retrieves the model from the modelRepository by calling the findOne method with the provided modelId."
13,"getModelsByModelTypeAndReferenceId(Integer,Long)",get models by model type and reference id model type reference id ,Method,,,"java.util.ArrayList+ArrayList(Collection) com.activiti.repository.editor.ModelRepository+findModelsByModelTypeAndReferenceIdOrNullReferenceId(Integer,Long) com.activiti.repository.editor.ModelRepository+findModelsByModelTypeAndReferenceIdOrNullReferenceId(Integer,Long)",com.activiti.service.editor.ModelServiceImpl+modelRepository,251,4,1,,"@Override
  public List<AbstractModel> getModelsByModelTypeAndReferenceId(Integer modelType, Long referenceId) {
    return new ArrayList<AbstractModel>(modelRepository.findModelsByModelTypeAndReferenceIdOrNullReferenceId(modelType, referenceId));
  }",False,False,This method returns a list of AbstractModel objects based on the given modelType and referenceId. It uses the modelRepository to find the models and creates a new ArrayList to store the results.,False,This code is an overridden method that returns a list of AbstractModel objects based on the given modelType and referenceId. It uses the modelRepository to find the models and returns them as an ArrayList.
14,getBpmnXML(AbstractModel),get bpmn xml model ,Method,,,"com.activiti.service.editor.ModelServiceImpl+getBpmnModel(AbstractModel,boolean) com.activiti.service.editor.ModelServiceImpl+getBpmnModel(AbstractModel,boolean) com.activiti.service.editor.ModelServiceImpl+getBpmnXML(BpmnModel) com.activiti.service.editor.ModelServiceImpl+getBpmnXML(BpmnModel)",,151,5,1,,"@Override
  public byte[] getBpmnXML(AbstractModel model) {
    BpmnModel bpmnModel = getBpmnModel(model, false);
    return getBpmnXML(bpmnModel);
  }",False,False,This method returns the BPMN XML representation of an AbstractModel object by first converting it to a BpmnModel object and then calling another method to get the XML.,False,"The given code is a method named ""getBpmnXML"" that takes an instance of the ""AbstractModel"" class as a parameter. It returns a byte array that represents the BPMN XML of the given model after converting it into a ""BpmnModel"" object."
15,getBpmnXML(BpmnModel),get bpmn xml bpmn model ,Method,getBpmnXML(AbstractModel),,org.activiti.bpmn.model.BpmnModel+getProcesses() org.activiti.bpmn.model.BpmnModel+getProcesses() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.lang.String+charAt(int) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.lang.String+charAt(int) java.lang.Character+isDigit(char) java.lang.Character+isDigit(char) org.activiti.bpmn.model.BaseElement+setId(String) org.activiti.bpmn.model.BaseElement+setId(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.converter.BpmnXMLConverter+convertToXML(BpmnModel) org.activiti.bpmn.converter.BpmnXMLConverter+convertToXML(BpmnModel),com.activiti.service.editor.ModelServiceImpl+bpmnXMLConverter,484,14,1,,"@Override
  public byte[] getBpmnXML(BpmnModel bpmnModel) {
    for (Process process : bpmnModel.getProcesses()) {
      if (StringUtils.isNotEmpty(process.getId())) {
        char firstCharacter = process.getId().charAt(0);
        // no digit is allowed as first character
        if (Character.isDigit(firstCharacter)) {
          process.setId(""a"" + process.getId());
        }
      }
    }
    byte[] xmlBytes = bpmnXMLConverter.convertToXML(bpmnModel);
    return xmlBytes;
  }",False,False,"This method takes a BpmnModel as input and returns a byte array representing the BPMN XML. It checks each process in the model and if the process ID starts with a digit, it adds an ""a"" in front of the ID. Finally, it converts the modified model to XML and returns the byte array.",False,"This code is a method that takes a BpmnModel as input and returns the corresponding BPMN XML as a byte array. It checks if the first character of each process ID is a digit and if so, it prefixes it with ""a"" to ensure it is not allowed as the first character."
16,"createModel(ModelRepresentation,String,User)",create model model editor json created by ,Method,,,com.activiti.domain.editor.Model+Model() com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.model.editor.ModelRepresentation+getName() com.activiti.model.editor.ModelRepresentation+getName() com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.model.editor.ModelRepresentation+getKey() com.activiti.model.editor.ModelRepresentation+getKey() com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.model.editor.ModelRepresentation+getModelType() com.activiti.model.editor.ModelRepresentation+getModelType() com.activiti.domain.editor.AbstractModel+setCreated(Date) com.activiti.domain.editor.AbstractModel+setCreated(Date) java.util.Calendar+getTime() java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+getTime() com.activiti.domain.editor.AbstractModel+setCreatedBy(String) com.activiti.domain.editor.AbstractModel+setCreatedBy(String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId() com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.model.editor.ModelRepresentation+getDescription() com.activiti.model.editor.ModelRepresentation+getDescription() com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) java.util.Calendar+getTime() java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+getTime() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId() com.activiti.domain.editor.AbstractModel+setReferenceId(Long) com.activiti.domain.editor.AbstractModel+setReferenceId(Long) com.activiti.model.editor.ModelRepresentation+getReferenceId() com.activiti.model.editor.ModelRepresentation+getReferenceId() com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.service.editor.ModelServiceImpl+persistModel(Model),,727,19,1,,"@Override
  @Transactional
  public Model createModel(ModelRepresentation model, String editorJson, User createdBy) {
    Model newModel = new Model();
    newModel.setVersion(1);
    newModel.setName(model.getName());
    newModel.setKey(model.getKey());
    newModel.setModelType(model.getModelType());
    newModel.setCreated(Calendar.getInstance().getTime());
    newModel.setCreatedBy(createdBy.getId());
    newModel.setDescription(model.getDescription());
    newModel.setModelEditorJson(editorJson);
    newModel.setLastUpdated(Calendar.getInstance().getTime());
    newModel.setLastUpdatedBy(createdBy.getId());
    newModel.setReferenceId(model.getReferenceId());

    persistModel(newModel);
    return newModel;
  }",False,False,"This method creates a new model object with the given parameters, sets various properties of the model, and persists it in the database. It then returns the newly created model.",False,"This code defines a method called ""createModel"" that creates a new model object with the provided information and persists it in the database. The method returns the newly created model object."
17,"createNewModelVersion(Model,String,User)",create new model version model object comment updated by ,Method,,,"com.activiti.service.editor.ModelServiceImpl+internalCreateNewModelVersion(Model,String,User,boolean) com.activiti.service.editor.ModelServiceImpl+internalCreateNewModelVersion(Model,String,User,boolean)",,210,5,1,,"@Override
  @Transactional
  public Model createNewModelVersion(Model modelObject, String comment, User updatedBy) {
    return (Model) internalCreateNewModelVersion(modelObject, comment, updatedBy, false);
  }",False,False,This method creates a new version of a model object with the provided comment and updated by the user. It uses the internalCreateNewModelVersion method and returns the created model.,False,"This code is a method that creates a new version of a model object. It takes the current model object, a comment, and the user who updated it as parameters. It returns the newly created model version."
18,"createNewModelVersionAndReturnModelHistory(Model,String,User)",create new model version and return model history model object comment updated by ,Method,,,"com.activiti.service.editor.ModelServiceImpl+internalCreateNewModelVersion(Model,String,User,boolean) com.activiti.service.editor.ModelServiceImpl+internalCreateNewModelVersion(Model,String,User,boolean)",,244,5,1,,"@Override
  @Transactional
  public ModelHistory createNewModelVersionAndReturnModelHistory(Model modelObject, String comment, User updatedBy) {
    return (ModelHistory) internalCreateNewModelVersion(modelObject, comment, updatedBy, true);
  }",False,False,"This method creates a new version of a model object, updates the model history, and returns the updated model history.",False,"This code is an overridden method that creates a new version of a model object and returns its history. It uses the internalCreateNewModelVersion method to perform the creation, passing in the model object, a comment, and the user who updated it. The method is annotated with @Transactional, indicating that it should be executed within a transaction."
19,"internalCreateNewModelVersion(Model,String,User,boolean)",internal create new model version model object comment updated by return model history ,Method,"createNewModelVersion(Model,String,User) createNewModelVersionAndReturnModelHistory(Model,String,User)",,com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) java.util.Date+Date() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId() com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.service.editor.ModelServiceImpl+persistModel(Model),,531,13,4,,"protected AbstractModel internalCreateNewModelVersion(Model modelObject, String comment, User updatedBy, boolean returnModelHistory) {
    modelObject.setLastUpdated(new Date());
    modelObject.setLastUpdatedBy(updatedBy.getId());
    modelObject.setComment(comment);

    ModelHistory historyModel = createNewModelhistory(modelObject);
    persistModelHistory(historyModel);

    modelObject.setVersion(modelObject.getVersion() + 1);
    persistModel(modelObject);

    return returnModelHistory ? historyModel : modelObject;
  }",False,False,"This method creates a new version of a model object. It updates the last updated date, last updated by user, and comment of the model object. It also creates a new model history, persists it, increments the version number, persists the model object, and returns either the model history or the model object based on a boolean flag.",False,"This code is a protected method that creates a new version of a model object. It updates the last updated date, last updated by user, and comment of the model object. It also creates a new model history, persists it, increments the version number of the model object, persists it, and returns either the model history or the model object based on a boolean flag."
20,saveModel(Model),save model model object ,Method,,,com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.service.editor.ModelServiceImpl+persistModel(Model),,97,4,1,,"@Override
  public Model saveModel(Model modelObject) {
    return persistModel(modelObject);
  }",False,False,"The function of this method is to override the saveModel method from a superclass and call the persistModel method, passing in a Model object as a parameter, and return the result.",False,This code snippet is an implementation of a method called `saveModel` that takes a `Model` object as a parameter and returns a `Model` object. It overrides a superclass method and internally calls another method called `persistModel` to save the model object.
21,"saveModel(Model,String,byte[],boolean,String,User)",save model model object editor json image bytes new version new version comment updated by ,Method,,,"com.activiti.service.editor.ModelServiceImpl+internalSave(String,String,String,String,boolean,String,byte[],User,Model) com.activiti.service.editor.ModelServiceImpl+internalSave(String,String,String,String,boolean,String,byte[],User,Model) com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+getDescription()",,365,7,1,,"@Override
  @Transactional
  public Model saveModel(Model modelObject, String editorJson, byte[] imageBytes, boolean newVersion, String newVersionComment, User updatedBy) {

    return internalSave(modelObject.getName(), modelObject.getKey(), modelObject.getDescription(), editorJson, newVersion, 
        newVersionComment, imageBytes, updatedBy, modelObject);
  }",False,False,"The method is used to save a model object along with its associated data such as editorJson, imageBytes, newVersionComment, and updatedBy. It returns the saved model object.",False,"This code is a method that saves a model object along with its associated data, such as editor JSON, image bytes, and version information. It uses the internalSave method to perform the actual saving operation and returns the saved model object."
22,"saveModel(long,String,String,String,String,boolean,String,User)",save model model id name key description editor json new version new version comment updated by ,Method,,,"com.activiti.service.editor.ModelServiceImpl+internalSave(String,String,String,String,boolean,String,byte[],User,Model) com.activiti.service.editor.ModelServiceImpl+internalSave(String,String,String,String,boolean,String,byte[],User,Model)",com.activiti.service.editor.ModelServiceImpl+modelRepository,385,8,1,,"@Override
  @Transactional
  public Model saveModel(long modelId, String name, String key, String description, String editorJson, 
      boolean newVersion, String newVersionComment, User updatedBy) {

    Model modelObject = modelRepository.findOne(modelId);
    return internalSave(name, key, description, editorJson, newVersion, newVersionComment, null, updatedBy, modelObject);
  }",False,False,"This method saves a model by retrieving it from the model repository using its ID, and then calling the internalSave method with the provided parameters. It also applies the @Transactional annotation.",False,"This code is a method that saves a model object with the given parameters. It retrieves the model object from the repository using the provided modelId, and then calls the internalSave method to perform the actual saving process. The method is annotated with @Transactional, indicating that it should be executed within a transaction."
23,"internalSave(String,String,String,String,boolean,String,byte[],User,Model)",internal save name key description editor json new version new version comment image bytes updated by model object ,Method,"saveModel(Model,String,byte[],boolean,String,User) saveModel(long,String,String,String,String,boolean,String,User)",,com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) java.util.Date+Date() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId() com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.Model+setThumbnail(byte[]) com.activiti.domain.editor.Model+setThumbnail(byte[]) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) java.util.Date+Date() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId() com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.Model+setThumbnail(byte[]) com.activiti.domain.editor.Model+setThumbnail(byte[]) com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.service.editor.ModelServiceImpl+persistModel(Model),,1218,38,4,,"protected Model internalSave(String name, String key, String description, String editorJson, boolean newVersion, 
      String newVersionComment, byte[] imageBytes, User updatedBy, Model modelObject) {

    if (newVersion == false) {

      modelObject.setLastUpdated(new Date());
      modelObject.setLastUpdatedBy(updatedBy.getId());
      modelObject.setName(name);
      modelObject.setKey(key);
      modelObject.setDescription(description);
      modelObject.setModelEditorJson(editorJson);

      if (imageBytes != null) {
        modelObject.setThumbnail(imageBytes);
      }

    } else {

      ModelHistory historyModel = createNewModelhistory(modelObject);
      persistModelHistory(historyModel);

      modelObject.setVersion(modelObject.getVersion() + 1);
      modelObject.setLastUpdated(new Date());
      modelObject.setLastUpdatedBy(updatedBy.getId());
      modelObject.setName(name);
      modelObject.setKey(key);
      modelObject.setDescription(description);
      modelObject.setModelEditorJson(editorJson);
      modelObject.setComment(newVersionComment);

      if (imageBytes != null) {
        modelObject.setThumbnail(imageBytes);
      }

    }

    return persistModel(modelObject);
  }",False,False,"The function of this method is to save a model object. If the newVersion parameter is false, it updates the existing model object with the provided information. If newVersion is true, it creates a new version of the model object, updates it with the provided information, and saves the previous version in the model history. Finally, it persists the model object and returns it.",False,"This code is a method that saves a model object. It checks if it is a new version or not, updates the necessary fields, creates a new model history if it is a new version, and then persists the model object."
24,"deleteModel(long,boolean,boolean)",delete model model id cascade history delete runtime app ,Method,,,"java.lang.IllegalArgumentException+IllegalArgumentException(String) com.activiti.repository.editor.ModelHistoryRepository+findByModelIdAndRemovalDateIsNullOrderByVersionDesc(Long) com.activiti.repository.editor.ModelHistoryRepository+findByModelIdAndRemovalDateIsNullOrderByVersionDesc(Long) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.domain.editor.ModelHistory+setRemovalDate(Date) com.activiti.domain.editor.ModelHistory+setRemovalDate(Date) java.util.Calendar+getTime() java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+getTime() com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) java.util.List+size() java.util.List+size() com.activiti.service.editor.ModelServiceImpl+deleteModelAndChildren(Model) com.activiti.service.editor.ModelServiceImpl+deleteModelAndChildren(Model) java.util.List+remove(int) java.util.List+remove(int) com.activiti.service.editor.ModelServiceImpl+populateModelBasedOnHistory(Model,ModelHistory) com.activiti.service.editor.ModelServiceImpl+populateModelBasedOnHistory(Model,ModelHistory) com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.service.editor.ModelServiceImpl+persistModel(Model)",com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.service.editor.ModelServiceImpl+modelHistoryRepository com.activiti.domain.editor.AbstractModel+MODEL_TYPE_APP com.activiti.service.editor.ModelServiceImpl+modelHistoryRepository,1487,36,1,,"@Override
  @Transactional
  public void deleteModel(long modelId, boolean cascadeHistory, boolean deleteRuntimeApp) {

    Model model = modelRepository.findOne(modelId);
    if (model == null) {
      throw new IllegalArgumentException(""No model found with id: "" + modelId);
    }

    // Fetch current model history list
    List<ModelHistory> history = modelHistoryRepository.findByModelIdAndRemovalDateIsNullOrderByVersionDesc(model.getId());

    // if the model is an app definition and the runtime app needs to be deleted, remove it now
    if (deleteRuntimeApp && model.getModelType() == Model.MODEL_TYPE_APP) {
      /*Long appDefinitionId = runtimeAppDefinitionService.getDefinitionIdForModelAndUser(model.getId(), SecurityUtils.getCurrentUserObject());
      if (appDefinitionId != null) {
        deploymentService.deleteAppDefinition(appDefinitionId);
      }*/

    } else {
      // Move model to history and mark removed
      ModelHistory historyModel = createNewModelhistory(model);
      historyModel.setRemovalDate(Calendar.getInstance().getTime());
      persistModelHistory(historyModel);
    }

    if (cascadeHistory || history.size() == 0) {
      deleteModelAndChildren(model);
    } else {
      // History available and no cascade was requested. Revive latest history entry
      ModelHistory toRevive = history.remove(0);
      populateModelBasedOnHistory(model, toRevive);
      persistModel(model);
      modelHistoryRepository.delete(toRevive);
    }
  }",False,False,"This method is used to delete a model. It first checks if the model exists, then fetches its history. If the model is an app definition and the runtime app needs to be deleted, it removes the app. Otherwise, it moves the model to history and marks it as removed. If cascade deletion is requested or there is no history, it deletes the model and its children. Otherwise, it revives the latest history entry and updates the model based on that history.",False,"This code defines a method called `deleteModel` that deletes a model based on the provided modelId. It checks if the model exists, fetches its history, and either deletes the model and its children or revives the latest history entry based on the provided parameters. The method is annotated with `@Transactional` to ensure atomicity and consistency of the database operations."
25,deleteModelAndChildren(Model),delete model and children model ,Method,"deleteModel(long,boolean,boolean)",,"java.util.ArrayList+ArrayList() com.activiti.service.editor.ModelServiceImpl+internalDeleteModelAndChildren(Model,List<Model>) com.activiti.service.editor.ModelServiceImpl+internalDeleteModelAndChildren(Model,List<Model>)",com.activiti.service.editor.ModelServiceImpl+modelRepository,515,13,4,,"protected void deleteModelAndChildren(Model model) {

    // Models have relations with each other, in all kind of wicked and funny ways.
    // Hence, we remove first all relations, comments, etc. while collecting all models.
    // Then, once all foreign key problemmakers are removed, we remove the models

    List<Model> allModels = new ArrayList<Model>();
    internalDeleteModelAndChildren(model, allModels);

    for (Model modelToDelete : allModels) {
      modelRepository.delete(modelToDelete);
    }
  }",False,False,"The function of this method is to delete a given model and all its related models. It first removes all relations, comments, etc. while collecting all models. Then, it removes the foreign key problemmakers and finally deletes all the models.",False,"The code defines a method called `deleteModelAndChildren` which takes a `Model` object as a parameter. It removes all relations, comments, and other related models associated with the given model, and then deletes the model itself from the repository."
26,"internalDeleteModelAndChildren(Model,List<Model>)",internal delete model and children model all models ,Method,"deleteModelAndChildren(Model) internalDeleteModelAndChildren(Model,List<Model>)",,"com.activiti.repository.editor.ModelRepository+findModelsByReferenceId(Long) com.activiti.repository.editor.ModelRepository+findModelsByReferenceId(Long) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId() com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.domain.editor.ModelHistory+setRemovalDate(Date) com.activiti.domain.editor.ModelHistory+setRemovalDate(Date) java.util.Calendar+getTime() java.util.Calendar+getInstance() java.util.Calendar+getInstance() java.util.Calendar+getTime() com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.service.editor.ModelServiceImpl+internalDeleteModelAndChildren(Model,List<Model>) com.activiti.service.editor.ModelServiceImpl+internalDeleteModelAndChildren(Model,List<Model>) com.activiti.repository.editor.ModelRelationRepository+deleteModelRelationsForParentModel(Long) com.activiti.repository.editor.ModelRelationRepository+deleteModelRelationsForParentModel(Long) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId() java.util.List+add(E) java.util.List+add(E)",com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.service.editor.ModelServiceImpl+modelRelationRepository,800,18,4,,"protected void internalDeleteModelAndChildren(Model model, List<Model> allModels) {

    // Embedded models should be stored in the history such that they can be revived if needed one day
    List<Model> embeddedModels = modelRepository.findModelsByReferenceId(model.getId());
    for (Model embeddedModel : embeddedModels) {
      ModelHistory embeddedHistoryModel = createNewModelhistory(embeddedModel);
      embeddedHistoryModel.setRemovalDate(Calendar.getInstance().getTime());
      persistModelHistory(embeddedHistoryModel);

      // Delete all embedded models, and their children
      internalDeleteModelAndChildren(embeddedModel, allModels);
    }

    // Delete all related data
    modelRelationRepository.deleteModelRelationsForParentModel(model.getId());

    allModels.add(model);
  }",False,False,This method is used to delete a model and its children from a list of models. It also creates a model history for each embedded model before deleting them.,False,"The code is a recursive method that deletes a given model and its embedded models, along with their children. It also deletes all related data and adds the deleted models to a list."
27,"reviveProcessModelHistory(ModelHistory,User,String)",revive process model history model history user new version comment ,Method,,,"com.activiti.domain.editor.ModelHistory+getModelId() com.activiti.domain.editor.ModelHistory+getModelId() java.lang.IllegalArgumentException+IllegalArgumentException(String) com.activiti.domain.editor.ModelHistory+getModelId() com.activiti.domain.editor.ModelHistory+getModelId() com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+createNewModelhistory(Model) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.service.editor.ModelServiceImpl+persistModelHistory(ModelHistory) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) java.util.Date+Date() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId() com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.service.editor.ModelServiceImpl+persistModel(Model) com.activiti.model.editor.ReviveModelResultRepresentation+ReviveModelResultRepresentation() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AppDefinition+getModels() com.activiti.domain.editor.AppDefinition+getModels() com.activiti.domain.editor.AppModelDefinition+getId() com.activiti.domain.editor.AppModelDefinition+getId() java.util.List+add(E) com.activiti.model.editor.ReviveModelResultRepresentation+getUnresolvedModels() com.activiti.model.editor.ReviveModelResultRepresentation+getUnresolvedModels() java.util.List+add(E) com.activiti.model.editor.ReviveModelResultRepresentation.UnresolveModelRepresentation+UnresolveModelRepresentation(Long,String,String) com.activiti.domain.editor.AppModelDefinition+getId() com.activiti.domain.editor.AppModelDefinition+getId() com.activiti.domain.editor.AppModelDefinition+getName() com.activiti.domain.editor.AppModelDefinition+getName() com.activiti.domain.editor.AppModelDefinition+getLastUpdatedBy() com.activiti.domain.editor.AppModelDefinition+getLastUpdatedBy() com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId()",com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.domain.editor.AbstractModel+MODEL_TYPE_APP com.activiti.service.editor.ModelServiceImpl+objectMapper com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.service.editor.ModelServiceImpl+log,2250,46,1,,"@Override
  @Transactional
  public ReviveModelResultRepresentation reviveProcessModelHistory(ModelHistory modelHistory, User user, String newVersionComment) {
    Model latestModel = modelRepository.findOne(modelHistory.getModelId());
    if (latestModel == null) {
      throw new IllegalArgumentException(""No process model found with id: "" + modelHistory.getModelId());
    }

    // Store the current model in history
    ModelHistory latestModelHistory = createNewModelhistory(latestModel);
    persistModelHistory(latestModelHistory);

    // Populate the actual latest version with the properties in the historic model
    latestModel.setVersion(latestModel.getVersion() + 1);
    latestModel.setLastUpdated(new Date());
    latestModel.setLastUpdatedBy(user.getId());
    latestModel.setName(modelHistory.getName());
    latestModel.setKey(modelHistory.getKey());
    latestModel.setDescription(modelHistory.getDescription());
    latestModel.setModelEditorJson(modelHistory.getModelEditorJson());
    latestModel.setModelType(modelHistory.getModelType());
    latestModel.setComment(newVersionComment);
    persistModel(latestModel);

    ReviveModelResultRepresentation result = new ReviveModelResultRepresentation();

    // For apps, we need to make sure the referenced processes exist as models.
    // It could be the user has deleted the process model in the meantime. We give back that info to the user.
    if (latestModel.getModelType() == AbstractModel.MODEL_TYPE_APP) {
      if (StringUtils.isNotEmpty(latestModel.getModelEditorJson())) {
        try {
          AppDefinition appDefinition = objectMapper.readValue(latestModel.getModelEditorJson(), AppDefinition.class);
          for (AppModelDefinition appModelDefinition : appDefinition.getModels()) {
            if (!modelRepository.exists(appModelDefinition.getId())) {
              result.getUnresolvedModels().add(new UnresolveModelRepresentation(appModelDefinition.getId(), 
                  appModelDefinition.getName(), appModelDefinition.getLastUpdatedBy()));
            }
          }
        } catch (Exception e) {
          log.error(""Could not deserialize app model json (id = "" + latestModel.getId() + "")"", e);
        }
      }
    }

    return result;
  }",False,False,This method revives a process model history by creating a new version of the model and populating it with properties from the historic model. It also checks if the referenced processes exist as models and returns any unresolved models.,False,"This code is a method that revives a process model from its history. It retrieves the latest model, creates a new model history, updates the latest model with properties from the historic model, and checks if any referenced process models exist. It returns a representation of the result, including any unresolved models."
28,"getBpmnModel(AbstractModel,boolean)",get bpmn model model refresh references ,Method,getBpmnXML(AbstractModel),,"com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.service.editor.ModelServiceImpl+createDecisionTableMap(JsonNode) com.activiti.service.editor.ModelServiceImpl+createDecisionTableMap(JsonNode) org.activiti.editor.language.json.converter.BpmnJsonConverter+convertToBpmnModel(JsonNode,Map<Long,JsonNode>) org.activiti.editor.language.json.converter.BpmnJsonConverter+convertToBpmnModel(JsonNode,Map<Long,JsonNode>) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId() com.activiti.service.exception.InternalServerErrorException+InternalServerErrorException(String)",com.activiti.service.editor.ModelServiceImpl+objectMapper com.activiti.service.editor.ModelServiceImpl+bpmnJsonConverter com.activiti.service.editor.ModelServiceImpl+log,690,18,1,,"@Override
  public BpmnModel getBpmnModel(AbstractModel model, boolean refreshReferences) {
    BpmnModel bpmnModel = null;
    try {
      ObjectNode editorJsonNode = (ObjectNode) objectMapper.readTree(model.getModelEditorJson());
      Map<Long, JsonNode> decisionTableMap = createDecisionTableMap(editorJsonNode);
      bpmnModel = bpmnJsonConverter.convertToBpmnModel(editorJsonNode, decisionTableMap);

    } catch (BaseModelerRestException e) {
      throw e;

    } catch (Exception e) {
      log.error(""Could not generate BPMN 2.0 XML for model "" + model.getId(), e);
      throw new InternalServerErrorException(""Could not generate BPMN 2.0 xml"");
    }

    return bpmnModel;
  }",False,False,"This method takes an AbstractModel and a boolean as input parameters. It reads the model's editor JSON, creates a decision table map, and converts the editor JSON to a BpmnModel using a converter. If an exception occurs, it throws an appropriate exception. Finally, it returns the converted BpmnModel.",True,"This code defines a method called ""getBpmnModel"" that takes an AbstractModel object and a boolean flag as parameters. It reads the model's editor JSON, creates a map of decision tables, and converts the JSON to a BpmnModel object using a converter. If an exception occurs, it logs an error and throws an appropriate exception. The method returns the generated BpmnModel object."
29,"addOrUpdateExtensionElement(String,String,UserTask)",add or update extension element name value user task ,Method,,,java.util.Map+get(Object) org.activiti.bpmn.model.BaseElement+getExtensionElements() org.activiti.bpmn.model.BaseElement+getExtensionElements() java.util.Map+get(Object) org.activiti.editor.language.json.converter.util.CollectionUtils+isNotEmpty(Collection) org.activiti.editor.language.json.converter.util.CollectionUtils+isNotEmpty(Collection) java.util.List+get(int) java.util.List+get(int) org.activiti.bpmn.model.ExtensionElement+ExtensionElement() org.activiti.bpmn.model.ExtensionElement+setNamespace(String) org.activiti.bpmn.model.ExtensionElement+setNamespace(String) org.activiti.bpmn.model.ExtensionElement+setNamespacePrefix(String) org.activiti.bpmn.model.ExtensionElement+setNamespacePrefix(String) org.activiti.bpmn.model.ExtensionElement+setName(String) org.activiti.bpmn.model.ExtensionElement+setName(String) org.activiti.bpmn.model.ExtensionElement+setElementText(String) org.activiti.bpmn.model.ExtensionElement+setElementText(String) org.activiti.editor.language.json.converter.util.CollectionUtils+isEmpty(Collection) org.activiti.editor.language.json.converter.util.CollectionUtils+isEmpty(Collection) org.activiti.bpmn.model.BaseElement+addExtensionElement(ExtensionElement) org.activiti.bpmn.model.BaseElement+addExtensionElement(ExtensionElement),com.activiti.service.editor.ModelServiceImpl+NAMESPACE,694,19,4,,"protected void addOrUpdateExtensionElement(String name, String value, UserTask userTask) {
    List<ExtensionElement> extensionElements = userTask.getExtensionElements().get(name);

    ExtensionElement extensionElement;

    if (CollectionUtils.isNotEmpty(extensionElements)) {
      extensionElement = extensionElements.get(0);
    } else {
      extensionElement = new ExtensionElement();
    }
    extensionElement.setNamespace(NAMESPACE);
    extensionElement.setNamespacePrefix(""modeler"");
    extensionElement.setName(name);
    extensionElement.setElementText(value);

    if (CollectionUtils.isEmpty(extensionElements)) {
      userTask.addExtensionElement(extensionElement);
    }
  }",False,False,"This method adds or updates an extension element to a user task. It sets the namespace, namespace prefix, name, and element text of the extension element. If the extension element does not exist, it creates a new one and adds it to the user task.",False,"This code defines a method called ""addOrUpdateExtensionElement"" that takes in a name, value, and UserTask object. It retrieves the extension elements with the given name from the UserTask, creates a new ExtensionElement if none exist, sets the necessary properties, and adds it to the UserTask if it doesn't already have any extension elements with the given name."
30,"getModelCountForUser(User,int)",get model count for user user model type ,Method,,,"com.activiti.repository.editor.ModelRepository+countByModelTypeAndUser(int,String) com.activiti.repository.editor.ModelRepository+countByModelTypeAndUser(int,String) org.activiti.engine.identity.User+getId() org.activiti.engine.identity.User+getId()",com.activiti.service.editor.ModelServiceImpl+modelRepository,141,3,1,,"public Long getModelCountForUser(User user, int modelType) {
    return modelRepository.countByModelTypeAndUser(modelType, user.getId());
  }",False,False,This method returns the count of models of a specific type for a given user.,False,The given code is a method named `getModelCountForUser` that takes a `User` object and an `int` representing a model type as input. It returns the count of models of the specified type associated with the given user by calling the `countByModelTypeAndUser` method of the `modelRepository` object.
31,persistModel(Model),persist model model ,Method,"createModel(ModelRepresentation,String,User) internalCreateNewModelVersion(Model,String,User,boolean) saveModel(Model) internalSave(String,String,String,String,boolean,String,byte[],User,Model) deleteModel(long,boolean,boolean) reviveProcessModelHistory(ModelHistory,User,String)",,"com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() java.lang.Integer+intValue() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() java.lang.Integer+intValue() com.activiti.service.editor.ModelServiceImpl+generateThumbnailImage(Model,ObjectNode) com.activiti.service.editor.ModelServiceImpl+generateThumbnailImage(Model,ObjectNode) com.activiti.service.editor.ModelServiceImpl+handleBpmnProcessFormModelRelations(AbstractModel,ObjectNode) com.activiti.service.editor.ModelServiceImpl+handleBpmnProcessFormModelRelations(AbstractModel,ObjectNode) java.lang.Integer+intValue() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() java.lang.Integer+intValue() com.activiti.service.editor.ModelServiceImpl+handleAppModelProcessRelations(AbstractModel,ObjectNode) com.activiti.service.editor.ModelServiceImpl+handleAppModelProcessRelations(AbstractModel,ObjectNode)",com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.service.editor.ModelServiceImpl+objectMapper com.activiti.service.editor.ModelServiceImpl+log com.activiti.service.editor.ModelServiceImpl+log com.activiti.domain.editor.AbstractModel+MODEL_TYPE_BPMN com.activiti.domain.editor.AbstractModel+MODEL_TYPE_APP,954,32,4,,"protected Model persistModel(Model model) {

    model = modelRepository.save((Model) model);

    if (StringUtils.isNotEmpty(model.getModelEditorJson())) {

      // Parse json to java
      ObjectNode jsonNode = null;
      try {
        jsonNode = (ObjectNode) objectMapper.readTree(model.getModelEditorJson());
      } catch (JsonProcessingException e) {
        log.error(""Could not deserialize json model"", e);
      } catch (IOException e) {
        log.error(""Could not deserialize json model"", e);
      }

      if ((model.getModelType() == null || model.getModelType().intValue() == Model.MODEL_TYPE_BPMN)) {

        // Thumbnail
        generateThumbnailImage((Model) model, jsonNode);

        // Relations
        handleBpmnProcessFormModelRelations(model, jsonNode);

      } else if (model.getModelType().intValue() == Model.MODEL_TYPE_APP) {

        handleAppModelProcessRelations(model, jsonNode);
      }
    }

    return model;
  }",False,False,"The function of this method is to persist a model by saving it in the model repository. It also handles the parsing of JSON data, generates a thumbnail image, and handles relations based on the model type.",True,"The `persistModel` method takes a `Model` object as input and saves it to the model repository. If the model has a non-empty `modelEditorJson` field, it parses the JSON into a Java object and performs different operations based on the model type: generating a thumbnail image and handling BPMN process form model relations for BPMN models, and handling app model process relations for app models. Finally, it returns the saved model."
32,persistModelHistory(ModelHistory),persist model history model history ,Method,"internalCreateNewModelVersion(Model,String,User,boolean) internalSave(String,String,String,String,boolean,String,byte[],User,Model) deleteModel(long,boolean,boolean) internalDeleteModelAndChildren(Model,List<Model>) reviveProcessModelHistory(ModelHistory,User,String)",,,com.activiti.service.editor.ModelServiceImpl+modelHistoryRepository,129,3,4,,"protected ModelHistory persistModelHistory(ModelHistory modelHistory) {
    return modelHistoryRepository.save(modelHistory);
  }",False,False,This method saves the given ModelHistory object by calling the save method of the modelHistoryRepository and returns the saved ModelHistory object.,True,The given code is a method named `persistModelHistory` that takes a `ModelHistory` object as a parameter and returns a `ModelHistory` object. It saves the `modelHistory` object in the `modelHistoryRepository` and returns the saved object.
33,"generateThumbnailImage(Model,ObjectNode)",generate thumbnail image model editor json node ,Method,persistModel(Model),,"org.activiti.editor.language.json.converter.BpmnJsonConverter+convertToBpmnModel(JsonNode) org.activiti.editor.language.json.converter.BpmnJsonConverter+convertToBpmnModel(JsonNode) com.activiti.service.editor.ModelServiceImpl+calculateDiagramSize(BpmnModel) com.activiti.service.editor.ModelServiceImpl+calculateDiagramSize(BpmnModel) org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() com.activiti.service.editor.ModelServiceImpl+scaleDiagram(BpmnModel,double) com.activiti.service.editor.ModelServiceImpl+scaleDiagram(BpmnModel,double) com.activiti.image.ImageGenerator+createImage(BpmnModel,double) com.activiti.image.ImageGenerator+createImage(BpmnModel,double) com.activiti.image.ImageGenerator+createByteArrayForImage(BufferedImage,String) com.activiti.image.ImageGenerator+createByteArrayForImage(BufferedImage,String) com.activiti.domain.editor.Model+setThumbnail(byte[]) com.activiti.domain.editor.Model+setThumbnail(byte[]) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId()",com.activiti.service.editor.ModelServiceImpl+bpmnJsonConverter com.activiti.service.editor.ModelServiceImpl+THUMBNAIL_WIDTH com.activiti.service.editor.ModelServiceImpl+THUMBNAIL_WIDTH com.activiti.service.editor.ModelServiceImpl+log,812,21,4,,"protected void generateThumbnailImage(Model model, ObjectNode editorJsonNode) {
    try {

      BpmnModel bpmnModel = bpmnJsonConverter.convertToBpmnModel(editorJsonNode);

      double scaleFactor = 1.0;
      GraphicInfo diagramInfo = calculateDiagramSize(bpmnModel);
      if (diagramInfo.getWidth() > THUMBNAIL_WIDTH) {
        scaleFactor = diagramInfo.getWidth() / THUMBNAIL_WIDTH;
        scaleDiagram(bpmnModel, scaleFactor);
      }

      BufferedImage modelImage = ImageGenerator.createImage(bpmnModel, scaleFactor);
      if (modelImage != null) {
        byte[] thumbnailBytes = ImageGenerator.createByteArrayForImage(modelImage, ""png"");
        model.setThumbnail(thumbnailBytes);
      }
    } catch (Exception e) {
      log.error(""Error creating thumbnail image "" + model.getId(), e);
    }
  }",True,True,"This method generates a thumbnail image for a given BPMN model. It converts the model to a BPMN model, calculates the size of the diagram, scales the diagram if necessary, creates an image of the model, and sets the thumbnail image in the model.",False,
34,"handleBpmnProcessFormModelRelations(AbstractModel,ObjectNode)",handle bpmn process form model relations bpmn process model editor json node ,Method,persistModel(Model),,"org.activiti.editor.language.json.converter.util.JsonConverterUtil+filterOutJsonNodes(List<JsonLookupResult>) org.activiti.editor.language.json.converter.util.JsonConverterUtil+filterOutJsonNodes(List<JsonLookupResult>) org.activiti.editor.language.json.converter.util.JsonConverterUtil+getBpmnProcessModelFormReferences(JsonNode) org.activiti.editor.language.json.converter.util.JsonConverterUtil+getBpmnProcessModelFormReferences(JsonNode) org.activiti.editor.language.json.converter.util.JsonConverterUtil+gatherLongPropertyFromJsonNodes(Iterable<JsonNode>,String) org.activiti.editor.language.json.converter.util.JsonConverterUtil+gatherLongPropertyFromJsonNodes(Iterable<JsonNode>,String) com.activiti.service.editor.ModelServiceImpl+handleModelRelations(AbstractModel,Set<Long>,String) com.activiti.service.editor.ModelServiceImpl+handleModelRelations(AbstractModel,Set<Long>,String)",com.activiti.domain.editor.ModelRelationTypes+TYPE_FORM_MODEL_CHILD,459,6,4,,"protected void handleBpmnProcessFormModelRelations(AbstractModel bpmnProcessModel, ObjectNode editorJsonNode) {
    List<JsonNode> formReferenceNodes = JsonConverterUtil.filterOutJsonNodes(JsonConverterUtil.getBpmnProcessModelFormReferences(editorJsonNode));
    Set<Long> formIds = JsonConverterUtil.gatherLongPropertyFromJsonNodes(formReferenceNodes, ""id"");

    handleModelRelations(bpmnProcessModel, formIds, ModelRelationTypes.TYPE_FORM_MODEL_CHILD);
  }",False,False,"This method handles the relations between a BPMN process model and form models. It filters out form reference nodes from an editor JSON node, gathers the form IDs, and then calls another method to handle the model relations.",True,"The code defines a protected method called ""handleBpmnProcessFormModelRelations"" that takes an AbstractModel object and an ObjectNode object as parameters. It filters out form reference nodes from the editorJsonNode, gathers the IDs of the form references, and then calls another method called ""handleModelRelations"" to handle the model relations with the form IDs using the ModelRelationTypes.TYPE_FORM_MODEL_CHILD type."
35,"handleAppModelProcessRelations(AbstractModel,ObjectNode)",handle app model process relations app model app model json node ,Method,persistModel(Model),,"org.activiti.editor.language.json.converter.util.JsonConverterUtil+getAppModelReferencedModelIds(JsonNode) org.activiti.editor.language.json.converter.util.JsonConverterUtil+getAppModelReferencedModelIds(JsonNode) com.activiti.service.editor.ModelServiceImpl+handleModelRelations(AbstractModel,Set<Long>,String) com.activiti.service.editor.ModelServiceImpl+handleModelRelations(AbstractModel,Set<Long>,String)",com.activiti.domain.editor.ModelRelationTypes+TYPE_PROCESS_MODEL,295,4,4,,"protected void handleAppModelProcessRelations(AbstractModel appModel, ObjectNode appModelJsonNode) {
    Set<Long> processModelIds = JsonConverterUtil.getAppModelReferencedModelIds(appModelJsonNode);
    handleModelRelations(appModel, processModelIds, ModelRelationTypes.TYPE_PROCESS_MODEL);
  }",False,False,This method handles the process relations of an app model by retrieving the referenced model IDs from a JSON node and passing them to another method for further processing.,True,"The given code is a protected method named ""handleAppModelProcessRelations"" that takes an AbstractModel object and an ObjectNode object as parameters. It retrieves a set of process model IDs from the ObjectNode object using a utility method, and then calls another method named ""handleModelRelations"" to handle the relations between the appModel and the processModelIds with a specific relation type."
36,"handleModelRelations(AbstractModel,Set<Long>,String)",handle model relations bpmn process model ids referenced in json relationship type generic handling of model relations deleting adding where needed ,Method,"handleBpmnProcessFormModelRelations(AbstractModel,ObjectNode) handleAppModelProcessRelations(AbstractModel,ObjectNode)",,"com.activiti.repository.editor.ModelRelationRepository+findByParentModelIdAndType(Long,String) com.activiti.repository.editor.ModelRelationRepository+findByParentModelIdAndType(Long,String) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId() java.util.Set+size() java.util.Set+size() java.util.HashSet+HashSet(int) java.util.List+size() java.util.List+size() java.util.Set+contains(Object) java.util.Set+contains(Object) com.activiti.domain.editor.ModelRelation+getModelId() com.activiti.domain.editor.ModelRelation+getModelId() java.util.Set+add(E) java.util.Set+add(E) com.activiti.domain.editor.ModelRelation+getModelId() com.activiti.domain.editor.ModelRelation+getModelId() java.util.Set+contains(Object) java.util.Set+contains(Object) com.activiti.domain.editor.ModelRelation+ModelRelation(Long,Long,String) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId()",com.activiti.service.editor.ModelServiceImpl+modelRelationRepository com.activiti.service.editor.ModelServiceImpl+modelRelationRepository com.activiti.service.editor.ModelServiceImpl+modelRelationRepository com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.service.editor.ModelServiceImpl+modelRelationRepository,1726,37,4,"/** 
 * Generic handling of model relations: deleting/adding where needed.
 */
","/**
   * Generic handling of model relations: deleting/adding where needed.
   */
  protected void handleModelRelations(AbstractModel bpmnProcessModel, Set<Long> idsReferencedInJson, String relationshipType) {

    // Find existing persisted relations
    List<ModelRelation> persistedModelRelations = modelRelationRepository.findByParentModelIdAndType(bpmnProcessModel.getId(), relationshipType);

    // if no ids referenced now, just delete them all
    if (idsReferencedInJson == null || idsReferencedInJson.size() == 0) {
      modelRelationRepository.delete(persistedModelRelations);
      return;
    }

    Set<Long> alreadyPersistedModelIds = new HashSet<Long>(persistedModelRelations.size());
    for (ModelRelation persistedModelRelation : persistedModelRelations) {
      if (!idsReferencedInJson.contains(persistedModelRelation.getModelId())) {
        // model used to be referenced, but not anymore. Delete it.
        modelRelationRepository.delete((ModelRelation) persistedModelRelation);
      } else {
        alreadyPersistedModelIds.add(persistedModelRelation.getModelId());
      }
    }

    // Loop over all referenced ids and see which one are new
    for (Long idReferencedInJson : idsReferencedInJson) {

      // if model is referenced, but it is not yet persisted = create it
      if (!alreadyPersistedModelIds.contains(idReferencedInJson)) {

        // Check if model actually still exists. Don't create the relationship if it doesn't exist. The client UI will have cope with this too.
        if (modelRepository.exists(idReferencedInJson)) {
          modelRelationRepository.save(new ModelRelation(bpmnProcessModel.getId(), idReferencedInJson, relationshipType));
        }
      }
    }
  }",False,False,"This method handles model relations by deleting or adding them as needed. It first finds existing persisted relations, then deletes them all if there are no referenced ids. It then checks if each referenced id is already persisted, and if not, creates a new relationship if the model still exists.",True,This code handles the deletion and addition of model relations based on the provided JSON data. It first retrieves the existing relations from the database and then compares them with the referenced IDs in the JSON. It deletes the relations that are no longer referenced and creates new relations for the referenced IDs that are not already persisted.
37,createNewModelhistory(Model),create new modelhistory model ,Method,"internalCreateNewModelVersion(Model,String,User,boolean) internalSave(String,String,String,String,boolean,String,byte[],User,Model) deleteModel(long,boolean,boolean) internalDeleteModelAndChildren(Model,List<Model>) reviveProcessModelHistory(ModelHistory,User,String)",,com.activiti.domain.editor.ModelHistory+ModelHistory() com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+setCreated(Date) com.activiti.domain.editor.AbstractModel+setCreated(Date) com.activiti.domain.editor.AbstractModel+getCreated() com.activiti.domain.editor.AbstractModel+getCreated() com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+getLastUpdated() com.activiti.domain.editor.AbstractModel+getLastUpdated() com.activiti.domain.editor.AbstractModel+setCreatedBy(String) com.activiti.domain.editor.AbstractModel+setCreatedBy(String) com.activiti.domain.editor.AbstractModel+getCreatedBy() com.activiti.domain.editor.AbstractModel+getCreatedBy() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+getLastUpdatedBy() com.activiti.domain.editor.AbstractModel+getLastUpdatedBy() com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.ModelHistory+setModelId(Long) com.activiti.domain.editor.ModelHistory+setModelId(Long) com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+getId() com.activiti.domain.editor.AbstractModel+setStencilSetId(Long) com.activiti.domain.editor.AbstractModel+setStencilSetId(Long) com.activiti.domain.editor.AbstractModel+getStencilSetId() com.activiti.domain.editor.AbstractModel+getStencilSetId() com.activiti.domain.editor.AbstractModel+setReferenceId(Long) com.activiti.domain.editor.AbstractModel+setReferenceId(Long) com.activiti.domain.editor.AbstractModel+getReferenceId() com.activiti.domain.editor.AbstractModel+getReferenceId() com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+getComment() com.activiti.domain.editor.AbstractModel+getComment(),,878,19,4,,"protected ModelHistory createNewModelhistory(Model model) {
    ModelHistory historyModel = new ModelHistory();
    historyModel.setName(model.getName());
    historyModel.setKey(model.getKey());
    historyModel.setDescription(model.getDescription());
    historyModel.setCreated(model.getCreated());
    historyModel.setLastUpdated(model.getLastUpdated());
    historyModel.setCreatedBy(model.getCreatedBy());
    historyModel.setLastUpdatedBy(model.getLastUpdatedBy());
    historyModel.setModelEditorJson(model.getModelEditorJson());
    historyModel.setModelType(model.getModelType());
    historyModel.setVersion(model.getVersion());
    historyModel.setModelId(model.getId());
    historyModel.setStencilSetId(model.getStencilSetId());
    historyModel.setReferenceId(model.getReferenceId());
    historyModel.setComment(model.getComment());

    return historyModel;
  }",False,False,The function of this method is to create a new instance of ModelHistory and populate its fields with the corresponding values from the input Model object. The method then returns the created ModelHistory object.,True,"This code defines a method called ""createNewModelhistory"" that takes a ""Model"" object as a parameter and creates a new ""ModelHistory"" object. It then sets various properties of the new object based on the properties of the input model object and returns the new object."
38,"populateModelBasedOnHistory(Model,ModelHistory)",populate model based on history model based on ,Method,"deleteModel(long,boolean,boolean)",,com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+setName(String) com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+getName() com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+setKey(String) com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+getKey() com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+setDescription(String) com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+getDescription() com.activiti.domain.editor.AbstractModel+setCreated(Date) com.activiti.domain.editor.AbstractModel+setCreated(Date) com.activiti.domain.editor.AbstractModel+getCreated() com.activiti.domain.editor.AbstractModel+getCreated() com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+setLastUpdated(Date) com.activiti.domain.editor.AbstractModel+getLastUpdated() com.activiti.domain.editor.AbstractModel+getLastUpdated() com.activiti.domain.editor.AbstractModel+setCreatedBy(String) com.activiti.domain.editor.AbstractModel+setCreatedBy(String) com.activiti.domain.editor.AbstractModel+getCreatedBy() com.activiti.domain.editor.AbstractModel+getCreatedBy() com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+setLastUpdatedBy(String) com.activiti.domain.editor.AbstractModel+getLastUpdatedBy() com.activiti.domain.editor.AbstractModel+getLastUpdatedBy() com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+setModelEditorJson(String) com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+setModelType(Integer) com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+getModelType() com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+setVersion(int) com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+getVersion() com.activiti.domain.editor.AbstractModel+setStencilSetId(Long) com.activiti.domain.editor.AbstractModel+setStencilSetId(Long) com.activiti.domain.editor.AbstractModel+getStencilSetId() com.activiti.domain.editor.AbstractModel+getStencilSetId() com.activiti.domain.editor.AbstractModel+setReferenceId(Long) com.activiti.domain.editor.AbstractModel+setReferenceId(Long) com.activiti.domain.editor.AbstractModel+getReferenceId() com.activiti.domain.editor.AbstractModel+getReferenceId() com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+setComment(String) com.activiti.domain.editor.AbstractModel+getComment() com.activiti.domain.editor.AbstractModel+getComment(),,711,15,4,,"protected void populateModelBasedOnHistory(Model model, ModelHistory basedOn) {
    model.setName(basedOn.getName());
    model.setKey(basedOn.getKey());
    model.setDescription(basedOn.getDescription());
    model.setCreated(basedOn.getCreated());
    model.setLastUpdated(basedOn.getLastUpdated());
    model.setCreatedBy(basedOn.getCreatedBy());
    model.setLastUpdatedBy(basedOn.getLastUpdatedBy());
    model.setModelEditorJson(basedOn.getModelEditorJson());
    model.setModelType(basedOn.getModelType());
    model.setVersion(basedOn.getVersion());
    model.setStencilSetId(basedOn.getStencilSetId());
    model.setReferenceId(basedOn.getReferenceId());
    model.setComment(basedOn.getComment());
  }",False,False,This method populates a given model object with data from a model history object. It sets various properties of the model object based on the corresponding properties of the model history object.,True,"The method ""populateModelBasedOnHistory"" takes a ""Model"" object and a ""ModelHistory"" object as parameters. It sets the properties of the ""Model"" object based on the values of the corresponding properties in the ""ModelHistory"" object."
39,createDecisionTableMap(JsonNode),create decision table map model node ,Method,"getBpmnModel(AbstractModel,boolean)",,java.util.HashMap+HashMap() org.activiti.editor.language.json.converter.util.JsonConverterUtil+getBpmnProcessModelDecisionTableReferences(JsonNode) org.activiti.editor.language.json.converter.util.JsonConverterUtil+getBpmnProcessModelDecisionTableReferences(JsonNode) org.activiti.editor.language.json.converter.util.JsonConverterUtil.JsonLookupResult+getJsonNode() org.activiti.editor.language.json.converter.util.JsonConverterUtil.JsonLookupResult+getJsonNode() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.domain.editor.AbstractModel+getModelEditorJson() com.activiti.service.exception.InternalServerErrorException+InternalServerErrorException(String),com.activiti.service.editor.ModelServiceImpl+modelRepository com.activiti.service.editor.ModelServiceImpl+objectMapper com.activiti.service.editor.ModelServiceImpl+log,1172,21,4,,"protected Map<Long, JsonNode> createDecisionTableMap(JsonNode modelNode) {
    Map<Long, JsonNode> decisionTableMap = new HashMap<Long, JsonNode>();
    for (JsonConverterUtil.JsonLookupResult jsonLookupResult : JsonConverterUtil.getBpmnProcessModelDecisionTableReferences(modelNode)) {
      JsonNode decisionTableReferenceNode = jsonLookupResult.getJsonNode();
      JsonNode decisionTableIdNode = decisionTableReferenceNode.get(""id"");
      if (decisionTableIdNode != null && decisionTableIdNode.isNull() == false) {
        Long decisionTableId = decisionTableIdNode.asLong();
        Model decisionTableModel = modelRepository.findOne(decisionTableId);
        if (decisionTableModel != null) {
          try {
            JsonNode editorJsonNode = objectMapper.readTree(decisionTableModel.getModelEditorJson());
            decisionTableMap.put(decisionTableId, editorJsonNode);
          } catch (Exception e) {
            log.error(""Could not generate editor JSON for decision table "" + decisionTableId, e);
            throw new InternalServerErrorException(""Could not generate BPMN 2.0 xml"");
          }
        }
      }
    }
    return decisionTableMap;
  }",False,True,"This method creates a map of decision tables, where the keys are Long values representing the decision table IDs, and the values are JsonNode objects representing the editor JSON for each decision table. The method takes a JsonNode parameter representing a model, and uses JsonConverterUtil to get the decision table references from the model. It then retrieves the decision table IDs and finds the corresponding decision table models. For each valid decision table model, it generates the editor JSON and adds it to the decisionTableMap. Finally, it returns the decisionTableMap.",True,"This code creates a map of decision tables by iterating over a given JSON model node. It retrieves the decision table references from the model node, fetches the corresponding decision table models from a repository, and adds them to the map along with their IDs as keys. If any error occurs during the process, an exception is thrown."
40,calculateDiagramSize(BpmnModel),calculate diagram size bpmn model ,Method,"generateThumbnailImage(Model,ObjectNode)",,"org.activiti.bpmn.model.GraphicInfo+GraphicInfo() org.activiti.bpmn.model.BpmnModel+getPools() org.activiti.bpmn.model.BpmnModel+getPools() org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+setWidth(double) org.activiti.bpmn.model.GraphicInfo+setWidth(double) org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+setHeight(double) org.activiti.bpmn.model.GraphicInfo+setHeight(double) org.activiti.bpmn.model.BpmnModel+getProcesses() org.activiti.bpmn.model.BpmnModel+getProcesses() com.activiti.service.editor.ModelServiceImpl+calculateWidthForFlowElements(Collection<FlowElement>,BpmnModel,GraphicInfo) com.activiti.service.editor.ModelServiceImpl+calculateWidthForFlowElements(Collection<FlowElement>,BpmnModel,GraphicInfo) org.activiti.bpmn.model.Process+getFlowElements() org.activiti.bpmn.model.Process+getFlowElements() com.activiti.service.editor.ModelServiceImpl+calculateWidthForArtifacts(Collection<Artifact>,BpmnModel,GraphicInfo) com.activiti.service.editor.ModelServiceImpl+calculateWidthForArtifacts(Collection<Artifact>,BpmnModel,GraphicInfo) org.activiti.bpmn.model.Process+getArtifacts() org.activiti.bpmn.model.Process+getArtifacts()",,848,22,4,,"protected GraphicInfo calculateDiagramSize(BpmnModel bpmnModel) {
    GraphicInfo diagramInfo = new GraphicInfo();

    for (Pool pool : bpmnModel.getPools()) {
      GraphicInfo graphicInfo = bpmnModel.getGraphicInfo(pool.getId());
      double elementMaxX = graphicInfo.getX() + graphicInfo.getWidth();
      double elementMaxY = graphicInfo.getY() + graphicInfo.getHeight();

      if (elementMaxX > diagramInfo.getWidth()) {
        diagramInfo.setWidth(elementMaxX);
      }
      if (elementMaxY > diagramInfo.getHeight()) {
        diagramInfo.setHeight(elementMaxY);
      }
    }

    for (Process process : bpmnModel.getProcesses()) {
      calculateWidthForFlowElements(process.getFlowElements(), bpmnModel, diagramInfo);
      calculateWidthForArtifacts(process.getArtifacts(), bpmnModel, diagramInfo);
    }
    return diagramInfo;
  }",True,True,"This method calculates the size of a BPMN diagram by iterating through the pools and processes in the BPMN model. It determines the maximum X and Y coordinates of the elements in the diagram and sets the width and height of the diagram accordingly. Finally, it returns the calculated diagram size.",True,This code calculates the size of a BPMN diagram by iterating through the pools and processes in the BPMN model. It determines the maximum X and Y coordinates of the elements and updates the diagram's width and height accordingly. The calculated diagram size is then returned.
41,"scaleDiagram(BpmnModel,double)",scale diagram bpmn model scale factor ,Method,"generateThumbnailImage(Model,ObjectNode)",,"org.activiti.bpmn.model.BpmnModel+getPools() org.activiti.bpmn.model.BpmnModel+getPools() org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfo(GraphicInfo,double) com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfo(GraphicInfo,double) org.activiti.bpmn.model.BpmnModel+getProcesses() org.activiti.bpmn.model.BpmnModel+getProcesses() com.activiti.service.editor.ModelServiceImpl+scaleFlowElements(Collection<FlowElement>,BpmnModel,double) com.activiti.service.editor.ModelServiceImpl+scaleFlowElements(Collection<FlowElement>,BpmnModel,double) org.activiti.bpmn.model.Process+getFlowElements() org.activiti.bpmn.model.Process+getFlowElements() com.activiti.service.editor.ModelServiceImpl+scaleArtifacts(Collection<Artifact>,BpmnModel,double) com.activiti.service.editor.ModelServiceImpl+scaleArtifacts(Collection<Artifact>,BpmnModel,double) org.activiti.bpmn.model.Process+getArtifacts() org.activiti.bpmn.model.Process+getArtifacts() org.activiti.bpmn.model.Process+getLanes() org.activiti.bpmn.model.Process+getLanes() com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfo(GraphicInfo,double) com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfo(GraphicInfo,double) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId()",,587,14,4,,"protected void scaleDiagram(BpmnModel bpmnModel, double scaleFactor) {
    for (Pool pool : bpmnModel.getPools()) {
      GraphicInfo graphicInfo = bpmnModel.getGraphicInfo(pool.getId());
      scaleGraphicInfo(graphicInfo, scaleFactor);
    }

    for (Process process : bpmnModel.getProcesses()) {
      scaleFlowElements(process.getFlowElements(), bpmnModel, scaleFactor);
      scaleArtifacts(process.getArtifacts(), bpmnModel, scaleFactor);
      for (Lane lane : process.getLanes()) {
        scaleGraphicInfo(bpmnModel.getGraphicInfo(lane.getId()), scaleFactor);
      }
    }
  }",True,True,"The function of this method is to scale the diagram elements in a BPMN model by a given factor. It iterates through the pools, processes, lanes, flow elements, and artifacts in the model, and scales their graphic information accordingly.",True,"The `scaleDiagram` method scales the graphical elements of a BPMN diagram based on a given scale factor. It iterates over the pools, processes, and lanes in the BPMN model, and scales their corresponding graphic information using the `scaleGraphicInfo` method."
42,"calculateWidthForFlowElements(Collection<FlowElement>,BpmnModel,GraphicInfo)",calculate width for flow elements element list bpmn model diagram info ,Method,calculateDiagramSize(BpmnModel),,"java.util.ArrayList+ArrayList() org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.util.List+size() java.util.List+size() java.util.List+addAll(Collection) java.util.List+addAll(Collection) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.util.List+add(E) java.util.List+add(E) com.activiti.service.editor.ModelServiceImpl+processGraphicInfoList(List<GraphicInfo>,GraphicInfo) com.activiti.service.editor.ModelServiceImpl+processGraphicInfoList(List<GraphicInfo>,GraphicInfo)",,785,18,4,,"protected void calculateWidthForFlowElements(Collection<FlowElement> elementList, BpmnModel bpmnModel, GraphicInfo diagramInfo) {
    for (FlowElement flowElement : elementList) {
      List<GraphicInfo> graphicInfoList = new ArrayList<GraphicInfo>();
      if (flowElement instanceof SequenceFlow) {
        List<GraphicInfo> flowGraphics = bpmnModel.getFlowLocationGraphicInfo(flowElement.getId());
        if (flowGraphics != null && flowGraphics.size() > 0) {
          graphicInfoList.addAll(flowGraphics);
        }
      } else {
        GraphicInfo graphicInfo = bpmnModel.getGraphicInfo(flowElement.getId());
        if (graphicInfo != null) {
          graphicInfoList.add(graphicInfo);
        }
      }

      processGraphicInfoList(graphicInfoList, diagramInfo);
    }
  }",True,True,"This method calculates the width for flow elements in a BPMN model. It iterates through a collection of flow elements, retrieves their graphic information from the model, and processes it to determine the width.",True,"The code defines a method called ""calculateWidthForFlowElements"" that takes a collection of flow elements, a BPMN model, and graphic information as parameters. It iterates through the flow elements, retrieves their corresponding graphic information from the BPMN model, and processes it using another method called ""processGraphicInfoList""."
43,"calculateWidthForArtifacts(Collection<Artifact>,BpmnModel,GraphicInfo)",calculate width for artifacts artifact list bpmn model diagram info ,Method,calculateDiagramSize(BpmnModel),,"java.util.ArrayList+ArrayList() java.util.List+addAll(Collection) java.util.List+addAll(Collection) org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.util.List+add(E) java.util.List+add(E) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() com.activiti.service.editor.ModelServiceImpl+processGraphicInfoList(List<GraphicInfo>,GraphicInfo) com.activiti.service.editor.ModelServiceImpl+processGraphicInfoList(List<GraphicInfo>,GraphicInfo)",,541,12,4,,"protected void calculateWidthForArtifacts(Collection<Artifact> artifactList, BpmnModel bpmnModel, GraphicInfo diagramInfo) {
    for (Artifact artifact : artifactList) {
      List<GraphicInfo> graphicInfoList = new ArrayList<GraphicInfo>();
      if (artifact instanceof Association) {
        graphicInfoList.addAll(bpmnModel.getFlowLocationGraphicInfo(artifact.getId()));
      } else {
        graphicInfoList.add(bpmnModel.getGraphicInfo(artifact.getId()));
      }

      processGraphicInfoList(graphicInfoList, diagramInfo);
    }
  }",True,True,"This method calculates the width of artifacts in a BPMN model. It iterates through a collection of artifacts, retrieves their graphic information from the BPMN model, and processes it to determine the width of each artifact.",True,"The method ""calculateWidthForArtifacts"" takes a collection of artifacts, a BPMN model, and graphic information for a diagram. It iterates through each artifact and retrieves its graphic information from the BPMN model. It then processes the graphic information using the ""processGraphicInfoList"" method."
44,"processGraphicInfoList(List<GraphicInfo>,GraphicInfo)",process graphic info list graphic info list diagram info ,Method,"calculateWidthForFlowElements(Collection<FlowElement>,BpmnModel,GraphicInfo) calculateWidthForArtifacts(Collection<Artifact>,BpmnModel,GraphicInfo)",,org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+setWidth(double) org.activiti.bpmn.model.GraphicInfo+setWidth(double) org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+setHeight(double) org.activiti.bpmn.model.GraphicInfo+setHeight(double),,513,13,4,,"protected void processGraphicInfoList(List<GraphicInfo> graphicInfoList, GraphicInfo diagramInfo) {
    for (GraphicInfo graphicInfo : graphicInfoList) {
      double elementMaxX = graphicInfo.getX() + graphicInfo.getWidth();
      double elementMaxY = graphicInfo.getY() + graphicInfo.getHeight();

      if (elementMaxX > diagramInfo.getWidth()) {
        diagramInfo.setWidth(elementMaxX);
      }
      if (elementMaxY > diagramInfo.getHeight()) {
        diagramInfo.setHeight(elementMaxY);
      }
    }
  }",False,True,This method processes a list of GraphicInfo objects and updates the width and height of a diagram based on the maximum x and y values of the GraphicInfo objects in the list.,True,This code is a protected method that takes in a list of GraphicInfo objects and a single GraphicInfo object. It iterates through the list and updates the width and height of the diagramInfo object based on the maximum x and y values of each graphicInfo object in the list.
45,"scaleFlowElements(Collection<FlowElement>,BpmnModel,double)",scale flow elements element list bpmn model scale factor ,Method,"scaleDiagram(BpmnModel,double) scaleFlowElements(Collection<FlowElement>,BpmnModel,double)",,"java.util.ArrayList+ArrayList() org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.util.List+addAll(Collection) java.util.List+addAll(Collection) java.util.List+add(E) java.util.List+add(E) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfoList(List<GraphicInfo>,double) com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfoList(List<GraphicInfo>,double) com.activiti.service.editor.ModelServiceImpl+scaleFlowElements(Collection<FlowElement>,BpmnModel,double) com.activiti.service.editor.ModelServiceImpl+scaleFlowElements(Collection<FlowElement>,BpmnModel,double) org.activiti.bpmn.model.SubProcess+getFlowElements() org.activiti.bpmn.model.SubProcess+getFlowElements()",,828,20,4,,"protected void scaleFlowElements(Collection<FlowElement> elementList, BpmnModel bpmnModel, double scaleFactor) {
    for (FlowElement flowElement : elementList) {
      List<GraphicInfo> graphicInfoList = new ArrayList<GraphicInfo>();
      if (flowElement instanceof SequenceFlow) {
        List<GraphicInfo> flowList = bpmnModel.getFlowLocationGraphicInfo(flowElement.getId());
        if (flowList != null) {
          graphicInfoList.addAll(flowList);
        }
      } else {
        graphicInfoList.add(bpmnModel.getGraphicInfo(flowElement.getId()));
      }

      scaleGraphicInfoList(graphicInfoList, scaleFactor);

      if (flowElement instanceof SubProcess) {
        SubProcess subProcess = (SubProcess) flowElement;
        scaleFlowElements(subProcess.getFlowElements(), bpmnModel, scaleFactor);
      }
    }
  }",True,True,This method scales the graphic information of flow elements in a BPMN model by a given scale factor. It recursively scales the graphic information of sub-processes as well.,True,"This code is a method called ""scaleFlowElements"" that takes a collection of FlowElements, a BpmnModel, and a scaleFactor as parameters. It iterates through the FlowElements and scales their graphic information based on the scaleFactor. If a FlowElement is a SubProcess, it recursively calls the method on its FlowElements."
46,"scaleArtifacts(Collection<Artifact>,BpmnModel,double)",scale artifacts artifact list bpmn model scale factor ,Method,"scaleDiagram(BpmnModel,double)",,"java.util.ArrayList+ArrayList() org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getFlowLocationGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() java.util.List+addAll(Collection) java.util.List+addAll(Collection) java.util.List+add(E) java.util.List+add(E) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BpmnModel+getGraphicInfo(String) org.activiti.bpmn.model.BaseElement+getId() org.activiti.bpmn.model.BaseElement+getId() com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfoList(List<GraphicInfo>,double) com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfoList(List<GraphicInfo>,double)",,613,15,4,,"protected void scaleArtifacts(Collection<Artifact> artifactList, BpmnModel bpmnModel, double scaleFactor) {
    for (Artifact artifact : artifactList) {
      List<GraphicInfo> graphicInfoList = new ArrayList<GraphicInfo>();
      if (artifact instanceof Association) {
        List<GraphicInfo> flowList = bpmnModel.getFlowLocationGraphicInfo(artifact.getId());
        if (flowList != null) {
          graphicInfoList.addAll(flowList);
        }
      } else {
        graphicInfoList.add(bpmnModel.getGraphicInfo(artifact.getId()));
      }

      scaleGraphicInfoList(graphicInfoList, scaleFactor);
    }
  }",True,True,"The function of this method is to scale the graphic information of artifacts in a BPMN model. It takes a collection of artifacts, a BPMN model, and a scale factor as parameters. It iterates through each artifact, retrieves its graphic information, and scales it using the scale factor.",True,"The `scaleArtifacts` method takes a collection of artifacts, a BPMN model, and a scale factor as input. It iterates over each artifact in the collection and retrieves the corresponding graphic information from the BPMN model. If the artifact is an association, it retrieves the flow location graphic information, otherwise it retrieves the graphic information. Finally, it scales the retrieved graphic information using the given scale factor."
47,"scaleGraphicInfoList(List<GraphicInfo>,double)",scale graphic info list graphic info list scale factor ,Method,"scaleFlowElements(Collection<FlowElement>,BpmnModel,double) scaleArtifacts(Collection<Artifact>,BpmnModel,double)",,"com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfo(GraphicInfo,double) com.activiti.service.editor.ModelServiceImpl+scaleGraphicInfo(GraphicInfo,double)",,206,5,4,,"protected void scaleGraphicInfoList(List<GraphicInfo> graphicInfoList, double scaleFactor) {
    for (GraphicInfo graphicInfo : graphicInfoList) {
      scaleGraphicInfo(graphicInfo, scaleFactor);
    }
  }",False,True,This method scales a list of GraphicInfo objects by a given scaleFactor. It iterates through the list and calls the scaleGraphicInfo method for each GraphicInfo object.,True,"The code defines a protected method called ""scaleGraphicInfoList"" that takes a list of GraphicInfo objects and a scaling factor as parameters. It iterates through the list and calls another method called ""scaleGraphicInfo"" to scale each GraphicInfo object by the given factor."
48,"scaleGraphicInfo(GraphicInfo,double)",scale graphic info graphic info scale factor ,Method,"scaleDiagram(BpmnModel,double) scaleDiagram(BpmnModel,double) scaleGraphicInfoList(List<GraphicInfo>,double)",,org.activiti.bpmn.model.GraphicInfo+setX(double) org.activiti.bpmn.model.GraphicInfo+setX(double) org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+getX() org.activiti.bpmn.model.GraphicInfo+setY(double) org.activiti.bpmn.model.GraphicInfo+setY(double) org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+getY() org.activiti.bpmn.model.GraphicInfo+setWidth(double) org.activiti.bpmn.model.GraphicInfo+setWidth(double) org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+getWidth() org.activiti.bpmn.model.GraphicInfo+setHeight(double) org.activiti.bpmn.model.GraphicInfo+setHeight(double) org.activiti.bpmn.model.GraphicInfo+getHeight() org.activiti.bpmn.model.GraphicInfo+getHeight(),,324,6,4,,"protected void scaleGraphicInfo(GraphicInfo graphicInfo, double scaleFactor) {
    graphicInfo.setX(graphicInfo.getX() / scaleFactor);
    graphicInfo.setY(graphicInfo.getY() / scaleFactor);
    graphicInfo.setWidth(graphicInfo.getWidth() / scaleFactor);
    graphicInfo.setHeight(graphicInfo.getHeight() / scaleFactor);
  }",True,True,This method scales the coordinates and dimensions of a GraphicInfo object by dividing them by a given scaleFactor.,True,"The given code defines a method called ""scaleGraphicInfo"" that takes a ""GraphicInfo"" object and a scaling factor as parameters. It divides the x, y, width, and height values of the ""GraphicInfo"" object by the scaling factor, effectively scaling down the graphic representation."
