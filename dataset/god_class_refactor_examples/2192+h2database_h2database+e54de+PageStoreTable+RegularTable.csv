index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,scanIndex,Field,,,,,24,1,2,,private Index scanIndex;,False
2,rowCount,Field,setRowCount(long),,,,22,1,2,,private long rowCount;,False
3,lockExclusiveSession,Field,"getDeadlockDetails(ArrayList<Session>,boolean)",,,,46,1,66,,private volatile Session lockExclusiveSession;,True
4,lockSharedSessions,Field,,,,,103,2,2,,"private ConcurrentHashMap<Session, Session> lockSharedSessions =
            new ConcurrentHashMap<>();",True
5,waitingSessions,Field,,,,,237,5,18,"/** 
 * The queue of sessions waiting to lock the table. It is a FIFO queue to prevent starvation, since Java's synchronized locking is biased.
 */
","/**
     * The queue of sessions waiting to lock the table. It is a FIFO queue to
     * prevent starvation, since Java's synchronized locking is biased.
     */
    private final ArrayDeque<Session> waitingSessions = new ArrayDeque<>();",False
6,traceLock,Field,,,,,30,1,18,,private final Trace traceLock;,False
7,indexes,Field,,,,,67,1,18,,private final ArrayList<Index> indexes = Utils.newSmallArrayList();,False
8,lastModificationId,Field,,,,,32,1,2,,private long lastModificationId;,False
9,containsLargeObject,Field,,,,,42,1,18,,private final boolean containsLargeObject;,True
10,mainIndex,Field,,,,,38,1,18,,private final PageDataIndex mainIndex;,False
11,changesSinceAnalyze,Field,,,,,32,1,2,,private int changesSinceAnalyze;,False
12,nextAnalyze,Field,,,,,24,1,2,,private int nextAnalyze;,False
13,rowIdColumn,Field,,,,,27,1,2,,private Column rowIdColumn;,True
14,PageStoreTable(CreateTableData),Method,,,"org.h2.engine.Database+getSettings() org.h2.engine.Database+getSettings() org.h2.table.Table+getColumns() org.h2.table.Table+getColumns() org.h2.value.DataType+isLargeObject(int) org.h2.value.DataType+isLargeObject(int) org.h2.value.TypeInfo+getValueType() org.h2.table.Column+getType() org.h2.table.Column+getType() org.h2.value.TypeInfo+getValueType() org.h2.engine.Database+isPersistent() org.h2.engine.Database+isPersistent() org.h2.index.PageDataIndex+PageDataIndex(PageStoreTable,int,IndexColumn[],IndexType,boolean,Session) org.h2.table.IndexColumn+wrap(Column[]) org.h2.table.IndexColumn+wrap(Column[]) org.h2.table.Table+getColumns() org.h2.table.Table+getColumns() org.h2.index.IndexType+createScan(boolean) org.h2.index.IndexType+createScan(boolean) org.h2.index.ScanIndex+ScanIndex(PageStoreTable,int,IndexColumn[],IndexType) org.h2.table.IndexColumn+wrap(Column[]) org.h2.table.IndexColumn+wrap(Column[]) org.h2.table.Table+getColumns() org.h2.table.Table+getColumns() org.h2.index.IndexType+createScan(boolean) org.h2.index.IndexType+createScan(boolean) java.util.ArrayList+add(E) java.util.ArrayList+add(E) org.h2.engine.Database+getTrace(int) org.h2.engine.Database+getTrace(int)",org.h2.table.PageStoreTable+nextAnalyze org.h2.engine.DbSettings+analyzeAuto org.h2.engine.DbObjectBase+database org.h2.engine.DbSettings+analyzeAuto org.h2.table.Table+isHidden org.h2.table.Table+isHidden org.h2.command.ddl.CreateTableData+isHidden org.h2.table.PageStoreTable+containsLargeObject org.h2.command.ddl.CreateTableData+persistData org.h2.engine.DbObjectBase+database org.h2.table.PageStoreTable+mainIndex org.h2.command.ddl.CreateTableData+id org.h2.command.ddl.CreateTableData+persistData org.h2.command.ddl.CreateTableData+create org.h2.command.ddl.CreateTableData+session org.h2.table.PageStoreTable+scanIndex org.h2.table.PageStoreTable+mainIndex org.h2.table.PageStoreTable+mainIndex org.h2.table.PageStoreTable+scanIndex org.h2.command.ddl.CreateTableData+id org.h2.command.ddl.CreateTableData+persistData org.h2.table.PageStoreTable+indexes org.h2.table.PageStoreTable+scanIndex org.h2.table.PageStoreTable+traceLock org.h2.engine.DbObjectBase+database org.h2.message.Trace+LOCK,1013,26,1,,"public PageStoreTable(CreateTableData data) {
        super(data);
        nextAnalyze = database.getSettings().analyzeAuto;
        this.isHidden = data.isHidden;
        boolean b = false;
        for (Column col : getColumns()) {
            if (DataType.isLargeObject(col.getType().getValueType())) {
                b = true;
                break;
            }
        }
        containsLargeObject = b;
        if (data.persistData && database.isPersistent()) {
            mainIndex = new PageDataIndex(this, data.id,
                    IndexColumn.wrap(getColumns()),
                    IndexType.createScan(data.persistData),
                    data.create, data.session);
            scanIndex = mainIndex;
        } else {
            mainIndex = null;
            scanIndex = new ScanIndex(this, data.id,
                    IndexColumn.wrap(getColumns()), IndexType.createScan(data.persistData));
        }
        indexes.add(scanIndex);
        traceLock = database.getTrace(Trace.LOCK);
    }",False
15,close(Session),Method,,,org.h2.index.Index+close(Session) org.h2.index.Index+close(Session),org.h2.table.PageStoreTable+indexes,138,6,1,,"@Override
    public void close(Session session) {
        for (Index index : indexes) {
            index.close(session);
        }
    }",False
16,"getRow(Session,long)",Method,,"org.h2.index.HashIndex+find(Session,SearchRow,SearchRow) org.h2.index.NonUniqueHashCursor+get() org.h2.index.PageBtreeIndex+getRow(Session,long) org.h2.index.PageBtreeIndex+readRow(Data,int,boolean,boolean) org.h2.index.PageBtreeIndex+readRow(long)","org.h2.index.Index+getRow(Session,long) org.h2.index.Index+getRow(Session,long)",org.h2.table.PageStoreTable+scanIndex,113,4,1,,"@Override
    public Row getRow(Session session, long key) {
        return scanIndex.getRow(session, key);
    }",False
17,"addRow(Session,Row)",Method,,,"org.h2.engine.Database+getNextModificationDataId() org.h2.engine.Database+getNextModificationDataId() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) org.h2.index.Index+add(Session,Row) org.h2.index.Index+add(Session,Row) org.h2.table.PageStoreTable+checkRowCount(Session,Index,int) org.h2.table.PageStoreTable+checkRowCount(Session,Index,int) java.util.ArrayList+get(int) java.util.ArrayList+get(int) org.h2.index.Index+remove(Session,Row) org.h2.index.Index+remove(Session,Row) org.h2.table.PageStoreTable+checkRowCount(Session,Index,int) org.h2.table.PageStoreTable+checkRowCount(Session,Index,int) org.h2.message.Trace+error(Throwable,String) org.h2.message.Trace+error(Throwable,String) org.h2.message.DbException+convert(Throwable) org.h2.message.DbException+convert(Throwable) org.h2.table.PageStoreTable+analyzeIfRequired(Session) org.h2.table.PageStoreTable+analyzeIfRequired(Session)",org.h2.table.PageStoreTable+lastModificationId org.h2.engine.DbObjectBase+database org.h2.table.PageStoreTable+indexes org.h2.table.PageStoreTable+indexes org.h2.table.PageStoreTable+rowCount org.h2.table.PageStoreTable+indexes org.h2.engine.DbObjectBase+trace,1079,29,1,,"@Override
    public void addRow(Session session, Row row) {
        lastModificationId = database.getNextModificationDataId();
        int i = 0;
        try {
            for (int size = indexes.size(); i < size; i++) {
                Index index = indexes.get(i);
                index.add(session, row);
                checkRowCount(session, index, 1);
            }
            rowCount++;
        } catch (Throwable e) {
            try {
                while (--i >= 0) {
                    Index index = indexes.get(i);
                    index.remove(session, row);
                    checkRowCount(session, index, 0);
                }
            } catch (DbException e2) {
                // this could happen, for example on failure in the storage
                // but if that is not the case it means there is something wrong
                // with the database
                trace.error(e2, ""could not undo operation"");
                throw e2;
            }
            throw DbException.convert(e);
        }
        analyzeIfRequired(session);
    }",False
18,"checkRowCount(Session,Index,int)",Method,"addRow(Session,Row) addRow(Session,Row) removeRow(Session,Row) removeRow(Session,Row)",,org.h2.index.Index+getRowCount(Session) org.h2.index.Index+getRowCount(Session) org.h2.message.DbException+throwInternalError(String) org.h2.message.DbException+throwInternalError(String) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObject+getName() org.h2.engine.DbObject+getName(),org.h2.engine.SysProperties+CHECK org.h2.table.PageStoreTable+rowCount org.h2.table.PageStoreTable+rowCount,521,12,2,,"private void checkRowCount(Session session, Index index, int offset) {
        if (SysProperties.CHECK) {
            if (!(index instanceof PageDelegateIndex)) {
                long rc = index.getRowCount(session);
                if (rc != rowCount + offset) {
                    DbException.throwInternalError(
                            ""rowCount expected "" + (rowCount + offset) +
                            "" got "" + rc + "" "" + getName() + ""."" + index.getName());
                }
            }
        }
    }",False
19,getScanIndex(Session),Method,"addIndex(Session,String,int,IndexColumn[],IndexType,boolean,String)","org.h2.store.PageStore+openMetaIndex() org.h2.store.PageStore+addMeta(Row,Session,boolean)",java.util.ArrayList+get(int) java.util.ArrayList+get(int),org.h2.table.PageStoreTable+indexes,95,4,1,,"@Override
    public Index getScanIndex(Session session) {
        return indexes.get(0);
    }",False
20,getUniqueIndex(),Method,,,org.h2.index.IndexType+isUnique() org.h2.index.Index+getIndexType() org.h2.index.Index+getIndexType() org.h2.index.IndexType+isUnique(),org.h2.table.PageStoreTable+indexes,209,9,1,,"@Override
    public Index getUniqueIndex() {
        for (Index idx : indexes) {
            if (idx.getIndexType().isUnique()) {
                return idx;
            }
        }
        return null;
    }",False
21,getIndexes(),Method,,"org.h2.test.db.TestTableEngines+addIndex(Session,String,int,IndexColumn[],IndexType,boolean,String)",,org.h2.table.PageStoreTable+indexes,82,4,1,,"@Override
    public ArrayList<Index> getIndexes() {
        return indexes;
    }",False
22,"addIndex(Session,String,int,IndexColumn[],IndexType,boolean,String)",Method,,"org.h2.store.PageStore+addMeta(Row,Session,boolean)","org.h2.index.IndexType+isPrimaryKey() org.h2.index.IndexType+isPrimaryKey() org.h2.table.Column+isNullable() org.h2.table.Column+isNullable() org.h2.message.DbException+get(int,String) org.h2.message.DbException+get(int,String) org.h2.table.Column+getName() org.h2.table.Column+getName() org.h2.table.Column+setPrimaryKey(boolean) org.h2.table.Column+setPrimaryKey(boolean) org.h2.engine.DbObjectBase+isTemporary() org.h2.engine.DbObjectBase+isTemporary() org.h2.table.TableBase+isGlobalTemporary() org.h2.table.TableBase+isGlobalTemporary() org.h2.engine.Database+lockMeta(Session) org.h2.engine.Database+lockMeta(Session) org.h2.table.Table+isPersistIndexes() org.h2.table.Table+isPersistIndexes() org.h2.index.IndexType+isPersistent() org.h2.index.IndexType+isPersistent() org.h2.engine.Database+isStarting() org.h2.engine.Database+isStarting() org.h2.store.PageStore+getRootPageId(int) org.h2.engine.Database+getPageStore() org.h2.engine.Database+getPageStore() org.h2.store.PageStore+getRootPageId(int) org.h2.engine.Database+isStarting() org.h2.engine.Database+isStarting() org.h2.index.PageDataIndex+getRowCount(Session) org.h2.index.PageDataIndex+getRowCount(Session) org.h2.index.PageDataIndex+getMainIndexColumn() org.h2.index.PageDataIndex+getMainIndexColumn() org.h2.table.TableBase+getMainIndexColumn(IndexType,IndexColumn[]) org.h2.table.TableBase+getMainIndexColumn(IndexType,IndexColumn[]) org.h2.index.PageDataIndex+setMainIndexColumn(int) org.h2.index.PageDataIndex+setMainIndexColumn(int) org.h2.index.PageDelegateIndex+PageDelegateIndex(PageStoreTable,int,String,IndexType,PageDataIndex,boolean,Session) org.h2.index.IndexType+isSpatial() org.h2.index.IndexType+isSpatial() org.h2.index.SpatialTreeIndex+SpatialTreeIndex(Table,int,String,IndexColumn[],IndexType,boolean,boolean,Session) org.h2.index.PageBtreeIndex+PageBtreeIndex(PageStoreTable,int,String,IndexColumn[],IndexType,boolean,Session) org.h2.index.IndexType+isHash() org.h2.index.IndexType+isHash() org.h2.message.DbException+getUnsupportedException(String) org.h2.message.DbException+getUnsupportedException(String) org.h2.index.IndexType+isUnique() org.h2.index.IndexType+isUnique() org.h2.index.HashIndex+HashIndex(PageStoreTable,int,String,IndexColumn[],IndexType) org.h2.index.NonUniqueHashIndex+NonUniqueHashIndex(PageStoreTable,int,String,IndexColumn[],IndexType) org.h2.index.IndexType+isSpatial() org.h2.index.IndexType+isSpatial() org.h2.index.SpatialTreeIndex+SpatialTreeIndex(Table,int,String,IndexColumn[],IndexType,boolean,boolean,Session) org.h2.index.TreeIndex+TreeIndex(PageStoreTable,int,String,IndexColumn[],IndexType) org.h2.index.Index+needRebuild() org.h2.index.Index+needRebuild() org.h2.table.PageStoreTable+getScanIndex(Session) org.h2.table.PageStoreTable+getScanIndex(Session) org.h2.index.Index+getRowCount(Session) org.h2.index.Index+getRowCount(Session) org.h2.index.Index+find(Session,SearchRow,SearchRow) org.h2.index.Index+find(Session,SearchRow,SearchRow) java.lang.Math+min(long,long) java.lang.Math+min(long,long) org.h2.engine.Database+getMaxMemoryRows() org.h2.engine.Database+getMaxMemoryRows() org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObject+getName() org.h2.engine.DbObject+getName() org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long) org.h2.index.Cursor+next() org.h2.index.Cursor+next() org.h2.engine.Database+setProgress(int,String,int,int) org.h2.engine.Database+setProgress(int,String,int,int) org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long) org.h2.index.Cursor+get() org.h2.index.Cursor+get() java.util.ArrayList+add(E) java.util.ArrayList+add(E) java.util.ArrayList+size() java.util.ArrayList+size() org.h2.table.PageStoreTable+addRowsToIndex(Session,ArrayList<Row>,Index) org.h2.table.PageStoreTable+addRowsToIndex(Session,ArrayList<Row>,Index) org.h2.table.PageStoreTable+addRowsToIndex(Session,ArrayList<Row>,Index) org.h2.table.PageStoreTable+addRowsToIndex(Session,ArrayList<Row>,Index) org.h2.message.DbException+throwInternalError(String) org.h2.message.DbException+throwInternalError(String) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() org.h2.schema.Schema+freeUniqueName(String) org.h2.schema.SchemaObjectBase+getSchema() org.h2.schema.SchemaObjectBase+getSchema() org.h2.schema.Schema+freeUniqueName(String) org.h2.index.Index+remove(Session) org.h2.index.Index+remove(Session) org.h2.message.Trace+error(Throwable,String) org.h2.message.Trace+error(Throwable,String) org.h2.engine.DbObject+setTemporary(boolean) org.h2.engine.DbObject+setTemporary(boolean) org.h2.engine.DbObjectBase+isTemporary() org.h2.engine.DbObjectBase+isTemporary() org.h2.engine.DbObject+getCreateSQL() org.h2.engine.DbObject+getCreateSQL() org.h2.engine.DbObject+setComment(String) org.h2.engine.DbObject+setComment(String) org.h2.engine.Session+addLocalTempTableIndex(Index) org.h2.engine.Session+addLocalTempTableIndex(Index) org.h2.engine.Database+addSchemaObject(Session,SchemaObject) org.h2.engine.Database+addSchemaObject(Session,SchemaObject) java.util.ArrayList+add(E) java.util.ArrayList+add(E) org.h2.engine.DbObjectBase+setModified() org.h2.engine.DbObjectBase+setModified()",org.h2.table.IndexColumn+column org.h2.api.ErrorCode+COLUMN_MUST_NOT_BE_NULLABLE_1 org.h2.engine.DbObjectBase+database org.h2.engine.DbObjectBase+database org.h2.engine.DbObjectBase+database org.h2.engine.DbObjectBase+database org.h2.table.PageStoreTable+mainIndex org.h2.table.PageStoreTable+mainIndex org.h2.table.PageStoreTable+mainIndex org.h2.table.PageStoreTable+mainIndex org.h2.table.PageStoreTable+rowCount org.h2.table.PageStoreTable+rowCount org.h2.engine.DbObjectBase+database org.h2.engine.DbObjectBase+database org.h2.api.DatabaseEventListener+STATE_CREATE_INDEX org.h2.engine.DbObjectBase+trace org.h2.engine.DbObjectBase+database org.h2.table.PageStoreTable+indexes,5034,114,1,,"@Override
    public Index addIndex(Session session, String indexName, int indexId,
            IndexColumn[] cols, IndexType indexType, boolean create,
            String indexComment) {
        if (indexType.isPrimaryKey()) {
            for (IndexColumn c : cols) {
                Column column = c.column;
                if (column.isNullable()) {
                    throw DbException.get(
                            ErrorCode.COLUMN_MUST_NOT_BE_NULLABLE_1, column.getName());
                }
                column.setPrimaryKey(true);
            }
        }
        boolean isSessionTemporary = isTemporary() && !isGlobalTemporary();
        if (!isSessionTemporary) {
            database.lockMeta(session);
        }
        Index index;
        if (isPersistIndexes() && indexType.isPersistent()) {
            int mainIndexColumn;
            if (database.isStarting() &&
                    database.getPageStore().getRootPageId(indexId) != 0) {
                mainIndexColumn = -1;
            } else if (!database.isStarting() && mainIndex.getRowCount(session) != 0
                    || mainIndex.getMainIndexColumn() != -1) {
                mainIndexColumn = -1;
            } else {
                mainIndexColumn = getMainIndexColumn(indexType, cols);
            }
            if (mainIndexColumn != -1) {
                mainIndex.setMainIndexColumn(mainIndexColumn);
                index = new PageDelegateIndex(this, indexId, indexName,
                        indexType, mainIndex, create, session);
            } else if (indexType.isSpatial()) {
                index = new SpatialTreeIndex(this, indexId, indexName, cols,
                        indexType, true, create, session);
            } else {
                index = new PageBtreeIndex(this, indexId, indexName, cols,
                        indexType, create, session);
            }
        } else {
            if (indexType.isHash()) {
                if (cols.length != 1) {
                    throw DbException.getUnsupportedException(
                            ""hash indexes may index only one column"");
                }
                if (indexType.isUnique()) {
                    index = new HashIndex(this, indexId, indexName, cols,
                            indexType);
                } else {
                    index = new NonUniqueHashIndex(this, indexId, indexName,
                            cols, indexType);
                }
            } else if (indexType.isSpatial()) {
                index = new SpatialTreeIndex(this, indexId, indexName, cols,
                        indexType, false, true, session);
            } else {
                index = new TreeIndex(this, indexId, indexName, cols, indexType);
            }
        }
        if (index.needRebuild() && rowCount > 0) {
            try {
                Index scan = getScanIndex(session);
                long remaining = scan.getRowCount(session);
                long total = remaining;
                Cursor cursor = scan.find(session, null, null);
                long i = 0;
                int bufferSize = (int) Math.min(rowCount, database.getMaxMemoryRows());
                ArrayList<Row> buffer = new ArrayList<>(bufferSize);
                String n = getName() + "":"" + index.getName();
                int t = MathUtils.convertLongToInt(total);
                while (cursor.next()) {
                    database.setProgress(DatabaseEventListener.STATE_CREATE_INDEX, n,
                            MathUtils.convertLongToInt(i++), t);
                    Row row = cursor.get();
                    buffer.add(row);
                    if (buffer.size() >= bufferSize) {
                        addRowsToIndex(session, buffer, index);
                    }
                    remaining--;
                }
                addRowsToIndex(session, buffer, index);
                if (remaining != 0) {
                    DbException.throwInternalError(""rowcount remaining="" +
                            remaining + "" "" + getName());
                }
            } catch (DbException e) {
                getSchema().freeUniqueName(indexName);
                try {
                    index.remove(session);
                } catch (DbException e2) {
                    // this could happen, for example on failure in the storage
                    // but if that is not the case it means
                    // there is something wrong with the database
                    trace.error(e2, ""could not remove index"");
                    throw e2;
                }
                throw e;
            }
        }
        index.setTemporary(isTemporary());
        if (index.getCreateSQL() != null) {
            index.setComment(indexComment);
            if (isSessionTemporary) {
                session.addLocalTempTableIndex(index);
            } else {
                database.addSchemaObject(session, index);
            }
        }
        indexes.add(index);
        setModified();
        return index;
    }",False
23,canGetRowCount(),Method,,,,,74,4,1,,"@Override
    public boolean canGetRowCount() {
        return true;
    }",True
24,"addRowsToIndex(Session,ArrayList<Row>,Index)",Method,"addIndex(Session,String,int,IndexColumn[],IndexType,boolean,String) addIndex(Session,String,int,IndexColumn[],IndexType,boolean,String)",,"java.util.Collections+sort(List,Comparator) java.util.Collections+sort(List,Comparator) +() +compare(Row,Row)",,438,14,10,,"private static void addRowsToIndex(Session session, ArrayList<Row> list,
            Index index) {
        final Index idx = index;
        Collections.sort(list, new Comparator<Row>() {
            @Override
            public int compare(Row r1, Row r2) {
                return idx.compareRows(r1, r2);
            }
        });
        for (Row row : list) {
            index.add(session, row);
        }
        list.clear();
    }",True
25,canDrop(),Method,,,,,67,4,1,,"@Override
    public boolean canDrop() {
        return true;
    }",True
26,getRowCount(Session),Method,,"org.h2.index.PageBtreeIndex+getCost(Session,int[],TableFilter[],int,SortOrder,AllColumnsForPlan)",,org.h2.table.PageStoreTable+rowCount,87,4,1,,"@Override
    public long getRowCount(Session session) {
        return rowCount;
    }",False
27,"removeRow(Session,Row)",Method,,,"org.h2.engine.Database+getNextModificationDataId() org.h2.engine.Database+getNextModificationDataId() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) org.h2.index.Index+remove(Session,Row) org.h2.index.Index+remove(Session,Row) org.h2.table.PageStoreTable+checkRowCount(Session,Index,int) org.h2.table.PageStoreTable+checkRowCount(Session,Index,int) java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) org.h2.index.Index+add(Session,Row) org.h2.index.Index+add(Session,Row) org.h2.table.PageStoreTable+checkRowCount(Session,Index,int) org.h2.table.PageStoreTable+checkRowCount(Session,Index,int) org.h2.message.Trace+error(Throwable,String) org.h2.message.Trace+error(Throwable,String) org.h2.message.DbException+convert(Throwable) org.h2.message.DbException+convert(Throwable) org.h2.table.PageStoreTable+analyzeIfRequired(Session) org.h2.table.PageStoreTable+analyzeIfRequired(Session)",org.h2.table.PageStoreTable+lastModificationId org.h2.engine.DbObjectBase+database org.h2.table.PageStoreTable+indexes org.h2.table.PageStoreTable+indexes org.h2.table.PageStoreTable+rowCount org.h2.table.PageStoreTable+indexes org.h2.table.PageStoreTable+indexes org.h2.engine.DbObjectBase+trace,1085,29,1,,"@Override
    public void removeRow(Session session, Row row) {
        lastModificationId = database.getNextModificationDataId();
        int i = indexes.size() - 1;
        try {
            for (; i >= 0; i--) {
                Index index = indexes.get(i);
                index.remove(session, row);
                checkRowCount(session, index, -1);
            }
            rowCount--;
        } catch (Throwable e) {
            try {
                while (++i < indexes.size()) {
                    Index index = indexes.get(i);
                    index.add(session, row);
                    checkRowCount(session, index, 0);
                }
            } catch (DbException e2) {
                // this could happen, for example on failure in the storage
                // but if that is not the case it means there is something wrong
                // with the database
                trace.error(e2, ""could not undo operation"");
                throw e2;
            }
            throw DbException.convert(e);
        }
        analyzeIfRequired(session);
    }",False
28,truncate(Session),Method,removeChildrenAndResources(Session),,org.h2.engine.Database+getNextModificationDataId() org.h2.engine.Database+getNextModificationDataId() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) org.h2.index.Index+truncate(Session) org.h2.index.Index+truncate(Session),org.h2.table.PageStoreTable+lastModificationId org.h2.engine.DbObjectBase+database org.h2.table.PageStoreTable+indexes org.h2.table.PageStoreTable+indexes org.h2.table.PageStoreTable+rowCount org.h2.table.PageStoreTable+changesSinceAnalyze,326,10,1,,"@Override
    public void truncate(Session session) {
        lastModificationId = database.getNextModificationDataId();
        for (int i = indexes.size() - 1; i >= 0; i--) {
            Index index = indexes.get(i);
            index.truncate(session);
        }
        rowCount = 0;
        changesSinceAnalyze = 0;
    }",False
29,analyzeIfRequired(Session),Method,"addRow(Session,Row) removeRow(Session,Row)",,org.h2.engine.Session+markTableForAnalyze(Table) org.h2.engine.Session+markTableForAnalyze(Table),org.h2.table.PageStoreTable+nextAnalyze org.h2.table.PageStoreTable+nextAnalyze org.h2.table.PageStoreTable+changesSinceAnalyze org.h2.table.PageStoreTable+changesSinceAnalyze org.h2.table.PageStoreTable+nextAnalyze org.h2.table.PageStoreTable+nextAnalyze,325,11,2,,"private void analyzeIfRequired(Session session) {
        if (nextAnalyze == 0 || nextAnalyze > changesSinceAnalyze++) {
            return;
        }
        changesSinceAnalyze = 0;
        int n = 2 * nextAnalyze;
        if (n > 0) {
            nextAnalyze = n;
        }
        session.markTableForAnalyze(this);
    }",False
30,"lock(Session,boolean,boolean)",Method,,,"org.h2.engine.Database+getLockMode() org.h2.engine.Database+getLockMode() java.util.concurrent.ConcurrentHashMap+containsKey(Object) java.util.concurrent.ConcurrentHashMap+containsKey(Object) java.util.concurrent.ConcurrentHashMap+contains(Object) java.util.concurrent.ConcurrentHashMap+contains(Object) org.h2.engine.Session+setWaitForLock(Table,Thread) org.h2.engine.Session+setWaitForLock(Table,Thread) java.lang.Thread+currentThread() java.lang.Thread+currentThread() java.util.ArrayDeque+addLast(E) java.util.ArrayDeque+addLast(E) org.h2.table.PageStoreTable+doLock1(Session,int,boolean) org.h2.table.PageStoreTable+doLock1(Session,int,boolean) org.h2.engine.Session+setWaitForLock(Table,Thread) org.h2.engine.Session+setWaitForLock(Table,Thread) java.util.ArrayDeque+remove(Object) java.util.ArrayDeque+remove(Object)",org.h2.engine.DbObjectBase+database org.h2.engine.Constants+LOCK_MODE_OFF org.h2.table.PageStoreTable+lockExclusiveSession org.h2.table.PageStoreTable+lockExclusiveSession org.h2.table.PageStoreTable+lockSharedSessions org.h2.engine.DbObjectBase+database org.h2.table.PageStoreTable+lockSharedSessions org.h2.table.PageStoreTable+waitingSessions org.h2.table.PageStoreTable+waitingSessions,964,28,1,,"@Override
    public boolean lock(Session session, boolean exclusive,
            boolean forceLockEvenInMvcc) {
        int lockMode = database.getLockMode();
        if (lockMode == Constants.LOCK_MODE_OFF) {
            return lockExclusiveSession != null;
        }
        if (lockExclusiveSession == session) {
            return true;
        }
        if (!exclusive && lockSharedSessions.containsKey(session)) {
            return true;
        }
        synchronized (database) {
            if (!exclusive && lockSharedSessions.contains(session)) {
                return true;
            }
            session.setWaitForLock(this, Thread.currentThread());
            waitingSessions.addLast(session);
            try {
                doLock1(session, lockMode, exclusive);
            } finally {
                session.setWaitForLock(null, null);
                waitingSessions.remove(session);
            }
        }
        return false;
    }",False
31,"doLock1(Session,int,boolean)",Method,"lock(Session,boolean,boolean)",,"org.h2.table.PageStoreTable+traceLock(Session,boolean,String) org.h2.table.PageStoreTable+traceLock(Session,boolean,String) java.util.ArrayDeque+getFirst() java.util.ArrayDeque+getFirst() org.h2.table.PageStoreTable+doLock2(Session,int,boolean) org.h2.table.PageStoreTable+doLock2(Session,int,boolean) org.h2.table.PageStoreTable+checkDeadlock(Session,Session,Set<Session>) org.h2.table.PageStoreTable+checkDeadlock(Session,Session,Set<Session>) org.h2.message.DbException+get(int,String) org.h2.message.DbException+get(int,String) org.h2.table.PageStoreTable+getDeadlockDetails(ArrayList<Session>,boolean) org.h2.table.PageStoreTable+getDeadlockDetails(ArrayList<Session>,boolean) java.lang.System+nanoTime() java.lang.System+nanoTime() java.util.concurrent.TimeUnit+toNanos(long) java.util.concurrent.TimeUnit+toNanos(long) org.h2.engine.Session+getLockTimeout() org.h2.engine.Session+getLockTimeout() org.h2.table.PageStoreTable+traceLock(Session,boolean,String) org.h2.table.PageStoreTable+traceLock(Session,boolean,String) org.h2.engine.Session+getLockTimeout() org.h2.engine.Session+getLockTimeout() org.h2.message.DbException+get(int,String) org.h2.message.DbException+get(int,String) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() org.h2.table.PageStoreTable+traceLock(Session,boolean,String) org.h2.table.PageStoreTable+traceLock(Session,boolean,String) org.h2.engine.Database+getLockMode() org.h2.engine.Database+getLockMode() java.lang.Runtime+freeMemory() java.lang.Runtime+getRuntime() java.lang.Runtime+getRuntime() java.lang.Runtime+freeMemory() java.lang.System+gc() java.lang.System+gc() java.lang.Runtime+freeMemory() java.lang.Runtime+getRuntime() java.lang.Runtime+getRuntime() java.lang.Runtime+freeMemory() java.lang.Math+min(long,long) java.lang.Math+min(long,long) java.util.concurrent.TimeUnit+toMillis(long) java.util.concurrent.TimeUnit+toMillis(long) java.lang.Object+wait(long) java.lang.Object+wait(long)",org.h2.table.PageStoreTable+waitingSessions org.h2.api.ErrorCode+DEADLOCK_1 java.util.concurrent.TimeUnit+MILLISECONDS org.h2.api.ErrorCode+LOCK_TIMEOUT_1 org.h2.engine.DbObjectBase+database org.h2.engine.Constants+LOCK_MODE_TABLE_GC org.h2.engine.Constants+DEADLOCK_CHECK java.util.concurrent.TimeUnit+NANOSECONDS org.h2.engine.DbObjectBase+database,2311,54,2,,"private void doLock1(Session session, int lockMode, boolean exclusive) {
        traceLock(session, exclusive, ""requesting for"");
        // don't get the current time unless necessary
        long max = 0;
        boolean checkDeadlock = false;
        while (true) {
            // if I'm the next one in the queue
            if (waitingSessions.getFirst() == session) {
                if (doLock2(session, lockMode, exclusive)) {
                    return;
                }
            }
            if (checkDeadlock) {
                ArrayList<Session> sessions = checkDeadlock(session, null, null);
                if (sessions != null) {
                    throw DbException.get(ErrorCode.DEADLOCK_1,
                            getDeadlockDetails(sessions, exclusive));
                }
            } else {
                // check for deadlocks from now on
                checkDeadlock = true;
            }
            long now = System.nanoTime();
            if (max == 0) {
                // try at least one more time
                max = now + TimeUnit.MILLISECONDS.toNanos(session.getLockTimeout());
            } else if (now >= max) {
                traceLock(session, exclusive, ""timeout after "" + session.getLockTimeout());
                throw DbException.get(ErrorCode.LOCK_TIMEOUT_1, getName());
            }
            try {
                traceLock(session, exclusive, ""waiting for"");
                if (database.getLockMode() == Constants.LOCK_MODE_TABLE_GC) {
                    for (int i = 0; i < 20; i++) {
                        long free = Runtime.getRuntime().freeMemory();
                        System.gc();
                        long free2 = Runtime.getRuntime().freeMemory();
                        if (free == free2) {
                            break;
                        }
                    }
                }
                // don't wait too long so that deadlocks are detected early
                long sleep = Math.min(Constants.DEADLOCK_CHECK,
                        TimeUnit.NANOSECONDS.toMillis(max - now));
                if (sleep == 0) {
                    sleep = 1;
                }
                database.wait(sleep);
            } catch (InterruptedException e) {
                // ignore
            }
        }
    }",False
32,"doLock2(Session,int,boolean)",Method,"doLock1(Session,int,boolean)",,"java.util.concurrent.ConcurrentHashMap+isEmpty() java.util.concurrent.ConcurrentHashMap+isEmpty() org.h2.table.PageStoreTable+traceLock(Session,boolean,String) org.h2.table.PageStoreTable+traceLock(Session,boolean,String) org.h2.engine.Session+addLock(Table) org.h2.engine.Session+addLock(Table) java.util.concurrent.ConcurrentHashMap+size() java.util.concurrent.ConcurrentHashMap+size() java.util.concurrent.ConcurrentHashMap+containsKey(Object) java.util.concurrent.ConcurrentHashMap+containsKey(Object) org.h2.table.PageStoreTable+traceLock(Session,boolean,String) org.h2.table.PageStoreTable+traceLock(Session,boolean,String) org.h2.engine.Database+isMultiThreaded() org.h2.engine.Database+isMultiThreaded() java.util.concurrent.ConcurrentHashMap+containsKey(Object) java.util.concurrent.ConcurrentHashMap+containsKey(Object) org.h2.table.PageStoreTable+traceLock(Session,boolean,String) org.h2.table.PageStoreTable+traceLock(Session,boolean,String) org.h2.engine.Session+addLock(Table) org.h2.engine.Session+addLock(Table) java.util.concurrent.ConcurrentHashMap+put(K,V) java.util.concurrent.ConcurrentHashMap+put(K,V)",org.h2.table.PageStoreTable+lockExclusiveSession org.h2.table.PageStoreTable+lockSharedSessions org.h2.table.PageStoreTable+lockExclusiveSession org.h2.table.PageStoreTable+lockSharedSessions org.h2.table.PageStoreTable+lockSharedSessions org.h2.table.PageStoreTable+lockExclusiveSession org.h2.table.PageStoreTable+lockExclusiveSession org.h2.engine.Constants+LOCK_MODE_READ_COMMITTED org.h2.engine.DbObjectBase+database org.h2.table.PageStoreTable+lockSharedSessions org.h2.table.PageStoreTable+lockSharedSessions,1658,38,2,,"private boolean doLock2(Session session, int lockMode, boolean exclusive) {
        if (exclusive) {
            if (lockExclusiveSession == null) {
                if (lockSharedSessions.isEmpty()) {
                    traceLock(session, exclusive, ""added for"");
                    session.addLock(this);
                    lockExclusiveSession = session;
                    return true;
                } else if (lockSharedSessions.size() == 1 &&
                        lockSharedSessions.containsKey(session)) {
                    traceLock(session, exclusive, ""add (upgraded) for "");
                    lockExclusiveSession = session;
                    return true;
                }
            }
        } else {
            if (lockExclusiveSession == null) {
                if (lockMode == Constants.LOCK_MODE_READ_COMMITTED) {
                    if (!database.isMultiThreaded()) {
                        // READ_COMMITTED: a read lock is acquired,
                        // but released immediately after the operation
                        // is complete.
                        // When allowing only one thread, no lock is
                        // required.
                        // Row level locks work like read committed.
                        return true;
                    }
                }
                if (!lockSharedSessions.containsKey(session)) {
                    traceLock(session, exclusive, ""ok"");
                    session.addLock(this);
                    lockSharedSessions.put(session, session);
                }
                return true;
            }
        }
        return false;
    }",False
33,"getDeadlockDetails(ArrayList<Session>,boolean)",Method,"doLock1(Session,int,boolean)",,java.lang.StringBuilder+StringBuilder() org.h2.engine.Session+getWaitForLock() org.h2.engine.Session+getWaitForLock() org.h2.engine.Session+getWaitForLockThread() org.h2.engine.Session+getWaitForLockThread() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.h2.engine.Session+toString() org.h2.engine.Session+toString() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Thread+getName() java.lang.Thread+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.h2.engine.DbObjectBase+toString() org.h2.engine.DbObjectBase+toString() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.h2.engine.Session+getLocks() org.h2.engine.Session+getLocks() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.h2.engine.DbObjectBase+toString() org.h2.engine.DbObjectBase+toString() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) java.lang.StringBuilder+toString() java.lang.StringBuilder+toString(),org.h2.table.PageStoreTable+lockExclusiveSession org.h2.table.PageStoreTable+lockExclusiveSession,1357,33,10,,"private static String getDeadlockDetails(ArrayList<Session> sessions, boolean exclusive) {
        // We add the thread details here to make it easier for customers to
        // match up these error messages with their own logs.
        StringBuilder buff = new StringBuilder();
        for (Session s : sessions) {
            Table lock = s.getWaitForLock();
            Thread thread = s.getWaitForLockThread();
            buff.append(""\nSession "").
                append(s.toString()).
                append("" on thread "").
                append(thread.getName()).
                append("" is waiting to lock "").
                append(lock.toString()).
                append(exclusive ? "" (exclusive)"" : "" (shared)"").
                append("" while locking "");
            int i = 0;
            for (Table t : s.getLocks()) {
                if (i++ > 0) {
                    buff.append("", "");
                }
                buff.append(t.toString());
                if (t instanceof PageStoreTable) {
                    if (((PageStoreTable) t).lockExclusiveSession == s) {
                        buff.append("" (exclusive)"");
                    } else {
                        buff.append("" (shared)"");
                    }
                }
            }
            buff.append('.');
        }
        return buff.toString();
    }",True
34,"checkDeadlock(Session,Session,Set<Session>)",Method,"doLock1(Session,int,boolean)",,"java.util.Set+contains(Object) java.util.Set+contains(Object) java.util.Set+add(E) java.util.Set+add(E) java.util.concurrent.ConcurrentHashMap+keySet() java.util.concurrent.ConcurrentHashMap+keySet() org.h2.engine.Session+getWaitForLock() org.h2.engine.Session+getWaitForLock() org.h2.table.Table+checkDeadlock(Session,Session,Set<Session>) org.h2.table.Table+checkDeadlock(Session,Session,Set<Session>) java.util.ArrayList+add(E) java.util.ArrayList+add(E) org.h2.engine.Session+getWaitForLock() org.h2.engine.Session+getWaitForLock() org.h2.table.Table+checkDeadlock(Session,Session,Set<Session>) org.h2.table.Table+checkDeadlock(Session,Session,Set<Session>) java.util.ArrayList+add(E) java.util.ArrayList+add(E)",org.h2.table.PageStoreTable+lockSharedSessions org.h2.table.PageStoreTable+lockExclusiveSession,2077,49,1,,"@Override
    public ArrayList<Session> checkDeadlock(Session session, Session clash,
            Set<Session> visited) {
        // only one deadlock check at any given time
        synchronized (PageStoreTable.class) {
            if (clash == null) {
                // verification is started
                clash = session;
                visited = new HashSet<>();
            } else if (clash == session) {
                // we found a cycle where this session is involved
                return new ArrayList<>(0);
            } else if (visited.contains(session)) {
                // we have already checked this session.
                // there is a cycle, but the sessions in the cycle need to
                // find it out themselves
                return null;
            }
            visited.add(session);
            ArrayList<Session> error = null;
            for (Session s : lockSharedSessions.keySet()) {
                if (s == session) {
                    // it doesn't matter if we have locked the object already
                    continue;
                }
                Table t = s.getWaitForLock();
                if (t != null) {
                    error = t.checkDeadlock(s, clash, visited);
                    if (error != null) {
                        error.add(session);
                        break;
                    }
                }
            }
            // take a local copy so we don't see inconsistent data, since we are
            // not locked while checking the lockExclusiveSession value
            Session copyOfLockExclusiveSession = lockExclusiveSession;
            if (error == null && copyOfLockExclusiveSession != null) {
                Table t = copyOfLockExclusiveSession.getWaitForLock();
                if (t != null) {
                    error = t.checkDeadlock(copyOfLockExclusiveSession, clash, visited);
                    if (error != null) {
                        error.add(session);
                    }
                }
            }
            return error;
        }
    }",True
35,"traceLock(Session,boolean,String)",Method,"doLock1(Session,int,boolean) doLock1(Session,int,boolean) doLock1(Session,int,boolean) doLock2(Session,int,boolean) doLock2(Session,int,boolean) doLock2(Session,int,boolean) unlock(Session)",,"org.h2.message.Trace+isDebugEnabled() org.h2.message.Trace+isDebugEnabled() org.h2.message.Trace+debug(String,Object[]) org.h2.message.Trace+debug(String,Object[]) org.h2.engine.Session+getId() org.h2.engine.Session+getId() org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName()",org.h2.table.PageStoreTable+traceLock org.h2.table.PageStoreTable+traceLock,284,6,2,,"private void traceLock(Session session, boolean exclusive, String s) {
        if (traceLock.isDebugEnabled()) {
            traceLock.debug(""{0} {1} {2} {3}"", session.getId(),
                    exclusive ? ""exclusive write lock"" : ""shared read lock"", s, getName());
        }
    }",False
36,isLockedExclusively(),Method,,,,org.h2.table.PageStoreTable+lockExclusiveSession,103,4,1,,"@Override
    public boolean isLockedExclusively() {
        return lockExclusiveSession != null;
    }",True
37,isLockedExclusivelyBy(Session),Method,,,,org.h2.table.PageStoreTable+lockExclusiveSession,123,4,1,,"@Override
    public boolean isLockedExclusivelyBy(Session session) {
        return lockExclusiveSession == session;
    }",True
38,unlock(Session),Method,,,"org.h2.table.PageStoreTable+traceLock(Session,boolean,String) org.h2.table.PageStoreTable+traceLock(Session,boolean,String) java.util.concurrent.ConcurrentHashMap+remove(Object) java.util.concurrent.ConcurrentHashMap+remove(Object) java.util.concurrent.ConcurrentHashMap+isEmpty() java.util.concurrent.ConcurrentHashMap+isEmpty() java.util.concurrent.ConcurrentHashMap+remove(Object) java.util.concurrent.ConcurrentHashMap+remove(Object) java.util.ArrayDeque+isEmpty() java.util.ArrayDeque+isEmpty() java.lang.Object+notifyAll() java.lang.Object+notifyAll()",org.h2.engine.DbObjectBase+database org.h2.table.PageStoreTable+lockExclusiveSession org.h2.table.PageStoreTable+lockExclusiveSession org.h2.table.PageStoreTable+lockSharedSessions org.h2.table.PageStoreTable+lockExclusiveSession org.h2.engine.DbObjectBase+database org.h2.table.PageStoreTable+lockSharedSessions org.h2.table.PageStoreTable+lockSharedSessions org.h2.table.PageStoreTable+waitingSessions org.h2.engine.DbObjectBase+database,589,18,1,,"@Override
    public void unlock(Session s) {
        if (database != null) {
            traceLock(s, lockExclusiveSession == s, ""unlock"");
            if (lockExclusiveSession == s) {
                lockSharedSessions.remove(s);
                lockExclusiveSession = null;
            }
            synchronized (database) {
                if (!lockSharedSessions.isEmpty()) {
                    lockSharedSessions.remove(s);
                }
                if (!waitingSessions.isEmpty()) {
                    database.notifyAll();
                }
            }
        }
    }",False
39,setRowCount(long),Method,,"org.h2.index.PageBtreeIndex+truncate(Session) org.h2.index.PageDataIndex+PageDataIndex(PageStoreTable,int,IndexColumn[],IndexType,boolean,Session) org.h2.index.PageDataIndex+truncate(Session) org.h2.index.ScanIndex+truncate(Session)",,org.h2.table.PageStoreTable+rowCount org.h2.table.PageStoreTable+rowCount,171,8,1,"/** 
 * Set the row count of this table.
 * @param count the row count
 */
","/**
     * Set the row count of this table.
     *
     * @param count the row count
     */
    public void setRowCount(long count) {
        this.rowCount = count;
    }",False
40,removeChildrenAndResources(Session),Method,,,"org.h2.table.PageStoreTable+truncate(Session) org.h2.table.PageStoreTable+truncate(Session) org.h2.store.LobStorageInterface+removeAllForTable(int) org.h2.engine.Database+getLobStorage() org.h2.engine.Database+getLobStorage() org.h2.store.LobStorageInterface+removeAllForTable(int) org.h2.engine.DbObjectBase+getId() org.h2.engine.DbObjectBase+getId() org.h2.engine.Database+lockMeta(Session) org.h2.engine.Database+lockMeta(Session) org.h2.table.Table+removeChildrenAndResources(Session) java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) org.h2.engine.DbObject+getName() org.h2.engine.DbObject+getName() org.h2.engine.Database+removeSchemaObject(Session,SchemaObject) org.h2.engine.Database+removeSchemaObject(Session,SchemaObject) java.util.ArrayList+remove(Object) java.util.ArrayList+remove(Object) org.h2.engine.Database+getAllSchemaObjects(int) org.h2.engine.Database+getAllSchemaObjects(int) org.h2.index.Index+getTable() org.h2.index.Index+getTable() org.h2.message.DbException+throwInternalError(String) org.h2.message.DbException+throwInternalError(String) org.h2.engine.DbObject+getName() org.h2.engine.DbObject+getName() org.h2.index.Index+remove(Session) org.h2.index.Index+remove(Session) org.h2.engine.Database+removeMeta(Session,int) org.h2.engine.Database+removeMeta(Session,int) org.h2.engine.DbObjectBase+getId() org.h2.engine.DbObjectBase+getId() org.h2.engine.DbObjectBase+invalidate() org.h2.engine.DbObjectBase+invalidate()",org.h2.table.PageStoreTable+containsLargeObject org.h2.engine.DbObjectBase+database org.h2.engine.DbObjectBase+database org.h2.table.PageStoreTable+indexes org.h2.table.PageStoreTable+indexes org.h2.engine.DbObjectBase+database org.h2.table.PageStoreTable+indexes org.h2.engine.SysProperties+CHECK org.h2.engine.DbObjectBase+database org.h2.engine.DbObject+INDEX org.h2.table.PageStoreTable+scanIndex org.h2.engine.DbObjectBase+database org.h2.table.PageStoreTable+scanIndex org.h2.table.PageStoreTable+lockExclusiveSession org.h2.table.PageStoreTable+lockSharedSessions,1290,33,1,,"@Override
    public void removeChildrenAndResources(Session session) {
        if (containsLargeObject) {
            // unfortunately, the data is gone on rollback
            truncate(session);
            database.getLobStorage().removeAllForTable(getId());
            database.lockMeta(session);
        }
        super.removeChildrenAndResources(session);
        // go backwards because database.removeIndex will call table.removeIndex
        while (indexes.size() > 1) {
            Index index = indexes.get(1);
            if (index.getName() != null) {
                database.removeSchemaObject(session, index);
            }
            // needed for session temporary indexes
            indexes.remove(index);
        }
        if (SysProperties.CHECK) {
            for (SchemaObject obj : database.getAllSchemaObjects(DbObject.INDEX)) {
                Index index = (Index) obj;
                if (index.getTable() == this) {
                    DbException.throwInternalError(""index not dropped: "" + index.getName());
                }
            }
        }
        scanIndex.remove(session);
        database.removeMeta(session, getId());
        scanIndex = null;
        lockExclusiveSession = null;
        lockSharedSessions = null;
        invalidate();
    }",False
41,toString(),Method,,,org.h2.schema.SchemaObjectBase+getSQL(boolean) org.h2.schema.SchemaObjectBase+getSQL(boolean),,76,4,1,,"@Override
    public String toString() {
        return getSQL(false);
    }",True
42,checkRename(),Method,,,,,61,4,1,,"@Override
    public void checkRename() {
        // ok
    }",True
43,checkSupportAlter(),Method,,,,,67,4,1,,"@Override
    public void checkSupportAlter() {
        // ok
    }",True
44,canTruncate(),Method,,,org.h2.table.Table+getCheckForeignKeyConstraints() org.h2.table.Table+getCheckForeignKeyConstraints() org.h2.engine.Database+getReferentialIntegrity() org.h2.engine.Database+getReferentialIntegrity() org.h2.table.Table+getConstraints() org.h2.table.Table+getConstraints() org.h2.constraint.Constraint+getConstraintType() org.h2.constraint.Constraint+getConstraintType() org.h2.constraint.ConstraintReferential+getRefTable() org.h2.constraint.ConstraintReferential+getRefTable(),org.h2.engine.DbObjectBase+database,678,18,1,,"@Override
    public boolean canTruncate() {
        if (getCheckForeignKeyConstraints() && database.getReferentialIntegrity()) {
            ArrayList<Constraint> constraints = getConstraints();
            if (constraints != null) {
                for (Constraint c : constraints) {
                    if (c.getConstraintType() != Constraint.Type.REFERENTIAL) {
                        continue;
                    }
                    ConstraintReferential ref = (ConstraintReferential) c;
                    if (ref.getRefTable() == this) {
                        return false;
                    }
                }
            }
        }
        return true;
    }",True
45,getTableType(),Method,,,,,85,4,1,,"@Override
    public TableType getTableType() {
        return TableType.TABLE;
    }",False
46,getMaxDataModificationId(),Method,,,,org.h2.table.PageStoreTable+lastModificationId,95,4,1,,"@Override
    public long getMaxDataModificationId() {
        return lastModificationId;
    }",False
47,getContainsLargeObject(),Method,,"org.h2.index.PageBtreeIndex+truncate(Session) org.h2.index.PageDataIndex+remove(Session,Row) org.h2.index.PageDataIndex+truncate(Session) org.h2.index.ScanIndex+truncate(Session)",,org.h2.table.PageStoreTable+containsLargeObject,83,3,1,,"public boolean getContainsLargeObject() {
        return containsLargeObject;
    }",True
48,getRowCountApproximation(),Method,,"org.h2.index.PageBtreeIndex+getRowCountApproximation() org.h2.index.PageDataIndex+getCost(Session,int[],TableFilter[],int,SortOrder,AllColumnsForPlan) org.h2.index.ScanIndex+getCost(Session,int[],TableFilter[],int,SortOrder,AllColumnsForPlan) org.h2.index.TreeIndex+getCost(Session,int[],TableFilter[],int,SortOrder,AllColumnsForPlan)",org.h2.index.Index+getRowCountApproximation() org.h2.index.Index+getRowCountApproximation(),org.h2.table.PageStoreTable+scanIndex,113,4,1,,"@Override
    public long getRowCountApproximation() {
        return scanIndex.getRowCountApproximation();
    }",False
49,getDiskSpaceUsed(),Method,,org.h2.index.PageBtreeIndex+getDiskSpaceUsed(),org.h2.index.Index+getDiskSpaceUsed() org.h2.index.Index+getDiskSpaceUsed(),org.h2.table.PageStoreTable+scanIndex,97,4,1,,"@Override
    public long getDiskSpaceUsed() {
        return scanIndex.getDiskSpaceUsed();
    }",False
50,setCompareMode(CompareMode),Method,,"org.h2.store.PageStore+addMeta(Row,Session,boolean)",,org.h2.table.Table+compareMode org.h2.table.Table+compareMode,99,3,1,,"public void setCompareMode(CompareMode compareMode) {
        this.compareMode = compareMode;
    }",False
51,isDeterministic(),Method,,,,,75,4,1,,"@Override
    public boolean isDeterministic() {
        return true;
    }",True
52,getRowIdColumn(),Method,,,"org.h2.table.Column+Column(String,int) org.h2.table.Column+setTable(Table,int) org.h2.table.Column+setTable(Table,int) org.h2.table.Column+setRowId(boolean) org.h2.table.Column+setRowId(boolean)",org.h2.table.PageStoreTable+rowIdColumn org.h2.table.PageStoreTable+rowIdColumn org.h2.table.Column+ROWID org.h2.value.Value+LONG org.h2.table.PageStoreTable+rowIdColumn org.h2.table.PageStoreTable+rowIdColumn org.h2.table.PageStoreTable+rowIdColumn,273,9,1,,"@Override
    public Column getRowIdColumn() {
        if (rowIdColumn == null) {
            rowIdColumn = new Column(Column.ROWID, Value.LONG);
            rowIdColumn.setTable(this, -1);
            rowIdColumn.setRowId(true);
        }
        return rowIdColumn;
    }",True
