index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,UNSET,Field,,,,,36,1,26,,private static final int UNSET = -1;,True
2,SIZE_MULTIPLIER,Field,,,,,50,1,26,,private static final int SIZE_MULTIPLIER = 1 << 1;,True
3,DISK_CACHE_STRATEGY,Field,,,,,54,1,26,,private static final int DISK_CACHE_STRATEGY = 1 << 2;,True
4,PRIORITY,Field,,,,,43,1,26,,private static final int PRIORITY = 1 << 3;,True
5,ERROR_PLACEHOLDER,Field,,,,,52,1,26,,private static final int ERROR_PLACEHOLDER = 1 << 4;,True
6,ERROR_ID,Field,,,,,43,1,26,,private static final int ERROR_ID = 1 << 5;,True
7,PLACEHOLDER,Field,,,,,46,1,26,,private static final int PLACEHOLDER = 1 << 6;,True
8,PLACEHOLDER_ID,Field,,,,,49,1,26,,private static final int PLACEHOLDER_ID = 1 << 7;,True
9,IS_CACHEABLE,Field,,,,,47,1,26,,private static final int IS_CACHEABLE = 1 << 8;,True
10,OVERRIDE,Field,,,,,43,1,26,,private static final int OVERRIDE = 1 << 9;,True
11,SIGNATURE,Field,,,,,45,1,26,,private static final int SIGNATURE = 1 << 10;,True
12,TRANSFORMATION,Field,,,,,50,1,26,,private static final int TRANSFORMATION = 1 << 11;,True
13,RESOURCE_CLASS,Field,,,,,50,1,26,,private static final int RESOURCE_CLASS = 1 << 12;,True
14,FALLBACK,Field,,,,,44,1,26,,private static final int FALLBACK = 1 << 13;,True
15,FALLBACK_ID,Field,,,,,47,1,26,,private static final int FALLBACK_ID = 1 << 14;,True
16,THEME,Field,,,,,41,1,26,,private static final int THEME = 1 << 15;,True
17,TRANSFORMATION_ALLOWED,Field,,,,,58,1,26,,private static final int TRANSFORMATION_ALLOWED = 1 << 16;,True
18,TRANSFORMATION_REQUIRED,Field,,,,,59,1,26,,private static final int TRANSFORMATION_REQUIRED = 1 << 17;,True
19,USE_UNLIMITED_SOURCE_GENERATORS_POOL,Field,,,,,72,1,26,,private static final int USE_UNLIMITED_SOURCE_GENERATORS_POOL = 1 << 18;,True
20,ONLY_RETRIEVE_FROM_CACHE,Field,,,,,60,1,26,,private static final int ONLY_RETRIEVE_FROM_CACHE = 1 << 19;,True
21,USE_ANIMATION_POOL,Field,,,,,54,1,26,,private static final int USE_ANIMATION_POOL = 1 << 20;,True
22,skipMemoryCacheTrueOptions,Field,,,,,69,2,10,,"@Nullable
  private static RequestOptions skipMemoryCacheTrueOptions;",False
23,skipMemoryCacheFalseOptions,Field,,,,,70,2,10,,"@Nullable
  private static RequestOptions skipMemoryCacheFalseOptions;",False
24,fitCenterOptions,Field,,,,,59,2,10,,"@Nullable
  private static RequestOptions fitCenterOptions;",False
25,centerInsideOptions,Field,,,,,62,2,10,,"@Nullable
  private static RequestOptions centerInsideOptions;",False
26,centerCropOptions,Field,,,,,60,2,10,,"@Nullable
  private static RequestOptions centerCropOptions;",False
27,circleCropOptions,Field,,,,,60,2,10,,"@Nullable
  private static RequestOptions circleCropOptions;",False
28,noTransformOptions,Field,,,,,61,2,10,,"@Nullable
  private static RequestOptions noTransformOptions;",False
29,noAnimationOptions,Field,,,,,61,2,10,,"@Nullable
  private static RequestOptions noAnimationOptions;",False
30,fields,Field,,,,,19,1,2,,private int fields;,True
31,sizeMultiplier,Field,sizeMultiplier(float),,,,34,1,2,,private float sizeMultiplier = 1f;,True
32,diskCacheStrategy,Field,diskCacheStrategy(DiskCacheStrategy),,,,85,2,2,,"@NonNull
  private DiskCacheStrategy diskCacheStrategy = DiskCacheStrategy.AUTOMATIC;",True
33,priority,Field,priority(Priority),,,,55,2,2,,"@NonNull
  private Priority priority = Priority.NORMAL;",True
34,errorPlaceholder,Field,error(Drawable) error(int),,,,46,2,2,,"@Nullable
  private Drawable errorPlaceholder;",True
35,errorId,Field,error(Drawable) error(int),,,,20,1,2,,private int errorId;,True
36,placeholderDrawable,Field,placeholder(Drawable),,,,49,2,2,,"@Nullable
  private Drawable placeholderDrawable;",True
37,placeholderId,Field,placeholder(int),,,,26,1,2,,private int placeholderId;,True
38,isCacheable,Field,skipMemoryCache(boolean),,,,35,1,2,,private boolean isCacheable = true;,True
39,overrideHeight,Field,"override(int,int)",,,,50,1,2,,private int overrideHeight = RequestOptions.UNSET;,True
40,overrideWidth,Field,"override(int,int)",,,,49,1,2,,private int overrideWidth = RequestOptions.UNSET;,True
41,signature,Field,signature(Key),,,,59,2,2,,"@NonNull
  private Key signature = EmptySignature.obtain();",True
42,isTransformationRequired,Field,,,,,41,1,2,,private boolean isTransformationRequired;,True
43,isTransformationAllowed,Field,,,,,47,1,2,,private boolean isTransformationAllowed = true;,True
44,fallbackDrawable,Field,fallback(Drawable),,,,46,2,2,,"@Nullable
  private Drawable fallbackDrawable;",True
45,fallbackId,Field,fallback(int),,,,23,1,2,,private int fallbackId;,True
46,options,Field,,,,,51,2,2,,"@NonNull
  private Options options = new Options();",True
47,transformations,Field,,,,,101,2,2,,"@NonNull
  private Map<Class<?>, Transformation<?>> transformations = new CachedHashCodeArrayMap<>();",True
48,resourceClass,Field,decode(Class<?>),,,,57,2,2,,"@NonNull
  private Class<?> resourceClass = Object.class;",True
49,isLocked,Field,,,,,25,1,2,,private boolean isLocked;,True
50,theme,Field,theme(Resources.Theme),,,,42,2,2,,"@Nullable
  private Resources.Theme theme;",True
51,isAutoCloneEnabled,Field,,,,,35,1,2,,private boolean isAutoCloneEnabled;,True
52,useUnlimitedSourceGeneratorsPool,Field,useUnlimitedSourceGeneratorsPool(boolean),,,,49,1,2,,private boolean useUnlimitedSourceGeneratorsPool;,True
53,onlyRetrieveFromCache,Field,onlyRetrieveFromCache(boolean),,,,38,1,2,,private boolean onlyRetrieveFromCache;,True
54,isScaleOnlyOrNoTransform,Field,,,,,48,1,2,,private boolean isScaleOnlyOrNoTransform = true;,True
55,useAnimationPool,Field,,,,,33,1,2,,private boolean useAnimationPool;,True
56,sizeMultiplierOf(float),Method,,,com.bumptech.glide.request.RequestOptions+sizeMultiplier(float) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+sizeMultiplier(float),,348,10,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #sizeMultiplier(float)} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #sizeMultiplier(float)} set.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions sizeMultiplierOf(
      @FloatRange(from = 0, to = 1) float sizeMultiplier) {
    return new RequestOptions().sizeMultiplier(sizeMultiplier);
  }",False
57,diskCacheStrategyOf(DiskCacheStrategy),Method,,,com.bumptech.glide.request.RequestOptions+diskCacheStrategy(DiskCacheStrategy) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+diskCacheStrategy(DiskCacheStrategy),,309,8,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #diskCacheStrategy(DiskCacheStrategy)} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #diskCacheStrategy(DiskCacheStrategy)} set.
   */
  @NonNull
  @CheckResult
  public static RequestOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy diskCacheStrategy) {
    return new RequestOptions().diskCacheStrategy(diskCacheStrategy);
  }",False
58,priorityOf(Priority),Method,,,com.bumptech.glide.request.RequestOptions+priority(Priority) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+priority(Priority),,297,9,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #priority(Priority)}} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #priority(Priority)}} set.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions priorityOf(@NonNull Priority priority) {
    return new RequestOptions().priority(priority);
  }",False
59,placeholderOf(Drawable),Method,,,com.bumptech.glide.request.RequestOptions+placeholder(Drawable) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+placeholder(Drawable),,262,8,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #placeholder(Drawable)} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #placeholder(Drawable)} set.
   */
  @NonNull
  @CheckResult
  public static RequestOptions placeholderOf(@Nullable Drawable placeholder) {
    return new RequestOptions().placeholder(placeholder);
  }",False
60,placeholderOf(int),Method,,,com.bumptech.glide.request.RequestOptions+placeholder(int) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+placeholder(int),,259,8,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #placeholder(int)} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #placeholder(int)} set.
   */
  @NonNull
  @CheckResult
  public static RequestOptions placeholderOf(@DrawableRes int placeholderId) {
    return new RequestOptions().placeholder(placeholderId);
  }",False
61,errorOf(Drawable),Method,,,com.bumptech.glide.request.RequestOptions+error(Drawable) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+error(Drawable),,248,8,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #error(Drawable)} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #error(Drawable)} set.
   */
  @NonNull
  @CheckResult
  public static RequestOptions errorOf(@Nullable Drawable errorDrawable) {
    return new RequestOptions().error(errorDrawable);
  }",False
62,errorOf(int),Method,,,com.bumptech.glide.request.RequestOptions+error(int) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+error(int),,230,8,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #error(int)}} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #error(int)}} set.
   */
  @NonNull
  @CheckResult
  public static RequestOptions errorOf(@DrawableRes int errorId) {
    return new RequestOptions().error(errorId);
  }",False
63,skipMemoryCacheOf(boolean),Method,,,com.bumptech.glide.request.RequestOptions+autoClone() com.bumptech.glide.request.RequestOptions+skipMemoryCache(boolean) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+skipMemoryCache(boolean) com.bumptech.glide.request.RequestOptions+autoClone() com.bumptech.glide.request.RequestOptions+autoClone() com.bumptech.glide.request.RequestOptions+skipMemoryCache(boolean) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+skipMemoryCache(boolean) com.bumptech.glide.request.RequestOptions+autoClone(),com.bumptech.glide.request.RequestOptions+skipMemoryCacheTrueOptions com.bumptech.glide.request.RequestOptions+skipMemoryCacheTrueOptions com.bumptech.glide.request.RequestOptions+skipMemoryCacheTrueOptions com.bumptech.glide.request.RequestOptions+skipMemoryCacheFalseOptions com.bumptech.glide.request.RequestOptions+skipMemoryCacheFalseOptions com.bumptech.glide.request.RequestOptions+skipMemoryCacheFalseOptions,634,18,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #skipMemoryCache(boolean)} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #skipMemoryCache(boolean)} set.
   */
  @NonNull
  @CheckResult
  public static RequestOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    if (skipMemoryCache) {
      if (skipMemoryCacheTrueOptions == null) {
        skipMemoryCacheTrueOptions = new RequestOptions().skipMemoryCache(true).autoClone();
      }
      return skipMemoryCacheTrueOptions;
    } else {
      if (skipMemoryCacheFalseOptions == null) {
        skipMemoryCacheFalseOptions = new RequestOptions().skipMemoryCache(false).autoClone();
      }
      return skipMemoryCacheFalseOptions;
    }
  }",False
64,"overrideOf(int,int)",Method,overrideOf(int),,"com.bumptech.glide.request.RequestOptions+override(int,int) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+override(int,int)",,350,11,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #override(int,int)}} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #override(int, int)}} set.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions overrideOf(
      @IntRange(from = 0) int width,
      @IntRange(from = 0) int height) {
    return new RequestOptions().override(width, height);
  }",False
65,overrideOf(int),Method,,,"com.bumptech.glide.request.RequestOptions+overrideOf(int,int) com.bumptech.glide.request.RequestOptions+overrideOf(int,int)",,330,10,9,"/** 
 * Returns a  {@link RequestOptions} with {@link #override(int,int)} set where both the width andheight are the given size.
 */
","/**
   * Returns a {@link RequestOptions} with {@link #override(int, int)} set where both the width and
   * height are the given size.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions overrideOf(@IntRange(from = 0) int size) {
    return overrideOf(size, size);
  }",False
66,signatureOf(Key),Method,,,com.bumptech.glide.request.RequestOptions+signature(Key) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+signature(Key),,236,8,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #signature} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #signature} set.
   */
  @NonNull
  @CheckResult
  public static RequestOptions signatureOf(@NonNull Key signature) {
    return new RequestOptions().signature(signature);
  }",False
67,fitCenterTransform(),Method,,,com.bumptech.glide.request.RequestOptions+autoClone() com.bumptech.glide.request.RequestOptions+fitCenter() com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+fitCenter() com.bumptech.glide.request.RequestOptions+autoClone(),com.bumptech.glide.request.RequestOptions+fitCenterOptions com.bumptech.glide.request.RequestOptions+fitCenterOptions com.bumptech.glide.request.RequestOptions+fitCenterOptions,333,13,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #fitCenter()} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #fitCenter()} set.
   */
  @NonNull
  @CheckResult
  public static RequestOptions fitCenterTransform() {
    if (fitCenterOptions == null) {
      fitCenterOptions = new RequestOptions()
          .fitCenter()
          .autoClone();
    }
    return fitCenterOptions;
  }",False
68,centerInsideTransform(),Method,,,com.bumptech.glide.request.RequestOptions+autoClone() com.bumptech.glide.request.RequestOptions+centerInside() com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+centerInside() com.bumptech.glide.request.RequestOptions+autoClone(),com.bumptech.glide.request.RequestOptions+centerInsideOptions com.bumptech.glide.request.RequestOptions+centerInsideOptions com.bumptech.glide.request.RequestOptions+centerInsideOptions,409,14,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #centerInside()} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #centerInside()} set.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions centerInsideTransform() {
    if (centerInsideOptions == null) {
      centerInsideOptions = new RequestOptions()
              .centerInside()
              .autoClone();
    }
    return centerInsideOptions;
  }",False
69,centerCropTransform(),Method,,,com.bumptech.glide.request.RequestOptions+autoClone() com.bumptech.glide.request.RequestOptions+centerCrop() com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+centerCrop() com.bumptech.glide.request.RequestOptions+autoClone(),com.bumptech.glide.request.RequestOptions+centerCropOptions com.bumptech.glide.request.RequestOptions+centerCropOptions com.bumptech.glide.request.RequestOptions+centerCropOptions,389,14,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #centerCrop()} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #centerCrop()} set.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions centerCropTransform() {
    if (centerCropOptions == null) {
      centerCropOptions = new RequestOptions()
          .centerCrop()
          .autoClone();
    }
    return centerCropOptions;
  }",False
70,circleCropTransform(),Method,,,com.bumptech.glide.request.RequestOptions+autoClone() com.bumptech.glide.request.RequestOptions+circleCrop() com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+circleCrop() com.bumptech.glide.request.RequestOptions+autoClone(),com.bumptech.glide.request.RequestOptions+circleCropOptions com.bumptech.glide.request.RequestOptions+circleCropOptions com.bumptech.glide.request.RequestOptions+circleCropOptions,403,14,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link RequestOptions#circleCrop()} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link RequestOptions#circleCrop()} set.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions circleCropTransform() {
    if (circleCropOptions == null) {
      circleCropOptions = new RequestOptions()
          .circleCrop()
          .autoClone();
    }
    return circleCropOptions;
  }",False
71,bitmapTransform(Transformation<Bitmap>),Method,,,com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>),,335,9,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #transform(Transformation)} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #transform(Transformation)} set.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
    return new RequestOptions().transform(transformation);
  }",False
72,noTransformation(),Method,,,com.bumptech.glide.request.RequestOptions+autoClone() com.bumptech.glide.request.RequestOptions+dontTransform() com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+dontTransform() com.bumptech.glide.request.RequestOptions+autoClone(),com.bumptech.glide.request.RequestOptions+noTransformOptions com.bumptech.glide.request.RequestOptions+noTransformOptions com.bumptech.glide.request.RequestOptions+noTransformOptions,381,14,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #dontTransform()} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #dontTransform()} set.
   */
  @SuppressWarnings(""WeakerAccess"")
  @NonNull
  @CheckResult
  public static RequestOptions noTransformation() {
    if (noTransformOptions == null) {
      noTransformOptions = new RequestOptions()
          .dontTransform()
          .autoClone();
    }
    return noTransformOptions;
  }",False
73,"option(Option<T>,T)",Method,,,"com.bumptech.glide.request.RequestOptions+set(Option<T>,T) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+set(Option<T>,T)",,298,9,9,"/** 
 * Returns a  {@link RequestOptions} object with the given {@link Option} set via{@link #set(Option,Object)}.
 */
","/**
   * Returns a {@link RequestOptions} object with the given {@link Option} set via
   * {@link #set(Option, Object)}.
   */
  @NonNull
  @CheckResult
  public static <T> RequestOptions option(@NonNull Option<T> option, @NonNull T value) {
    return new RequestOptions().set(option, value);
  }",False
74,decodeTypeOf(Class<?>),Method,,,com.bumptech.glide.request.RequestOptions+decode(Class<?>) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+decode(Class<?>),,251,8,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #decode(Class)} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #decode(Class)} set.
   */
  @NonNull
  @CheckResult
  public static RequestOptions decodeTypeOf(@NonNull Class<?> resourceClass) {
    return new RequestOptions().decode(resourceClass);
  }",False
75,formatOf(DecodeFormat),Method,,,com.bumptech.glide.request.RequestOptions+format(DecodeFormat) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+format(DecodeFormat),,294,9,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #format(DecodeFormat)} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #format(DecodeFormat)} set.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions formatOf(@NonNull DecodeFormat format) {
    return new RequestOptions().format(format);
  }",False
76,frameOf(long),Method,,,com.bumptech.glide.request.RequestOptions+frame(long) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+frame(long),,304,9,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #frame(long)} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #frame(long)} set.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions frameOf(@IntRange(from = 0) long frameTimeMicros) {
    return new RequestOptions().frame(frameTimeMicros);
  }",False
77,downsampleOf(DownsampleStrategy),Method,,,com.bumptech.glide.request.RequestOptions+downsample(DownsampleStrategy) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+downsample(DownsampleStrategy),,322,9,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #downsample(DownsampleStrategy)} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #downsample(DownsampleStrategy)} set.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
    return new RequestOptions().downsample(strategy);
  }",False
78,timeoutOf(int),Method,,,com.bumptech.glide.request.RequestOptions+timeout(int) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+timeout(int),,242,8,9,"/** 
 * Returns a  {@link RequestOptions} object with {@link #timeout(int)} set.
 */
","/**
   * Returns a {@link RequestOptions} object with {@link #timeout(int)} set.
   */
  @NonNull
  @CheckResult
  public static RequestOptions timeoutOf(@IntRange(from = 0) int timeout) {
    return new RequestOptions().timeout(timeout);
  }",False
79,encodeQualityOf(int),Method,,,com.bumptech.glide.request.RequestOptions+encodeQuality(int) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+encodeQuality(int),,371,10,9,"/** 
 * Returns a  {@link com.bumptech.glide.request.RequestOptions} with {@link #encodeQuality(int)} called with the given quality.
 */
","/**
   * Returns a {@link com.bumptech.glide.request.RequestOptions} with {@link
   * #encodeQuality(int)} called with the given quality.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions encodeQualityOf(@IntRange(from = 0, to = 100) int quality) {
    return new RequestOptions().encodeQuality(quality);
  }",False
80,encodeFormatOf(Bitmap.CompressFormat),Method,,,com.bumptech.glide.request.RequestOptions+encodeFormat(CompressFormat) com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+encodeFormat(CompressFormat),,397,10,9,"/** 
 * Returns a  {@link com.bumptech.glide.request.RequestOptions} with {@link #encodeFormat(android.graphics.Bitmap.CompressFormat)} called with the given format.
 */
","/**
   * Returns a {@link com.bumptech.glide.request.RequestOptions} with {@link
   * #encodeFormat(android.graphics.Bitmap.CompressFormat)} called with the given format.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
    return new RequestOptions().encodeFormat(format);
  }",False
81,noAnimation(),Method,,,com.bumptech.glide.request.RequestOptions+autoClone() com.bumptech.glide.request.RequestOptions+dontAnimate() com.bumptech.glide.request.RequestOptions+RequestOptions() com.bumptech.glide.request.RequestOptions+dontAnimate() com.bumptech.glide.request.RequestOptions+autoClone(),com.bumptech.glide.request.RequestOptions+noAnimationOptions com.bumptech.glide.request.RequestOptions+noAnimationOptions com.bumptech.glide.request.RequestOptions+noAnimationOptions,418,15,9,"/** 
 * Returns a new  {@link com.bumptech.glide.request.RequestOptions} with {@link #dontAnimate()}called.
 */
","/**
   * Returns a new {@link com.bumptech.glide.request.RequestOptions} with {@link #dontAnimate()}
   * called.
   */
  @SuppressWarnings(""WeakerAccess"") // Public API
  @NonNull
  @CheckResult
  public static RequestOptions noAnimation() {
    if (noAnimationOptions == null) {
      noAnimationOptions = new RequestOptions()
          .dontAnimate()
          .autoClone();
    }
    return noAnimationOptions;
  }",False
82,"isSet(int,int)",Method,apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) apply(RequestOptions) isSet(int),,,,89,3,10,,"private static boolean isSet(int fields, int flag) {
    return (fields & flag) != 0;
  }",True
83,sizeMultiplier(float),Method,sizeMultiplierOf(float) sizeMultiplier(float),"com.bumptech.glide.RequestBuilder+buildThumbnailRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions) com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode()",com.bumptech.glide.request.RequestOptions+sizeMultiplier(float) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+sizeMultiplier(float) java.lang.IllegalArgumentException+IllegalArgumentException(String) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+sizeMultiplier com.bumptech.glide.request.RequestOptions+sizeMultiplier com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+SIZE_MULTIPLIER,983,25,1,"/** 
 * Applies a multiplier to the  {@link com.bumptech.glide.request.target.Target}'s size before loading the resource. Useful for loading thumbnails or trying to avoid loading huge resources (particularly  {@link Bitmap}s on devices with overly dense screens.
 * @param sizeMultiplier The multiplier to apply to the{@link com.bumptech.glide.request.target.Target}'s dimensions when loading the resource.
 * @return This request builder.
 */
","/**
   * Applies a multiplier to the {@link com.bumptech.glide.request.target.Target}'s size before
   * loading the resource. Useful for loading thumbnails or trying to avoid loading huge resources
   * (particularly {@link Bitmap}s on devices with overly dense screens.
   *
   * @param sizeMultiplier The multiplier to apply to the
   *                       {@link com.bumptech.glide.request.target.Target}'s dimensions when
   *                       loading the resource.
   * @return This request builder.
   */
  @NonNull
  @CheckResult
  public RequestOptions sizeMultiplier(@FloatRange(from = 0, to = 1) float sizeMultiplier) {
    if (isAutoCloneEnabled) {
      return clone().sizeMultiplier(sizeMultiplier);
    }

    if (sizeMultiplier < 0f || sizeMultiplier > 1f) {
      throw new IllegalArgumentException(""sizeMultiplier must be between 0 and 1"");
    }
    this.sizeMultiplier = sizeMultiplier;
    fields |= SIZE_MULTIPLIER;

    return selfOrThrowIfLocked();
  }",True
84,useUnlimitedSourceGeneratorsPool(boolean),Method,useUnlimitedSourceGeneratorsPool(boolean),com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),com.bumptech.glide.request.RequestOptions+useUnlimitedSourceGeneratorsPool(boolean) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+useUnlimitedSourceGeneratorsPool(boolean) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+useUnlimitedSourceGeneratorsPool com.bumptech.glide.request.RequestOptions+useUnlimitedSourceGeneratorsPool com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+USE_UNLIMITED_SOURCE_GENERATORS_POOL,948,24,1,"/** 
 * If set to  {@code true}, uses a cached unlimited  {@link java.util.concurrent.Executor} to runthe request. <p>This method should <em>ONLY</em> be used when a Glide load is started recursively on one of Glide's threads as part of another request. Using this method in other scenarios can lead to excessive memory usage and OOMs and/or a significant decrease in performance across an application. <p>If both this method and  {@link #useAnimationPool(boolean)} are set, this method will bepreferred and  {@link #useAnimationPool(boolean)} will be ignored.
 */
","/**
   * If set to {@code true}, uses a cached unlimited {@link java.util.concurrent.Executor} to run
   * the request.
   *
   * <p>This method should <em>ONLY</em> be used when a Glide load is started recursively on one
   * of Glide's threads as part of another request. Using this method in other scenarios can lead
   * to excessive memory usage and OOMs and/or a significant decrease in performance across an
   * application.
   *
   * <p>If both this method and {@link #useAnimationPool(boolean)} are set, this method will be
   * preferred and {@link #useAnimationPool(boolean)} will be ignored.
   */
  @NonNull
  @CheckResult
  public RequestOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
    if (isAutoCloneEnabled) {
      return clone().useUnlimitedSourceGeneratorsPool(flag);
    }

    this.useUnlimitedSourceGeneratorsPool = flag;
    fields |= USE_UNLIMITED_SOURCE_GENERATORS_POOL;

    return selfOrThrowIfLocked();
  }",True
85,useAnimationPool(boolean),Method,useAnimationPool(boolean),,com.bumptech.glide.request.RequestOptions+useAnimationPool(boolean) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+useAnimationPool(boolean) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+useAnimationPool com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+USE_ANIMATION_POOL,1014,25,1,"/** 
 * If set to  {@code true}, uses a special  {@link java.util.concurrent.Executor} that is usedexclusively for decoding frames of animated resources, like GIFs. <p>The animation executor disallows network operations and must not be used for loads that may load remote data. The animation executor has fewer threads available to it than Glide's normal executors and is only useful as a way of avoiding blocking on longer and more expensive reads for critical requests like those in an animating GIF. <p>If both  {@link #useUnlimitedSourceGeneratorsPool(boolean)} and this method are set,{@link #useUnlimitedSourceGeneratorsPool(boolean)} will be preferred and this method will beignored.
 */
","/**
   * If set to {@code true}, uses a special {@link java.util.concurrent.Executor} that is used
   * exclusively for decoding frames of animated resources, like GIFs.
   *
   * <p>The animation executor disallows network operations and must not be used for loads that
   * may load remote data. The animation executor has fewer threads available to it than Glide's
   * normal executors and is only useful as a way of avoiding blocking on longer and more expensive
   * reads for critical requests like those in an animating GIF.
   *
   * <p>If both {@link #useUnlimitedSourceGeneratorsPool(boolean)} and this method are set,
   * {@link #useUnlimitedSourceGeneratorsPool(boolean)} will be preferred and this method will be
   * ignored.
   */
  @NonNull
  @CheckResult
  public RequestOptions useAnimationPool(boolean flag) {
    if (isAutoCloneEnabled) {
      return clone().useAnimationPool(flag);
    }

    useAnimationPool = flag;
    fields |= USE_ANIMATION_POOL;

    return selfOrThrowIfLocked();
  }",True
86,onlyRetrieveFromCache(boolean),Method,onlyRetrieveFromCache(boolean),com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),com.bumptech.glide.request.RequestOptions+onlyRetrieveFromCache(boolean) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+onlyRetrieveFromCache(boolean) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+onlyRetrieveFromCache com.bumptech.glide.request.RequestOptions+onlyRetrieveFromCache com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+ONLY_RETRIEVE_FROM_CACHE,406,16,1,"/** 
 * If set to true, will only load an item if found in the cache, and will not fetch from source.
 */
","/**
   *
   * If set to true, will only load an item if found in the cache, and will not fetch from source.
   */
  @NonNull
  @CheckResult
  public RequestOptions onlyRetrieveFromCache(boolean flag) {
    if (isAutoCloneEnabled) {
      return clone().onlyRetrieveFromCache(flag);
    }

    this.onlyRetrieveFromCache = flag;
    fields |= ONLY_RETRIEVE_FROM_CACHE;

    return selfOrThrowIfLocked();
  }",True
87,diskCacheStrategy(DiskCacheStrategy),Method,diskCacheStrategyOf(DiskCacheStrategy) diskCacheStrategy(DiskCacheStrategy),com.bumptech.glide.request.RequestOptionsTest+isDiskCacheStrategySet_withDiskCacheStrategyDefault_isTrue() com.bumptech.glide.request.RequestOptionsTest+isDiskCacheStrategySet_withDiskCacheStrategyNonDefault_isTrue() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),com.bumptech.glide.request.RequestOptions+diskCacheStrategy(DiskCacheStrategy) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+diskCacheStrategy(DiskCacheStrategy) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+diskCacheStrategy com.bumptech.glide.request.RequestOptions+diskCacheStrategy com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+DISK_CACHE_STRATEGY,917,25,1,"/** 
 * Sets the  {@link DiskCacheStrategy} to use for this load.<p> Defaults to  {@link DiskCacheStrategy#AUTOMATIC}. </p> <p> For most applications  {@link DiskCacheStrategy#RESOURCE} isideal. Applications that use the same resource multiple times in multiple sizes and are willing to trade off some speed and disk space in return for lower bandwidth usage may want to consider using  {@link DiskCacheStrategy#DATA} or{@link DiskCacheStrategy#ALL}. </p>
 * @param strategy The strategy to use.
 * @return This request builder.
 */
","/**
   * Sets the {@link DiskCacheStrategy} to use for this load.
   *
   * <p> Defaults to {@link DiskCacheStrategy#AUTOMATIC}. </p>
   *
   * <p> For most applications {@link DiskCacheStrategy#RESOURCE} is
   * ideal. Applications that use the same resource multiple times in multiple sizes and are willing
   * to trade off some speed and disk space in return for lower bandwidth usage may want to consider
   * using {@link DiskCacheStrategy#DATA} or
   * {@link DiskCacheStrategy#ALL}. </p>
   *
   * @param strategy The strategy to use.
   * @return This request builder.
   */
  @NonNull
  @CheckResult
  public RequestOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
    if (isAutoCloneEnabled) {
      return clone().diskCacheStrategy(strategy);
    }
    this.diskCacheStrategy = Preconditions.checkNotNull(strategy);
    fields |= DISK_CACHE_STRATEGY;

    return selfOrThrowIfLocked();
  }",True
88,priority(Priority),Method,priorityOf(Priority) priority(Priority),com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),com.bumptech.glide.request.RequestOptions+priority(Priority) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+priority(Priority) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+priority com.bumptech.glide.request.RequestOptions+priority com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+PRIORITY,408,18,1,"/** 
 * Sets the priority for this load.
 * @param priority A priority.
 * @return This request builder.
 */
","/**
   * Sets the priority for this load.
   *
   * @param priority A priority.
   * @return This request builder.
   */
  @NonNull
  @CheckResult
  public RequestOptions priority(@NonNull Priority priority) {
    if (isAutoCloneEnabled) {
      return clone().priority(priority);
    }

    this.priority = Preconditions.checkNotNull(priority);
    fields |= PRIORITY;

    return selfOrThrowIfLocked();
  }",True
89,placeholder(Drawable),Method,placeholderOf(Drawable) placeholder(Drawable),com.bumptech.glide.request.RequestOptionsTest+getPlaceholder_afterSettingPlaceholderId_returnsNul() com.bumptech.glide.request.RequestOptionsTest+getPlaceholder_afterApplyingOptionsWithPlaceholderId_returnsNull() com.bumptech.glide.request.RequestOptionsTest+getPlaceholder_afterApplyingOptionsWithPlaceholderId_returnsNull() com.bumptech.glide.request.RequestOptionsTest+getPlaceholder_afterApplyingOptionsWithPlaceholderDrawable_returnsNewDrawable() com.bumptech.glide.request.RequestOptionsTest+getPlaceholder_afterApplyingOptionsWithPlaceholderDrawable_returnsNewDrawable() com.bumptech.glide.request.RequestOptionsTest+placeholderIdFlag_afterApplyingIdViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+placeholderIdFlag_afterApplyingIdViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+getPlaceholderId_afterSettingPlaceholderDrawable_returnsZero() com.bumptech.glide.request.RequestOptionsTest+getPlaceholderId_afterApplyingOptionsWithPlaceholderDrawable_returnsZero() com.bumptech.glide.request.RequestOptionsTest+getPlaceholderId_afterApplyingOptionsWithPlaceholderDrawable_returnsZero() com.bumptech.glide.request.RequestOptionsTest+getPlaceholderId_afterApplyingOptionsWithId_returnsNewId() com.bumptech.glide.request.RequestOptionsTest+placeholderFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+placeholderFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),com.bumptech.glide.request.RequestOptions+placeholder(Drawable) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+placeholder(Drawable) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+placeholderDrawable com.bumptech.glide.request.RequestOptions+placeholderDrawable com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+PLACEHOLDER com.bumptech.glide.request.RequestOptions+placeholderId com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+PLACEHOLDER_ID,604,23,1,"/** 
 * Sets an  {@link Drawable} to display while a resource is loading.<p>Replaces any previous calls to this method or  {@link #placeholder(int)}.
 * @param drawable The drawable to display as a placeholder.
 * @return This request builder.
 */
","/**
   * Sets an {@link Drawable} to display while a resource is loading.
   *
   * <p>Replaces any previous calls to this method or {@link #placeholder(int)}.
   *
   * @param drawable The drawable to display as a placeholder.
   * @return This request builder.
   */
  @NonNull
  @CheckResult
  public RequestOptions placeholder(@Nullable Drawable drawable) {
    if (isAutoCloneEnabled) {
      return clone().placeholder(drawable);
    }

    this.placeholderDrawable = drawable;
    fields |= PLACEHOLDER;

    placeholderId = 0;
    fields &= ~PLACEHOLDER_ID;

    return selfOrThrowIfLocked();
  }",True
90,placeholder(int),Method,placeholderOf(int) placeholder(int),com.bumptech.glide.request.RequestOptionsTest+getPlaceholderId_afterApplyingOptionsWithId_returnsNewId() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),com.bumptech.glide.request.RequestOptions+placeholder(int) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+placeholder(int) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+placeholderId com.bumptech.glide.request.RequestOptions+placeholderId com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+PLACEHOLDER_ID com.bumptech.glide.request.RequestOptions+placeholderDrawable com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+PLACEHOLDER,662,24,1,"/** 
 * Sets an Android resource id for a  {@link Drawable} resource todisplay while a resource is loading. <p>Replaces any previous calls to this method or  {@link #placeholder(Drawable)}
 * @param resourceId The id of the resource to use as a placeholder
 * @return This request builder.
 */
","/**
   * Sets an Android resource id for a {@link Drawable} resource to
   * display while a resource is loading.
   *
   * <p>Replaces any previous calls to this method or {@link #placeholder(Drawable)}
   *
   * @param resourceId The id of the resource to use as a placeholder
   * @return This request builder.
   */
  @NonNull
  @CheckResult
  public RequestOptions placeholder(@DrawableRes int resourceId) {
    if (isAutoCloneEnabled) {
      return clone().placeholder(resourceId);
    }

    this.placeholderId = resourceId;
    fields |= PLACEHOLDER_ID;

    placeholderDrawable = null;
    fields &= ~PLACEHOLDER;

    return selfOrThrowIfLocked();
  }",True
91,fallback(Drawable),Method,fallback(Drawable),com.bumptech.glide.request.RequestOptionsTest+getFallback_afterSettingFallbackId_returnsNull() com.bumptech.glide.request.RequestOptionsTest+getFallback_afterApplyingOptionsWithFallbackId_returnsNull() com.bumptech.glide.request.RequestOptionsTest+getFallback_afterApplyingOptionsWithFallbackId_returnsNull() com.bumptech.glide.request.RequestOptionsTest+getFallback_afterApplyingOptionsWithFallbackDrawable_returnsNewDrawable() com.bumptech.glide.request.RequestOptionsTest+fallbackFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+fallbackFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+getFallbackId_afterSettingFallbackDrawable_returnsZero() com.bumptech.glide.request.RequestOptionsTest+getFallbackId_afterApplyingOptionsWithFallbackDrawable_returnsZero() com.bumptech.glide.request.RequestOptionsTest+getFallbackId_afterApplyingOptionsWithFallbackDrawable_returnsZero() com.bumptech.glide.request.RequestOptionsTest+getFallbackId_afterApplyingOptionsWithFallbackId_returnsNewFallbackId() com.bumptech.glide.request.RequestOptionsTest+getFallbackId_afterApplyingOptionsWithFallbackId_returnsNewFallbackId() com.bumptech.glide.request.RequestOptionsTest+fallbackIdFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+fallbackIdFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),com.bumptech.glide.request.RequestOptions+fallback(Drawable) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+fallback(Drawable) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+fallbackDrawable com.bumptech.glide.request.RequestOptions+fallbackDrawable com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+FALLBACK com.bumptech.glide.request.RequestOptions+fallbackId com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+FALLBACK_ID,895,30,1,"/** 
 * Sets an  {@link Drawable} to display if the model provided to{@link com.bumptech.glide.RequestBuilder#load(Object)} is {@code null}. <p> If a fallback is not set, null models will cause the error drawable to be displayed. If the error drawable is not set, the placeholder will be displayed. <p>Replaces any previous calls to this method or  {@link #fallback(int)}.
 * @see #placeholder(Drawable)
 * @see #placeholder(int)
 * @param drawable The drawable to display as a placeholder.
 * @return This request builder.
 */
","/**
   * Sets an {@link Drawable} to display if the model provided to
   * {@link com.bumptech.glide.RequestBuilder#load(Object)} is {@code null}.
   *
   * <p> If a fallback is not set, null models will cause the error drawable to be displayed. If the
   * error drawable is not set, the placeholder will be displayed.
   *
   * <p>Replaces any previous calls to this method or {@link #fallback(int)}.
   *
   * @see #placeholder(Drawable)
   * @see #placeholder(int)
   *
   * @param drawable The drawable to display as a placeholder.
   * @return This request builder.
   */
  @NonNull
  @CheckResult
  public RequestOptions fallback(@Nullable Drawable drawable) {
    if (isAutoCloneEnabled) {
      return clone().fallback(drawable);
    }

    this.fallbackDrawable = drawable;
    fields |= FALLBACK;

    fallbackId = 0;
    fields &= ~FALLBACK_ID;

    return selfOrThrowIfLocked();
  }",True
92,fallback(int),Method,fallback(int),com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),com.bumptech.glide.request.RequestOptions+fallback(int) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+fallback(int) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+fallbackId com.bumptech.glide.request.RequestOptions+fallbackId com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+FALLBACK_ID com.bumptech.glide.request.RequestOptions+fallbackDrawable com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+FALLBACK,903,30,1,"/** 
 * Sets a resource to display if the model provided to {@link com.bumptech.glide.RequestBuilder#load(Object)} is {@code null}. <p> If a fallback is not set, null models will cause the error drawable to be displayed. If the error drawable is not set, the placeholder will be displayed. <p>Replaces any previous calls to this method or  {@link #fallback(Drawable)}.
 * @see #placeholder(Drawable)
 * @see #placeholder(int)
 * @param resourceId The id of the resource to use as a fallback.
 * @return This request builder.
 */
","/**
   * Sets a resource to display if the model provided to
   * {@link com.bumptech.glide.RequestBuilder#load(Object)} is {@code null}.
   *
   * <p> If a fallback is not set, null models will cause the error drawable to be displayed. If
   * the error drawable is not set, the placeholder will be displayed.
   *
   * <p>Replaces any previous calls to this method or {@link #fallback(Drawable)}.
   *
   * @see #placeholder(Drawable)
   * @see #placeholder(int)
   *
   * @param resourceId The id of the resource to use as a fallback.
   * @return This request builder.
   */
  @NonNull
  @CheckResult
  public RequestOptions fallback(@DrawableRes int resourceId) {
    if (isAutoCloneEnabled) {
      return clone().fallback(resourceId);
    }

    this.fallbackId = resourceId;
    fields |= FALLBACK_ID;

    fallbackDrawable = null;
    fields &= ~FALLBACK;

    return selfOrThrowIfLocked();
  }",True
93,error(Drawable),Method,errorOf(Drawable) error(Drawable),com.bumptech.glide.request.RequestOptionsTest+getError_afterSettingErrorId_returnsNull() com.bumptech.glide.request.RequestOptionsTest+getError_afterApplyingOptionsWithErrorId_returnsNull() com.bumptech.glide.request.RequestOptionsTest+getError_afterApplyingOptionsWithErrorId_returnsNull() com.bumptech.glide.request.RequestOptionsTest+getError_afterApplyingOptionsWithErrorDrawable_returnsNewErrorDrawable() com.bumptech.glide.request.RequestOptionsTest+getError_afterApplyingOptionsWithErrorDrawable_returnsNewErrorDrawable() com.bumptech.glide.request.RequestOptionsTest+errorFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+errorFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+getErrorId_afterSettingErrorDrawable_returnsZero() com.bumptech.glide.request.RequestOptionsTest+getErrorId_afterApplyingOptionsWithErrorDrawable_returnsZero() com.bumptech.glide.request.RequestOptionsTest+getErrorId_afterApplyingOptionsWithErrorDrawable_returnsZero() com.bumptech.glide.request.RequestOptionsTest+getErrorId_afterApplyingOptionsWithErrorId_returnsNewErrorId() com.bumptech.glide.request.RequestOptionsTest+getErrorId_afterApplyingOptionsWithErrorId_returnsNewErrorId() com.bumptech.glide.request.RequestOptionsTest+errorIdFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+errorIdFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.SingleRequestTest+SingleRequestBuilder.build(),com.bumptech.glide.request.RequestOptions+error(Drawable) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+error(Drawable) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+errorPlaceholder com.bumptech.glide.request.RequestOptions+errorPlaceholder com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+ERROR_PLACEHOLDER com.bumptech.glide.request.RequestOptions+errorId com.bumptech.glide.request.RequestOptions+errorId com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+ERROR_ID,551,23,1,"/** 
 * Sets a  {@link Drawable} to display if a load fails.<p>Replaces any previous calls to this method or  {@link #error(int)}
 * @param drawable The drawable to display.
 * @return This request builder.
 */
","/**
   * Sets a {@link Drawable} to display if a load fails.
   *
   * <p>Replaces any previous calls to this method or {@link #error(int)}
   *
   * @param drawable The drawable to display.
   * @return This request builder.
   */
  @NonNull
  @CheckResult
  public RequestOptions error(@Nullable Drawable drawable) {
    if (isAutoCloneEnabled) {
      return clone().error(drawable);
    }

    this.errorPlaceholder = drawable;
    fields |= ERROR_PLACEHOLDER;

    this.errorId = 0;
    fields &= ~ERROR_ID;

    return selfOrThrowIfLocked();
  }",True
94,error(int),Method,errorOf(int) error(int),com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),com.bumptech.glide.request.RequestOptions+error(int) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+error(int) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+errorId com.bumptech.glide.request.RequestOptions+errorId com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+ERROR_ID com.bumptech.glide.request.RequestOptions+errorPlaceholder com.bumptech.glide.request.RequestOptions+errorPlaceholder com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+ERROR_PLACEHOLDER,579,22,1,"/** 
 * Sets a resource to display if a load fails. <p>Replaces any previous calls to this method or  {@link #error(Drawable)}
 * @param resourceId The id of the resource to use as a placeholder.
 * @return This request builder.
 */
","/**
   * Sets a resource to display if a load fails.
   *
   * <p>Replaces any previous calls to this method or {@link #error(Drawable)}
   *
   * @param resourceId The id of the resource to use as a placeholder.
   * @return This request builder.
   */
  @NonNull
  @CheckResult
  public RequestOptions error(@DrawableRes int resourceId) {
    if (isAutoCloneEnabled) {
      return clone().error(resourceId);
    }
    this.errorId = resourceId;
    fields |= ERROR_ID;

    this.errorPlaceholder = null;
    fields &= ~ERROR_PLACEHOLDER;

    return selfOrThrowIfLocked();
  }",True
95,theme(Resources.Theme),Method,,,com.bumptech.glide.request.RequestOptions+theme(Theme) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+theme(Theme) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+theme com.bumptech.glide.request.RequestOptions+theme com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+THEME,1245,30,1,"/** 
 * Sets the  {@link android.content.res.Resources.Theme} to apply when loading {@link Drawable}s for resource ids provided via  {@link #error(int)},  {@link #placeholder(int)}, and {@link #fallback(Drawable)}. <p>The theme is <em>NOT</em> applied in the decoder that will attempt to decode a given resource id model on Glide's background threads. The theme is used exclusively on the main thread to obtain placeholder/error/fallback drawables to avoid leaking Activities. <p>If the  {@link android.content.Context} of the {@link android.app.Fragment} or{@link android.app.Activity} used to start this load has a different{@link android.content.res.Resources.Theme}, the  {@link android.content.res.Resources.Theme}provided here will override the  {@link android.content.res.Resources.Theme} of the{@link android.content.Context}.
 * @param theme The theme to use when loading Drawables.
 * @return this request builder.
 */
","/**
   * Sets the {@link android.content.res.Resources.Theme} to apply when loading {@link Drawable}s
   * for resource ids provided via {@link #error(int)}, {@link #placeholder(int)}, and
   * {@link #fallback(Drawable)}.
   *
   * <p>The theme is <em>NOT</em> applied in the decoder that will attempt to decode a given
   * resource id model on Glide's background threads. The theme is used exclusively on the main
   * thread to obtain placeholder/error/fallback drawables to avoid leaking Activities.
   *
   * <p>If the {@link android.content.Context} of the {@link android.app.Fragment} or
   * {@link android.app.Activity} used to start this load has a different
   * {@link android.content.res.Resources.Theme}, the {@link android.content.res.Resources.Theme}
   * provided here will override the {@link android.content.res.Resources.Theme} of the
   * {@link android.content.Context}.
   *
   * @param theme The theme to use when loading Drawables.
   * @return this request builder.
   */
  @NonNull
  @CheckResult
  public RequestOptions theme(@Nullable Resources.Theme theme) {
    if (isAutoCloneEnabled) {
      return clone().theme(theme);
    }

    this.theme = theme;
    fields |= THEME;

    return selfOrThrowIfLocked();
  }",True
96,skipMemoryCache(boolean),Method,skipMemoryCacheOf(boolean) skipMemoryCacheOf(boolean) skipMemoryCache(boolean),com.bumptech.glide.request.RequestOptionsTest+isSkipMemoryCacheSet_withSkipMemoryCacheTrue_isTrue() com.bumptech.glide.request.RequestOptionsTest+isSkipMemoryCacheSet_withSkipMemoryCacheFalse_isTrue() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),com.bumptech.glide.request.RequestOptions+skipMemoryCache(boolean) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+skipMemoryCache(boolean) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+isCacheable com.bumptech.glide.request.RequestOptions+isCacheable com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+IS_CACHEABLE,637,21,1,"/** 
 * Allows the loaded resource to skip the memory cache. <p> Note - this is not a guarantee. If a request is already pending for this resource and that request is not also skipping the memory cache, the resource will be cached in memory.</p>
 * @param skip True to allow the resource to skip the memory cache.
 * @return This request builder.
 */
","/**
   * Allows the loaded resource to skip the memory cache.
   *
   * <p> Note - this is not a guarantee. If a request is already pending for this resource and that
   * request is not also skipping the memory cache, the resource will be cached in memory.</p>
   *
   * @param skip True to allow the resource to skip the memory cache.
   * @return This request builder.
   */
  @NonNull
  @CheckResult
  public RequestOptions skipMemoryCache(boolean skip) {
    if (isAutoCloneEnabled) {
      return clone().skipMemoryCache(true);
    }

    this.isCacheable = !skip;
    fields |= IS_CACHEABLE;

    return selfOrThrowIfLocked();
  }",True
97,"override(int,int)",Method,"overrideOf(int,int) override(int,int) override(int)","com.bumptech.glide.test.Extension+override(RequestOptions,int,int) com.bumptech.glide.GlideTest+testLoadColorDrawable_withUnitBitmapTransformation_returnsColorDrawable() com.bumptech.glide.GlideTest+testLoadColorDrawable_withNonUnitBitmapTransformation_returnsBitmapDrawable() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode()","com.bumptech.glide.request.RequestOptions+override(int,int) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+override(int,int) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked()",com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+overrideWidth com.bumptech.glide.request.RequestOptions+overrideWidth com.bumptech.glide.request.RequestOptions+overrideHeight com.bumptech.glide.request.RequestOptions+overrideHeight com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+OVERRIDE,715,22,1,"/** 
 * Overrides the  {@link com.bumptech.glide.request.target.Target}'s width and height with the given values. This is useful for thumbnails, and should only be used for other cases when you need a very specific image size.
 * @param width  The width in pixels to use to load the resource.
 * @param height The height in pixels to use to load the resource.
 * @return This request builder.
 */
","/**
   * Overrides the {@link com.bumptech.glide.request.target.Target}'s width and height with the
   * given values. This is useful for thumbnails, and should only be used for other cases when you
   * need a very specific image size.
   *
   * @param width  The width in pixels to use to load the resource.
   * @param height The height in pixels to use to load the resource.
   * @return This request builder.
   */
  @NonNull
  @CheckResult
  public RequestOptions override(int width, int height) {
    if (isAutoCloneEnabled) {
      return clone().override(width, height);
    }

    this.overrideWidth = width;
    this.overrideHeight = height;
    fields |= OVERRIDE;

    return selfOrThrowIfLocked();
  }",True
98,override(int),Method,,com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.samples.contacturi.MainActivity+showContact(long) com.bumptech.glide.samples.flickr.FlickrGlideExtension+squareMiniThumb(RequestOptions),"com.bumptech.glide.request.RequestOptions+override(int,int) com.bumptech.glide.request.RequestOptions+override(int,int)",,346,13,1,"/** 
 * Overrides the  {@link com.bumptech.glide.request.target.Target}'s width and height with the given size.
 * @see #override(int,int)
 * @param size The width and height to use.
 * @return This request builder.
 */
","/**
   * Overrides the {@link com.bumptech.glide.request.target.Target}'s width and height with the
   * given size.
   *
   * @see #override(int, int)
   * @param size The width and height to use.
   * @return This request builder.
   */
  @NonNull
  @CheckResult
  public RequestOptions override(int size) {
    return override(size, size);
  }",True
99,signature(Key),Method,signatureOf(Key) signature(Key),com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),com.bumptech.glide.request.RequestOptions+signature(Key) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+signature(Key) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+signature com.bumptech.glide.request.RequestOptions+signature com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+SIGNATURE,796,22,1,"/** 
 * Sets some additional data to be mixed in to the memory and disk cache keys allowing the caller more control over when cached data is invalidated. <p> Note - The signature does not replace the cache key, it is purely additive. </p>
 * @param signature A unique non-null {@link Key} representing the currentstate of the model that will be mixed in to the cache key.
 * @return This request builder.
 * @see com.bumptech.glide.signature.ObjectKey
 */
","/**
   * Sets some additional data to be mixed in to the memory and disk cache keys allowing the caller
   * more control over when cached data is invalidated.
   *
   * <p> Note - The signature does not replace the cache key, it is purely additive. </p>
   *
   * @param signature A unique non-null {@link Key} representing the current
   *                  state of the model that will be mixed in to the cache key.
   * @return This request builder.
   * @see com.bumptech.glide.signature.ObjectKey
   */
  @NonNull
  @CheckResult
  public RequestOptions signature(@NonNull Key signature) {
    if (isAutoCloneEnabled) {
      return clone().signature(signature);
    }

    this.signature = Preconditions.checkNotNull(signature);
    fields |= SIGNATURE;
    return selfOrThrowIfLocked();
  }",True
100,clone(),Method,"sizeMultiplier(float) useUnlimitedSourceGeneratorsPool(boolean) useAnimationPool(boolean) onlyRetrieveFromCache(boolean) diskCacheStrategy(DiskCacheStrategy) priority(Priority) placeholder(Drawable) placeholder(int) fallback(Drawable) fallback(int) error(Drawable) error(int) theme(Resources.Theme) skipMemoryCache(boolean) override(int,int) signature(Key) set(Option<T>,T) decode(Class<?>) optionalTransform(DownsampleStrategy,Transformation<Bitmap>) transform(DownsampleStrategy,Transformation<Bitmap>) transform(Transformation<Bitmap>,boolean) transform(Class<T>,Transformation<T>,boolean) dontTransform() apply(RequestOptions)","com.bumptech.glide.RequestBuilder+getMutableOptions() com.bumptech.glide.RequestBuilder+clone() com.bumptech.glide.RequestBuilder+into(ImageView) com.bumptech.glide.RequestBuilder+into(ImageView) com.bumptech.glide.RequestBuilder+into(ImageView) com.bumptech.glide.RequestBuilder+into(ImageView) com.bumptech.glide.RequestBuilder+buildThumbnailRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions) com.bumptech.glide.RequestManager+setRequestOptions(RequestOptions)",java.lang.Object+clone() com.bumptech.glide.load.Options+Options() com.bumptech.glide.load.Options+putAll(Options) com.bumptech.glide.load.Options+putAll(Options) java.util.Map+putAll(Map) java.util.Map+putAll(Map) java.lang.RuntimeException+RuntimeException(Throwable),com.bumptech.glide.request.RequestOptions+options com.bumptech.glide.request.RequestOptions+options com.bumptech.glide.request.RequestOptions+options com.bumptech.glide.request.RequestOptions+transformations com.bumptech.glide.request.RequestOptions+transformations com.bumptech.glide.request.RequestOptions+transformations com.bumptech.glide.request.RequestOptions+isLocked com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled,1202,32,1,"/** 
 * Returns a copy of this request builder with all of the options put so far on this builder. <p> This method returns a ""deep"" copy in that all non-immutable arguments are copied such that changes to one builder will not affect the other builder. However, in addition to immutable arguments, the current model is not copied copied so changes to the model will affect both builders. </p> <p> Even if this object was locked, the cloned object returned from this method will not be locked. </p>
 */
","/**
   * Returns a copy of this request builder with all of the options put so far on this builder.
   *
   * <p> This method returns a ""deep"" copy in that all non-immutable arguments are copied such that
   * changes to one builder will not affect the other builder. However, in addition to immutable
   * arguments, the current model is not copied copied so changes to the model will affect both
   * builders. </p>
   *
   * <p> Even if this object was locked, the cloned object returned from this method will not be
   * locked. </p>
   */
  @SuppressWarnings({
      ""unchecked"",
      // we don't want to throw to be user friendly
      ""PMD.CloneThrowsCloneNotSupportedException""
  })
  @CheckResult
  @Override
  public RequestOptions clone() {
    try {
      RequestOptions result = (RequestOptions) super.clone();
      result.options = new Options();
      result.options.putAll(options);
      result.transformations = new CachedHashCodeArrayMap<>();
      result.transformations.putAll(transformations);
      result.isLocked = false;
      result.isAutoCloneEnabled = false;
      return result;
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
  }",True
101,"set(Option<T>,T)",Method,"option(Option<T>,T) set(Option<T>,T) encodeFormat(Bitmap.CompressFormat) encodeQuality(int) frame(long) format(DecodeFormat) disallowHardwareConfig() downsample(DownsampleStrategy) timeout(int) dontAnimate()",com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),"com.bumptech.glide.request.RequestOptions+set(Option<T>,T) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+set(Option<T>,T) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.load.Options+set(Option<T>,T) com.bumptech.glide.load.Options+set(Option<T>,T) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked()",com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+options,329,12,1,,"@NonNull
  @CheckResult
  public <T> RequestOptions set(@NonNull Option<T> option, @NonNull T value) {
    if (isAutoCloneEnabled) {
      return clone().set(option, value);
    }

    Preconditions.checkNotNull(option);
    Preconditions.checkNotNull(value);
    options.set(option, value);
    return selfOrThrowIfLocked();
  }",True
102,decode(Class<?>),Method,decodeTypeOf(Class<?>) decode(Class<?>),com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),com.bumptech.glide.request.RequestOptions+decode(Class<?>) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+decode(Class<?>) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+resourceClass com.bumptech.glide.request.RequestOptions+resourceClass com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+RESOURCE_CLASS,306,11,1,,"@NonNull
  @CheckResult
  public RequestOptions decode(@NonNull Class<?> resourceClass) {
    if (isAutoCloneEnabled) {
      return clone().decode(resourceClass);
    }

    this.resourceClass = Preconditions.checkNotNull(resourceClass);
    fields |= RESOURCE_CLASS;
    return selfOrThrowIfLocked();
  }",True
103,isTransformationAllowed(),Method,,com.bumptech.glide.RequestBuilder+into(ImageView) com.bumptech.glide.request.RequestOptionsTest+testIsTransformationAllowed_byDefault_isTrue() com.bumptech.glide.request.RequestOptionsTest+testIsTransformationAllowed_afterDontTransform_isFalse() com.bumptech.glide.request.RequestOptionsTest+testApplyingTransformation_overridesDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withDontTransform_overridesTransformations() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withTransformation_overridesDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingDefaultOptions_withDontTransform_retainsDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingDefaultOptions_withTransform_retrainsTransform(),,com.bumptech.glide.request.RequestOptions+isTransformationAllowed,88,3,17,,"public final boolean isTransformationAllowed() {
    return isTransformationAllowed;
  }",True
104,isTransformationSet(),Method,,com.bumptech.glide.RequestBuilder+into(ImageView) com.bumptech.glide.request.RequestOptionsTest+testIsTransformationSet_byDefault_isFalse() com.bumptech.glide.request.RequestOptionsTest+testIsTransformationSet_afterApplyingOptionsWithTransform_isTrue() com.bumptech.glide.request.RequestOptionsTest+testIsTransformationSet_afterDontTransform_isFalse() com.bumptech.glide.request.RequestOptionsTest+testApplyingDontTransform_overridesTransformations() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withDontTransform_overridesTransformations() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withTransformation_overridesDontTransform(),com.bumptech.glide.request.RequestOptions+isSet(int) com.bumptech.glide.request.RequestOptions+isSet(int),com.bumptech.glide.request.RequestOptions+TRANSFORMATION,82,3,17,,"public final boolean isTransformationSet() {
    return isSet(TRANSFORMATION);
  }",True
105,isLocked(),Method,,,,com.bumptech.glide.request.RequestOptions+isLocked,58,3,17,,"public final boolean isLocked() {
    return isLocked;
  }",True
106,encodeFormat(Bitmap.CompressFormat),Method,,,"com.bumptech.glide.request.RequestOptions+set(Option<T>,T) com.bumptech.glide.request.RequestOptions+set(Option<T>,T) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.util.Preconditions+checkNotNull(T)",com.bumptech.glide.load.resource.bitmap.BitmapEncoder+COMPRESSION_FORMAT,318,9,1,"/** 
 * Sets the value for key {@link com.bumptech.glide.load.resource.bitmap.BitmapEncoder#COMPRESSION_FORMAT}.
 */
","/**
   * Sets the value for key
   * {@link com.bumptech.glide.load.resource.bitmap.BitmapEncoder#COMPRESSION_FORMAT}.
   */
  @NonNull
  @CheckResult
  public RequestOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
    return set(BitmapEncoder.COMPRESSION_FORMAT, Preconditions.checkNotNull(format));
  }",True
107,encodeQuality(int),Method,encodeQualityOf(int),,"com.bumptech.glide.request.RequestOptions+set(Option<T>,T) com.bumptech.glide.request.RequestOptions+set(Option<T>,T)",com.bumptech.glide.load.resource.bitmap.BitmapEncoder+COMPRESSION_QUALITY,258,9,1,"/** 
 * Sets the value for key {@link BitmapEncoder#COMPRESSION_QUALITY}.
 */
","/**
   * Sets the value for key
   * {@link BitmapEncoder#COMPRESSION_QUALITY}.
   */
  @NonNull
  @CheckResult
  public RequestOptions encodeQuality(@IntRange(from = 0, to = 100) int quality) {
    return set(BitmapEncoder.COMPRESSION_QUALITY, quality);
  }",True
108,frame(long),Method,frameOf(long),,"com.bumptech.glide.request.RequestOptions+set(Option<T>,T) com.bumptech.glide.request.RequestOptions+set(Option<T>,T)",com.bumptech.glide.load.resource.bitmap.VideoDecoder+TARGET_FRAME,663,15,1,"/** 
 * Sets the time position of the frame to extract from a video. <p>This is a component option specific to  {@link VideoDecoder}. If the default video decoder is replaced or skipped because of your configuration, this option may be ignored.
 * @see VideoDecoder#TARGET_FRAME
 * @param frameTimeMicros The time position in microseconds of the desired frame. If negative, theAndroid framework implementation return a representative frame.
 */
","/**
   * Sets the time position of the frame to extract from a video.
   *
   * <p>This is a component option specific to {@link VideoDecoder}. If the default video
   * decoder is replaced or skipped because of your configuration, this option may be ignored.
   *
   * @see VideoDecoder#TARGET_FRAME
   * @param frameTimeMicros The time position in microseconds of the desired frame. If negative, the
   *                        Android framework implementation return a representative frame.
   */
  @NonNull
  @CheckResult
  public RequestOptions frame(@IntRange(from = 0) long frameTimeMicros) {
    return set(VideoDecoder.TARGET_FRAME, frameTimeMicros);
  }",True
109,format(DecodeFormat),Method,formatOf(DecodeFormat),"com.bumptech.glide.samples.flickr.FlickrGlideModule+applyOptions(Context,GlideBuilder)","com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.request.RequestOptions+set(Option<T>,T) com.bumptech.glide.request.RequestOptions+set(Option<T>,T)",com.bumptech.glide.load.resource.bitmap.Downsampler+DECODE_FORMAT com.bumptech.glide.load.resource.gif.GifOptions+DECODE_FORMAT,1355,29,1,"/** 
 * Sets the  {@link DecodeFormat} to use when decoding {@link Bitmap} objects using{@link Downsampler} and Glide's default GIF decoders.<p> {@link DecodeFormat} is a request, not a requirement. It's possible the resource will bedecoded using a decoder that cannot control the format ( {@link android.media.MediaMetadataRetriever} for example), or that the decoder may choose toignore the requested format if it can't display the image (i.e. RGB_565 is requested, but the image has alpha). <p>This is a component option specific to  {@link Downsampler} and Glide's GIF decoders. If thedefault Bitmap decoders are replaced or skipped because of your configuration, this option may be ignored. <p>To set only the format used when decoding  {@link Bitmap}s, use {@link #option(Option,Object)} and {@link Downsampler#DECODE_FORMAT}. To set only the format used when decoding GIF frames, use  {@link #option(Option,Object)} and{@link GifOptions#DECODE_FORMAT}.
 * @see Downsampler#DECODE_FORMAT
 * @see GifOptions#DECODE_FORMAT
 */
","/**
   * Sets the {@link DecodeFormat} to use when decoding {@link Bitmap} objects using
   * {@link Downsampler} and Glide's default GIF decoders.
   *
   * <p>{@link DecodeFormat} is a request, not a requirement. It's possible the resource will be
   * decoded using a decoder that cannot control the format
   * ({@link android.media.MediaMetadataRetriever} for example), or that the decoder may choose to
   * ignore the requested format if it can't display the image (i.e. RGB_565 is requested, but the
   * image has alpha).
   *
   * <p>This is a component option specific to {@link Downsampler} and Glide's GIF decoders. If the
   * default Bitmap decoders are replaced or skipped because of your configuration, this option may
   * be ignored.
   *
   * <p>To set only the format used when decoding {@link Bitmap}s, use
   * {@link #option(Option, Object)} and {@link Downsampler#DECODE_FORMAT}. To set only the format
   * used when decoding GIF frames, use {@link #option(Option, Object)} and
   * {@link GifOptions#DECODE_FORMAT}.
   *
   * @see Downsampler#DECODE_FORMAT
   * @see GifOptions#DECODE_FORMAT
   */
  @NonNull
  @CheckResult
  public RequestOptions format(@NonNull DecodeFormat format) {
    Preconditions.checkNotNull(format);
    return set(Downsampler.DECODE_FORMAT, format)
        .set(GifOptions.DECODE_FORMAT, format);
  }",True
110,disallowHardwareConfig(),Method,,,"com.bumptech.glide.request.RequestOptions+set(Option<T>,T) com.bumptech.glide.request.RequestOptions+set(Option<T>,T)",com.bumptech.glide.load.resource.bitmap.Downsampler+ALLOW_HARDWARE_CONFIG,1432,22,1,"/** 
 * Disables the use of  {@link android.graphics.Bitmap.Config#HARDWARE} in {@link Downsampler} toavoid errors caused by inspecting Bitmap pixels, drawing with hardware support disabled, drawing to  {@link android.graphics.Canvas}s backed by  {@link Bitmap}s etc. <p>It's almost never safe to set  {@link Downsampler#ALLOW_HARDWARE_CONFIG} to {@code true} sowe only provide a way to disable hardware configs entirely. If no option is set for {@link Downsampler#ALLOW_HARDWARE_CONFIG}, Glide will set the value per request based on whether or not a  {@link Transformation} is applied and if one is, the type of{@link Transformation} applied. Built in transformations like {@link FitCenter} and{@link com.bumptech.glide.load.resource.bitmap.DownsampleStrategy.CenterOutside} can safely use{@link android.graphics.Bitmap.Config#HARDWARE} because they can be entirely replaced byscaling within  {@link Downsampler}.  {@link Transformation}s like  {@link #circleCrop()} thatcan't be replicated by  {@link Downsampler} cannot use {@link Bitmap.Config#HARDWARE} because{@link android.graphics.Bitmap.Config#HARDWARE} cannot be drawn to{@link android.graphics.Canvas}s, which is required by most  {@link Transformation}s.
 */
","/**
   * Disables the use of {@link android.graphics.Bitmap.Config#HARDWARE} in {@link Downsampler} to
   * avoid errors caused by inspecting Bitmap pixels, drawing with hardware support disabled,
   * drawing to {@link android.graphics.Canvas}s backed by {@link Bitmap}s etc.
   *
   * <p>It's almost never safe to set {@link Downsampler#ALLOW_HARDWARE_CONFIG} to {@code true} so
   * we only provide a way to disable hardware configs entirely. If no option is set for
   * {@link Downsampler#ALLOW_HARDWARE_CONFIG}, Glide will set the value per request based on
   * whether or not a {@link Transformation} is applied and if one is, the type of
   * {@link Transformation} applied. Built in transformations like {@link FitCenter} and
   * {@link com.bumptech.glide.load.resource.bitmap.DownsampleStrategy.CenterOutside} can safely use
   * {@link android.graphics.Bitmap.Config#HARDWARE} because they can be entirely replaced by
   * scaling within {@link Downsampler}. {@link Transformation}s like {@link #circleCrop()} that
   * can't be replicated by {@link Downsampler} cannot use {@link Bitmap.Config#HARDWARE} because
   * {@link android.graphics.Bitmap.Config#HARDWARE} cannot be drawn to
   * {@link android.graphics.Canvas}s, which is required by most {@link Transformation}s.
   */
  @NonNull
  @CheckResult
  public RequestOptions disallowHardwareConfig() {
    return set(Downsampler.ALLOW_HARDWARE_CONFIG, false);
  }",True
111,downsample(DownsampleStrategy),Method,"downsampleOf(DownsampleStrategy) optionalTransform(DownsampleStrategy,Transformation<Bitmap>) transform(DownsampleStrategy,Transformation<Bitmap>)",com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withDownsampleStrategy_isTrue(),"com.bumptech.glide.request.RequestOptions+set(Option<T>,T) com.bumptech.glide.request.RequestOptions+set(Option<T>,T) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.util.Preconditions+checkNotNull(T)",com.bumptech.glide.load.resource.bitmap.DownsampleStrategy+OPTION,503,12,1,"/** 
 * Sets the  {@link DownsampleStrategy} to use when decoding {@link Bitmap Bitmaps} using{@link Downsampler}. <p>This is a component option specific to  {@link Downsampler}. If the defautlt Bitmap decoder is replaced or skipped because of your configuration, this option may be ignored.
 */
","/**
   * Sets the {@link DownsampleStrategy} to use when decoding {@link Bitmap Bitmaps} using
   * {@link Downsampler}.
   *
   * <p>This is a component option specific to {@link Downsampler}. If the defautlt Bitmap decoder
   * is replaced or skipped because of your configuration, this option may be ignored.
   */
  @NonNull
  @CheckResult
  public RequestOptions downsample(@NonNull DownsampleStrategy strategy) {
    return set(DownsampleStrategy.OPTION, Preconditions.checkNotNull(strategy));
  }",True
112,timeout(int),Method,timeoutOf(int),,"com.bumptech.glide.request.RequestOptions+set(Option<T>,T) com.bumptech.glide.request.RequestOptions+set(Option<T>,T)",com.bumptech.glide.load.model.stream.HttpGlideUrlLoader+TIMEOUT,689,16,1,"/** 
 * Sets the read and write timeout for the http requests used to load the image. <p>This is a component option specific to Glide's default networking library and {@link com.bumptech.glide.load.model.stream.HttpGlideUrlLoader}. If you use any other networking library including Glide's Volley or OkHttp integration libraries, this option will be ignored.
 * @see com.bumptech.glide.load.model.stream.HttpGlideUrlLoader#TIMEOUT
 * @param timeoutMs The read and write timeout in milliseconds.
 */
","/**
   * Sets the read and write timeout for the http requests used to load the image.
   *
   * <p>This is a component option specific to Glide's default networking library and
   * {@link com.bumptech.glide.load.model.stream.HttpGlideUrlLoader}. If you use any other
   * networking library including Glide's Volley or OkHttp integration libraries, this option will
   * be ignored.
   *
   * @see com.bumptech.glide.load.model.stream.HttpGlideUrlLoader#TIMEOUT
   * @param timeoutMs The read and write timeout in milliseconds.
   */
  @NonNull
  @CheckResult
  public RequestOptions timeout(@IntRange(from = 0) int timeoutMs) {
    return set(HttpGlideUrlLoader.TIMEOUT, timeoutMs);
  }",True
113,optionalCenterCrop(),Method,,com.bumptech.glide.DrawableTransformationTest+load_withColorDrawable_sizeOriginal_optionalTransform_returnsColorDrawable() com.bumptech.glide.RequestBuilder+into(ImageView) com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCenterCrop_isFalse() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),"com.bumptech.glide.request.RequestOptions+optionalTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+optionalTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.load.resource.bitmap.CenterCrop+CenterCrop()",com.bumptech.glide.load.resource.bitmap.DownsampleStrategy+CENTER_OUTSIDE,452,14,1,"/** 
 * Applies  {@link com.bumptech.glide.load.resource.bitmap.CenterCrop} to all default types, andignores unknown types. <p>This will override previous calls to  {@link #dontTransform()}.
 * @see #optionalTransform(Class,Transformation)
 * @see #centerCrop()
 */
","/**
   * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterCrop} to all default types, and
   * ignores unknown types.
   *
   * <p>This will override previous calls to {@link #dontTransform()}.
   *
   * @see #optionalTransform(Class, Transformation)
   * @see #centerCrop()
   */
  @NonNull
  @CheckResult
  public RequestOptions optionalCenterCrop() {
    return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop());
  }",True
114,centerCrop(),Method,centerCropTransform(),"com.bumptech.glide.test.Extension+test(RequestOptions) com.bumptech.glide.test.Extension+centerCrop(RequestOptions) com.bumptech.glide.test.Extension+override(RequestOptions,int,int) com.bumptech.glide.test.Extension+centerCrop(RequestOptions) com.bumptech.glide.test.Extension+test(RequestOptions) com.bumptech.glide.test.Extension+test(RequestOptions) com.bumptech.glide.test.ExtensionWithOption+squareThumb(RequestOptions) com.bumptech.glide.test.Extension+test(RequestOptions) com.bumptech.glide.test.Extension+centerCrop(RequestOptions) com.bumptech.glide.test.Extension+centerCrop(RequestOptions) com.bumptech.glide.test.Extension+test(RequestOptions) com.bumptech.glide.test.Extension+test(RequestOptions) com.bumptech.glide.test.ExtensionWithOption+squareThumb(RequestOptions) com.bumptech.glide.DrawableTransformationTest+load_withColorDrawable_fixedSize_requiredUnitTransform_returnsOriginalDrawable() com.bumptech.glide.DrawableTransformationTest+run() com.bumptech.glide.GlideTest+testLoadColorDrawable_withUnitBitmapTransformation_returnsColorDrawable() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCenterCrop_isFalse() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode() com.bumptech.glide.samples.flickr.FlickrGlideExtension+squareThumb(RequestOptions) com.bumptech.glide.samples.flickr.FlickrGlideExtension+squareMiniThumb(RequestOptions)","com.bumptech.glide.request.RequestOptions+transform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+transform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.load.resource.bitmap.CenterCrop+CenterCrop()",com.bumptech.glide.load.resource.bitmap.DownsampleStrategy+CENTER_OUTSIDE,435,14,1,"/** 
 * Applies  {@link CenterCrop} to all default types andthrows an exception if asked to transform an unknown type. <p>this will override previous calls to  {@link #dontTransform()} ()}.
 * @see #transform(Class,Transformation)
 * @see #optionalCenterCrop()
 */
","/**
   * Applies {@link CenterCrop} to all default types and
   * throws an exception if asked to transform an unknown type.
   *
   * <p>this will override previous calls to {@link #dontTransform()} ()}.
   *
   * @see #transform(Class, Transformation)
   * @see #optionalCenterCrop()
   */
  @NonNull
  @CheckResult
  public RequestOptions centerCrop() {
    return transform(DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop());
  }",True
115,optionalFitCenter(),Method,,com.bumptech.glide.RequestBuilder+into(ImageView) com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withFitCenter_isTrue(),"com.bumptech.glide.request.RequestOptions+optionalScaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+optionalScaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.load.resource.bitmap.FitCenter+FitCenter()",com.bumptech.glide.load.resource.bitmap.DownsampleStrategy+FIT_CENTER,543,16,1,"/** 
 * Applies  {@link FitCenter} and to all default types, {@link DownsampleStrategy#FIT_CENTER} toimage types, and ignores unknown types. <p>This will override previous calls to  {@link #dontTransform()} and previous calls to{@link #downsample(DownsampleStrategy)}.
 * @see #optionalTransform(Class,Transformation)
 * @see #fitCenter()
 */
","/**
   *
   * Applies {@link FitCenter} and to all default types, {@link DownsampleStrategy#FIT_CENTER} to
   * image types, and ignores unknown types.
   *
   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
   * {@link #downsample(DownsampleStrategy)}.
   *
   * @see #optionalTransform(Class, Transformation)
   * @see #fitCenter()
   */
  @NonNull
  @CheckResult
  public RequestOptions optionalFitCenter() {
    return optionalScaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
  }",True
116,fitCenter(),Method,fitCenterTransform(),com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withFitCenter_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withDontTransformAndAppliedNonScaleTransform_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleOnly_andAppliedWithScaleOnly_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withScaleOnlyAndAppliedWithoutTransform_isTrue() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),"com.bumptech.glide.request.RequestOptions+scaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+scaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.load.resource.bitmap.FitCenter+FitCenter()",com.bumptech.glide.load.resource.bitmap.DownsampleStrategy+FIT_CENTER,563,16,1,"/** 
 * Applies  {@link FitCenter} and to all default types, {@link DownsampleStrategy#FIT_CENTER} toimage types, and throws an exception if asked to transform an unknown type. <p>This will override previous calls to  {@link #dontTransform()} and previous calls to{@link #downsample(DownsampleStrategy)}.
 * @see #transform(Class,Transformation)
 * @see #optionalFitCenter()
 */
","/**
   * Applies {@link FitCenter} and to all default types, {@link DownsampleStrategy#FIT_CENTER} to
   * image types, and throws an exception if asked to transform an unknown
   * type.
   *
   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
   * {@link #downsample(DownsampleStrategy)}.
   *
   * @see #transform(Class, Transformation)
   * @see #optionalFitCenter()
   */
  @NonNull
  @CheckResult
  public RequestOptions fitCenter() {
    return scaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
  }",True
117,optionalCenterInside(),Method,,com.bumptech.glide.RequestBuilder+into(ImageView) com.bumptech.glide.RequestBuilder+into(ImageView) com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCenterInside_isTrue(),"com.bumptech.glide.request.RequestOptions+optionalScaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+optionalScaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.load.resource.bitmap.CenterInside+CenterInside()",com.bumptech.glide.load.resource.bitmap.DownsampleStrategy+CENTER_INSIDE,592,15,1,"/** 
 * Applies  {@link com.bumptech.glide.load.resource.bitmap.CenterInside} to all default types,{@link DownsampleStrategy#CENTER_INSIDE} to image types, and ignores unknown types.<p>This will override previous calls to  {@link #dontTransform()} and previous calls to{@link #downsample(DownsampleStrategy)}.
 * @see #optionalTransform(Class,Transformation)
 * @see #centerInside()
 */
","/**
   * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterInside} to all default types,
   * {@link DownsampleStrategy#CENTER_INSIDE} to image types, and ignores unknown types.
   *
   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
   * {@link #downsample(DownsampleStrategy)}.
   *
   * @see #optionalTransform(Class, Transformation)
   * @see #centerInside()
   */
  @NonNull
  @CheckResult
  public RequestOptions optionalCenterInside() {
    return optionalScaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
  }",True
118,centerInside(),Method,centerInsideTransform(),com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCenterInside_isTrue() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),"com.bumptech.glide.request.RequestOptions+scaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+scaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.load.resource.bitmap.CenterInside+CenterInside()",com.bumptech.glide.load.resource.bitmap.DownsampleStrategy+CENTER_INSIDE,571,15,1,"/** 
 * Applies  {@link CenterInside} to all default types, {@link DownsampleStrategy#CENTER_INSIDE} toimage types and throws an exception if asked to transform an unknown type. <p>This will override previous calls to  {@link #dontTransform()} and previous calls to{@link #downsample(DownsampleStrategy)}.
 * @see #transform(Class,Transformation)
 * @see #optionalCenterInside()
 */
","/**
   * Applies {@link CenterInside} to all default types, {@link DownsampleStrategy#CENTER_INSIDE} to
   * image types and throws an exception if asked to transform an unknown type.
   *
   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
   * {@link #downsample(DownsampleStrategy)}.
   *
   * @see #transform(Class, Transformation)
   * @see #optionalCenterInside()
   */
  @NonNull
  @CheckResult
  public RequestOptions centerInside() {
    return scaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
  }",True
119,optionalCircleCrop(),Method,,,"com.bumptech.glide.request.RequestOptions+optionalTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+optionalTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.load.resource.bitmap.CircleCrop+CircleCrop()",com.bumptech.glide.load.resource.bitmap.DownsampleStrategy+CENTER_OUTSIDE,400,13,1,"/** 
 * Applies  {@link CircleCrop} to all default types, and ignores unknown types.<p>This will override previous calls to  {@link #dontTransform()}.
 * @see #optionalTransform(Transformation)
 * @see #circleCrop()
 */
","/**
   * Applies {@link CircleCrop} to all default types, and ignores unknown types.
   *
   * <p>This will override previous calls to {@link #dontTransform()}.
   *
   * @see #optionalTransform(Transformation)
   * @see #circleCrop()
   */
  @NonNull
  @CheckResult
  public RequestOptions optionalCircleCrop() {
    return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CircleCrop());
  }",True
120,circleCrop(),Method,circleCropTransform(),com.bumptech.glide.DrawableTransformationTest+load_withColorDrawable_fixedSize_nonUnitRequiredTransform_returnsBitmapDrawable() com.bumptech.glide.GlideTest+testLoadColorDrawable_withNonUnitBitmapTransformation_returnsBitmapDrawable() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCircleCrop_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCircleCrop_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleAndThenDontTransform_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleAndAppliedDontTransform_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withDontTransformAndAppliedNonScaleTransform_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleOnly_andAppliedWithScaleOnly_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleOnlyAndAppliedWithoutTransform_isFalse() com.bumptech.glide.request.RequestOptionsTest+testEqualsHashCode(),"com.bumptech.glide.request.RequestOptions+transform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+transform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.load.resource.bitmap.CircleCrop+CircleCrop()",com.bumptech.glide.load.resource.bitmap.DownsampleStrategy+CENTER_INSIDE,430,14,1,"/** 
 * Applies  {@link CircleCrop} to all default types and throws an exception if asked to transforman unknown type. <p>This will override previous calls to  {@link #dontTransform()}.
 * @see #transform(Class,Transformation)
 * @see #optionalCenterCrop()
 */
","/**
   * Applies {@link CircleCrop} to all default types and throws an exception if asked to transform
   * an unknown type.
   *
   * <p>This will override previous calls to {@link #dontTransform()}.
   *
   * @see #transform(Class, Transformation)
   * @see #optionalCenterCrop()
   */
  @NonNull
  @CheckResult
  public RequestOptions circleCrop() {
    return transform(DownsampleStrategy.CENTER_INSIDE, new CircleCrop());
  }",True
121,"optionalTransform(DownsampleStrategy,Transformation<Bitmap>)",Method,"optionalCenterCrop() optionalCircleCrop() optionalTransform(DownsampleStrategy,Transformation<Bitmap>) scaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>,boolean)",,"com.bumptech.glide.request.RequestOptions+optionalTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+optionalTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+downsample(DownsampleStrategy) com.bumptech.glide.request.RequestOptions+downsample(DownsampleStrategy) com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>,boolean) com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>,boolean)",com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled,420,11,16,,"@SuppressWarnings({""WeakerAccess"", ""CheckResult""})
  @NonNull
  final RequestOptions optionalTransform(@NonNull DownsampleStrategy downsampleStrategy,
      @NonNull Transformation<Bitmap> transformation) {
    if (isAutoCloneEnabled) {
      return clone().optionalTransform(downsampleStrategy, transformation);
    }

    downsample(downsampleStrategy);
    return transform(transformation, /*isRequired=*/ false);
  }",True
122,"transform(DownsampleStrategy,Transformation<Bitmap>)",Method,"centerCrop() circleCrop() transform(DownsampleStrategy,Transformation<Bitmap>) scaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>,boolean)",,"com.bumptech.glide.request.RequestOptions+transform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+transform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+downsample(DownsampleStrategy) com.bumptech.glide.request.RequestOptions+downsample(DownsampleStrategy) com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>)",com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled,396,12,16,,"@SuppressWarnings({""WeakerAccess"", ""CheckResult""})
  @NonNull
  @CheckResult
  final RequestOptions transform(@NonNull DownsampleStrategy downsampleStrategy,
      @NonNull Transformation<Bitmap> transformation) {
    if (isAutoCloneEnabled) {
      return clone().transform(downsampleStrategy, transformation);
    }

    downsample(downsampleStrategy);
    return transform(transformation);
  }",True
123,"scaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>)",Method,fitCenter() centerInside(),,"com.bumptech.glide.request.RequestOptions+scaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>,boolean) com.bumptech.glide.request.RequestOptions+scaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>,boolean)",,243,5,2,,"@NonNull
  private RequestOptions scaleOnlyTransform(
      @NonNull DownsampleStrategy strategy, @NonNull Transformation<Bitmap> transformation) {
    return scaleOnlyTransform(strategy, transformation, true /*isTransformationRequired*/);
  }",True
124,"optionalScaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>)",Method,optionalFitCenter() optionalCenterInside(),,"com.bumptech.glide.request.RequestOptions+scaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>,boolean) com.bumptech.glide.request.RequestOptions+scaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>,boolean)",,252,5,2,,"@NonNull
  private RequestOptions optionalScaleOnlyTransform(
      @NonNull DownsampleStrategy strategy, @NonNull Transformation<Bitmap> transformation) {
    return scaleOnlyTransform(strategy, transformation, false /*isTransformationRequired*/);
  }",True
125,"scaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>,boolean)",Method,"scaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>) optionalScaleOnlyTransform(DownsampleStrategy,Transformation<Bitmap>)",,"com.bumptech.glide.request.RequestOptions+transform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+transform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+optionalTransform(DownsampleStrategy,Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+optionalTransform(DownsampleStrategy,Transformation<Bitmap>)",com.bumptech.glide.request.RequestOptions+isScaleOnlyOrNoTransform,408,10,2,,"@NonNull
  private RequestOptions scaleOnlyTransform(
      @NonNull DownsampleStrategy strategy,
      @NonNull Transformation<Bitmap> transformation,
      boolean isTransformationRequired) {
    RequestOptions result = isTransformationRequired
          ? transform(strategy, transformation) : optionalTransform(strategy, transformation);
    result.isScaleOnlyOrNoTransform = true;
    return result;
  }",True
126,transform(Transformation<Bitmap>),Method,"bitmapTransform(Transformation<Bitmap>) transform(DownsampleStrategy,Transformation<Bitmap>)","com.bumptech.glide.load.resource.gif.GifDrawableTransformation+setFrameTransformation(Transformation<Bitmap>,Bitmap) com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withBitmapTransformation_isFalse() com.bumptech.glide.request.RequestOptionsTest+testApplyingDontTransform_overridesTransformations() com.bumptech.glide.request.RequestOptionsTest+testApplyingTransformation_overridesDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withDontTransform_overridesTransformations() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withTransformation_overridesDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingDefaultOptions_withTransform_retrainsTransform()","com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>,boolean) com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>,boolean)",,854,20,1,"/** 
 * Applies the given  {@link Transformation} for{@link Bitmap Bitmaps} to the default types ({@link Bitmap}, {@link android.graphics.drawable.BitmapDrawable}, and {@link com.bumptech.glide.load.resource.gif.GifDrawable}) and throws an exception if asked to transform an unknown type. <p>This will override previous calls to  {@link #dontTransform()}.
 * @param transformation Any {@link Transformation} for {@link Bitmap}s.
 * @see #optionalTransform(Transformation)
 * @see #optionalTransform(Class,Transformation)
 */
","/**
   * Applies the given {@link Transformation} for
   * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},
   * {@link android.graphics.drawable.BitmapDrawable}, and
   * {@link com.bumptech.glide.load.resource.gif.GifDrawable})
   * and throws an exception if asked to transform an unknown type.
   *
   * <p>This will override previous calls to {@link #dontTransform()}.
   *
   * @param transformation Any {@link Transformation} for {@link Bitmap}s.
   * @see #optionalTransform(Transformation)
   * @see #optionalTransform(Class, Transformation)
   */
  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
  @SuppressWarnings(""CheckResult"")
  @NonNull
  @CheckResult
  public RequestOptions transform(@NonNull Transformation<Bitmap> transformation) {
    return transform(transformation, /*isRequired=*/ true);
  }",True
127,transforms(Transformation<Bitmap>),Method,,,"com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>,boolean) com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>,boolean)",,943,20,1,"/** 
 * Applies the given  {@link Transformation}s in the given order for {@link Bitmap Bitmaps} to the default types ({@link Bitmap}, {@link android.graphics.drawable.BitmapDrawable}, and {@link com.bumptech.glide.load.resource.gif.GifDrawable}) and throws an exception if asked to transform an unknown type. <p>This will override previous calls to  {@link #dontTransform()}.
 * @param transformations One or more {@link Transformation}s for  {@link Bitmap}s.
 * @see #optionalTransform(Transformation)
 * @see #optionalTransform(Class,Transformation)
 */
","/**
   * Applies the given {@link Transformation}s in the given order for
   * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},
   * {@link android.graphics.drawable.BitmapDrawable}, and
   * {@link com.bumptech.glide.load.resource.gif.GifDrawable})
   * and throws an exception if asked to transform an unknown type.
   *
   * <p>This will override previous calls to {@link #dontTransform()}.
   *
   * @param transformations One or more {@link Transformation}s for {@link Bitmap}s.
   * @see #optionalTransform(Transformation)
   * @see #optionalTransform(Class, Transformation)
   */
  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
  @SuppressWarnings({""unchecked"", ""varargs"", ""CheckResult""})
  @NonNull
  @CheckResult
  public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
    return transform(new MultiTransformation<>(transformations), /*isRequired=*/ true);
  }",True
128,optionalTransform(Transformation<Bitmap>),Method,,com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withBitmapTransformation_isFalse(),"com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>,boolean) com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>,boolean)",,806,19,1,"/** 
 * Applies the given  {@link Transformation} for{@link Bitmap Bitmaps} to the default types ({@link Bitmap}, {@link android.graphics.drawable.BitmapDrawable}, and {@link com.bumptech.glide.load.resource.gif.GifDrawable}) and ignores unknown types. <p>This will override previous calls to  {@link #dontTransform()}.
 * @param transformation Any {@link Transformation} for {@link Bitmap}s.
 * @see #transform(Transformation)
 * @see #transform(Class,Transformation)
 */
","/**
   * Applies the given {@link Transformation} for
   * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},
   * {@link android.graphics.drawable.BitmapDrawable}, and
   * {@link com.bumptech.glide.load.resource.gif.GifDrawable}) and ignores unknown types.
   *
   * <p>This will override previous calls to {@link #dontTransform()}.
   *
   * @param transformation Any {@link Transformation} for {@link Bitmap}s.
   * @see #transform(Transformation)
   * @see #transform(Class, Transformation)
   */
  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
  @SuppressWarnings(""CheckResult"")
  @NonNull
  @CheckResult
  public RequestOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
    return transform(transformation, /*isRequired=*/ false);
  }",True
129,"transform(Transformation<Bitmap>,boolean)",Method,"optionalTransform(DownsampleStrategy,Transformation<Bitmap>) transform(Transformation<Bitmap>) transforms(Transformation<Bitmap>) optionalTransform(Transformation<Bitmap>) transform(Transformation<Bitmap>,boolean)",,"com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>,boolean) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+transform(Transformation<Bitmap>,boolean) com.bumptech.glide.load.resource.bitmap.DrawableTransformation+DrawableTransformation(Transformation<Bitmap>,boolean) com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean) com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean) com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean) com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean) com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean) com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean) com.bumptech.glide.load.resource.bitmap.DrawableTransformation+asBitmapDrawable() com.bumptech.glide.load.resource.bitmap.DrawableTransformation+asBitmapDrawable() com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean) com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean) com.bumptech.glide.load.resource.gif.GifDrawableTransformation+GifDrawableTransformation(Transformation<Bitmap>) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked()",com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled,976,19,2,,"@NonNull
  private RequestOptions transform(
      @NonNull Transformation<Bitmap> transformation, boolean isRequired) {
    if (isAutoCloneEnabled) {
      return clone().transform(transformation, isRequired);
    }

    DrawableTransformation drawableTransformation =
        new DrawableTransformation(transformation, isRequired);
    transform(Bitmap.class, transformation, isRequired);
    transform(Drawable.class, drawableTransformation, isRequired);
    // TODO: remove BitmapDrawable decoder and this transformation.
    // Registering as BitmapDrawable is simply an optimization to avoid some iteration and
    // isAssignableFrom checks when obtaining the transformation later on. It can be removed without
    // affecting the functionality.
    transform(BitmapDrawable.class, drawableTransformation.asBitmapDrawable(), isRequired);
    transform(GifDrawable.class, new GifDrawableTransformation(transformation), isRequired);
    return selfOrThrowIfLocked();
  }",True
130,"optionalTransform(Class<T>,Transformation<T>)",Method,,com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCustomTransformation_isFalse(),"com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean) com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean)",,1075,23,1,"/** 
 * Applies the given  {@link Transformation} for any decoded resource ofthe given type and allows unknown resource types to be ignored. <p> Users can apply different transformations for each resource class. Applying a {@link Transformation} for a resource type that already has a{@link Transformation} will override the previous call. </p><p> If any calls are made to the non-optional transform methods, then attempting to transform an unknown resource class will throw an exception. To allow unknown types, users must always call the optional version of each method. </p> <p>This will override previous calls to  {@link #dontTransform()}.
 * @param resourceClass  The type of resource to transform.
 * @param transformation The {@link Transformation} to apply.
 */
","/**
   * Applies the given {@link Transformation} for any decoded resource of
   * the given type and allows unknown resource types to be ignored.
   *
   * <p> Users can apply different transformations for each resource class. Applying a
   * {@link Transformation} for a resource type that already has a
   * {@link Transformation} will override the previous call. </p>
   *
   * <p> If any calls are made to the non-optional transform methods, then attempting to transform
   * an unknown resource class will throw an exception. To allow unknown types, users must always
   * call the optional version of each method. </p>
   *
   * <p>This will override previous calls to {@link #dontTransform()}.
   *
   * @param resourceClass  The type of resource to transform.
   * @param transformation The {@link Transformation} to apply.
   */
  @NonNull
  @CheckResult
  public <T> RequestOptions optionalTransform(
      @NonNull Class<T> resourceClass, @NonNull Transformation<T> transformation) {
    return transform(resourceClass, transformation, /*isRequired=*/ false);
  }",True
131,"transform(Class<T>,Transformation<T>,boolean)",Method,"transform(Transformation<Bitmap>,boolean) transform(Transformation<Bitmap>,boolean) transform(Transformation<Bitmap>,boolean) transform(Transformation<Bitmap>,boolean) optionalTransform(Class<T>,Transformation<T>) transform(Class<T>,Transformation<T>,boolean) transform(Class<T>,Transformation<T>)",,"com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.util.Preconditions+checkNotNull(T) com.bumptech.glide.util.Preconditions+checkNotNull(T) java.util.Map+put(K,V) java.util.Map+put(K,V) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked()",com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+transformations com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+TRANSFORMATION com.bumptech.glide.request.RequestOptions+isTransformationAllowed com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+TRANSFORMATION_ALLOWED com.bumptech.glide.request.RequestOptions+isScaleOnlyOrNoTransform com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+TRANSFORMATION_REQUIRED com.bumptech.glide.request.RequestOptions+isTransformationRequired,875,24,2,,"@NonNull
  private <T> RequestOptions transform(
      @NonNull Class<T> resourceClass,
      @NonNull Transformation<T> transformation,
      boolean isRequired) {
    if (isAutoCloneEnabled) {
      return clone().transform(resourceClass, transformation, isRequired);
    }

    Preconditions.checkNotNull(resourceClass);
    Preconditions.checkNotNull(transformation);
    transformations.put(resourceClass, transformation);
    fields |= TRANSFORMATION;
    isTransformationAllowed = true;
    fields |= TRANSFORMATION_ALLOWED;
    // Always set to false here. Known scale only transformations will call this method and then
    // set isScaleOnlyOrNoTransform to true immediately after.
    isScaleOnlyOrNoTransform = false;
    if (isRequired) {
      fields |= TRANSFORMATION_REQUIRED;
      isTransformationRequired = true;
    }
    return selfOrThrowIfLocked();
  }",True
132,"transform(Class<T>,Transformation<T>)",Method,,com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCustomTransformation_isFalse() com.bumptech.glide.request.RequestOptionsTest+testIsTransformationSet_afterApplyingOptionsWithTransform_isTrue(),"com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean) com.bumptech.glide.request.RequestOptions+transform(Class<T>,Transformation<T>,boolean)",,761,18,1,"/** 
 * Applies the given  {@link Transformation} for any decoded resource ofthe given type and throws if asked to transform an unknown resource type. <p>This will override previous calls to  {@link #dontTransform()}.
 * @param resourceClass  The type of resource to transform.
 * @param transformation The {@link Transformation} to apply.
 * @see #optionalTransform(Class,Transformation)
 */
","/**
   * Applies the given {@link Transformation} for any decoded resource of
   * the given type and throws if asked to transform an unknown resource type.
   *
   * <p>This will override previous calls to {@link #dontTransform()}.
   *
   * @param resourceClass  The type of resource to transform.
   * @param transformation The {@link Transformation} to apply.
   * @see #optionalTransform(Class, Transformation)
   */
  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
  @SuppressWarnings(""CheckResult"")
  @NonNull
  @CheckResult
  public <T> RequestOptions transform(
      @NonNull Class<T> resourceClass, @NonNull Transformation<T> transformation) {
    return transform(resourceClass, transformation, /*isRequired=*/ true);
  }",True
133,dontTransform(),Method,noTransformation() dontTransform(),com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleAndThenDontTransform_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleAndAppliedDontTransform_isTrue() com.bumptech.glide.request.RequestOptionsTest+testIsTransformationSet_afterDontTransform_isFalse() com.bumptech.glide.request.RequestOptionsTest+testIsTransformationAllowed_afterDontTransform_isFalse() com.bumptech.glide.request.RequestOptionsTest+testIsTransformationRequired_afterDontTransform_isFalse() com.bumptech.glide.request.RequestOptionsTest+testApplyingDontTransform_overridesTransformations() com.bumptech.glide.request.RequestOptionsTest+testApplyingTransformation_overridesDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withDontTransform_overridesTransformations() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withTransformation_overridesDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingDefaultOptions_withDontTransform_retainsDontTransform(),com.bumptech.glide.request.RequestOptions+dontTransform() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+dontTransform() java.util.Map+clear() java.util.Map+clear() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked(),com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+transformations com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+TRANSFORMATION com.bumptech.glide.request.RequestOptions+isTransformationRequired com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+TRANSFORMATION_REQUIRED com.bumptech.glide.request.RequestOptions+isTransformationAllowed com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+TRANSFORMATION_ALLOWED com.bumptech.glide.request.RequestOptions+isScaleOnlyOrNoTransform,622,21,1,"/** 
 * Removes all applied  {@link Transformation Transformations} for allresource classes and allows unknown resource types to be transformed without throwing an exception.
 */
","/**
   * Removes all applied {@link Transformation Transformations} for all
   * resource classes and allows unknown resource types to be transformed without throwing an
   * exception.
   */
  @NonNull
  @CheckResult
  public RequestOptions dontTransform() {
    if (isAutoCloneEnabled) {
      return clone().dontTransform();
    }

    transformations.clear();
    fields &= ~TRANSFORMATION;
    isTransformationRequired = false;
    fields &= ~TRANSFORMATION_REQUIRED;
    isTransformationAllowed = false;
    fields |= TRANSFORMATION_ALLOWED;
    isScaleOnlyOrNoTransform = true;
    return selfOrThrowIfLocked();
  }",True
134,dontAnimate(),Method,noAnimation(),com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withScaleOnlyAndAppliedWithoutTransform_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleOnlyAndAppliedWithoutTransform_isFalse(),"com.bumptech.glide.request.RequestOptions+set(Option<T>,T) com.bumptech.glide.request.RequestOptions+set(Option<T>,T)",com.bumptech.glide.load.resource.gif.GifOptions+DISABLE_ANIMATION,476,14,1,"/** 
 * Disables resource decoders that return animated resources so any resource returned will be static. <p> To disable transitions (fades etc) use {@link com.bumptech.glide.TransitionOptions#dontTransition()}</p>
 */
","/**
   * Disables resource decoders that return animated resources so any resource returned will be
   * static.
   *
   * <p> To disable transitions (fades etc) use
   * {@link com.bumptech.glide.TransitionOptions#dontTransition()}</p>
   */
  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
  @SuppressWarnings(""CheckResult"")
  @NonNull
  @CheckResult
  public RequestOptions dontAnimate() {
    return set(GifOptions.DISABLE_ANIMATION, true);
  }",True
135,apply(RequestOptions),Method,apply(RequestOptions),com.bumptech.glide.RequestBuilder+apply(RequestOptions) com.bumptech.glide.RequestManager+updateRequestOptions(RequestOptions) com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleAndAppliedDontTransform_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withDontTransformAndAppliedNonScaleTransform_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleOnly_andAppliedWithScaleOnly_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withScaleOnlyAndAppliedWithoutTransform_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleOnlyAndAppliedWithoutTransform_isFalse() com.bumptech.glide.request.RequestOptionsTest+testIsTransformationSet_afterApplyingOptionsWithTransform_isTrue() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withDontTransform_overridesTransformations() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withTransformation_overridesDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingDefaultOptions_withDontTransform_retainsDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingDefaultOptions_withTransform_retrainsTransform() com.bumptech.glide.request.RequestOptionsTest+placeholderIdFlag_afterApplyingIdViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+placeholderFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+fallbackFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+fallbackIdFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+errorFlag_afterApplyingViaOtherRequestOptions_isSet() com.bumptech.glide.request.RequestOptionsTest+errorIdFlag_afterApplyingViaOtherRequestOptions_isSet(),"com.bumptech.glide.request.RequestOptions+apply(RequestOptions) com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+clone() com.bumptech.glide.request.RequestOptions+apply(RequestOptions) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) java.util.Map+putAll(Map) java.util.Map+putAll(Map) com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int) java.util.Map+clear() java.util.Map+clear() com.bumptech.glide.load.Options+putAll(Options) com.bumptech.glide.load.Options+putAll(Options) com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked() com.bumptech.glide.request.RequestOptions+selfOrThrowIfLocked()",com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+SIZE_MULTIPLIER com.bumptech.glide.request.RequestOptions+sizeMultiplier com.bumptech.glide.request.RequestOptions+sizeMultiplier com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+USE_UNLIMITED_SOURCE_GENERATORS_POOL com.bumptech.glide.request.RequestOptions+useUnlimitedSourceGeneratorsPool com.bumptech.glide.request.RequestOptions+useUnlimitedSourceGeneratorsPool com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+USE_ANIMATION_POOL com.bumptech.glide.request.RequestOptions+useAnimationPool com.bumptech.glide.request.RequestOptions+useAnimationPool com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+DISK_CACHE_STRATEGY com.bumptech.glide.request.RequestOptions+diskCacheStrategy com.bumptech.glide.request.RequestOptions+diskCacheStrategy com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+PRIORITY com.bumptech.glide.request.RequestOptions+priority com.bumptech.glide.request.RequestOptions+priority com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+ERROR_PLACEHOLDER com.bumptech.glide.request.RequestOptions+errorPlaceholder com.bumptech.glide.request.RequestOptions+errorPlaceholder com.bumptech.glide.request.RequestOptions+errorId com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+ERROR_ID com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+ERROR_ID com.bumptech.glide.request.RequestOptions+errorId com.bumptech.glide.request.RequestOptions+errorId com.bumptech.glide.request.RequestOptions+errorPlaceholder com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+ERROR_PLACEHOLDER com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+PLACEHOLDER com.bumptech.glide.request.RequestOptions+placeholderDrawable com.bumptech.glide.request.RequestOptions+placeholderDrawable com.bumptech.glide.request.RequestOptions+placeholderId com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+PLACEHOLDER_ID com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+PLACEHOLDER_ID com.bumptech.glide.request.RequestOptions+placeholderId com.bumptech.glide.request.RequestOptions+placeholderId com.bumptech.glide.request.RequestOptions+placeholderDrawable com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+PLACEHOLDER com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+IS_CACHEABLE com.bumptech.glide.request.RequestOptions+isCacheable com.bumptech.glide.request.RequestOptions+isCacheable com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+OVERRIDE com.bumptech.glide.request.RequestOptions+overrideWidth com.bumptech.glide.request.RequestOptions+overrideWidth com.bumptech.glide.request.RequestOptions+overrideHeight com.bumptech.glide.request.RequestOptions+overrideHeight com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+SIGNATURE com.bumptech.glide.request.RequestOptions+signature com.bumptech.glide.request.RequestOptions+signature com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+RESOURCE_CLASS com.bumptech.glide.request.RequestOptions+resourceClass com.bumptech.glide.request.RequestOptions+resourceClass com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+FALLBACK com.bumptech.glide.request.RequestOptions+fallbackDrawable com.bumptech.glide.request.RequestOptions+fallbackDrawable com.bumptech.glide.request.RequestOptions+fallbackId com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+FALLBACK_ID com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+FALLBACK_ID com.bumptech.glide.request.RequestOptions+fallbackId com.bumptech.glide.request.RequestOptions+fallbackId com.bumptech.glide.request.RequestOptions+fallbackDrawable com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+FALLBACK com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+THEME com.bumptech.glide.request.RequestOptions+theme com.bumptech.glide.request.RequestOptions+theme com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+TRANSFORMATION_ALLOWED com.bumptech.glide.request.RequestOptions+isTransformationAllowed com.bumptech.glide.request.RequestOptions+isTransformationAllowed com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+TRANSFORMATION_REQUIRED com.bumptech.glide.request.RequestOptions+isTransformationRequired com.bumptech.glide.request.RequestOptions+isTransformationRequired com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+TRANSFORMATION com.bumptech.glide.request.RequestOptions+transformations com.bumptech.glide.request.RequestOptions+transformations com.bumptech.glide.request.RequestOptions+isScaleOnlyOrNoTransform com.bumptech.glide.request.RequestOptions+isScaleOnlyOrNoTransform com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+ONLY_RETRIEVE_FROM_CACHE com.bumptech.glide.request.RequestOptions+onlyRetrieveFromCache com.bumptech.glide.request.RequestOptions+onlyRetrieveFromCache com.bumptech.glide.request.RequestOptions+isTransformationAllowed com.bumptech.glide.request.RequestOptions+transformations com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+TRANSFORMATION com.bumptech.glide.request.RequestOptions+isTransformationRequired com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+TRANSFORMATION_REQUIRED com.bumptech.glide.request.RequestOptions+isScaleOnlyOrNoTransform com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+fields com.bumptech.glide.request.RequestOptions+options com.bumptech.glide.request.RequestOptions+options,4023,111,1,"/** 
 * Updates this options set with any options that are explicitly set in the given {@code RequestOptions} object and returns this object if {@link #autoClone()} is disabled ora new  {@code RequestOptions} object if {@link #autoClone()} is enabled.<p> {@code #apply} only replaces those values that are explicitly set in the given{@code RequestOptions}. If you need to completely reset all previously set options, create a new  {@code RequestOptions} object instead of using this method.<p>The options that will be set to values in the returned  {@code RequestOptions} object is theintersection of the set of options in this  {@code RequestOptions} object and the given{@code RequestOptions} object that were explicitly set. If the values of any of the optionsconflict, the values in the returned  {@code RequestOptions} object will be set to those in thegiven  {@code RequestOptions} object.
 */
","/**
   * Updates this options set with any options that are explicitly set in the given
   * {@code RequestOptions} object and returns this object if {@link #autoClone()} is disabled or
   * a new {@code RequestOptions} object if {@link #autoClone()} is enabled.
   *
   * <p>{@code #apply} only replaces those values that are explicitly set in the given
   * {@code RequestOptions}. If you need to completely reset all previously set options, create a
   * new {@code RequestOptions} object instead of using this method.
   *
   * <p>The options that will be set to values in the returned {@code RequestOptions} object is the
   * intersection of the set of options in this {@code RequestOptions} object and the given
   * {@code RequestOptions} object that were explicitly set. If the values of any of the options
   * conflict, the values in the returned {@code RequestOptions} object will be set to those in the
   * given {@code RequestOptions} object.
   */
  @NonNull
  @CheckResult
  public RequestOptions apply(@NonNull RequestOptions other) {
    if (isAutoCloneEnabled) {
      return clone().apply(other);
    }

    if (isSet(other.fields, SIZE_MULTIPLIER)) {
      sizeMultiplier = other.sizeMultiplier;
    }
    if (isSet(other.fields, USE_UNLIMITED_SOURCE_GENERATORS_POOL)) {
      useUnlimitedSourceGeneratorsPool = other.useUnlimitedSourceGeneratorsPool;
    }
    if (isSet(other.fields, USE_ANIMATION_POOL)) {
      useAnimationPool = other.useAnimationPool;
    }
    if (isSet(other.fields, DISK_CACHE_STRATEGY)) {
      diskCacheStrategy = other.diskCacheStrategy;
    }
    if (isSet(other.fields, PRIORITY)) {
      priority = other.priority;
    }
    if (isSet(other.fields, ERROR_PLACEHOLDER)) {
      errorPlaceholder = other.errorPlaceholder;
      errorId = 0;
      fields &= ~ERROR_ID;
    }
    if (isSet(other.fields, ERROR_ID)) {
      errorId = other.errorId;
      errorPlaceholder = null;
      fields &= ~ERROR_PLACEHOLDER;
    }
    if (isSet(other.fields, PLACEHOLDER)) {
      placeholderDrawable = other.placeholderDrawable;
      placeholderId = 0;
      fields &= ~PLACEHOLDER_ID;
    }
    if (isSet(other.fields, PLACEHOLDER_ID)) {
      placeholderId = other.placeholderId;
      placeholderDrawable = null;
      fields &= ~PLACEHOLDER;
    }
    if (isSet(other.fields, IS_CACHEABLE)) {
      isCacheable = other.isCacheable;
    }
    if (isSet(other.fields, OVERRIDE)) {
      overrideWidth = other.overrideWidth;
      overrideHeight = other.overrideHeight;
    }
    if (isSet(other.fields, SIGNATURE)) {
      signature = other.signature;
    }
    if (isSet(other.fields, RESOURCE_CLASS)) {
      resourceClass = other.resourceClass;
    }
    if (isSet(other.fields, FALLBACK)) {
      fallbackDrawable = other.fallbackDrawable;
      fallbackId = 0;
      fields &= ~FALLBACK_ID;
    }
    if (isSet(other.fields, FALLBACK_ID)) {
      fallbackId = other.fallbackId;
      fallbackDrawable = null;
      fields &= ~FALLBACK;
    }
    if (isSet(other.fields, THEME)) {
      theme = other.theme;
    }
    if (isSet(other.fields, TRANSFORMATION_ALLOWED)) {
      isTransformationAllowed = other.isTransformationAllowed;
    }
    if (isSet(other.fields, TRANSFORMATION_REQUIRED)) {
      isTransformationRequired = other.isTransformationRequired;
    }
    if (isSet(other.fields, TRANSFORMATION)) {
      transformations.putAll(other.transformations);
      isScaleOnlyOrNoTransform = other.isScaleOnlyOrNoTransform;
    }
    if (isSet(other.fields, ONLY_RETRIEVE_FROM_CACHE)) {
      onlyRetrieveFromCache = other.onlyRetrieveFromCache;
    }

    // Applying options with dontTransform() is expected to clear our transformations.
    if (!isTransformationAllowed) {
      transformations.clear();
      fields &= ~TRANSFORMATION;
      isTransformationRequired = false;
      fields &= ~TRANSFORMATION_REQUIRED;
      isScaleOnlyOrNoTransform = true;
    }

    fields |= other.fields;
    options.putAll(other.options);

    return selfOrThrowIfLocked();
  }",True
136,equals(Object),Method,,com.bumptech.glide.request.SingleRequest+isEquivalentTo(Request),"java.lang.Float+compare(float,float) java.lang.Float+compare(float,float) com.bumptech.glide.util.Util+bothNullOrEqual(Object,Object) com.bumptech.glide.util.Util+bothNullOrEqual(Object,Object) com.bumptech.glide.util.Util+bothNullOrEqual(Object,Object) com.bumptech.glide.util.Util+bothNullOrEqual(Object,Object) com.bumptech.glide.util.Util+bothNullOrEqual(Object,Object) com.bumptech.glide.util.Util+bothNullOrEqual(Object,Object) java.lang.Object+equals(Object) java.lang.Object+equals(Object) com.bumptech.glide.load.Options+equals(Object) com.bumptech.glide.load.Options+equals(Object) java.util.Map+equals(Object) java.util.Map+equals(Object) java.lang.Object+equals(Object) java.lang.Object+equals(Object) com.bumptech.glide.util.Util+bothNullOrEqual(Object,Object) com.bumptech.glide.util.Util+bothNullOrEqual(Object,Object) com.bumptech.glide.util.Util+bothNullOrEqual(Object,Object) com.bumptech.glide.util.Util+bothNullOrEqual(Object,Object)",com.bumptech.glide.request.RequestOptions+sizeMultiplier com.bumptech.glide.request.RequestOptions+sizeMultiplier com.bumptech.glide.request.RequestOptions+errorId com.bumptech.glide.request.RequestOptions+errorId com.bumptech.glide.request.RequestOptions+errorPlaceholder com.bumptech.glide.request.RequestOptions+errorPlaceholder com.bumptech.glide.request.RequestOptions+placeholderId com.bumptech.glide.request.RequestOptions+placeholderId com.bumptech.glide.request.RequestOptions+placeholderDrawable com.bumptech.glide.request.RequestOptions+placeholderDrawable com.bumptech.glide.request.RequestOptions+fallbackId com.bumptech.glide.request.RequestOptions+fallbackId com.bumptech.glide.request.RequestOptions+fallbackDrawable com.bumptech.glide.request.RequestOptions+fallbackDrawable com.bumptech.glide.request.RequestOptions+isCacheable com.bumptech.glide.request.RequestOptions+isCacheable com.bumptech.glide.request.RequestOptions+overrideHeight com.bumptech.glide.request.RequestOptions+overrideHeight com.bumptech.glide.request.RequestOptions+overrideWidth com.bumptech.glide.request.RequestOptions+overrideWidth com.bumptech.glide.request.RequestOptions+isTransformationRequired com.bumptech.glide.request.RequestOptions+isTransformationRequired com.bumptech.glide.request.RequestOptions+isTransformationAllowed com.bumptech.glide.request.RequestOptions+isTransformationAllowed com.bumptech.glide.request.RequestOptions+useUnlimitedSourceGeneratorsPool com.bumptech.glide.request.RequestOptions+useUnlimitedSourceGeneratorsPool com.bumptech.glide.request.RequestOptions+onlyRetrieveFromCache com.bumptech.glide.request.RequestOptions+onlyRetrieveFromCache com.bumptech.glide.request.RequestOptions+diskCacheStrategy com.bumptech.glide.request.RequestOptions+diskCacheStrategy com.bumptech.glide.request.RequestOptions+priority com.bumptech.glide.request.RequestOptions+priority com.bumptech.glide.request.RequestOptions+options com.bumptech.glide.request.RequestOptions+options com.bumptech.glide.request.RequestOptions+transformations com.bumptech.glide.request.RequestOptions+transformations com.bumptech.glide.request.RequestOptions+resourceClass com.bumptech.glide.request.RequestOptions+resourceClass com.bumptech.glide.request.RequestOptions+signature com.bumptech.glide.request.RequestOptions+signature com.bumptech.glide.request.RequestOptions+theme com.bumptech.glide.request.RequestOptions+theme,1418,28,1,,"@Override
  public boolean equals(Object o) {
    if (o instanceof RequestOptions) {
      RequestOptions other = (RequestOptions) o;
      return Float.compare(other.sizeMultiplier, sizeMultiplier) == 0
          && errorId == other.errorId
          && Util.bothNullOrEqual(errorPlaceholder, other.errorPlaceholder)
          && placeholderId == other.placeholderId
          && Util.bothNullOrEqual(placeholderDrawable, other.placeholderDrawable)
          && fallbackId == other.fallbackId
          && Util.bothNullOrEqual(fallbackDrawable, other.fallbackDrawable)
          && isCacheable == other.isCacheable
          && overrideHeight == other.overrideHeight
          && overrideWidth == other.overrideWidth
          && isTransformationRequired == other.isTransformationRequired
          && isTransformationAllowed == other.isTransformationAllowed
          && useUnlimitedSourceGeneratorsPool == other.useUnlimitedSourceGeneratorsPool
          && onlyRetrieveFromCache == other.onlyRetrieveFromCache
          && diskCacheStrategy.equals(other.diskCacheStrategy)
          && priority == other.priority
          && options.equals(other.options)
          && transformations.equals(other.transformations)
          && resourceClass.equals(other.resourceClass)
          && Util.bothNullOrEqual(signature, other.signature)
          && Util.bothNullOrEqual(theme, other.theme);
    }
    return false;
  }",True
137,hashCode(),Method,,,"com.bumptech.glide.util.Util+hashCode(float) com.bumptech.glide.util.Util+hashCode(float) com.bumptech.glide.util.Util+hashCode(int,int) com.bumptech.glide.util.Util+hashCode(int,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(int,int) com.bumptech.glide.util.Util+hashCode(int,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(int,int) com.bumptech.glide.util.Util+hashCode(int,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(boolean,int) com.bumptech.glide.util.Util+hashCode(boolean,int) com.bumptech.glide.util.Util+hashCode(int,int) com.bumptech.glide.util.Util+hashCode(int,int) com.bumptech.glide.util.Util+hashCode(int,int) com.bumptech.glide.util.Util+hashCode(int,int) com.bumptech.glide.util.Util+hashCode(boolean,int) com.bumptech.glide.util.Util+hashCode(boolean,int) com.bumptech.glide.util.Util+hashCode(boolean,int) com.bumptech.glide.util.Util+hashCode(boolean,int) com.bumptech.glide.util.Util+hashCode(boolean,int) com.bumptech.glide.util.Util+hashCode(boolean,int) com.bumptech.glide.util.Util+hashCode(boolean,int) com.bumptech.glide.util.Util+hashCode(boolean,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int) com.bumptech.glide.util.Util+hashCode(Object,int)",com.bumptech.glide.request.RequestOptions+sizeMultiplier com.bumptech.glide.request.RequestOptions+errorId com.bumptech.glide.request.RequestOptions+errorPlaceholder com.bumptech.glide.request.RequestOptions+placeholderId com.bumptech.glide.request.RequestOptions+placeholderDrawable com.bumptech.glide.request.RequestOptions+fallbackId com.bumptech.glide.request.RequestOptions+fallbackDrawable com.bumptech.glide.request.RequestOptions+isCacheable com.bumptech.glide.request.RequestOptions+overrideHeight com.bumptech.glide.request.RequestOptions+overrideWidth com.bumptech.glide.request.RequestOptions+isTransformationRequired com.bumptech.glide.request.RequestOptions+isTransformationAllowed com.bumptech.glide.request.RequestOptions+useUnlimitedSourceGeneratorsPool com.bumptech.glide.request.RequestOptions+onlyRetrieveFromCache com.bumptech.glide.request.RequestOptions+diskCacheStrategy com.bumptech.glide.request.RequestOptions+priority com.bumptech.glide.request.RequestOptions+options com.bumptech.glide.request.RequestOptions+transformations com.bumptech.glide.request.RequestOptions+resourceClass com.bumptech.glide.request.RequestOptions+signature com.bumptech.glide.request.RequestOptions+theme,1243,25,1,,"@Override
  public int hashCode() {
    int hashCode = Util.hashCode(sizeMultiplier);
    hashCode = Util.hashCode(errorId, hashCode);
    hashCode = Util.hashCode(errorPlaceholder, hashCode);
    hashCode = Util.hashCode(placeholderId, hashCode);
    hashCode = Util.hashCode(placeholderDrawable, hashCode);
    hashCode = Util.hashCode(fallbackId, hashCode);
    hashCode = Util.hashCode(fallbackDrawable, hashCode);
    hashCode = Util.hashCode(isCacheable, hashCode);
    hashCode = Util.hashCode(overrideHeight, hashCode);
    hashCode = Util.hashCode(overrideWidth, hashCode);
    hashCode = Util.hashCode(isTransformationRequired, hashCode);
    hashCode = Util.hashCode(isTransformationAllowed, hashCode);
    hashCode = Util.hashCode(useUnlimitedSourceGeneratorsPool, hashCode);
    hashCode = Util.hashCode(onlyRetrieveFromCache, hashCode);
    hashCode = Util.hashCode(diskCacheStrategy, hashCode);
    hashCode = Util.hashCode(priority, hashCode);
    hashCode = Util.hashCode(options, hashCode);
    hashCode = Util.hashCode(transformations, hashCode);
    hashCode = Util.hashCode(resourceClass, hashCode);
    hashCode = Util.hashCode(signature, hashCode);
    hashCode = Util.hashCode(theme, hashCode);
    return hashCode;
  }",True
138,lock(),Method,autoClone(),com.bumptech.glide.GlideBuilder+build(Context),,com.bumptech.glide.request.RequestOptions+isLocked,320,12,1,"/** 
 * Throws if any further mutations are attempted. <p> Once locked, the only way to unlock is to use  {@link #clone()} </p>
 */
","/**
   * Throws if any further mutations are attempted.
   *
   * <p> Once locked, the only way to unlock is to use {@link #clone()} </p>
   */
  @NonNull
  @SuppressWarnings(""unchecked"")
  public RequestOptions lock() {
    isLocked = true;
    // This is the only place we should not check locked.
    return this;
  }",True
139,autoClone(),Method,skipMemoryCacheOf(boolean) skipMemoryCacheOf(boolean) fitCenterTransform() centerInsideTransform() centerCropTransform() circleCropTransform() noTransformation() noAnimation(),"com.bumptech.glide.RequestBuilder+into(Y,RequestListener<TranscodeType>,RequestOptions) com.bumptech.glide.RequestManager+setRequestOptions(RequestOptions)",java.lang.IllegalStateException+IllegalStateException(String) com.bumptech.glide.request.RequestOptions+lock() com.bumptech.glide.request.RequestOptions+lock(),com.bumptech.glide.request.RequestOptions+isLocked com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled,658,17,1,"/** 
 * Similar to  {@link #lock()} except that mutations cause a {@link #clone()} operation to happenbefore the mutation resulting in all methods returning a new Object and leaving the original locked object unmodified. <p>Auto clone is not retained by cloned objects returned from mutations. The cloned objects are mutable and are not locked.
 */
","/**
   * Similar to {@link #lock()} except that mutations cause a {@link #clone()} operation to happen
   * before the mutation resulting in all methods returning a new Object and leaving the original
   * locked object unmodified.
   *
   * <p>Auto clone is not retained by cloned objects returned from mutations. The cloned objects
   * are mutable and are not locked.
   */
  @NonNull
  public RequestOptions autoClone() {
    if (isLocked && !isAutoCloneEnabled) {
      throw new IllegalStateException(""You cannot auto lock an already locked options object""
          + "", try clone() first"");
    }
    isAutoCloneEnabled = true;
    return lock();
  }",True
140,selfOrThrowIfLocked(),Method,"sizeMultiplier(float) useUnlimitedSourceGeneratorsPool(boolean) useAnimationPool(boolean) onlyRetrieveFromCache(boolean) diskCacheStrategy(DiskCacheStrategy) priority(Priority) placeholder(Drawable) placeholder(int) fallback(Drawable) fallback(int) error(Drawable) error(int) theme(Resources.Theme) skipMemoryCache(boolean) override(int,int) signature(Key) set(Option<T>,T) decode(Class<?>) transform(Transformation<Bitmap>,boolean) transform(Class<T>,Transformation<T>,boolean) dontTransform() apply(RequestOptions)",,java.lang.IllegalStateException+IllegalStateException(String),com.bumptech.glide.request.RequestOptions+isLocked,237,8,2,,"@NonNull
  @SuppressWarnings(""unchecked"")
  private RequestOptions selfOrThrowIfLocked() {
    if (isLocked) {
      throw new IllegalStateException(""You cannot modify locked RequestOptions, consider clone()"");
    }
    return this;
  }",True
141,isAutoCloneEnabled(),Method,,com.bumptech.glide.test.GlideOptions+test() com.bumptech.glide.test.GlideOptions+centerCrop() com.bumptech.glide.test.GlideOptions+centerCrop() com.bumptech.glide.test.GlideOptions+test() com.bumptech.glide.test.GlideOptions+test() com.bumptech.glide.test.GlideOptions+squareThumb(),,com.bumptech.glide.request.RequestOptions+isAutoCloneEnabled,75,3,4,,"protected boolean isAutoCloneEnabled() {
    return isAutoCloneEnabled;
  }",True
142,isDiskCacheStrategySet(),Method,,com.bumptech.glide.RequestBuilder+load(byte[]) com.bumptech.glide.request.RequestOptionsTest+isDiskCacheStrategySet_withoutDiskCacheStrategy_isFalse() com.bumptech.glide.request.RequestOptionsTest+isDiskCacheStrategySet_withDiskCacheStrategyDefault_isTrue() com.bumptech.glide.request.RequestOptionsTest+isDiskCacheStrategySet_withDiskCacheStrategyNonDefault_isTrue(),com.bumptech.glide.request.RequestOptions+isSet(int) com.bumptech.glide.request.RequestOptions+isSet(int),com.bumptech.glide.request.RequestOptions+DISK_CACHE_STRATEGY,90,3,17,,"public final boolean isDiskCacheStrategySet() {
    return isSet(DISK_CACHE_STRATEGY);
  }",True
143,isSkipMemoryCacheSet(),Method,,com.bumptech.glide.RequestBuilder+load(byte[]) com.bumptech.glide.request.RequestOptionsTest+isSkipMemoryCacheSet_withoutSkipMemoryCache_isFalse() com.bumptech.glide.request.RequestOptionsTest+isSkipMemoryCacheSet_withSkipMemoryCacheTrue_isTrue() com.bumptech.glide.request.RequestOptionsTest+isSkipMemoryCacheSet_withSkipMemoryCacheFalse_isTrue(),com.bumptech.glide.request.RequestOptions+isSet(int) com.bumptech.glide.request.RequestOptions+isSet(int),com.bumptech.glide.request.RequestOptions+IS_CACHEABLE,81,3,17,,"public final boolean isSkipMemoryCacheSet() {
    return isSet(IS_CACHEABLE);
  }",True
144,getTransformations(),Method,,"com.bumptech.glide.request.SingleRequest+onSizeReady(int,int) com.bumptech.glide.request.RequestOptionsTest+testApplyingDontTransform_overridesTransformations() com.bumptech.glide.request.RequestOptionsTest+testApplyingTransformation_overridesDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withDontTransform_overridesTransformations() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withTransformation_overridesDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingDefaultOptions_withDontTransform_retainsDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingDefaultOptions_withTransform_retrainsTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyMultiTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyMultiTransform()",,com.bumptech.glide.request.RequestOptions+transformations,111,4,17,,"@NonNull
  public final Map<Class<?>, Transformation<?>> getTransformations() {
    return transformations;
  }",True
145,isTransformationRequired(),Method,,"com.bumptech.glide.request.SingleRequest+onSizeReady(int,int) com.bumptech.glide.request.RequestOptionsTest+testIsTransformationRequired_byDefault_isFalse() com.bumptech.glide.request.RequestOptionsTest+testIsTransformationRequired_afterDontTransform_isFalse() com.bumptech.glide.request.RequestOptionsTest+testApplyingDontTransform_overridesTransformations() com.bumptech.glide.request.RequestOptionsTest+testApplyingTransformation_overridesDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withDontTransform_overridesTransformations() com.bumptech.glide.request.RequestOptionsTest+testApplyingOptions_withTransformation_overridesDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingDefaultOptions_withDontTransform_retainsDontTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyingDefaultOptions_withTransform_retrainsTransform() com.bumptech.glide.request.RequestOptionsTest+testApplyMultiTransform()",,com.bumptech.glide.request.RequestOptions+isTransformationRequired,126,4,17,,"@SuppressWarnings(""WeakerAccess"")
  public final boolean isTransformationRequired() {
    return isTransformationRequired;
  }",True
146,getOptions(),Method,,"com.bumptech.glide.Glide+Glide(Context,Engine,MemoryCache,BitmapPool,ArrayPool,RequestManagerRetriever,ConnectivityMonitorFactory,int,RequestOptions,Map<Class<?>,TransitionOptions<?,?>>,List<RequestListener<Object>>) com.bumptech.glide.request.SingleRequest+onSizeReady(int,int)",,com.bumptech.glide.request.RequestOptions+options,70,4,17,,"@NonNull
  public final Options getOptions() {
    return options;
  }",True
147,getResourceClass(),Method,,"com.bumptech.glide.request.SingleRequest+onSizeReady(int,int)",,com.bumptech.glide.request.RequestOptions+resourceClass,83,4,17,,"@NonNull
  public final Class<?> getResourceClass() {
    return resourceClass;
  }",True
148,getDiskCacheStrategy(),Method,,"com.bumptech.glide.request.SingleRequest+onSizeReady(int,int)",,com.bumptech.glide.request.RequestOptions+diskCacheStrategy,100,4,17,,"@NonNull
  public final DiskCacheStrategy getDiskCacheStrategy() {
    return diskCacheStrategy;
  }",True
149,getErrorPlaceholder(),Method,,com.bumptech.glide.request.SingleRequest+getErrorDrawable(),,com.bumptech.glide.request.RequestOptions+errorPlaceholder,126,5,17,,"@SuppressWarnings(""WeakerAccess"")
  @Nullable
  public final Drawable getErrorPlaceholder() {
    return errorPlaceholder;
  }",True
150,getErrorId(),Method,,com.bumptech.glide.request.SingleRequest+getErrorDrawable() com.bumptech.glide.request.SingleRequest+getErrorDrawable(),,com.bumptech.glide.request.RequestOptions+errorId,91,4,17,,"@SuppressWarnings(""WeakerAccess"")
  public final int getErrorId() {
    return errorId;
  }",True
151,getPlaceholderId(),Method,,com.bumptech.glide.request.SingleRequest+getPlaceholderDrawable() com.bumptech.glide.request.SingleRequest+getPlaceholderDrawable(),,com.bumptech.glide.request.RequestOptions+placeholderId,103,4,17,,"@SuppressWarnings(""WeakerAccess"")
  public final int getPlaceholderId() {
    return placeholderId;
  }",True
152,getPlaceholderDrawable(),Method,,com.bumptech.glide.request.SingleRequest+getPlaceholderDrawable(),,com.bumptech.glide.request.RequestOptions+placeholderDrawable,132,5,17,,"@SuppressWarnings(""WeakerAccess"")
  @Nullable
  public final Drawable getPlaceholderDrawable() {
    return placeholderDrawable;
  }",True
153,getFallbackId(),Method,,com.bumptech.glide.request.SingleRequest+getFallbackDrawable() com.bumptech.glide.request.SingleRequest+getFallbackDrawable(),,com.bumptech.glide.request.RequestOptions+fallbackId,97,4,17,,"@SuppressWarnings(""WeakerAccess"")
  public final int getFallbackId() {
    return fallbackId;
  }",True
154,getFallbackDrawable(),Method,,com.bumptech.glide.request.SingleRequest+getFallbackDrawable() com.bumptech.glide.request.RequestOptionsTest+getFallback_afterApplyingOptionsWithFallbackDrawable_returnsNewDrawable(),,com.bumptech.glide.request.RequestOptions+fallbackDrawable,126,5,17,,"@SuppressWarnings(""WeakerAccess"")
  @Nullable
  public final Drawable getFallbackDrawable() {
    return fallbackDrawable;
  }",True
155,getTheme(),Method,,com.bumptech.glide.request.SingleRequest+loadDrawable(int) com.bumptech.glide.request.SingleRequest+loadDrawable(int),,com.bumptech.glide.request.RequestOptions+theme,75,4,17,,"@Nullable
  public final Resources.Theme getTheme() {
    return theme;
  }",True
156,isMemoryCacheable(),Method,,"com.bumptech.glide.request.SingleRequest+onSizeReady(int,int) com.bumptech.glide.RequestBuilder+isSkipMemoryCacheWithCompletePreviousRequest(RequestOptions,Request)",,com.bumptech.glide.request.RequestOptions+isCacheable,106,4,17,,"@SuppressWarnings(""WeakerAccess"")
  public final boolean isMemoryCacheable() {
    return isCacheable;
  }",True
157,getSignature(),Method,,"com.bumptech.glide.request.SingleRequest+onSizeReady(int,int)",,com.bumptech.glide.request.RequestOptions+signature,70,4,17,,"@NonNull
  public final Key getSignature() {
    return signature;
  }",True
158,isPrioritySet(),Method,,"com.bumptech.glide.RequestBuilder+buildThumbnailRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions)",com.bumptech.glide.request.RequestOptions+isSet(int) com.bumptech.glide.request.RequestOptions+isSet(int),com.bumptech.glide.request.RequestOptions+PRIORITY,70,3,17,,"public final boolean isPrioritySet() {
    return isSet(PRIORITY);
  }",True
159,getPriority(),Method,,"com.bumptech.glide.RequestBuilder+getThumbnailPriority(Priority) com.bumptech.glide.RequestBuilder+buildRequest(Target<TranscodeType>,RequestListener<TranscodeType>,RequestOptions) com.bumptech.glide.RequestBuilder+buildRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions) com.bumptech.glide.RequestBuilder+buildThumbnailRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions)",,com.bumptech.glide.request.RequestOptions+priority,73,4,17,,"@NonNull
  public final Priority getPriority() {
    return priority;
  }",True
160,getOverrideWidth(),Method,,"com.bumptech.glide.RequestBuilder+buildRequest(Target<TranscodeType>,RequestListener<TranscodeType>,RequestOptions) com.bumptech.glide.RequestBuilder+buildRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions) com.bumptech.glide.RequestBuilder+buildRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions) com.bumptech.glide.RequestBuilder+buildThumbnailRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions) com.bumptech.glide.RequestBuilder+buildThumbnailRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions)",,com.bumptech.glide.request.RequestOptions+overrideWidth,67,3,17,,"public final int getOverrideWidth() {
    return overrideWidth;
  }",True
161,isValidOverride(),Method,,"com.bumptech.glide.RequestBuilder+buildRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions) com.bumptech.glide.RequestBuilder+buildThumbnailRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions)","com.bumptech.glide.util.Util+isValidDimensions(int,int) com.bumptech.glide.util.Util+isValidDimensions(int,int)",com.bumptech.glide.request.RequestOptions+overrideWidth com.bumptech.glide.request.RequestOptions+overrideHeight,110,3,17,,"public final boolean isValidOverride() {
    return Util.isValidDimensions(overrideWidth, overrideHeight);
  }",True
162,getOverrideHeight(),Method,,"com.bumptech.glide.RequestBuilder+buildRequest(Target<TranscodeType>,RequestListener<TranscodeType>,RequestOptions) com.bumptech.glide.RequestBuilder+buildRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions) com.bumptech.glide.RequestBuilder+buildRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions) com.bumptech.glide.RequestBuilder+buildThumbnailRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions) com.bumptech.glide.RequestBuilder+buildThumbnailRequestRecursive(Target<TranscodeType>,RequestListener<TranscodeType>,RequestCoordinator,TransitionOptions<?,? super TranscodeType>,Priority,int,int,RequestOptions)",,com.bumptech.glide.request.RequestOptions+overrideHeight,69,3,17,,"public final int getOverrideHeight() {
    return overrideHeight;
  }",True
163,getSizeMultiplier(),Method,,"com.bumptech.glide.request.SingleRequest+onSizeReady(int,int)",,com.bumptech.glide.request.RequestOptions+sizeMultiplier,71,3,17,,"public final float getSizeMultiplier() {
    return sizeMultiplier;
  }",True
164,isScaleOnlyOrNoTransform(),Method,,"com.bumptech.glide.request.SingleRequest+onSizeReady(int,int) com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_byDefault_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withFitCenter_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withFitCenter_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCenterInside_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCenterInside_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCenterCrop_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCenterCrop_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCircleCrop_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCircleCrop_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withBitmapTransformation_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withBitmapTransformation_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCustomTransformation_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withCustomTransformation_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withDownsampleStrategy_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleAndThenDontTransform_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleAndAppliedDontTransform_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withDontTransformAndAppliedNonScaleTransform_isFalse() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleOnly_andAppliedWithScaleOnly_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withScaleOnlyAndAppliedWithoutTransform_isTrue() com.bumptech.glide.request.RequestOptionsTest+isScaleOnlyOrNoTransform_withNonScaleOnlyAndAppliedWithoutTransform_isFalse()",,com.bumptech.glide.request.RequestOptions+isScaleOnlyOrNoTransform,77,3,0,,"boolean isScaleOnlyOrNoTransform() {
    return isScaleOnlyOrNoTransform;
  }",True
165,isSet(int),Method,isTransformationSet() isDiskCacheStrategySet() isSkipMemoryCacheSet() isPrioritySet(),,"com.bumptech.glide.request.RequestOptions+isSet(int,int) com.bumptech.glide.request.RequestOptions+isSet(int,int)",com.bumptech.glide.request.RequestOptions+fields,69,3,2,,"private boolean isSet(int flag) {
    return isSet(fields, flag);
  }",True
166,getUseUnlimitedSourceGeneratorsPool(),Method,,"com.bumptech.glide.request.SingleRequest+onSizeReady(int,int)",,com.bumptech.glide.request.RequestOptions+useUnlimitedSourceGeneratorsPool,157,4,17,,"@SuppressWarnings(""PMD.BooleanGetMethodName"")
  public final boolean getUseUnlimitedSourceGeneratorsPool() {
    return useUnlimitedSourceGeneratorsPool;
  }",True
167,getUseAnimationPool(),Method,,"com.bumptech.glide.request.SingleRequest+onSizeReady(int,int)",,com.bumptech.glide.request.RequestOptions+useAnimationPool,125,4,17,,"@SuppressWarnings(""PMD.BooleanGetMethodName"")
  public final boolean getUseAnimationPool() {
    return useAnimationPool;
  }",True
168,getOnlyRetrieveFromCache(),Method,,"com.bumptech.glide.request.SingleRequest+onSizeReady(int,int)",,com.bumptech.glide.request.RequestOptions+onlyRetrieveFromCache,135,4,17,,"@SuppressWarnings(""PMD.BooleanGetMethodName"")
  public final boolean getOnlyRetrieveFromCache() {
    return onlyRetrieveFromCache;
  }",True
