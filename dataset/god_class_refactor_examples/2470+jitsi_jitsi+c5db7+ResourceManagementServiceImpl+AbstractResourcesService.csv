index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,logger,logger the logger used by the resource management service impl class and its instances for logging output ,Field,,,,,244,6,26,"/** 
 * The <tt>Logger</tt> used by the <tt>ResourceManagementServiceImpl</tt> class and its instances for logging output.
 */
","/**
     * The <tt>Logger</tt> used by the <tt>ResourceManagementServiceImpl</tt>
     * class and its instances for logging output.
     */
    private static final Logger logger
        = Logger.getLogger(ResourceManagementServiceImpl.class);",False,False,"/** 
 * The <tt>Logger</tt> used by the <tt>ResourceManagementServiceImpl</tt> class and its instances for logging output.
 */
",False,"/** 
 * The <tt>Logger</tt> used by the <tt>ResourceManagementServiceImpl</tt> class and its instances for logging output.
 */
"
2,colorResources,color resources resources for currently loaded color pack ,Field,,,,,117,4,2,"/** 
 * Resources for currently loaded <tt>ColorPack</tt>.
 */
","/**
     * Resources for currently loaded <tt>ColorPack</tt>.
     */
    private Map<String, String> colorResources;",True,True,"/** 
 * Resources for currently loaded <tt>ColorPack</tt>.
 */
",False,"/** 
 * Resources for currently loaded <tt>ColorPack</tt>.
 */
"
3,colorPack,color pack currently loaded color pack ,Field,,,,,90,4,2,"/** 
 * Currently loaded color pack.
 */
","/**
     * Currently loaded color pack.
     */
    private ResourcePack colorPack = null;",True,True,"/** 
 * Currently loaded color pack.
 */
",False,"/** 
 * Currently loaded color pack.
 */
"
4,imageResources,image resources resources for currently loaded image pack ,Field,,,,,117,4,2,"/** 
 * Resources for currently loaded <tt>ImagePack</tt>.
 */
","/**
     * Resources for currently loaded <tt>ImagePack</tt>.
     */
    private Map<String, String> imageResources;",True,True,"/** 
 * Resources for currently loaded <tt>ImagePack</tt>.
 */
",False,"/** 
 * Resources for currently loaded <tt>ImagePack</tt>.
 */
"
5,imagePack,image pack currently loaded image pack ,Field,,,,,90,4,2,"/** 
 * Currently loaded image pack.
 */
","/**
     * Currently loaded image pack.
     */
    private ResourcePack imagePack = null;",False,True,"/** 
 * Currently loaded image pack.
 */
",False,"/** 
 * Currently loaded image pack.
 */
"
6,languageResources,language resources resources for currently loaded language pack ,Field,,,,,123,4,2,"/** 
 * Resources for currently loaded <tt>LanguagePack</tt>.
 */
","/**
     * Resources for currently loaded <tt>LanguagePack</tt>.
     */
    private Map<String, String> languageResources;",True,True,"/** 
 * Resources for currently loaded <tt>LanguagePack</tt>.
 */
",False,"/** 
 * Resources for currently loaded <tt>LanguagePack</tt>.
 */
"
7,languagePack,language pack currently loaded language pack ,Field,,,,,96,4,2,"/** 
 * Currently loaded language pack.
 */
","/**
     * Currently loaded language pack.
     */
    private LanguagePack languagePack = null;",True,True,"/** 
 * Currently loaded language pack.
 */
",False,"/** 
 * Currently loaded language pack.
 */
"
8,languageLocale,language locale the link locale of language resources so that the cachingof the latter can be used when a string with the same locale is requested ,Field,,,,,228,6,2,"/** 
 * The  {@link Locale} of <code>languageResources</code> so that the cachingof the latter can be used when a string with the same <code>Locale</code> is requested.
 */
","/**
     * The {@link Locale} of <code>languageResources</code> so that the caching
     * of the latter can be used when a string with the same <code>Locale</code>
     * is requested.
     */
    private Locale languageLocale;",True,True,"/** 
 * The  {@link Locale} of <code>languageResources</code> so that the cachingof the latter can be used when a string with the same <code>Locale</code> is requested.
 */
",False,"/** 
 * The  {@link Locale} of <code>languageResources</code> so that the cachingof the latter can be used when a string with the same <code>Locale</code> is requested.
 */
"
9,settingsResources,settings resources resources for currently loaded settings pack ,Field,,,,,123,4,2,"/** 
 * Resources for currently loaded <tt>SettingsPack</tt>.
 */
","/**
     * Resources for currently loaded <tt>SettingsPack</tt>.
     */
    private Map<String, String> settingsResources;",True,True,"/** 
 * Resources for currently loaded <tt>SettingsPack</tt>.
 */
",False,"/** 
 * Resources for currently loaded <tt>SettingsPack</tt>.
 */
"
10,settingsPack,settings pack currently loaded settings pack ,Field,,,,,96,4,2,"/** 
 * Currently loaded settings pack.
 */
","/**
     * Currently loaded settings pack.
     */
    private ResourcePack settingsPack = null;",True,True,"/** 
 * Currently loaded settings pack.
 */
",False,"/** 
 * Currently loaded settings pack.
 */
"
11,soundResources,sound resources resources for currently loaded sound pack ,Field,,,,,117,4,2,"/** 
 * Resources for currently loaded <tt>SoundPack</tt>.
 */
","/**
     * Resources for currently loaded <tt>SoundPack</tt>.
     */
    private Map<String, String> soundResources;",True,True,"/** 
 * Resources for currently loaded <tt>SoundPack</tt>.
 */
",False,"/** 
 * Resources for currently loaded <tt>SoundPack</tt>.
 */
"
12,soundPack,sound pack currently loaded sound pack ,Field,,,,,90,4,2,"/** 
 * Currently loaded sound pack.
 */
","/**
     * Currently loaded sound pack.
     */
    private ResourcePack soundPack = null;",True,True,"/** 
 * Currently loaded sound pack.
 */
",False,"/** 
 * Currently loaded sound pack.
 */
"
13,skinResources,skin resources resources for currently loaded skin pack ,Field,,,,,115,4,2,"/** 
 * Resources for currently loaded <tt>SkinPack</tt>.
 */
","/**
     * Resources for currently loaded <tt>SkinPack</tt>.
     */
    private Map<String, String> skinResources;",False,False,"/** 
 * Resources for currently loaded <tt>SkinPack</tt>.
 */
",False,"/** 
 * Resources for currently loaded <tt>SkinPack</tt>.
 */
"
14,skinPack,skin pack currently loaded skin pack ,Field,,,,,92,4,2,"/** 
 * Currently loaded <tt>SkinPack</tt>.
 */
","/**
     * Currently loaded <tt>SkinPack</tt>.
     */
    private SkinPack skinPack = null;",True,True,"/** 
 * Currently loaded <tt>SkinPack</tt>.
 */
",False,"/** 
 * Currently loaded <tt>SkinPack</tt>.
 */
"
15,uiService,ui service ui service reference ,Field,,,,,80,4,2,"/** 
 * UI Service reference.
 */
","/**
     * UI Service reference.
     */
    private UIService uiService = null;",False,False,"/** 
 * UI Service reference.
 */
",False,"/** 
 * UI Service reference.
 */
"
16,ResourceManagementServiceImpl(),resource management service impl initializes already registered default resource packs ,Method,,,"org.osgi.framework.BundleContext+addServiceListener(ServiceListener) org.osgi.framework.BundleContext+addServiceListener(ServiceListener) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) org.jitsi.service.configuration.ConfigurationService+getProperty(String) net.java.sip.communicator.impl.resources.ResourceManagementActivator+getConfigurationService() net.java.sip.communicator.impl.resources.ResourceManagementActivator+getConfigurationService() org.jitsi.service.configuration.ConfigurationService+getProperty(String) java.util.Locale+setDefault(Locale) java.util.Locale+setDefault(Locale) net.java.sip.communicator.service.resources.ResourceManagementServiceUtils+getLocale(String) net.java.sip.communicator.service.resources.ResourceManagementServiceUtils+getLocale(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() java.util.Locale+getDefault() java.util.Locale+getDefault() net.java.sip.communicator.service.resources.LanguagePack+getResources(Locale) net.java.sip.communicator.service.resources.LanguagePack+getResources(Locale) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getImageResources() net.java.sip.communicator.service.resources.SkinPack+getImageResources() java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getColorResources() net.java.sip.communicator.service.resources.SkinPack+getColorResources() java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getSettingsResources() net.java.sip.communicator.service.resources.SkinPack+getSettingsResources() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getUIService() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getUIService() net.java.sip.communicator.service.gui.UIService+repaintUI() net.java.sip.communicator.service.gui.UIService+repaintUI()",net.java.sip.communicator.impl.resources.ResourceManagementActivator+bundleContext net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.service.resources.ColorPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.service.resources.ImagePack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack org.jitsi.service.resources.ResourceManagementService+DEFAULT_LOCALE_CONFIG net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.service.resources.LanguagePack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageLocale net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageLocale net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.service.resources.SettingsPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.service.resources.SoundPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.service.resources.SkinPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack,2401,70,0,"/** 
 * Initializes already registered default resource packs.
 */
","/**
     * Initializes already registered default resource packs.
     */
    ResourceManagementServiceImpl()
    {
        ResourceManagementActivator.bundleContext.addServiceListener(this);

        colorPack =
            getDefaultResourcePack(ColorPack.class.getName(),
                ColorPack.RESOURCE_NAME_DEFAULT_VALUE);

        if (colorPack != null)
            colorResources = getResources(colorPack);

        imagePack =
            getDefaultResourcePack(ImagePack.class.getName(),
                ImagePack.RESOURCE_NAME_DEFAULT_VALUE);

        if (imagePack != null)
            imageResources = getResources(imagePack);

        // changes the default locale if set in the config
        String defaultLocale = (String)ResourceManagementActivator.
                getConfigurationService().getProperty(DEFAULT_LOCALE_CONFIG);
        if(defaultLocale != null)
            Locale.setDefault(
                ResourceManagementServiceUtils.getLocale(defaultLocale));

        languagePack =
            (LanguagePack) getDefaultResourcePack(LanguagePack.class.getName(),
                LanguagePack.RESOURCE_NAME_DEFAULT_VALUE);

        if (languagePack != null)
        {
            languageLocale = Locale.getDefault();
            languageResources = languagePack.getResources(languageLocale);
        }

        settingsPack =
            getDefaultResourcePack(SettingsPack.class.getName(),
                SettingsPack.RESOURCE_NAME_DEFAULT_VALUE);

        if (settingsPack != null)
            settingsResources = getResources(settingsPack);

        soundPack =
            getDefaultResourcePack(SoundPack.class.getName(),
                SoundPack.RESOURCE_NAME_DEFAULT_VALUE);

        if (soundPack != null)
            soundResources = getResources(soundPack);

        skinPack = (SkinPack) getDefaultResourcePack(
            SkinPack.class.getName(), SkinPack.RESOURCE_NAME_DEFAULT_VALUE);

        if (skinPack != null)
        {
            skinResources = getResources(skinPack);
            if (imageResources != null)
                imageResources.putAll(skinPack.getImageResources());
            colorResources.putAll(skinPack.getColorResources());
            settingsResources.putAll(skinPack.getSettingsResources());
        }

        UIService serv = getUIService();
        if (serv != null)
        {
            serv.repaintUI();
        }
    }",False,False,"The function of this method is to initialize the default resource packs that have already been registered. It adds service listeners, retrieves and sets the default locale, and retrieves and sets various resource packs and their corresponding resources. Finally, it repaints the user interface if the UI service is available.",False,"The code initializes various resource packs for color, image, language, settings, sound, and skin. It also sets the default locale if specified in the configuration. Finally, it repaints the UI if the UIService is available."
17,"getDefaultResourcePack(String,String)",get default resource pack class name type name searches for the resource pack corresponding to the given class name and param class name the name of the resource class param type name the name of the type we re looking for for example resource name default valu e return the resource pack corresponding to the given class name and ,Method,ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent),,"org.osgi.framework.BundleContext+getServiceReferences(String,String) org.osgi.framework.BundleContext+getServiceReferences(String,String) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.BundleContext+getService(ServiceReference)",net.java.sip.communicator.service.resources.ResourcePack+RESOURCE_NAME net.java.sip.communicator.impl.resources.ResourceManagementActivator+bundleContext net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger net.java.sip.communicator.impl.resources.ResourceManagementActivator+bundleContext,1245,37,2,"/** 
 * Searches for the <tt>ResourcePack</tt> corresponding to the given <tt>className</tt> and <tt></tt>.
 * @param className The name of the resource class.
 * @param typeName The name of the type we're looking for.For example: RESOURCE_NAME_DEFAULT_VALUE
 * @return the <tt>ResourcePack</tt> corresponding to the given<tt>className</tt> and <tt></tt>.
 */
","/**
     * Searches for the <tt>ResourcePack</tt> corresponding to the given
     * <tt>className</tt> and <tt></tt>.
     *
     * @param className The name of the resource class.
     * @param typeName The name of the type we're looking for.
     * For example: RESOURCE_NAME_DEFAULT_VALUE
     * @return the <tt>ResourcePack</tt> corresponding to the given
     * <tt>className</tt> and <tt></tt>.
     */
    private ResourcePack getDefaultResourcePack(String className,
                                                String typeName)
    {
        ServiceReference[] serRefs = null;

        String osgiFilter =
            ""("" + ResourcePack.RESOURCE_NAME + ""="" + typeName + "")"";

        try
        {
            serRefs = ResourceManagementActivator
                .bundleContext.getServiceReferences(
                    className,
                    osgiFilter);
        }
        catch (InvalidSyntaxException exc)
        {
            logger.error(""Could not obtain resource packs reference."", exc);
        }

        if ((serRefs != null) && (serRefs.length > 0))
        {
            return (ResourcePack)
                ResourceManagementActivator.bundleContext.getService(serRefs[0]);
        }
        return null;
    }",True,True,"This method searches for a specific resource pack based on the given class name and type name. It uses the OSGi framework to obtain the service references and returns the corresponding resource pack if found, otherwise it returns null.",True,"This code defines a private method called ""getDefaultResourcePack"" that searches for a specific resource pack based on the given class name and type name. It uses the OSGi framework to obtain the service references and returns the first matching resource pack if found, otherwise it returns null."
18,getUIService(),get ui service returns the ui service obtained from the bundle context return the ui service obtained from the bundle context ,Method,ResourceManagementServiceImpl() serviceChanged(ServiceEvent) serviceChanged(ServiceEvent),,"net.java.sip.communicator.util.ServiceUtils+getService(BundleContext,Class<T>) net.java.sip.communicator.util.ServiceUtils+getService(BundleContext,Class<T>)",net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService net.java.sip.communicator.impl.resources.ResourceManagementActivator+bundleContext net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService,461,16,2,"/** 
 * Returns the <tt>UIService</tt> obtained from the bundle context.
 * @return the <tt>UIService</tt> obtained from the bundle context
 */
","/**
     * Returns the <tt>UIService</tt> obtained from the bundle context.
     *
     * @return the <tt>UIService</tt> obtained from the bundle context
     */
    private UIService getUIService()
    {
        if (uiService == null)
        {
            uiService
                = ServiceUtils.getService(
                        ResourceManagementActivator.bundleContext,
                        UIService.class);
        }
        return uiService;
    }",False,False,"This method returns the UIService obtained from the bundle context. If the uiService is null, it obtains the UIService from the ResourceManagementActivator.bundleContext and assigns it to uiService before returning it.",True,"The code defines a private method called getUIService() that returns an instance of the UIService obtained from the bundle context. If the uiService variable is null, it uses the ServiceUtils class to obtain the UIService from the ResourceManagementActivator bundle context."
19,getResources(ResourcePack),get resources resource pack returns the map of key value pairs contained in the given resource pack param resource pack the resource pack from which we re obtainingthe resources return the map of key value pairs contained in the givenresource pack ,Method,ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent),,net.java.sip.communicator.service.resources.ResourcePack+getResources() net.java.sip.communicator.service.resources.ResourcePack+getResources(),,446,13,2,"/** 
 * Returns the <tt>Map</tt> of (key, value) pairs contained in the given resource pack.
 * @param resourcePack The <tt>ResourcePack</tt> from which we're obtainingthe resources.
 * @return the <tt>Map</tt> of (key, value) pairs contained in the givenresource pack.
 */
","/**
     * Returns the <tt>Map</tt> of (key, value) pairs contained in the given
     * resource pack.
     *
     * @param resourcePack The <tt>ResourcePack</tt> from which we're obtaining
     * the resources.
     * @return the <tt>Map</tt> of (key, value) pairs contained in the given
     * resource pack.
     */
    private Map<String, String> getResources(ResourcePack resourcePack)
    {
        return resourcePack.getResources();
    }",False,False,This method returns a map of key-value pairs contained in a given resource pack.,True,"This code defines a private method called ""getResources"" that takes a ResourcePack object as a parameter and returns a Map of (key, value) pairs. The method simply calls the ""getResources"" method of the ResourcePack object and returns the result."
20,serviceChanged(ServiceEvent),service changed event handles all service event s corresponding to resource pack being registered or unregistered also handles ui service reference param event the service event that notified us ,Method,,,"org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.ServiceEvent+getServiceReference() org.osgi.framework.ServiceEvent+getServiceReference() org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() net.java.sip.communicator.service.gui.UIService+repaintUI() net.java.sip.communicator.service.gui.UIService+repaintUI() org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() java.lang.Object+equals(Object) java.lang.Object+equals(Object) org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.util.Locale+getDefault() java.util.Locale+getDefault() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getImageResources() net.java.sip.communicator.service.resources.SkinPack+getImageResources() java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getColorResources() net.java.sip.communicator.service.resources.SkinPack+getColorResources() java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getSettingsResources() net.java.sip.communicator.service.resources.SkinPack+getSettingsResources() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getUIService() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getUIService() net.java.sip.communicator.service.gui.UIService+repaintUI() net.java.sip.communicator.service.gui.UIService+repaintUI() org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getImageResources() net.java.sip.communicator.service.resources.SkinPack+getImageResources() java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getColorResources() net.java.sip.communicator.service.resources.SkinPack+getColorResources() java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getSettingsResources() net.java.sip.communicator.service.resources.SkinPack+getSettingsResources() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getUIService() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getUIService() net.java.sip.communicator.service.gui.UIService+repaintUI() net.java.sip.communicator.service.gui.UIService+repaintUI()",net.java.sip.communicator.impl.resources.ResourceManagementActivator+bundleContext net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService org.osgi.framework.ServiceEvent+REGISTERED net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService org.osgi.framework.ServiceEvent+UNREGISTERING net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService org.osgi.framework.ServiceEvent+REGISTERED net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageLocale net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack org.osgi.framework.ServiceEvent+UNREGISTERING net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.service.resources.ColorPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.service.resources.ImagePack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.service.resources.LanguagePack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.service.resources.SettingsPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.service.resources.SoundPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.service.resources.SkinPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack,6605,182,1,"/** 
 * Handles all <tt>ServiceEvent</tt>s corresponding to <tt>ResourcePack</tt> being registered or unregistered. Also handles <tt>UIService</tt> reference.
 * @param event the <tt>ServiceEvent</tt> that notified us
 */
","/**
     * Handles all <tt>ServiceEvent</tt>s corresponding to <tt>ResourcePack</tt>
     * being registered or unregistered.
     *
     * Also handles <tt>UIService</tt> reference.
     *
     * @param event the <tt>ServiceEvent</tt> that notified us
     */
    public void serviceChanged(ServiceEvent event)
    {
        Object sService = ResourceManagementActivator.bundleContext.getService(
            event.getServiceReference());

        if (sService instanceof UIService && uiService == null
                && event.getType() == ServiceEvent.REGISTERED)
        {
            uiService = (UIService) sService;
            uiService.repaintUI();
        }
        else if (sService instanceof UIService
                && event.getType() == ServiceEvent.UNREGISTERING)
        {
            if (uiService != null && uiService.equals(sService))
            {
                uiService = null;
            }
        }

        if (!(sService instanceof ResourcePack))
        {
            return;
        }

        ResourcePack resourcePack = (ResourcePack) sService;

        if (event.getType() == ServiceEvent.REGISTERED)
        {
            if (logger.isInfoEnabled())
                logger.info(""Resource registered "" + resourcePack);

            Map<String, String> resources = getResources(resourcePack);

            if(resourcePack instanceof ColorPack && colorPack == null)
            {
                colorPack = resourcePack;
                colorResources = resources;
            }
            else if(resourcePack instanceof ImagePack && imagePack == null)
            {
                imagePack = resourcePack;
                imageResources = resources;
            }
            else if(resourcePack instanceof LanguagePack && languagePack == null)
            {
                languagePack = (LanguagePack) resourcePack;
                languageLocale = Locale.getDefault();
                languageResources = resources;
            }
            else if(resourcePack instanceof SettingsPack && settingsPack == null)
            {
                settingsPack = resourcePack;
                settingsResources = resources;
            }
            else if(resourcePack instanceof SoundPack && soundPack == null)
            {
                soundPack = resourcePack;
                soundResources = resources;
            }
            else if(resourcePack instanceof SkinPack && skinPack == null)
            {
                skinPack = (SkinPack) resourcePack;

                if (imagePack!=null)
                    imageResources = getResources(imagePack);

                if (colorPack!=null)
                    colorResources = getResources(colorPack);

                if (settingsPack != null)
                    settingsResources = getResources(settingsPack);

                skinResources = resources;
                if (imageResources != null)
                    imageResources.putAll(skinPack.getImageResources());
                colorResources.putAll(skinPack.getColorResources());
                settingsResources.putAll(skinPack.getSettingsResources());

                UIService serv = getUIService();
                if (serv != null)
                {
                    serv.repaintUI();
                }
            }
        }
        else if (event.getType() == ServiceEvent.UNREGISTERING)
        {
            if(resourcePack instanceof ColorPack
                    && colorPack.equals(resourcePack))
            {
                colorPack =
                    getDefaultResourcePack(ColorPack.class.getName(),
                        ColorPack.RESOURCE_NAME_DEFAULT_VALUE);

                if (colorPack != null)
                    colorResources = getResources(colorPack);
            }
            else if(resourcePack instanceof ImagePack
                    && imagePack.equals(resourcePack))
            {
                imagePack =
                    getDefaultResourcePack(ImagePack.class.getName(),
                        ImagePack.RESOURCE_NAME_DEFAULT_VALUE);

                if (imagePack != null)
                    imageResources = getResources(imagePack);
            }
            else if(resourcePack instanceof LanguagePack
                    && languagePack.equals(resourcePack))
            {
                languagePack =
                    (LanguagePack) getDefaultResourcePack(
                        LanguagePack.class.getName(),
                        LanguagePack.RESOURCE_NAME_DEFAULT_VALUE);
            }
            else if(resourcePack instanceof SettingsPack
                    && settingsPack.equals(resourcePack))
            {
                settingsPack =
                    getDefaultResourcePack(SettingsPack.class.getName(),
                        SettingsPack.RESOURCE_NAME_DEFAULT_VALUE);

                if (settingsPack != null)
                    settingsResources = getResources(settingsPack);
            }
            else if(resourcePack instanceof SoundPack
                    && soundPack.equals(resourcePack))
            {
                soundPack =
                    getDefaultResourcePack(SoundPack.class.getName(),
                        SoundPack.RESOURCE_NAME_DEFAULT_VALUE);

                if (soundPack != null)
                    soundResources = getResources(soundPack);
            }
            else if(resourcePack instanceof SkinPack
                    && skinPack.equals(resourcePack))
            {
                if(imagePack!=null)
                {
                    imageResources = getResources(imagePack);
                }

                if(colorPack!=null)
                {
                    colorResources = getResources(colorPack);
                }

                if(settingsPack!=null)
                {
                    settingsResources = getResources(settingsPack);
                }

                skinPack = (SkinPack) getDefaultResourcePack(
                    SkinPack.class.getName(),
                    SkinPack.RESOURCE_NAME_DEFAULT_VALUE);

                if (skinPack != null)
                {
                    skinResources = getResources(skinPack);
                    imageResources.putAll(skinPack.getImageResources());
                    colorResources.putAll(skinPack.getColorResources());
                    settingsResources.putAll(skinPack.getSettingsResources());
                }

                UIService serv = getUIService();
                if (serv != null)
                {
                    serv.repaintUI();
                }
            }
        }
    }",False,False,The function of this method is to handle service events related to the registration or unregistration of ResourcePacks. It also handles the UIService reference.,True,"This code defines a method called ""serviceChanged"" that handles service events related to the registration and unregistration of different resource packs. It also updates the UI service and repaints the UI when necessary."
21,getColor(String),get color key returns the int representation of the color corresponding to the given key param key the key of the color in the colors properties file return the int representation of the color corresponding to thegiven key ,Method,,,"java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.util.Logger+error(Object) net.java.sip.communicator.util.Logger+error(Object) java.lang.Integer+parseInt(String,int) java.lang.Integer+parseInt(String,int)",net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,564,21,1,"/** 
 * Returns the int representation of the color corresponding to the given key.
 * @param key The key of the color in the colors properties file.
 * @return the int representation of the color corresponding to thegiven key.
 */
","/**
     * Returns the int representation of the color corresponding to the
     * given key.
     *
     * @param key The key of the color in the colors properties file.
     * @return the int representation of the color corresponding to the
     * given key.
     */
    public int getColor(String key)
    {
        String res = colorResources.get(key);

        if(res == null)
        {
            logger.error(""Missing color resource for key: "" + key);

            return 0xFFFFFF;
        }
        else
            return Integer.parseInt(res, 16);
    }",False,False,"This method returns the integer representation of a color based on a given key. If the key is not found in the color resources, it logs an error and returns the default color (0xFFFFFF). Otherwise, it parses the color string and returns the corresponding integer value.",True,"This code defines a method called `getColor` that takes a key as input and returns the corresponding int representation of a color. It retrieves the color value from a map called `colorResources` and if the value is not found, it logs an error message and returns the default color value of 0xFFFFFF."
22,getColorString(String),get color string key returns the string representation of the color corresponding to the given key param key the key of the color in the colors properties file return the string representation of the color corresponding to thegiven key ,Method,,,java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.util.Logger+error(Object) net.java.sip.communicator.util.Logger+error(Object),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,559,21,1,"/** 
 * Returns the string representation of the color corresponding to the given key.
 * @param key The key of the color in the colors properties file.
 * @return the string representation of the color corresponding to thegiven key.
 */
","/**
     * Returns the string representation of the color corresponding to the
     * given key.
     *
     * @param key The key of the color in the colors properties file.
     * @return the string representation of the color corresponding to the
     * given key.
     */
    public String getColorString(String key)
    {
        String res = colorResources.get(key);

        if(res == null)
        {
            logger.error(""Missing color resource for key: "" + key);

            return ""0xFFFFFF"";
        }
        else
            return res;
    }",False,False,"This method returns the string representation of a color corresponding to a given key. If the key is not found in the color resources, it logs an error and returns the default color string ""0xFFFFFF"".",True,"The method `getColorString` takes a key as input and returns the corresponding string representation of a color from a properties file. If the key is not found in the file, it logs an error message and returns the default color string ""0xFFFFFF""."
23,getImageInputStreamForPath(String),get image input stream for path path returns the input stream of the image corresponding to the given path param path the path to the image file return the input stream of the image corresponding to the givenpath ,Method,getImageInputStream(String),,java.lang.ClassLoader+getResourceAsStream(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResourceAsStream(String) java.lang.ClassLoader+getResourceAsStream(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResourceAsStream(String) java.lang.ClassLoader+getResourceAsStream(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResourceAsStream(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack,790,26,1,"/** 
 * Returns the <tt>InputStream</tt> of the image corresponding to the given path.
 * @param path The path to the image file.
 * @return the <tt>InputStream</tt> of the image corresponding to the givenpath.
 */
","/**
     * Returns the <tt>InputStream</tt> of the image corresponding to the given
     * path.
     *
     * @param path The path to the image file.
     * @return the <tt>InputStream</tt> of the image corresponding to the given
     * path.
     */
    public InputStream getImageInputStreamForPath(String path)
    {
        if(skinPack!=null)
        {
            if(skinPack.getClass().getClassLoader()
                .getResourceAsStream(path)!=null)
            {
                return skinPack.getClass().getClassLoader()
                        .getResourceAsStream(path);
            }
        }

        if (path != null && imagePack != null)
            return imagePack.getClass().getClassLoader()
                    .getResourceAsStream(path);

        return null;
    }",False,False,"This method returns an InputStream of an image file corresponding to a given path. It first checks if a skin pack is available and if the image file exists in the skin pack. If not, it checks if the image file exists in the image pack. If neither is found, it returns null.",True,"This code defines a method called `getImageInputStreamForPath` that takes a path as input and returns an `InputStream` of the corresponding image file. It first checks if a `skinPack` is available and if the image file exists in it, it returns the `InputStream` from the `skinPack`. If not, it checks if an `imagePack` is available and returns the `InputStream` from it. If neither `skinPack` nor `imagePack` is available or the path is null, it returns null."
24,getImageInputStream(String),get image input stream stream key returns the input stream of the image corresponding to the given key param stream key the identifier of the image in the resource propertiesfile return the input stream of the image corresponding to the givenkey ,Method,getImageInBytes(String),,net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImagePath(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImagePath(String) java.lang.String+length() java.lang.String+length() net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageInputStreamForPath(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageInputStreamForPath(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,625,21,1,"/** 
 * Returns the <tt>InputStream</tt> of the image corresponding to the given key.
 * @param streamKey The identifier of the image in the resource propertiesfile.
 * @return the <tt>InputStream</tt> of the image corresponding to the givenkey.
 */
","/**
     * Returns the <tt>InputStream</tt> of the image corresponding to the given
     * key.
     *
     * @param streamKey The identifier of the image in the resource properties
     * file.
     * @return the <tt>InputStream</tt> of the image corresponding to the given
     * key.
     */
    public InputStream getImageInputStream(String streamKey)
    {
        String path = getImagePath(streamKey);

        if (path == null || path.length() == 0)
        {
            logger.warn(""Missing resource for key: "" + streamKey);
            return null;
        }

        return getImageInputStreamForPath(path);
    }",False,False,"This method returns an InputStream of an image corresponding to a given key. It first checks if the path of the image is valid, and if not, it logs a warning and returns null. Otherwise, it retrieves the InputStream of the image using the path and returns it.",True,"The method ""getImageInputStream"" takes a string parameter ""streamKey"" and returns an InputStream of the image corresponding to the given key. It first checks if the path of the image is null or empty, and if so, it logs a warning message and returns null. Otherwise, it calls another method ""getImageInputStreamForPath"" to get the InputStream of the image using the path."
25,getImageURL(String),get image url url key returns the url of the image corresponding to the given key param url key the identifier of the image in the resource properties file return the url of the image corresponding to the given key ,Method,getImage(String),,net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImagePath(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImagePath(String) java.lang.String+length() java.lang.String+length() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageURLForPath(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageURLForPath(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,594,18,1,"/** 
 * Returns the <tt>URL</tt> of the image corresponding to the given key.
 * @param urlKey The identifier of the image in the resource properties file.
 * @return the <tt>URL</tt> of the image corresponding to the given key
 */
","/**
     * Returns the <tt>URL</tt> of the image corresponding to the given key.
     *
     * @param urlKey The identifier of the image in the resource properties file.
     * @return the <tt>URL</tt> of the image corresponding to the given key
     */
    public URL getImageURL(String urlKey)
    {
        String path = getImagePath(urlKey);

        if (path == null || path.length() == 0)
        {
            if (logger.isInfoEnabled())
                logger.info(""Missing resource for key: "" + urlKey);
            return null;
        }
        return getImageURLForPath(path);
    }",False,False,"This method returns the URL of an image corresponding to a given key. It first gets the image path using the key, then checks if the path is null or empty. If it is, it logs a message and returns null. Otherwise, it returns the URL of the image using the path.",True,"The method `getImageURL` takes a key as input and returns the corresponding URL of an image. It first retrieves the image path using the key, and if the path is null or empty, it logs a message and returns null. Otherwise, it calls another method to convert the path into a URL and returns it."
26,getImagePath(String),get image path key returns the image path corresponding to the given key param key the identifier of the image in the resource properties file return the image path corresponding to the given key ,Method,getImageInputStream(String) getImageURL(String),,java.util.Map+get(Object) java.util.Map+get(Object),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources,350,10,1,"/** 
 * Returns the image path corresponding to the given key.
 * @param key The identifier of the image in the resource properties file.
 * @return the image path corresponding to the given key.
 */
","/**
     * Returns the image path corresponding to the given key.
     *
     * @param key The identifier of the image in the resource properties file.
     * @return the image path corresponding to the given key.
     */
    public String getImagePath(String key)
    {
        return (imageResources == null) ? null : imageResources.get(key);
    }",True,True,"This method returns the image path corresponding to the given key. If the imageResources is null, it returns null. Otherwise, it retrieves the image path from the imageResources using the given key.",True,"This code defines a method called `getImagePath` that takes a key as input and returns the corresponding image path from a resource properties file. If the `imageResources` object is null, it returns null. Otherwise, it retrieves the image path associated with the given key from the `imageResources` map."
27,getImageURLForPath(String),get image url for path path returns the url of the image corresponding to the given path param path the path to the given image file return the url of the image corresponding to the given path ,Method,getImageURL(String),,java.lang.ClassLoader+getResource(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResource(String) java.lang.ClassLoader+getResource(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResource(String) java.lang.ClassLoader+getResource(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResource(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack,590,18,1,"/** 
 * Returns the <tt>URL</tt> of the image corresponding to the given path.
 * @param path The path to the given image file.
 * @return the <tt>URL</tt> of the image corresponding to the given path.
 */
","/**
     * Returns the <tt>URL</tt> of the image corresponding to the given path.
     *
     * @param path The path to the given image file.
     * @return the <tt>URL</tt> of the image corresponding to the given path.
     */
    public URL getImageURLForPath(String path)
    {
        if(skinPack!=null)
        {
            if(skinPack.getClass().getClassLoader().getResource(path)!=null)
            {
                return skinPack.getClass().getClassLoader().getResource(path);
            }
        }

        return imagePack.getClass().getClassLoader().getResource(path);
    }",False,False,"This method returns the URL of an image corresponding to a given path. It first checks if a skin pack is available and if the image exists in the skin pack. If not, it returns the image from the image pack.",True,"This code defines a method called `getImageURLForPath` that takes a `path` parameter and returns the URL of the corresponding image. It first checks if a `skinPack` is available and if so, it tries to retrieve the image URL from its class loader. If not, it retrieves the image URL from the class loader of the `imagePack`."
28,getAvailableLocales(),get available locales all the locales in the language pack return all the locales this language pack contains ,Method,,,net.java.sip.communicator.service.resources.LanguagePack+getAvailableLocales() net.java.sip.communicator.service.resources.LanguagePack+getAvailableLocales(),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack,229,8,1,"/** 
 * All the locales in the language pack.
 * @return all the locales this Language pack contains.
 */
","/**
     * All the locales in the language pack.
     * @return all the locales this Language pack contains.
     */
    public Iterator<Locale> getAvailableLocales()
    {
        return languagePack.getAvailableLocales();
    }",False,True,This method returns an iterator that contains all the locales available in the language pack.,True,"This code defines a method called ""getAvailableLocales"" that returns an iterator of all the locales available in a language pack. The method retrieves the available locales from the language pack object and returns them as an iterator."
29,getI18NString(String),get i18 n string key returns an internationalized string corresponding to the given key param key the identifier of the string in the resources properties file return an internationalized string corresponding to the given key ,Method,,,"net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18NString(String,Locale) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18NString(String,Locale) java.util.Locale+getDefault() java.util.Locale+getDefault()",,361,10,1,"/** 
 * Returns an internationalized string corresponding to the given key.
 * @param key The identifier of the string in the resources properties file.
 * @return An internationalized string corresponding to the given key.
 */
","/**
     * Returns an internationalized string corresponding to the given key.
     *
     * @param key The identifier of the string in the resources properties file.
     * @return An internationalized string corresponding to the given key.
     */
    public String getI18NString(String key)
    {
        return getI18NString(key, Locale.getDefault());
    }",True,True,This method returns an internationalized string corresponding to the given key by using the default locale.,True,"The code defines a method called ""getI18NString"" that takes a key as input and returns an internationalized string corresponding to that key. It uses the default locale if no specific locale is provided."
30,"getI18NString(String,Locale)",get i18 n string key locale returns an internationalized string corresponding to the given key param key the identifier of the string in the resources properties file param locale the locale return an internationalized string corresponding to the given key andgiven locale ,Method,getI18NString(String),,"net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18NString(String,String[],Locale) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18NString(String,String[],Locale)",,426,12,1,"/** 
 * Returns an internationalized string corresponding to the given key.
 * @param key The identifier of the string in the resources properties file.
 * @param locale The locale.
 * @return An internationalized string corresponding to the given key andgiven locale.
 */
","/**
     * Returns an internationalized string corresponding to the given key.
     *
     * @param key The identifier of the string in the resources properties file.
     * @param locale The locale.
     * @return An internationalized string corresponding to the given key and
     * given locale.
     */
    public String getI18NString(String key, Locale locale)
    {
        return getI18NString(key, null, locale);
    }",True,True,"This method returns an internationalized string corresponding to a given key and locale. It calls another method with the same name, passing the key, null, and locale as arguments.",True,"The code defines a method called ""getI18NString"" that takes a key and a locale as parameters and returns an internationalized string corresponding to the given key and locale. It is a convenience method that calls another overloaded version of the same method with an additional parameter set to null."
31,"getI18NString(String,String[])",get i18 n string key params returns an internationalized string corresponding to the given key param key the identifier of the string param params the parameters to pass to the localized string return an internationalized string corresponding to the given key ,Method,,,"net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18NString(String,String[],Locale) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18NString(String,String[],Locale) java.util.Locale+getDefault() java.util.Locale+getDefault()",,421,11,1,"/** 
 * Returns an internationalized string corresponding to the given key.
 * @param key The identifier of the string.
 * @param params the parameters to pass to the localized string
 * @return An internationalized string corresponding to the given key.
 */
","/**
     * Returns an internationalized string corresponding to the given key.
     *
     * @param key The identifier of the string.
     * @param params the parameters to pass to the localized string
     * @return An internationalized string corresponding to the given key.
     */
    public String getI18NString(String key, String[] params)
    {
        return getI18NString(key, params, Locale.getDefault());
    }",True,True,"This method returns an internationalized string corresponding to the given key, using the default locale. It also allows passing parameters to the localized string.",True,"The code defines a method called ""getI18NString"" that returns an internationalized string based on a given key. It takes an array of parameters and uses the default locale if not specified."
32,"getI18NString(String,String[],Locale)",get i18 n string key params locale returns an internationalized string corresponding to the given key param key the identifier of the string in the resources propertiesfile param params the parameters to pass to the localized string param locale the locale return an internationalized string corresponding to the given key ,Method,"getI18NString(String,Locale) getI18NString(String,String[])",,"java.util.Locale+equals(Object) java.util.Locale+equals(Object) net.java.sip.communicator.service.resources.LanguagePack+getResources(Locale) net.java.sip.communicator.service.resources.LanguagePack+getResources(Locale) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+concat(String) java.lang.String+concat(String) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+replaceAll(String,String) java.lang.String+replaceAll(String,String) java.text.MessageFormat+format(String,Object[]) java.text.MessageFormat+format(String,Object[])",net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageLocale net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,1792,56,1,"/** 
 * Returns an internationalized string corresponding to the given key.
 * @param key The identifier of the string in the resources propertiesfile.
 * @param params the parameters to pass to the localized string
 * @param locale The locale.
 * @return An internationalized string corresponding to the given key.
 */
","/**
     * Returns an internationalized string corresponding to the given key.
     *
     * @param key The identifier of the string in the resources properties
     * file.
     * @param params the parameters to pass to the localized string
     * @param locale The locale.
     * @return An internationalized string corresponding to the given key.
     */
    public String getI18NString(String key, String[] params, Locale locale)
    {
        Map<String, String> stringResources;
        if ((locale != null) && locale.equals(languageLocale))
        {
            stringResources = languageResources;
        }
        else
        {
            stringResources
                = (languagePack == null)
                    ? null
                    : languagePack.getResources(locale);
        }

        String resourceString
            = (stringResources == null) ? null : stringResources.get(key);

        if (resourceString == null)
        {
            logger.warn(""Missing resource for key: "" + key);
            return '!' + key + '!';
        }

        int mnemonicIndex = resourceString.indexOf('&');

        if (mnemonicIndex == 0
            || (mnemonicIndex > 0
                && resourceString.charAt(mnemonicIndex - 1) != '\\'))
        {
            String firstPart = resourceString.substring(0, mnemonicIndex);
            String secondPart = resourceString.substring(mnemonicIndex + 1);

            resourceString = firstPart.concat(secondPart);
        }

        if (resourceString.indexOf('\\') > -1)
        {
            resourceString = resourceString.replaceAll(""\\\\"", """");
        }

        if(params != null)
             resourceString
                = MessageFormat.format(resourceString, (Object[])params);

        return resourceString;
    }",True,True,"This method returns an internationalized string corresponding to a given key. It takes in the key, parameters, and locale as input, and returns the corresponding string from the resources. If the string is not found, it returns a warning message and a fallback string.",True,"The code defines a method called `getI18NString` that returns an internationalized string corresponding to a given key. It takes in parameters such as the key, an array of parameters, and the locale. It retrieves the string from a resource file, handles mnemonics and escape characters, and formats the string with the provided parameters before returning it."
33,getI18nMnemonic(String),get i18n mnemonic key returns an internationalized string corresponding to the given key param key the identifier of the string in the resources properties file return an internationalized string corresponding to the given key ,Method,,,"net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18nMnemonic(String,Locale) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18nMnemonic(String,Locale) java.util.Locale+getDefault() java.util.Locale+getDefault()",,363,10,1,"/** 
 * Returns an internationalized string corresponding to the given key.
 * @param key The identifier of the string in the resources properties file.
 * @return An internationalized string corresponding to the given key.
 */
","/**
     * Returns an internationalized string corresponding to the given key.
     *
     * @param key The identifier of the string in the resources properties file.
     * @return An internationalized string corresponding to the given key.
     */
    public char getI18nMnemonic(String key)
    {
        return getI18nMnemonic(key, Locale.getDefault());
    }",True,True,This method returns an internationalized string corresponding to the given key by calling another method with the default locale.,True,"The code defines a method called ""getI18nMnemonic"" that takes a key as input and returns an internationalized string corresponding to that key. It also has an overloaded version of the method that takes a key and a locale as input and returns the internationalized string based on the specified locale."
34,"getI18nMnemonic(String,Locale)",get i18n mnemonic key locale returns an internationalized string corresponding to the given key param key the identifier of the string in the resources properties file param locale the locale that we d like to receive the result in return an internationalized string corresponding to the given key ,Method,getI18nMnemonic(String),,java.util.Locale+equals(Object) java.util.Locale+equals(Object) net.java.sip.communicator.service.resources.LanguagePack+getResources(Locale) net.java.sip.communicator.service.resources.LanguagePack+getResources(Locale) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+charAt(int) java.lang.String+charAt(int),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageLocale net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,1058,36,1,"/** 
 * Returns an internationalized string corresponding to the given key.
 * @param key The identifier of the string in the resources properties file.
 * @param locale The locale that we'd like to receive the result in.
 * @return An internationalized string corresponding to the given key.
 */
","/**
     * Returns an internationalized string corresponding to the given key.
     *
     * @param key The identifier of the string in the resources properties file.
     * @param locale The locale that we'd like to receive the result in.
     * @return An internationalized string corresponding to the given key.
     */
    public char getI18nMnemonic(String key, Locale locale)
    {
        Map<String, String> stringResources;
        if ((locale != null) && locale.equals(languageLocale))
        {
            stringResources = languageResources;
        }
        else
        {
            stringResources = languagePack.getResources(locale);
        }

        String resourceString = stringResources.get(key);

        if (resourceString == null)
        {
            logger.warn(""Missing resource for key: "" + key);
            return 0;
        }

        int mnemonicIndex = resourceString.indexOf('&');

        if (mnemonicIndex > -1)
        {
            return resourceString.charAt(mnemonicIndex + 1);
        }

        return 0;
    }",True,True,"The function of this method is to retrieve an internationalized string corresponding to a given key, based on the specified locale. It also checks for the presence of a mnemonic character in the string and returns it if found.",True,"This code defines a method called `getI18nMnemonic` that takes a key and a locale as input and returns an internationalized string corresponding to the key. It checks if the string exists in the resources, and if it does, it checks for the presence of a mnemonic character and returns it. If the string or mnemonic is missing, it logs a warning and returns 0."
35,getSettingsString(String),get settings string key returns the int value of the corresponding configuration key param key the identifier of the string in the resources properties file return the int value of the corresponding configuration key ,Method,"getSettingsInt(String) getSettingsURL(String) getSettingsInputStream(String,Class<?>)",,java.util.Map+get(Object) java.util.Map+get(Object),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources,377,10,1,"/** 
 * Returns the int value of the corresponding configuration key.
 * @param key The identifier of the string in the resources properties file.
 * @return the int value of the corresponding configuration key.
 */
","/**
     * Returns the int value of the corresponding configuration key.
     *
     * @param key The identifier of the string in the resources properties file.
     * @return the int value of the corresponding configuration key.
     */
    public String getSettingsString(String key)
    {
        return (settingsResources == null) ? null : settingsResources.get(key);
    }",True,True,"This method retrieves the string value of a configuration key from a resources properties file. It returns the string value associated with the given key, or null if the resources are not available.",True,"The code defines a method called ""getSettingsString"" that takes a string parameter ""key"" and returns the corresponding value from a settingsResources object. It checks if the settingsResources object is null and returns null if it is. The method is used to retrieve the int value of a configuration key from a resources properties file."
36,getSettingsInt(String),get settings int key returns the int value of the corresponding configuration key param key the identifier of the string in the resources properties file return the int value of the corresponding configuration key ,Method,,,net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsString(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsString(String) net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,537,18,1,"/** 
 * Returns the int value of the corresponding configuration key.
 * @param key The identifier of the string in the resources properties file.
 * @return the int value of the corresponding configuration key.
 */
","/**
     * Returns the int value of the corresponding configuration key.
     *
     * @param key The identifier of the string in the resources properties file.
     * @return the int value of the corresponding configuration key.
     */
    public int getSettingsInt(String key)
    {
        String resourceString = getSettingsString(key);

        if (resourceString == null)
        {
            logger.warn(""Missing resource for key: "" + key);
            return 0;
        }

        return Integer.parseInt(resourceString);
    }",True,True,"This method retrieves the integer value of a configuration key from a resources properties file. If the key is missing, it logs a warning and returns 0.",True,"The `getSettingsInt` method takes a key as input and retrieves the corresponding value from a properties file. It returns the integer value of the configuration key, or 0 if the key is missing or the value cannot be parsed as an integer. The method also logs a warning message if the resource for the key is missing."
37,getSettingsURL(String),get settings url url key returns an url from a given identifier param url key the identifier of the url return the url for the given identifier ,Method,,,net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsString(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsString(String) java.lang.String+length() java.lang.String+length() net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) java.lang.ClassLoader+getResource(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResource(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack,510,17,1,"/** 
 * Returns an <tt>URL</tt> from a given identifier.
 * @param urlKey The identifier of the url.
 * @return The url for the given identifier.
 */
","/**
     * Returns an <tt>URL</tt> from a given identifier.
     *
     * @param urlKey The identifier of the url.
     * @return The url for the given identifier.
     */
    public URL getSettingsURL(String urlKey)
    {
        String path = getSettingsString(urlKey);

        if (path == null || path.length() == 0)
        {
            logger.warn(""Missing resource for key: "" + urlKey);
            return null;
        }
        return settingsPack.getClass().getClassLoader().getResource(path);
    }",True,True,"This method returns a URL based on a given identifier. It retrieves the URL path using the identifier, and if the path is null or empty, it logs a warning and returns null. Otherwise, it returns the URL resource based on the path.",True,"The code defines a method called ""getSettingsURL"" that takes a string parameter ""urlKey"" and returns a URL object. It retrieves a string path using the ""getSettingsString"" method, checks if it is null or empty, logs a warning message if it is, and then returns the URL obtained from the class loader's resource using the path."
38,getSettingsInputStream(String),get settings input stream stream key returns a stream from a given identifier param stream key the identifier of the stream return the stream for the given identifier ,Method,,,"net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsInputStream(String,Class<?>) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsInputStream(String,Class<?>) java.lang.Object+getClass() java.lang.Object+getClass()",net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack,324,10,1,"/** 
 * Returns a stream from a given identifier.
 * @param streamKey The identifier of the stream.
 * @return The stream for the given identifier.
 */
","/**
     * Returns a stream from a given identifier.
     *
     * @param streamKey The identifier of the stream.
     * @return The stream for the given identifier.
     */
    public InputStream getSettingsInputStream(String streamKey)
    {
        return getSettingsInputStream(streamKey, settingsPack.getClass());
    }",True,True,This method returns an InputStream for a given identifier by calling another method with the identifier and the class of the settings pack.,True,"The code defines a method called ""getSettingsInputStream"" that takes a stream identifier as input and returns an InputStream object. It also has an overloaded version of the method that takes an additional parameter of the settingsPack class. The purpose of this method is to retrieve a stream based on the provided identifier."
39,"getSettingsInputStream(String,Class<?>)",get settings input stream stream key resource class returns a stream from a given identifier obtained through the class loader of the given resource class param stream key the identifier of the stream param resource class the resource class through which the resource wouldbe obtained return the stream for the given identifier ,Method,getSettingsInputStream(String),,net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsString(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsString(String) java.lang.String+length() java.lang.String+length() net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) java.lang.ClassLoader+getResourceAsStream(String) java.lang.Class+getClassLoader() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResourceAsStream(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,778,22,1,"/** 
 * Returns a stream from a given identifier, obtained through the class loader of the given resourceClass.
 * @param streamKey The identifier of the stream.
 * @param resourceClass the resource class through which the resource wouldbe obtained
 * @return The stream for the given identifier.
 */
","/**
     * Returns a stream from a given identifier, obtained through the class
     * loader of the given resourceClass.
     *
     * @param streamKey The identifier of the stream.
     * @param resourceClass the resource class through which the resource would
     * be obtained
     * @return The stream for the given identifier.
     */
    public InputStream getSettingsInputStream(  String streamKey,
                                                Class<?> resourceClass)
    {
        String path = getSettingsString(streamKey);

        if (path == null || path.length() == 0)
        {
            logger.warn(""Missing resource for key: "" + streamKey);
            return null;
        }

        return resourceClass.getClassLoader().getResourceAsStream(path);
    }",True,True,"This method returns an InputStream for a given identifier, obtained through the class loader of a given resource class. It first checks if the path for the identifier is null or empty, and if so, logs a warning and returns null. Otherwise, it uses the class loader of the resource class to obtain the InputStream for the path.",True,"The `getSettingsInputStream` method takes a stream identifier and a resource class as input parameters. It returns an input stream obtained from the class loader of the resource class, using the path obtained from the stream identifier. If the path is null or empty, it logs a warning and returns null."
40,getSoundURL(String),get sound url url key returns the url of the sound corresponding to the given property key return the url of the sound corresponding to the givenproperty key ,Method,,,java.util.Map+get(Object) java.util.Map+get(Object) java.lang.String+length() java.lang.String+length() net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSoundURLForPath(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSoundURLForPath(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,507,18,1,"/** 
 * Returns the <tt>URL</tt> of the sound corresponding to the given property key.
 * @return the <tt>URL</tt> of the sound corresponding to the givenproperty key.
 */
","/**
     * Returns the <tt>URL</tt> of the sound corresponding to the given
     * property key.
     *
     * @return the <tt>URL</tt> of the sound corresponding to the given
     * property key.
     */
    public URL getSoundURL(String urlKey)
    {
        String path = soundResources.get(urlKey);

        if (path == null || path.length() == 0)
        {
            logger.warn(""Missing resource for key: "" + urlKey);
            return null;
        }
        return getSoundURLForPath(path);
    }",False,False,"This method returns the URL of a sound file based on a given property key. If the path is missing or empty, it logs a warning and returns null. Otherwise, it calls another method to get the URL based on the path.",True,"This code defines a method called ""getSoundURL"" that takes a property key as input and returns the corresponding URL of a sound resource. If the resource is missing or the path is empty, it logs a warning message and returns null."
41,getSoundURLForPath(String),get sound url for path path returns the url of the sound corresponding to the given path param path the path for which we re looking for a sound ur l return the url of the sound corresponding to the given path ,Method,getSoundURL(String),,java.lang.ClassLoader+getResource(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResource(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack,374,10,1,"/** 
 * Returns the <tt>URL</tt> of the sound corresponding to the given path.
 * @param path the path, for which we're looking for a sound URL
 * @return the <tt>URL</tt> of the sound corresponding to the given path.
 */
","/**
     * Returns the <tt>URL</tt> of the sound corresponding to the given path.
     *
     * @param path the path, for which we're looking for a sound URL
     * @return the <tt>URL</tt> of the sound corresponding to the given path.
     */
    public URL getSoundURLForPath(String path)
    {
        return soundPack.getClass().getClassLoader().getResource(path);
    }",False,False,This method returns the URL of a sound file based on the given path. It uses the class loader to find the resource and returns the corresponding URL.,True,"This code defines a method called ""getSoundURLForPath"" that takes a string parameter representing a file path and returns the URL of the corresponding sound file. The method uses the class loader of the sound pack to retrieve the resource URL."
42,getSoundPath(String),get sound path sound key returns the path of the sound corresponding to the given property key param sound key the key for the sound path return the path of the sound corresponding to the givenproperty key ,Method,,,java.util.Map+get(Object) java.util.Map+get(Object),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundResources,344,12,1,"/** 
 * Returns the path of the sound corresponding to the given property key.
 * @param soundKey the key, for the sound path
 * @return the path of the sound corresponding to the givenproperty key.
 */
","/**
     * Returns the path of the sound corresponding to the given
     * property key.
     *
     * @param soundKey the key, for the sound path
     * @return the path of the sound corresponding to the given
     * property key.
     */
    public String getSoundPath(String soundKey)
    {
        return soundResources.get(soundKey);
    }",True,True,This method returns the path of a sound corresponding to a given property key. It takes in a sound key as a parameter and retrieves the corresponding sound path from a sound resources map.,True,"This code defines a method called ""getSoundPath"" that takes a property key as input and returns the corresponding sound path. It retrieves the sound path from a map called ""soundResources"" using the provided key."
43,getImageInBytes(String),get image in bytes image id loads an image from a given image identifier param image id the identifier of the image return the image for the given identifier ,Method,,,"net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageInputStream(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageInputStream(String) java.io.InputStream+available() java.io.InputStream+available() java.io.InputStream+read(byte[]) java.io.InputStream+read(byte[]) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable)",net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,613,27,1,"/** 
 * Loads an image from a given image identifier.
 * @param imageID The identifier of the image.
 * @return The image for the given identifier.
 */
","/**
     * Loads an image from a given image identifier.
     *
     * @param imageID The identifier of the image.
     * @return The image for the given identifier.
     */
    public byte[] getImageInBytes(String imageID)
    {
        InputStream in = getImageInputStream(imageID);

        if(in == null)
            return null;

        byte[] image = null;

        try
        {
            image = new byte[in.available()];
            in.read(image);
        }
        catch (IOException e)
        {
            logger.error(""Failed to load image:"" + imageID, e);
        }

        return image;
    }",False,False,"This method loads an image from a given image identifier and returns it as a byte array. It first gets an input stream for the image, then reads the bytes from the input stream and returns them as the image. If there is an error during the process, it logs an error message.",True,"The `getImageInBytes` method takes an image identifier as input and returns the corresponding image as a byte array. It first retrieves an input stream for the image, then reads the stream and converts it into a byte array. If any error occurs during the process, it logs an error message."
44,getImage(String),get image image id loads an image from a given image identifier param image id the identifier of the image return the image for the given identifier ,Method,,,net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageURL(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageURL(String) javax.swing.ImageIcon+ImageIcon(URL),,345,12,1,"/** 
 * Loads an image from a given image identifier.
 * @param imageID The identifier of the image.
 * @return The image for the given identifier.
 */
","/**
     * Loads an image from a given image identifier.
     *
     * @param imageID The identifier of the image.
     * @return The image for the given identifier.
     */
    public ImageIcon getImage(String imageID)
    {
        URL imageURL = getImageURL(imageID);

        return (imageURL == null) ? null : new ImageIcon(imageURL);
    }",False,False,This method loads an image using a given image identifier. It returns the image as an ImageIcon object.,True,"The code defines a method called `getImage` that takes an image identifier as input and returns the corresponding image as an `ImageIcon` object. It first retrieves the URL of the image using the `getImageURL` method, and then creates and returns the `ImageIcon` object using the retrieved URL."
45,prepareSkinBundleFromZip(File),prepare skin bundle from zip zip file builds a new skin bundle from the zip file content param zip file zip file with skin information return file for the bundle throws exception when something goes wrong ,Method,,,"net.java.sip.communicator.impl.resources.util.SkinJarBuilder+createBundleFromZip(File,ResourcePack) net.java.sip.communicator.impl.resources.util.SkinJarBuilder+createBundleFromZip(File,ResourcePack)",net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack,391,12,1,"/** 
 * Builds a new skin bundle from the zip file content.
 * @param zipFile Zip file with skin information.
 * @return <tt>File</tt> for the bundle.
 * @throws Exception When something goes wrong.
 */
","/**
     * Builds a new skin bundle from the zip file content.
     *
     * @param zipFile Zip file with skin information.
     * @return <tt>File</tt> for the bundle.
     * @throws Exception When something goes wrong.
     */
    public File prepareSkinBundleFromZip(File zipFile)
        throws Exception
    {
        return SkinJarBuilder.createBundleFromZip(zipFile, imagePack);
    }",False,False,This method prepares a skin bundle by creating it from the content of a zip file. It takes a zip file as input and returns a File object representing the bundle. It may throw an exception if something goes wrong.,True,"This code defines a method called `prepareSkinBundleFromZip` that takes a zip file as input and returns a file object. It calls the `createBundleFromZip` method from the `SkinJarBuilder` class, passing the zip file and an `imagePack` object as arguments. The method is expected to throw an exception if any error occurs during the process."
