index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,logger,Field,,,,,244,6,26,"/** 
 * The <tt>Logger</tt> used by the <tt>ResourceManagementServiceImpl</tt> class and its instances for logging output.
 */
","/**
     * The <tt>Logger</tt> used by the <tt>ResourceManagementServiceImpl</tt>
     * class and its instances for logging output.
     */
    private static final Logger logger
        = Logger.getLogger(ResourceManagementServiceImpl.class);",False
2,colorResources,Field,,,,,117,4,2,"/** 
 * Resources for currently loaded <tt>ColorPack</tt>.
 */
","/**
     * Resources for currently loaded <tt>ColorPack</tt>.
     */
    private Map<String, String> colorResources;",True
3,colorPack,Field,,,,,90,4,2,"/** 
 * Currently loaded color pack.
 */
","/**
     * Currently loaded color pack.
     */
    private ResourcePack colorPack = null;",True
4,imageResources,Field,,,,,117,4,2,"/** 
 * Resources for currently loaded <tt>ImagePack</tt>.
 */
","/**
     * Resources for currently loaded <tt>ImagePack</tt>.
     */
    private Map<String, String> imageResources;",True
5,imagePack,Field,,,,,90,4,2,"/** 
 * Currently loaded image pack.
 */
","/**
     * Currently loaded image pack.
     */
    private ResourcePack imagePack = null;",True
6,languageResources,Field,,,,,123,4,2,"/** 
 * Resources for currently loaded <tt>LanguagePack</tt>.
 */
","/**
     * Resources for currently loaded <tt>LanguagePack</tt>.
     */
    private Map<String, String> languageResources;",True
7,languagePack,Field,,,,,96,4,2,"/** 
 * Currently loaded language pack.
 */
","/**
     * Currently loaded language pack.
     */
    private LanguagePack languagePack = null;",True
8,languageLocale,Field,,,,,228,6,2,"/** 
 * The  {@link Locale} of <code>languageResources</code> so that the cachingof the latter can be used when a string with the same <code>Locale</code> is requested.
 */
","/**
     * The {@link Locale} of <code>languageResources</code> so that the caching
     * of the latter can be used when a string with the same <code>Locale</code>
     * is requested.
     */
    private Locale languageLocale;",True
9,settingsResources,Field,,,,,123,4,2,"/** 
 * Resources for currently loaded <tt>SettingsPack</tt>.
 */
","/**
     * Resources for currently loaded <tt>SettingsPack</tt>.
     */
    private Map<String, String> settingsResources;",True
10,settingsPack,Field,,,,,96,4,2,"/** 
 * Currently loaded settings pack.
 */
","/**
     * Currently loaded settings pack.
     */
    private ResourcePack settingsPack = null;",True
11,soundResources,Field,,,,,117,4,2,"/** 
 * Resources for currently loaded <tt>SoundPack</tt>.
 */
","/**
     * Resources for currently loaded <tt>SoundPack</tt>.
     */
    private Map<String, String> soundResources;",True
12,soundPack,Field,,,,,90,4,2,"/** 
 * Currently loaded sound pack.
 */
","/**
     * Currently loaded sound pack.
     */
    private ResourcePack soundPack = null;",True
13,skinResources,Field,,,,,115,4,2,"/** 
 * Resources for currently loaded <tt>SkinPack</tt>.
 */
","/**
     * Resources for currently loaded <tt>SkinPack</tt>.
     */
    private Map<String, String> skinResources;",False
14,skinPack,Field,,,,,92,4,2,"/** 
 * Currently loaded <tt>SkinPack</tt>.
 */
","/**
     * Currently loaded <tt>SkinPack</tt>.
     */
    private SkinPack skinPack = null;",True
15,uiService,Field,,,,,80,4,2,"/** 
 * UI Service reference.
 */
","/**
     * UI Service reference.
     */
    private UIService uiService = null;",False
16,ResourceManagementServiceImpl(),Method,,,"org.osgi.framework.BundleContext+addServiceListener(ServiceListener) org.osgi.framework.BundleContext+addServiceListener(ServiceListener) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) org.jitsi.service.configuration.ConfigurationService+getProperty(String) net.java.sip.communicator.impl.resources.ResourceManagementActivator+getConfigurationService() net.java.sip.communicator.impl.resources.ResourceManagementActivator+getConfigurationService() org.jitsi.service.configuration.ConfigurationService+getProperty(String) java.util.Locale+setDefault(Locale) java.util.Locale+setDefault(Locale) net.java.sip.communicator.service.resources.ResourceManagementServiceUtils+getLocale(String) net.java.sip.communicator.service.resources.ResourceManagementServiceUtils+getLocale(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() java.util.Locale+getDefault() java.util.Locale+getDefault() net.java.sip.communicator.service.resources.LanguagePack+getResources(Locale) net.java.sip.communicator.service.resources.LanguagePack+getResources(Locale) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getImageResources() net.java.sip.communicator.service.resources.SkinPack+getImageResources() java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getColorResources() net.java.sip.communicator.service.resources.SkinPack+getColorResources() java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getSettingsResources() net.java.sip.communicator.service.resources.SkinPack+getSettingsResources() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getUIService() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getUIService() net.java.sip.communicator.service.gui.UIService+repaintUI() net.java.sip.communicator.service.gui.UIService+repaintUI()",net.java.sip.communicator.impl.resources.ResourceManagementActivator+bundleContext net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.service.resources.ColorPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.service.resources.ImagePack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack org.jitsi.service.resources.ResourceManagementService+DEFAULT_LOCALE_CONFIG net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.service.resources.LanguagePack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageLocale net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageLocale net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.service.resources.SettingsPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.service.resources.SoundPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.service.resources.SkinPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack,2401,70,0,"/** 
 * Initializes already registered default resource packs.
 */
","/**
     * Initializes already registered default resource packs.
     */
    ResourceManagementServiceImpl()
    {
        ResourceManagementActivator.bundleContext.addServiceListener(this);

        colorPack =
            getDefaultResourcePack(ColorPack.class.getName(),
                ColorPack.RESOURCE_NAME_DEFAULT_VALUE);

        if (colorPack != null)
            colorResources = getResources(colorPack);

        imagePack =
            getDefaultResourcePack(ImagePack.class.getName(),
                ImagePack.RESOURCE_NAME_DEFAULT_VALUE);

        if (imagePack != null)
            imageResources = getResources(imagePack);

        // changes the default locale if set in the config
        String defaultLocale = (String)ResourceManagementActivator.
                getConfigurationService().getProperty(DEFAULT_LOCALE_CONFIG);
        if(defaultLocale != null)
            Locale.setDefault(
                ResourceManagementServiceUtils.getLocale(defaultLocale));

        languagePack =
            (LanguagePack) getDefaultResourcePack(LanguagePack.class.getName(),
                LanguagePack.RESOURCE_NAME_DEFAULT_VALUE);

        if (languagePack != null)
        {
            languageLocale = Locale.getDefault();
            languageResources = languagePack.getResources(languageLocale);
        }

        settingsPack =
            getDefaultResourcePack(SettingsPack.class.getName(),
                SettingsPack.RESOURCE_NAME_DEFAULT_VALUE);

        if (settingsPack != null)
            settingsResources = getResources(settingsPack);

        soundPack =
            getDefaultResourcePack(SoundPack.class.getName(),
                SoundPack.RESOURCE_NAME_DEFAULT_VALUE);

        if (soundPack != null)
            soundResources = getResources(soundPack);

        skinPack = (SkinPack) getDefaultResourcePack(
            SkinPack.class.getName(), SkinPack.RESOURCE_NAME_DEFAULT_VALUE);

        if (skinPack != null)
        {
            skinResources = getResources(skinPack);
            if (imageResources != null)
                imageResources.putAll(skinPack.getImageResources());
            colorResources.putAll(skinPack.getColorResources());
            settingsResources.putAll(skinPack.getSettingsResources());
        }

        UIService serv = getUIService();
        if (serv != null)
        {
            serv.repaintUI();
        }
    }",False
17,"getDefaultResourcePack(String,String)",Method,ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent),,"org.osgi.framework.BundleContext+getServiceReferences(String,String) org.osgi.framework.BundleContext+getServiceReferences(String,String) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable) org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.BundleContext+getService(ServiceReference)",net.java.sip.communicator.service.resources.ResourcePack+RESOURCE_NAME net.java.sip.communicator.impl.resources.ResourceManagementActivator+bundleContext net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger net.java.sip.communicator.impl.resources.ResourceManagementActivator+bundleContext,1245,37,2,"/** 
 * Searches for the <tt>ResourcePack</tt> corresponding to the given <tt>className</tt> and <tt></tt>.
 * @param className The name of the resource class.
 * @param typeName The name of the type we're looking for.For example: RESOURCE_NAME_DEFAULT_VALUE
 * @return the <tt>ResourcePack</tt> corresponding to the given<tt>className</tt> and <tt></tt>.
 */
","/**
     * Searches for the <tt>ResourcePack</tt> corresponding to the given
     * <tt>className</tt> and <tt></tt>.
     *
     * @param className The name of the resource class.
     * @param typeName The name of the type we're looking for.
     * For example: RESOURCE_NAME_DEFAULT_VALUE
     * @return the <tt>ResourcePack</tt> corresponding to the given
     * <tt>className</tt> and <tt></tt>.
     */
    private ResourcePack getDefaultResourcePack(String className,
                                                String typeName)
    {
        ServiceReference[] serRefs = null;

        String osgiFilter =
            ""("" + ResourcePack.RESOURCE_NAME + ""="" + typeName + "")"";

        try
        {
            serRefs = ResourceManagementActivator
                .bundleContext.getServiceReferences(
                    className,
                    osgiFilter);
        }
        catch (InvalidSyntaxException exc)
        {
            logger.error(""Could not obtain resource packs reference."", exc);
        }

        if ((serRefs != null) && (serRefs.length > 0))
        {
            return (ResourcePack)
                ResourceManagementActivator.bundleContext.getService(serRefs[0]);
        }
        return null;
    }",True
18,getUIService(),Method,ResourceManagementServiceImpl() serviceChanged(ServiceEvent) serviceChanged(ServiceEvent),,"net.java.sip.communicator.util.ServiceUtils+getService(BundleContext,Class<T>) net.java.sip.communicator.util.ServiceUtils+getService(BundleContext,Class<T>)",net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService net.java.sip.communicator.impl.resources.ResourceManagementActivator+bundleContext net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService,461,16,2,"/** 
 * Returns the <tt>UIService</tt> obtained from the bundle context.
 * @return the <tt>UIService</tt> obtained from the bundle context
 */
","/**
     * Returns the <tt>UIService</tt> obtained from the bundle context.
     *
     * @return the <tt>UIService</tt> obtained from the bundle context
     */
    private UIService getUIService()
    {
        if (uiService == null)
        {
            uiService
                = ServiceUtils.getService(
                        ResourceManagementActivator.bundleContext,
                        UIService.class);
        }
        return uiService;
    }",False
19,getResources(ResourcePack),Method,ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() ResourceManagementServiceImpl() serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent) serviceChanged(ServiceEvent),,net.java.sip.communicator.service.resources.ResourcePack+getResources() net.java.sip.communicator.service.resources.ResourcePack+getResources(),,446,13,2,"/** 
 * Returns the <tt>Map</tt> of (key, value) pairs contained in the given resource pack.
 * @param resourcePack The <tt>ResourcePack</tt> from which we're obtainingthe resources.
 * @return the <tt>Map</tt> of (key, value) pairs contained in the givenresource pack.
 */
","/**
     * Returns the <tt>Map</tt> of (key, value) pairs contained in the given
     * resource pack.
     *
     * @param resourcePack The <tt>ResourcePack</tt> from which we're obtaining
     * the resources.
     * @return the <tt>Map</tt> of (key, value) pairs contained in the given
     * resource pack.
     */
    private Map<String, String> getResources(ResourcePack resourcePack)
    {
        return resourcePack.getResources();
    }",False
20,serviceChanged(ServiceEvent),Method,,,"org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.BundleContext+getService(ServiceReference) org.osgi.framework.ServiceEvent+getServiceReference() org.osgi.framework.ServiceEvent+getServiceReference() org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() net.java.sip.communicator.service.gui.UIService+repaintUI() net.java.sip.communicator.service.gui.UIService+repaintUI() org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() java.lang.Object+equals(Object) java.lang.Object+equals(Object) org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.util.Locale+getDefault() java.util.Locale+getDefault() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getImageResources() net.java.sip.communicator.service.resources.SkinPack+getImageResources() java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getColorResources() net.java.sip.communicator.service.resources.SkinPack+getColorResources() java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getSettingsResources() net.java.sip.communicator.service.resources.SkinPack+getSettingsResources() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getUIService() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getUIService() net.java.sip.communicator.service.gui.UIService+repaintUI() net.java.sip.communicator.service.gui.UIService+repaintUI() org.osgi.framework.ServiceEvent+getType() org.osgi.framework.ServiceEvent+getType() java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.lang.Object+equals(Object) java.lang.Object+equals(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getDefaultResourcePack(String,String) java.lang.Class+getName() java.lang.Class+getName() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getResources(ResourcePack) java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getImageResources() net.java.sip.communicator.service.resources.SkinPack+getImageResources() java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getColorResources() net.java.sip.communicator.service.resources.SkinPack+getColorResources() java.util.Map+putAll(Map) java.util.Map+putAll(Map) net.java.sip.communicator.service.resources.SkinPack+getSettingsResources() net.java.sip.communicator.service.resources.SkinPack+getSettingsResources() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getUIService() net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getUIService() net.java.sip.communicator.service.gui.UIService+repaintUI() net.java.sip.communicator.service.gui.UIService+repaintUI()",net.java.sip.communicator.impl.resources.ResourceManagementActivator+bundleContext net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService org.osgi.framework.ServiceEvent+REGISTERED net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService org.osgi.framework.ServiceEvent+UNREGISTERING net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+uiService org.osgi.framework.ServiceEvent+REGISTERED net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageLocale net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack org.osgi.framework.ServiceEvent+UNREGISTERING net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.service.resources.ColorPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.service.resources.ImagePack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.service.resources.LanguagePack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.service.resources.SettingsPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.service.resources.SoundPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.service.resources.SkinPack+RESOURCE_NAME_DEFAULT_VALUE net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack,6605,182,1,"/** 
 * Handles all <tt>ServiceEvent</tt>s corresponding to <tt>ResourcePack</tt> being registered or unregistered. Also handles <tt>UIService</tt> reference.
 * @param event the <tt>ServiceEvent</tt> that notified us
 */
","/**
     * Handles all <tt>ServiceEvent</tt>s corresponding to <tt>ResourcePack</tt>
     * being registered or unregistered.
     *
     * Also handles <tt>UIService</tt> reference.
     *
     * @param event the <tt>ServiceEvent</tt> that notified us
     */
    public void serviceChanged(ServiceEvent event)
    {
        Object sService = ResourceManagementActivator.bundleContext.getService(
            event.getServiceReference());

        if (sService instanceof UIService && uiService == null
                && event.getType() == ServiceEvent.REGISTERED)
        {
            uiService = (UIService) sService;
            uiService.repaintUI();
        }
        else if (sService instanceof UIService
                && event.getType() == ServiceEvent.UNREGISTERING)
        {
            if (uiService != null && uiService.equals(sService))
            {
                uiService = null;
            }
        }

        if (!(sService instanceof ResourcePack))
        {
            return;
        }

        ResourcePack resourcePack = (ResourcePack) sService;

        if (event.getType() == ServiceEvent.REGISTERED)
        {
            if (logger.isInfoEnabled())
                logger.info(""Resource registered "" + resourcePack);

            Map<String, String> resources = getResources(resourcePack);

            if(resourcePack instanceof ColorPack && colorPack == null)
            {
                colorPack = resourcePack;
                colorResources = resources;
            }
            else if(resourcePack instanceof ImagePack && imagePack == null)
            {
                imagePack = resourcePack;
                imageResources = resources;
            }
            else if(resourcePack instanceof LanguagePack && languagePack == null)
            {
                languagePack = (LanguagePack) resourcePack;
                languageLocale = Locale.getDefault();
                languageResources = resources;
            }
            else if(resourcePack instanceof SettingsPack && settingsPack == null)
            {
                settingsPack = resourcePack;
                settingsResources = resources;
            }
            else if(resourcePack instanceof SoundPack && soundPack == null)
            {
                soundPack = resourcePack;
                soundResources = resources;
            }
            else if(resourcePack instanceof SkinPack && skinPack == null)
            {
                skinPack = (SkinPack) resourcePack;

                if (imagePack!=null)
                    imageResources = getResources(imagePack);

                if (colorPack!=null)
                    colorResources = getResources(colorPack);

                if (settingsPack != null)
                    settingsResources = getResources(settingsPack);

                skinResources = resources;
                if (imageResources != null)
                    imageResources.putAll(skinPack.getImageResources());
                colorResources.putAll(skinPack.getColorResources());
                settingsResources.putAll(skinPack.getSettingsResources());

                UIService serv = getUIService();
                if (serv != null)
                {
                    serv.repaintUI();
                }
            }
        }
        else if (event.getType() == ServiceEvent.UNREGISTERING)
        {
            if(resourcePack instanceof ColorPack
                    && colorPack.equals(resourcePack))
            {
                colorPack =
                    getDefaultResourcePack(ColorPack.class.getName(),
                        ColorPack.RESOURCE_NAME_DEFAULT_VALUE);

                if (colorPack != null)
                    colorResources = getResources(colorPack);
            }
            else if(resourcePack instanceof ImagePack
                    && imagePack.equals(resourcePack))
            {
                imagePack =
                    getDefaultResourcePack(ImagePack.class.getName(),
                        ImagePack.RESOURCE_NAME_DEFAULT_VALUE);

                if (imagePack != null)
                    imageResources = getResources(imagePack);
            }
            else if(resourcePack instanceof LanguagePack
                    && languagePack.equals(resourcePack))
            {
                languagePack =
                    (LanguagePack) getDefaultResourcePack(
                        LanguagePack.class.getName(),
                        LanguagePack.RESOURCE_NAME_DEFAULT_VALUE);
            }
            else if(resourcePack instanceof SettingsPack
                    && settingsPack.equals(resourcePack))
            {
                settingsPack =
                    getDefaultResourcePack(SettingsPack.class.getName(),
                        SettingsPack.RESOURCE_NAME_DEFAULT_VALUE);

                if (settingsPack != null)
                    settingsResources = getResources(settingsPack);
            }
            else if(resourcePack instanceof SoundPack
                    && soundPack.equals(resourcePack))
            {
                soundPack =
                    getDefaultResourcePack(SoundPack.class.getName(),
                        SoundPack.RESOURCE_NAME_DEFAULT_VALUE);

                if (soundPack != null)
                    soundResources = getResources(soundPack);
            }
            else if(resourcePack instanceof SkinPack
                    && skinPack.equals(resourcePack))
            {
                if(imagePack!=null)
                {
                    imageResources = getResources(imagePack);
                }

                if(colorPack!=null)
                {
                    colorResources = getResources(colorPack);
                }

                if(settingsPack!=null)
                {
                    settingsResources = getResources(settingsPack);
                }

                skinPack = (SkinPack) getDefaultResourcePack(
                    SkinPack.class.getName(),
                    SkinPack.RESOURCE_NAME_DEFAULT_VALUE);

                if (skinPack != null)
                {
                    skinResources = getResources(skinPack);
                    imageResources.putAll(skinPack.getImageResources());
                    colorResources.putAll(skinPack.getColorResources());
                    settingsResources.putAll(skinPack.getSettingsResources());
                }

                UIService serv = getUIService();
                if (serv != null)
                {
                    serv.repaintUI();
                }
            }
        }
    }",False
21,getColor(String),Method,,,"java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.util.Logger+error(Object) net.java.sip.communicator.util.Logger+error(Object) java.lang.Integer+parseInt(String,int) java.lang.Integer+parseInt(String,int)",net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,564,21,1,"/** 
 * Returns the int representation of the color corresponding to the given key.
 * @param key The key of the color in the colors properties file.
 * @return the int representation of the color corresponding to thegiven key.
 */
","/**
     * Returns the int representation of the color corresponding to the
     * given key.
     *
     * @param key The key of the color in the colors properties file.
     * @return the int representation of the color corresponding to the
     * given key.
     */
    public int getColor(String key)
    {
        String res = colorResources.get(key);

        if(res == null)
        {
            logger.error(""Missing color resource for key: "" + key);

            return 0xFFFFFF;
        }
        else
            return Integer.parseInt(res, 16);
    }",False
22,getColorString(String),Method,,,java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.util.Logger+error(Object) net.java.sip.communicator.util.Logger+error(Object),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+colorResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,559,21,1,"/** 
 * Returns the string representation of the color corresponding to the given key.
 * @param key The key of the color in the colors properties file.
 * @return the string representation of the color corresponding to thegiven key.
 */
","/**
     * Returns the string representation of the color corresponding to the
     * given key.
     *
     * @param key The key of the color in the colors properties file.
     * @return the string representation of the color corresponding to the
     * given key.
     */
    public String getColorString(String key)
    {
        String res = colorResources.get(key);

        if(res == null)
        {
            logger.error(""Missing color resource for key: "" + key);

            return ""0xFFFFFF"";
        }
        else
            return res;
    }",False
23,getImageInputStreamForPath(String),Method,getImageInputStream(String),,java.lang.ClassLoader+getResourceAsStream(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResourceAsStream(String) java.lang.ClassLoader+getResourceAsStream(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResourceAsStream(String) java.lang.ClassLoader+getResourceAsStream(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResourceAsStream(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack,790,26,1,"/** 
 * Returns the <tt>InputStream</tt> of the image corresponding to the given path.
 * @param path The path to the image file.
 * @return the <tt>InputStream</tt> of the image corresponding to the givenpath.
 */
","/**
     * Returns the <tt>InputStream</tt> of the image corresponding to the given
     * path.
     *
     * @param path The path to the image file.
     * @return the <tt>InputStream</tt> of the image corresponding to the given
     * path.
     */
    public InputStream getImageInputStreamForPath(String path)
    {
        if(skinPack!=null)
        {
            if(skinPack.getClass().getClassLoader()
                .getResourceAsStream(path)!=null)
            {
                return skinPack.getClass().getClassLoader()
                        .getResourceAsStream(path);
            }
        }

        if (path != null && imagePack != null)
            return imagePack.getClass().getClassLoader()
                    .getResourceAsStream(path);

        return null;
    }",False
24,getImageInputStream(String),Method,getImageInBytes(String),,net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImagePath(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImagePath(String) java.lang.String+length() java.lang.String+length() net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageInputStreamForPath(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageInputStreamForPath(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,625,21,1,"/** 
 * Returns the <tt>InputStream</tt> of the image corresponding to the given key.
 * @param streamKey The identifier of the image in the resource propertiesfile.
 * @return the <tt>InputStream</tt> of the image corresponding to the givenkey.
 */
","/**
     * Returns the <tt>InputStream</tt> of the image corresponding to the given
     * key.
     *
     * @param streamKey The identifier of the image in the resource properties
     * file.
     * @return the <tt>InputStream</tt> of the image corresponding to the given
     * key.
     */
    public InputStream getImageInputStream(String streamKey)
    {
        String path = getImagePath(streamKey);

        if (path == null || path.length() == 0)
        {
            logger.warn(""Missing resource for key: "" + streamKey);
            return null;
        }

        return getImageInputStreamForPath(path);
    }",False
25,getImageURL(String),Method,getImage(String),,net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImagePath(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImagePath(String) java.lang.String+length() java.lang.String+length() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+isInfoEnabled() net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.util.Logger+info(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageURLForPath(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageURLForPath(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,594,18,1,"/** 
 * Returns the <tt>URL</tt> of the image corresponding to the given key.
 * @param urlKey The identifier of the image in the resource properties file.
 * @return the <tt>URL</tt> of the image corresponding to the given key
 */
","/**
     * Returns the <tt>URL</tt> of the image corresponding to the given key.
     *
     * @param urlKey The identifier of the image in the resource properties file.
     * @return the <tt>URL</tt> of the image corresponding to the given key
     */
    public URL getImageURL(String urlKey)
    {
        String path = getImagePath(urlKey);

        if (path == null || path.length() == 0)
        {
            if (logger.isInfoEnabled())
                logger.info(""Missing resource for key: "" + urlKey);
            return null;
        }
        return getImageURLForPath(path);
    }",False
26,getImagePath(String),Method,getImageInputStream(String) getImageURL(String),,java.util.Map+get(Object) java.util.Map+get(Object),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imageResources,350,10,1,"/** 
 * Returns the image path corresponding to the given key.
 * @param key The identifier of the image in the resource properties file.
 * @return the image path corresponding to the given key.
 */
","/**
     * Returns the image path corresponding to the given key.
     *
     * @param key The identifier of the image in the resource properties file.
     * @return the image path corresponding to the given key.
     */
    public String getImagePath(String key)
    {
        return (imageResources == null) ? null : imageResources.get(key);
    }",True
27,getImageURLForPath(String),Method,getImageURL(String),,java.lang.ClassLoader+getResource(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResource(String) java.lang.ClassLoader+getResource(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResource(String) java.lang.ClassLoader+getResource(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResource(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+skinPack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack,590,18,1,"/** 
 * Returns the <tt>URL</tt> of the image corresponding to the given path.
 * @param path The path to the given image file.
 * @return the <tt>URL</tt> of the image corresponding to the given path.
 */
","/**
     * Returns the <tt>URL</tt> of the image corresponding to the given path.
     *
     * @param path The path to the given image file.
     * @return the <tt>URL</tt> of the image corresponding to the given path.
     */
    public URL getImageURLForPath(String path)
    {
        if(skinPack!=null)
        {
            if(skinPack.getClass().getClassLoader().getResource(path)!=null)
            {
                return skinPack.getClass().getClassLoader().getResource(path);
            }
        }

        return imagePack.getClass().getClassLoader().getResource(path);
    }",False
28,getAvailableLocales(),Method,,,net.java.sip.communicator.service.resources.LanguagePack+getAvailableLocales() net.java.sip.communicator.service.resources.LanguagePack+getAvailableLocales(),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack,229,8,1,"/** 
 * All the locales in the language pack.
 * @return all the locales this Language pack contains.
 */
","/**
     * All the locales in the language pack.
     * @return all the locales this Language pack contains.
     */
    public Iterator<Locale> getAvailableLocales()
    {
        return languagePack.getAvailableLocales();
    }",True
29,getI18NString(String),Method,,,"net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18NString(String,Locale) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18NString(String,Locale) java.util.Locale+getDefault() java.util.Locale+getDefault()",,361,10,1,"/** 
 * Returns an internationalized string corresponding to the given key.
 * @param key The identifier of the string in the resources properties file.
 * @return An internationalized string corresponding to the given key.
 */
","/**
     * Returns an internationalized string corresponding to the given key.
     *
     * @param key The identifier of the string in the resources properties file.
     * @return An internationalized string corresponding to the given key.
     */
    public String getI18NString(String key)
    {
        return getI18NString(key, Locale.getDefault());
    }",True
30,"getI18NString(String,Locale)",Method,getI18NString(String),,"net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18NString(String,String[],Locale) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18NString(String,String[],Locale)",,426,12,1,"/** 
 * Returns an internationalized string corresponding to the given key.
 * @param key The identifier of the string in the resources properties file.
 * @param locale The locale.
 * @return An internationalized string corresponding to the given key andgiven locale.
 */
","/**
     * Returns an internationalized string corresponding to the given key.
     *
     * @param key The identifier of the string in the resources properties file.
     * @param locale The locale.
     * @return An internationalized string corresponding to the given key and
     * given locale.
     */
    public String getI18NString(String key, Locale locale)
    {
        return getI18NString(key, null, locale);
    }",True
31,"getI18NString(String,String[])",Method,,,"net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18NString(String,String[],Locale) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18NString(String,String[],Locale) java.util.Locale+getDefault() java.util.Locale+getDefault()",,421,11,1,"/** 
 * Returns an internationalized string corresponding to the given key.
 * @param key The identifier of the string.
 * @param params the parameters to pass to the localized string
 * @return An internationalized string corresponding to the given key.
 */
","/**
     * Returns an internationalized string corresponding to the given key.
     *
     * @param key The identifier of the string.
     * @param params the parameters to pass to the localized string
     * @return An internationalized string corresponding to the given key.
     */
    public String getI18NString(String key, String[] params)
    {
        return getI18NString(key, params, Locale.getDefault());
    }",True
32,"getI18NString(String,String[],Locale)",Method,"getI18NString(String,Locale) getI18NString(String,String[])",,"java.util.Locale+equals(Object) java.util.Locale+equals(Object) net.java.sip.communicator.service.resources.LanguagePack+getResources(Locale) net.java.sip.communicator.service.resources.LanguagePack+getResources(Locale) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+charAt(int) java.lang.String+charAt(int) java.lang.String+substring(int,int) java.lang.String+substring(int,int) java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+concat(String) java.lang.String+concat(String) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+replaceAll(String,String) java.lang.String+replaceAll(String,String) java.text.MessageFormat+format(String,Object[]) java.text.MessageFormat+format(String,Object[])",net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageLocale net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,1792,56,1,"/** 
 * Returns an internationalized string corresponding to the given key.
 * @param key The identifier of the string in the resources propertiesfile.
 * @param params the parameters to pass to the localized string
 * @param locale The locale.
 * @return An internationalized string corresponding to the given key.
 */
","/**
     * Returns an internationalized string corresponding to the given key.
     *
     * @param key The identifier of the string in the resources properties
     * file.
     * @param params the parameters to pass to the localized string
     * @param locale The locale.
     * @return An internationalized string corresponding to the given key.
     */
    public String getI18NString(String key, String[] params, Locale locale)
    {
        Map<String, String> stringResources;
        if ((locale != null) && locale.equals(languageLocale))
        {
            stringResources = languageResources;
        }
        else
        {
            stringResources
                = (languagePack == null)
                    ? null
                    : languagePack.getResources(locale);
        }

        String resourceString
            = (stringResources == null) ? null : stringResources.get(key);

        if (resourceString == null)
        {
            logger.warn(""Missing resource for key: "" + key);
            return '!' + key + '!';
        }

        int mnemonicIndex = resourceString.indexOf('&');

        if (mnemonicIndex == 0
            || (mnemonicIndex > 0
                && resourceString.charAt(mnemonicIndex - 1) != '\\'))
        {
            String firstPart = resourceString.substring(0, mnemonicIndex);
            String secondPart = resourceString.substring(mnemonicIndex + 1);

            resourceString = firstPart.concat(secondPart);
        }

        if (resourceString.indexOf('\\') > -1)
        {
            resourceString = resourceString.replaceAll(""\\\\"", """");
        }

        if(params != null)
             resourceString
                = MessageFormat.format(resourceString, (Object[])params);

        return resourceString;
    }",True
33,getI18nMnemonic(String),Method,,,"net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18nMnemonic(String,Locale) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getI18nMnemonic(String,Locale) java.util.Locale+getDefault() java.util.Locale+getDefault()",,363,10,1,"/** 
 * Returns an internationalized string corresponding to the given key.
 * @param key The identifier of the string in the resources properties file.
 * @return An internationalized string corresponding to the given key.
 */
","/**
     * Returns an internationalized string corresponding to the given key.
     *
     * @param key The identifier of the string in the resources properties file.
     * @return An internationalized string corresponding to the given key.
     */
    public char getI18nMnemonic(String key)
    {
        return getI18nMnemonic(key, Locale.getDefault());
    }",True
34,"getI18nMnemonic(String,Locale)",Method,getI18nMnemonic(String),,java.util.Locale+equals(Object) java.util.Locale+equals(Object) net.java.sip.communicator.service.resources.LanguagePack+getResources(Locale) net.java.sip.communicator.service.resources.LanguagePack+getResources(Locale) java.util.Map+get(Object) java.util.Map+get(Object) net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) java.lang.String+indexOf(int) java.lang.String+indexOf(int) java.lang.String+charAt(int) java.lang.String+charAt(int),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageLocale net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languageResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+languagePack net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,1058,36,1,"/** 
 * Returns an internationalized string corresponding to the given key.
 * @param key The identifier of the string in the resources properties file.
 * @param locale The locale that we'd like to receive the result in.
 * @return An internationalized string corresponding to the given key.
 */
","/**
     * Returns an internationalized string corresponding to the given key.
     *
     * @param key The identifier of the string in the resources properties file.
     * @param locale The locale that we'd like to receive the result in.
     * @return An internationalized string corresponding to the given key.
     */
    public char getI18nMnemonic(String key, Locale locale)
    {
        Map<String, String> stringResources;
        if ((locale != null) && locale.equals(languageLocale))
        {
            stringResources = languageResources;
        }
        else
        {
            stringResources = languagePack.getResources(locale);
        }

        String resourceString = stringResources.get(key);

        if (resourceString == null)
        {
            logger.warn(""Missing resource for key: "" + key);
            return 0;
        }

        int mnemonicIndex = resourceString.indexOf('&');

        if (mnemonicIndex > -1)
        {
            return resourceString.charAt(mnemonicIndex + 1);
        }

        return 0;
    }",True
35,getSettingsString(String),Method,"getSettingsInt(String) getSettingsURL(String) getSettingsInputStream(String,Class<?>)",,java.util.Map+get(Object) java.util.Map+get(Object),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsResources,377,10,1,"/** 
 * Returns the int value of the corresponding configuration key.
 * @param key The identifier of the string in the resources properties file.
 * @return the int value of the corresponding configuration key.
 */
","/**
     * Returns the int value of the corresponding configuration key.
     *
     * @param key The identifier of the string in the resources properties file.
     * @return the int value of the corresponding configuration key.
     */
    public String getSettingsString(String key)
    {
        return (settingsResources == null) ? null : settingsResources.get(key);
    }",True
36,getSettingsInt(String),Method,,,net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsString(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsString(String) net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) java.lang.Integer+parseInt(String) java.lang.Integer+parseInt(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,537,18,1,"/** 
 * Returns the int value of the corresponding configuration key.
 * @param key The identifier of the string in the resources properties file.
 * @return the int value of the corresponding configuration key.
 */
","/**
     * Returns the int value of the corresponding configuration key.
     *
     * @param key The identifier of the string in the resources properties file.
     * @return the int value of the corresponding configuration key.
     */
    public int getSettingsInt(String key)
    {
        String resourceString = getSettingsString(key);

        if (resourceString == null)
        {
            logger.warn(""Missing resource for key: "" + key);
            return 0;
        }

        return Integer.parseInt(resourceString);
    }",True
37,getSettingsURL(String),Method,,,net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsString(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsString(String) java.lang.String+length() java.lang.String+length() net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) java.lang.ClassLoader+getResource(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResource(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack,510,17,1,"/** 
 * Returns an <tt>URL</tt> from a given identifier.
 * @param urlKey The identifier of the url.
 * @return The url for the given identifier.
 */
","/**
     * Returns an <tt>URL</tt> from a given identifier.
     *
     * @param urlKey The identifier of the url.
     * @return The url for the given identifier.
     */
    public URL getSettingsURL(String urlKey)
    {
        String path = getSettingsString(urlKey);

        if (path == null || path.length() == 0)
        {
            logger.warn(""Missing resource for key: "" + urlKey);
            return null;
        }
        return settingsPack.getClass().getClassLoader().getResource(path);
    }",True
38,getSettingsInputStream(String),Method,,,"net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsInputStream(String,Class<?>) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsInputStream(String,Class<?>) java.lang.Object+getClass() java.lang.Object+getClass()",net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+settingsPack,324,10,1,"/** 
 * Returns a stream from a given identifier.
 * @param streamKey The identifier of the stream.
 * @return The stream for the given identifier.
 */
","/**
     * Returns a stream from a given identifier.
     *
     * @param streamKey The identifier of the stream.
     * @return The stream for the given identifier.
     */
    public InputStream getSettingsInputStream(String streamKey)
    {
        return getSettingsInputStream(streamKey, settingsPack.getClass());
    }",True
39,"getSettingsInputStream(String,Class<?>)",Method,getSettingsInputStream(String),,net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsString(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSettingsString(String) java.lang.String+length() java.lang.String+length() net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) java.lang.ClassLoader+getResourceAsStream(String) java.lang.Class+getClassLoader() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResourceAsStream(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,778,22,1,"/** 
 * Returns a stream from a given identifier, obtained through the class loader of the given resourceClass.
 * @param streamKey The identifier of the stream.
 * @param resourceClass the resource class through which the resource wouldbe obtained
 * @return The stream for the given identifier.
 */
","/**
     * Returns a stream from a given identifier, obtained through the class
     * loader of the given resourceClass.
     *
     * @param streamKey The identifier of the stream.
     * @param resourceClass the resource class through which the resource would
     * be obtained
     * @return The stream for the given identifier.
     */
    public InputStream getSettingsInputStream(  String streamKey,
                                                Class<?> resourceClass)
    {
        String path = getSettingsString(streamKey);

        if (path == null || path.length() == 0)
        {
            logger.warn(""Missing resource for key: "" + streamKey);
            return null;
        }

        return resourceClass.getClassLoader().getResourceAsStream(path);
    }",True
40,getSoundURL(String),Method,,,java.util.Map+get(Object) java.util.Map+get(Object) java.lang.String+length() java.lang.String+length() net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.util.Logger+warn(Object) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSoundURLForPath(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getSoundURLForPath(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundResources net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,507,18,1,"/** 
 * Returns the <tt>URL</tt> of the sound corresponding to the given property key.
 * @return the <tt>URL</tt> of the sound corresponding to the givenproperty key.
 */
","/**
     * Returns the <tt>URL</tt> of the sound corresponding to the given
     * property key.
     *
     * @return the <tt>URL</tt> of the sound corresponding to the given
     * property key.
     */
    public URL getSoundURL(String urlKey)
    {
        String path = soundResources.get(urlKey);

        if (path == null || path.length() == 0)
        {
            logger.warn(""Missing resource for key: "" + urlKey);
            return null;
        }
        return getSoundURLForPath(path);
    }",False
41,getSoundURLForPath(String),Method,getSoundURL(String),,java.lang.ClassLoader+getResource(String) java.lang.Class+getClassLoader() java.lang.Object+getClass() java.lang.Object+getClass() java.lang.Class+getClassLoader() java.lang.ClassLoader+getResource(String),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundPack,374,10,1,"/** 
 * Returns the <tt>URL</tt> of the sound corresponding to the given path.
 * @param path the path, for which we're looking for a sound URL
 * @return the <tt>URL</tt> of the sound corresponding to the given path.
 */
","/**
     * Returns the <tt>URL</tt> of the sound corresponding to the given path.
     *
     * @param path the path, for which we're looking for a sound URL
     * @return the <tt>URL</tt> of the sound corresponding to the given path.
     */
    public URL getSoundURLForPath(String path)
    {
        return soundPack.getClass().getClassLoader().getResource(path);
    }",False
42,getSoundPath(String),Method,,,java.util.Map+get(Object) java.util.Map+get(Object),net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+soundResources,344,12,1,"/** 
 * Returns the path of the sound corresponding to the given property key.
 * @param soundKey the key, for the sound path
 * @return the path of the sound corresponding to the givenproperty key.
 */
","/**
     * Returns the path of the sound corresponding to the given
     * property key.
     *
     * @param soundKey the key, for the sound path
     * @return the path of the sound corresponding to the given
     * property key.
     */
    public String getSoundPath(String soundKey)
    {
        return soundResources.get(soundKey);
    }",True
43,getImageInBytes(String),Method,,,"net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageInputStream(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageInputStream(String) java.io.InputStream+available() java.io.InputStream+available() java.io.InputStream+read(byte[]) java.io.InputStream+read(byte[]) net.java.sip.communicator.util.Logger+error(Object,Throwable) net.java.sip.communicator.util.Logger+error(Object,Throwable)",net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+logger,613,27,1,"/** 
 * Loads an image from a given image identifier.
 * @param imageID The identifier of the image.
 * @return The image for the given identifier.
 */
","/**
     * Loads an image from a given image identifier.
     *
     * @param imageID The identifier of the image.
     * @return The image for the given identifier.
     */
    public byte[] getImageInBytes(String imageID)
    {
        InputStream in = getImageInputStream(imageID);

        if(in == null)
            return null;

        byte[] image = null;

        try
        {
            image = new byte[in.available()];
            in.read(image);
        }
        catch (IOException e)
        {
            logger.error(""Failed to load image:"" + imageID, e);
        }

        return image;
    }",False
44,getImage(String),Method,,,net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageURL(String) net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+getImageURL(String) javax.swing.ImageIcon+ImageIcon(URL),,345,12,1,"/** 
 * Loads an image from a given image identifier.
 * @param imageID The identifier of the image.
 * @return The image for the given identifier.
 */
","/**
     * Loads an image from a given image identifier.
     *
     * @param imageID The identifier of the image.
     * @return The image for the given identifier.
     */
    public ImageIcon getImage(String imageID)
    {
        URL imageURL = getImageURL(imageID);

        return (imageURL == null) ? null : new ImageIcon(imageURL);
    }",False
45,prepareSkinBundleFromZip(File),Method,,,"net.java.sip.communicator.impl.resources.util.SkinJarBuilder+createBundleFromZip(File,ResourcePack) net.java.sip.communicator.impl.resources.util.SkinJarBuilder+createBundleFromZip(File,ResourcePack)",net.java.sip.communicator.impl.resources.ResourceManagementServiceImpl+imagePack,391,12,1,"/** 
 * Builds a new skin bundle from the zip file content.
 * @param zipFile Zip file with skin information.
 * @return <tt>File</tt> for the bundle.
 * @throws Exception When something goes wrong.
 */
","/**
     * Builds a new skin bundle from the zip file content.
     *
     * @param zipFile Zip file with skin information.
     * @return <tt>File</tt> for the bundle.
     * @throws Exception When something goes wrong.
     */
    public File prepareSkinBundleFromZip(File zipFile)
        throws Exception
    {
        return SkinJarBuilder.createBundleFromZip(zipFile, imagePack);
    }",False
