index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,fetchSize,Field,"ResultRemote(SessionRemote,Transfer,int,int,int) setFetchSize(int)",,,,22,1,2,,private int fetchSize;,False
2,session,Field,"ResultRemote(SessionRemote,Transfer,int,int,int)",,,,30,1,2,,private SessionRemote session;,False
3,transfer,Field,"ResultRemote(SessionRemote,Transfer,int,int,int)",,,,26,1,2,,private Transfer transfer;,False
4,id,Field,"ResultRemote(SessionRemote,Transfer,int,int,int)",,,,15,1,2,,private int id;,False
5,columns,Field,"ResultRemote(SessionRemote,Transfer,int,int,int)",,,,37,1,18,,private final ResultColumn[] columns;,False
6,currentRow,Field,,,,,27,1,2,,private Value[] currentRow;,True
7,rowCount,Field,,,,,28,1,18,,private final long rowCount;,False
8,rowId,Field,,,,,30,1,2,,"private long rowId, rowOffset;",True
9,rowOffset,Field,,,,,30,1,2,,"private long rowId, rowOffset;",False
10,result,Field,,,,,34,1,2,,private ArrayList<Value[]> result;,False
11,trace,Field,,,,,26,1,18,,private final Trace trace;,False
12,"ResultRemote(SessionRemote,Transfer,int,int,int)",Method,,,"org.h2.engine.SessionRemote+getTrace() org.h2.engine.SessionRemote+getTrace() org.h2.value.Transfer+readRowCount() org.h2.value.Transfer+readRowCount() org.h2.result.ResultColumn+ResultColumn(Transfer) java.lang.Math+min(long,long) java.lang.Math+min(long,long) org.h2.result.ResultRemote+fetchRows(boolean) org.h2.result.ResultRemote+fetchRows(boolean)",org.h2.result.ResultRemote+session org.h2.result.ResultRemote+session org.h2.result.ResultRemote+trace org.h2.result.ResultRemote+transfer org.h2.result.ResultRemote+transfer org.h2.result.ResultRemote+id org.h2.result.ResultRemote+id org.h2.result.ResultRemote+columns org.h2.result.ResultRemote+columns org.h2.result.ResultRemote+rowCount org.h2.result.ResultRemote+columns org.h2.result.ResultRemote+rowId org.h2.result.ResultRemote+result org.h2.result.ResultRemote+rowCount org.h2.result.ResultRemote+fetchSize org.h2.result.ResultRemote+fetchSize,626,16,1,,"public ResultRemote(SessionRemote session, Transfer transfer, int id,
            int columnCount, int fetchSize) throws IOException {
        this.session = session;
        trace = session.getTrace();
        this.transfer = transfer;
        this.id = id;
        this.columns = new ResultColumn[columnCount];
        rowCount = transfer.readRowCount();
        for (int i = 0; i < columnCount; i++) {
            columns[i] = new ResultColumn(transfer);
        }
        rowId = -1;
        result = new ArrayList<>((int) Math.min(fetchSize, rowCount));
        this.fetchSize = fetchSize;
        fetchRows(false);
    }",False
13,isLazy(),Method,,,,,67,4,1,,"@Override
    public boolean isLazy() {
        return false;
    }",False
14,getAlias(int),Method,,,,org.h2.result.ResultColumn+alias org.h2.result.ResultRemote+columns org.h2.result.ResultColumn+alias,84,4,1,,"@Override
    public String getAlias(int i) {
        return columns[i].alias;
    }",False
15,getSchemaName(int),Method,,,,org.h2.result.ResultColumn+schemaName org.h2.result.ResultRemote+columns org.h2.result.ResultColumn+schemaName,94,4,1,,"@Override
    public String getSchemaName(int i) {
        return columns[i].schemaName;
    }",False
16,getTableName(int),Method,,,,org.h2.result.ResultColumn+tableName org.h2.result.ResultRemote+columns org.h2.result.ResultColumn+tableName,92,4,1,,"@Override
    public String getTableName(int i) {
        return columns[i].tableName;
    }",False
17,getColumnName(int),Method,,,,org.h2.result.ResultColumn+columnName org.h2.result.ResultRemote+columns org.h2.result.ResultColumn+columnName,94,4,1,,"@Override
    public String getColumnName(int i) {
        return columns[i].columnName;
    }",False
18,getColumnType(int),Method,,,,org.h2.result.ResultColumn+columnType org.h2.result.ResultRemote+columns org.h2.result.ResultColumn+columnType,96,4,1,,"@Override
    public TypeInfo getColumnType(int i) {
        return columns[i].columnType;
    }",False
19,isAutoIncrement(int),Method,,,,org.h2.result.ResultColumn+autoIncrement org.h2.result.ResultRemote+columns org.h2.result.ResultColumn+autoIncrement,100,4,1,,"@Override
    public boolean isAutoIncrement(int i) {
        return columns[i].autoIncrement;
    }",False
20,getNullable(int),Method,,,,org.h2.result.ResultColumn+nullable org.h2.result.ResultRemote+columns org.h2.result.ResultColumn+nullable,87,4,1,,"@Override
    public int getNullable(int i) {
        return columns[i].nullable;
    }",False
21,reset(),Method,,,"org.h2.engine.SessionRemote+checkClosed() org.h2.engine.SessionRemote+checkClosed() org.h2.engine.SessionRemote+traceOperation(String,int) org.h2.engine.SessionRemote+traceOperation(String,int) org.h2.value.Transfer+flush() org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+flush() org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String)",org.h2.result.ResultRemote+rowId org.h2.result.ResultRemote+currentRow org.h2.result.ResultRemote+session org.h2.result.ResultRemote+session org.h2.result.ResultRemote+session org.h2.result.ResultRemote+session org.h2.result.ResultRemote+id org.h2.result.ResultRemote+transfer org.h2.engine.SessionRemote+RESULT_RESET org.h2.result.ResultRemote+id,504,17,1,,"@Override
    public void reset() {
        rowId = -1;
        currentRow = null;
        if (session == null) {
            return;
        }
        synchronized (session) {
            session.checkClosed();
            try {
                session.traceOperation(""RESULT_RESET"", id);
                transfer.writeInt(SessionRemote.RESULT_RESET).writeInt(id).flush();
            } catch (IOException e) {
                throw DbException.convertIOException(e, null);
            }
        }
    }",False
22,currentRow(),Method,,,,org.h2.result.ResultRemote+currentRow,76,4,1,,"@Override
    public Value[] currentRow() {
        return currentRow;
    }",True
23,next(),Method,,,org.h2.result.ResultRemote+remapIfOld() org.h2.result.ResultRemote+remapIfOld() java.util.ArrayList+size() java.util.ArrayList+size() org.h2.result.ResultRemote+fetchRows(boolean) org.h2.result.ResultRemote+fetchRows(boolean) java.util.ArrayList+get(int) java.util.ArrayList+get(int),org.h2.result.ResultRemote+rowId org.h2.result.ResultRemote+rowCount org.h2.result.ResultRemote+rowId org.h2.result.ResultRemote+rowId org.h2.result.ResultRemote+rowCount org.h2.result.ResultRemote+rowId org.h2.result.ResultRemote+rowOffset org.h2.result.ResultRemote+result org.h2.result.ResultRemote+currentRow org.h2.result.ResultRemote+result org.h2.result.ResultRemote+rowId org.h2.result.ResultRemote+rowOffset org.h2.result.ResultRemote+currentRow,445,16,1,,"@Override
    public boolean next() {
        if (rowId < rowCount) {
            rowId++;
            remapIfOld();
            if (rowId < rowCount) {
                if (rowId - rowOffset >= result.size()) {
                    fetchRows(true);
                }
                currentRow = result.get((int) (rowId - rowOffset));
                return true;
            }
            currentRow = null;
        }
        return false;
    }",True
24,getRowId(),Method,,,,org.h2.result.ResultRemote+rowId,66,4,1,,"@Override
    public long getRowId() {
        return rowId;
    }",True
25,isAfterLast(),Method,,,,org.h2.result.ResultRemote+rowId org.h2.result.ResultRemote+rowCount,84,4,1,,"@Override
    public boolean isAfterLast() {
        return rowId >= rowCount;
    }",True
26,getVisibleColumnCount(),Method,,,,org.h2.result.ResultRemote+columns,87,4,1,,"@Override
    public int getVisibleColumnCount() {
        return columns.length;
    }",False
27,getRowCount(),Method,,,,org.h2.result.ResultRemote+rowCount,72,4,1,,"@Override
    public long getRowCount() {
        return rowCount;
    }",False
28,hasNext(),Method,,,,org.h2.result.ResultRemote+rowId org.h2.result.ResultRemote+rowCount,83,4,1,,"@Override
    public boolean hasNext() {
        return rowId < rowCount - 1;
    }",False
29,sendClose(),Method,close() fetchRows(boolean),,"org.h2.engine.SessionRemote+traceOperation(String,int) org.h2.engine.SessionRemote+traceOperation(String,int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.message.Trace+error(Throwable,String) org.h2.message.Trace+error(Throwable,String)",org.h2.result.ResultRemote+session org.h2.result.ResultRemote+session org.h2.result.ResultRemote+session org.h2.result.ResultRemote+id org.h2.result.ResultRemote+transfer org.h2.engine.SessionRemote+RESULT_CLOSE org.h2.result.ResultRemote+id org.h2.result.ResultRemote+trace org.h2.result.ResultRemote+transfer org.h2.result.ResultRemote+session,529,17,2,,"private void sendClose() {
        if (session == null) {
            return;
        }
        // TODO result sets: no reset possible for larger remote result sets
        try {
            synchronized (session) {
                session.traceOperation(""RESULT_CLOSE"", id);
                transfer.writeInt(SessionRemote.RESULT_CLOSE).writeInt(id);
            }
        } catch (IOException e) {
            trace.error(e, ""close"");
        } finally {
            transfer = null;
            session = null;
        }
    }",False
30,close(),Method,,"org.h2.command.CommandRemote+executeQuery(long,boolean) org.h2.command.CommandRemote+executeUpdate(Object)",org.h2.result.ResultRemote+sendClose() org.h2.result.ResultRemote+sendClose(),org.h2.result.ResultRemote+result,85,5,1,,"@Override
    public void close() {
        result = null;
        sendClose();
    }",False
31,remapIfOld(),Method,next(),,"org.h2.engine.SessionRemote+getCurrentId() org.h2.engine.SessionRemote+getCurrentId() org.h2.engine.SessionRemote+getNextId() org.h2.engine.SessionRemote+getNextId() org.h2.engine.SessionRemote+traceOperation(String,int) org.h2.engine.SessionRemote+traceOperation(String,int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String)",org.h2.result.ResultRemote+session org.h2.result.ResultRemote+id org.h2.result.ResultRemote+session org.h2.engine.SysProperties+SERVER_CACHED_OBJECTS org.h2.result.ResultRemote+session org.h2.result.ResultRemote+session org.h2.result.ResultRemote+id org.h2.result.ResultRemote+transfer org.h2.engine.SessionRemote+CHANGE_ID org.h2.result.ResultRemote+id org.h2.result.ResultRemote+id,783,19,2,,"private void remapIfOld() {
        if (session == null) {
            return;
        }
        try {
            if (id <= session.getCurrentId() - SysProperties.SERVER_CACHED_OBJECTS / 2) {
                // object is too old - we need to map it to a new id
                int newId = session.getNextId();
                session.traceOperation(""CHANGE_ID"", id);
                transfer.writeInt(SessionRemote.CHANGE_ID).writeInt(id).writeInt(newId);
                id = newId;
                // TODO remote result set: very old result sets may be
                // already removed on the server (theoretically) - how to
                // solve this?
            }
        } catch (IOException e) {
            throw DbException.convertIOException(e, null);
        }
    }",False
32,fetchRows(boolean),Method,"ResultRemote(SessionRemote,Transfer,int,int,int) next()",,"org.h2.engine.SessionRemote+checkClosed() org.h2.engine.SessionRemote+checkClosed() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+clear() java.util.ArrayList+clear() java.lang.Math+min(long,long) java.lang.Math+min(long,long) org.h2.engine.SessionRemote+traceOperation(String,int) org.h2.engine.SessionRemote+traceOperation(String,int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.value.Transfer+writeInt(int) org.h2.engine.SessionRemote+done(Transfer) org.h2.engine.SessionRemote+done(Transfer) org.h2.value.Transfer+readBoolean() org.h2.value.Transfer+readBoolean() org.h2.value.Transfer+readValue() org.h2.value.Transfer+readValue() java.util.ArrayList+add(E) java.util.ArrayList+add(E) java.util.ArrayList+size() java.util.ArrayList+size() org.h2.result.ResultRemote+sendClose() org.h2.result.ResultRemote+sendClose() org.h2.message.DbException+convertIOException(IOException,String) org.h2.message.DbException+convertIOException(IOException,String)",org.h2.result.ResultRemote+session org.h2.result.ResultRemote+session org.h2.result.ResultRemote+rowOffset org.h2.result.ResultRemote+result org.h2.result.ResultRemote+result org.h2.result.ResultRemote+fetchSize org.h2.result.ResultRemote+rowCount org.h2.result.ResultRemote+rowOffset org.h2.result.ResultRemote+session org.h2.result.ResultRemote+id org.h2.result.ResultRemote+transfer org.h2.engine.SessionRemote+RESULT_FETCH_ROWS org.h2.result.ResultRemote+id org.h2.result.ResultRemote+session org.h2.result.ResultRemote+transfer org.h2.result.ResultRemote+transfer org.h2.result.ResultRemote+columns org.h2.result.ResultRemote+transfer org.h2.result.ResultRemote+result org.h2.result.ResultRemote+rowOffset org.h2.result.ResultRemote+result org.h2.result.ResultRemote+rowCount,1338,34,2,,"private void fetchRows(boolean sendFetch) {
        synchronized (session) {
            session.checkClosed();
            try {
                rowOffset += result.size();
                result.clear();
                int fetch = (int) Math.min(fetchSize, rowCount - rowOffset);
                if (sendFetch) {
                    session.traceOperation(""RESULT_FETCH_ROWS"", id);
                    transfer.writeInt(SessionRemote.RESULT_FETCH_ROWS).
                            writeInt(id).writeInt(fetch);
                    session.done(transfer);
                }
                for (int r = 0; r < fetch; r++) {
                    boolean row = transfer.readBoolean();
                    if (!row) {
                        break;
                    }
                    int len = columns.length;
                    Value[] values = new Value[len];
                    for (int i = 0; i < len; i++) {
                        Value v = transfer.readValue();
                        values[i] = v;
                    }
                    result.add(values);
                }
                if (rowOffset + result.size() >= rowCount) {
                    sendClose();
                }
            } catch (IOException e) {
                throw DbException.convertIOException(e, null);
            }
        }
    }",False
33,toString(),Method,,,,org.h2.result.ResultRemote+columns org.h2.result.ResultRemote+rowCount org.h2.result.ResultRemote+rowId,133,4,1,,"@Override
    public String toString() {
        return ""columns: "" + columns.length + "" rows: "" + rowCount + "" pos: "" + rowId;
    }",False
34,getFetchSize(),Method,,,,org.h2.result.ResultRemote+fetchSize,73,4,1,,"@Override
    public int getFetchSize() {
        return fetchSize;
    }",False
35,setFetchSize(int),Method,,,,org.h2.result.ResultRemote+fetchSize org.h2.result.ResultRemote+fetchSize,97,4,1,,"@Override
    public void setFetchSize(int fetchSize) {
        this.fetchSize = fetchSize;
    }",False
36,needToClose(),Method,,,,,71,4,1,,"@Override
    public boolean needToClose() {
        return true;
    }",True
37,createShallowCopy(Session),Method,,,,,166,5,1,,"@Override
    public ResultInterface createShallowCopy(Session targetSession) {
        // The operation is not supported on remote result.
        return null;
    }",True
38,isClosed(),Method,,,,org.h2.result.ResultRemote+result,78,4,1,,"@Override
    public boolean isClosed() {
        return result == null;
    }",False
