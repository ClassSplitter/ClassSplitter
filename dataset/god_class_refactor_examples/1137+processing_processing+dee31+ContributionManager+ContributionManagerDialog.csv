index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,DELETION_FLAG,deletion flag ,Field,,,,,66,1,25,,"static public final String DELETION_FLAG = ""flagged_for_deletion"";",False,False,,False,
2,DOUBLE_CLICK_SECONDARY,double click secondary ,Field,,,,,131,2,26,,"static private final String DOUBLE_CLICK_SECONDARY =
      ""Click ‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂¬¨¬¢¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®¬¨¬¢‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√†√á¬¨¬®¬¨¬Æ¬¨¬®¬¨¬¢‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√Ñ√∂‚àö‚Ä†‚àö√°¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®‚àö√ú‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂¬¨¬±‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•Yes‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂¬¨¬¢¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®¬¨¬¢‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√†√á¬¨¬®¬¨¬Æ¬¨¬®¬¨¬¢‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√Ñ√∂‚àö‚Ä†‚àö√°¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®‚àö√ú‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂¬¨‚àû‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö√ú‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√¢√†‚àö‚â†¬¨¬®¬¨¬© to install this library to your sketchbook..."";",False,False,,False,
3,DISCOVERY_INTERNAL_ERROR_MESSAGE,discovery internal error message ,Field,,,,,157,2,26,,"static private final String DISCOVERY_INTERNAL_ERROR_MESSAGE =
        ""An internal error occured while searching for contributions in the downloaded file."";",False,False,,False,
4,DISCOVERY_NONE_FOUND_ERROR_MESSAGE,discovery none found error message ,Field,,,,,152,2,26,,"static private final String DISCOVERY_NONE_FOUND_ERROR_MESSAGE =
      ""Maybe it's just us, but it looks like there are no contributions in this file."";",False,False,,False,
5,ERROR_OVERWRITING_PROPERTIES_MESSAGE,error overwriting properties message ,Field,,,,,111,2,26,,"static private final String ERROR_OVERWRITING_PROPERTIES_MESSAGE =
      ""Error overwriting .properties file."";",False,False,,False,
6,ANY_CATEGORY,any category ,Field,,,,,41,1,24,,"static final String ANY_CATEGORY = ""Any"";",True,True,,False,
7,ICON_WIDTH,icon width width of each contribution icon ,Field,,,,,75,2,24,"/** 
 * Width of each contribution icon. 
 */
","/** Width of each contribution icon. */
  static final int ICON_WIDTH = 25;",True,True,"/** 
 * Width of each contribution icon. 
 */
",False,"/** 
 * Width of each contribution icon. 
 */
"
8,ICON_HEIGHT,icon height height of each contribution icon ,Field,,,,,77,2,24,"/** 
 * Height of each contribution icon. 
 */
","/** Height of each contribution icon. */
  static final int ICON_HEIGHT = 20;",True,True,"/** 
 * Height of each contribution icon. 
 */
",False,"/** 
 * Height of each contribution icon. 
 */
"
9,dialog,dialog ,Field,,,,,14,1,0,,JFrame dialog;,True,True,,False,
10,filterField,filter field ,Field,,,,,24,1,0,,FilterField filterField;,True,True,,False,
11,scrollPane,scroll pane ,Field,,,,,23,1,0,,JScrollPane scrollPane;,True,True,,False,
12,contributionListPanel,contribution list panel ,Field,StatusPanel.setErrorMessage(String) StatusPanel.clearErrorMessage(),,,,44,1,0,,ContributionListPanel contributionListPanel;,True,True,,False,
13,statusBar,status bar ,Field,,,,,22,1,0,,StatusPanel statusBar;,True,True,,False,
14,categoryChooser,category chooser ,Field,,,,,26,1,0,,JComboBox categoryChooser;,False,True,,False,
15,contributionIcons,contribution icons ,Field,,,,,26,1,0,,Image[] contributionIcons;,True,True,,False,
16,editor,editor ,Field,"showFrame(Editor) confirmAndInstallLibrary(Editor,File) confirmAndInstallLibrary(Editor,File)",,,,14,1,0,,Editor editor;,True,True,,False,
17,category,category ,Field,,,,,16,1,0,,String category;,True,True,,False,
18,contribListing,contrib listing ,Field,,,,,35,1,0,,ContributionListing contribListing;,False,False,,False,
19,ContributionManager(),contribution manager initializes the contribution listing and fetches the advertised contributions in a separate thread this does not initialize any awt components ,Method,,,processing.app.ContributionListing+ContributionListing() processing.app.ContributionListPanel+ContributionListPanel(ContributionManager) processing.app.ContributionListing+addContributionListener(ContributionChangeListener) processing.app.ContributionListing+addContributionListener(ContributionChangeListener),processing.app.ContributionManager+contribListing processing.app.ContributionManager+contributionListPanel processing.app.ContributionManager+contribListing processing.app.ContributionManager+contributionListPanel,387,11,1,"/** 
 * Initializes the contribution listing and fetches the advertised contributions in a separate thread. This does not initialize any AWT components.
 */
","/**
   * Initializes the contribution listing and fetches the advertised
   * contributions in a separate thread. This does not initialize any AWT
   * components.
   */
  public ContributionManager() {
    contribListing = new ContributionListing();
    
    contributionListPanel = new ContributionListPanel(this);
    contribListing.addContributionListener(contributionListPanel);
  }",False,True,The function of the method is to initialize the contribution listing and fetch the advertised contributions in a separate thread. It also initializes the contribution list panel and adds a contribution listener to it.,True,The code initializes a ContributionManager object by creating a ContributionListing object and a ContributionListPanel object. It then adds the ContributionListPanel as a listener to the ContributionListing. This method does not involve any AWT components.
20,showFrame(Editor),show frame editor ,Method,,processing.app.Base+handleOpenContributionManager() processing.app.Base+handleShowUpdates(),"javax.swing.JFrame+JFrame(String) processing.app.Base+setIcon(Frame) processing.app.Base+setIcon(Frame) processing.app.ContributionManager+createComponents() processing.app.ContributionManager+createComponents() processing.app.ContributionManager+registerDisposeListeners() processing.app.ContributionManager+registerDisposeListeners() java.awt.Window+pack() java.awt.Window+pack() java.awt.Toolkit+getScreenSize() java.awt.Toolkit+getDefaultToolkit() java.awt.Toolkit+getDefaultToolkit() java.awt.Toolkit+getScreenSize() java.awt.Window+setLocation(int,int) java.awt.Window+setLocation(int,int) java.awt.Component+getWidth() java.awt.Component+getWidth() java.awt.Component+getHeight() java.awt.Component+getHeight() javax.swing.JComponent+grabFocus() javax.swing.JComponent+grabFocus() java.awt.Window+setVisible(boolean) java.awt.Window+setVisible(boolean) processing.app.ContributionListing+hasDownloadedLatestList() processing.app.ContributionListing+hasDownloadedLatestList() processing.app.ContributionListing+getAdvertisedContributions(ProgressMonitor) processing.app.ContributionListing+getAdvertisedContributions(ProgressMonitor) +() +startTask(String,int)",processing.app.ContributionManager+editor processing.app.ContributionManager+editor processing.app.ContributionManager+dialog processing.app.ContributionManager+dialog processing.app.ContributionManager+dialog processing.app.ContributionManager+dialog processing.app.ContributionManager+dialog java.awt.Dimension+width processing.app.ContributionManager+dialog java.awt.Dimension+height processing.app.ContributionManager+dialog processing.app.ContributionManager+contributionListPanel processing.app.ContributionManager+dialog processing.app.ContributionManager+contribListing processing.app.ContributionManager+contribListing,2256,68,4,,"protected void showFrame(Editor editor) {
    this.editor = editor;
    
    if (dialog == null) {
      dialog = new JFrame(""Contribution Manager"");
  
      Base.setIcon(dialog);
      
      createComponents();
  
      registerDisposeListeners();
  
      dialog.pack();
      Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
      dialog.setLocation((screen.width - dialog.getWidth()) / 2,
                         (screen.height - dialog.getHeight()) / 2);
  
      contributionListPanel.grabFocus();
    }
    
    dialog.setVisible(true);
    
    if (!contribListing.hasDownloadedLatestList()) {
      contribListing.getAdvertisedContributions(new AbstractProgressMonitor() {
        public void startTask(String name, int maxValue) {
        }

        public void finished() {
          super.finished();

          updateContributionListing();
          updateCategoryChooser();
          if (isError()) {
            statusBar.setErrorMessage(""An error occured when downloading "" + 
                                      ""the list of available contributions."");
          }
        }
      });
    }
    
    updateContributionListing();
    
    if (contributionIcons == null) {
      try {
        Image allButtons = ImageIO.read(Base.getLibStream(""contributions.gif""));
        int count = allButtons.getHeight(dialog) / ContributionManager.ICON_HEIGHT;
        contributionIcons = new Image[count];
        contributionIcons[0]  = allButtons;
        contributionIcons[1]  = allButtons;
        contributionIcons[2]  = allButtons;
        contributionIcons[3]  = allButtons;
        
        for (int i = 0; i < count; i++) {
          Image image = dialog.createImage(
                            new FilteredImageSource(allButtons.getSource(),
                            new CropImageFilter(0, i * ContributionManager.ICON_HEIGHT,
                                                ContributionManager.ICON_WIDTH,
                                                ContributionManager.ICON_HEIGHT)));
          contributionIcons[i] = image;
        }
        
        contributionListPanel.updateColors();
      } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
    }
  }",True,True,"The function of the method is to show a frame with a contribution manager. It creates and sets up the frame, sets its location, and makes it visible. It also updates the contribution listing and category chooser, and downloads the latest list of available contributions if necessary. Additionally, it loads and sets up contribution icons.",False,"The `showFrame` method is responsible for displaying a JFrame dialog for a Contribution Manager. It creates the dialog if it doesn't exist, sets its location, and updates the contribution listing. It also downloads the latest list of contributions if necessary and updates the category chooser."
21,getContributionIcon(Contribution.Type),get contribution icon type ,Method,,,,processing.app.ContributionManager+contributionIcons processing.app.ContributionManager+contributionIcons processing.app.ContributionManager+contributionIcons processing.app.ContributionManager+contributionIcons processing.app.ContributionManager+contributionIcons,389,17,1,,"public Image getContributionIcon(Contribution.Type type) {
    
    if (contributionIcons == null)
      return null;
      
    switch (type) {
    case LIBRARY:
      return contributionIcons[0];
    case TOOL:
      return contributionIcons[1];
    case MODE:
      return contributionIcons[2];
    case LIBRARY_COMPILATION:
      return contributionIcons[3];
    }
    return null;
  }",True,True,"This method returns an image icon based on the type of contribution. If the contribution icons are not available, it returns null.",False,"The code defines a method named ""getContributionIcon"" that takes a parameter of type ""Contribution.Type"" and returns an ""Image"" object. It checks if the ""contributionIcons"" array is null and returns null if it is. Otherwise, it uses a switch statement to determine the appropriate index in the array based on the input type and returns the corresponding image."
22,disposeFrame(),dispose frame close the window after an ok or cancel ,Method,,,java.awt.Window+dispose() java.awt.Window+dispose(),processing.app.ContributionManager+dialog processing.app.ContributionManager+editor,133,7,4,"/** 
 * Close the window after an OK or Cancel.
 */
","/**
   * Close the window after an OK or Cancel.
   */
  protected void disposeFrame() {
    dialog.dispose();
    editor = null;
  }",True,True,"This method closes the window and disposes of the dialog, and sets the editor to null.",False,"The `disposeFrame()` method is used to close a window or dialog. It first disposes the dialog, effectively closing it, and then sets the `editor` variable to null."
23,createComponents(),create components creates and arranges the swing components in the dialog ,Method,showFrame(Editor),,"java.awt.Frame+setResizable(boolean) java.awt.Frame+setResizable(boolean) javax.swing.JFrame+getContentPane() javax.swing.JFrame+getContentPane() java.awt.Container+setLayout(LayoutManager) java.awt.Container+setLayout(LayoutManager) java.awt.GridBagLayout+GridBagLayout() java.awt.GridBagConstraints+GridBagConstraints() processing.app.ContributionManager.FilterField+FilterField() java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.GridBagConstraints+GridBagConstraints() javax.swing.JScrollPane+JScrollPane() javax.swing.JComponent+setPreferredSize(Dimension) javax.swing.JComponent+setPreferredSize(Dimension) java.awt.Dimension+Dimension(int,int) javax.swing.JScrollPane+setViewportView(Component) javax.swing.JScrollPane+setViewportView(Component) javax.swing.JComponent+setOpaque(boolean) javax.swing.JScrollPane+getViewport() javax.swing.JScrollPane+getViewport() javax.swing.JComponent+setOpaque(boolean) javax.swing.JComponent+setBackground(Color) javax.swing.JScrollPane+getViewport() javax.swing.JScrollPane+getViewport() javax.swing.JComponent+setBackground(Color) java.awt.Component+getBackground() java.awt.Component+getBackground() javax.swing.JScrollPane+setVerticalScrollBarPolicy(int) javax.swing.JScrollPane+setVerticalScrollBarPolicy(int) javax.swing.JScrollPane+setHorizontalScrollBarPolicy(int) javax.swing.JScrollPane+setHorizontalScrollBarPolicy(int) processing.app.ContributionManager.StatusPanel+StatusPanel() javax.swing.JComponent+setBorder(Border) javax.swing.JComponent+setBorder(Border) javax.swing.BorderFactory+createEtchedBorder() javax.swing.BorderFactory+createEtchedBorder() javax.swing.JLayeredPane+JLayeredPane() java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Component+addComponentListener(ComponentListener) java.awt.Component+addComponentListener(ComponentListener) +() +resizeLayers()",processing.app.ContributionManager+dialog processing.app.ContributionManager+dialog java.awt.GridBagConstraints+gridx java.awt.GridBagConstraints+gridy java.awt.GridBagConstraints+gridwidth java.awt.GridBagConstraints+weightx java.awt.GridBagConstraints+fill java.awt.GridBagConstraints+HORIZONTAL processing.app.ContributionManager+filterField processing.app.ContributionManager+filterField java.awt.GridBagConstraints+fill java.awt.GridBagConstraints+BOTH java.awt.GridBagConstraints+gridx java.awt.GridBagConstraints+gridy java.awt.GridBagConstraints+gridwidth java.awt.GridBagConstraints+weighty java.awt.GridBagConstraints+weightx processing.app.ContributionManager+scrollPane processing.app.ContributionManager+scrollPane processing.app.ContributionManager+scrollPane processing.app.ContributionManager+contributionListPanel processing.app.ContributionManager+scrollPane processing.app.ContributionManager+scrollPane processing.app.ContributionManager+contributionListPanel processing.app.ContributionManager+scrollPane javax.swing.ScrollPaneConstants+VERTICAL_SCROLLBAR_ALWAYS processing.app.ContributionManager+scrollPane javax.swing.ScrollPaneConstants+HORIZONTAL_SCROLLBAR_NEVER processing.app.ContributionManager+statusBar processing.app.ContributionManager+statusBar processing.app.ContributionManager+scrollPane javax.swing.JLayeredPane+DEFAULT_LAYER processing.app.ContributionManager+statusBar javax.swing.JLayeredPane+PALETTE_LAYER,3502,111,2,"/** 
 * Creates and arranges the Swing components in the dialog. 
 */
","/** Creates and arranges the Swing components in the dialog. */
  private void createComponents() {
    dialog.setResizable(true);
    
    Container pane = dialog.getContentPane();
    pane.setLayout(new GridBagLayout());
    
    { // The filter text area
      GridBagConstraints c = new GridBagConstraints();
      c.gridx = 0;
      c.gridy = 0;
      c.gridwidth = 2;
      c.weightx = 1;
      c.fill = GridBagConstraints.HORIZONTAL;
      filterField = new FilterField();

      pane.add(filterField, c);
    }
    
    { // The scroll area containing the contribution listing and the status bar.
      GridBagConstraints c = new GridBagConstraints();
      c.fill = GridBagConstraints.BOTH;
      c.gridx = 0;
      c.gridy = 1;
      c.gridwidth = 2;
      c.weighty = 1;
      c.weightx = 1;
      
      scrollPane = new JScrollPane();
      scrollPane.setPreferredSize(new Dimension(300, 300));
      scrollPane.setViewportView(contributionListPanel);
      scrollPane.getViewport().setOpaque(true);
      scrollPane.getViewport().setBackground(contributionListPanel.getBackground());
      scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
      scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
      
      statusBar = new StatusPanel();
      statusBar.setBorder(BorderFactory.createEtchedBorder());
      
      final JLayeredPane layeredPane = new JLayeredPane();
      layeredPane.add(scrollPane, JLayeredPane.DEFAULT_LAYER);
      layeredPane.add(statusBar, JLayeredPane.PALETTE_LAYER);
      
      layeredPane.addComponentListener(new ComponentAdapter() {
        
        void resizeLayers() {
          scrollPane.setSize(layeredPane.getSize());
          scrollPane.updateUI();
        }
        
        public void componentShown(ComponentEvent e) {
          resizeLayers();
        }
        
        public void componentResized(ComponentEvent arg0) {
          resizeLayers();
        }
      });
      
      final JViewport viewport = scrollPane.getViewport();
      viewport.addComponentListener(new ComponentAdapter() {
        void resizeLayers() {
          statusBar.setLocation(0, viewport.getHeight() - 18);
          
          Dimension d = viewport.getSize();
          d.height = 20;
          d.width += 3;
          statusBar.setSize(d);
        }
        public void componentShown(ComponentEvent e) {
          resizeLayers();
        }
        public void componentResized(ComponentEvent e) {
          resizeLayers();
        }
      });
      
      pane.add(layeredPane, c);
    }
    
    { // Shows ""Category:""
      GridBagConstraints c = new GridBagConstraints();
      c.gridx = 0;
      c.gridy = 2;
      pane.add(new Label(""Category:""), c);
    }
    
    { // Combo box for selecting a category
      GridBagConstraints c = new GridBagConstraints();
      c.fill = GridBagConstraints.HORIZONTAL;
      c.gridx = 1;
      c.gridy = 2;

      categoryChooser = new JComboBox();
      updateCategoryChooser();
      pane.add(categoryChooser, c);
      categoryChooser.addItemListener(new ItemListener() {

        public void itemStateChanged(ItemEvent e) {
          category = (String) categoryChooser.getSelectedItem();
          if (ContributionManager.ANY_CATEGORY.equals(category)) {
            category = null;
          }

          filterLibraries(category, filterField.filters);
        }
      });
    }
    
    dialog.setMinimumSize(new Dimension(550, 400));
  }",False,True,"The function of the createComponents() method is to create and arrange the Swing components in the dialog. It sets the layout, adds various components such as filter text area, scroll area, status bar, label, and combo box, and sets their properties and event listeners. It also sets the minimum size of the dialog.",False,"The `createComponents()` method creates and arranges Swing components in a dialog. It sets up a filter text area, a scroll area with a contribution listing and a status bar, a category label, and a combo box for selecting a category. It also sets the minimum size of the dialog."
24,updateCategoryChooser(),update category chooser ,Method,,,"javax.swing.JComboBox+removeAllItems() javax.swing.JComboBox+removeAllItems() java.util.ArrayList+ArrayList(Collection) processing.app.ContributionListing+getCategories() processing.app.ContributionListing+getCategories() java.util.Collections+sort(List) java.util.Collections+sort(List) java.util.ArrayList+add(int,E) java.util.ArrayList+add(int,E) javax.swing.JComboBox+addItem(E) javax.swing.JComboBox+addItem(E)",processing.app.ContributionManager+categoryChooser processing.app.ContributionManager+categoryChooser processing.app.ContributionManager+contribListing processing.app.ContributionManager+ANY_CATEGORY processing.app.ContributionManager+categoryChooser,403,13,2,,"private void updateCategoryChooser() {
    if (categoryChooser == null)
      return;
    
    ArrayList<String> categories;
    categoryChooser.removeAllItems();
    categories = new ArrayList<String>(contribListing.getCategories());
    Collections.sort(categories);
    categories.add(0, ContributionManager.ANY_CATEGORY);
    for (String s : categories) {
      categoryChooser.addItem(s);
    }
  }",True,True,"This method updates the category chooser by removing all items, sorting and adding new categories from the contribListing, and adding a default category at the beginning.",False,The `updateCategoryChooser` method updates a category chooser component by populating it with a sorted list of categories obtained from a `contribListing` object. It also adds a default category option at the beginning of the list.
25,registerDisposeListeners(),register dispose listeners ,Method,showFrame(Editor),,java.awt.Window+addWindowListener(WindowListener) java.awt.Window+addWindowListener(WindowListener) +() +windowClosing(WindowEvent),processing.app.ContributionManager+dialog,841,26,2,,"private void registerDisposeListeners() {
    dialog.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        disposeFrame();
      }
    });
    ActionListener disposer = new ActionListener() {
      public void actionPerformed(ActionEvent actionEvent) {
        disposeFrame();
      }
    };
    Base.registerWindowCloseKeys(dialog.getRootPane(), disposer);
    
    // handle window closing commands for ctrl/cmd-W or hitting ESC.
    
    dialog.getContentPane().addKeyListener(new KeyAdapter() {
      public void keyPressed(KeyEvent e) {
        //System.out.println(e);
        KeyStroke wc = Base.WINDOW_CLOSE_KEYSTROKE;
        if ((e.getKeyCode() == KeyEvent.VK_ESCAPE) ||
            (KeyStroke.getKeyStrokeForEvent(e).equals(wc))) {
          disposeFrame();
        }
      }
    });
  }",True,True,"The function of this method is to register listeners for disposing the frame when the window is closed, when certain keys are pressed, or when certain actions are performed.",False,"The code defines a method called ""registerDisposeListeners"" that adds various listeners to a dialog window. These listeners handle window closing events, such as clicking the close button, pressing certain keys, or using specific key combinations, and call the ""disposeFrame"" method to dispose of the window."
26,"filterLibraries(String,List<String>)",filter libraries category filters ,Method,FilterField.applyFilter(),,"processing.app.ContributionListing+getFilteredLibraryList(String,List<String>) processing.app.ContributionListing+getFilteredLibraryList(String,List<String>) processing.app.ContributionListPanel+filterLibraries(List<Contribution>) processing.app.ContributionListPanel+filterLibraries(List<Contribution>)",processing.app.ContributionManager+contribListing processing.app.ContributionManager+contributionListPanel,246,7,1,,"public void filterLibraries(String category, List<String> filters) {

    List<Contribution> filteredLibraries = contribListing
        .getFilteredLibraryList(category, filters);

    contributionListPanel.filterLibraries(filteredLibraries);
  }",True,True,"This method filters libraries based on a category and a list of filters. It retrieves a filtered list of libraries using the category and filters, and then updates the contribution list panel with the filtered libraries.",False,"The code defines a method called ""filterLibraries"" that takes a category and a list of filters as parameters. It retrieves a filtered list of libraries based on the category and filters, and then passes this filtered list to a panel for further processing or display."
27,updateContributionListing(),update contribution listing ,Method,,,processing.app.Editor+getMode() processing.app.Editor+getMode() processing.app.LibraryCompilation+list(ArrayList<Library>) processing.app.LibraryCompilation+list(ArrayList<Library>) java.util.ArrayList+iterator() java.util.ArrayList+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.io.File+equals(Object) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+equals(Object) java.io.File+getParentFile() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+getParentFile() java.util.Iterator+remove() java.util.Iterator+remove() java.util.ArrayList+ArrayList() java.util.ArrayList+addAll(Collection) java.util.ArrayList+addAll(Collection) java.util.ArrayList+addAll(Collection) java.util.ArrayList+addAll(Collection) java.util.ArrayList+addAll(Collection) java.util.ArrayList+addAll(Collection) processing.app.ContributionListing+updateInstalledList(List<Contribution>) processing.app.ContributionListing+updateInstalledList(List<Contribution>),processing.app.ContributionManager+editor processing.app.Mode+contribLibraries processing.app.ContributionManager+editor processing.app.Mode+contribLibraries processing.app.ContributionManager+editor processing.app.Editor+contribTools processing.app.ContributionManager+contribListing,886,25,4,,"protected void updateContributionListing() {
    if (editor == null)
      return;
    
    ArrayList<Library> libraries = editor.getMode().contribLibraries;
    ArrayList<LibraryCompilation> compilations = LibraryCompilation.list(libraries);

    // Remove libraries from the list that are part of a compilations
    for (LibraryCompilation compilation : compilations) {
      Iterator<Library> it = libraries.iterator();
      while (it.hasNext()) {
        Library current = it.next();
        if (compilation.getFolder().equals(current.getFolder().getParentFile())) {
          it.remove();
        }
      }
    }
    
    ArrayList<Contribution> contributions = new ArrayList<Contribution>();
    contributions.addAll(editor.contribTools);
    contributions.addAll(libraries);
    contributions.addAll(compilations);
    
    contribListing.updateInstalledList(contributions);
  }",True,True,"The function updates the contribution listing by removing libraries that are part of a compilation, and then updates the installed list with the updated contributions.",False,"This code updates a contribution listing by retrieving libraries and compilations from an editor. It then removes libraries that are part of a compilation. Finally, it combines the contributions and updates the installed list in the contribution listing."
28,"removeContribution(InstalledContribution,ProgressMonitor)",remove contribution contribution pm non blocking call to remove a contribution in a new thread ,Method,,processing.app.ContributionListPanel+ContributionPanel.actionPerformed(ActionEvent),processing.app.NullProgressMonitor+NullProgressMonitor() java.lang.Thread+start() java.lang.Thread+Thread(Runnable) +() +run(),,1972,57,1,"/** 
 * Non-blocking call to remove a contribution in a new thread.
 */
","/**
   * Non-blocking call to remove a contribution in a new thread.
   */
  public void removeContribution(final InstalledContribution contribution,
                                 ProgressMonitor pm) {
    if (contribution == null)
      return;
    
    final ProgressMonitor progressMonitor = pm != null ? pm : new NullProgressMonitor();
      
    new Thread(new Runnable() {
      
      public void run() {
        progressMonitor.startTask(""Removing"", ProgressMonitor.UNKNOWN);

        boolean doBackup = Preferences.getBoolean(""contribution.backup.on_remove"");
        if (ContributionManager.requiresRestart(contribution)) {
          
          if (!doBackup || (doBackup && backupContribution(contribution, false))) {
            if (ContributionManager.flagForDeletion(contribution)) {
              contribListing.replaceContribution(contribution, contribution);
            }
          }
        } else {
          boolean success = false;
          if (doBackup) {
            success = backupContribution(contribution, true);
          } else {
            Base.removeDir(contribution.getFolder());
            success = !contribution.getFolder().exists();
          }
          
          if (success) {
            Contribution advertisedVersion = contribListing
                .getAdvertisedContribution(contribution);

            if (advertisedVersion == null) {
              contribListing.removeContribution(contribution);
            } else {
              contribListing.replaceContribution(contribution,
                                                 advertisedVersion);
            }
          } else {
            // There was a failure backing up the folder
            if (doBackup) {
              
            } else {
              statusBar.setErrorMessage(""Could not delete the contribution's files"");
            }
          }
        }
        refreshInstalled();
        progressMonitor.finished();
      }
    }).start();

  }",False,True,The function of this method is to remove a contribution in a non-blocking manner by running the removal process in a new thread. It also provides progress monitoring and handles backup and deletion of the contribution's files.,False,"The `removeContribution` method is a non-blocking call that removes a contribution in a new thread. It checks if a backup is required and performs the necessary actions to remove the contribution, including replacing it with an advertised version if available. Finally, it refreshes the installed contributions and finishes the progress monitor."
29,"downloadAndInstall(URL,AdvertisedContribution,JProgressMonitor,JProgressMonitor)",download and install url ad download progress monitor install progress monitor non blocking call to download and install a contribution in a new thread param url direct link to the contribution param to be replaced the contribution that will be replaced by this library being installed e g an advertised version of a contribution or the old version of a contribution that is being updated must not be null ,Method,,"processing.app.ContributionListPanel+ContributionPanel.installContribution(AdvertisedContribution,String)",processing.app.ContributionManager+getTemporaryFile(URL) processing.app.ContributionManager+getTemporaryFile(URL) java.lang.Thread+start() java.lang.Thread+Thread(Runnable) +() +run(),,1907,56,1,"/** 
 * Non-blocking call to download and install a contribution in a new thread.
 * @param url Direct link to the contribution.
 * @param toBeReplaced The Contribution that will be replaced by this library being installed (e.g. an advertised version of a contribution, or the old version of a contribution that is being updated). Must not be null.
 */
","/**
   * Non-blocking call to download and install a contribution in a new thread.
   * 
   * @param url
   *          Direct link to the contribution.
   * @param toBeReplaced
   *          The Contribution that will be replaced by this library being
   *          installed (e.g. an advertised version of a contribution, or the
   *          old version of a contribution that is being updated). Must not be
   *          null.
   */
  public void downloadAndInstall(final URL url,
                                 final AdvertisedContribution ad,
                                 final JProgressMonitor downloadProgressMonitor,
                                 final JProgressMonitor installProgressMonitor) {

    final File libDest = getTemporaryFile(url);

    new Thread(new Runnable() {

      public void run() {

        FileDownloader.downloadFile(url, libDest, downloadProgressMonitor);
        
        
        if (!downloadProgressMonitor.isCanceled() && !downloadProgressMonitor.isError()) {
          
          installProgressMonitor.startTask(""Installing"", ProgressMonitor.UNKNOWN);
  
          InstalledContribution contribution = null;
          switch (ad.getType()) {
          case LIBRARY:
            contribution = installLibrary(libDest, ad, false);
            break;
          case LIBRARY_COMPILATION:
            contribution = installLibraryCompilation(libDest);
            break;
          case TOOL:
            contribution = installTool(libDest, ad);
            break;
          }
  
          if (contribution != null) {
            // XXX contributionListing.getInformationFromAdvertised(contribution);
            // get the category at least
            contribListing.replaceContribution(ad, contribution);
            refreshInstalled();
          }
  
          dialog.pack();
          installProgressMonitor.finished();
        }
      }
    }).start();

  }",False,False,"The function of this method is to download and install a contribution in a non-blocking manner. It creates a new thread to download the contribution from a given URL, and then installs it based on the type of contribution specified.",False,"This code defines a method called ""downloadAndInstall"" that downloads a contribution from a given URL and installs it in a new thread. It takes in parameters such as the URL, the contribution to be replaced, and progress monitors for the download and installation processes. The method downloads the file, installs it based on the type of contribution, and updates the contribution listing and installed contributions."
30,installLibraryCompilation(File),install library compilation f ,Method,,,"processing.app.ContributionManager+unzipFileToTemp(File) processing.app.ContributionManager+unzipFileToTemp(File) processing.app.LibraryCompilation+create(File) processing.app.LibraryCompilation+create(File) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() processing.app.Base+getSketchbookLibrariesFolder() processing.app.Editor+getBase() processing.app.Editor+getBase() processing.app.Base+getSketchbookLibrariesFolder() java.io.File+File(File,String) java.io.File+exists() java.io.File+exists() java.io.File+delete() java.io.File+delete() java.io.File+renameTo(File) java.io.File+renameTo(File) processing.app.LibraryCompilation+create(File) processing.app.LibraryCompilation+create(File)",processing.app.ContributionManager+statusBar processing.app.ContributionManager+DISCOVERY_NONE_FOUND_ERROR_MESSAGE processing.app.ContributionManager+editor,923,33,4,,"protected LibraryCompilation installLibraryCompilation(File f) {
    File parentDir = unzipFileToTemp(f);
    
    LibraryCompilation compilation = LibraryCompilation.create(parentDir);

    if (compilation == null) {
      statusBar.setErrorMessage(DISCOVERY_NONE_FOUND_ERROR_MESSAGE);
      return null;
    }
      
    String folderName = compilation.getName();
    
    File libraryDestination = editor.getBase().getSketchbookLibrariesFolder();
    File dest = new File(libraryDestination, folderName);
    
    // XXX: Check for conflicts with other library names, etc.
    boolean errorEncountered = false;
    if (dest.exists()) {
      if (!dest.delete()) {
        // Problem
        errorEncountered = true;
      }
    }
    
    if (!errorEncountered) {
      // Install it, return it
      if (parentDir.renameTo(dest)) {
        return LibraryCompilation.create(dest);
      }
    }
    
    return null;
  }",False,False,"The function of this method is to install a library compilation by unzipping a file, creating a library compilation object, checking for conflicts with other library names, deleting any existing conflicting library, and finally renaming the parent directory to the destination directory.",False,"This code installs a library compilation by unzipping a file, creating a library compilation object, and moving it to the appropriate destination folder. It checks for conflicts with existing library names and handles any errors encountered during the installation process."
31,"confirmAndInstallLibrary(Editor,File)",confirm and install library editor lib file ,Method,,processing.app.Base+handleConfirmAndInstallLibrary(File),"processing.app.Base+showYesNoQuestion(Frame,String,String,String) processing.app.Base+showYesNoQuestion(Frame,String,String,String) java.io.File+getName() java.io.File+getName() processing.app.ContributionManager+installLibrary(File,AdvertisedContribution,boolean) processing.app.ContributionManager+installLibrary(File,AdvertisedContribution,boolean)",processing.app.ContributionManager+editor processing.app.ContributionManager+editor processing.app.ContributionManager+editor processing.app.ContributionManager+editor processing.app.ContributionManager+DOUBLE_CLICK_SECONDARY javax.swing.JOptionPane+YES_OPTION,452,13,1,,"public Library confirmAndInstallLibrary(Editor editor, File libFile) {
    this.editor = editor;
    
    int result = Base.showYesNoQuestion(this.editor, ""Install"",
                             ""Install libraries from "" + libFile.getName() + ""?"",
                             ContributionManager.DOUBLE_CLICK_SECONDARY);
    
    if (result == JOptionPane.YES_OPTION) {
      return installLibrary(libFile, null, true);
    }
    
    return null;
  }",False,False,"The function of this method is to confirm and install a library in a library manager. It takes an editor and a library file as parameters, displays a confirmation dialog to the user, and if the user confirms, it installs the library and returns it. Otherwise, it returns null.",False,"This code defines a method called `confirmAndInstallLibrary` that takes an `Editor` object and a `File` object as parameters. It prompts the user with a confirmation dialog to install libraries from the specified file, and if the user selects ""Yes"", it calls the `installLibrary` method and returns the result. Otherwise, it returns null."
32,unzipFileToTemp(File),unzip file to temp lib file creates a temporary folder and unzips a file to a subdirectory of the temp folder the subdirectory is the only file of the tempo folder e g if the contents of foo zip are hello and world then the resulting files will be tmp foo9432423uncompressed foo hello tmp foo9432423uncompress foo world and tmp id9432423uncompress foo will be returned return the folder where the zips contents have been unzipped to thesubdirectory of the temp folder ,Method,"installLibraryCompilation(File) installTool(File,AdvertisedContribution) installLibrary(File,AdvertisedContribution,boolean)",,"processing.app.ContributionManager+getFileName(File) processing.app.ContributionManager+getFileName(File) processing.app.Base+createTempFolder(String,String) processing.app.Base+createTempFolder(String,String) java.io.File+File(File,String) java.io.File+mkdirs() java.io.File+mkdirs() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager+unzip(File,File) processing.app.ContributionManager+unzip(File,File)",processing.app.ContributionManager+statusBar,1049,30,0,"/** 
 * Creates a temporary folder and unzips a file to a subdirectory of the temp folder. The subdirectory is the only file of the tempo folder. e.g. if the contents of foo.zip are /hello and /world, then the resulting files will be /tmp/foo9432423uncompressed/foo/hello /tmp/foo9432423uncompress/foo/world ...and ""/tmp/id9432423uncompress/foo/"" will be returned.
 * @return the folder where the zips contents have been unzipped to (thesubdirectory of the temp folder).
 */
","/**
   * Creates a temporary folder and unzips a file to a subdirectory of the temp
   * folder. The subdirectory is the only file of the tempo folder.
   * 
   * e.g. if the contents of foo.zip are /hello and /world, then the resulting
   * files will be
   *     /tmp/foo9432423uncompressed/foo/hello
   *     /tmp/foo9432423uncompress/foo/world
   * ...and ""/tmp/id9432423uncompress/foo/"" will be returned.
   * 
   * @return the folder where the zips contents have been unzipped to (the
   *         subdirectory of the temp folder).
   */
  File unzipFileToTemp(File libFile) {
    
    String fileName = ContributionManager.getFileName(libFile);
    File tmpFolder = null;
    
    try {
      tmpFolder = Base.createTempFolder(fileName, ""uncompressed"");
      tmpFolder = new File(tmpFolder, fileName);
      tmpFolder.mkdirs();
    } catch (IOException e) {
      statusBar.setErrorMessage(""Could not create temp folder to uncompressed zip file."");
    }
    
    ContributionManager.unzip(libFile, tmpFolder);
    
    return tmpFolder;
  }",False,False,"The function of this method is to create a temporary folder, unzip a file into a subdirectory of the temporary folder, and return the path of the subdirectory where the file has been unzipped.",False,This code defines a method called `unzipFileToTemp` that takes a `libFile` as input and creates a temporary folder. It then unzips the contents of the `libFile` to a subdirectory of the temporary folder and returns the path of the subdirectory.
33,getTemporaryFile(URL),get temporary file url ,Method,"downloadAndInstall(URL,AdvertisedContribution,JProgressMonitor,JProgressMonitor)",,"processing.app.Base+createTempFolder(String,String) processing.app.Base+createTempFolder(String,String) java.lang.String+split(String) java.net.URL+getFile() java.net.URL+getFile() java.lang.String+split(String) java.io.File+File(File,String) java.io.File+setWritable(boolean) java.io.File+setWritable(boolean) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String)",processing.app.ContributionManager+statusBar,458,15,4,,"protected File getTemporaryFile(URL url) {
    try {
      File tmpFolder = Base.createTempFolder(""library"", ""download"");
      
      String[] segments = url.getFile().split(""/"");
      File libFile = new File(tmpFolder, segments[segments.length - 1]);
      libFile.setWritable(true);
      
      return libFile;
    } catch (IOException e) {
      statusBar.setErrorMessage(""Could not create a temp folder for download."");
    }
    
    return null;
  }",False,False,"This method creates a temporary file for downloading a library from a given URL. It splits the URL file path into segments, creates a temporary folder, and creates a file in that folder with the last segment of the URL file path. It sets the file as writable and returns it. If an exception occurs, it sets an error message in the status bar and returns null.",False,"The `getTemporaryFile` method takes a URL as input and creates a temporary file in a specified folder. It extracts the file name from the URL and sets the file as writable before returning it. If an IOException occurs during the process, an error message is displayed on the status bar."
34,getFileName(File),get file name lib file returns the name of a file without its path or extension for example path to helpfullib zip returns helpfullib helpfullib 0 1 1 plb returns helpfullib 0 1 1 ,Method,unzipFileToTemp(File),,"java.io.File+getPath() java.io.File+getPath() java.lang.String+lastIndexOf(int) java.lang.String+lastIndexOf(int) java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+lastIndexOf(int) java.lang.String+lastIndexOf(int) java.lang.String+substring(int,int) java.lang.String+substring(int,int)",java.io.File+separatorChar,667,25,12,"/** 
 * Returns the name of a file without its path or extension. For example, ""/path/to/helpfullib.zip"" returns ""helpfullib"" ""helpfullib-0.1.1.plb"" returns ""helpfullib-0.1.1""
 */
","/**
   * Returns the name of a file without its path or extension.
   * 
   * For example,
   *   ""/path/to/helpfullib.zip"" returns ""helpfullib""
   *   ""helpfullib-0.1.1.plb"" returns ""helpfullib-0.1.1""
   */
  protected static String getFileName(File libFile) {
    String path = libFile.getPath();
    int lastSeparator = path.lastIndexOf(File.separatorChar);
    
    String fileName;
    if (lastSeparator != -1) {
      fileName = path.substring(lastSeparator + 1);
    } else {
      fileName = path;
    }
    
    int lastDot = fileName.lastIndexOf('.');
    if (lastDot != -1) {
      return fileName.substring(0, lastDot);
    }
    
    return fileName;
  }",False,False,This method takes a File object representing a file and returns the name of the file without its path or extension.,False,"This code defines a method called ""getFileName"" that takes a File object as input and returns the name of the file without its path or extension. It first extracts the file name from the path, and then removes the extension if present before returning the final result."
35,"installTool(File,AdvertisedContribution)",install tool zipped tool file ad ,Method,,,"processing.app.ContributionManager+unzipFileToTemp(File) processing.app.ContributionManager+unzipFileToTemp(File) processing.app.ToolContribution+list(File,boolean) processing.app.ToolContribution+list(File,boolean) java.util.ArrayList+isEmpty() java.util.ArrayList+isEmpty() processing.app.ToolContribution+list(File,boolean) processing.app.ToolContribution+list(File,boolean) java.io.File+getParentFile() java.io.File+getParentFile() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) java.io.File+File(File,String) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() processing.app.ContributionManager+writePropertiesFile(File,AdvertisedContribution) processing.app.ContributionManager+writePropertiesFile(File,AdvertisedContribution) processing.app.ContributionManager+installTool(ToolContribution) processing.app.ContributionManager+installTool(ToolContribution) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) java.util.ArrayList+isEmpty() java.util.ArrayList+isEmpty() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String)",processing.app.ContributionManager+statusBar processing.app.ContributionManager+ERROR_OVERWRITING_PROPERTIES_MESSAGE processing.app.ContributionManager+statusBar processing.app.ContributionManager+DISCOVERY_INTERNAL_ERROR_MESSAGE processing.app.ContributionManager+statusBar,1478,34,4,,"protected ToolContribution installTool(File zippedToolFile,
                                         AdvertisedContribution ad) {
    
    File tempDir = unzipFileToTemp(zippedToolFile);
    
    ArrayList<ToolContribution> discoveredTools = ToolContribution.list(tempDir, false);
    if (discoveredTools.isEmpty()) {
      // Sometimes tool authors place all their folders in the base
      // directory of a zip file instead of in single folder as the
      // guidelines suggest. If this is the case, we might be able to find the
      // library by stepping up a directory and searching for libraries again.
      discoveredTools = ToolContribution.list(tempDir.getParentFile(), false);
    }
    
    if (discoveredTools != null && discoveredTools.size() == 1) {
      ToolContribution discoveredTool = discoveredTools.get(0);
      File propFile = new File(discoveredTool.getFolder(), ""tool.properties"");
      
      if (ad == null || writePropertiesFile(propFile, ad)) {
        return installTool(discoveredTool);        
      } else {
        statusBar.setErrorMessage(ERROR_OVERWRITING_PROPERTIES_MESSAGE);
      }
    } else {
      // Diagnose the problem and notify the user
      if (discoveredTools == null || discoveredTools.isEmpty()) {
        statusBar.setErrorMessage(DISCOVERY_INTERNAL_ERROR_MESSAGE);
      } else {
        statusBar.setErrorMessage(""There were multiple tools in the file, so we're ignoring it."");
      }
    }
    
    return null;
  }",False,False,,False,"This code installs a tool by unzipping a file and searching for a tool contribution within the unzipped contents. If a single tool contribution is found, the tool is installed by writing its properties file. Otherwise, error messages are displayed based on the number of discovered tools."
36,installTool(ToolContribution),install tool new tool ,Method,"installTool(File,AdvertisedContribution)",,"java.io.File+getName() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+getName() processing.app.Base+getSketchbookToolsFolder() processing.app.Editor+getBase() processing.app.Editor+getBase() processing.app.Base+getSketchbookToolsFolder() java.io.File+File(File,String) java.io.File+exists() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+exists() java.io.File+equals(Object) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+equals(Object) processing.app.ContributionManager+backupContribution(InstalledContribution,boolean) processing.app.ContributionManager+backupContribution(InstalledContribution,boolean) java.io.File+renameTo(File) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+renameTo(File) processing.app.ToolContribution+getTool(File) processing.app.ToolContribution+getTool(File) processing.app.ToolContribution+initializeToolClass() processing.app.ToolContribution+initializeToolClass() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName()",processing.app.ContributionManager+editor processing.app.Editor+contribTools processing.app.ContributionManager+editor processing.app.ContributionManager+statusBar,1379,39,4,,"protected ToolContribution installTool(ToolContribution newTool) {
    
    ArrayList<ToolContribution> oldTools = editor.contribTools;
    
    String toolFolderName = newTool.getFolder().getName();
    
    File toolDestination = editor.getBase().getSketchbookToolsFolder();
    File newToolDest = new File(toolDestination, toolFolderName);
    
    for (ToolContribution oldTool : oldTools) {
      
      // XXX: Handle other cases when installing tools.
      //   -What if a library by the same name is already installed?
      //   -What if newLibDest exists, but isn't used by an existing tools?
      if (oldTool.getFolder().exists() && oldTool.getFolder().equals(newToolDest)) {
        
        // XXX: We can't replace stuff, soooooo.... do something different
        if (!backupContribution(oldTool, false)) {
          return null;
        }
      }
    }
    
    // Move newTool to the sketchbook library folder
    if (newTool.getFolder().renameTo(newToolDest)) {
      ToolContribution movedTool = ToolContribution.getTool(newToolDest);
      try {
        movedTool.initializeToolClass();
        return movedTool;
      } catch (Exception e) {
        e.printStackTrace();
      }
    } else {
      statusBar.setErrorMessage(""Could not move tool \"""" + newTool.getName()
                                + ""\"" to sketchbook."");
    }
    
    return null;
  }",False,False,"This method installs a new tool by moving it to the sketchbook tools folder. It checks if a tool with the same name is already installed and handles that case. If the tool is successfully moved, it initializes the tool class and returns the moved tool. If there is an error, it prints the stack trace and returns null.",False,"The `installTool` method is used to install a new tool by moving it to the sketchbook tools folder. It checks if a tool with the same name already exists and handles the case accordingly. If the tool is successfully moved and initialized, the method returns the new tool contribution, otherwise it returns null."
37,"writePropertiesFile(File,AdvertisedContribution)",write properties file prop file ad ,Method,"installTool(File,AdvertisedContribution) installLibrary(File,AdvertisedContribution,boolean)",,java.io.File+delete() java.io.File+delete() java.io.File+createNewFile() java.io.File+createNewFile() java.io.File+setWritable(boolean) java.io.File+setWritable(boolean) java.io.BufferedWriter+BufferedWriter(Writer) java.io.FileWriter+FileWriter(File) java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getName() processing.app.ContributionListing.AdvertisedContribution+getName() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getCategory() processing.app.ContributionListing.AdvertisedContribution+getCategory() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getAuthorList() processing.app.ContributionListing.AdvertisedContribution+getAuthorList() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getUrl() processing.app.ContributionListing.AdvertisedContribution+getUrl() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getSentence() processing.app.ContributionListing.AdvertisedContribution+getSentence() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getParagraph() processing.app.ContributionListing.AdvertisedContribution+getParagraph() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getVersion() processing.app.ContributionListing.AdvertisedContribution+getVersion() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getPrettyVersion() processing.app.ContributionListing.AdvertisedContribution+getPrettyVersion() java.io.BufferedWriter+close() java.io.BufferedWriter+close(),,874,23,4,,"protected boolean writePropertiesFile(File propFile, AdvertisedContribution ad) {
    try {
      if (propFile.delete() && propFile.createNewFile() && propFile.setWritable(true)) {
        BufferedWriter bw = new BufferedWriter(new FileWriter(propFile));
        
        bw.write(""name="" + ad.getName() + ""\n"");
        bw.write(""category="" + ad.getCategory() + ""\n"");
        bw.write(""authorList="" + ad.getAuthorList() + ""\n"");
        bw.write(""url="" + ad.getUrl() + ""\n"");
        bw.write(""sentence="" + ad.getSentence() + ""\n"");
        bw.write(""paragraph="" + ad.getParagraph() + ""\n"");
        bw.write(""version="" + ad.getVersion() + ""\n"");
        bw.write(""prettyVersion="" + ad.getPrettyVersion() + ""\n"");
        
        bw.close();
      }
      return true;
    } catch (FileNotFoundException e) {
    } catch (IOException e) {
    }
    
    return false;
  }",False,False,"This method writes the properties of an AdvertisedContribution object to a file. It first deletes the existing file, creates a new file, and sets it to be writable. Then, it writes the properties of the object to the file and closes it. If successful, it returns true; otherwise, it returns false.",False,"This code writes the properties of an AdvertisedContribution object to a file. It creates a new file, sets it as writable, and then writes the properties to the file using a BufferedWriter. If successful, it returns true; otherwise, it returns false."
38,"installLibrary(File,AdvertisedContribution,boolean)",install library lib file ad confirm replace param lib file a zip file containing the library to install param ad the advertised version of this library if it was downloaded through the contribution manager or null this is used to replace the library properties file in the zip param confirm replace true to open a dialog asking the user to confirm removing moving the library when a library by the same name already exists return ,Method,"confirmAndInstallLibrary(Editor,File)",,"processing.app.ContributionManager+unzipFileToTemp(File) processing.app.ContributionManager+unzipFileToTemp(File) processing.app.Library+list(File) processing.app.Library+list(File) java.util.ArrayList+isEmpty() java.util.ArrayList+isEmpty() processing.app.Library+list(File) processing.app.Library+list(File) java.io.File+getParentFile() java.io.File+getParentFile() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) java.io.File+File(File,String) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() processing.app.ContributionManager+writePropertiesFile(File,AdvertisedContribution) processing.app.ContributionManager+writePropertiesFile(File,AdvertisedContribution) processing.app.ContributionManager+installLibrary(Library,boolean) processing.app.ContributionManager+installLibrary(Library,boolean) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) java.util.ArrayList+isEmpty() java.util.ArrayList+isEmpty() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String)",processing.app.ContributionManager+statusBar processing.app.ContributionManager+ERROR_OVERWRITING_PROPERTIES_MESSAGE processing.app.ContributionManager+statusBar processing.app.ContributionManager+DISCOVERY_INTERNAL_ERROR_MESSAGE processing.app.ContributionManager+statusBar processing.app.ContributionManager+DISCOVERY_NONE_FOUND_ERROR_MESSAGE processing.app.ContributionManager+statusBar processing.app.ContributionManager+statusBar processing.app.ContributionManager+DISCOVERY_INTERNAL_ERROR_MESSAGE,2257,51,4,"/** 
 * @param libFile a zip file containing the library to install
 * @param ad the advertised version of this library, if it was downloaded through the Contribution Manager, or null. This is used to replace the library.properties file in the zip
 * @param confirmReplace true to open a dialog asking the user to confirm removing/moving the library when a library by the same name already exists
 * @return
 */
","/**
   * @param libFile
   *          a zip file containing the library to install
   * @param ad
   *          the advertised version of this library, if it was downloaded
   *          through the Contribution Manager, or null. This is used to replace
   *          the library.properties file in the zip
   * @param confirmReplace
   *          true to open a dialog asking the user to confirm removing/moving
   *          the library when a library by the same name already exists
   * @return
   */
  protected Library installLibrary(File libFile, AdvertisedContribution ad,
                                   boolean confirmReplace) {
    File tempDir = unzipFileToTemp(libFile);
    
    try {
      ArrayList<Library> discoveredLibs = Library.list(tempDir);
      if (discoveredLibs.isEmpty()) {
        // Sometimes library authors place all their folders in the base
        // directory of a zip file instead of in single folder as the
        // guidelines suggest. If this is the case, we might be able to find the
        // library by stepping up a directory and searching for libraries again.
        discoveredLibs = Library.list(tempDir.getParentFile());
      }
      
      if (discoveredLibs != null && discoveredLibs.size() == 1) {
        Library discoveredLib = discoveredLibs.get(0);
        File propFile = new File(discoveredLib.getFolder(), ""library.properties"");
        
        if (ad == null || writePropertiesFile(propFile, ad)) {
          return installLibrary(discoveredLib, confirmReplace);
        } else {
          statusBar.setErrorMessage(ERROR_OVERWRITING_PROPERTIES_MESSAGE);
        }
      } else {
        // Diagnose the problem and notify the user
        if (discoveredLibs == null) {
          statusBar.setErrorMessage(ContributionManager.DISCOVERY_INTERNAL_ERROR_MESSAGE);
        } else if (discoveredLibs.isEmpty()) {
          statusBar.setErrorMessage(ContributionManager.DISCOVERY_NONE_FOUND_ERROR_MESSAGE);
        } else {
          statusBar.setErrorMessage(""There were multiple libraries in the file, so we're ignoring it."");
        }
      }
    } catch (IOException ioe) {
      statusBar.setErrorMessage(ContributionManager.DISCOVERY_INTERNAL_ERROR_MESSAGE);
    }
    
    return null;
  }",False,False,"This method installs a library from a zip file. It unzips the file, searches for the library within the unzipped contents, and installs it. It also handles cases where there are multiple libraries or errors occur during the installation process.",True,"This code installs a library by unzipping a file and searching for the library within the unzipped contents. If the library is found, it checks for a ""library.properties"" file and writes the properties if necessary. If multiple libraries are found or an error occurs, appropriate error messages are displayed."
39,"installLibrary(Library,boolean)",install library new lib confirm replace param confirm replace if true and the library is already installed opens a prompt to ask the user if it s okay to replace the library if false the library is always replaced with the new copy ,Method,"installLibrary(File,AdvertisedContribution,boolean)",,"processing.app.Editor+getMode() processing.app.Editor+getMode() java.io.File+getName() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+getName() processing.app.Base+getSketchbookLibrariesFolder() processing.app.Editor+getBase() processing.app.Editor+getBase() processing.app.Base+getSketchbookLibrariesFolder() java.io.File+File(File,String) java.io.File+exists() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+exists() java.io.File+equals(Object) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+equals(Object) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getBoolean(String) processing.app.Base+showYesNoQuestion(Frame,String,String,String) processing.app.Base+showYesNoQuestion(Frame,String,String,String) processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() processing.app.ContributionManager+backupContribution(InstalledContribution,boolean) processing.app.ContributionManager+backupContribution(InstalledContribution,boolean) processing.app.Base+showYesNoQuestion(Frame,String,String,String) processing.app.Base+showYesNoQuestion(Frame,String,String,String) processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() java.io.File+delete() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+delete() processing.app.ContributionManager+backupContribution(InstalledContribution,boolean) processing.app.ContributionManager+backupContribution(InstalledContribution,boolean) java.io.File+delete() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+delete() java.io.File+renameTo(File) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+renameTo(File) processing.app.Library+Library(File,String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName()",processing.app.Mode+contribLibraries processing.app.ContributionManager+editor processing.app.Mode+contribLibraries processing.app.ContributionManager+editor processing.app.ContributionManager+editor javax.swing.JOptionPane+YES_OPTION processing.app.ContributionManager+editor javax.swing.JOptionPane+YES_OPTION processing.app.ContributionManager+statusBar,3013,69,4,"/** 
 * @param confirmReplace if true and the library is already installed, opens a prompt to ask the user if it's okay to replace the library. If false, the library is always replaced with the new copy.
 */
","/**
   * @param confirmReplace
   *          if true and the library is already installed, opens a prompt to
   *          ask the user if it's okay to replace the library. If false, the
   *          library is always replaced with the new copy.
   */
  protected Library installLibrary(Library newLib, boolean confirmReplace) {
    
    ArrayList<Library> oldLibs = editor.getMode().contribLibraries;
    
    String libFolderName = newLib.getFolder().getName();
    
    File libraryDestination = editor.getBase().getSketchbookLibrariesFolder();
    File newLibDest = new File(libraryDestination, libFolderName);
    
    for (Library oldLib : oldLibs) {
      
      // XXX: Handle other cases when installing libraries.
      //   -What if a library by the same name is already installed?
      //   -What if newLibDest exists, but isn't used by an existing library?
      if (oldLib.getFolder().exists() && oldLib.getFolder().equals(newLibDest)) {
        
        int result = 0;
        boolean doBackup = Preferences.getBoolean(""contribution.backup.on_install"");
        if (confirmReplace) {
          if (doBackup) {
            result = Base.showYesNoQuestion(editor, ""Replace"",
                   ""Replace pre-existing \"""" + oldLib.getName() + ""\"" library?"",
                   ""A pre-existing copy of the \"""" + oldLib.getName() + ""\"" library<br>""+
                   ""has been found in your sketchbook. Clicking ‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•Yes‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚âà√¨‚àö√ë<br>""+
                   ""will move the existing library to a backup folder<br>"" +
                   "" in <i>libraries/old</i> before replacing it."");
            if (result != JOptionPane.YES_OPTION || !backupContribution(oldLib, true)) {
              return null;
            }
          } else {
            result = Base.showYesNoQuestion(editor, ""Replace"",
                   ""Replace pre-existing \"""" + oldLib.getName() + ""\"" library?"",
                   ""A pre-existing copy of the \"""" + oldLib.getName() + ""\"" library<br>""+
                   ""has been found in your sketchbook. Clicking ‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•Yes‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚âà√¨‚àö√ë<br>""+
                   ""will permanently delete this library and all of its contents<br>""+
                   ""before replacing it."");
            if (result != JOptionPane.YES_OPTION || !oldLib.getFolder().delete()) {
              return null;
            }
          }
        } else {
          if (doBackup && !backupContribution(oldLib, true)
              || !doBackup && !oldLib.getFolder().delete()) {
            return null;
          }
        }
      }
    }
    
    // Move newLib to the sketchbook library folder
    if (newLib.getFolder().renameTo(newLibDest)) {
      return new Library(newLibDest, null);
//      try {
//        FileUtils.copyDirectory(newLib.folder, libFolder);
//        FileUtils.deleteQuietly(newLib.folder);
//        newLib.folder = libFolder;
//      } catch (IOException e) {
    } else {
      statusBar.setErrorMessage(""Could not move library \""""
          + newLib.getName() + ""\"" to sketchbook."");
      return null;
    }
  }",False,False,"The function of this method is to install a library in the sketchbook. It checks if the library already exists and prompts the user for confirmation to replace it. If confirmed, the existing library is replaced with the new copy.",True,"The `installLibrary` method is used to install a new library in the sketchbook. It checks if the library already exists and prompts the user for confirmation to replace it. If confirmed, the existing library is either backed up or permanently deleted before the new library is moved to the sketchbook."
40,refreshInstalled(),refresh installed ,Method,,,processing.app.Mode+rebuildImportMenu() processing.app.Editor+getMode() processing.app.Editor+getMode() processing.app.Mode+rebuildImportMenu() processing.app.Editor+rebuildToolMenu() processing.app.Editor+rebuildToolMenu(),processing.app.ContributionManager+editor processing.app.ContributionManager+editor,108,4,1,,"public void refreshInstalled() {
    editor.getMode().rebuildImportMenu();
    editor.rebuildToolMenu();
  }",False,False,"The function of the method ""refreshInstalled"" is to update the installed items in the editor by rebuilding the import menu and the tool menu.",False,"The `refreshInstalled()` method is responsible for refreshing the installed components in an editor. It calls the `rebuildImportMenu()` method of the editor's mode to update the import menu, and then rebuilds the tool menu of the editor."
41,"backupContribution(InstalledContribution,boolean)",backup contribution contribution do delete original moves the given contribution to a backup folder param do delete original true if the file should be moved to the directory false if it should instead be copied leaving the original in place ,Method,"installTool(ToolContribution) installLibrary(Library,boolean) installLibrary(Library,boolean)",,"processing.app.contribution.Contribution+getType() processing.app.contribution.Contribution+getType() processing.app.ContributionManager+createLibraryBackupFolder() processing.app.ContributionManager+createLibraryBackupFolder() processing.app.ContributionManager+createToolBackupFolder() processing.app.ContributionManager+createToolBackupFolder() java.io.File+getName() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+getName() java.text.DateFormat+format(Date) java.text.SimpleDateFormat+SimpleDateFormat(String) java.text.DateFormat+format(Date) java.util.Date+Date() processing.app.ContributionManager+getUniqueName(File,String) processing.app.ContributionManager+getUniqueName(File,String) java.io.File+renameTo(File) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+renameTo(File) processing.app.Base+copyDir(File,File) processing.app.Base+copyDir(File,File) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String)",processing.app.ContributionManager+statusBar,1577,51,2,"/** 
 * Moves the given contribution to a backup folder.
 * @param doDeleteOriginal true if the file should be moved to the directory, false if it should instead be copied, leaving the original in place
 */
","/**
   * Moves the given contribution to a backup folder.
   * @param doDeleteOriginal
   *          true if the file should be moved to the directory, false if it
   *          should instead be copied, leaving the original in place
   */
  private boolean backupContribution(InstalledContribution contribution,
                                     boolean doDeleteOriginal) {
    
    File backupFolder = null;
    
    switch (contribution.getType()) {
    case LIBRARY:
    case LIBRARY_COMPILATION:
      backupFolder = createLibraryBackupFolder();
      break;
    case MODE:
      break;
    case TOOL:
      backupFolder = createToolBackupFolder();
      break;
    }
    
    if (backupFolder == null) return false;
    
    String libFolderName = contribution.getFolder().getName();
    
    String prefix = new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());
    final String backupName = prefix + ""_"" + libFolderName;
    File backupSubFolder = ContributionManager.getUniqueName(backupFolder, backupName);
    
//    try {
//      FileUtils.moveDirectory(lib.folder, backupFolderForLib);
//      return true;
    
    boolean success = false;
    if (doDeleteOriginal) {
      success = contribution.getFolder().renameTo(backupSubFolder);
    } else {
      try {
        Base.copyDir(contribution.getFolder(), backupSubFolder);
        success = true;
      } catch (IOException e) {
      }
    }
//    } catch (IOException e) {
    if (!success) {
      statusBar.setErrorMessage(""Could not move contribution to backup folder."");
    }
    return success;
  }",False,False,"The function of this method is to move or copy a given contribution to a backup folder, depending on the value of the doDeleteOriginal parameter. It determines the appropriate backup folder based on the type of the contribution, and then either renames the original folder or copies its contents to the backup folder. If the operation is successful, it returns true; otherwise, it returns false.",True,"The `backupContribution` method moves or copies a given contribution file to a backup folder based on its type. It creates a backup subfolder with a unique name and either renames the original file or copies it to the backup subfolder. If the operation is successful, it returns true; otherwise, it returns false and displays an error message."
42,createLibraryBackupFolder(),create library backup folder ,Method,"backupContribution(InstalledContribution,boolean)",,"java.io.File+File(File,String) processing.app.Base+getSketchbookLibrariesFolder() processing.app.Editor+getBase() processing.app.Editor+getBase() processing.app.Base+getSketchbookLibrariesFolder() java.io.File+exists() java.io.File+exists() java.io.File+isDirectory() java.io.File+isDirectory() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String)",processing.app.ContributionManager+editor processing.app.ContributionManager+statusBar,434,14,2,,"private File createLibraryBackupFolder() {
    
    File libraryBackupFolder = new File(editor.getBase()
        .getSketchbookLibrariesFolder(), ""old"");

    if (!libraryBackupFolder.exists() || !libraryBackupFolder.isDirectory()) {
      if (!libraryBackupFolder.mkdirs()) {
        statusBar.setErrorMessage(""Could not create backup folder for library."");
        return null;
      }
    }
    
    return libraryBackupFolder;
  }",False,False,"This method creates a backup folder for a library. It checks if the folder already exists, and if not, it creates the folder. If the folder cannot be created, it returns null. Finally, it returns the created folder.",False,"This code creates a backup folder for a library in the sketchbook libraries folder. If the backup folder does not exist, it attempts to create it and returns the folder. If the creation fails, it sets an error message and returns null."
43,createToolBackupFolder(),create tool backup folder ,Method,"backupContribution(InstalledContribution,boolean)",,"java.io.File+File(File,String) processing.app.Base+getSketchbookToolsFolder() processing.app.Editor+getBase() processing.app.Editor+getBase() processing.app.Base+getSketchbookToolsFolder() java.io.File+exists() java.io.File+exists() java.io.File+isDirectory() java.io.File+isDirectory() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String)",processing.app.ContributionManager+editor processing.app.ContributionManager+statusBar,414,14,2,,"private File createToolBackupFolder() {
    
    File toolsBackupFolder = new File(editor.getBase()
        .getSketchbookToolsFolder(), ""old"");

    if (!toolsBackupFolder.exists() || !toolsBackupFolder.isDirectory()) {
      if (!toolsBackupFolder.mkdirs()) {
        statusBar.setErrorMessage(""Could not create backup folder for tool."");
        return null;
      }
    }
    
    return toolsBackupFolder;
  }",False,False,"This method creates a backup folder for tools. It checks if the folder already exists, and if not, it creates the folder. If the folder cannot be created, it displays an error message and returns null. Finally, it returns the backup folder.",False,"This code creates a backup folder for tools in the sketchbook directory. If the backup folder does not exist, it attempts to create it. If the creation fails, an error message is displayed and null is returned. The function returns the backup folder file object."
44,"getUniqueName(File,String)",get unique name parent folder file name returns a file in the parent folder that does not exist yet if parent file name already exists this will look for parent file name 2 then parent file name 3 and so forth return a file that does not exist yet ,Method,"backupContribution(InstalledContribution,boolean)",,"java.io.File+File(File,String) java.io.File+exists() java.io.File+exists()",,637,22,9,"/** 
 * Returns a file in the parent folder that does not exist yet. If parent/fileName already exists, this will look for parent/fileName(2) then parent/fileName(3) and so forth.
 * @return a file that does not exist yet
 */
","/**
   * Returns a file in the parent folder that does not exist yet. If
   * parent/fileName already exists, this will look for parent/fileName(2)
   * then parent/fileName(3) and so forth.
   * 
   * @return a file that does not exist yet
   */
  public static File getUniqueName(File parentFolder, String fileName) {
    File backupFolderForLib;
    int i = 1;
    do {
      String folderName = fileName;
      if (i >= 2) {
        folderName += ""("" + i + "")"";
      }
      i++;
      
      backupFolderForLib = new File(parentFolder, folderName);
    } while (backupFolderForLib.exists());
    
    return backupFolderForLib;
  }",False,False,This method returns a file in the parent folder that does not exist yet. It appends a number in parentheses to the file name if a file with the same name already exists.,False,"This code defines a method called ""getUniqueName"" that takes a parent folder and a file name as input. It returns a file in the parent folder that does not already exist, by appending a number in parentheses to the file name if necessary."
45,"unzip(File,File)",unzip zip file dest ,Method,unzipFileToTemp(File),,"java.io.FileInputStream+FileInputStream(File) java.util.zip.CheckedInputStream+CheckedInputStream(InputStream,Checksum) java.util.zip.Adler32+Adler32() java.util.zip.ZipInputStream+ZipInputStream(InputStream) java.io.BufferedInputStream+BufferedInputStream(InputStream) java.util.zip.ZipInputStream+getNextEntry() java.util.zip.ZipInputStream+getNextEntry() java.io.File+File(File,String) java.util.zip.ZipEntry+getName() java.util.zip.ZipEntry+getName() java.util.zip.ZipEntry+isDirectory() java.util.zip.ZipEntry+isDirectory() java.io.File+mkdirs() java.io.File+mkdirs() java.io.File+createNewFile() java.io.File+createNewFile() processing.app.ContributionManager+unzipEntry(ZipInputStream,File) processing.app.ContributionManager+unzipEntry(ZipInputStream,File) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()",,685,19,9,,"public static void unzip(File zipFile, File dest) {
    try {
      FileInputStream fis = new FileInputStream(zipFile);
      CheckedInputStream checksum = new CheckedInputStream(fis, new Adler32());
      ZipInputStream zis = new ZipInputStream(new BufferedInputStream(checksum));
      ZipEntry next = null;
      while ((next = zis.getNextEntry()) != null) {
        File currentFile = new File(dest, next.getName());
        if (next.isDirectory()) {
          currentFile.mkdirs();
        } else {
          currentFile.createNewFile();
          ContributionManager.unzipEntry(zis, currentFile);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }",False,False,This method unzips a given zip file and extracts its contents to a specified destination folder. It creates directories if necessary and creates new files for each entry in the zip file.,False,"This code defines a method named ""unzip"" that takes a zip file and a destination directory as input. It reads the zip file, extracts its contents, and creates the corresponding files and directories in the destination directory."
46,"unzipEntry(ZipInputStream,File)",unzip entry zin f ,Method,"unzip(File,File)",,"java.io.FileOutputStream+FileOutputStream(File) java.io.FilterInputStream+read(byte[]) java.io.FilterInputStream+read(byte[]) java.io.FileOutputStream+write(byte[],int,int) java.io.FileOutputStream+write(byte[],int,int) java.io.FileOutputStream+close() java.io.FileOutputStream+close()",,273,9,10,,"private static void unzipEntry(ZipInputStream zin, File f) throws IOException {
    FileOutputStream out = new FileOutputStream(f);
    byte[] b = new byte[512];
    int len = 0;
    while ((len = zin.read(b)) != -1) {
      out.write(b, 0, len);
    }
    out.close();
  }",False,False,This method unzips a single entry from a ZipInputStream and saves it to a specified File by reading and writing bytes in chunks of 512.,False,The given code is a method named `unzipEntry` that takes a `ZipInputStream` and a `File` as parameters. It reads the contents of the `ZipInputStream` and writes them to the specified `File` using a buffer of size 512 bytes.
47,setFilterText(String),set filter text filter ,Method,,processing.app.Base+handleShowUpdates(),java.lang.String+isEmpty() java.lang.String+isEmpty() javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) processing.app.ContributionManager.FilterField+applyFilter() processing.app.ContributionManager.FilterField+applyFilter(),processing.app.ContributionManager+filterField processing.app.ContributionManager+filterField processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager+filterField processing.app.ContributionManager+filterField processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager+filterField,294,11,1,,"public void setFilterText(String filter) {
    if (filter == null || filter.isEmpty()) {
      filterField.setText("""");
      filterField.isShowingHint = true;
    } else {
      filterField.setText(filter);
      filterField.isShowingHint = false;
    }
    filterField.applyFilter();
    
  }",True,True,"This method sets the filter text for a filter field. If the filter is null or empty, it clears the filter field and sets a hint. Otherwise, it sets the filter text and removes the hint. Finally, it applies the filter.",False,"The `setFilterText` method takes a string parameter `filter` and sets the text of `filterField` based on the value of `filter`. If `filter` is null or empty, the text is set to an empty string and `isShowingHint` is set to true. Otherwise, the text is set to `filter` and `isShowingHint` is set to false. Finally, the `applyFilter` method is called on `filterField`."
48,FilterField,filter field ,MemberClass,,,"processing.app.ContributionManager.FilterField+FilterField() java.util.ArrayList+ArrayList() java.awt.Component+addFocusListener(FocusListener) java.awt.Component+addFocusListener(FocusListener) +() +focusLost(FocusEvent) java.lang.String+isEmpty() javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText() java.lang.String+isEmpty() processing.app.ContributionManager.FilterField+updateStyle() processing.app.ContributionManager.FilterField+updateStyle() +focusGained(FocusEvent) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) processing.app.ContributionManager.FilterField+updateStyle() processing.app.ContributionManager.FilterField+updateStyle() javax.swing.text.Document+addDocumentListener(DocumentListener) javax.swing.text.JTextComponent+getDocument() javax.swing.text.JTextComponent+getDocument() javax.swing.text.Document+addDocumentListener(DocumentListener) +() +removeUpdate(DocumentEvent) processing.app.ContributionManager.FilterField+applyFilter() processing.app.ContributionManager.FilterField+applyFilter() +insertUpdate(DocumentEvent) processing.app.ContributionManager.FilterField+applyFilter() processing.app.ContributionManager.FilterField+applyFilter() +changedUpdate(DocumentEvent) processing.app.ContributionManager.FilterField+applyFilter() processing.app.ContributionManager.FilterField+applyFilter() processing.app.ContributionManager.FilterField+applyFilter() processing.app.ContributionManager.FilterField+getFilterText() processing.app.ContributionManager.FilterField+getFilterText() java.lang.String+toLowerCase() java.lang.String+toLowerCase() java.lang.String+replaceAll(String,String) java.lang.String+replaceAll(String,String) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) java.lang.String+split(String) java.lang.String+split(String) processing.app.ContributionManager+filterLibraries(String,List<String>) processing.app.ContributionManager+filterLibraries(String,List<String>) processing.app.ContributionManager.FilterField+getFilterText() javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText() processing.app.ContributionManager.FilterField+updateStyle() javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.JComponent+setForeground(Color) javax.swing.JComponent+setForeground(Color) javax.swing.JComponent+setForeground(Color) javax.swing.JComponent+setForeground(Color) javax.swing.UIManager+getColor(Object) javax.swing.UIManager+getColor(Object)",processing.app.ContributionManager.FilterField+filterHint processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager.FilterField+filters processing.app.ContributionManager.FilterField+filterHint processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager.FilterField+filters processing.app.ContributionManager+filterField processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager+filterField processing.app.ContributionManager+filterField processing.app.ContributionManager.FilterField+filters processing.app.ContributionManager+category processing.app.ContributionManager.FilterField+filters processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager+filterField processing.app.ContributionManager.FilterField+filterHint java.awt.Color+gray,1954,76,0,,"class FilterField extends JTextField {
    
    final static String filterHint = ""Filter your search..."";

    boolean isShowingHint;
    
    List<String> filters;
    
    public FilterField () {
      super(filterHint);
      
      isShowingHint = true;
      
      filters = new ArrayList<String>();
      
      addFocusListener(new FocusListener() {
        
        public void focusLost(FocusEvent focusEvent) {
          if (filterField.getText().isEmpty()) {
            isShowingHint = true;
          }
          
          updateStyle();
        }
        
        public void focusGained(FocusEvent focusEvent) {
          if (isShowingHint) {
            isShowingHint = false;
            filterField.setText("""");
          }
          
          updateStyle();
        }
      });
      
      getDocument().addDocumentListener(new DocumentListener() {
        
        public void removeUpdate(DocumentEvent e) {
          applyFilter();
        }
        
        public void insertUpdate(DocumentEvent e) {
          applyFilter();
        }
        
        public void changedUpdate(DocumentEvent e) {
          applyFilter();
        }
      });
    }
    
    public void applyFilter() {
      String filter = filterField.getFilterText();
      filter = filter.toLowerCase();
      
      // Replace anything but 0-9, a-z, or : with a space
      filter = filter.replaceAll(""[^\\x30-\\x39^\\x61-\\x7a^\\x3a]"", "" "");
      filters = Arrays.asList(filter.split("" ""));
      filterLibraries(category, filters);
    }
    
    public String getFilterText() {
      return isShowingHint ? """" : getText();
    }

    public void updateStyle() {
      if (isShowingHint) {
        filterField.setText(filterHint);
        
        // setForeground(UIManager.getColor(""TextField.light"")); // too light
        setForeground(Color.gray);
      } else {
        setForeground(UIManager.getColor(""TextField.foreground""));
      }
    }
  }",False,True,,False,
49,hasAlreadyBeenOpened(),has already been opened ,Method,,processing.app.UpdateCheck+updateCheck(),,processing.app.ContributionManager+dialog,70,3,1,,"public boolean hasAlreadyBeenOpened() {
    return dialog != null;
  }",True,True,This method checks if a dialog has already been opened by returning a boolean value. It does this by checking if the dialog object is not null.,False,"The code defines a method named ""hasAlreadyBeenOpened"" which checks if a dialog has been opened or not. It returns a boolean value, true if the dialog is not null (i.e., it has been opened), and false otherwise."
50,getListing(),get listing ,Method,,processing.app.ContributionListPanel+ContributionListPanel(ContributionManager) processing.app.ContributionListPanel+filterLibraries(List<Contribution>) processing.app.ContributionListPanel+ContributionPanel.actionPerformed(ActionEvent) processing.app.ContributionListPanel+ContributionPanel.actionPerformed(ActionEvent) processing.app.ContributionListPanel+ContributionPanel.setContribution(Contribution) processing.app.ContributionListPanel+ContributionPanel.setContribution(Contribution) processing.app.ContributionListPanel+ContributionPanel.setSelected(boolean),,processing.app.ContributionManager+contribListing,72,3,1,,"public ContributionListing getListing() {
    return contribListing;
  }",False,True,The function of the method is to return the ContributionListing object.,False,"The code contains a method named ""getListing"" that returns a ContributionListing object. It retrieves and returns the contribListing object, which is likely a listing of contributions."
51,flagForDeletion(InstalledContribution),flag for deletion contrib ,Method,,,"java.io.File+createNewFile() java.io.File+File(File,String) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+createNewFile()",processing.app.ContributionManager+DELETION_FLAG,343,10,9,,"static public boolean flagForDeletion(InstalledContribution contrib) {
    // Only returns false if the file already exists, so we can
    // ignore the return value.
    try {
      new File(contrib.getFolder(), ContributionManager.DELETION_FLAG).createNewFile();
      return true;
    } catch (IOException e) {
      return false;
    }
  }",False,False,"This method creates a flag file for deletion in the specified folder of an installed contribution. It returns true if the flag file is successfully created, and false if there is an IOException.",False,"The given code is a method named ""flagForDeletion"" that takes an object of type ""InstalledContribution"" as a parameter. It creates a new file with a specific name in the folder associated with the given contribution object, and returns true if the file is successfully created, otherwise it returns false."
52,removeFlagForDeletion(InstalledContribution),remove flag for deletion contrib ,Method,,processing.app.ContributionListPanel+ContributionPanel.actionPerformed(ActionEvent),"java.io.File+delete() java.io.File+File(File,String) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+delete()",processing.app.ContributionManager+DELETION_FLAG,166,3,9,,"static public boolean removeFlagForDeletion(InstalledContribution contrib) {
    return new File(contrib.getFolder(), ContributionManager.DELETION_FLAG).delete();
  }",False,False,This method removes the deletion flag file for a given installed contribution by deleting the file from the contribution's folder. It returns a boolean value indicating whether the deletion flag file was successfully deleted.,False,"The given code is a static method named ""removeFlagForDeletion"" that takes an object of type ""InstalledContribution"" as a parameter. It deletes a file named ""DELETION_FLAG"" from the folder associated with the given contribution and returns a boolean value indicating the success of the deletion operation."
53,isFlaggedForDeletion(Contribution),is flagged for deletion contrib ,Method,,processing.app.Base+Base(String[]) processing.app.ContributionListPanel+ContributionPanel.setContribution(Contribution),"java.io.File+exists() java.io.File+File(File,String) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+exists()",processing.app.ContributionManager+DELETION_FLAG,309,7,9,,"static public boolean isFlaggedForDeletion(Contribution contrib) {
    if (contrib instanceof InstalledContribution) {
      InstalledContribution installed = (InstalledContribution) contrib;
      return new File(installed.getFolder(), ContributionManager.DELETION_FLAG).exists();
    }
    return false;
  }",False,False,"This method checks if a contribution is flagged for deletion. It returns true if the contribution is an installed contribution and a specific deletion flag file exists in its folder, otherwise it returns false.",False,"The given code is a static method named ""isFlaggedForDeletion"" that takes a Contribution object as a parameter. It checks if the contribution is an instance of InstalledContribution and if so, it checks if a specific file named ""DELETION_FLAG"" exists in the contribution's folder. If the file exists, it returns true indicating that the contribution is flagged for deletion, otherwise it returns false."
54,requiresRestart(Contribution),requires restart contrib returns true if the type of contribution requires the pde to restart when being removed ,Method,,processing.app.ContributionListPanel+ContributionPanel.setContribution(Contribution) processing.app.ContributionListPanel+ContributionPanel.setContribution(Contribution) processing.app.ContributionListPanel+ContributionPanel.setSelected(boolean),processing.app.contribution.Contribution+getType() processing.app.contribution.Contribution+getType() processing.app.contribution.Contribution+getType() processing.app.contribution.Contribution+getType(),,245,5,9,"/** 
 * Returns true if the type of contribution requires the PDE to restart when being removed. 
 */
","/** Returns true if the type of contribution requires the PDE to restart
   * when being removed. */
  static public boolean requiresRestart(Contribution contrib) {
    return contrib.getType() == Type.TOOL || contrib.getType() == Type.MODE;
  }",False,False,The function determines if a contribution requires the PDE to restart when it is removed. It checks if the contribution type is either TOOL or MODE and returns true if it is.,False,"The given code is a static method named ""requiresRestart"" that takes a ""Contribution"" object as a parameter. It returns a boolean value indicating whether the type of contribution requires the PDE (Processing Development Environment) to restart when it is removed. The method checks if the contribution type is either ""TOOL"" or ""MODE"" and returns true in those cases."
55,StatusPanel,status panel ,MemberClass,,,"processing.app.ContributionManager.StatusPanel+StatusPanel() java.awt.Component+addMouseListener(MouseListener) java.awt.Component+addMouseListener(MouseListener) +() +mousePressed(MouseEvent) processing.app.ContributionManager.StatusPanel+clearErrorMessage() processing.app.ContributionManager.StatusPanel+clearErrorMessage() processing.app.ContributionManager.StatusPanel+paintComponent(Graphics) javax.swing.JComponent+paintComponent(Graphics) java.awt.Graphics+setFont(Font) java.awt.Graphics+setFont(Font) java.awt.Font+Font(String,int,int) java.awt.Component+getSize() java.awt.Component+getSize() java.awt.FontMetrics+getAscent() java.awt.Graphics+getFontMetrics() java.awt.Graphics+getFontMetrics() java.awt.FontMetrics+getAscent() processing.app.ContributionListing+isDownloadingListing() processing.app.ContributionListing+isDownloadingListing() java.awt.Graphics+setColor(Color) java.awt.Graphics+setColor(Color) java.awt.Graphics+drawString(String,int,int) java.awt.Graphics+drawString(String,int,int) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) java.awt.Graphics+setColor(Color) java.awt.Graphics+setColor(Color) java.awt.Graphics+drawString(String,int,int) java.awt.Graphics+drawString(String,int,int) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+getPreferredSize() javax.swing.JComponent+getPreferredSize() processing.app.Base+isWindows() processing.app.Base+isWindows() javax.swing.JComponent+setPreferredSize(Dimension) javax.swing.JComponent+setPreferredSize(Dimension) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) processing.app.ContributionManager.StatusPanel+clearErrorMessage() java.awt.Component+repaint() java.awt.Component+repaint() javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean)",processing.app.ContributionManager.StatusPanel+errorMessage java.awt.Font+PLAIN java.awt.Dimension+height processing.app.ContributionManager+contribListing java.awt.Color+black processing.app.ContributionManager.StatusPanel+errorMessage java.awt.Color+red processing.app.ContributionManager.StatusPanel+errorMessage processing.app.ContributionManager.StatusPanel+errorMessage processing.app.ContributionManager+contributionListPanel processing.app.ContributionListPanel+statusPlaceholder java.awt.Dimension+height processing.app.ContributionManager.StatusPanel+errorMessage processing.app.ContributionManager+contributionListPanel processing.app.ContributionListPanel+statusPlaceholder,1621,58,0,,"class StatusPanel extends JPanel {
    
    String errorMessage;
    
    StatusPanel() {
      addMouseListener(new MouseAdapter() {
        
        public void mousePressed(MouseEvent e) {
          clearErrorMessage();
        }
      });
    }
    
    @Override
    protected void paintComponent(Graphics g) {
      super.paintComponent(g);
      
      g.setFont(new Font(""SansSerif"", Font.PLAIN, 10));
      int baseline = (getSize().height + g.getFontMetrics().getAscent()) / 2;
      
      if (contribListing.isDownloadingListing()) {
        g.setColor(Color.black);
        g.drawString(""Downloading software listing..."", 2, baseline);
        setVisible(true);
      } else if (errorMessage != null) {
        g.setColor(Color.red);
        g.drawString(errorMessage, 2, baseline);
        setVisible(true);
      } else {
        setVisible(false);
      }
    }
    
    void setErrorMessage(String message) {
      errorMessage = message;
      setVisible(true);
      
      JPanel placeholder = ContributionManager.this.contributionListPanel.statusPlaceholder;
      Dimension d = getPreferredSize();
      if (Base.isWindows()) {
        d.height += 5;
        placeholder.setPreferredSize(d);
      }
      placeholder.setVisible(true);
      
//      Rectangle rect = scrollPane.getViewport().getViewRect();
//      rect.x += d.height;
//      scrollPane.getViewport().scrollRectToVisible(rect);
    }
    
    void clearErrorMessage() {
      errorMessage = null;
      repaint();
      
      ContributionManager.this.contributionListPanel.statusPlaceholder
          .setVisible(false);
    }
  }",False,True,,False,
56,progressBar,progress bar ,Field,,,,,25,1,0,,JProgressBar progressBar;,False,True,,False,
57,JProgressMonitor(JProgressBar),j progress monitor progress bar ,Method,,,,processing.app.JProgressMonitor+progressBar processing.app.JProgressMonitor+progressBar,91,3,1,,"public JProgressMonitor(JProgressBar progressBar) {
    this.progressBar = progressBar;
  }",False,True,This method is a constructor for the JProgressMonitor class. It takes a JProgressBar object as a parameter and assigns it to the progressBar instance variable of the class.,False,The code defines a constructor for the JProgressMonitor class that takes a JProgressBar object as a parameter. It assigns the passed JProgressBar object to the progressBar instance variable of the JProgressMonitor class.
58,"startTask(String,int)",start task name max value ,Method,,,javax.swing.JProgressBar+setString(String) javax.swing.JProgressBar+setString(String) javax.swing.JProgressBar+setIndeterminate(boolean) javax.swing.JProgressBar+setIndeterminate(boolean) javax.swing.JProgressBar+setMaximum(int) javax.swing.JProgressBar+setMaximum(int),processing.app.AbstractProgressMonitor+isFinished processing.app.JProgressMonitor+progressBar processing.app.JProgressMonitor+progressBar processing.app.ProgressMonitor+UNKNOWN processing.app.JProgressMonitor+progressBar,204,6,1,,"public void startTask(String name, int maxValue) {
    isFinished = false;
    progressBar.setString(name);
    progressBar.setIndeterminate(maxValue == UNKNOWN);
    progressBar.setMaximum(maxValue);
  }",False,True,"This method starts a task by setting the progress bar's string to the given name, determining if the progress bar should be indeterminate based on the maxValue, and setting the maximum value of the progress bar.",False,"The `startTask` method initializes a progress bar for a task with a given name and maximum value. It sets the progress bar to indeterminate if the maximum value is unknown, and updates the progress bar's string and maximum value accordingly."
59,setProgress(int),set progress value ,Method,,,processing.app.AbstractProgressMonitor+setProgress(int) javax.swing.JProgressBar+setValue(int) javax.swing.JProgressBar+setValue(int),processing.app.JProgressMonitor+progressBar,103,4,1,,"public void setProgress(int value) {
    super.setProgress(value);
    progressBar.setValue(value);
  }",False,True,This method sets the progress value for a progress bar. It takes an integer value as input and updates the progress value for both the superclass and the specific progress bar.,False,"The code defines a method called ""setProgress"" that takes an integer value as input. It sets the progress value of a progress bar to the given value, updating the visual representation of the progress."
60,finished(),finished ,Method,,,processing.app.AbstractProgressMonitor+finished() processing.app.JProgressMonitor+finishedAction() processing.app.JProgressMonitor+finishedAction(),,84,5,1,,"@Override
  public void finished() {
    super.finished();
    finishedAction();
  }",False,True,"This method overrides the ""finished"" method from the superclass. It calls the superclass's ""finished"" method and then performs the ""finishedAction"" method.",False,"The code overrides the ""finished"" method, which is a part of a class. It calls the ""finished"" method of the superclass and then executes the ""finishedAction"" method."
61,finishedAction(),finished action ,Method,,,,,38,1,1025,,public abstract void finishedAction();,False,True,"This method serves as a placeholder for an action that will be executed when a certain process or task is finished. It is abstract, meaning it must be implemented by a subclass.",False,"The code contains an abstract method named ""finishedAction"" which does not have any implementation. It is expected to be overridden by subclasses to define specific actions to be performed when a certain task is completed."
