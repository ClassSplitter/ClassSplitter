index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,DELETION_FLAG,Field,,,,,66,1,25,,"static public final String DELETION_FLAG = ""flagged_for_deletion"";",False
2,DOUBLE_CLICK_SECONDARY,Field,,,,,131,2,26,,"static private final String DOUBLE_CLICK_SECONDARY =
      ""Click ‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂¬¨¬¢¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®¬¨¬¢‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√†√á¬¨¬®¬¨¬Æ¬¨¬®¬¨¬¢‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√Ñ√∂‚àö‚Ä†‚àö√°¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®‚àö√ú‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂¬¨¬±‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•Yes‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂¬¨¬¢¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®¬¨¬¢‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√†√á¬¨¬®¬¨¬Æ¬¨¬®¬¨¬¢‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√Ñ√∂‚àö‚Ä†‚àö√°¬¨¬®¬¨¬Æ¬¨¬®¬¨√Ü¬¨¬®¬¨¬Æ¬¨¬®‚àö√ú‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚Äö√Ñ‚Ä†‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂¬¨‚àû‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö√ú‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√Ñ√∂‚àö‚Ä†‚àö¬Æ‚Äö√¢√†‚àö‚â†¬¨¬®¬¨¬© to install this library to your sketchbook..."";",False
3,DISCOVERY_INTERNAL_ERROR_MESSAGE,Field,,,,,157,2,26,,"static private final String DISCOVERY_INTERNAL_ERROR_MESSAGE =
        ""An internal error occured while searching for contributions in the downloaded file."";",False
4,DISCOVERY_NONE_FOUND_ERROR_MESSAGE,Field,,,,,152,2,26,,"static private final String DISCOVERY_NONE_FOUND_ERROR_MESSAGE =
      ""Maybe it's just us, but it looks like there are no contributions in this file."";",False
5,ERROR_OVERWRITING_PROPERTIES_MESSAGE,Field,,,,,111,2,26,,"static private final String ERROR_OVERWRITING_PROPERTIES_MESSAGE =
      ""Error overwriting .properties file."";",False
6,ANY_CATEGORY,Field,,,,,41,1,24,,"static final String ANY_CATEGORY = ""Any"";",True
7,ICON_WIDTH,Field,,,,,75,2,24,"/** 
 * Width of each contribution icon. 
 */
","/** Width of each contribution icon. */
  static final int ICON_WIDTH = 25;",True
8,ICON_HEIGHT,Field,,,,,77,2,24,"/** 
 * Height of each contribution icon. 
 */
","/** Height of each contribution icon. */
  static final int ICON_HEIGHT = 20;",True
9,dialog,Field,,,,,14,1,0,,JFrame dialog;,True
10,filterField,Field,,,,,24,1,0,,FilterField filterField;,True
11,scrollPane,Field,,,,,23,1,0,,JScrollPane scrollPane;,True
12,contributionListPanel,Field,StatusPanel.setErrorMessage(String) StatusPanel.clearErrorMessage(),,,,44,1,0,,ContributionListPanel contributionListPanel;,True
13,statusBar,Field,,,,,22,1,0,,StatusPanel statusBar;,True
14,categoryChooser,Field,,,,,26,1,0,,JComboBox categoryChooser;,True
15,contributionIcons,Field,,,,,26,1,0,,Image[] contributionIcons;,True
16,editor,Field,"showFrame(Editor) confirmAndInstallLibrary(Editor,File) confirmAndInstallLibrary(Editor,File)",,,,14,1,0,,Editor editor;,True
17,category,Field,,,,,16,1,0,,String category;,True
18,contribListing,Field,,,,,35,1,0,,ContributionListing contribListing;,False
19,ContributionManager(),Method,,,processing.app.ContributionListing+ContributionListing() processing.app.ContributionListPanel+ContributionListPanel(ContributionManager) processing.app.ContributionListing+addContributionListener(ContributionChangeListener) processing.app.ContributionListing+addContributionListener(ContributionChangeListener),processing.app.ContributionManager+contribListing processing.app.ContributionManager+contributionListPanel processing.app.ContributionManager+contribListing processing.app.ContributionManager+contributionListPanel,387,11,1,"/** 
 * Initializes the contribution listing and fetches the advertised contributions in a separate thread. This does not initialize any AWT components.
 */
","/**
   * Initializes the contribution listing and fetches the advertised
   * contributions in a separate thread. This does not initialize any AWT
   * components.
   */
  public ContributionManager() {
    contribListing = new ContributionListing();
    
    contributionListPanel = new ContributionListPanel(this);
    contribListing.addContributionListener(contributionListPanel);
  }",True
20,showFrame(Editor),Method,,processing.app.Base+handleOpenContributionManager() processing.app.Base+handleShowUpdates(),"javax.swing.JFrame+JFrame(String) processing.app.Base+setIcon(Frame) processing.app.Base+setIcon(Frame) processing.app.ContributionManager+createComponents() processing.app.ContributionManager+createComponents() processing.app.ContributionManager+registerDisposeListeners() processing.app.ContributionManager+registerDisposeListeners() java.awt.Window+pack() java.awt.Window+pack() java.awt.Toolkit+getScreenSize() java.awt.Toolkit+getDefaultToolkit() java.awt.Toolkit+getDefaultToolkit() java.awt.Toolkit+getScreenSize() java.awt.Window+setLocation(int,int) java.awt.Window+setLocation(int,int) java.awt.Component+getWidth() java.awt.Component+getWidth() java.awt.Component+getHeight() java.awt.Component+getHeight() javax.swing.JComponent+grabFocus() javax.swing.JComponent+grabFocus() java.awt.Window+setVisible(boolean) java.awt.Window+setVisible(boolean) processing.app.ContributionListing+hasDownloadedLatestList() processing.app.ContributionListing+hasDownloadedLatestList() processing.app.ContributionListing+getAdvertisedContributions(ProgressMonitor) processing.app.ContributionListing+getAdvertisedContributions(ProgressMonitor) +() +startTask(String,int)",processing.app.ContributionManager+editor processing.app.ContributionManager+editor processing.app.ContributionManager+dialog processing.app.ContributionManager+dialog processing.app.ContributionManager+dialog processing.app.ContributionManager+dialog processing.app.ContributionManager+dialog java.awt.Dimension+width processing.app.ContributionManager+dialog java.awt.Dimension+height processing.app.ContributionManager+dialog processing.app.ContributionManager+contributionListPanel processing.app.ContributionManager+dialog processing.app.ContributionManager+contribListing processing.app.ContributionManager+contribListing,2256,68,4,,"protected void showFrame(Editor editor) {
    this.editor = editor;
    
    if (dialog == null) {
      dialog = new JFrame(""Contribution Manager"");
  
      Base.setIcon(dialog);
      
      createComponents();
  
      registerDisposeListeners();
  
      dialog.pack();
      Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
      dialog.setLocation((screen.width - dialog.getWidth()) / 2,
                         (screen.height - dialog.getHeight()) / 2);
  
      contributionListPanel.grabFocus();
    }
    
    dialog.setVisible(true);
    
    if (!contribListing.hasDownloadedLatestList()) {
      contribListing.getAdvertisedContributions(new AbstractProgressMonitor() {
        public void startTask(String name, int maxValue) {
        }

        public void finished() {
          super.finished();

          updateContributionListing();
          updateCategoryChooser();
          if (isError()) {
            statusBar.setErrorMessage(""An error occured when downloading "" + 
                                      ""the list of available contributions."");
          }
        }
      });
    }
    
    updateContributionListing();
    
    if (contributionIcons == null) {
      try {
        Image allButtons = ImageIO.read(Base.getLibStream(""contributions.gif""));
        int count = allButtons.getHeight(dialog) / ContributionManager.ICON_HEIGHT;
        contributionIcons = new Image[count];
        contributionIcons[0]  = allButtons;
        contributionIcons[1]  = allButtons;
        contributionIcons[2]  = allButtons;
        contributionIcons[3]  = allButtons;
        
        for (int i = 0; i < count; i++) {
          Image image = dialog.createImage(
                            new FilteredImageSource(allButtons.getSource(),
                            new CropImageFilter(0, i * ContributionManager.ICON_HEIGHT,
                                                ContributionManager.ICON_WIDTH,
                                                ContributionManager.ICON_HEIGHT)));
          contributionIcons[i] = image;
        }
        
        contributionListPanel.updateColors();
      } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
    }
  }",True
21,getContributionIcon(Contribution.Type),Method,,,,processing.app.ContributionManager+contributionIcons processing.app.ContributionManager+contributionIcons processing.app.ContributionManager+contributionIcons processing.app.ContributionManager+contributionIcons processing.app.ContributionManager+contributionIcons,389,17,1,,"public Image getContributionIcon(Contribution.Type type) {
    
    if (contributionIcons == null)
      return null;
      
    switch (type) {
    case LIBRARY:
      return contributionIcons[0];
    case TOOL:
      return contributionIcons[1];
    case MODE:
      return contributionIcons[2];
    case LIBRARY_COMPILATION:
      return contributionIcons[3];
    }
    return null;
  }",True
22,disposeFrame(),Method,,,java.awt.Window+dispose() java.awt.Window+dispose(),processing.app.ContributionManager+dialog processing.app.ContributionManager+editor,133,7,4,"/** 
 * Close the window after an OK or Cancel.
 */
","/**
   * Close the window after an OK or Cancel.
   */
  protected void disposeFrame() {
    dialog.dispose();
    editor = null;
  }",True
23,createComponents(),Method,showFrame(Editor),,"java.awt.Frame+setResizable(boolean) java.awt.Frame+setResizable(boolean) javax.swing.JFrame+getContentPane() javax.swing.JFrame+getContentPane() java.awt.Container+setLayout(LayoutManager) java.awt.Container+setLayout(LayoutManager) java.awt.GridBagLayout+GridBagLayout() java.awt.GridBagConstraints+GridBagConstraints() processing.app.ContributionManager.FilterField+FilterField() java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.GridBagConstraints+GridBagConstraints() javax.swing.JScrollPane+JScrollPane() javax.swing.JComponent+setPreferredSize(Dimension) javax.swing.JComponent+setPreferredSize(Dimension) java.awt.Dimension+Dimension(int,int) javax.swing.JScrollPane+setViewportView(Component) javax.swing.JScrollPane+setViewportView(Component) javax.swing.JComponent+setOpaque(boolean) javax.swing.JScrollPane+getViewport() javax.swing.JScrollPane+getViewport() javax.swing.JComponent+setOpaque(boolean) javax.swing.JComponent+setBackground(Color) javax.swing.JScrollPane+getViewport() javax.swing.JScrollPane+getViewport() javax.swing.JComponent+setBackground(Color) java.awt.Component+getBackground() java.awt.Component+getBackground() javax.swing.JScrollPane+setVerticalScrollBarPolicy(int) javax.swing.JScrollPane+setVerticalScrollBarPolicy(int) javax.swing.JScrollPane+setHorizontalScrollBarPolicy(int) javax.swing.JScrollPane+setHorizontalScrollBarPolicy(int) processing.app.ContributionManager.StatusPanel+StatusPanel() javax.swing.JComponent+setBorder(Border) javax.swing.JComponent+setBorder(Border) javax.swing.BorderFactory+createEtchedBorder() javax.swing.BorderFactory+createEtchedBorder() javax.swing.JLayeredPane+JLayeredPane() java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Container+add(Component,Object) java.awt.Component+addComponentListener(ComponentListener) java.awt.Component+addComponentListener(ComponentListener) +() +resizeLayers()",processing.app.ContributionManager+dialog processing.app.ContributionManager+dialog java.awt.GridBagConstraints+gridx java.awt.GridBagConstraints+gridy java.awt.GridBagConstraints+gridwidth java.awt.GridBagConstraints+weightx java.awt.GridBagConstraints+fill java.awt.GridBagConstraints+HORIZONTAL processing.app.ContributionManager+filterField processing.app.ContributionManager+filterField java.awt.GridBagConstraints+fill java.awt.GridBagConstraints+BOTH java.awt.GridBagConstraints+gridx java.awt.GridBagConstraints+gridy java.awt.GridBagConstraints+gridwidth java.awt.GridBagConstraints+weighty java.awt.GridBagConstraints+weightx processing.app.ContributionManager+scrollPane processing.app.ContributionManager+scrollPane processing.app.ContributionManager+scrollPane processing.app.ContributionManager+contributionListPanel processing.app.ContributionManager+scrollPane processing.app.ContributionManager+scrollPane processing.app.ContributionManager+contributionListPanel processing.app.ContributionManager+scrollPane javax.swing.ScrollPaneConstants+VERTICAL_SCROLLBAR_ALWAYS processing.app.ContributionManager+scrollPane javax.swing.ScrollPaneConstants+HORIZONTAL_SCROLLBAR_NEVER processing.app.ContributionManager+statusBar processing.app.ContributionManager+statusBar processing.app.ContributionManager+scrollPane javax.swing.JLayeredPane+DEFAULT_LAYER processing.app.ContributionManager+statusBar javax.swing.JLayeredPane+PALETTE_LAYER,3502,111,2,"/** 
 * Creates and arranges the Swing components in the dialog. 
 */
","/** Creates and arranges the Swing components in the dialog. */
  private void createComponents() {
    dialog.setResizable(true);
    
    Container pane = dialog.getContentPane();
    pane.setLayout(new GridBagLayout());
    
    { // The filter text area
      GridBagConstraints c = new GridBagConstraints();
      c.gridx = 0;
      c.gridy = 0;
      c.gridwidth = 2;
      c.weightx = 1;
      c.fill = GridBagConstraints.HORIZONTAL;
      filterField = new FilterField();

      pane.add(filterField, c);
    }
    
    { // The scroll area containing the contribution listing and the status bar.
      GridBagConstraints c = new GridBagConstraints();
      c.fill = GridBagConstraints.BOTH;
      c.gridx = 0;
      c.gridy = 1;
      c.gridwidth = 2;
      c.weighty = 1;
      c.weightx = 1;
      
      scrollPane = new JScrollPane();
      scrollPane.setPreferredSize(new Dimension(300, 300));
      scrollPane.setViewportView(contributionListPanel);
      scrollPane.getViewport().setOpaque(true);
      scrollPane.getViewport().setBackground(contributionListPanel.getBackground());
      scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
      scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
      
      statusBar = new StatusPanel();
      statusBar.setBorder(BorderFactory.createEtchedBorder());
      
      final JLayeredPane layeredPane = new JLayeredPane();
      layeredPane.add(scrollPane, JLayeredPane.DEFAULT_LAYER);
      layeredPane.add(statusBar, JLayeredPane.PALETTE_LAYER);
      
      layeredPane.addComponentListener(new ComponentAdapter() {
        
        void resizeLayers() {
          scrollPane.setSize(layeredPane.getSize());
          scrollPane.updateUI();
        }
        
        public void componentShown(ComponentEvent e) {
          resizeLayers();
        }
        
        public void componentResized(ComponentEvent arg0) {
          resizeLayers();
        }
      });
      
      final JViewport viewport = scrollPane.getViewport();
      viewport.addComponentListener(new ComponentAdapter() {
        void resizeLayers() {
          statusBar.setLocation(0, viewport.getHeight() - 18);
          
          Dimension d = viewport.getSize();
          d.height = 20;
          d.width += 3;
          statusBar.setSize(d);
        }
        public void componentShown(ComponentEvent e) {
          resizeLayers();
        }
        public void componentResized(ComponentEvent e) {
          resizeLayers();
        }
      });
      
      pane.add(layeredPane, c);
    }
    
    { // Shows ""Category:""
      GridBagConstraints c = new GridBagConstraints();
      c.gridx = 0;
      c.gridy = 2;
      pane.add(new Label(""Category:""), c);
    }
    
    { // Combo box for selecting a category
      GridBagConstraints c = new GridBagConstraints();
      c.fill = GridBagConstraints.HORIZONTAL;
      c.gridx = 1;
      c.gridy = 2;

      categoryChooser = new JComboBox();
      updateCategoryChooser();
      pane.add(categoryChooser, c);
      categoryChooser.addItemListener(new ItemListener() {

        public void itemStateChanged(ItemEvent e) {
          category = (String) categoryChooser.getSelectedItem();
          if (ContributionManager.ANY_CATEGORY.equals(category)) {
            category = null;
          }

          filterLibraries(category, filterField.filters);
        }
      });
    }
    
    dialog.setMinimumSize(new Dimension(550, 400));
  }",True
24,updateCategoryChooser(),Method,,,"javax.swing.JComboBox+removeAllItems() javax.swing.JComboBox+removeAllItems() java.util.ArrayList+ArrayList(Collection) processing.app.ContributionListing+getCategories() processing.app.ContributionListing+getCategories() java.util.Collections+sort(List) java.util.Collections+sort(List) java.util.ArrayList+add(int,E) java.util.ArrayList+add(int,E) javax.swing.JComboBox+addItem(E) javax.swing.JComboBox+addItem(E)",processing.app.ContributionManager+categoryChooser processing.app.ContributionManager+categoryChooser processing.app.ContributionManager+contribListing processing.app.ContributionManager+ANY_CATEGORY processing.app.ContributionManager+categoryChooser,403,13,2,,"private void updateCategoryChooser() {
    if (categoryChooser == null)
      return;
    
    ArrayList<String> categories;
    categoryChooser.removeAllItems();
    categories = new ArrayList<String>(contribListing.getCategories());
    Collections.sort(categories);
    categories.add(0, ContributionManager.ANY_CATEGORY);
    for (String s : categories) {
      categoryChooser.addItem(s);
    }
  }",True
25,registerDisposeListeners(),Method,showFrame(Editor),,java.awt.Window+addWindowListener(WindowListener) java.awt.Window+addWindowListener(WindowListener) +() +windowClosing(WindowEvent),processing.app.ContributionManager+dialog,841,26,2,,"private void registerDisposeListeners() {
    dialog.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        disposeFrame();
      }
    });
    ActionListener disposer = new ActionListener() {
      public void actionPerformed(ActionEvent actionEvent) {
        disposeFrame();
      }
    };
    Base.registerWindowCloseKeys(dialog.getRootPane(), disposer);
    
    // handle window closing commands for ctrl/cmd-W or hitting ESC.
    
    dialog.getContentPane().addKeyListener(new KeyAdapter() {
      public void keyPressed(KeyEvent e) {
        //System.out.println(e);
        KeyStroke wc = Base.WINDOW_CLOSE_KEYSTROKE;
        if ((e.getKeyCode() == KeyEvent.VK_ESCAPE) ||
            (KeyStroke.getKeyStrokeForEvent(e).equals(wc))) {
          disposeFrame();
        }
      }
    });
  }",True
26,"filterLibraries(String,List<String>)",Method,FilterField.applyFilter(),,"processing.app.ContributionListing+getFilteredLibraryList(String,List<String>) processing.app.ContributionListing+getFilteredLibraryList(String,List<String>) processing.app.ContributionListPanel+filterLibraries(List<Contribution>) processing.app.ContributionListPanel+filterLibraries(List<Contribution>)",processing.app.ContributionManager+contribListing processing.app.ContributionManager+contributionListPanel,246,7,1,,"public void filterLibraries(String category, List<String> filters) {

    List<Contribution> filteredLibraries = contribListing
        .getFilteredLibraryList(category, filters);

    contributionListPanel.filterLibraries(filteredLibraries);
  }",True
27,updateContributionListing(),Method,,,processing.app.Editor+getMode() processing.app.Editor+getMode() processing.app.LibraryCompilation+list(ArrayList<Library>) processing.app.LibraryCompilation+list(ArrayList<Library>) java.util.ArrayList+iterator() java.util.ArrayList+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.io.File+equals(Object) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+equals(Object) java.io.File+getParentFile() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+getParentFile() java.util.Iterator+remove() java.util.Iterator+remove() java.util.ArrayList+ArrayList() java.util.ArrayList+addAll(Collection) java.util.ArrayList+addAll(Collection) java.util.ArrayList+addAll(Collection) java.util.ArrayList+addAll(Collection) java.util.ArrayList+addAll(Collection) java.util.ArrayList+addAll(Collection) processing.app.ContributionListing+updateInstalledList(List<Contribution>) processing.app.ContributionListing+updateInstalledList(List<Contribution>),processing.app.ContributionManager+editor processing.app.Mode+contribLibraries processing.app.ContributionManager+editor processing.app.Mode+contribLibraries processing.app.ContributionManager+editor processing.app.Editor+contribTools processing.app.ContributionManager+contribListing,886,25,4,,"protected void updateContributionListing() {
    if (editor == null)
      return;
    
    ArrayList<Library> libraries = editor.getMode().contribLibraries;
    ArrayList<LibraryCompilation> compilations = LibraryCompilation.list(libraries);

    // Remove libraries from the list that are part of a compilations
    for (LibraryCompilation compilation : compilations) {
      Iterator<Library> it = libraries.iterator();
      while (it.hasNext()) {
        Library current = it.next();
        if (compilation.getFolder().equals(current.getFolder().getParentFile())) {
          it.remove();
        }
      }
    }
    
    ArrayList<Contribution> contributions = new ArrayList<Contribution>();
    contributions.addAll(editor.contribTools);
    contributions.addAll(libraries);
    contributions.addAll(compilations);
    
    contribListing.updateInstalledList(contributions);
  }",True
28,"removeContribution(InstalledContribution,ProgressMonitor)",Method,,processing.app.ContributionListPanel+ContributionPanel.actionPerformed(ActionEvent),processing.app.NullProgressMonitor+NullProgressMonitor() java.lang.Thread+start() java.lang.Thread+Thread(Runnable) +() +run(),,1972,57,1,"/** 
 * Non-blocking call to remove a contribution in a new thread.
 */
","/**
   * Non-blocking call to remove a contribution in a new thread.
   */
  public void removeContribution(final InstalledContribution contribution,
                                 ProgressMonitor pm) {
    if (contribution == null)
      return;
    
    final ProgressMonitor progressMonitor = pm != null ? pm : new NullProgressMonitor();
      
    new Thread(new Runnable() {
      
      public void run() {
        progressMonitor.startTask(""Removing"", ProgressMonitor.UNKNOWN);

        boolean doBackup = Preferences.getBoolean(""contribution.backup.on_remove"");
        if (ContributionManager.requiresRestart(contribution)) {
          
          if (!doBackup || (doBackup && backupContribution(contribution, false))) {
            if (ContributionManager.flagForDeletion(contribution)) {
              contribListing.replaceContribution(contribution, contribution);
            }
          }
        } else {
          boolean success = false;
          if (doBackup) {
            success = backupContribution(contribution, true);
          } else {
            Base.removeDir(contribution.getFolder());
            success = !contribution.getFolder().exists();
          }
          
          if (success) {
            Contribution advertisedVersion = contribListing
                .getAdvertisedContribution(contribution);

            if (advertisedVersion == null) {
              contribListing.removeContribution(contribution);
            } else {
              contribListing.replaceContribution(contribution,
                                                 advertisedVersion);
            }
          } else {
            // There was a failure backing up the folder
            if (doBackup) {
              
            } else {
              statusBar.setErrorMessage(""Could not delete the contribution's files"");
            }
          }
        }
        refreshInstalled();
        progressMonitor.finished();
      }
    }).start();

  }",True
29,"downloadAndInstall(URL,AdvertisedContribution,JProgressMonitor,JProgressMonitor)",Method,,"processing.app.ContributionListPanel+ContributionPanel.installContribution(AdvertisedContribution,String)",processing.app.ContributionManager+getTemporaryFile(URL) processing.app.ContributionManager+getTemporaryFile(URL) java.lang.Thread+start() java.lang.Thread+Thread(Runnable) +() +run(),,1907,56,1,"/** 
 * Non-blocking call to download and install a contribution in a new thread.
 * @param url Direct link to the contribution.
 * @param toBeReplaced The Contribution that will be replaced by this library being installed (e.g. an advertised version of a contribution, or the old version of a contribution that is being updated). Must not be null.
 */
","/**
   * Non-blocking call to download and install a contribution in a new thread.
   * 
   * @param url
   *          Direct link to the contribution.
   * @param toBeReplaced
   *          The Contribution that will be replaced by this library being
   *          installed (e.g. an advertised version of a contribution, or the
   *          old version of a contribution that is being updated). Must not be
   *          null.
   */
  public void downloadAndInstall(final URL url,
                                 final AdvertisedContribution ad,
                                 final JProgressMonitor downloadProgressMonitor,
                                 final JProgressMonitor installProgressMonitor) {

    final File libDest = getTemporaryFile(url);

    new Thread(new Runnable() {

      public void run() {

        FileDownloader.downloadFile(url, libDest, downloadProgressMonitor);
        
        
        if (!downloadProgressMonitor.isCanceled() && !downloadProgressMonitor.isError()) {
          
          installProgressMonitor.startTask(""Installing"", ProgressMonitor.UNKNOWN);
  
          InstalledContribution contribution = null;
          switch (ad.getType()) {
          case LIBRARY:
            contribution = installLibrary(libDest, ad, false);
            break;
          case LIBRARY_COMPILATION:
            contribution = installLibraryCompilation(libDest);
            break;
          case TOOL:
            contribution = installTool(libDest, ad);
            break;
          }
  
          if (contribution != null) {
            // XXX contributionListing.getInformationFromAdvertised(contribution);
            // get the category at least
            contribListing.replaceContribution(ad, contribution);
            refreshInstalled();
          }
  
          dialog.pack();
          installProgressMonitor.finished();
        }
      }
    }).start();

  }",False
30,installLibraryCompilation(File),Method,,,"processing.app.ContributionManager+unzipFileToTemp(File) processing.app.ContributionManager+unzipFileToTemp(File) processing.app.LibraryCompilation+create(File) processing.app.LibraryCompilation+create(File) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() processing.app.Base+getSketchbookLibrariesFolder() processing.app.Editor+getBase() processing.app.Editor+getBase() processing.app.Base+getSketchbookLibrariesFolder() java.io.File+File(File,String) java.io.File+exists() java.io.File+exists() java.io.File+delete() java.io.File+delete() java.io.File+renameTo(File) java.io.File+renameTo(File) processing.app.LibraryCompilation+create(File) processing.app.LibraryCompilation+create(File)",processing.app.ContributionManager+statusBar processing.app.ContributionManager+DISCOVERY_NONE_FOUND_ERROR_MESSAGE processing.app.ContributionManager+editor,923,33,4,,"protected LibraryCompilation installLibraryCompilation(File f) {
    File parentDir = unzipFileToTemp(f);
    
    LibraryCompilation compilation = LibraryCompilation.create(parentDir);

    if (compilation == null) {
      statusBar.setErrorMessage(DISCOVERY_NONE_FOUND_ERROR_MESSAGE);
      return null;
    }
      
    String folderName = compilation.getName();
    
    File libraryDestination = editor.getBase().getSketchbookLibrariesFolder();
    File dest = new File(libraryDestination, folderName);
    
    // XXX: Check for conflicts with other library names, etc.
    boolean errorEncountered = false;
    if (dest.exists()) {
      if (!dest.delete()) {
        // Problem
        errorEncountered = true;
      }
    }
    
    if (!errorEncountered) {
      // Install it, return it
      if (parentDir.renameTo(dest)) {
        return LibraryCompilation.create(dest);
      }
    }
    
    return null;
  }",False
31,"confirmAndInstallLibrary(Editor,File)",Method,,processing.app.Base+handleConfirmAndInstallLibrary(File),"processing.app.Base+showYesNoQuestion(Frame,String,String,String) processing.app.Base+showYesNoQuestion(Frame,String,String,String) java.io.File+getName() java.io.File+getName() processing.app.ContributionManager+installLibrary(File,AdvertisedContribution,boolean) processing.app.ContributionManager+installLibrary(File,AdvertisedContribution,boolean)",processing.app.ContributionManager+editor processing.app.ContributionManager+editor processing.app.ContributionManager+editor processing.app.ContributionManager+editor processing.app.ContributionManager+DOUBLE_CLICK_SECONDARY javax.swing.JOptionPane+YES_OPTION,452,13,1,,"public Library confirmAndInstallLibrary(Editor editor, File libFile) {
    this.editor = editor;
    
    int result = Base.showYesNoQuestion(this.editor, ""Install"",
                             ""Install libraries from "" + libFile.getName() + ""?"",
                             ContributionManager.DOUBLE_CLICK_SECONDARY);
    
    if (result == JOptionPane.YES_OPTION) {
      return installLibrary(libFile, null, true);
    }
    
    return null;
  }",False
32,unzipFileToTemp(File),Method,"installLibraryCompilation(File) installTool(File,AdvertisedContribution) installLibrary(File,AdvertisedContribution,boolean)",,"processing.app.ContributionManager+getFileName(File) processing.app.ContributionManager+getFileName(File) processing.app.Base+createTempFolder(String,String) processing.app.Base+createTempFolder(String,String) java.io.File+File(File,String) java.io.File+mkdirs() java.io.File+mkdirs() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager+unzip(File,File) processing.app.ContributionManager+unzip(File,File)",processing.app.ContributionManager+statusBar,1049,30,0,"/** 
 * Creates a temporary folder and unzips a file to a subdirectory of the temp folder. The subdirectory is the only file of the tempo folder. e.g. if the contents of foo.zip are /hello and /world, then the resulting files will be /tmp/foo9432423uncompressed/foo/hello /tmp/foo9432423uncompress/foo/world ...and ""/tmp/id9432423uncompress/foo/"" will be returned.
 * @return the folder where the zips contents have been unzipped to (thesubdirectory of the temp folder).
 */
","/**
   * Creates a temporary folder and unzips a file to a subdirectory of the temp
   * folder. The subdirectory is the only file of the tempo folder.
   * 
   * e.g. if the contents of foo.zip are /hello and /world, then the resulting
   * files will be
   *     /tmp/foo9432423uncompressed/foo/hello
   *     /tmp/foo9432423uncompress/foo/world
   * ...and ""/tmp/id9432423uncompress/foo/"" will be returned.
   * 
   * @return the folder where the zips contents have been unzipped to (the
   *         subdirectory of the temp folder).
   */
  File unzipFileToTemp(File libFile) {
    
    String fileName = ContributionManager.getFileName(libFile);
    File tmpFolder = null;
    
    try {
      tmpFolder = Base.createTempFolder(fileName, ""uncompressed"");
      tmpFolder = new File(tmpFolder, fileName);
      tmpFolder.mkdirs();
    } catch (IOException e) {
      statusBar.setErrorMessage(""Could not create temp folder to uncompressed zip file."");
    }
    
    ContributionManager.unzip(libFile, tmpFolder);
    
    return tmpFolder;
  }",False
33,getTemporaryFile(URL),Method,"downloadAndInstall(URL,AdvertisedContribution,JProgressMonitor,JProgressMonitor)",,"processing.app.Base+createTempFolder(String,String) processing.app.Base+createTempFolder(String,String) java.lang.String+split(String) java.net.URL+getFile() java.net.URL+getFile() java.lang.String+split(String) java.io.File+File(File,String) java.io.File+setWritable(boolean) java.io.File+setWritable(boolean) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String)",processing.app.ContributionManager+statusBar,458,15,4,,"protected File getTemporaryFile(URL url) {
    try {
      File tmpFolder = Base.createTempFolder(""library"", ""download"");
      
      String[] segments = url.getFile().split(""/"");
      File libFile = new File(tmpFolder, segments[segments.length - 1]);
      libFile.setWritable(true);
      
      return libFile;
    } catch (IOException e) {
      statusBar.setErrorMessage(""Could not create a temp folder for download."");
    }
    
    return null;
  }",False
34,getFileName(File),Method,unzipFileToTemp(File),,"java.io.File+getPath() java.io.File+getPath() java.lang.String+lastIndexOf(int) java.lang.String+lastIndexOf(int) java.lang.String+substring(int) java.lang.String+substring(int) java.lang.String+lastIndexOf(int) java.lang.String+lastIndexOf(int) java.lang.String+substring(int,int) java.lang.String+substring(int,int)",java.io.File+separatorChar,667,25,12,"/** 
 * Returns the name of a file without its path or extension. For example, ""/path/to/helpfullib.zip"" returns ""helpfullib"" ""helpfullib-0.1.1.plb"" returns ""helpfullib-0.1.1""
 */
","/**
   * Returns the name of a file without its path or extension.
   * 
   * For example,
   *   ""/path/to/helpfullib.zip"" returns ""helpfullib""
   *   ""helpfullib-0.1.1.plb"" returns ""helpfullib-0.1.1""
   */
  protected static String getFileName(File libFile) {
    String path = libFile.getPath();
    int lastSeparator = path.lastIndexOf(File.separatorChar);
    
    String fileName;
    if (lastSeparator != -1) {
      fileName = path.substring(lastSeparator + 1);
    } else {
      fileName = path;
    }
    
    int lastDot = fileName.lastIndexOf('.');
    if (lastDot != -1) {
      return fileName.substring(0, lastDot);
    }
    
    return fileName;
  }",False
35,"installTool(File,AdvertisedContribution)",Method,,,"processing.app.ContributionManager+unzipFileToTemp(File) processing.app.ContributionManager+unzipFileToTemp(File) processing.app.ToolContribution+list(File,boolean) processing.app.ToolContribution+list(File,boolean) java.util.ArrayList+isEmpty() java.util.ArrayList+isEmpty() processing.app.ToolContribution+list(File,boolean) processing.app.ToolContribution+list(File,boolean) java.io.File+getParentFile() java.io.File+getParentFile() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) java.io.File+File(File,String) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() processing.app.ContributionManager+writePropertiesFile(File,AdvertisedContribution) processing.app.ContributionManager+writePropertiesFile(File,AdvertisedContribution) processing.app.ContributionManager+installTool(ToolContribution) processing.app.ContributionManager+installTool(ToolContribution) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) java.util.ArrayList+isEmpty() java.util.ArrayList+isEmpty() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String)",processing.app.ContributionManager+statusBar processing.app.ContributionManager+ERROR_OVERWRITING_PROPERTIES_MESSAGE processing.app.ContributionManager+statusBar processing.app.ContributionManager+DISCOVERY_INTERNAL_ERROR_MESSAGE processing.app.ContributionManager+statusBar,1478,34,4,,"protected ToolContribution installTool(File zippedToolFile,
                                         AdvertisedContribution ad) {
    
    File tempDir = unzipFileToTemp(zippedToolFile);
    
    ArrayList<ToolContribution> discoveredTools = ToolContribution.list(tempDir, false);
    if (discoveredTools.isEmpty()) {
      // Sometimes tool authors place all their folders in the base
      // directory of a zip file instead of in single folder as the
      // guidelines suggest. If this is the case, we might be able to find the
      // library by stepping up a directory and searching for libraries again.
      discoveredTools = ToolContribution.list(tempDir.getParentFile(), false);
    }
    
    if (discoveredTools != null && discoveredTools.size() == 1) {
      ToolContribution discoveredTool = discoveredTools.get(0);
      File propFile = new File(discoveredTool.getFolder(), ""tool.properties"");
      
      if (ad == null || writePropertiesFile(propFile, ad)) {
        return installTool(discoveredTool);        
      } else {
        statusBar.setErrorMessage(ERROR_OVERWRITING_PROPERTIES_MESSAGE);
      }
    } else {
      // Diagnose the problem and notify the user
      if (discoveredTools == null || discoveredTools.isEmpty()) {
        statusBar.setErrorMessage(DISCOVERY_INTERNAL_ERROR_MESSAGE);
      } else {
        statusBar.setErrorMessage(""There were multiple tools in the file, so we're ignoring it."");
      }
    }
    
    return null;
  }",False
36,installTool(ToolContribution),Method,"installTool(File,AdvertisedContribution)",,"java.io.File+getName() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+getName() processing.app.Base+getSketchbookToolsFolder() processing.app.Editor+getBase() processing.app.Editor+getBase() processing.app.Base+getSketchbookToolsFolder() java.io.File+File(File,String) java.io.File+exists() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+exists() java.io.File+equals(Object) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+equals(Object) processing.app.ContributionManager+backupContribution(InstalledContribution,boolean) processing.app.ContributionManager+backupContribution(InstalledContribution,boolean) java.io.File+renameTo(File) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+renameTo(File) processing.app.ToolContribution+getTool(File) processing.app.ToolContribution+getTool(File) processing.app.ToolContribution+initializeToolClass() processing.app.ToolContribution+initializeToolClass() java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName()",processing.app.ContributionManager+editor processing.app.Editor+contribTools processing.app.ContributionManager+editor processing.app.ContributionManager+statusBar,1379,39,4,,"protected ToolContribution installTool(ToolContribution newTool) {
    
    ArrayList<ToolContribution> oldTools = editor.contribTools;
    
    String toolFolderName = newTool.getFolder().getName();
    
    File toolDestination = editor.getBase().getSketchbookToolsFolder();
    File newToolDest = new File(toolDestination, toolFolderName);
    
    for (ToolContribution oldTool : oldTools) {
      
      // XXX: Handle other cases when installing tools.
      //   -What if a library by the same name is already installed?
      //   -What if newLibDest exists, but isn't used by an existing tools?
      if (oldTool.getFolder().exists() && oldTool.getFolder().equals(newToolDest)) {
        
        // XXX: We can't replace stuff, soooooo.... do something different
        if (!backupContribution(oldTool, false)) {
          return null;
        }
      }
    }
    
    // Move newTool to the sketchbook library folder
    if (newTool.getFolder().renameTo(newToolDest)) {
      ToolContribution movedTool = ToolContribution.getTool(newToolDest);
      try {
        movedTool.initializeToolClass();
        return movedTool;
      } catch (Exception e) {
        e.printStackTrace();
      }
    } else {
      statusBar.setErrorMessage(""Could not move tool \"""" + newTool.getName()
                                + ""\"" to sketchbook."");
    }
    
    return null;
  }",False
37,"writePropertiesFile(File,AdvertisedContribution)",Method,"installTool(File,AdvertisedContribution) installLibrary(File,AdvertisedContribution,boolean)",,java.io.File+delete() java.io.File+delete() java.io.File+createNewFile() java.io.File+createNewFile() java.io.File+setWritable(boolean) java.io.File+setWritable(boolean) java.io.BufferedWriter+BufferedWriter(Writer) java.io.FileWriter+FileWriter(File) java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getName() processing.app.ContributionListing.AdvertisedContribution+getName() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getCategory() processing.app.ContributionListing.AdvertisedContribution+getCategory() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getAuthorList() processing.app.ContributionListing.AdvertisedContribution+getAuthorList() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getUrl() processing.app.ContributionListing.AdvertisedContribution+getUrl() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getSentence() processing.app.ContributionListing.AdvertisedContribution+getSentence() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getParagraph() processing.app.ContributionListing.AdvertisedContribution+getParagraph() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getVersion() processing.app.ContributionListing.AdvertisedContribution+getVersion() java.io.Writer+write(String) java.io.Writer+write(String) processing.app.ContributionListing.AdvertisedContribution+getPrettyVersion() processing.app.ContributionListing.AdvertisedContribution+getPrettyVersion() java.io.BufferedWriter+close() java.io.BufferedWriter+close(),,874,23,4,,"protected boolean writePropertiesFile(File propFile, AdvertisedContribution ad) {
    try {
      if (propFile.delete() && propFile.createNewFile() && propFile.setWritable(true)) {
        BufferedWriter bw = new BufferedWriter(new FileWriter(propFile));
        
        bw.write(""name="" + ad.getName() + ""\n"");
        bw.write(""category="" + ad.getCategory() + ""\n"");
        bw.write(""authorList="" + ad.getAuthorList() + ""\n"");
        bw.write(""url="" + ad.getUrl() + ""\n"");
        bw.write(""sentence="" + ad.getSentence() + ""\n"");
        bw.write(""paragraph="" + ad.getParagraph() + ""\n"");
        bw.write(""version="" + ad.getVersion() + ""\n"");
        bw.write(""prettyVersion="" + ad.getPrettyVersion() + ""\n"");
        
        bw.close();
      }
      return true;
    } catch (FileNotFoundException e) {
    } catch (IOException e) {
    }
    
    return false;
  }",False
38,"installLibrary(File,AdvertisedContribution,boolean)",Method,"confirmAndInstallLibrary(Editor,File)",,"processing.app.ContributionManager+unzipFileToTemp(File) processing.app.ContributionManager+unzipFileToTemp(File) processing.app.Library+list(File) processing.app.Library+list(File) java.util.ArrayList+isEmpty() java.util.ArrayList+isEmpty() processing.app.Library+list(File) processing.app.Library+list(File) java.io.File+getParentFile() java.io.File+getParentFile() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) java.io.File+File(File,String) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() processing.app.ContributionManager+writePropertiesFile(File,AdvertisedContribution) processing.app.ContributionManager+writePropertiesFile(File,AdvertisedContribution) processing.app.ContributionManager+installLibrary(Library,boolean) processing.app.ContributionManager+installLibrary(Library,boolean) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) java.util.ArrayList+isEmpty() java.util.ArrayList+isEmpty() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String)",processing.app.ContributionManager+statusBar processing.app.ContributionManager+ERROR_OVERWRITING_PROPERTIES_MESSAGE processing.app.ContributionManager+statusBar processing.app.ContributionManager+DISCOVERY_INTERNAL_ERROR_MESSAGE processing.app.ContributionManager+statusBar processing.app.ContributionManager+DISCOVERY_NONE_FOUND_ERROR_MESSAGE processing.app.ContributionManager+statusBar processing.app.ContributionManager+statusBar processing.app.ContributionManager+DISCOVERY_INTERNAL_ERROR_MESSAGE,2257,51,4,"/** 
 * @param libFile a zip file containing the library to install
 * @param ad the advertised version of this library, if it was downloaded through the Contribution Manager, or null. This is used to replace the library.properties file in the zip
 * @param confirmReplace true to open a dialog asking the user to confirm removing/moving the library when a library by the same name already exists
 * @return
 */
","/**
   * @param libFile
   *          a zip file containing the library to install
   * @param ad
   *          the advertised version of this library, if it was downloaded
   *          through the Contribution Manager, or null. This is used to replace
   *          the library.properties file in the zip
   * @param confirmReplace
   *          true to open a dialog asking the user to confirm removing/moving
   *          the library when a library by the same name already exists
   * @return
   */
  protected Library installLibrary(File libFile, AdvertisedContribution ad,
                                   boolean confirmReplace) {
    File tempDir = unzipFileToTemp(libFile);
    
    try {
      ArrayList<Library> discoveredLibs = Library.list(tempDir);
      if (discoveredLibs.isEmpty()) {
        // Sometimes library authors place all their folders in the base
        // directory of a zip file instead of in single folder as the
        // guidelines suggest. If this is the case, we might be able to find the
        // library by stepping up a directory and searching for libraries again.
        discoveredLibs = Library.list(tempDir.getParentFile());
      }
      
      if (discoveredLibs != null && discoveredLibs.size() == 1) {
        Library discoveredLib = discoveredLibs.get(0);
        File propFile = new File(discoveredLib.getFolder(), ""library.properties"");
        
        if (ad == null || writePropertiesFile(propFile, ad)) {
          return installLibrary(discoveredLib, confirmReplace);
        } else {
          statusBar.setErrorMessage(ERROR_OVERWRITING_PROPERTIES_MESSAGE);
        }
      } else {
        // Diagnose the problem and notify the user
        if (discoveredLibs == null) {
          statusBar.setErrorMessage(ContributionManager.DISCOVERY_INTERNAL_ERROR_MESSAGE);
        } else if (discoveredLibs.isEmpty()) {
          statusBar.setErrorMessage(ContributionManager.DISCOVERY_NONE_FOUND_ERROR_MESSAGE);
        } else {
          statusBar.setErrorMessage(""There were multiple libraries in the file, so we're ignoring it."");
        }
      }
    } catch (IOException ioe) {
      statusBar.setErrorMessage(ContributionManager.DISCOVERY_INTERNAL_ERROR_MESSAGE);
    }
    
    return null;
  }",False
39,"installLibrary(Library,boolean)",Method,"installLibrary(File,AdvertisedContribution,boolean)",,"processing.app.Editor+getMode() processing.app.Editor+getMode() java.io.File+getName() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+getName() processing.app.Base+getSketchbookLibrariesFolder() processing.app.Editor+getBase() processing.app.Editor+getBase() processing.app.Base+getSketchbookLibrariesFolder() java.io.File+File(File,String) java.io.File+exists() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+exists() java.io.File+equals(Object) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+equals(Object) processing.app.Preferences+getBoolean(String) processing.app.Preferences+getBoolean(String) processing.app.Base+showYesNoQuestion(Frame,String,String,String) processing.app.Base+showYesNoQuestion(Frame,String,String,String) processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() processing.app.ContributionManager+backupContribution(InstalledContribution,boolean) processing.app.ContributionManager+backupContribution(InstalledContribution,boolean) processing.app.Base+showYesNoQuestion(Frame,String,String,String) processing.app.Base+showYesNoQuestion(Frame,String,String,String) processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName() java.io.File+delete() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+delete() processing.app.ContributionManager+backupContribution(InstalledContribution,boolean) processing.app.ContributionManager+backupContribution(InstalledContribution,boolean) java.io.File+delete() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+delete() java.io.File+renameTo(File) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+renameTo(File) processing.app.Library+Library(File,String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.contribution.InstalledContribution+getName() processing.app.contribution.InstalledContribution+getName()",processing.app.Mode+contribLibraries processing.app.ContributionManager+editor processing.app.Mode+contribLibraries processing.app.ContributionManager+editor processing.app.ContributionManager+editor javax.swing.JOptionPane+YES_OPTION processing.app.ContributionManager+editor javax.swing.JOptionPane+YES_OPTION processing.app.ContributionManager+statusBar,3013,69,4,"/** 
 * @param confirmReplace if true and the library is already installed, opens a prompt to ask the user if it's okay to replace the library. If false, the library is always replaced with the new copy.
 */
","/**
   * @param confirmReplace
   *          if true and the library is already installed, opens a prompt to
   *          ask the user if it's okay to replace the library. If false, the
   *          library is always replaced with the new copy.
   */
  protected Library installLibrary(Library newLib, boolean confirmReplace) {
    
    ArrayList<Library> oldLibs = editor.getMode().contribLibraries;
    
    String libFolderName = newLib.getFolder().getName();
    
    File libraryDestination = editor.getBase().getSketchbookLibrariesFolder();
    File newLibDest = new File(libraryDestination, libFolderName);
    
    for (Library oldLib : oldLibs) {
      
      // XXX: Handle other cases when installing libraries.
      //   -What if a library by the same name is already installed?
      //   -What if newLibDest exists, but isn't used by an existing library?
      if (oldLib.getFolder().exists() && oldLib.getFolder().equals(newLibDest)) {
        
        int result = 0;
        boolean doBackup = Preferences.getBoolean(""contribution.backup.on_install"");
        if (confirmReplace) {
          if (doBackup) {
            result = Base.showYesNoQuestion(editor, ""Replace"",
                   ""Replace pre-existing \"""" + oldLib.getName() + ""\"" library?"",
                   ""A pre-existing copy of the \"""" + oldLib.getName() + ""\"" library<br>""+
                   ""has been found in your sketchbook. Clicking ‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•Yes‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚âà√¨‚àö√ë<br>""+
                   ""will move the existing library to a backup folder<br>"" +
                   "" in <i>libraries/old</i> before replacing it."");
            if (result != JOptionPane.YES_OPTION || !backupContribution(oldLib, true)) {
              return null;
            }
          } else {
            result = Base.showYesNoQuestion(editor, ""Replace"",
                   ""Replace pre-existing \"""" + oldLib.getName() + ""\"" library?"",
                   ""A pre-existing copy of the \"""" + oldLib.getName() + ""\"" library<br>""+
                   ""has been found in your sketchbook. Clicking ‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√Ñ√∂‚àö‚Ä†¬¨¬•Yes‚Äö√Ñ√∂‚àö√ë‚àö‚àÇ‚Äö√†√∂‚àö√´‚Äö√†√∂‚Äö√†√á‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚Äö√†√∂‚àö¬¥‚Äö√Ñ√∂‚àö‚Ä†‚àö‚àÇ‚âà√¨‚àö√ë<br>""+
                   ""will permanently delete this library and all of its contents<br>""+
                   ""before replacing it."");
            if (result != JOptionPane.YES_OPTION || !oldLib.getFolder().delete()) {
              return null;
            }
          }
        } else {
          if (doBackup && !backupContribution(oldLib, true)
              || !doBackup && !oldLib.getFolder().delete()) {
            return null;
          }
        }
      }
    }
    
    // Move newLib to the sketchbook library folder
    if (newLib.getFolder().renameTo(newLibDest)) {
      return new Library(newLibDest, null);
//      try {
//        FileUtils.copyDirectory(newLib.folder, libFolder);
//        FileUtils.deleteQuietly(newLib.folder);
//        newLib.folder = libFolder;
//      } catch (IOException e) {
    } else {
      statusBar.setErrorMessage(""Could not move library \""""
          + newLib.getName() + ""\"" to sketchbook."");
      return null;
    }
  }",False
40,refreshInstalled(),Method,,,processing.app.Mode+rebuildImportMenu() processing.app.Editor+getMode() processing.app.Editor+getMode() processing.app.Mode+rebuildImportMenu() processing.app.Editor+rebuildToolMenu() processing.app.Editor+rebuildToolMenu(),processing.app.ContributionManager+editor processing.app.ContributionManager+editor,108,4,1,,"public void refreshInstalled() {
    editor.getMode().rebuildImportMenu();
    editor.rebuildToolMenu();
  }",False
41,"backupContribution(InstalledContribution,boolean)",Method,"installTool(ToolContribution) installLibrary(Library,boolean) installLibrary(Library,boolean)",,"processing.app.contribution.Contribution+getType() processing.app.contribution.Contribution+getType() processing.app.ContributionManager+createLibraryBackupFolder() processing.app.ContributionManager+createLibraryBackupFolder() processing.app.ContributionManager+createToolBackupFolder() processing.app.ContributionManager+createToolBackupFolder() java.io.File+getName() processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+getName() java.text.DateFormat+format(Date) java.text.SimpleDateFormat+SimpleDateFormat(String) java.text.DateFormat+format(Date) java.util.Date+Date() processing.app.ContributionManager+getUniqueName(File,String) processing.app.ContributionManager+getUniqueName(File,String) java.io.File+renameTo(File) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+renameTo(File) processing.app.Base+copyDir(File,File) processing.app.Base+copyDir(File,File) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String)",processing.app.ContributionManager+statusBar,1577,51,2,"/** 
 * Moves the given contribution to a backup folder.
 * @param doDeleteOriginal true if the file should be moved to the directory, false if it should instead be copied, leaving the original in place
 */
","/**
   * Moves the given contribution to a backup folder.
   * @param doDeleteOriginal
   *          true if the file should be moved to the directory, false if it
   *          should instead be copied, leaving the original in place
   */
  private boolean backupContribution(InstalledContribution contribution,
                                     boolean doDeleteOriginal) {
    
    File backupFolder = null;
    
    switch (contribution.getType()) {
    case LIBRARY:
    case LIBRARY_COMPILATION:
      backupFolder = createLibraryBackupFolder();
      break;
    case MODE:
      break;
    case TOOL:
      backupFolder = createToolBackupFolder();
      break;
    }
    
    if (backupFolder == null) return false;
    
    String libFolderName = contribution.getFolder().getName();
    
    String prefix = new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());
    final String backupName = prefix + ""_"" + libFolderName;
    File backupSubFolder = ContributionManager.getUniqueName(backupFolder, backupName);
    
//    try {
//      FileUtils.moveDirectory(lib.folder, backupFolderForLib);
//      return true;
    
    boolean success = false;
    if (doDeleteOriginal) {
      success = contribution.getFolder().renameTo(backupSubFolder);
    } else {
      try {
        Base.copyDir(contribution.getFolder(), backupSubFolder);
        success = true;
      } catch (IOException e) {
      }
    }
//    } catch (IOException e) {
    if (!success) {
      statusBar.setErrorMessage(""Could not move contribution to backup folder."");
    }
    return success;
  }",False
42,createLibraryBackupFolder(),Method,"backupContribution(InstalledContribution,boolean)",,"java.io.File+File(File,String) processing.app.Base+getSketchbookLibrariesFolder() processing.app.Editor+getBase() processing.app.Editor+getBase() processing.app.Base+getSketchbookLibrariesFolder() java.io.File+exists() java.io.File+exists() java.io.File+isDirectory() java.io.File+isDirectory() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String)",processing.app.ContributionManager+editor processing.app.ContributionManager+statusBar,434,14,2,,"private File createLibraryBackupFolder() {
    
    File libraryBackupFolder = new File(editor.getBase()
        .getSketchbookLibrariesFolder(), ""old"");

    if (!libraryBackupFolder.exists() || !libraryBackupFolder.isDirectory()) {
      if (!libraryBackupFolder.mkdirs()) {
        statusBar.setErrorMessage(""Could not create backup folder for library."");
        return null;
      }
    }
    
    return libraryBackupFolder;
  }",False
43,createToolBackupFolder(),Method,"backupContribution(InstalledContribution,boolean)",,"java.io.File+File(File,String) processing.app.Base+getSketchbookToolsFolder() processing.app.Editor+getBase() processing.app.Editor+getBase() processing.app.Base+getSketchbookToolsFolder() java.io.File+exists() java.io.File+exists() java.io.File+isDirectory() java.io.File+isDirectory() java.io.File+mkdirs() java.io.File+mkdirs() processing.app.ContributionManager.StatusPanel+setErrorMessage(String) processing.app.ContributionManager.StatusPanel+setErrorMessage(String)",processing.app.ContributionManager+editor processing.app.ContributionManager+statusBar,414,14,2,,"private File createToolBackupFolder() {
    
    File toolsBackupFolder = new File(editor.getBase()
        .getSketchbookToolsFolder(), ""old"");

    if (!toolsBackupFolder.exists() || !toolsBackupFolder.isDirectory()) {
      if (!toolsBackupFolder.mkdirs()) {
        statusBar.setErrorMessage(""Could not create backup folder for tool."");
        return null;
      }
    }
    
    return toolsBackupFolder;
  }",False
44,"getUniqueName(File,String)",Method,"backupContribution(InstalledContribution,boolean)",,"java.io.File+File(File,String) java.io.File+exists() java.io.File+exists()",,637,22,9,"/** 
 * Returns a file in the parent folder that does not exist yet. If parent/fileName already exists, this will look for parent/fileName(2) then parent/fileName(3) and so forth.
 * @return a file that does not exist yet
 */
","/**
   * Returns a file in the parent folder that does not exist yet. If
   * parent/fileName already exists, this will look for parent/fileName(2)
   * then parent/fileName(3) and so forth.
   * 
   * @return a file that does not exist yet
   */
  public static File getUniqueName(File parentFolder, String fileName) {
    File backupFolderForLib;
    int i = 1;
    do {
      String folderName = fileName;
      if (i >= 2) {
        folderName += ""("" + i + "")"";
      }
      i++;
      
      backupFolderForLib = new File(parentFolder, folderName);
    } while (backupFolderForLib.exists());
    
    return backupFolderForLib;
  }",False
45,"unzip(File,File)",Method,unzipFileToTemp(File),,"java.io.FileInputStream+FileInputStream(File) java.util.zip.CheckedInputStream+CheckedInputStream(InputStream,Checksum) java.util.zip.Adler32+Adler32() java.util.zip.ZipInputStream+ZipInputStream(InputStream) java.io.BufferedInputStream+BufferedInputStream(InputStream) java.util.zip.ZipInputStream+getNextEntry() java.util.zip.ZipInputStream+getNextEntry() java.io.File+File(File,String) java.util.zip.ZipEntry+getName() java.util.zip.ZipEntry+getName() java.util.zip.ZipEntry+isDirectory() java.util.zip.ZipEntry+isDirectory() java.io.File+mkdirs() java.io.File+mkdirs() java.io.File+createNewFile() java.io.File+createNewFile() processing.app.ContributionManager+unzipEntry(ZipInputStream,File) processing.app.ContributionManager+unzipEntry(ZipInputStream,File) java.lang.Throwable+printStackTrace() java.lang.Throwable+printStackTrace()",,685,19,9,,"public static void unzip(File zipFile, File dest) {
    try {
      FileInputStream fis = new FileInputStream(zipFile);
      CheckedInputStream checksum = new CheckedInputStream(fis, new Adler32());
      ZipInputStream zis = new ZipInputStream(new BufferedInputStream(checksum));
      ZipEntry next = null;
      while ((next = zis.getNextEntry()) != null) {
        File currentFile = new File(dest, next.getName());
        if (next.isDirectory()) {
          currentFile.mkdirs();
        } else {
          currentFile.createNewFile();
          ContributionManager.unzipEntry(zis, currentFile);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }",False
46,"unzipEntry(ZipInputStream,File)",Method,"unzip(File,File)",,"java.io.FileOutputStream+FileOutputStream(File) java.io.FilterInputStream+read(byte[]) java.io.FilterInputStream+read(byte[]) java.io.FileOutputStream+write(byte[],int,int) java.io.FileOutputStream+write(byte[],int,int) java.io.FileOutputStream+close() java.io.FileOutputStream+close()",,273,9,10,,"private static void unzipEntry(ZipInputStream zin, File f) throws IOException {
    FileOutputStream out = new FileOutputStream(f);
    byte[] b = new byte[512];
    int len = 0;
    while ((len = zin.read(b)) != -1) {
      out.write(b, 0, len);
    }
    out.close();
  }",False
47,setFilterText(String),Method,,processing.app.Base+handleShowUpdates(),java.lang.String+isEmpty() java.lang.String+isEmpty() javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) processing.app.ContributionManager.FilterField+applyFilter() processing.app.ContributionManager.FilterField+applyFilter(),processing.app.ContributionManager+filterField processing.app.ContributionManager+filterField processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager+filterField processing.app.ContributionManager+filterField processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager+filterField,294,11,1,,"public void setFilterText(String filter) {
    if (filter == null || filter.isEmpty()) {
      filterField.setText("""");
      filterField.isShowingHint = true;
    } else {
      filterField.setText(filter);
      filterField.isShowingHint = false;
    }
    filterField.applyFilter();
    
  }",True
48,FilterField,MemberClass,,,"processing.app.ContributionManager.FilterField+FilterField() java.util.ArrayList+ArrayList() java.awt.Component+addFocusListener(FocusListener) java.awt.Component+addFocusListener(FocusListener) +() +focusLost(FocusEvent) java.lang.String+isEmpty() javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText() java.lang.String+isEmpty() processing.app.ContributionManager.FilterField+updateStyle() processing.app.ContributionManager.FilterField+updateStyle() +focusGained(FocusEvent) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) processing.app.ContributionManager.FilterField+updateStyle() processing.app.ContributionManager.FilterField+updateStyle() javax.swing.text.Document+addDocumentListener(DocumentListener) javax.swing.text.JTextComponent+getDocument() javax.swing.text.JTextComponent+getDocument() javax.swing.text.Document+addDocumentListener(DocumentListener) +() +removeUpdate(DocumentEvent) processing.app.ContributionManager.FilterField+applyFilter() processing.app.ContributionManager.FilterField+applyFilter() +insertUpdate(DocumentEvent) processing.app.ContributionManager.FilterField+applyFilter() processing.app.ContributionManager.FilterField+applyFilter() +changedUpdate(DocumentEvent) processing.app.ContributionManager.FilterField+applyFilter() processing.app.ContributionManager.FilterField+applyFilter() processing.app.ContributionManager.FilterField+applyFilter() processing.app.ContributionManager.FilterField+getFilterText() processing.app.ContributionManager.FilterField+getFilterText() java.lang.String+toLowerCase() java.lang.String+toLowerCase() java.lang.String+replaceAll(String,String) java.lang.String+replaceAll(String,String) java.util.Arrays+asList(T[]) java.util.Arrays+asList(T[]) java.lang.String+split(String) java.lang.String+split(String) processing.app.ContributionManager+filterLibraries(String,List<String>) processing.app.ContributionManager+filterLibraries(String,List<String>) processing.app.ContributionManager.FilterField+getFilterText() javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText() processing.app.ContributionManager.FilterField+updateStyle() javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.JComponent+setForeground(Color) javax.swing.JComponent+setForeground(Color) javax.swing.JComponent+setForeground(Color) javax.swing.JComponent+setForeground(Color) javax.swing.UIManager+getColor(Object) javax.swing.UIManager+getColor(Object)",processing.app.ContributionManager.FilterField+filterHint processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager.FilterField+filters processing.app.ContributionManager.FilterField+filterHint processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager.FilterField+filters processing.app.ContributionManager+filterField processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager+filterField processing.app.ContributionManager+filterField processing.app.ContributionManager.FilterField+filters processing.app.ContributionManager+category processing.app.ContributionManager.FilterField+filters processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager.FilterField+isShowingHint processing.app.ContributionManager+filterField processing.app.ContributionManager.FilterField+filterHint java.awt.Color+gray,1954,76,0,,"class FilterField extends JTextField {
    
    final static String filterHint = ""Filter your search..."";

    boolean isShowingHint;
    
    List<String> filters;
    
    public FilterField () {
      super(filterHint);
      
      isShowingHint = true;
      
      filters = new ArrayList<String>();
      
      addFocusListener(new FocusListener() {
        
        public void focusLost(FocusEvent focusEvent) {
          if (filterField.getText().isEmpty()) {
            isShowingHint = true;
          }
          
          updateStyle();
        }
        
        public void focusGained(FocusEvent focusEvent) {
          if (isShowingHint) {
            isShowingHint = false;
            filterField.setText("""");
          }
          
          updateStyle();
        }
      });
      
      getDocument().addDocumentListener(new DocumentListener() {
        
        public void removeUpdate(DocumentEvent e) {
          applyFilter();
        }
        
        public void insertUpdate(DocumentEvent e) {
          applyFilter();
        }
        
        public void changedUpdate(DocumentEvent e) {
          applyFilter();
        }
      });
    }
    
    public void applyFilter() {
      String filter = filterField.getFilterText();
      filter = filter.toLowerCase();
      
      // Replace anything but 0-9, a-z, or : with a space
      filter = filter.replaceAll(""[^\\x30-\\x39^\\x61-\\x7a^\\x3a]"", "" "");
      filters = Arrays.asList(filter.split("" ""));
      filterLibraries(category, filters);
    }
    
    public String getFilterText() {
      return isShowingHint ? """" : getText();
    }

    public void updateStyle() {
      if (isShowingHint) {
        filterField.setText(filterHint);
        
        // setForeground(UIManager.getColor(""TextField.light"")); // too light
        setForeground(Color.gray);
      } else {
        setForeground(UIManager.getColor(""TextField.foreground""));
      }
    }
  }",True
49,hasAlreadyBeenOpened(),Method,,processing.app.UpdateCheck+updateCheck(),,processing.app.ContributionManager+dialog,70,3,1,,"public boolean hasAlreadyBeenOpened() {
    return dialog != null;
  }",True
50,getListing(),Method,,processing.app.ContributionListPanel+ContributionListPanel(ContributionManager) processing.app.ContributionListPanel+filterLibraries(List<Contribution>) processing.app.ContributionListPanel+ContributionPanel.actionPerformed(ActionEvent) processing.app.ContributionListPanel+ContributionPanel.actionPerformed(ActionEvent) processing.app.ContributionListPanel+ContributionPanel.setContribution(Contribution) processing.app.ContributionListPanel+ContributionPanel.setContribution(Contribution) processing.app.ContributionListPanel+ContributionPanel.setSelected(boolean),,processing.app.ContributionManager+contribListing,72,3,1,,"public ContributionListing getListing() {
    return contribListing;
  }",True
51,flagForDeletion(InstalledContribution),Method,,,"java.io.File+createNewFile() java.io.File+File(File,String) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+createNewFile()",processing.app.ContributionManager+DELETION_FLAG,343,10,9,,"static public boolean flagForDeletion(InstalledContribution contrib) {
    // Only returns false if the file already exists, so we can
    // ignore the return value.
    try {
      new File(contrib.getFolder(), ContributionManager.DELETION_FLAG).createNewFile();
      return true;
    } catch (IOException e) {
      return false;
    }
  }",False
52,removeFlagForDeletion(InstalledContribution),Method,,processing.app.ContributionListPanel+ContributionPanel.actionPerformed(ActionEvent),"java.io.File+delete() java.io.File+File(File,String) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+delete()",processing.app.ContributionManager+DELETION_FLAG,166,3,9,,"static public boolean removeFlagForDeletion(InstalledContribution contrib) {
    return new File(contrib.getFolder(), ContributionManager.DELETION_FLAG).delete();
  }",False
53,isFlaggedForDeletion(Contribution),Method,,processing.app.Base+Base(String[]) processing.app.ContributionListPanel+ContributionPanel.setContribution(Contribution),"java.io.File+exists() java.io.File+File(File,String) processing.app.contribution.InstalledContribution+getFolder() processing.app.contribution.InstalledContribution+getFolder() java.io.File+exists()",processing.app.ContributionManager+DELETION_FLAG,309,7,9,,"static public boolean isFlaggedForDeletion(Contribution contrib) {
    if (contrib instanceof InstalledContribution) {
      InstalledContribution installed = (InstalledContribution) contrib;
      return new File(installed.getFolder(), ContributionManager.DELETION_FLAG).exists();
    }
    return false;
  }",False
54,requiresRestart(Contribution),Method,,processing.app.ContributionListPanel+ContributionPanel.setContribution(Contribution) processing.app.ContributionListPanel+ContributionPanel.setContribution(Contribution) processing.app.ContributionListPanel+ContributionPanel.setSelected(boolean),processing.app.contribution.Contribution+getType() processing.app.contribution.Contribution+getType() processing.app.contribution.Contribution+getType() processing.app.contribution.Contribution+getType(),,245,5,9,"/** 
 * Returns true if the type of contribution requires the PDE to restart when being removed. 
 */
","/** Returns true if the type of contribution requires the PDE to restart
   * when being removed. */
  static public boolean requiresRestart(Contribution contrib) {
    return contrib.getType() == Type.TOOL || contrib.getType() == Type.MODE;
  }",False
55,StatusPanel,MemberClass,,,"processing.app.ContributionManager.StatusPanel+StatusPanel() java.awt.Component+addMouseListener(MouseListener) java.awt.Component+addMouseListener(MouseListener) +() +mousePressed(MouseEvent) processing.app.ContributionManager.StatusPanel+clearErrorMessage() processing.app.ContributionManager.StatusPanel+clearErrorMessage() processing.app.ContributionManager.StatusPanel+paintComponent(Graphics) javax.swing.JComponent+paintComponent(Graphics) java.awt.Graphics+setFont(Font) java.awt.Graphics+setFont(Font) java.awt.Font+Font(String,int,int) java.awt.Component+getSize() java.awt.Component+getSize() java.awt.FontMetrics+getAscent() java.awt.Graphics+getFontMetrics() java.awt.Graphics+getFontMetrics() java.awt.FontMetrics+getAscent() processing.app.ContributionListing+isDownloadingListing() processing.app.ContributionListing+isDownloadingListing() java.awt.Graphics+setColor(Color) java.awt.Graphics+setColor(Color) java.awt.Graphics+drawString(String,int,int) java.awt.Graphics+drawString(String,int,int) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) java.awt.Graphics+setColor(Color) java.awt.Graphics+setColor(Color) java.awt.Graphics+drawString(String,int,int) java.awt.Graphics+drawString(String,int,int) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) processing.app.ContributionManager.StatusPanel+setErrorMessage(String) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+getPreferredSize() javax.swing.JComponent+getPreferredSize() processing.app.Base+isWindows() processing.app.Base+isWindows() javax.swing.JComponent+setPreferredSize(Dimension) javax.swing.JComponent+setPreferredSize(Dimension) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) processing.app.ContributionManager.StatusPanel+clearErrorMessage() java.awt.Component+repaint() java.awt.Component+repaint() javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean)",processing.app.ContributionManager.StatusPanel+errorMessage java.awt.Font+PLAIN java.awt.Dimension+height processing.app.ContributionManager+contribListing java.awt.Color+black processing.app.ContributionManager.StatusPanel+errorMessage java.awt.Color+red processing.app.ContributionManager.StatusPanel+errorMessage processing.app.ContributionManager.StatusPanel+errorMessage processing.app.ContributionManager+contributionListPanel processing.app.ContributionListPanel+statusPlaceholder java.awt.Dimension+height processing.app.ContributionManager.StatusPanel+errorMessage processing.app.ContributionManager+contributionListPanel processing.app.ContributionListPanel+statusPlaceholder,1621,58,0,,"class StatusPanel extends JPanel {
    
    String errorMessage;
    
    StatusPanel() {
      addMouseListener(new MouseAdapter() {
        
        public void mousePressed(MouseEvent e) {
          clearErrorMessage();
        }
      });
    }
    
    @Override
    protected void paintComponent(Graphics g) {
      super.paintComponent(g);
      
      g.setFont(new Font(""SansSerif"", Font.PLAIN, 10));
      int baseline = (getSize().height + g.getFontMetrics().getAscent()) / 2;
      
      if (contribListing.isDownloadingListing()) {
        g.setColor(Color.black);
        g.drawString(""Downloading software listing..."", 2, baseline);
        setVisible(true);
      } else if (errorMessage != null) {
        g.setColor(Color.red);
        g.drawString(errorMessage, 2, baseline);
        setVisible(true);
      } else {
        setVisible(false);
      }
    }
    
    void setErrorMessage(String message) {
      errorMessage = message;
      setVisible(true);
      
      JPanel placeholder = ContributionManager.this.contributionListPanel.statusPlaceholder;
      Dimension d = getPreferredSize();
      if (Base.isWindows()) {
        d.height += 5;
        placeholder.setPreferredSize(d);
      }
      placeholder.setVisible(true);
      
//      Rectangle rect = scrollPane.getViewport().getViewRect();
//      rect.x += d.height;
//      scrollPane.getViewport().scrollRectToVisible(rect);
    }
    
    void clearErrorMessage() {
      errorMessage = null;
      repaint();
      
      ContributionManager.this.contributionListPanel.statusPlaceholder
          .setVisible(false);
    }
  }",True
56,progressBar,Field,,,,,25,1,0,,JProgressBar progressBar;,True
57,JProgressMonitor(JProgressBar),Method,,,,processing.app.JProgressMonitor+progressBar processing.app.JProgressMonitor+progressBar,91,3,1,,"public JProgressMonitor(JProgressBar progressBar) {
    this.progressBar = progressBar;
  }",True
58,"startTask(String,int)",Method,,,javax.swing.JProgressBar+setString(String) javax.swing.JProgressBar+setString(String) javax.swing.JProgressBar+setIndeterminate(boolean) javax.swing.JProgressBar+setIndeterminate(boolean) javax.swing.JProgressBar+setMaximum(int) javax.swing.JProgressBar+setMaximum(int),processing.app.AbstractProgressMonitor+isFinished processing.app.JProgressMonitor+progressBar processing.app.JProgressMonitor+progressBar processing.app.ProgressMonitor+UNKNOWN processing.app.JProgressMonitor+progressBar,204,6,1,,"public void startTask(String name, int maxValue) {
    isFinished = false;
    progressBar.setString(name);
    progressBar.setIndeterminate(maxValue == UNKNOWN);
    progressBar.setMaximum(maxValue);
  }",True
59,setProgress(int),Method,,,processing.app.AbstractProgressMonitor+setProgress(int) javax.swing.JProgressBar+setValue(int) javax.swing.JProgressBar+setValue(int),processing.app.JProgressMonitor+progressBar,103,4,1,,"public void setProgress(int value) {
    super.setProgress(value);
    progressBar.setValue(value);
  }",True
60,finished(),Method,,,processing.app.AbstractProgressMonitor+finished() processing.app.JProgressMonitor+finishedAction() processing.app.JProgressMonitor+finishedAction(),,84,5,1,,"@Override
  public void finished() {
    super.finished();
    finishedAction();
  }",True
61,finishedAction(),Method,,,,,38,1,1025,,public abstract void finishedAction();,True
