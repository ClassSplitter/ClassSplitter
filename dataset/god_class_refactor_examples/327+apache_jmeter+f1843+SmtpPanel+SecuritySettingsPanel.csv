index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,serialVersionUID,Field,,,,,48,1,26,,private static final long serialVersionUID = 1L;,False
2,tfMailFrom,Field,,,,,30,1,2,,private JTextField tfMailFrom;,False
3,browseButton,Field,,,,,29,1,2,,private JButton browseButton;,False
4,emlBrowseButton,Field,,,,,32,1,2,,private JButton emlBrowseButton;,False
5,cbTrustAllCerts,Field,,,,,34,1,2,,private JCheckBox cbTrustAllCerts;,True
6,cbEnforceStartTLS,Field,,,,,36,1,2,,private JCheckBox cbEnforceStartTLS;,True
7,cbUseAuth,Field,,,,,28,1,2,,private JCheckBox cbUseAuth;,False
8,cbUseLocalTrustStore,Field,,,,,39,1,2,,private JCheckBox cbUseLocalTrustStore;,True
9,rbUseNone,Field,,,,,31,1,2,,private JRadioButton rbUseNone;,True
10,rbUseSSL,Field,,,,,30,1,2,,private JRadioButton rbUseSSL;,True
11,rbUseStartTLS,Field,,,,,35,1,2,,private JRadioButton rbUseStartTLS;,True
12,bgSecuritySettings,Field,,,,,39,1,2,,private ButtonGroup bgSecuritySettings;,True
13,tfMailServer,Field,,,,,32,1,2,,private JTextField tfMailServer;,False
14,tfMailServerPort,Field,,,,,36,1,2,,private JTextField tfMailServerPort;,False
15,tfTrustStoreToUse,Field,,,,,37,1,2,,private JTextField tfTrustStoreToUse;,True
16,tfMailTo,Field,,,,,28,1,2,,private JTextField tfMailTo;,False
17,tfMailToCC,Field,,,,,30,1,2,,private JTextField tfMailToCC;,False
18,tfMailToBCC,Field,,,,,31,1,2,,private JTextField tfMailToBCC;,False
19,tfAttachment,Field,,,,,32,1,2,,private JTextField tfAttachment;,False
20,tfEmlMessage,Field,,,,,32,1,2,,private JTextField tfEmlMessage;,False
21,taMessage,Field,,,,,28,1,2,,private JTextArea taMessage;,False
22,jlAddressFrom,Field,,,,,29,1,2,,private JLabel jlAddressFrom;,False
23,jlAddressTo,Field,,,,,27,1,2,,private JLabel jlAddressTo;,False
24,jlAddressToCC,Field,,,,,29,1,2,,private JLabel jlAddressToCC;,False
25,jlAddressToBCC,Field,,,,,30,1,2,,private JLabel jlAddressToBCC;,False
26,jlMailServerPort,Field,,,,,32,1,2,,private JLabel jlMailServerPort;,False
27,jlMailServer,Field,,,,,28,1,2,,private JLabel jlMailServer;,False
28,jlAttachFile,Field,,,,,28,1,2,,private JLabel jlAttachFile;,False
29,jlDutPortStandard,Field,,,,,33,1,2,,private JLabel jlDutPortStandard;,False
30,jlTrustStoreToUse,Field,,,,,33,1,2,,private JLabel jlTrustStoreToUse;,True
31,jlPassword,Field,,,,,26,1,2,,private JLabel jlPassword;,False
32,jlSubject,Field,,,,,25,1,2,,private JLabel jlSubject;,False
33,jlUsername,Field,,,,,26,1,2,,private JLabel jlUsername;,False
34,jlMessage,Field,,,,,25,1,2,,private JLabel jlMessage;,False
35,attachmentFileChooser,Field,,,,,43,1,2,,private JFileChooser attachmentFileChooser;,False
36,emlFileChooser,Field,,,,,36,1,2,,private JFileChooser emlFileChooser;,False
37,tfAuthPassword,Field,,,,,34,1,2,,private JTextField tfAuthPassword;,False
38,tfAuthUsername,Field,,,,,34,1,2,,private JTextField tfAuthUsername;,False
39,tfSubject,Field,,,,,29,1,2,,private JTextField tfSubject;,False
40,cbSuppressSubject,Field,,,,,36,1,2,,private JCheckBox cbSuppressSubject;,False
41,cbIncludeTimestamp,Field,,,,,37,1,2,,private JCheckBox cbIncludeTimestamp;,False
42,cbMessageSizeStats,Field,,,,,37,1,2,,private JCheckBox cbMessageSizeStats;,False
43,cbEnableDebug,Field,,,,,32,1,2,,private JCheckBox cbEnableDebug;,False
44,cbUseEmlMessage,Field,,,,,34,1,2,,private JCheckBox cbUseEmlMessage;,False
45,headerFieldsPanel,Field,,,,,33,1,2,,private JPanel headerFieldsPanel;,False
46,addHeaderFieldButton,Field,,,,,37,1,2,,private JButton addHeaderFieldButton;,False
47,headerFieldName,Field,,,,,31,1,2,,private JLabel headerFieldName;,False
48,headerFieldValue,Field,,,,,32,1,2,,private JLabel headerFieldValue;,False
49,headerFields,Field,,,,,89,1,2,,"private Map<JTextField, JTextField> headerFields = new HashMap<JTextField, JTextField>();",False
50,removeButtons,Field,,,,,83,1,2,,"private Map<JButton,JTextField> removeButtons = new HashMap<JButton, JTextField>();",False
51,headerGridY,Field,,,,,28,1,2,,private int headerGridY = 0;,False
52,SmtpPanel(),Method,,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+initComponents() org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+initComponents(),,157,7,1,"/** 
 * Creates new form SmtpPanel, standard constructer. Calls initComponents();.
 */
","/**
     * Creates new form SmtpPanel, standard constructer. Calls
     * initComponents();.
     */
    public SmtpPanel() {
        initComponents();
    }",False
53,getMailFrom(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailFrom,173,8,1,"/** 
 * Returns sender-address for e-mail from textfield
 * @return Sender
 */
","/**
     * Returns sender-address for e-mail from textfield
     *
     * @return Sender
     */
    public String getMailFrom() {
        return tfMailFrom.getText();
    }",False
54,getReceiverTo(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailTo,177,8,1,"/** 
 * Returns receiver in field ""to"" from textfield
 * @return Receiver ""to""
 */
","/**
     * Returns receiver in field ""to"" from textfield
     *
     * @return Receiver ""to""
     */
    public String getReceiverTo() {
        return tfMailTo.getText();
    }",False
55,getReceiverCC(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToCC,179,8,1,"/** 
 * Returns receiver in field ""cc"" from textfield
 * @return Receiver ""cc""
 */
","/**
     * Returns receiver in field ""cc"" from textfield
     *
     * @return Receiver ""cc""
     */
    public String getReceiverCC() {
        return tfMailToCC.getText();
    }",False
56,getReceiverBCC(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToBCC,183,8,1,"/** 
 * Returns receiver in field ""bcc"" from textfield
 * @return Receiver ""bcc""
 */
","/**
     * Returns receiver in field ""bcc"" from textfield
     *
     * @return Receiver ""bcc""
     */
    public String getReceiverBCC() {
        return tfMailToBCC.getText();
    }",False
57,getBody(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+taMessage,195,8,1,"/** 
 * Returns message body, i.e. main-mime-part of message (from textfield)
 * @return Message body
 */
","/**
     * Returns message body, i.e. main-mime-part of message (from textfield)
     *
     * @return Message body
     */
    public String getBody() {
        return taMessage.getText();
    }",False
58,setBody(String),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+taMessage,249,9,1,"/** 
 * Sets message body, i.e. main-mime-part of message in textfield
 * @param messageBodyText Message body
 */
","/**
     * Sets message body, i.e. main-mime-part of message in textfield
     *
     * @param messageBodyText
     *            Message body
     */
    public void setBody(String messageBodyText) {
        taMessage.setText(messageBodyText);
    }",False
59,setMailFrom(String),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailFrom,207,9,1,"/** 
 * Sets sender-address of e-mail in textfield
 * @param mailFrom Sender
 */
","/**
     * Sets sender-address of e-mail in textfield
     *
     * @param mailFrom
     *            Sender
     */
    public void setMailFrom(String mailFrom) {
        tfMailFrom.setText(mailFrom);
    }",False
60,setReceiverTo(String),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailTo,197,9,1,"/** 
 * Sets receiver in textfield ""to""
 * @param mailTo Receiver ""to""
 */
","/**
     * Sets receiver in textfield ""to""
     *
     * @param mailTo
     *            Receiver ""to""
     */
    public void setReceiverTo(String mailTo) {
        tfMailTo.setText(mailTo);
    }",False
61,setReceiverCC(String),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToCC,205,9,1,"/** 
 * Sets receiver in textfield ""cc""
 * @param mailToCC Receiver ""cc""
 */
","/**
     * Sets receiver in textfield ""cc""
     *
     * @param mailToCC
     *            Receiver ""cc""
     */
    public void setReceiverCC(String mailToCC) {
        tfMailToCC.setText(mailToCC);
    }",False
62,setReceiverBCC(String),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToBCC,212,9,1,"/** 
 * Sets receiver in textfield ""bcc""
 * @param mailToBCC Receiver ""bcc""
 */
","/**
     * Sets receiver in textfield ""bcc""
     *
     * @param mailToBCC
     *            Receiver ""bcc""
     */
    public void setReceiverBCC(String mailToBCC) {
        tfMailToBCC.setText(mailToBCC);
    }",False
63,getAttachments(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment,201,8,1,"/** 
 * Returns path of file(s) to be attached in e-mail from textfield
 * @return File to attach
 */
","/**
     * Returns path of file(s) to be attached in e-mail from textfield
     *
     * @return File to attach
     */
    public String getAttachments() {
        return tfAttachment.getText();
    }",False
64,setAttachments(String),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment,242,9,1,"/** 
 * Sets path of file to be attached in e-mail in textfield
 * @param attachments File to attach
 */
","/**
     * Sets path of file to be attached in e-mail in textfield
     *
     * @param attachments
     *            File to attach
     */
    public void setAttachments(String attachments) {
        tfAttachment.setText(attachments);
    }",False
65,getPort(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServerPort,241,9,1,"/** 
 * Returns port of mail-server (standard 25 for SMTP/SMTP with StartTLS, 465 for SSL) from textfield
 * @return Mail-server port
 */
","/**
     * Returns port of mail-server (standard 25 for SMTP/SMTP with StartTLS, 465
     * for SSL) from textfield
     *
     * @return Mail-server port
     */
    public String getPort() {
        return tfMailServerPort.getText();
    }",False
66,setPort(String),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServerPort,189,9,1,"/** 
 * Sets port of mail-server
 * @param port Mail-server port
 */
","/**
     * Sets port of mail-server
     *
     * @param port
     *            Mail-server port
     */
    public void setPort(String port) {
        tfMailServerPort.setText(port);
    }",False
67,getServer(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServer,207,8,1,"/** 
 * Returns mail-server to be used to send message (from textfield)
 * @return FQDN or IP of mail-server
 */
","/**
     * Returns mail-server to be used to send message (from textfield)
     *
     * @return FQDN or IP of mail-server
     */
    public String getServer() {
        return tfMailServer.getText();
    }",False
68,setServer(String),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServer,234,9,1,"/** 
 * Sets mail-server to be used to send message in textfield
 * @param server FQDN or IP of mail-server
 */
","/**
     * Sets mail-server to be used to send message in textfield
     *
     * @param server
     *            FQDN or IP of mail-server
     */
    public void setServer(String server) {
        tfMailServer.setText(server);
    }",False
69,getSubject(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfSubject,178,8,1,"/** 
 * Returns subject of the e-mail from textfield
 * @return Subject of e-mail
 */
","/**
     * Returns subject of the e-mail from textfield
     *
     * @return Subject of e-mail
     */
    public String getSubject() {
        return tfSubject.getText();
    }",False
70,setSubject(String),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfSubject,210,9,1,"/** 
 * Sets subject of the e-mail in textfield
 * @param subject Subject of e-mail
 */
","/**
     * Sets subject of the e-mail in textfield
     *
     * @param subject
     *            Subject of e-mail
     */
    public void setSubject(String subject) {
        tfSubject.setText(subject);
    }",False
71,isSuppressSubject(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbSuppressSubject,230,8,1,"/** 
 * Returns true if subject header should be suppressed
 * @return true if subject header should be suppressed
 */
","/**
     * Returns true if subject header should be suppressed
     *
     * @return true if subject header should be suppressed
     */
    public boolean isSuppressSubject() {
        return cbSuppressSubject.isSelected();
    }",False
72,setSuppressSubject(boolean),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbSuppressSubject,263,9,1,"/** 
 * Sets the property that defines if the subject header should be suppressed
 * @param emptySubject
 */
","/**
     * Sets the property that defines if the subject header should be suppressed
     *
     * @param emptySubject
     *            
     */
    public void setSuppressSubject(boolean emptySubject) {
        cbSuppressSubject.setSelected(emptySubject);
    }",False
73,isUseAuth(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseAuth,204,8,1,"/** 
 * Returns if mail-server needs authentication (checkbox)
 * @return true if authentication is used
 */
","/**
     * Returns if mail-server needs authentication (checkbox)
     *
     * @return true if authentication is used
     */
    public boolean isUseAuth() {
        return cbUseAuth.isSelected();
    }",False
74,setUseAuth(boolean),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseAuth org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthPassword org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthUsername,355,10,1,"/** 
 * Set whether mail server needs auth.
 * @param selected
 */
","/**
     * Set whether mail server needs auth.
     *
     * @param selected
     */
    public void setUseAuth(boolean selected){
        cbUseAuth.setSelected(selected);
        tfAuthPassword.setEditable(selected); // ensure correctly set on initial display
        tfAuthUsername.setEditable(selected); // ensure correctly set on initial display
    }",False
75,isUseSSL(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseSSL,230,8,1,"/** 
 * Returns if SSL is used to secure the SMTP-connection (checkbox)
 * @return true if SSL is used to secure the SMTP-connection
 */
","/**
     * Returns if SSL is used to secure the SMTP-connection (checkbox)
     *
     * @return true if SSL is used to secure the SMTP-connection
     */
    public boolean isUseSSL() {
        return rbUseSSL.isSelected();
    }",True
76,setUseSSL(boolean),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseSSL,246,9,1,"/** 
 * Sets SSL to be used to secure the SMTP-connection (checkbox)
 * @param useSSL Use SSL to secure the connection
 */
","/**
     * Sets SSL to be used to secure the SMTP-connection (checkbox)
     *
     * @param useSSL
     *            Use SSL to secure the connection
     */
    public void setUseSSL(boolean useSSL) {
        rbUseSSL.setSelected(useSSL);
    }",True
77,isUseStartTLS(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseStartTLS,240,8,1,"/** 
 * Returns if StartTLS is used to secure the connection (checkbox)
 * @return true if StartTLS is used to secure the connection
 */
","/**
     * Returns if StartTLS is used to secure the connection (checkbox)
     *
     * @return true if StartTLS is used to secure the connection
     */
    public boolean isUseStartTLS() {
        return rbUseStartTLS.isSelected();
    }",True
78,setUseStartTLS(boolean),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseStartTLS,281,9,1,"/** 
 * Sets StartTLS to be used to secure the SMTP-connection (checkbox)
 * @param useStartTLS Use StartTLS to secure the connection
 */
","/**
     * Sets StartTLS to be used to secure the SMTP-connection (checkbox)
     *
     * @param useStartTLS
     *            Use StartTLS to secure the connection
     */
    public void setUseStartTLS(boolean useStartTLS) {
        rbUseStartTLS.setSelected(useStartTLS);
    }",True
79,isEnforceStartTLS(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS,325,10,1,"/** 
 * Returns if StartTLS is enforced (normally, SMTP uses plain SMTP-connection as fallback if ""250-STARTTLS"" isn't sent from the mailserver) (checkbox)
 * @return true if StartTLS is enforced
 */
","/**
     * Returns if StartTLS is enforced (normally, SMTP uses plain
     * SMTP-connection as fallback if ""250-STARTTLS"" isn't sent from the
     * mailserver) (checkbox)
     *
     * @return true if StartTLS is enforced
     */
    public boolean isEnforceStartTLS() {
        return cbEnforceStartTLS.isSelected();
    }",True
80,setEnforceStartTLS(boolean),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS,342,10,1,"/** 
 * Enforces StartTLS to secure the SMTP-connection (checkbox)
 * @param enforceStartTLS Enforce the use of StartTLS to secure the connection
 * @see #isEnforceStartTLS()
 */
","/**
     * Enforces StartTLS to secure the SMTP-connection (checkbox)
     *
     * @param enforceStartTLS
     *            Enforce the use of StartTLS to secure the connection
     * @see #isEnforceStartTLS()
     */
    public void setEnforceStartTLS(boolean enforceStartTLS) {
        cbEnforceStartTLS.setSelected(enforceStartTLS);
    }",True
81,isEnableDebug(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnableDebug,81,3,1,,"public boolean isEnableDebug() {
        return cbEnableDebug.isSelected();
    }",False
82,setEnableDebug(boolean),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnableDebug,96,3,1,,"public void setEnableDebug(boolean selected){
        cbEnableDebug.setSelected(selected);
    }",False
83,isTrustAllCerts(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts,273,9,1,"/** 
 * Returns if all certificates are blindly trusted (using according SocketFactory) (checkbox)
 * @return true if all certificates are blindly trusted
 */
","/**
     * Returns if all certificates are blindly trusted (using according
     * SocketFactory) (checkbox)
     *
     * @return true if all certificates are blindly trusted
     */
    public boolean isTrustAllCerts() {
        return cbTrustAllCerts.isSelected();
    }",True
84,setTrustAllCerts(boolean),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts,330,11,1,"/** 
 * Enforces JMeter to trust all certificates, no matter what CA is issuer (checkbox)
 * @param trustAllCerts Trust all certificates
 * @see #isTrustAllCerts()
 */
","/**
     * Enforces JMeter to trust all certificates, no matter what CA is issuer
     * (checkbox)
     *
     * @param trustAllCerts
     *            Trust all certificates
     * @see #isTrustAllCerts()
     */
    public void setTrustAllCerts(boolean trustAllCerts) {
        cbTrustAllCerts.setSelected(trustAllCerts);
    }",True
85,isUseLocalTrustStore(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore,280,9,1,"/** 
 * Returns if local (pre-installed) truststore is used to avoid SSL-connection-exceptions (checkbox)
 * @return true if a local truststore is used
 */
","/**
     * Returns if local (pre-installed) truststore is used to avoid
     * SSL-connection-exceptions (checkbox)
     *
     * @return true if a local truststore is used
     */
    public boolean isUseLocalTrustStore() {
        return cbUseLocalTrustStore.isSelected();
    }",True
86,setUseLocalTrustStore(boolean),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse,436,11,1,"/** 
 * Set the use of a local (pre-installed) truststore to avoid SSL-connection-exceptions (checkbox)
 * @param useLocalTrustStore Use local keystore
 */
","/**
     * Set the use of a local (pre-installed) truststore to avoid
     * SSL-connection-exceptions (checkbox)
     *
     * @param useLocalTrustStore
     *            Use local keystore
     */
    public void setUseLocalTrustStore(boolean useLocalTrustStore) {
        cbUseLocalTrustStore.setSelected(useLocalTrustStore);
        tfTrustStoreToUse.setEditable(useLocalTrustStore); // ensure correctly set on initial display
    }",True
87,getTrustStoreToUse(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse,266,9,1,"/** 
 * Returns the path to the local (pre-installed) truststore to be used to avoid SSL-connection-exceptions
 * @return Path to local truststore
 */
","/**
     * Returns the path to the local (pre-installed) truststore to be used to
     * avoid SSL-connection-exceptions
     *
     * @return Path to local truststore
     */
    public String getTrustStoreToUse() {
        return tfTrustStoreToUse.getText();
    }",True
88,setTrustStoreToUse(String),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse,319,10,1,"/** 
 * Set the path to local (pre-installed) truststore to be used to avoid SSL-connection-exceptions
 * @param trustStoreToUse Path to local truststore
 */
","/**
     * Set the path to local (pre-installed) truststore to be used to avoid
     * SSL-connection-exceptions
     *
     * @param trustStoreToUse
     *            Path to local truststore
     */
    public void setTrustStoreToUse(String trustStoreToUse) {
        tfTrustStoreToUse.setText(trustStoreToUse);
    }",True
89,isUseEmlMessage(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseEmlMessage,298,10,1,"/** 
 * Returns if an .eml-message is sent instead of the content of message-text area
 * @return true if .eml is sent, false if text area content is sent ine-mail
 */
","/**
     * Returns if an .eml-message is sent instead of the content of message-text
     * area
     *
     * @return true if .eml is sent, false if text area content is sent in
     *         e-mail
     */
    public boolean isUseEmlMessage() {
        return cbUseEmlMessage.isSelected();
    }",False
90,setUseEmlMessage(boolean),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseEmlMessage,285,10,1,"/** 
 * Set the use of an .eml-message instead of the content of message-text area
 * @param useEmlMessage Use eml message
 */
","/**
     * Set the use of an .eml-message instead of the content of message-text
     * area
     *
     * @param useEmlMessage
     *            Use eml message
     */
    public void setUseEmlMessage(boolean useEmlMessage) {
        cbUseEmlMessage.setSelected(useEmlMessage);
    }",False
91,getEmlMessage(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage,191,8,1,"/** 
 * Returns path to eml message to be sent
 * @return path to eml message to be sent
 */
","/**
     * Returns path to eml message to be sent
     *
     * @return path to eml message to be sent
     */
    public String getEmlMessage() {
        return tfEmlMessage.getText();
    }",False
92,setEmlMessage(String),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage,233,9,1,"/** 
 * Set path to eml message to be sent
 * @param emlMessage path to eml message to be sent
 */
","/**
     * Set path to eml message to be sent
     *
     * @param emlMessage
     *            path to eml message to be sent
     */
    public void setEmlMessage(String emlMessage) {
        tfEmlMessage.setText(emlMessage);
    }",False
93,isIncludeTimestamp(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbIncludeTimestamp,252,8,1,"/** 
 * Returns if current timestamp is included in the subject (checkbox)
 * @return true if current timestamp is included in subject
 */
","/**
     * Returns if current timestamp is included in the subject (checkbox)
     *
     * @return true if current timestamp is included in subject
     */
    public boolean isIncludeTimestamp() {
        return cbIncludeTimestamp.isSelected();
    }",False
94,setIncludeTimestamp(boolean),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbIncludeTimestamp,306,9,1,"/** 
 * Set timestamp to be included in the message-subject (checkbox)
 * @param includeTimestamp Should timestamp be included in subject?
 */
","/**
     * Set timestamp to be included in the message-subject (checkbox)
     *
     * @param includeTimestamp
     *            Should timestamp be included in subject?
     */
    public void setIncludeTimestamp(boolean includeTimestamp) {
        cbIncludeTimestamp.setSelected(includeTimestamp);
    }",False
95,isMessageSizeStatistics(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbMessageSizeStats,305,9,1,"/** 
 * Returns if message size statistics are processed. Output of processing will be included in sample result. (checkbox)
 * @return True if message size will be calculated
 */
","/**
     * Returns if message size statistics are processed. Output of processing
     * will be included in sample result. (checkbox)
     *
     * @return True if message size will be calculated
     */
    public boolean isMessageSizeStatistics() {
        return cbMessageSizeStats.isSelected();
    }",False
96,setMessageSizeStatistic(boolean),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbMessageSizeStats,285,10,1,"/** 
 * Set message size to be calculated and included in sample result (checkbox)
 * @param val Schould message size be calculated?
 */
","/**
     * Set message size to be calculated and included in sample result
     * (checkbox)
     *
     * @param val
     *            Schould message size be calculated?
     */
    public void setMessageSizeStatistic(boolean val) {
        cbMessageSizeStats.setSelected(val);
    }",False
97,setUseNoSecurity(boolean),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseNone,95,3,1,,"public void setUseNoSecurity(boolean selected) {
        rbUseNone.setSelected(selected);
    }",True
98,getPassword(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthPassword,76,3,1,,"public String getPassword() {
        return tfAuthPassword.getText();
    }",False
99,setPassword(String),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthPassword,98,3,1,,"public void setPassword(String authPassword) {
        tfAuthPassword.setText(authPassword);
    }",False
100,getUsername(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthUsername,76,3,1,,"public String getUsername() {
        return tfAuthUsername.getText();
    }",False
101,setUsername(String),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthUsername,90,3,1,,"public void setUsername(String username) {
        tfAuthUsername.setText(username);
    }",False
102,getHeaderFields(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),"org.apache.jmeter.testelement.property.CollectionProperty+CollectionProperty() org.apache.jmeter.testelement.property.AbstractProperty+setName(String) org.apache.jmeter.testelement.property.AbstractProperty+setName(String) java.util.Set+iterator() java.util.Map+keySet() java.util.Map+keySet() java.util.Set+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText() java.util.Map+get(Object) java.util.Map+get(Object) javax.swing.text.JTextComponent+getText() org.apache.jmeter.config.Argument+Argument(String,String) org.apache.jmeter.testelement.property.CollectionProperty+addItem(Object) org.apache.jmeter.testelement.property.CollectionProperty+addItem(Object)",org.apache.jmeter.protocol.smtp.sampler.SmtpSampler+HEADER_FIELDS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields,564,12,1,,"public CollectionProperty getHeaderFields() {
        CollectionProperty result = new CollectionProperty();
        result.setName(SmtpSampler.HEADER_FIELDS);
        for (Iterator<JTextField> iterator = headerFields.keySet().iterator(); iterator.hasNext();) {
            JTextField headerName = iterator.next();
            String name = headerName.getText();
            String value = headerFields.get(headerName).getText();
            Argument argument = new Argument(name, value);
            result.addItem(argument);
        }
        return result;
    }",False
103,setHeaderFields(CollectionProperty),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement) org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+clearHeaderFields() org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+clearHeaderFields() org.apache.jmeter.testelement.property.CollectionProperty+size() org.apache.jmeter.testelement.property.CollectionProperty+size() org.apache.jmeter.testelement.property.TestElementProperty+getObjectValue() org.apache.jmeter.testelement.property.CollectionProperty+get(int) org.apache.jmeter.testelement.property.CollectionProperty+get(int) org.apache.jmeter.testelement.property.TestElementProperty+getObjectValue() org.apache.jmeter.config.Argument+getName() org.apache.jmeter.config.Argument+getName() org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+addHeaderActionPerformed(ActionEvent) org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+addHeaderActionPerformed(ActionEvent) java.util.Map+get(Object) java.util.Map+get(Object) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) java.util.Map+get(Object) java.util.Map+get(Object) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) org.apache.jmeter.config.Argument+getValue() org.apache.jmeter.config.Argument+getValue() java.awt.Container+validate() java.awt.Container+validate(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+removeButtons org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields,601,13,1,,"public void setHeaderFields(CollectionProperty fields) {
        clearHeaderFields();
        for (int i = 0; i < fields.size(); i++) {
            Argument argument = (Argument)((TestElementProperty)fields.get(i)).getObjectValue();
            String name = argument.getName();
            JButton removeButton = addHeaderActionPerformed(null);
            JTextField nameTF = removeButtons.get(removeButton);
            nameTF.setText(name);
            JTextField valueTF = headerFields.get(nameTF);
            valueTF.setText(argument.getValue());            
        }
        validate();
    }",False
104,initComponents(),Method,SmtpPanel(),,"javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextArea+JTextArea(int,int) javax.swing.JCheckBox+JCheckBox(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.AbstractButton+addActionListener(ActionListener) javax.swing.AbstractButton+addActionListener(ActionListener) +() +actionPerformed(ActionEvent)",org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlAddressFrom org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlAddressTo org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlAddressToCC org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlAddressToBCC org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlMailServerPort org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlMailServer org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlAttachFile org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlDutPortStandard org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlUsername org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlPassword org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlTrustStoreToUse org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServer org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServerPort org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailFrom org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailTo org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToCC org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToBCC org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthUsername org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthPassword org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+taMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbSuppressSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbSuppressSubject,20354,471,2,"/** 
 * Main method of class, builds all gui-components for SMTP-sampler.
 */
","/**
     * Main method of class, builds all gui-components for SMTP-sampler.
     */
    private void initComponents() {
        GridBagConstraints gridBagConstraints, gridBagConstraintsMain;

        jlAddressFrom = new JLabel(JMeterUtils.getResString(""smtp_from"")); // $NON-NLS-1$
        jlAddressTo = new JLabel(JMeterUtils.getResString(""smtp_to"")); // $NON-NLS-1$
        jlAddressToCC = new JLabel(JMeterUtils.getResString(""smtp_cc"")); // $NON-NLS-1$
        jlAddressToBCC = new JLabel(JMeterUtils.getResString(""smtp_bcc"")); // $NON-NLS-1$
        jlMailServerPort = new JLabel(JMeterUtils.getResString(""smtp_server_port"")); // $NON-NLS-1$
        jlMailServer = new JLabel(JMeterUtils.getResString(""smtp_server"")); // $NON-NLS-1$
        jlAttachFile = new JLabel(JMeterUtils.getResString(""smtp_attach_file"")); // $NON-NLS-1$
        jlDutPortStandard = new JLabel(JMeterUtils.getResString(""smtp_default_port"")); // $NON-NLS-1$
        jlUsername = new JLabel(JMeterUtils.getResString(""smtp_username"")); // $NON-NLS-1$
        jlPassword = new JLabel(JMeterUtils.getResString(""smtp_password"")); // $NON-NLS-1$
        jlTrustStoreToUse = new JLabel(JMeterUtils.getResString(""smtp_truststore"")); // $NON-NLS-1$
        jlSubject = new JLabel(JMeterUtils.getResString(""smtp_subject"")); // $NON-NLS-1$
        jlMessage = new JLabel(JMeterUtils.getResString(""smtp_message"")); // $NON-NLS-1$

        tfMailServer = new JTextField(30);
        tfMailServerPort = new JTextField(6);
        tfTrustStoreToUse = new JTextField(20);
        tfMailFrom = new JTextField(25);
        tfMailTo = new JTextField(25);
        tfMailToCC = new JTextField(25);
        tfMailToBCC = new JTextField(25);
        tfAuthUsername = new JTextField(20);
        tfAuthPassword = new JTextField(20);
        tfSubject = new JTextField(20);
        tfAttachment = new JTextField(30);
        tfEmlMessage = new JTextField(30);

        taMessage = new JTextArea(5, 20);
        
        cbSuppressSubject = new JCheckBox(JMeterUtils.getResString(""smtp_suppresssubj"")); // $NON-NLS-1$
        cbSuppressSubject.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                emptySubjectActionPerformed(evt);
            }
        });

        cbUseAuth = new JCheckBox(JMeterUtils.getResString(""smtp_useauth"")); // $NON-NLS-1$
        rbUseNone = new JRadioButton(JMeterUtils.getResString(""smtp_usenone"")); // $NON-NLS-1$
        rbUseSSL = new JRadioButton(JMeterUtils.getResString(""smtp_usessl"")); // $NON-NLS-1$
        rbUseStartTLS = new JRadioButton(JMeterUtils.getResString(""smtp_usestarttls"")); // $NON-NLS-1$

        cbTrustAllCerts = new JCheckBox(JMeterUtils.getResString(""smtp_trustall"")); // $NON-NLS-1$
        cbEnforceStartTLS = new JCheckBox(JMeterUtils.getResString(""smtp_enforcestarttls"")); // $NON-NLS-1$
        cbIncludeTimestamp = new JCheckBox(JMeterUtils.getResString(""smtp_timestamp"")); // $NON-NLS-1$
        cbMessageSizeStats = new JCheckBox(JMeterUtils.getResString(""smtp_messagesize"")); // $NON-NLS-1$
        cbEnableDebug = new JCheckBox(JMeterUtils.getResString(""smtp_enabledebug"")); // $NON-NLS-1$
        cbUseLocalTrustStore = new JCheckBox(JMeterUtils.getResString(""smtp_usetruststore"")); // $NON-NLS-1$
        cbUseEmlMessage = new JCheckBox(JMeterUtils.getResString(""smtp_eml"")); // $NON-NLS-1$

        attachmentFileChooser = new JFileChooser();
        emlFileChooser = new JFileChooser();

        browseButton = new JButton(JMeterUtils.getResString(""browse"")); // $NON-NLS-1$
        emlBrowseButton = new JButton(JMeterUtils.getResString(""browse"")); // $NON-NLS-1$

        attachmentFileChooser
                .addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        attachmentFolderFileChooserActionPerformed(evt);
                    }
                });

        emlFileChooser.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                emlFileChooserActionPerformed(evt);
            }
        });

        setLayout(new GridBagLayout());

        gridBagConstraintsMain = new GridBagConstraints();
        gridBagConstraintsMain.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraintsMain.anchor = GridBagConstraints.WEST;
        gridBagConstraintsMain.weightx = 0.5;

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        gridBagConstraints.fill = GridBagConstraints.NONE;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;

        /*
         * Server Settings
         */
        JPanel panelServerSettings = new JPanel(new GridBagLayout());
        panelServerSettings.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""smtp_server_settings""))); // $NON-NLS-1$

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelServerSettings.add(jlMailServer, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelServerSettings.add(tfMailServer, gridBagConstraints);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panelServerSettings.add(jlMailServerPort, gridBagConstraints);

        JPanel panelServerPortSettings = new JPanel(new GridBagLayout());
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelServerPortSettings.add(tfMailServerPort, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelServerPortSettings.add(jlDutPortStandard, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        panelServerSettings.add(panelServerPortSettings, gridBagConstraints);

        gridBagConstraintsMain.gridx = 0;
        gridBagConstraintsMain.gridy = 0;
        add(panelServerSettings, gridBagConstraintsMain);

        /*
         * E-Mail Settings
         */
        JPanel panelMailSettings = new JPanel(new GridBagLayout());
        panelMailSettings.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""smtp_mail_settings""))); // $NON-NLS-1$

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelMailSettings.add(jlAddressFrom, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelMailSettings.add(tfMailFrom, gridBagConstraints);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panelMailSettings.add(jlAddressTo, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        panelMailSettings.add(tfMailTo, gridBagConstraints);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        panelMailSettings.add(jlAddressToCC, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        panelMailSettings.add(tfMailToCC, gridBagConstraints);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        panelMailSettings.add(jlAddressToBCC, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        panelMailSettings.add(tfMailToBCC, gridBagConstraints);

        gridBagConstraintsMain.gridx = 0;
        gridBagConstraintsMain.gridy = 1;
        add(panelMailSettings, gridBagConstraintsMain);

        /*
         * Auth Settings
         */
        JPanel panelAuthSettings = new JPanel(new GridBagLayout());
        panelAuthSettings.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""smtp_auth_settings""))); // $NON-NLS-1$

        cbUseAuth.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbUseAuth.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbUseAuth.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbUseAuthActionPerformed(evt);
            }
        });
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelAuthSettings.add(cbUseAuth, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.weightx = 0;
        panelAuthSettings.add(jlUsername, gridBagConstraints);

        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weightx = 0.5;
        panelAuthSettings.add(tfAuthUsername, gridBagConstraints);
        tfAuthUsername.setEditable(false);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.weightx = 0;
        panelAuthSettings.add(jlPassword, gridBagConstraints);

        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 0.5;
        panelAuthSettings.add(tfAuthPassword, gridBagConstraints);
        tfAuthPassword.setEditable(false);

        gridBagConstraintsMain.gridx = 0;
        gridBagConstraintsMain.gridy = 2;
        add(panelAuthSettings, gridBagConstraintsMain);

        /*
         * Security Settings
         */
        JPanel panelSecuritySettings = new JPanel(new GridBagLayout());
        panelSecuritySettings.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""smtp_security_settings""))); // $NON-NLS-1$

        rbUseNone.setSelected(true);
        bgSecuritySettings = new ButtonGroup();
        bgSecuritySettings.add(rbUseNone);
        bgSecuritySettings.add(rbUseSSL);
        bgSecuritySettings.add(rbUseStartTLS);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelSecuritySettings.add(rbUseNone, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelSecuritySettings.add(rbUseSSL, gridBagConstraints);

        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        panelSecuritySettings.add(rbUseStartTLS, gridBagConstraints);

        rbUseNone.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                rbSecuritySettingsItemStateChanged(evt);
            }
        });
        rbUseSSL.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                rbSecuritySettingsItemStateChanged(evt);
            }
        });
        rbUseStartTLS.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                rbSecuritySettingsItemStateChanged(evt);
            }
        });

        cbTrustAllCerts.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbTrustAllCerts.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbTrustAllCerts.setEnabled(false);
        cbTrustAllCerts.setToolTipText(JMeterUtils.getResString(""smtp_trustall_tooltip"")); // $NON-NLS-1$
        cbTrustAllCerts.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbTrustAllCertsActionPerformed(evt);
            }
        });

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panelSecuritySettings.add(cbTrustAllCerts, gridBagConstraints);

        cbEnforceStartTLS.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbEnforceStartTLS.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbEnforceStartTLS.setEnabled(false);
        cbEnforceStartTLS.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        cbEnforceStartTLSActionPerformed(evt);
                    }
                });
        cbEnforceStartTLS.setToolTipText(JMeterUtils.getResString(""smtp_enforcestarttls_tooltip"")); // $NON-NLS-1$

        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        panelSecuritySettings.add(cbEnforceStartTLS, gridBagConstraints);

        cbUseLocalTrustStore.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbUseLocalTrustStore.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbUseLocalTrustStore.setEnabled(false);
        cbUseLocalTrustStore.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        cbUseLocalTrustStoreActionPerformed(evt);
                    }
                });

        cbUseLocalTrustStore.setToolTipText(JMeterUtils.getResString(""smtp_usetruststore_tooltip"")); // $NON-NLS-1$

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        panelSecuritySettings.add(cbUseLocalTrustStore, gridBagConstraints);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 1;
        jlTrustStoreToUse.setToolTipText(JMeterUtils.getResString(""smtp_truststore_tooltip""));
        panelSecuritySettings.add(jlTrustStoreToUse, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        tfTrustStoreToUse.setToolTipText(JMeterUtils.getResString(""smtp_truststore_tooltip""));
        panelSecuritySettings.add(tfTrustStoreToUse, gridBagConstraints);

        gridBagConstraintsMain.gridx = 0;
        gridBagConstraintsMain.gridy = 3;
        add(panelSecuritySettings, gridBagConstraintsMain);

        /*
         * (non-Javadoc) Message Settings
         */
        JPanel panelMessageSettings = new JPanel(new GridBagLayout());
        panelMessageSettings.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""smtp_message_settings""))); // $NON-NLS-1$

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelMessageSettings.add(jlSubject, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        panelMessageSettings.add(tfSubject, gridBagConstraints);
        
        cbSuppressSubject.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbSuppressSubject.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        panelMessageSettings.add(cbSuppressSubject, gridBagConstraints);

        cbIncludeTimestamp.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbIncludeTimestamp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        panelMessageSettings.add(cbIncludeTimestamp, gridBagConstraints);

        /*
         * Add the header panel
         */

        addHeaderFieldButton = new JButton(JMeterUtils.getResString(""smtp_header_add""));
        addHeaderFieldButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addHeaderActionPerformed(evt);
            }
        });
        headerFieldName = new JLabel(JMeterUtils.getResString(""smtp_header_name""));
        headerFieldValue = new JLabel(JMeterUtils.getResString(""smtp_header_value""));
        headerFieldsPanel = new JPanel(new GridBagLayout());
        
        headerFieldName.setVisible(false);
        headerFieldValue.setVisible(false);        

        headerGridY=0;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = headerGridY++;
        headerFieldsPanel.add(addHeaderFieldButton, gridBagConstraints);
        
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = headerGridY;
        headerFieldsPanel.add(headerFieldName, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = headerGridY++;
        headerFieldsPanel.add(headerFieldValue, gridBagConstraints);
        
        gridBagConstraintsMain.gridx = 1;
        gridBagConstraintsMain.gridy = 2;
        panelMessageSettings.add(headerFieldsPanel, gridBagConstraintsMain);        

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        panelMessageSettings.add(jlMessage, gridBagConstraints);

        taMessage.setBorder(BorderFactory.createBevelBorder(1));
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        panelMessageSettings.add(taMessage, gridBagConstraints);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        panelMessageSettings.add(jlAttachFile, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        panelMessageSettings.add(tfAttachment, gridBagConstraints);
        tfAttachment.setToolTipText(JMeterUtils.getResString(""smtp_attach_file_tooltip"")); // $NON-NLS-1$

        browseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        panelMessageSettings.add(browseButton, gridBagConstraints);

        cbUseEmlMessage.setSelected(false);
        cbUseEmlMessage.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbUseEmlMessageActionPerformed(evt);
            }
        });

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        panelMessageSettings.add(cbUseEmlMessage, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        tfEmlMessage.setEnabled(false);
        panelMessageSettings.add(tfEmlMessage, gridBagConstraints);

        emlBrowseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                emlBrowseButtonActionPerformed(evt);
            }
        });
        emlBrowseButton.setEnabled(false);

        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        panelMessageSettings.add(emlBrowseButton, gridBagConstraints);

        gridBagConstraintsMain.gridx = 0;
        gridBagConstraintsMain.gridy = 6;
        add(panelMessageSettings, gridBagConstraintsMain);

        /*
         * Additional Settings
         */
        JPanel panelAdditionalSettings = new JPanel(new GridBagLayout());
        panelAdditionalSettings.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""smtp_additional_settings""))); // $NON-NLS-1$

        cbMessageSizeStats.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbMessageSizeStats.setMargin(new java.awt.Insets(0, 0, 0, 0));

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelAdditionalSettings.add(cbMessageSizeStats, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelAdditionalSettings.add(cbEnableDebug, gridBagConstraints);

        gridBagConstraintsMain.gridx = 0;
        gridBagConstraintsMain.gridy = 7;
        add(panelAdditionalSettings, gridBagConstraintsMain);
    }",False
105,cbUseAuthActionPerformed(ActionEvent),Method,,,javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected() javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthUsername org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseAuth org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthPassword org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseAuth,320,10,2,"/** 
 * ActionPerformed-method for checkbox ""useAuth""
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for checkbox ""useAuth""
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void cbUseAuthActionPerformed(ActionEvent evt) {
        tfAuthUsername.setEditable(cbUseAuth.isSelected());
        tfAuthPassword.setEditable(cbUseAuth.isSelected());
    }",False
106,cbUseLocalTrustStoreActionPerformed(ActionEvent),Method,,,javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected() javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts,488,14,2,"/** 
 * ActionPerformed-method for checkbox ""useLocalTrustStore""
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for checkbox ""useLocalTrustStore""
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void cbUseLocalTrustStoreActionPerformed(
            ActionEvent evt) {
        final boolean selected = cbUseLocalTrustStore.isSelected();
        tfTrustStoreToUse.setEditable(selected); // must follow the checkbox setting
        if (selected) {
            cbTrustAllCerts.setSelected(false); // not compatible
        }
    }",True
107,cbTrustAllCertsActionPerformed(ActionEvent),Method,,,javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse,481,14,2,"/** 
 * ActionPerformed-method for checkbox ""cbTrustAllCerts""
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for checkbox ""cbTrustAllCerts""
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void cbTrustAllCertsActionPerformed(
            ActionEvent evt) {
        final boolean selected = cbTrustAllCerts.isSelected();
        if (selected) {
            cbUseLocalTrustStore.setSelected(false); // not compatible
            tfTrustStoreToUse.setEditable(false); // must follow the checkbox setting
        }
    }",True
108,attachmentFolderFileChooserActionPerformed(ActionEvent),Method,,,java.lang.String+trim() javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText() java.lang.String+trim() java.lang.String+length() java.lang.String+length() javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) java.io.File+getAbsolutePath() javax.swing.JFileChooser+getSelectedFile() javax.swing.JFileChooser+getSelectedFile() java.io.File+getAbsolutePath() javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) java.io.File+getAbsolutePath() javax.swing.JFileChooser+getSelectedFile() javax.swing.JFileChooser+getSelectedFile() java.io.File+getAbsolutePath(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.SmtpSampler+FILENAME_SEPARATOR org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+attachmentFileChooser org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+attachmentFileChooser,771,20,2,"/** 
 * ActionPerformed-method for filechoser ""attachmentFileChoser"", creates FileChoser-Object
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for filechoser ""attachmentFileChoser"", creates
     * FileChoser-Object
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void attachmentFolderFileChooserActionPerformed(ActionEvent evt) {
        final String attachments = tfAttachment.getText().trim();
        if (null != attachments && attachments.length() > 0) {
            tfAttachment.setText(attachments
                            + SmtpSampler.FILENAME_SEPARATOR
                            + attachmentFileChooser.getSelectedFile()
                                    .getAbsolutePath());
        } else {
            tfAttachment.setText(attachmentFileChooser.getSelectedFile()
                    .getAbsolutePath());
        }

    }",False
109,browseButtonActionPerformed(ActionEvent),Method,,,javax.swing.JFileChooser+showOpenDialog(Component) javax.swing.JFileChooser+showOpenDialog(Component),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+attachmentFileChooser,283,9,2,"/** 
 * ActionPerformed-method for button ""browseButton"", opens FileDialog-Object
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for button ""browseButton"", opens FileDialog-Object
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void browseButtonActionPerformed(ActionEvent evt) {
        attachmentFileChooser.showOpenDialog(this);
    }",False
110,cbUseEmlMessageActionPerformed(ActionEvent),Method,,,javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected() javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+emlBrowseButton org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+taMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+browseButton org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+emlBrowseButton org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+taMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+browseButton,995,27,2,,"private void cbUseEmlMessageActionPerformed(ActionEvent evt) {
        if (cbUseEmlMessage.isSelected()) {
            tfEmlMessage.setEnabled(true);
            emlBrowseButton.setEnabled(true);

            /*tfMailFrom.setEnabled(false);
            tfMailTo.setEnabled(false);
            tfMailToCC.setEnabled(false);
            tfMailToBCC.setEnabled(false);
            tfSubject.setEnabled(false);*/
            taMessage.setEnabled(false);
            tfAttachment.setEnabled(false);
            browseButton.setEnabled(false);
        } else {
            tfEmlMessage.setEnabled(false);
            emlBrowseButton.setEnabled(false);

            /*tfMailFrom.setEnabled(true);
            tfMailTo.setEnabled(true);
            tfMailToCC.setEnabled(true);
            tfMailToBCC.setEnabled(true);
            tfSubject.setEnabled(true);*/
            taMessage.setEnabled(true);
            tfAttachment.setEnabled(true);
            browseButton.setEnabled(true);
        }
    }",False
111,emlFileChooserActionPerformed(ActionEvent),Method,,,javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) java.io.File+getAbsolutePath() javax.swing.JFileChooser+getSelectedFile() javax.swing.JFileChooser+getSelectedFile() java.io.File+getAbsolutePath(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+emlFileChooser,329,10,2,"/** 
 * ActionPerformed-method for filechoser ""emlFileChoser"", creates FileChoser-Object
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for filechoser ""emlFileChoser"", creates
     * FileChoser-Object
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void emlFileChooserActionPerformed(ActionEvent evt) {
        tfEmlMessage.setText(emlFileChooser.getSelectedFile().getAbsolutePath());
    }",False
112,emlBrowseButtonActionPerformed(ActionEvent),Method,,,javax.swing.JFileChooser+showOpenDialog(Component) javax.swing.JFileChooser+showOpenDialog(Component),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+emlFileChooser,276,9,2,"/** 
 * ActionPerformed-method for button ""emlButton"", opens FileDialog-Object
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for button ""emlButton"", opens FileDialog-Object
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void emlBrowseButtonActionPerformed(ActionEvent evt) {
        emlFileChooser.showOpenDialog(this);
    }",False
113,cbEnforceStartTLSActionPerformed(ActionEvent),Method,,,,,244,9,2,"/** 
 * ActionPerformed-method for checkbox ""enforceStartTLS"", empty method header
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for checkbox ""enforceStartTLS"", empty method
     * header
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void cbEnforceStartTLSActionPerformed(ActionEvent evt) {
    }",True
114,rbSecuritySettingsItemStateChanged(ItemEvent),Method,,,java.util.EventObject+getSource() java.util.EventObject+getSource() javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseNone org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseSSL org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseStartTLS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse,1289,31,2,"/** 
 * ItemStateChanged-method for radiobutton ""securitySettings""
 * @param evt ItemEvent to be handled
 */
","/**
     * ItemStateChanged-method for radiobutton ""securitySettings""
     *
     * @param evt
     *            ItemEvent to be handled
     */
    private void rbSecuritySettingsItemStateChanged(ItemEvent evt) {
        final Object source = evt.getSource();
        if (source == rbUseNone) {
            cbTrustAllCerts.setEnabled(false);
            cbTrustAllCerts.setSelected(false);
            cbEnforceStartTLS.setEnabled(false);
            cbEnforceStartTLS.setSelected(false);
            cbUseLocalTrustStore.setSelected(false);
            cbUseLocalTrustStore.setEnabled(false);
            tfTrustStoreToUse.setEditable(false);
        } else if (source == rbUseSSL) {
            cbTrustAllCerts.setEnabled(true);
            cbEnforceStartTLS.setEnabled(false);
            cbEnforceStartTLS.setSelected(false);
            cbUseLocalTrustStore.setEnabled(true);
            tfTrustStoreToUse.setEditable(false);
        } else if (source == rbUseStartTLS) {
            cbTrustAllCerts.setEnabled(true);
            cbTrustAllCerts.setSelected(false);
            cbEnforceStartTLS.setEnabled(true);
            cbUseLocalTrustStore.setEnabled(true);
            cbUseLocalTrustStore.setSelected(false);
            tfTrustStoreToUse.setEditable(false);
        }
    }",True
115,clear(),Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+clearGui(),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+clearHeaderFields() org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+clearHeaderFields() java.awt.Container+validate() java.awt.Container+validate(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbIncludeTimestamp org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbMessageSizeStats org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnableDebug org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseAuth org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+taMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthPassword org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthUsername org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailFrom org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServer org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServerPort org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailTo org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToBCC org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToCC org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseNone org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbSuppressSubject,874,27,1,"/** 
 * Reset all the Gui fields.
 */
","/**
     * Reset all the Gui fields.
     */
    public void clear() {
        cbIncludeTimestamp.setSelected(false);
        cbMessageSizeStats.setSelected(false);
        cbEnableDebug.setSelected(false);
        cbUseEmlMessage.setSelected(false);
        cbUseAuth.setSelected(false);
        taMessage.setText("""");
        tfAttachment.setText("""");
        tfAuthPassword.setText("""");
        tfAuthUsername.setText("""");
        tfEmlMessage.setText("""");
        tfMailFrom.setText("""");
        tfMailServer.setText("""");
        tfMailServerPort.setText("""");
        tfMailTo.setText("""");
        tfMailToBCC.setText("""");
        tfMailToCC.setText("""");
        tfSubject.setText("""");
        tfTrustStoreToUse.setText("""");
        rbUseNone.setSelected(true);
        cbSuppressSubject.setSelected(false);
        clearHeaderFields();
        validate();        
    }",False
116,clearHeaderFields(),Method,setHeaderFields(CollectionProperty) clear(),,javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) java.util.Set+iterator() java.util.Map+keySet() java.util.Map+keySet() java.util.Set+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Iterator+remove() java.util.Iterator+remove(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldName org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldValue org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+removeButtons org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+removeButtons org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldsPanel org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldsPanel org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldsPanel org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields,764,18,2,,"private void clearHeaderFields() {
        headerFieldName.setVisible(false);
           headerFieldValue.setVisible(false);

        for (Iterator<JButton> iterator = removeButtons.keySet().iterator(); iterator.hasNext();) {
            JButton removeButton = iterator.next();
               JTextField headerName = removeButtons.get(removeButton);
            JTextField headerValue = headerFields.get(headerName);
            
            headerFieldsPanel.remove(headerName);
            if (headerValue != null){ // Can be null (not sure why)
                headerFieldsPanel.remove(headerValue);
            }
            headerFieldsPanel.remove(removeButton);    
            headerFields.remove(headerName);
            iterator.remove();
        }
    }",False
117,addHeaderActionPerformed(ActionEvent),Method,setHeaderFields(CollectionProperty),,"java.util.Map+size() java.util.Map+size() javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JTextField+JTextField() javax.swing.JTextField+JTextField() javax.swing.JButton+JButton(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) javax.swing.AbstractButton+addActionListener(ActionListener) javax.swing.AbstractButton+addActionListener(ActionListener) +() +actionPerformed(ActionEvent)",org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldName org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldValue org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+removeButtons,1669,40,2,,"private JButton addHeaderActionPerformed(ActionEvent evt){
        if(headerFields.size() == 0){
            headerFieldName.setVisible(true);
            headerFieldValue.setVisible(true);
        }
        JTextField nameTF = new JTextField();
        JTextField valueTF = new JTextField();        
        JButton removeButton = new JButton(JMeterUtils.getResString(""smtp_header_remove""));
        headerFields.put(nameTF, valueTF);
        removeButtons.put(removeButton, nameTF);
        
        removeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                removeHeaderActionPerformed(evt);
            }
        });
        
        GridBagConstraints gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = headerGridY;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        headerFieldsPanel.add(nameTF, gridBagConstraints);
        
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = headerGridY;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        headerFieldsPanel.add(valueTF, gridBagConstraints);
        
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = headerGridY++;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        headerFieldsPanel.add(removeButton, gridBagConstraints);
        
        validate();
        return removeButton;
    }",False
118,removeHeaderActionPerformed(ActionEvent),Method,,,java.util.EventObject+getSource() java.util.EventObject+getSource() java.util.Map+size() java.util.Map+size() javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+remove(Object) java.util.Map+remove(Object) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+validate() java.awt.Container+validate(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldName org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldValue org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+removeButtons org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldsPanel org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldsPanel org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldsPanel,681,17,2,,"private void removeHeaderActionPerformed(ActionEvent evt){
        final Object source = evt.getSource();
        if(source != null && source instanceof JButton){
            if(headerFields.size() == 1){
                headerFieldName.setVisible(false);
                headerFieldValue.setVisible(false);
            }
            JTextField nameTF = removeButtons.get(source);
            JTextField valueTF = headerFields.get(nameTF);
            headerFields.remove(nameTF);
            
            headerFieldsPanel.remove(nameTF);
            headerFieldsPanel.remove(valueTF);
            headerFieldsPanel.remove((JButton)source);
            validate();
        }
    }",False
119,emptySubjectActionPerformed(ActionEvent),Method,,,java.util.EventObject+getSource() java.util.EventObject+getSource() javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected() javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbSuppressSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbIncludeTimestamp org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbIncludeTimestamp,391,12,2,,"private void emptySubjectActionPerformed(ActionEvent evt) {
		final Object source = evt.getSource();
    	if(source != null && source instanceof JCheckBox){
    		if(cbSuppressSubject.isSelected()){
    			tfSubject.setEnabled(false);
    			cbIncludeTimestamp.setEnabled(false);
    		}else{
    			tfSubject.setEnabled(true);
    			cbIncludeTimestamp.setEnabled(true);
    		}
    	}		
	}",False
