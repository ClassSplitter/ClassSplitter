index,name,document,type,inner invocations,external invocations,calls,visits,length,lines,modifier,commit,full text,moved,removed,gpt text,gpt response,code summary
1,serialVersionUID,serial version uid ,Field,,,,,48,1,26,,private static final long serialVersionUID = 1L;,False,False,,False,
2,tfMailFrom,tf mail from ,Field,,,,,30,1,2,,private JTextField tfMailFrom;,False,False,,False,
3,browseButton,browse button ,Field,,,,,29,1,2,,private JButton browseButton;,False,False,,False,
4,emlBrowseButton,eml browse button ,Field,,,,,32,1,2,,private JButton emlBrowseButton;,False,False,,False,
5,cbTrustAllCerts,cb trust all certs ,Field,,,,,34,1,2,,private JCheckBox cbTrustAllCerts;,True,True,,False,
6,cbEnforceStartTLS,cb enforce start tls ,Field,,,,,36,1,2,,private JCheckBox cbEnforceStartTLS;,True,True,,False,
7,cbUseAuth,cb use auth ,Field,,,,,28,1,2,,private JCheckBox cbUseAuth;,False,False,,False,
8,cbUseLocalTrustStore,cb use local trust store ,Field,,,,,39,1,2,,private JCheckBox cbUseLocalTrustStore;,True,True,,False,
9,rbUseNone,rb use none ,Field,,,,,31,1,2,,private JRadioButton rbUseNone;,True,True,,False,
10,rbUseSSL,rb use ssl ,Field,,,,,30,1,2,,private JRadioButton rbUseSSL;,True,True,,False,
11,rbUseStartTLS,rb use start tls ,Field,,,,,35,1,2,,private JRadioButton rbUseStartTLS;,True,True,,False,
12,bgSecuritySettings,bg security settings ,Field,,,,,39,1,2,,private ButtonGroup bgSecuritySettings;,True,True,,False,
13,tfMailServer,tf mail server ,Field,,,,,32,1,2,,private JTextField tfMailServer;,False,False,,False,
14,tfMailServerPort,tf mail server port ,Field,,,,,36,1,2,,private JTextField tfMailServerPort;,False,False,,False,
15,tfTrustStoreToUse,tf trust store to use ,Field,,,,,37,1,2,,private JTextField tfTrustStoreToUse;,True,True,,False,
16,tfMailTo,tf mail to ,Field,,,,,28,1,2,,private JTextField tfMailTo;,False,False,,False,
17,tfMailToCC,tf mail to cc ,Field,,,,,30,1,2,,private JTextField tfMailToCC;,False,False,,False,
18,tfMailToBCC,tf mail to bcc ,Field,,,,,31,1,2,,private JTextField tfMailToBCC;,False,False,,False,
19,tfAttachment,tf attachment ,Field,,,,,32,1,2,,private JTextField tfAttachment;,False,False,,False,
20,tfEmlMessage,tf eml message ,Field,,,,,32,1,2,,private JTextField tfEmlMessage;,False,False,,False,
21,taMessage,ta message ,Field,,,,,28,1,2,,private JTextArea taMessage;,False,False,,False,
22,jlAddressFrom,jl address from ,Field,,,,,29,1,2,,private JLabel jlAddressFrom;,False,False,,False,
23,jlAddressTo,jl address to ,Field,,,,,27,1,2,,private JLabel jlAddressTo;,False,False,,False,
24,jlAddressToCC,jl address to cc ,Field,,,,,29,1,2,,private JLabel jlAddressToCC;,False,False,,False,
25,jlAddressToBCC,jl address to bcc ,Field,,,,,30,1,2,,private JLabel jlAddressToBCC;,False,False,,False,
26,jlMailServerPort,jl mail server port ,Field,,,,,32,1,2,,private JLabel jlMailServerPort;,False,False,,False,
27,jlMailServer,jl mail server ,Field,,,,,28,1,2,,private JLabel jlMailServer;,False,False,,False,
28,jlAttachFile,jl attach file ,Field,,,,,28,1,2,,private JLabel jlAttachFile;,False,False,,False,
29,jlDutPortStandard,jl dut port standard ,Field,,,,,33,1,2,,private JLabel jlDutPortStandard;,False,False,,False,
30,jlTrustStoreToUse,jl trust store to use ,Field,,,,,33,1,2,,private JLabel jlTrustStoreToUse;,True,True,,False,
31,jlPassword,jl password ,Field,,,,,26,1,2,,private JLabel jlPassword;,False,False,,False,
32,jlSubject,jl subject ,Field,,,,,25,1,2,,private JLabel jlSubject;,False,False,,False,
33,jlUsername,jl username ,Field,,,,,26,1,2,,private JLabel jlUsername;,False,False,,False,
34,jlMessage,jl message ,Field,,,,,25,1,2,,private JLabel jlMessage;,False,False,,False,
35,attachmentFileChooser,attachment file chooser ,Field,,,,,43,1,2,,private JFileChooser attachmentFileChooser;,False,False,,False,
36,emlFileChooser,eml file chooser ,Field,,,,,36,1,2,,private JFileChooser emlFileChooser;,False,False,,False,
37,tfAuthPassword,tf auth password ,Field,,,,,34,1,2,,private JTextField tfAuthPassword;,False,False,,False,
38,tfAuthUsername,tf auth username ,Field,,,,,34,1,2,,private JTextField tfAuthUsername;,False,False,,False,
39,tfSubject,tf subject ,Field,,,,,29,1,2,,private JTextField tfSubject;,False,False,,False,
40,cbSuppressSubject,cb suppress subject ,Field,,,,,36,1,2,,private JCheckBox cbSuppressSubject;,False,False,,False,
41,cbIncludeTimestamp,cb include timestamp ,Field,,,,,37,1,2,,private JCheckBox cbIncludeTimestamp;,False,False,,False,
42,cbMessageSizeStats,cb message size stats ,Field,,,,,37,1,2,,private JCheckBox cbMessageSizeStats;,False,False,,False,
43,cbEnableDebug,cb enable debug ,Field,,,,,32,1,2,,private JCheckBox cbEnableDebug;,False,False,,False,
44,cbUseEmlMessage,cb use eml message ,Field,,,,,34,1,2,,private JCheckBox cbUseEmlMessage;,False,False,,False,
45,headerFieldsPanel,header fields panel ,Field,,,,,33,1,2,,private JPanel headerFieldsPanel;,False,False,,False,
46,addHeaderFieldButton,add header field button ,Field,,,,,37,1,2,,private JButton addHeaderFieldButton;,False,False,,False,
47,headerFieldName,header field name ,Field,,,,,31,1,2,,private JLabel headerFieldName;,False,False,,False,
48,headerFieldValue,header field value ,Field,,,,,32,1,2,,private JLabel headerFieldValue;,False,False,,False,
49,headerFields,header fields ,Field,,,,,89,1,2,,"private Map<JTextField, JTextField> headerFields = new HashMap<JTextField, JTextField>();",False,False,,False,
50,removeButtons,remove buttons ,Field,,,,,83,1,2,,"private Map<JButton,JTextField> removeButtons = new HashMap<JButton, JTextField>();",False,False,,False,
51,headerGridY,header grid y ,Field,,,,,28,1,2,,private int headerGridY = 0;,False,False,,False,
52,SmtpPanel(),smtp panel creates new form smtp panel standard constructer calls init components ,Method,,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+initComponents() org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+initComponents(),,157,7,1,"/** 
 * Creates new form SmtpPanel, standard constructer. Calls initComponents();.
 */
","/**
     * Creates new form SmtpPanel, standard constructer. Calls
     * initComponents();.
     */
    public SmtpPanel() {
        initComponents();
    }",False,False,The function of the method is to create a new instance of the SmtpPanel class and call the initComponents() method.,False,The code snippet shows a constructor method for a class called SmtpPanel. It initializes the components of the panel by calling the initComponents() method. This constructor is likely used to set up the graphical user interface for an SMTP (Simple Mail Transfer Protocol) panel.
53,getMailFrom(),get mail from returns sender address for e mail from textfield return sender ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailFrom,173,8,1,"/** 
 * Returns sender-address for e-mail from textfield
 * @return Sender
 */
","/**
     * Returns sender-address for e-mail from textfield
     *
     * @return Sender
     */
    public String getMailFrom() {
        return tfMailFrom.getText();
    }",False,False,This method returns the sender address for an email from a text field. It retrieves the text from the text field and returns it as a string.,True,"The code defines a method called ""getMailFrom"" that retrieves the sender address for an email from a text field. It returns the value of the text field as a string."
54,getReceiverTo(),get receiver to returns receiver in field to from textfield return receiver to ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailTo,177,8,1,"/** 
 * Returns receiver in field ""to"" from textfield
 * @return Receiver ""to""
 */
","/**
     * Returns receiver in field ""to"" from textfield
     *
     * @return Receiver ""to""
     */
    public String getReceiverTo() {
        return tfMailTo.getText();
    }",False,False,"This method returns the value of the ""to"" field in a textfield.",False,"This code defines a method called ""getReceiverTo"" that returns the value of a textfield named ""tfMailTo"". The method is used to retrieve the receiver's email address from the textfield."
55,getReceiverCC(),get receiver cc returns receiver in field cc from textfield return receiver cc ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToCC,179,8,1,"/** 
 * Returns receiver in field ""cc"" from textfield
 * @return Receiver ""cc""
 */
","/**
     * Returns receiver in field ""cc"" from textfield
     *
     * @return Receiver ""cc""
     */
    public String getReceiverCC() {
        return tfMailToCC.getText();
    }",False,False,"This method returns the value of the ""cc"" field from a textfield.",False,"This code defines a method called ""getReceiverCC"" that retrieves the value of a textfield named ""tfMailToCC"" and returns it as a string. The method is used to obtain the receiver's email address for the ""cc"" field."
56,getReceiverBCC(),get receiver bcc returns receiver in field bcc from textfield return receiver bcc ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToBCC,183,8,1,"/** 
 * Returns receiver in field ""bcc"" from textfield
 * @return Receiver ""bcc""
 */
","/**
     * Returns receiver in field ""bcc"" from textfield
     *
     * @return Receiver ""bcc""
     */
    public String getReceiverBCC() {
        return tfMailToBCC.getText();
    }",False,False,"This method returns the value of the ""bcc"" field from a textfield.",False,"The code defines a method called ""getReceiverBCC"" that retrieves the value of a textfield named ""tfMailToBCC"" and returns it as a string. This method is used to obtain the receiver in the ""bcc"" field of an email."
57,getBody(),get body returns message body i e main mime part of message from textfield return message body ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+taMessage,195,8,1,"/** 
 * Returns message body, i.e. main-mime-part of message (from textfield)
 * @return Message body
 */
","/**
     * Returns message body, i.e. main-mime-part of message (from textfield)
     *
     * @return Message body
     */
    public String getBody() {
        return taMessage.getText();
    }",False,False,"This method returns the message body, which is the main MIME part of the message, obtained from a text field.",False,"The code defines a method called ""getBody()"" that returns the message body, which is the main MIME part of a message. The method retrieves the message body from a text field and returns it as a string."
58,setBody(String),set body message body text sets message body i e main mime part of message in textfield param message body text message body ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+taMessage,249,9,1,"/** 
 * Sets message body, i.e. main-mime-part of message in textfield
 * @param messageBodyText Message body
 */
","/**
     * Sets message body, i.e. main-mime-part of message in textfield
     *
     * @param messageBodyText
     *            Message body
     */
    public void setBody(String messageBodyText) {
        taMessage.setText(messageBodyText);
    }",False,False,This method sets the message body by assigning the provided text to the textfield.,False,"The code defines a method called ""setBody"" that takes a string parameter and sets the text of a text field to the provided string. This method is used to set the main-mime-part of a message."
59,setMailFrom(String),set mail from mail from sets sender address of e mail in textfield param mail from sender ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailFrom,207,9,1,"/** 
 * Sets sender-address of e-mail in textfield
 * @param mailFrom Sender
 */
","/**
     * Sets sender-address of e-mail in textfield
     *
     * @param mailFrom
     *            Sender
     */
    public void setMailFrom(String mailFrom) {
        tfMailFrom.setText(mailFrom);
    }",False,False,This method sets the sender address of an email in a text field.,False,"This code defines a method called ""setMailFrom"" that takes a string parameter representing the sender's email address. It sets the text of a text field to the provided email address, effectively updating the sender-address in the user interface."
60,setReceiverTo(String),set receiver to mail to sets receiver in textfield to param mail to receiver to ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailTo,197,9,1,"/** 
 * Sets receiver in textfield ""to""
 * @param mailTo Receiver ""to""
 */
","/**
     * Sets receiver in textfield ""to""
     *
     * @param mailTo
     *            Receiver ""to""
     */
    public void setReceiverTo(String mailTo) {
        tfMailTo.setText(mailTo);
    }",False,False,"This method sets the receiver in the textfield ""to"" by taking a string parameter ""mailTo"" and setting it as the text of the textfield ""tfMailTo"".",False,"The code defines a method called ""setReceiverTo"" that takes a string parameter representing the receiver's email address. This method sets the text of a text field called ""tfMailTo"" to the provided email address, effectively updating the receiver field in the user interface."
61,setReceiverCC(String),set receiver cc mail to cc sets receiver in textfield cc param mail to cc receiver cc ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToCC,205,9,1,"/** 
 * Sets receiver in textfield ""cc""
 * @param mailToCC Receiver ""cc""
 */
","/**
     * Sets receiver in textfield ""cc""
     *
     * @param mailToCC
     *            Receiver ""cc""
     */
    public void setReceiverCC(String mailToCC) {
        tfMailToCC.setText(mailToCC);
    }",False,False,"This method sets the receiver in the textfield ""cc"" by taking a string parameter and setting it as the text of the textfield ""cc"".",False,"The code defines a method called ""setReceiverCC"" that takes a string parameter ""mailToCC"" and sets the value of a textfield called ""tfMailToCC"" to the provided string. This method is used to set the receiver in the ""cc"" field of an email."
62,setReceiverBCC(String),set receiver bcc mail to bcc sets receiver in textfield bcc param mail to bcc receiver bcc ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToBCC,212,9,1,"/** 
 * Sets receiver in textfield ""bcc""
 * @param mailToBCC Receiver ""bcc""
 */
","/**
     * Sets receiver in textfield ""bcc""
     *
     * @param mailToBCC
     *            Receiver ""bcc""
     */
    public void setReceiverBCC(String mailToBCC) {
        tfMailToBCC.setText(mailToBCC);
    }",False,False,"This method sets the receiver in the ""bcc"" textfield by taking a string parameter and setting it as the text in the textfield.",False,"The code defines a method called ""setReceiverBCC"" that takes a string parameter representing the receiver's email address and sets it in a text field called ""tfMailToBCC"". This method is used to conveniently set the ""bcc"" field in an email composition interface."
63,getAttachments(),get attachments returns path of file s to be attached in e mail from textfield return file to attach ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment,201,8,1,"/** 
 * Returns path of file(s) to be attached in e-mail from textfield
 * @return File to attach
 */
","/**
     * Returns path of file(s) to be attached in e-mail from textfield
     *
     * @return File to attach
     */
    public String getAttachments() {
        return tfAttachment.getText();
    }",False,False,"This method returns the path of the file(s) to be attached in an email, which is obtained from a textfield. The returned value is a string.",False,"This code defines a method called ""getAttachments"" that returns the path of a file to be attached in an email. The method retrieves the text from a textfield called ""tfAttachment"" and returns it as a string."
64,setAttachments(String),set attachments attachments sets path of file to be attached in e mail in textfield param attachments file to attach ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment,242,9,1,"/** 
 * Sets path of file to be attached in e-mail in textfield
 * @param attachments File to attach
 */
","/**
     * Sets path of file to be attached in e-mail in textfield
     *
     * @param attachments
     *            File to attach
     */
    public void setAttachments(String attachments) {
        tfAttachment.setText(attachments);
    }",False,False,This method sets the path of a file to be attached in an email by updating the text of a textfield with the file path.,False,"This code defines a method called ""setAttachments"" that takes a string parameter representing a file path. It sets the text of a text field to the provided file path, which is intended to be used for attaching the file to an email."
65,getPort(),get port returns port of mail server standard 25 for smtp smtp with start tls 465 for ssl from textfield return mail server port ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServerPort,241,9,1,"/** 
 * Returns port of mail-server (standard 25 for SMTP/SMTP with StartTLS, 465 for SSL) from textfield
 * @return Mail-server port
 */
","/**
     * Returns port of mail-server (standard 25 for SMTP/SMTP with StartTLS, 465
     * for SSL) from textfield
     *
     * @return Mail-server port
     */
    public String getPort() {
        return tfMailServerPort.getText();
    }",False,False,This method returns the port of the mail server from a text field. It retrieves the text from the text field and returns it as a string.,False,"This code defines a method called ""getPort"" that retrieves the port number of a mail server from a text field. The method returns the port number as a string."
66,setPort(String),set port port sets port of mail server param port mail server port ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServerPort,189,9,1,"/** 
 * Sets port of mail-server
 * @param port Mail-server port
 */
","/**
     * Sets port of mail-server
     *
     * @param port
     *            Mail-server port
     */
    public void setPort(String port) {
        tfMailServerPort.setText(port);
    }",False,False,This method sets the port of the mail-server by taking a string parameter and setting it as the text of a text field.,False,"This code defines a method called ""setPort"" that takes a string parameter representing the port of a mail server. It sets the text of a text field called ""tfMailServerPort"" to the provided port value."
67,getServer(),get server returns mail server to be used to send message from textfield return fqdn or ip of mail server ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServer,207,8,1,"/** 
 * Returns mail-server to be used to send message (from textfield)
 * @return FQDN or IP of mail-server
 */
","/**
     * Returns mail-server to be used to send message (from textfield)
     *
     * @return FQDN or IP of mail-server
     */
    public String getServer() {
        return tfMailServer.getText();
    }",False,False,This method serves to retrieve the mail-server (FQDN or IP) that will be used to send a message. It returns the value entered in the textfield tfMailServer.,False,"This code defines a method called ""getServer"" that returns the Fully Qualified Domain Name (FQDN) or IP address of a mail server. The value is obtained from a text field named ""tfMailServer""."
68,setServer(String),set server server sets mail server to be used to send message in textfield param server fqdn or ip of mail server ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServer,234,9,1,"/** 
 * Sets mail-server to be used to send message in textfield
 * @param server FQDN or IP of mail-server
 */
","/**
     * Sets mail-server to be used to send message in textfield
     *
     * @param server
     *            FQDN or IP of mail-server
     */
    public void setServer(String server) {
        tfMailServer.setText(server);
    }",False,False,"This method sets the mail server to be used for sending messages. It takes a string parameter representing the fully qualified domain name (FQDN) or IP address of the mail server, and sets the text of a text field to that value.",False,"This code defines a method called ""setServer"" that takes a string parameter representing the FQDN or IP of a mail server. It sets the text of a text field called ""tfMailServer"" to the provided server value."
69,getSubject(),get subject returns subject of the e mail from textfield return subject of e mail ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfSubject,178,8,1,"/** 
 * Returns subject of the e-mail from textfield
 * @return Subject of e-mail
 */
","/**
     * Returns subject of the e-mail from textfield
     *
     * @return Subject of e-mail
     */
    public String getSubject() {
        return tfSubject.getText();
    }",False,False,This method returns the subject of an email from a textfield.,False,"This code defines a method called ""getSubject"" that retrieves the subject of an email from a textfield. It returns the subject as a string value."
70,setSubject(String),set subject subject sets subject of the e mail in textfield param subject subject of e mail ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfSubject,210,9,1,"/** 
 * Sets subject of the e-mail in textfield
 * @param subject Subject of e-mail
 */
","/**
     * Sets subject of the e-mail in textfield
     *
     * @param subject
     *            Subject of e-mail
     */
    public void setSubject(String subject) {
        tfSubject.setText(subject);
    }",False,False,This method sets the subject of an email by taking a string input and setting it as the text in a textfield.,False,"This code defines a method called ""setSubject"" that takes a string parameter and sets the text of a textfield to that string. It is used to set the subject of an email in a graphical user interface."
71,isSuppressSubject(),is suppress subject returns true if subject header should be suppressed return true if subject header should be suppressed ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbSuppressSubject,230,8,1,"/** 
 * Returns true if subject header should be suppressed
 * @return true if subject header should be suppressed
 */
","/**
     * Returns true if subject header should be suppressed
     *
     * @return true if subject header should be suppressed
     */
    public boolean isSuppressSubject() {
        return cbSuppressSubject.isSelected();
    }",False,False,"This method serves to determine whether the subject header should be suppressed. It returns true if the checkbox for suppressing the subject header is selected, and false otherwise.",False,"The code defines a method named ""isSuppressSubject"" which returns a boolean value indicating whether the subject header should be suppressed. The method retrieves the selected state of a checkbox named ""cbSuppressSubject"" to determine the return value."
72,setSuppressSubject(boolean),set suppress subject empty subject sets the property that defines if the subject header should be suppressed param empty subject ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbSuppressSubject,263,9,1,"/** 
 * Sets the property that defines if the subject header should be suppressed
 * @param emptySubject
 */
","/**
     * Sets the property that defines if the subject header should be suppressed
     *
     * @param emptySubject
     *            
     */
    public void setSuppressSubject(boolean emptySubject) {
        cbSuppressSubject.setSelected(emptySubject);
    }",False,False,This method sets the property that determines whether the subject header should be suppressed. It takes a boolean parameter and sets the selected state of a checkbox accordingly.,False,"This code defines a method called ""setSuppressSubject"" that takes a boolean parameter ""emptySubject"". It sets the selected state of a checkbox called ""cbSuppressSubject"" based on the value of ""emptySubject""."
73,isUseAuth(),is use auth returns if mail server needs authentication checkbox return true if authentication is used ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseAuth,204,8,1,"/** 
 * Returns if mail-server needs authentication (checkbox)
 * @return true if authentication is used
 */
","/**
     * Returns if mail-server needs authentication (checkbox)
     *
     * @return true if authentication is used
     */
    public boolean isUseAuth() {
        return cbUseAuth.isSelected();
    }",False,False,"This method returns a boolean value indicating whether the mail-server requires authentication. It checks if the checkbox for authentication is selected and returns true if it is, and false otherwise.",False,"This code defines a method named ""isUseAuth"" that returns a boolean value indicating whether the mail server requires authentication. The method retrieves the selected state of a checkbox named ""cbUseAuth"" and returns it as the result."
74,setUseAuth(boolean),set use auth selected set whether mail server needs auth param selected ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseAuth org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthPassword org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthUsername,355,10,1,"/** 
 * Set whether mail server needs auth.
 * @param selected
 */
","/**
     * Set whether mail server needs auth.
     *
     * @param selected
     */
    public void setUseAuth(boolean selected){
        cbUseAuth.setSelected(selected);
        tfAuthPassword.setEditable(selected); // ensure correctly set on initial display
        tfAuthUsername.setEditable(selected); // ensure correctly set on initial display
    }",False,False,This method sets whether the mail server needs authentication. It takes a boolean parameter and updates the selected state of a checkbox. It also enables or disables the editability of two text fields based on the selected state.,False,"The code defines a method called ""setUseAuth"" which takes a boolean parameter. This method sets the selected state of a checkbox, and also enables or disables the editability of two text fields based on the selected state of the checkbox."
75,isUseSSL(),is use ssl returns if ssl is used to secure the smtp connection checkbox return true if ssl is used to secure the smtp connection ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseSSL,230,8,1,"/** 
 * Returns if SSL is used to secure the SMTP-connection (checkbox)
 * @return true if SSL is used to secure the SMTP-connection
 */
","/**
     * Returns if SSL is used to secure the SMTP-connection (checkbox)
     *
     * @return true if SSL is used to secure the SMTP-connection
     */
    public boolean isUseSSL() {
        return rbUseSSL.isSelected();
    }",True,True,This method returns a boolean value indicating whether SSL is used to secure the SMTP-connection. It does this by checking the selected state of a checkbox.,False,"This code defines a method named ""isUseSSL"" that returns a boolean value indicating whether SSL is used to secure the SMTP connection. The method retrieves the selected state of a checkbox named ""rbUseSSL"" and returns it as the result."
76,setUseSSL(boolean),set use ssl use ssl sets ssl to be used to secure the smtp connection checkbox param use ssl use ssl to secure the connection ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseSSL,246,9,1,"/** 
 * Sets SSL to be used to secure the SMTP-connection (checkbox)
 * @param useSSL Use SSL to secure the connection
 */
","/**
     * Sets SSL to be used to secure the SMTP-connection (checkbox)
     *
     * @param useSSL
     *            Use SSL to secure the connection
     */
    public void setUseSSL(boolean useSSL) {
        rbUseSSL.setSelected(useSSL);
    }",True,True,This method sets the value of a checkbox to determine whether SSL should be used to secure the SMTP connection.,False,"This code defines a method called ""setUseSSL"" that takes a boolean parameter ""useSSL"". It sets the selected state of a checkbox called ""rbUseSSL"" to the value of the ""useSSL"" parameter, indicating whether SSL should be used to secure the SMTP connection."
77,isUseStartTLS(),is use start tls returns if start tls is used to secure the connection checkbox return true if start tls is used to secure the connection ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseStartTLS,240,8,1,"/** 
 * Returns if StartTLS is used to secure the connection (checkbox)
 * @return true if StartTLS is used to secure the connection
 */
","/**
     * Returns if StartTLS is used to secure the connection (checkbox)
     *
     * @return true if StartTLS is used to secure the connection
     */
    public boolean isUseStartTLS() {
        return rbUseStartTLS.isSelected();
    }",True,True,"This method returns a boolean value indicating whether StartTLS is used to secure the connection. It does this by checking if the ""Use StartTLS"" checkbox is selected.",False,"The code defines a method named ""isUseStartTLS"" that returns a boolean value indicating whether StartTLS is used to secure the connection. The method retrieves the selected state of a checkbox named ""rbUseStartTLS"" and returns it as the result."
78,setUseStartTLS(boolean),set use start tls use start tls sets start tls to be used to secure the smtp connection checkbox param use start tls use start tls to secure the connection ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseStartTLS,281,9,1,"/** 
 * Sets StartTLS to be used to secure the SMTP-connection (checkbox)
 * @param useStartTLS Use StartTLS to secure the connection
 */
","/**
     * Sets StartTLS to be used to secure the SMTP-connection (checkbox)
     *
     * @param useStartTLS
     *            Use StartTLS to secure the connection
     */
    public void setUseStartTLS(boolean useStartTLS) {
        rbUseStartTLS.setSelected(useStartTLS);
    }",True,True,This method sets the value of a checkbox to determine whether StartTLS should be used to secure the SMTP connection.,False,"This method sets the option to use StartTLS for securing the SMTP connection. It takes a boolean parameter indicating whether to use StartTLS or not, and updates the corresponding checkbox accordingly."
79,isEnforceStartTLS(),is enforce start tls returns if start tls is enforced normally smtp uses plain smtp connection as fallback if 250 starttls isn t sent from the mailserver checkbox return true if start tls is enforced ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS,325,10,1,"/** 
 * Returns if StartTLS is enforced (normally, SMTP uses plain SMTP-connection as fallback if ""250-STARTTLS"" isn't sent from the mailserver) (checkbox)
 * @return true if StartTLS is enforced
 */
","/**
     * Returns if StartTLS is enforced (normally, SMTP uses plain
     * SMTP-connection as fallback if ""250-STARTTLS"" isn't sent from the
     * mailserver) (checkbox)
     *
     * @return true if StartTLS is enforced
     */
    public boolean isEnforceStartTLS() {
        return cbEnforceStartTLS.isSelected();
    }",True,True,"This method returns a boolean value indicating whether StartTLS is enforced. It checks if the checkbox for enforcing StartTLS is selected and returns true if it is, and false otherwise.",False,"This code defines a method named ""isEnforceStartTLS"" that returns a boolean value indicating whether StartTLS is enforced. It retrieves the selected state of a checkbox named ""cbEnforceStartTLS"" to determine the value."
80,setEnforceStartTLS(boolean),set enforce start tls enforce start tls enforces start tls to secure the smtp connection checkbox param enforce start tls enforce the use of start tls to secure the connection see is enforce start tls ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS,342,10,1,"/** 
 * Enforces StartTLS to secure the SMTP-connection (checkbox)
 * @param enforceStartTLS Enforce the use of StartTLS to secure the connection
 * @see #isEnforceStartTLS()
 */
","/**
     * Enforces StartTLS to secure the SMTP-connection (checkbox)
     *
     * @param enforceStartTLS
     *            Enforce the use of StartTLS to secure the connection
     * @see #isEnforceStartTLS()
     */
    public void setEnforceStartTLS(boolean enforceStartTLS) {
        cbEnforceStartTLS.setSelected(enforceStartTLS);
    }",True,True,This method sets the value of a checkbox to enforce the use of StartTLS to secure the SMTP-connection.,False,"The method ""setEnforceStartTLS"" is used to enforce the use of StartTLS to secure the SMTP connection. It takes a boolean parameter ""enforceStartTLS"" and sets the selected state of a checkbox accordingly."
81,isEnableDebug(),is enable debug ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnableDebug,81,3,1,,"public boolean isEnableDebug() {
        return cbEnableDebug.isSelected();
    }",False,False,"This method serves to check if the ""Enable Debug"" checkbox is selected and returns a boolean value indicating whether it is enabled or not.",False,"The code defines a method named ""isEnableDebug"" that returns a boolean value. It checks whether a checkbox named ""cbEnableDebug"" is selected and returns true if it is, indicating that debug mode is enabled, and false otherwise."
82,setEnableDebug(boolean),set enable debug selected ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnableDebug,96,3,1,,"public void setEnableDebug(boolean selected){
        cbEnableDebug.setSelected(selected);
    }",False,False,"This method sets the selected state of a checkbox named ""cbEnableDebug"" based on the value of the boolean parameter ""selected"".",False,"The code defines a method named ""setEnableDebug"" that takes a boolean parameter. This method sets the selected state of a checkbox named ""cbEnableDebug"" based on the value of the parameter."
83,isTrustAllCerts(),is trust all certs returns if all certificates are blindly trusted using according socket factory checkbox return true if all certificates are blindly trusted ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts,273,9,1,"/** 
 * Returns if all certificates are blindly trusted (using according SocketFactory) (checkbox)
 * @return true if all certificates are blindly trusted
 */
","/**
     * Returns if all certificates are blindly trusted (using according
     * SocketFactory) (checkbox)
     *
     * @return true if all certificates are blindly trusted
     */
    public boolean isTrustAllCerts() {
        return cbTrustAllCerts.isSelected();
    }",True,True,"This method returns a boolean value indicating whether all certificates are blindly trusted, based on the selection of a checkbox.",False,"The code defines a method named ""isTrustAllCerts"" that returns a boolean value indicating whether all certificates are blindly trusted. The method uses a checkbox named ""cbTrustAllCerts"" to determine the value to be returned."
84,setTrustAllCerts(boolean),set trust all certs trust all certs enforces j meter to trust all certificates no matter what ca is issuer checkbox param trust all certs trust all certificates see is trust all certs ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts,330,11,1,"/** 
 * Enforces JMeter to trust all certificates, no matter what CA is issuer (checkbox)
 * @param trustAllCerts Trust all certificates
 * @see #isTrustAllCerts()
 */
","/**
     * Enforces JMeter to trust all certificates, no matter what CA is issuer
     * (checkbox)
     *
     * @param trustAllCerts
     *            Trust all certificates
     * @see #isTrustAllCerts()
     */
    public void setTrustAllCerts(boolean trustAllCerts) {
        cbTrustAllCerts.setSelected(trustAllCerts);
    }",True,True,"This method sets a checkbox in JMeter to trust all certificates, regardless of the issuer's CA.",False,"This code defines a method called ""setTrustAllCerts"" that takes a boolean parameter ""trustAllCerts"". It sets the selected state of a checkbox called ""cbTrustAllCerts"" based on the value of the ""trustAllCerts"" parameter. This method is used to enforce JMeter to trust all certificates, regardless of the issuer."
85,isUseLocalTrustStore(),is use local trust store returns if local pre installed truststore is used to avoid ssl connection exceptions checkbox return true if a local truststore is used ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore,280,9,1,"/** 
 * Returns if local (pre-installed) truststore is used to avoid SSL-connection-exceptions (checkbox)
 * @return true if a local truststore is used
 */
","/**
     * Returns if local (pre-installed) truststore is used to avoid
     * SSL-connection-exceptions (checkbox)
     *
     * @return true if a local truststore is used
     */
    public boolean isUseLocalTrustStore() {
        return cbUseLocalTrustStore.isSelected();
    }",True,True,"This method returns a boolean value indicating whether a local truststore is being used to avoid SSL connection exceptions. It checks the state of a checkbox named ""cbUseLocalTrustStore"" and returns its selected state.",False,"The code defines a method named ""isUseLocalTrustStore"" which returns a boolean value indicating whether a local truststore is being used to avoid SSL connection exceptions. The method retrieves the selected state of a checkbox named ""cbUseLocalTrustStore"" to determine the value to be returned."
86,setUseLocalTrustStore(boolean),set use local trust store use local trust store set the use of a local pre installed truststore to avoid ssl connection exceptions checkbox param use local trust store use local keystore ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse,436,11,1,"/** 
 * Set the use of a local (pre-installed) truststore to avoid SSL-connection-exceptions (checkbox)
 * @param useLocalTrustStore Use local keystore
 */
","/**
     * Set the use of a local (pre-installed) truststore to avoid
     * SSL-connection-exceptions (checkbox)
     *
     * @param useLocalTrustStore
     *            Use local keystore
     */
    public void setUseLocalTrustStore(boolean useLocalTrustStore) {
        cbUseLocalTrustStore.setSelected(useLocalTrustStore);
        tfTrustStoreToUse.setEditable(useLocalTrustStore); // ensure correctly set on initial display
    }",True,True,This method sets the use of a local truststore for avoiding SSL connection exceptions. It takes a boolean parameter and updates the selected state of a checkbox and the editability of a text field accordingly.,False,"This method sets the use of a local truststore for avoiding SSL connection exceptions. It takes a boolean parameter indicating whether to use the local truststore or not, and updates the corresponding checkbox and text field accordingly."
87,getTrustStoreToUse(),get trust store to use returns the path to the local pre installed truststore to be used to avoid ssl connection exceptions return path to local truststore ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse,266,9,1,"/** 
 * Returns the path to the local (pre-installed) truststore to be used to avoid SSL-connection-exceptions
 * @return Path to local truststore
 */
","/**
     * Returns the path to the local (pre-installed) truststore to be used to
     * avoid SSL-connection-exceptions
     *
     * @return Path to local truststore
     */
    public String getTrustStoreToUse() {
        return tfTrustStoreToUse.getText();
    }",True,True,This method returns the path to the local truststore that should be used to avoid SSL connection exceptions. It retrieves the path from a text field and returns it as a string.,False,"This code defines a method called ""getTrustStoreToUse"" that returns the path to a local truststore. The truststore is used to avoid SSL connection exceptions. The method retrieves the path from a text field named ""tfTrustStoreToUse""."
88,setTrustStoreToUse(String),set trust store to use trust store to use set the path to local pre installed truststore to be used to avoid ssl connection exceptions param trust store to use path to local truststore ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse,319,10,1,"/** 
 * Set the path to local (pre-installed) truststore to be used to avoid SSL-connection-exceptions
 * @param trustStoreToUse Path to local truststore
 */
","/**
     * Set the path to local (pre-installed) truststore to be used to avoid
     * SSL-connection-exceptions
     *
     * @param trustStoreToUse
     *            Path to local truststore
     */
    public void setTrustStoreToUse(String trustStoreToUse) {
        tfTrustStoreToUse.setText(trustStoreToUse);
    }",True,True,This method sets the path to a local truststore that is used to avoid SSL connection exceptions. It takes a string parameter representing the path to the truststore and sets it as the text of a text field.,False,"This code defines a method called ""setTrustStoreToUse"" that takes a string parameter representing the path to a local truststore. The method sets the text of a text field to the provided truststore path."
89,isUseEmlMessage(),is use eml message returns if an eml message is sent instead of the content of message text area return true if eml is sent false if text area content is sent ine mail ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseEmlMessage,298,10,1,"/** 
 * Returns if an .eml-message is sent instead of the content of message-text area
 * @return true if .eml is sent, false if text area content is sent ine-mail
 */
","/**
     * Returns if an .eml-message is sent instead of the content of message-text
     * area
     *
     * @return true if .eml is sent, false if text area content is sent in
     *         e-mail
     */
    public boolean isUseEmlMessage() {
        return cbUseEmlMessage.isSelected();
    }",False,False,This method returns a boolean value indicating whether an .eml message is sent instead of the content of the message-text area in an email. It checks if the checkbox for using .eml message is selected and returns the corresponding value.,False,"This code defines a method called ""isUseEmlMessage"" which returns a boolean value indicating whether an .eml message is being sent instead of the content of a message text area. The method checks if a checkbox named ""cbUseEmlMessage"" is selected and returns true if it is, otherwise it returns false."
90,setUseEmlMessage(boolean),set use eml message use eml message set the use of an eml message instead of the content of message text area param use eml message use eml message ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseEmlMessage,285,10,1,"/** 
 * Set the use of an .eml-message instead of the content of message-text area
 * @param useEmlMessage Use eml message
 */
","/**
     * Set the use of an .eml-message instead of the content of message-text
     * area
     *
     * @param useEmlMessage
     *            Use eml message
     */
    public void setUseEmlMessage(boolean useEmlMessage) {
        cbUseEmlMessage.setSelected(useEmlMessage);
    }",False,False,This method sets whether to use an .eml message instead of the content of the message-text area. It takes a boolean parameter and sets the selected state of a checkbox accordingly.,False,"This code defines a method called ""setUseEmlMessage"" that takes a boolean parameter. It sets the selected state of a checkbox component based on the value of the parameter, allowing the user to choose whether to use an .eml message or the content of a message-text area."
91,getEmlMessage(),get eml message returns path to eml message to be sent return path to eml message to be sent ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage,191,8,1,"/** 
 * Returns path to eml message to be sent
 * @return path to eml message to be sent
 */
","/**
     * Returns path to eml message to be sent
     *
     * @return path to eml message to be sent
     */
    public String getEmlMessage() {
        return tfEmlMessage.getText();
    }",False,False,This method serves to retrieve the path to the eml message that is to be sent. It returns the text from the tfEmlMessage field.,False,"The code defines a method named ""getEmlMessage"" that returns the path to an eml message to be sent. The method retrieves the text from a text field named ""tfEmlMessage"" and returns it as a string."
92,setEmlMessage(String),set eml message eml message set path to eml message to be sent param eml message path to eml message to be sent ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage,233,9,1,"/** 
 * Set path to eml message to be sent
 * @param emlMessage path to eml message to be sent
 */
","/**
     * Set path to eml message to be sent
     *
     * @param emlMessage
     *            path to eml message to be sent
     */
    public void setEmlMessage(String emlMessage) {
        tfEmlMessage.setText(emlMessage);
    }",False,False,This method sets the path to the eml message that will be sent by setting the text of a text field to the provided eml message.,False,"This code defines a method called ""setEmlMessage"" that takes a string parameter representing the path to an eml message. It sets the text of a text field called ""tfEmlMessage"" to the provided eml message path."
93,isIncludeTimestamp(),is include timestamp returns if current timestamp is included in the subject checkbox return true if current timestamp is included in subject ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbIncludeTimestamp,252,8,1,"/** 
 * Returns if current timestamp is included in the subject (checkbox)
 * @return true if current timestamp is included in subject
 */
","/**
     * Returns if current timestamp is included in the subject (checkbox)
     *
     * @return true if current timestamp is included in subject
     */
    public boolean isIncludeTimestamp() {
        return cbIncludeTimestamp.isSelected();
    }",False,False,This method returns a boolean value indicating whether the current timestamp is included in the subject (checkbox) or not.,False,"The code defines a method named ""isIncludeTimestamp"" which returns a boolean value indicating whether the current timestamp is included in the subject. This is determined by checking the state of a checkbox named ""cbIncludeTimestamp""."
94,setIncludeTimestamp(boolean),set include timestamp include timestamp set timestamp to be included in the message subject checkbox param include timestamp should timestamp be included in subject ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbIncludeTimestamp,306,9,1,"/** 
 * Set timestamp to be included in the message-subject (checkbox)
 * @param includeTimestamp Should timestamp be included in subject?
 */
","/**
     * Set timestamp to be included in the message-subject (checkbox)
     *
     * @param includeTimestamp
     *            Should timestamp be included in subject?
     */
    public void setIncludeTimestamp(boolean includeTimestamp) {
        cbIncludeTimestamp.setSelected(includeTimestamp);
    }",False,False,This method sets the checkbox for including a timestamp in the message subject. It takes a boolean parameter to determine whether the timestamp should be included or not.,False,"This code defines a method called ""setIncludeTimestamp"" that takes a boolean parameter. It sets the selected state of a checkbox called ""cbIncludeTimestamp"" based on the value of the parameter. This method is used to control whether a timestamp should be included in the subject of a message."
95,isMessageSizeStatistics(),is message size statistics returns if message size statistics are processed output of processing will be included in sample result checkbox return true if message size will be calculated ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbMessageSizeStats,305,9,1,"/** 
 * Returns if message size statistics are processed. Output of processing will be included in sample result. (checkbox)
 * @return True if message size will be calculated
 */
","/**
     * Returns if message size statistics are processed. Output of processing
     * will be included in sample result. (checkbox)
     *
     * @return True if message size will be calculated
     */
    public boolean isMessageSizeStatistics() {
        return cbMessageSizeStats.isSelected();
    }",False,False,"This method serves to check if message size statistics are being processed. It returns true if message size will be calculated, otherwise it returns false.",False,"The code defines a method named ""isMessageSizeStatistics"" which returns a boolean value indicating whether message size statistics are being processed. The method checks if a checkbox named ""cbMessageSizeStats"" is selected and returns the corresponding value."
96,setMessageSizeStatistic(boolean),set message size statistic val set message size to be calculated and included in sample result checkbox param val schould message size be calculated ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbMessageSizeStats,285,10,1,"/** 
 * Set message size to be calculated and included in sample result (checkbox)
 * @param val Schould message size be calculated?
 */
","/**
     * Set message size to be calculated and included in sample result
     * (checkbox)
     *
     * @param val
     *            Schould message size be calculated?
     */
    public void setMessageSizeStatistic(boolean val) {
        cbMessageSizeStats.setSelected(val);
    }",False,False,This method sets whether the message size should be calculated and included in the sample result by selecting a checkbox.,False,"This code defines a method called ""setMessageSizeStatistic"" that takes a boolean parameter. It sets the selected state of a checkbox called ""cbMessageSizeStats"" based on the value of the parameter. This method is used to enable or disable the calculation and inclusion of message size in a sample result."
97,setUseNoSecurity(boolean),set use no security selected ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseNone,95,3,1,,"public void setUseNoSecurity(boolean selected) {
        rbUseNone.setSelected(selected);
    }",True,True,This method sets the selected state of a radio button to the value of the boolean parameter.,False,"The code defines a method named ""setUseNoSecurity"" that takes a boolean parameter. This method sets the selected state of a radio button named ""rbUseNone"" based on the value of the parameter."
98,getPassword(),get password ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthPassword,76,3,1,,"public String getPassword() {
        return tfAuthPassword.getText();
    }",False,False,This method returns the password entered in a text field.,False,"The code defines a method named ""getPassword"" that returns the text entered in a text field named ""tfAuthPassword"". This method can be used to retrieve the password entered by the user."
99,setPassword(String),set password auth password ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthPassword,98,3,1,,"public void setPassword(String authPassword) {
        tfAuthPassword.setText(authPassword);
    }",False,False,"This method sets the value of the text field ""tfAuthPassword"" to the value of the input parameter ""authPassword"".",False,
100,getUsername(),get username ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthUsername,76,3,1,,"public String getUsername() {
        return tfAuthUsername.getText();
    }",False,False,This method returns the username entered in a text field.,False,The code defines a method called `getUsername()` that retrieves the text entered in a text field named `tfAuthUsername` and returns it as a string.
101,setUsername(String),set username username ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthUsername,90,3,1,,"public void setUsername(String username) {
        tfAuthUsername.setText(username);
    }",False,False,This method sets the value of a text field (tfAuthUsername) to the provided username.,False,"The code defines a method called ""setUsername"" that takes a string parameter. This method sets the text of a text field called ""tfAuthUsername"" to the value of the provided username string."
102,getHeaderFields(),get header fields ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+modifyTestElement(TestElement),"org.apache.jmeter.testelement.property.CollectionProperty+CollectionProperty() org.apache.jmeter.testelement.property.AbstractProperty+setName(String) org.apache.jmeter.testelement.property.AbstractProperty+setName(String) java.util.Set+iterator() java.util.Map+keySet() java.util.Map+keySet() java.util.Set+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText() java.util.Map+get(Object) java.util.Map+get(Object) javax.swing.text.JTextComponent+getText() org.apache.jmeter.config.Argument+Argument(String,String) org.apache.jmeter.testelement.property.CollectionProperty+addItem(Object) org.apache.jmeter.testelement.property.CollectionProperty+addItem(Object)",org.apache.jmeter.protocol.smtp.sampler.SmtpSampler+HEADER_FIELDS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields,564,12,1,,"public CollectionProperty getHeaderFields() {
        CollectionProperty result = new CollectionProperty();
        result.setName(SmtpSampler.HEADER_FIELDS);
        for (Iterator<JTextField> iterator = headerFields.keySet().iterator(); iterator.hasNext();) {
            JTextField headerName = iterator.next();
            String name = headerName.getText();
            String value = headerFields.get(headerName).getText();
            Argument argument = new Argument(name, value);
            result.addItem(argument);
        }
        return result;
    }",False,False,"This method returns a CollectionProperty object that contains header fields. It iterates through a map of header fields, creates Argument objects with the header name and value, and adds them to the CollectionProperty object. The CollectionProperty object is then returned.",False,"This code defines a method named `getHeaderFields()` that returns a `CollectionProperty` object. It creates a new `CollectionProperty` instance, sets its name, and then iterates over a map of `JTextField` objects to extract header names and values. It creates an `Argument` object for each header and adds it to the `CollectionProperty` before returning it."
103,setHeaderFields(CollectionProperty),set header fields fields ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement) org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+configure(TestElement),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+clearHeaderFields() org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+clearHeaderFields() org.apache.jmeter.testelement.property.CollectionProperty+size() org.apache.jmeter.testelement.property.CollectionProperty+size() org.apache.jmeter.testelement.property.TestElementProperty+getObjectValue() org.apache.jmeter.testelement.property.CollectionProperty+get(int) org.apache.jmeter.testelement.property.CollectionProperty+get(int) org.apache.jmeter.testelement.property.TestElementProperty+getObjectValue() org.apache.jmeter.config.Argument+getName() org.apache.jmeter.config.Argument+getName() org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+addHeaderActionPerformed(ActionEvent) org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+addHeaderActionPerformed(ActionEvent) java.util.Map+get(Object) java.util.Map+get(Object) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) java.util.Map+get(Object) java.util.Map+get(Object) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) org.apache.jmeter.config.Argument+getValue() org.apache.jmeter.config.Argument+getValue() java.awt.Container+validate() java.awt.Container+validate(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+removeButtons org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields,601,13,1,,"public void setHeaderFields(CollectionProperty fields) {
        clearHeaderFields();
        for (int i = 0; i < fields.size(); i++) {
            Argument argument = (Argument)((TestElementProperty)fields.get(i)).getObjectValue();
            String name = argument.getName();
            JButton removeButton = addHeaderActionPerformed(null);
            JTextField nameTF = removeButtons.get(removeButton);
            nameTF.setText(name);
            JTextField valueTF = headerFields.get(nameTF);
            valueTF.setText(argument.getValue());            
        }
        validate();
    }",False,False,"This method sets the header fields of a collection property. It clears the existing header fields, then iterates through the collection property to set the name and value of each argument in the header fields. Finally, it validates the changes.",False,"The `setHeaderFields` method takes a collection of properties as input and sets the header fields accordingly. It iterates over the collection, extracts the name and value of each property, and sets them in the corresponding text fields. Finally, it validates the changes made."
104,initComponents(),init components main method of class builds all gui components for smtp sampler ,Method,SmtpPanel(),,"javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JLabel+JLabel(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextField+JTextField(int) javax.swing.JTextArea+JTextArea(int,int) javax.swing.JCheckBox+JCheckBox(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) javax.swing.AbstractButton+addActionListener(ActionListener) javax.swing.AbstractButton+addActionListener(ActionListener) +() +actionPerformed(ActionEvent)",org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlAddressFrom org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlAddressTo org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlAddressToCC org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlAddressToBCC org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlMailServerPort org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlMailServer org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlAttachFile org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlDutPortStandard org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlUsername org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlPassword org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlTrustStoreToUse org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+jlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServer org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServerPort org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailFrom org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailTo org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToCC org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToBCC org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthUsername org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthPassword org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+taMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbSuppressSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbSuppressSubject,20354,471,2,"/** 
 * Main method of class, builds all gui-components for SMTP-sampler.
 */
","/**
     * Main method of class, builds all gui-components for SMTP-sampler.
     */
    private void initComponents() {
        GridBagConstraints gridBagConstraints, gridBagConstraintsMain;

        jlAddressFrom = new JLabel(JMeterUtils.getResString(""smtp_from"")); // $NON-NLS-1$
        jlAddressTo = new JLabel(JMeterUtils.getResString(""smtp_to"")); // $NON-NLS-1$
        jlAddressToCC = new JLabel(JMeterUtils.getResString(""smtp_cc"")); // $NON-NLS-1$
        jlAddressToBCC = new JLabel(JMeterUtils.getResString(""smtp_bcc"")); // $NON-NLS-1$
        jlMailServerPort = new JLabel(JMeterUtils.getResString(""smtp_server_port"")); // $NON-NLS-1$
        jlMailServer = new JLabel(JMeterUtils.getResString(""smtp_server"")); // $NON-NLS-1$
        jlAttachFile = new JLabel(JMeterUtils.getResString(""smtp_attach_file"")); // $NON-NLS-1$
        jlDutPortStandard = new JLabel(JMeterUtils.getResString(""smtp_default_port"")); // $NON-NLS-1$
        jlUsername = new JLabel(JMeterUtils.getResString(""smtp_username"")); // $NON-NLS-1$
        jlPassword = new JLabel(JMeterUtils.getResString(""smtp_password"")); // $NON-NLS-1$
        jlTrustStoreToUse = new JLabel(JMeterUtils.getResString(""smtp_truststore"")); // $NON-NLS-1$
        jlSubject = new JLabel(JMeterUtils.getResString(""smtp_subject"")); // $NON-NLS-1$
        jlMessage = new JLabel(JMeterUtils.getResString(""smtp_message"")); // $NON-NLS-1$

        tfMailServer = new JTextField(30);
        tfMailServerPort = new JTextField(6);
        tfTrustStoreToUse = new JTextField(20);
        tfMailFrom = new JTextField(25);
        tfMailTo = new JTextField(25);
        tfMailToCC = new JTextField(25);
        tfMailToBCC = new JTextField(25);
        tfAuthUsername = new JTextField(20);
        tfAuthPassword = new JTextField(20);
        tfSubject = new JTextField(20);
        tfAttachment = new JTextField(30);
        tfEmlMessage = new JTextField(30);

        taMessage = new JTextArea(5, 20);
        
        cbSuppressSubject = new JCheckBox(JMeterUtils.getResString(""smtp_suppresssubj"")); // $NON-NLS-1$
        cbSuppressSubject.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                emptySubjectActionPerformed(evt);
            }
        });

        cbUseAuth = new JCheckBox(JMeterUtils.getResString(""smtp_useauth"")); // $NON-NLS-1$
        rbUseNone = new JRadioButton(JMeterUtils.getResString(""smtp_usenone"")); // $NON-NLS-1$
        rbUseSSL = new JRadioButton(JMeterUtils.getResString(""smtp_usessl"")); // $NON-NLS-1$
        rbUseStartTLS = new JRadioButton(JMeterUtils.getResString(""smtp_usestarttls"")); // $NON-NLS-1$

        cbTrustAllCerts = new JCheckBox(JMeterUtils.getResString(""smtp_trustall"")); // $NON-NLS-1$
        cbEnforceStartTLS = new JCheckBox(JMeterUtils.getResString(""smtp_enforcestarttls"")); // $NON-NLS-1$
        cbIncludeTimestamp = new JCheckBox(JMeterUtils.getResString(""smtp_timestamp"")); // $NON-NLS-1$
        cbMessageSizeStats = new JCheckBox(JMeterUtils.getResString(""smtp_messagesize"")); // $NON-NLS-1$
        cbEnableDebug = new JCheckBox(JMeterUtils.getResString(""smtp_enabledebug"")); // $NON-NLS-1$
        cbUseLocalTrustStore = new JCheckBox(JMeterUtils.getResString(""smtp_usetruststore"")); // $NON-NLS-1$
        cbUseEmlMessage = new JCheckBox(JMeterUtils.getResString(""smtp_eml"")); // $NON-NLS-1$

        attachmentFileChooser = new JFileChooser();
        emlFileChooser = new JFileChooser();

        browseButton = new JButton(JMeterUtils.getResString(""browse"")); // $NON-NLS-1$
        emlBrowseButton = new JButton(JMeterUtils.getResString(""browse"")); // $NON-NLS-1$

        attachmentFileChooser
                .addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        attachmentFolderFileChooserActionPerformed(evt);
                    }
                });

        emlFileChooser.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                emlFileChooserActionPerformed(evt);
            }
        });

        setLayout(new GridBagLayout());

        gridBagConstraintsMain = new GridBagConstraints();
        gridBagConstraintsMain.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraintsMain.anchor = GridBagConstraints.WEST;
        gridBagConstraintsMain.weightx = 0.5;

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        gridBagConstraints.fill = GridBagConstraints.NONE;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;

        /*
         * Server Settings
         */
        JPanel panelServerSettings = new JPanel(new GridBagLayout());
        panelServerSettings.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""smtp_server_settings""))); // $NON-NLS-1$

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelServerSettings.add(jlMailServer, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelServerSettings.add(tfMailServer, gridBagConstraints);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panelServerSettings.add(jlMailServerPort, gridBagConstraints);

        JPanel panelServerPortSettings = new JPanel(new GridBagLayout());
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelServerPortSettings.add(tfMailServerPort, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelServerPortSettings.add(jlDutPortStandard, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        panelServerSettings.add(panelServerPortSettings, gridBagConstraints);

        gridBagConstraintsMain.gridx = 0;
        gridBagConstraintsMain.gridy = 0;
        add(panelServerSettings, gridBagConstraintsMain);

        /*
         * E-Mail Settings
         */
        JPanel panelMailSettings = new JPanel(new GridBagLayout());
        panelMailSettings.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""smtp_mail_settings""))); // $NON-NLS-1$

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelMailSettings.add(jlAddressFrom, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelMailSettings.add(tfMailFrom, gridBagConstraints);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panelMailSettings.add(jlAddressTo, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        panelMailSettings.add(tfMailTo, gridBagConstraints);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        panelMailSettings.add(jlAddressToCC, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        panelMailSettings.add(tfMailToCC, gridBagConstraints);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        panelMailSettings.add(jlAddressToBCC, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        panelMailSettings.add(tfMailToBCC, gridBagConstraints);

        gridBagConstraintsMain.gridx = 0;
        gridBagConstraintsMain.gridy = 1;
        add(panelMailSettings, gridBagConstraintsMain);

        /*
         * Auth Settings
         */
        JPanel panelAuthSettings = new JPanel(new GridBagLayout());
        panelAuthSettings.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""smtp_auth_settings""))); // $NON-NLS-1$

        cbUseAuth.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbUseAuth.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbUseAuth.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbUseAuthActionPerformed(evt);
            }
        });
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelAuthSettings.add(cbUseAuth, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.weightx = 0;
        panelAuthSettings.add(jlUsername, gridBagConstraints);

        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weightx = 0.5;
        panelAuthSettings.add(tfAuthUsername, gridBagConstraints);
        tfAuthUsername.setEditable(false);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.weightx = 0;
        panelAuthSettings.add(jlPassword, gridBagConstraints);

        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 0.5;
        panelAuthSettings.add(tfAuthPassword, gridBagConstraints);
        tfAuthPassword.setEditable(false);

        gridBagConstraintsMain.gridx = 0;
        gridBagConstraintsMain.gridy = 2;
        add(panelAuthSettings, gridBagConstraintsMain);

        /*
         * Security Settings
         */
        JPanel panelSecuritySettings = new JPanel(new GridBagLayout());
        panelSecuritySettings.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""smtp_security_settings""))); // $NON-NLS-1$

        rbUseNone.setSelected(true);
        bgSecuritySettings = new ButtonGroup();
        bgSecuritySettings.add(rbUseNone);
        bgSecuritySettings.add(rbUseSSL);
        bgSecuritySettings.add(rbUseStartTLS);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelSecuritySettings.add(rbUseNone, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelSecuritySettings.add(rbUseSSL, gridBagConstraints);

        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        panelSecuritySettings.add(rbUseStartTLS, gridBagConstraints);

        rbUseNone.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                rbSecuritySettingsItemStateChanged(evt);
            }
        });
        rbUseSSL.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                rbSecuritySettingsItemStateChanged(evt);
            }
        });
        rbUseStartTLS.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                rbSecuritySettingsItemStateChanged(evt);
            }
        });

        cbTrustAllCerts.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbTrustAllCerts.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbTrustAllCerts.setEnabled(false);
        cbTrustAllCerts.setToolTipText(JMeterUtils.getResString(""smtp_trustall_tooltip"")); // $NON-NLS-1$
        cbTrustAllCerts.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbTrustAllCertsActionPerformed(evt);
            }
        });

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panelSecuritySettings.add(cbTrustAllCerts, gridBagConstraints);

        cbEnforceStartTLS.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbEnforceStartTLS.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbEnforceStartTLS.setEnabled(false);
        cbEnforceStartTLS.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        cbEnforceStartTLSActionPerformed(evt);
                    }
                });
        cbEnforceStartTLS.setToolTipText(JMeterUtils.getResString(""smtp_enforcestarttls_tooltip"")); // $NON-NLS-1$

        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        panelSecuritySettings.add(cbEnforceStartTLS, gridBagConstraints);

        cbUseLocalTrustStore.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbUseLocalTrustStore.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbUseLocalTrustStore.setEnabled(false);
        cbUseLocalTrustStore.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        cbUseLocalTrustStoreActionPerformed(evt);
                    }
                });

        cbUseLocalTrustStore.setToolTipText(JMeterUtils.getResString(""smtp_usetruststore_tooltip"")); // $NON-NLS-1$

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        panelSecuritySettings.add(cbUseLocalTrustStore, gridBagConstraints);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 1;
        jlTrustStoreToUse.setToolTipText(JMeterUtils.getResString(""smtp_truststore_tooltip""));
        panelSecuritySettings.add(jlTrustStoreToUse, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        tfTrustStoreToUse.setToolTipText(JMeterUtils.getResString(""smtp_truststore_tooltip""));
        panelSecuritySettings.add(tfTrustStoreToUse, gridBagConstraints);

        gridBagConstraintsMain.gridx = 0;
        gridBagConstraintsMain.gridy = 3;
        add(panelSecuritySettings, gridBagConstraintsMain);

        /*
         * (non-Javadoc) Message Settings
         */
        JPanel panelMessageSettings = new JPanel(new GridBagLayout());
        panelMessageSettings.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""smtp_message_settings""))); // $NON-NLS-1$

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelMessageSettings.add(jlSubject, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        panelMessageSettings.add(tfSubject, gridBagConstraints);
        
        cbSuppressSubject.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbSuppressSubject.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        panelMessageSettings.add(cbSuppressSubject, gridBagConstraints);

        cbIncludeTimestamp.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbIncludeTimestamp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        panelMessageSettings.add(cbIncludeTimestamp, gridBagConstraints);

        /*
         * Add the header panel
         */

        addHeaderFieldButton = new JButton(JMeterUtils.getResString(""smtp_header_add""));
        addHeaderFieldButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addHeaderActionPerformed(evt);
            }
        });
        headerFieldName = new JLabel(JMeterUtils.getResString(""smtp_header_name""));
        headerFieldValue = new JLabel(JMeterUtils.getResString(""smtp_header_value""));
        headerFieldsPanel = new JPanel(new GridBagLayout());
        
        headerFieldName.setVisible(false);
        headerFieldValue.setVisible(false);        

        headerGridY=0;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = headerGridY++;
        headerFieldsPanel.add(addHeaderFieldButton, gridBagConstraints);
        
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = headerGridY;
        headerFieldsPanel.add(headerFieldName, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = headerGridY++;
        headerFieldsPanel.add(headerFieldValue, gridBagConstraints);
        
        gridBagConstraintsMain.gridx = 1;
        gridBagConstraintsMain.gridy = 2;
        panelMessageSettings.add(headerFieldsPanel, gridBagConstraintsMain);        

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        panelMessageSettings.add(jlMessage, gridBagConstraints);

        taMessage.setBorder(BorderFactory.createBevelBorder(1));
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        panelMessageSettings.add(taMessage, gridBagConstraints);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        panelMessageSettings.add(jlAttachFile, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        panelMessageSettings.add(tfAttachment, gridBagConstraints);
        tfAttachment.setToolTipText(JMeterUtils.getResString(""smtp_attach_file_tooltip"")); // $NON-NLS-1$

        browseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        panelMessageSettings.add(browseButton, gridBagConstraints);

        cbUseEmlMessage.setSelected(false);
        cbUseEmlMessage.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbUseEmlMessageActionPerformed(evt);
            }
        });

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        panelMessageSettings.add(cbUseEmlMessage, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        tfEmlMessage.setEnabled(false);
        panelMessageSettings.add(tfEmlMessage, gridBagConstraints);

        emlBrowseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                emlBrowseButtonActionPerformed(evt);
            }
        });
        emlBrowseButton.setEnabled(false);

        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        panelMessageSettings.add(emlBrowseButton, gridBagConstraints);

        gridBagConstraintsMain.gridx = 0;
        gridBagConstraintsMain.gridy = 6;
        add(panelMessageSettings, gridBagConstraintsMain);

        /*
         * Additional Settings
         */
        JPanel panelAdditionalSettings = new JPanel(new GridBagLayout());
        panelAdditionalSettings.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""smtp_additional_settings""))); // $NON-NLS-1$

        cbMessageSizeStats.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbMessageSizeStats.setMargin(new java.awt.Insets(0, 0, 0, 0));

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelAdditionalSettings.add(cbMessageSizeStats, gridBagConstraints);

        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelAdditionalSettings.add(cbEnableDebug, gridBagConstraints);

        gridBagConstraintsMain.gridx = 0;
        gridBagConstraintsMain.gridy = 7;
        add(panelAdditionalSettings, gridBagConstraintsMain);
    }",False,False,The function of the initComponents() method is to initialize and build all the GUI components for the SMTP-sampler.,False,"The `initComponents()` method is responsible for building all the GUI components for the SMTP-sampler. It creates and configures various labels, text fields, checkboxes, buttons, and panels for different settings related to SMTP server, email, authentication, security, message, and additional settings."
105,cbUseAuthActionPerformed(ActionEvent),cb use auth action performed evt action performed method for checkbox use auth param evt action event to be handled ,Method,,,javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected() javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthUsername org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseAuth org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthPassword org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseAuth,320,10,2,"/** 
 * ActionPerformed-method for checkbox ""useAuth""
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for checkbox ""useAuth""
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void cbUseAuthActionPerformed(ActionEvent evt) {
        tfAuthUsername.setEditable(cbUseAuth.isSelected());
        tfAuthPassword.setEditable(cbUseAuth.isSelected());
    }",False,False,"This method is used to handle the action performed when the checkbox ""useAuth"" is clicked. It sets the ""editable"" property of the text fields ""tfAuthUsername"" and ""tfAuthPassword"" based on whether the checkbox is selected or not.",False,"The code is a method named ""cbUseAuthActionPerformed"" that is triggered when a checkbox named ""useAuth"" is clicked. It enables or disables the editability of two text fields named ""tfAuthUsername"" and ""tfAuthPassword"" based on whether the checkbox is selected or not."
106,cbUseLocalTrustStoreActionPerformed(ActionEvent),cb use local trust store action performed evt action performed method for checkbox use local trust store param evt action event to be handled ,Method,,,javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected() javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts,488,14,2,"/** 
 * ActionPerformed-method for checkbox ""useLocalTrustStore""
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for checkbox ""useLocalTrustStore""
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void cbUseLocalTrustStoreActionPerformed(
            ActionEvent evt) {
        final boolean selected = cbUseLocalTrustStore.isSelected();
        tfTrustStoreToUse.setEditable(selected); // must follow the checkbox setting
        if (selected) {
            cbTrustAllCerts.setSelected(false); // not compatible
        }
    }",True,True,"This method is an event handler for a checkbox called ""useLocalTrustStore"". It sets the ""editable"" property of a text field based on whether the checkbox is selected or not. If the checkbox is selected, it also deselects another checkbox called ""cbTrustAllCerts"".",False,"The method `cbUseLocalTrustStoreActionPerformed` is an event handler for a checkbox. It sets the editability of a text field based on the checkbox's selection, and if the checkbox is selected, it also deselects another checkbox."
107,cbTrustAllCertsActionPerformed(ActionEvent),cb trust all certs action performed evt action performed method for checkbox cb trust all certs param evt action event to be handled ,Method,,,javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse,481,14,2,"/** 
 * ActionPerformed-method for checkbox ""cbTrustAllCerts""
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for checkbox ""cbTrustAllCerts""
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void cbTrustAllCertsActionPerformed(
            ActionEvent evt) {
        final boolean selected = cbTrustAllCerts.isSelected();
        if (selected) {
            cbUseLocalTrustStore.setSelected(false); // not compatible
            tfTrustStoreToUse.setEditable(false); // must follow the checkbox setting
        }
    }",True,True,"This method is an event handler for a checkbox called ""cbTrustAllCerts"". When the checkbox is selected, it sets the ""cbUseLocalTrustStore"" checkbox to false and makes the ""tfTrustStoreToUse"" text field uneditable.",False,"This code is an event handler for a checkbox called ""cbTrustAllCerts"". When the checkbox is selected, it sets another checkbox called ""cbUseLocalTrustStore"" to false and makes a text field called ""tfTrustStoreToUse"" uneditable. This code is likely part of a larger program that deals with certificate trust settings."
108,attachmentFolderFileChooserActionPerformed(ActionEvent),attachment folder file chooser action performed evt action performed method for filechoser attachment file choser creates file choser object param evt action event to be handled ,Method,,,java.lang.String+trim() javax.swing.text.JTextComponent+getText() javax.swing.text.JTextComponent+getText() java.lang.String+trim() java.lang.String+length() java.lang.String+length() javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) java.io.File+getAbsolutePath() javax.swing.JFileChooser+getSelectedFile() javax.swing.JFileChooser+getSelectedFile() java.io.File+getAbsolutePath() javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) java.io.File+getAbsolutePath() javax.swing.JFileChooser+getSelectedFile() javax.swing.JFileChooser+getSelectedFile() java.io.File+getAbsolutePath(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.SmtpSampler+FILENAME_SEPARATOR org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+attachmentFileChooser org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+attachmentFileChooser,771,20,2,"/** 
 * ActionPerformed-method for filechoser ""attachmentFileChoser"", creates FileChoser-Object
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for filechoser ""attachmentFileChoser"", creates
     * FileChoser-Object
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void attachmentFolderFileChooserActionPerformed(ActionEvent evt) {
        final String attachments = tfAttachment.getText().trim();
        if (null != attachments && attachments.length() > 0) {
            tfAttachment.setText(attachments
                            + SmtpSampler.FILENAME_SEPARATOR
                            + attachmentFileChooser.getSelectedFile()
                                    .getAbsolutePath());
        } else {
            tfAttachment.setText(attachmentFileChooser.getSelectedFile()
                    .getAbsolutePath());
        }

    }",False,False,"This method is an ActionPerformed method for a file chooser called ""attachmentFolderFileChooser"". It creates a FileChooser object and handles the ActionEvent by updating the text in a text field based on the selected file in the file chooser.",False,"This code is an ActionPerformed method that is triggered when a file is chosen using a file chooser. It retrieves the selected file's absolute path and appends it to a text field, with a separator if the text field already contains a value."
109,browseButtonActionPerformed(ActionEvent),browse button action performed evt action performed method for button browse button opens file dialog object param evt action event to be handled ,Method,,,javax.swing.JFileChooser+showOpenDialog(Component) javax.swing.JFileChooser+showOpenDialog(Component),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+attachmentFileChooser,283,9,2,"/** 
 * ActionPerformed-method for button ""browseButton"", opens FileDialog-Object
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for button ""browseButton"", opens FileDialog-Object
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void browseButtonActionPerformed(ActionEvent evt) {
        attachmentFileChooser.showOpenDialog(this);
    }",False,False,"The function of the method is to handle the ActionEvent when the ""browseButton"" is clicked. It opens a FileDialog object to allow the user to select a file for attachment.",False,"This code defines a private method called ""browseButtonActionPerformed"" that is triggered when a button is clicked. It opens a file dialog box for the user to select a file."
110,cbUseEmlMessageActionPerformed(ActionEvent),cb use eml message action performed evt ,Method,,,javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected() javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+emlBrowseButton org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+taMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+browseButton org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+emlBrowseButton org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+taMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+browseButton,995,27,2,,"private void cbUseEmlMessageActionPerformed(ActionEvent evt) {
        if (cbUseEmlMessage.isSelected()) {
            tfEmlMessage.setEnabled(true);
            emlBrowseButton.setEnabled(true);

            /*tfMailFrom.setEnabled(false);
            tfMailTo.setEnabled(false);
            tfMailToCC.setEnabled(false);
            tfMailToBCC.setEnabled(false);
            tfSubject.setEnabled(false);*/
            taMessage.setEnabled(false);
            tfAttachment.setEnabled(false);
            browseButton.setEnabled(false);
        } else {
            tfEmlMessage.setEnabled(false);
            emlBrowseButton.setEnabled(false);

            /*tfMailFrom.setEnabled(true);
            tfMailTo.setEnabled(true);
            tfMailToCC.setEnabled(true);
            tfMailToBCC.setEnabled(true);
            tfSubject.setEnabled(true);*/
            taMessage.setEnabled(true);
            tfAttachment.setEnabled(true);
            browseButton.setEnabled(true);
        }
    }",False,False,"The function of this method is to enable or disable certain components based on the selection of a checkbox. If the checkbox is selected, it enables the tfEmlMessage and emlBrowseButton components, and disables the taMessage, tfAttachment, and browseButton components. If the checkbox is not selected, it disables the tfEmlMessage and emlBrowseButton components, and enables the taMessage, tfAttachment, and browseButton components.",False,This code is a method that is triggered when a checkbox is selected or deselected. It enables or disables certain text fields and buttons based on the checkbox's state.
111,emlFileChooserActionPerformed(ActionEvent),eml file chooser action performed evt action performed method for filechoser eml file choser creates file choser object param evt action event to be handled ,Method,,,javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) java.io.File+getAbsolutePath() javax.swing.JFileChooser+getSelectedFile() javax.swing.JFileChooser+getSelectedFile() java.io.File+getAbsolutePath(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+emlFileChooser,329,10,2,"/** 
 * ActionPerformed-method for filechoser ""emlFileChoser"", creates FileChoser-Object
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for filechoser ""emlFileChoser"", creates
     * FileChoser-Object
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void emlFileChooserActionPerformed(ActionEvent evt) {
        tfEmlMessage.setText(emlFileChooser.getSelectedFile().getAbsolutePath());
    }",False,False,"This method is an ActionPerformed method for a file chooser called ""emlFileChooser"". It sets the text of a text field called ""tfEmlMessage"" to the absolute path of the selected file in the file chooser.",False,"The code is a method called ""emlFileChooserActionPerformed"" that is triggered when a file is chosen using a file chooser. It sets the absolute path of the selected file to a text field called ""tfEmlMessage""."
112,emlBrowseButtonActionPerformed(ActionEvent),eml browse button action performed evt action performed method for button eml button opens file dialog object param evt action event to be handled ,Method,,,javax.swing.JFileChooser+showOpenDialog(Component) javax.swing.JFileChooser+showOpenDialog(Component),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+emlFileChooser,276,9,2,"/** 
 * ActionPerformed-method for button ""emlButton"", opens FileDialog-Object
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for button ""emlButton"", opens FileDialog-Object
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void emlBrowseButtonActionPerformed(ActionEvent evt) {
        emlFileChooser.showOpenDialog(this);
    }",False,False,"This method is an ActionPerformed method for a button called ""emlButton"". It opens a FileDialog object when the button is clicked.",False,"This code defines a method called ""emlBrowseButtonActionPerformed"" that is triggered when a button is clicked. It opens a file dialog for selecting a file to open."
113,cbEnforceStartTLSActionPerformed(ActionEvent),cb enforce start tls action performed evt action performed method for checkbox enforce start tls empty method header param evt action event to be handled ,Method,,,,,244,9,2,"/** 
 * ActionPerformed-method for checkbox ""enforceStartTLS"", empty method header
 * @param evt ActionEvent to be handled
 */
","/**
     * ActionPerformed-method for checkbox ""enforceStartTLS"", empty method
     * header
     *
     * @param evt
     *            ActionEvent to be handled
     */
    private void cbEnforceStartTLSActionPerformed(ActionEvent evt) {
    }",True,True,"This method serves as an empty action performed method for the checkbox ""enforceStartTLS"".",False,"The code contains a method named ""cbEnforceStartTLSActionPerformed"" which is triggered when a checkbox named ""enforceStartTLS"" is clicked. However, the method itself is empty and does not perform any specific actions."
114,rbSecuritySettingsItemStateChanged(ItemEvent),rb security settings item state changed evt item state changed method for radiobutton security settings param evt item event to be handled ,Method,,,java.util.EventObject+getSource() java.util.EventObject+getSource() javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.text.JTextComponent+setEditable(boolean) javax.swing.text.JTextComponent+setEditable(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseNone org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseSSL org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseStartTLS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbTrustAllCerts org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnforceStartTLS org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseLocalTrustStore org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse,1289,31,2,"/** 
 * ItemStateChanged-method for radiobutton ""securitySettings""
 * @param evt ItemEvent to be handled
 */
","/**
     * ItemStateChanged-method for radiobutton ""securitySettings""
     *
     * @param evt
     *            ItemEvent to be handled
     */
    private void rbSecuritySettingsItemStateChanged(ItemEvent evt) {
        final Object source = evt.getSource();
        if (source == rbUseNone) {
            cbTrustAllCerts.setEnabled(false);
            cbTrustAllCerts.setSelected(false);
            cbEnforceStartTLS.setEnabled(false);
            cbEnforceStartTLS.setSelected(false);
            cbUseLocalTrustStore.setSelected(false);
            cbUseLocalTrustStore.setEnabled(false);
            tfTrustStoreToUse.setEditable(false);
        } else if (source == rbUseSSL) {
            cbTrustAllCerts.setEnabled(true);
            cbEnforceStartTLS.setEnabled(false);
            cbEnforceStartTLS.setSelected(false);
            cbUseLocalTrustStore.setEnabled(true);
            tfTrustStoreToUse.setEditable(false);
        } else if (source == rbUseStartTLS) {
            cbTrustAllCerts.setEnabled(true);
            cbTrustAllCerts.setSelected(false);
            cbEnforceStartTLS.setEnabled(true);
            cbUseLocalTrustStore.setEnabled(true);
            cbUseLocalTrustStore.setSelected(false);
            tfTrustStoreToUse.setEditable(false);
        }
    }",True,True,"The function of this method is to handle the item state change event for a radio button named ""securitySettings"". It enables or disables certain checkboxes and sets their selected values based on the selected radio button. It also sets the editable property of a text field.",False,"This code is a method called ""rbSecuritySettingsItemStateChanged"" that is triggered when the state of a radio button changes. It handles the different states of the radio buttons and enables or disables certain checkboxes and text fields accordingly."
115,clear(),clear reset all the gui fields ,Method,,org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui+clearGui(),javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.text.JTextComponent+setText(String) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) javax.swing.AbstractButton+setSelected(boolean) org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+clearHeaderFields() org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+clearHeaderFields() java.awt.Container+validate() java.awt.Container+validate(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbIncludeTimestamp org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbMessageSizeStats org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbEnableDebug org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbUseAuth org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+taMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAttachment org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthPassword org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfAuthUsername org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfEmlMessage org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailFrom org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServer org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailServerPort org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailTo org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToBCC org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfMailToCC org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfTrustStoreToUse org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+rbUseNone org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbSuppressSubject,874,27,1,"/** 
 * Reset all the Gui fields.
 */
","/**
     * Reset all the Gui fields.
     */
    public void clear() {
        cbIncludeTimestamp.setSelected(false);
        cbMessageSizeStats.setSelected(false);
        cbEnableDebug.setSelected(false);
        cbUseEmlMessage.setSelected(false);
        cbUseAuth.setSelected(false);
        taMessage.setText("""");
        tfAttachment.setText("""");
        tfAuthPassword.setText("""");
        tfAuthUsername.setText("""");
        tfEmlMessage.setText("""");
        tfMailFrom.setText("""");
        tfMailServer.setText("""");
        tfMailServerPort.setText("""");
        tfMailTo.setText("""");
        tfMailToBCC.setText("""");
        tfMailToCC.setText("""");
        tfSubject.setText("""");
        tfTrustStoreToUse.setText("""");
        rbUseNone.setSelected(true);
        cbSuppressSubject.setSelected(false);
        clearHeaderFields();
        validate();        
    }",False,False,The clear() method resets all the GUI fields by setting their values to default or empty.,False,"The `clear()` method is used to reset all the fields in a GUI. It sets various checkboxes, text fields, and radio buttons to their default values and clears the text areas. It also calls the `clearHeaderFields()` method and performs validation."
116,clearHeaderFields(),clear header fields ,Method,setHeaderFields(CollectionProperty) clear(),,javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) java.util.Set+iterator() java.util.Map+keySet() java.util.Map+keySet() java.util.Set+iterator() java.util.Iterator+hasNext() java.util.Iterator+hasNext() java.util.Iterator+next() java.util.Iterator+next() java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.util.Map+remove(Object) java.util.Map+remove(Object) java.util.Iterator+remove() java.util.Iterator+remove(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldName org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldValue org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+removeButtons org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+removeButtons org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldsPanel org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldsPanel org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldsPanel org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields,764,18,2,,"private void clearHeaderFields() {
        headerFieldName.setVisible(false);
           headerFieldValue.setVisible(false);

        for (Iterator<JButton> iterator = removeButtons.keySet().iterator(); iterator.hasNext();) {
            JButton removeButton = iterator.next();
               JTextField headerName = removeButtons.get(removeButton);
            JTextField headerValue = headerFields.get(headerName);
            
            headerFieldsPanel.remove(headerName);
            if (headerValue != null){ // Can be null (not sure why)
                headerFieldsPanel.remove(headerValue);
            }
            headerFieldsPanel.remove(removeButton);    
            headerFields.remove(headerName);
            iterator.remove();
        }
    }",False,False,"The function of this method is to clear the header fields in a graphical user interface. It hides the header field name and value components, removes them from the header fields panel, and removes the associated remove buttons.",False,"The `clearHeaderFields()` method is used to clear the header fields in a graphical user interface. It hides the header field name and value components, removes them from the panel, and removes the associated remove buttons and header fields from their respective collections."
117,addHeaderActionPerformed(ActionEvent),add header action performed evt ,Method,setHeaderFields(CollectionProperty),,"java.util.Map+size() java.util.Map+size() javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JTextField+JTextField() javax.swing.JTextField+JTextField() javax.swing.JButton+JButton(String) org.apache.jmeter.util.JMeterUtils+getResString(String) org.apache.jmeter.util.JMeterUtils+getResString(String) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) java.util.Map+put(K,V) javax.swing.AbstractButton+addActionListener(ActionListener) javax.swing.AbstractButton+addActionListener(ActionListener) +() +actionPerformed(ActionEvent)",org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldName org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldValue org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+removeButtons,1669,40,2,,"private JButton addHeaderActionPerformed(ActionEvent evt){
        if(headerFields.size() == 0){
            headerFieldName.setVisible(true);
            headerFieldValue.setVisible(true);
        }
        JTextField nameTF = new JTextField();
        JTextField valueTF = new JTextField();        
        JButton removeButton = new JButton(JMeterUtils.getResString(""smtp_header_remove""));
        headerFields.put(nameTF, valueTF);
        removeButtons.put(removeButton, nameTF);
        
        removeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                removeHeaderActionPerformed(evt);
            }
        });
        
        GridBagConstraints gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = headerGridY;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        headerFieldsPanel.add(nameTF, gridBagConstraints);
        
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = headerGridY;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        headerFieldsPanel.add(valueTF, gridBagConstraints);
        
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = headerGridY++;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        headerFieldsPanel.add(removeButton, gridBagConstraints);
        
        validate();
        return removeButton;
    }",False,False,"The function of this method is to add a header field to a panel. It creates text fields for the name and value of the header field, as well as a remove button. It sets the layout constraints for the components and adds them to the panel. Finally, it returns the remove button.",False,"This code defines a private method called ""addHeaderActionPerformed"" that is triggered by an ActionEvent. It adds a header field to a panel, consisting of a name text field, a value text field, and a remove button. The method returns the remove button."
118,removeHeaderActionPerformed(ActionEvent),remove header action performed evt ,Method,,,java.util.EventObject+getSource() java.util.EventObject+getSource() java.util.Map+size() java.util.Map+size() javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) javax.swing.JComponent+setVisible(boolean) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+get(Object) java.util.Map+remove(Object) java.util.Map+remove(Object) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+remove(Component) java.awt.Container+validate() java.awt.Container+validate(),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldName org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldValue org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+removeButtons org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFields org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldsPanel org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldsPanel org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+headerFieldsPanel,681,17,2,,"private void removeHeaderActionPerformed(ActionEvent evt){
        final Object source = evt.getSource();
        if(source != null && source instanceof JButton){
            if(headerFields.size() == 1){
                headerFieldName.setVisible(false);
                headerFieldValue.setVisible(false);
            }
            JTextField nameTF = removeButtons.get(source);
            JTextField valueTF = headerFields.get(nameTF);
            headerFields.remove(nameTF);
            
            headerFieldsPanel.remove(nameTF);
            headerFieldsPanel.remove(valueTF);
            headerFieldsPanel.remove((JButton)source);
            validate();
        }
    }",False,False,The function of this method is to remove a header field from a headerFieldsPanel if the source of the event is a JButton and there is only one header field remaining.,False,This code is a method that is triggered when a button is clicked. It removes a header field from a panel and updates the UI accordingly.
119,emptySubjectActionPerformed(ActionEvent),empty subject action performed evt ,Method,,,java.util.EventObject+getSource() java.util.EventObject+getSource() javax.swing.AbstractButton+isSelected() javax.swing.AbstractButton+isSelected() javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.JComponent+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean) javax.swing.AbstractButton+setEnabled(boolean),org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbSuppressSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbIncludeTimestamp org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+tfSubject org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel+cbIncludeTimestamp,391,12,2,,"private void emptySubjectActionPerformed(ActionEvent evt) {
		final Object source = evt.getSource();
    	if(source != null && source instanceof JCheckBox){
    		if(cbSuppressSubject.isSelected()){
    			tfSubject.setEnabled(false);
    			cbIncludeTimestamp.setEnabled(false);
    		}else{
    			tfSubject.setEnabled(true);
    			cbIncludeTimestamp.setEnabled(true);
    		}
    	}		
	}",False,False,"This method is triggered when the ""emptySubject"" action is performed. It checks if the source of the event is a JCheckBox and if the ""cbSuppressSubject"" checkbox is selected. If it is selected, it disables the ""tfSubject"" text field and the ""cbIncludeTimestamp"" checkbox. If it is not selected, it enables them.",False,"This code is a method named ""emptySubjectActionPerformed"" that is triggered by an ActionEvent. It checks if the source of the event is a JCheckBox and if it is selected, it disables certain components, otherwise it enables them."
