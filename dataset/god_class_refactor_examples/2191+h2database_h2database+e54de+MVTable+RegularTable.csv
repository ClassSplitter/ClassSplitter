index,name,type,inner invocations,external invocations,calls,visits,length,lines,modifier,annotation,full text,removed
1,WAITING_FOR_LOCK,Field,,,,,136,4,25,"/** 
 * The table name this thread is waiting to lock.
 */
","/**
     * The table name this thread is waiting to lock.
     */
    public static final DebuggingThreadLocal<String> WAITING_FOR_LOCK;",False
2,EXCLUSIVE_LOCKS,Field,,,,,151,4,25,"/** 
 * The table names this thread has exclusively locked.
 */
","/**
     * The table names this thread has exclusively locked.
     */
    public static final DebuggingThreadLocal<ArrayList<String>> EXCLUSIVE_LOCKS;",False
3,SHARED_LOCKS,Field,,,,,147,4,25,"/** 
 * The tables names this thread has a shared lock on.
 */
","/**
     * The tables names this thread has a shared lock on.
     */
    public static final DebuggingThreadLocal<ArrayList<String>> SHARED_LOCKS;",False
4,TraceLockEvent,Field,,,,,80,4,2,"/** 
 * The type of trace lock events
 */
","/**
     * The type of trace lock events
     */
    private enum TraceLockEvent",False
5,eventText,Field,TraceLockEvent(String),,,,31,1,18,,private final String eventText;,False
6,TraceLockEvent(String),Method,,,,org.h2.mvstore.db.MVTable+eventText org.h2.mvstore.db.MVTable+eventText,84,3,0,,"TraceLockEvent(String eventText) {
            this.eventText = eventText;
        }",False
7,getEventText(),Method,,,,org.h2.mvstore.db.MVTable+eventText,70,3,1,,"public String getEventText() {
            return eventText;
        }",False
8,NO_EXTRA_INFO,Field,,,,,47,1,26,,"private static final String NO_EXTRA_INFO = """";",False
9,primaryIndex,Field,,,,,36,1,2,,private MVPrimaryIndex primaryIndex;,False
10,indexes,Field,,,,,67,1,18,,private final ArrayList<Index> indexes = Utils.newSmallArrayList();,False
11,lastModificationId,Field,,,,,63,1,18,,private final AtomicLong lastModificationId = new AtomicLong();,False
12,lockExclusiveSession,Field,,,,,46,1,66,,private volatile Session lockExclusiveSession;,True
13,lockSharedSessions,Field,,,,,109,2,18,,"private final ConcurrentHashMap<Session, Session> lockSharedSessions =
            new ConcurrentHashMap<>();",True
14,waitingSessions,Field,,,,,237,5,18,"/** 
 * The queue of sessions waiting to lock the table. It is a FIFO queue to prevent starvation, since Java's synchronized locking is biased.
 */
","/**
     * The queue of sessions waiting to lock the table. It is a FIFO queue to
     * prevent starvation, since Java's synchronized locking is biased.
     */
    private final ArrayDeque<Session> waitingSessions = new ArrayDeque<>();",False
15,traceLock,Field,,,,,30,1,18,,private final Trace traceLock;,False
16,changesUntilAnalyze,Field,,,,,48,1,18,,private final AtomicInteger changesUntilAnalyze;,False
17,nextAnalyze,Field,,,,,24,1,2,,private int nextAnalyze;,False
18,containsLargeObject,Field,,,,,42,1,18,,private final boolean containsLargeObject;,True
19,rowIdColumn,Field,,,,,27,1,2,,private Column rowIdColumn;,True
20,store,Field,"MVTable(CreateTableData,MVTableEngine.Store)",,,,40,1,18,,private final MVTableEngine.Store store;,False
21,transactionStore,Field,"MVTable(CreateTableData,MVTableEngine.Store)",,,,48,1,18,,private final TransactionStore transactionStore;,False
22,"MVTable(CreateTableData,MVTableEngine.Store)",Method,,,"org.h2.engine.Database+getSettings() org.h2.engine.Database+getSettings() java.util.concurrent.atomic.AtomicInteger+AtomicInteger(int) org.h2.mvstore.db.MVTableEngine.Store+getTransactionStore() org.h2.mvstore.db.MVTableEngine.Store+getTransactionStore() org.h2.table.Table+getColumns() org.h2.table.Table+getColumns() org.h2.value.DataType+isLargeObject(int) org.h2.value.DataType+isLargeObject(int) org.h2.value.TypeInfo+getValueType() org.h2.table.Column+getType() org.h2.table.Column+getType() org.h2.value.TypeInfo+getValueType() org.h2.engine.Database+getTrace(int) org.h2.engine.Database+getTrace(int) org.h2.mvstore.db.MVPrimaryIndex+MVPrimaryIndex(Database,MVTable,int,IndexColumn[],IndexType) org.h2.engine.DbObjectBase+getId() org.h2.engine.DbObjectBase+getId() org.h2.table.IndexColumn+wrap(Column[]) org.h2.table.IndexColumn+wrap(Column[]) org.h2.table.Table+getColumns() org.h2.table.Table+getColumns() org.h2.index.IndexType+createScan(boolean) org.h2.index.IndexType+createScan(boolean) java.util.ArrayList+add(E) java.util.ArrayList+add(E)",org.h2.mvstore.db.MVTable+nextAnalyze org.h2.engine.DbSettings+analyzeAuto org.h2.engine.DbObjectBase+database org.h2.engine.DbSettings+analyzeAuto org.h2.mvstore.db.MVTable+changesUntilAnalyze org.h2.mvstore.db.MVTable+nextAnalyze org.h2.mvstore.db.MVTable+nextAnalyze org.h2.mvstore.db.MVTable+store org.h2.mvstore.db.MVTable+store org.h2.mvstore.db.MVTable+transactionStore org.h2.mvstore.db.MVTable+transactionStore org.h2.table.Table+isHidden org.h2.table.Table+isHidden org.h2.command.ddl.CreateTableData+isHidden org.h2.mvstore.db.MVTable+containsLargeObject org.h2.mvstore.db.MVTable+traceLock org.h2.engine.DbObjectBase+database org.h2.message.Trace+LOCK org.h2.mvstore.db.MVTable+primaryIndex org.h2.engine.DbObjectBase+database org.h2.mvstore.db.MVTable+indexes org.h2.mvstore.db.MVTable+primaryIndex,844,21,1,,"public MVTable(CreateTableData data, MVTableEngine.Store store) {
        super(data);
        nextAnalyze = database.getSettings().analyzeAuto;
        changesUntilAnalyze = nextAnalyze <= 0 ? null : new AtomicInteger(nextAnalyze);
        this.store = store;
        this.transactionStore = store.getTransactionStore();
        this.isHidden = data.isHidden;
        boolean b = false;
        for (Column col : getColumns()) {
            if (DataType.isLargeObject(col.getType().getValueType())) {
                b = true;
                break;
            }
        }
        containsLargeObject = b;
        traceLock = database.getTrace(Trace.LOCK);

        primaryIndex = new MVPrimaryIndex(database, this, getId(),
                IndexColumn.wrap(getColumns()), IndexType.createScan(true));
        indexes.add(primaryIndex);
    }",False
23,getMapName(),Method,,org.h2.mvstore.db.MVTableEngine+Store.createTable(CreateTableData) org.h2.mvstore.db.MVTableEngine+Store.removeTable(MVTable),org.h2.mvstore.db.MVPrimaryIndex+getMapName() org.h2.mvstore.db.MVPrimaryIndex+getMapName(),org.h2.mvstore.db.MVTable+primaryIndex,76,3,1,,"public String getMapName() {
        return primaryIndex.getMapName();
    }",False
24,"lock(Session,boolean,boolean)",Method,,,"org.h2.engine.Database+getLockMode() org.h2.engine.Database+getLockMode() java.util.concurrent.ConcurrentHashMap+containsKey(Object) java.util.concurrent.ConcurrentHashMap+containsKey(Object) org.h2.mvstore.db.MVTable+getLockSyncObject() org.h2.mvstore.db.MVTable+getLockSyncObject() java.util.concurrent.ConcurrentHashMap+containsKey(Object) java.util.concurrent.ConcurrentHashMap+containsKey(Object) org.h2.engine.Session+setWaitForLock(Table,Thread) org.h2.engine.Session+setWaitForLock(Table,Thread) java.lang.Thread+currentThread() java.lang.Thread+currentThread() org.h2.util.DebuggingThreadLocal+set(T) org.h2.util.DebuggingThreadLocal+set(T) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() java.util.ArrayDeque+addLast(E) java.util.ArrayDeque+addLast(E) org.h2.mvstore.db.MVTable+doLock1(Session,int,boolean) org.h2.mvstore.db.MVTable+doLock1(Session,int,boolean) org.h2.engine.Session+setWaitForLock(Table,Thread) org.h2.engine.Session+setWaitForLock(Table,Thread) org.h2.util.DebuggingThreadLocal+remove() org.h2.util.DebuggingThreadLocal+remove() java.util.ArrayDeque+remove(Object) java.util.ArrayDeque+remove(Object)",org.h2.engine.DbObjectBase+database org.h2.engine.Constants+LOCK_MODE_OFF org.h2.mvstore.db.MVTable+lockExclusiveSession org.h2.mvstore.db.MVTable+lockExclusiveSession org.h2.mvstore.db.MVTable+lockSharedSessions org.h2.mvstore.db.MVTable+lockSharedSessions org.h2.engine.SysProperties+THREAD_DEADLOCK_DETECTOR org.h2.mvstore.db.MVTable+WAITING_FOR_LOCK org.h2.mvstore.db.MVTable+waitingSessions org.h2.engine.SysProperties+THREAD_DEADLOCK_DETECTOR org.h2.mvstore.db.MVTable+WAITING_FOR_LOCK org.h2.mvstore.db.MVTable+waitingSessions,1675,47,1,,"@Override
    public boolean lock(Session session, boolean exclusive,
            boolean forceLockEvenInMvcc) {
        int lockMode = database.getLockMode();
        if (lockMode == Constants.LOCK_MODE_OFF) {
            return false;
        }
        if (!forceLockEvenInMvcc) {
            // MVCC: update, delete, and insert use a shared lock.
            // Select doesn't lock except when using FOR UPDATE and
            // the system property h2.selectForUpdateMvcc
            // is not enabled
            if (exclusive) {
                exclusive = false;
            } else {
                if (lockExclusiveSession == null) {
                    return false;
                }
            }
        }
        if (lockExclusiveSession == session) {
            return true;
        }
        if (!exclusive && lockSharedSessions.containsKey(session)) {
            return true;
        }
        synchronized (getLockSyncObject()) {
            if (!exclusive && lockSharedSessions.containsKey(session)) {
                return true;
            }
            session.setWaitForLock(this, Thread.currentThread());
            if (SysProperties.THREAD_DEADLOCK_DETECTOR) {
                WAITING_FOR_LOCK.set(getName());
            }
            waitingSessions.addLast(session);
            try {
                doLock1(session, lockMode, exclusive);
            } finally {
                session.setWaitForLock(null, null);
                if (SysProperties.THREAD_DEADLOCK_DETECTOR) {
                    WAITING_FOR_LOCK.remove();
                }
                waitingSessions.remove(session);
            }
        }
        return false;
    }",False
25,getLockSyncObject(),Method,"lock(Session,boolean,boolean) doLock1(Session,int,boolean) unlock(Session)",,org.h2.engine.Database+isMultiThreaded() org.h2.engine.Database+isMultiThreaded(),org.h2.engine.DbObjectBase+database org.h2.engine.DbObjectBase+database,453,14,2,"/** 
 * The the object on which to synchronize and wait on. For the multi-threaded mode, this is this object, but for non-multi-threaded, it is the database, as in this case all operations are synchronized on the database object.
 * @return the lock sync object
 */
","/**
     * The the object on which to synchronize and wait on. For the
     * multi-threaded mode, this is this object, but for non-multi-threaded, it
     * is the database, as in this case all operations are synchronized on the
     * database object.
     *
     * @return the lock sync object
     */
    private Object getLockSyncObject() {
        if (database.isMultiThreaded()) {
            return this;
        }
        return database;
    }",False
26,"doLock1(Session,int,boolean)",Method,"lock(Session,boolean,boolean)",,"org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) java.util.ArrayDeque+getFirst() java.util.ArrayDeque+getFirst() org.h2.mvstore.db.MVTable+doLock2(Session,int,boolean) org.h2.mvstore.db.MVTable+doLock2(Session,int,boolean) org.h2.mvstore.db.MVTable+checkDeadlock(Session,Session,Set<Session>) org.h2.mvstore.db.MVTable+checkDeadlock(Session,Session,Set<Session>) org.h2.message.DbException+get(int,String) org.h2.message.DbException+get(int,String) org.h2.mvstore.db.MVTable+getDeadlockDetails(ArrayList<Session>,boolean) org.h2.mvstore.db.MVTable+getDeadlockDetails(ArrayList<Session>,boolean) java.lang.System+nanoTime() java.lang.System+nanoTime() java.util.concurrent.TimeUnit+toNanos(long) java.util.concurrent.TimeUnit+toNanos(long) org.h2.engine.Session+getLockTimeout() org.h2.engine.Session+getLockTimeout() org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) org.h2.engine.Session+getLockTimeout() org.h2.engine.Session+getLockTimeout() org.h2.message.DbException+get(int,String) org.h2.message.DbException+get(int,String) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) org.h2.engine.Database+getLockMode() org.h2.engine.Database+getLockMode() java.lang.Runtime+freeMemory() java.lang.Runtime+getRuntime() java.lang.Runtime+getRuntime() java.lang.Runtime+freeMemory() java.lang.System+gc() java.lang.System+gc() java.lang.Runtime+freeMemory() java.lang.Runtime+getRuntime() java.lang.Runtime+getRuntime() java.lang.Runtime+freeMemory() java.lang.Math+min(long,long) java.lang.Math+min(long,long) java.util.concurrent.TimeUnit+toMillis(long) java.util.concurrent.TimeUnit+toMillis(long) java.lang.Object+wait(long) org.h2.mvstore.db.MVTable+getLockSyncObject() org.h2.mvstore.db.MVTable+getLockSyncObject() java.lang.Object+wait(long)",org.h2.mvstore.db.MVTable+TraceLockEvent org.h2.mvstore.db.MVTable+NO_EXTRA_INFO org.h2.mvstore.db.MVTable+waitingSessions org.h2.api.ErrorCode+DEADLOCK_1 java.util.concurrent.TimeUnit+MILLISECONDS org.h2.mvstore.db.MVTable+TraceLockEvent org.h2.mvstore.db.MVTable+NO_EXTRA_INFO org.h2.api.ErrorCode+LOCK_TIMEOUT_1 org.h2.mvstore.db.MVTable+TraceLockEvent org.h2.mvstore.db.MVTable+NO_EXTRA_INFO org.h2.engine.DbObjectBase+database org.h2.engine.Constants+LOCK_MODE_TABLE_GC org.h2.engine.Constants+DEADLOCK_CHECK java.util.concurrent.TimeUnit+NANOSECONDS,2460,55,2,,"private void doLock1(Session session, int lockMode, boolean exclusive) {
        traceLock(session, exclusive, TraceLockEvent.TRACE_LOCK_REQUESTING_FOR, NO_EXTRA_INFO);
        // don't get the current time unless necessary
        long max = 0;
        boolean checkDeadlock = false;
        while (true) {
            // if I'm the next one in the queue
            if (waitingSessions.getFirst() == session) {
                if (doLock2(session, lockMode, exclusive)) {
                    return;
                }
            }
            if (checkDeadlock) {
                ArrayList<Session> sessions = checkDeadlock(session, null, null);
                if (sessions != null) {
                    throw DbException.get(ErrorCode.DEADLOCK_1,
                            getDeadlockDetails(sessions, exclusive));
                }
            } else {
                // check for deadlocks from now on
                checkDeadlock = true;
            }
            long now = System.nanoTime();
            if (max == 0) {
                // try at least one more time
                max = now + TimeUnit.MILLISECONDS.toNanos(session.getLockTimeout());
            } else if (now >= max) {
                traceLock(session, exclusive,
                        TraceLockEvent.TRACE_LOCK_TIMEOUT_AFTER, NO_EXTRA_INFO+session.getLockTimeout());
                throw DbException.get(ErrorCode.LOCK_TIMEOUT_1, getName());
            }
            try {
                traceLock(session, exclusive, TraceLockEvent.TRACE_LOCK_WAITING_FOR, NO_EXTRA_INFO);
                if (database.getLockMode() == Constants.LOCK_MODE_TABLE_GC) {
                    for (int i = 0; i < 20; i++) {
                        long free = Runtime.getRuntime().freeMemory();
                        System.gc();
                        long free2 = Runtime.getRuntime().freeMemory();
                        if (free == free2) {
                            break;
                        }
                    }
                }
                // don't wait too long so that deadlocks are detected early
                long sleep = Math.min(Constants.DEADLOCK_CHECK,
                        TimeUnit.NANOSECONDS.toMillis(max - now));
                if (sleep == 0) {
                    sleep = 1;
                }
                getLockSyncObject().wait(sleep);
            } catch (InterruptedException e) {
                // ignore
            }
        }
    }",False
27,"doLock2(Session,int,boolean)",Method,"doLock1(Session,int,boolean)",,"java.util.concurrent.ConcurrentHashMap+isEmpty() java.util.concurrent.ConcurrentHashMap+isEmpty() org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) org.h2.engine.Session+addLock(Table) org.h2.engine.Session+addLock(Table) org.h2.util.DebuggingThreadLocal+get() org.h2.util.DebuggingThreadLocal+get() org.h2.util.DebuggingThreadLocal+set(T) org.h2.util.DebuggingThreadLocal+set(T) java.util.ArrayList+ArrayList() java.util.ArrayList+add(E) org.h2.util.DebuggingThreadLocal+get() org.h2.util.DebuggingThreadLocal+get() java.util.ArrayList+add(E) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() java.util.concurrent.ConcurrentHashMap+size() java.util.concurrent.ConcurrentHashMap+size() java.util.concurrent.ConcurrentHashMap+containsKey(Object) java.util.concurrent.ConcurrentHashMap+containsKey(Object) org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) org.h2.util.DebuggingThreadLocal+get() org.h2.util.DebuggingThreadLocal+get() org.h2.util.DebuggingThreadLocal+set(T) org.h2.util.DebuggingThreadLocal+set(T) java.util.ArrayList+ArrayList() java.util.ArrayList+add(E) org.h2.util.DebuggingThreadLocal+get() org.h2.util.DebuggingThreadLocal+get() java.util.ArrayList+add(E) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() java.util.concurrent.ConcurrentHashMap+putIfAbsent(K,V) java.util.concurrent.ConcurrentHashMap+putIfAbsent(K,V) org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) org.h2.engine.Session+addLock(Table) org.h2.engine.Session+addLock(Table) org.h2.util.DebuggingThreadLocal+get() org.h2.util.DebuggingThreadLocal+get() org.h2.util.DebuggingThreadLocal+set(T) org.h2.util.DebuggingThreadLocal+set(T) java.util.ArrayList+add(E) java.util.ArrayList+add(E) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName()",org.h2.mvstore.db.MVTable+lockExclusiveSession org.h2.mvstore.db.MVTable+lockSharedSessions org.h2.mvstore.db.MVTable+TraceLockEvent org.h2.mvstore.db.MVTable+NO_EXTRA_INFO org.h2.mvstore.db.MVTable+lockExclusiveSession org.h2.engine.SysProperties+THREAD_DEADLOCK_DETECTOR org.h2.mvstore.db.MVTable+EXCLUSIVE_LOCKS org.h2.mvstore.db.MVTable+EXCLUSIVE_LOCKS org.h2.mvstore.db.MVTable+EXCLUSIVE_LOCKS org.h2.mvstore.db.MVTable+lockSharedSessions org.h2.mvstore.db.MVTable+lockSharedSessions org.h2.mvstore.db.MVTable+TraceLockEvent org.h2.mvstore.db.MVTable+NO_EXTRA_INFO org.h2.mvstore.db.MVTable+lockExclusiveSession org.h2.engine.SysProperties+THREAD_DEADLOCK_DETECTOR org.h2.mvstore.db.MVTable+EXCLUSIVE_LOCKS org.h2.mvstore.db.MVTable+EXCLUSIVE_LOCKS org.h2.mvstore.db.MVTable+EXCLUSIVE_LOCKS org.h2.mvstore.db.MVTable+lockSharedSessions org.h2.mvstore.db.MVTable+TraceLockEvent org.h2.mvstore.db.MVTable+NO_EXTRA_INFO org.h2.engine.SysProperties+THREAD_DEADLOCK_DETECTOR org.h2.mvstore.db.MVTable+SHARED_LOCKS org.h2.mvstore.db.MVTable+SHARED_LOCKS,2111,44,2,,"private boolean doLock2(Session session, int lockMode, boolean exclusive) {
        if (lockExclusiveSession == null) {
            if (exclusive) {
                if (lockSharedSessions.isEmpty()) {
                    traceLock(session, exclusive, TraceLockEvent.TRACE_LOCK_ADDED_FOR, NO_EXTRA_INFO);
                    session.addLock(this);
                    lockExclusiveSession = session;
                    if (SysProperties.THREAD_DEADLOCK_DETECTOR) {
                        if (EXCLUSIVE_LOCKS.get() == null) {
                            EXCLUSIVE_LOCKS.set(new ArrayList<String>());
                        }
                        EXCLUSIVE_LOCKS.get().add(getName());
                    }
                    return true;
                } else if (lockSharedSessions.size() == 1 &&
                        lockSharedSessions.containsKey(session)) {
                    traceLock(session, exclusive, TraceLockEvent.TRACE_LOCK_ADD_UPGRADED_FOR, NO_EXTRA_INFO);
                    lockExclusiveSession = session;
                    if (SysProperties.THREAD_DEADLOCK_DETECTOR) {
                        if (EXCLUSIVE_LOCKS.get() == null) {
                            EXCLUSIVE_LOCKS.set(new ArrayList<String>());
                        }
                        EXCLUSIVE_LOCKS.get().add(getName());
                    }
                    return true;
                }
            } else {
                if (lockSharedSessions.putIfAbsent(session, session) == null) {
                    traceLock(session, exclusive, TraceLockEvent.TRACE_LOCK_OK, NO_EXTRA_INFO);
                    session.addLock(this);
                    if (SysProperties.THREAD_DEADLOCK_DETECTOR) {
                        ArrayList<String> list = SHARED_LOCKS.get();
                        if (list == null) {
                            list = new ArrayList<>();
                            SHARED_LOCKS.set(list);
                        }
                        list.add(getName());
                    }
                }
                return true;
            }
        }
        return false;
    }",False
28,"getDeadlockDetails(ArrayList<Session>,boolean)",Method,"doLock1(Session,int,boolean)",,java.lang.StringBuilder+StringBuilder() org.h2.engine.Session+getWaitForLock() org.h2.engine.Session+getWaitForLock() org.h2.engine.Session+getWaitForLockThread() org.h2.engine.Session+getWaitForLockThread() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.h2.engine.Session+toString() org.h2.engine.Session+toString() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.Thread+getName() java.lang.Thread+getName() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.h2.engine.DbObjectBase+toString() org.h2.engine.DbObjectBase+toString() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.h2.engine.Session+getLocks() org.h2.engine.Session+getLocks() java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) org.h2.engine.DbObjectBase+toString() org.h2.engine.DbObjectBase+toString() org.h2.table.Table+isLockedExclusivelyBy(Session) org.h2.table.Table+isLockedExclusivelyBy(Session) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(String) java.lang.StringBuilder+append(char) java.lang.StringBuilder+append(char) java.lang.StringBuilder+toString() java.lang.StringBuilder+toString(),,1295,30,10,,"private static String getDeadlockDetails(ArrayList<Session> sessions, boolean exclusive) {
        // We add the thread details here to make it easier for customers to
        // match up these error messages with their own logs.
        StringBuilder buff = new StringBuilder();
        for (Session s : sessions) {
            Table lock = s.getWaitForLock();
            Thread thread = s.getWaitForLockThread();
            buff.append(""\nSession "").append(s.toString())
                    .append("" on thread "").append(thread.getName())
                    .append("" is waiting to lock "").append(lock.toString())
                    .append(exclusive ? "" (exclusive)"" : "" (shared)"")
                    .append("" while locking "");
            int i = 0;
            for (Table t : s.getLocks()) {
                if (i++ > 0) {
                    buff.append("", "");
                }
                buff.append(t.toString());
                if (t instanceof MVTable) {
                    if (t.isLockedExclusivelyBy(s)) {
                        buff.append("" (exclusive)"");
                    } else {
                        buff.append("" (shared)"");
                    }
                }
            }
            buff.append('.');
        }
        return buff.toString();
    }",True
29,"checkDeadlock(Session,Session,Set<Session>)",Method,"doLock1(Session,int,boolean)",,"java.util.Set+contains(Object) java.util.Set+contains(Object) java.util.Set+add(E) java.util.Set+add(E) java.util.concurrent.ConcurrentHashMap+keySet() java.util.concurrent.ConcurrentHashMap+keySet() org.h2.engine.Session+getWaitForLock() org.h2.engine.Session+getWaitForLock() org.h2.table.Table+checkDeadlock(Session,Session,Set<Session>) org.h2.table.Table+checkDeadlock(Session,Session,Set<Session>) java.util.ArrayList+add(E) java.util.ArrayList+add(E) org.h2.engine.Session+getWaitForLock() org.h2.engine.Session+getWaitForLock() org.h2.table.Table+checkDeadlock(Session,Session,Set<Session>) org.h2.table.Table+checkDeadlock(Session,Session,Set<Session>) java.util.ArrayList+add(E) java.util.ArrayList+add(E)",org.h2.mvstore.db.MVTable+lockSharedSessions org.h2.mvstore.db.MVTable+lockExclusiveSession,2101,50,1,,"@Override
    public ArrayList<Session> checkDeadlock(Session session, Session clash,
            Set<Session> visited) {
        // only one deadlock check at any given time
        synchronized (MVTable.class) {
            if (clash == null) {
                // verification is started
                clash = session;
                visited = new HashSet<>();
            } else if (clash == session) {
                // we found a circle where this session is involved
                return new ArrayList<>(0);
            } else if (visited.contains(session)) {
                // we have already checked this session.
                // there is a circle, but the sessions in the circle need to
                // find it out themselves
                return null;
            }
            visited.add(session);
            ArrayList<Session> error = null;
            for (Session s : lockSharedSessions.keySet()) {
                if (s == session) {
                    // it doesn't matter if we have locked the object already
                    continue;
                }
                Table t = s.getWaitForLock();
                if (t != null) {
                    error = t.checkDeadlock(s, clash, visited);
                    if (error != null) {
                        error.add(session);
                        break;
                    }
                }
            }
            // take a local copy so we don't see inconsistent data, since we are
            // not locked while checking the lockExclusiveSession value
            Session copyOfLockExclusiveSession = lockExclusiveSession;
            if (error == null && copyOfLockExclusiveSession != null) {
                Table t = copyOfLockExclusiveSession.getWaitForLock();
                if (t != null) {
                    error = t.checkDeadlock(copyOfLockExclusiveSession, clash,
                            visited);
                    if (error != null) {
                        error.add(session);
                    }
                }
            }
            return error;
        }
    }",True
30,"traceLock(Session,boolean,TraceLockEvent,String)",Method,"doLock1(Session,int,boolean) doLock1(Session,int,boolean) doLock1(Session,int,boolean) doLock2(Session,int,boolean) doLock2(Session,int,boolean) doLock2(Session,int,boolean) unlock(Session)",,"org.h2.message.Trace+isDebugEnabled() org.h2.message.Trace+isDebugEnabled() org.h2.message.Trace+debug(String,Object[]) org.h2.message.Trace+debug(String,Object[]) org.h2.engine.Session+getId() org.h2.engine.Session+getId() org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName()",org.h2.mvstore.db.MVTable+traceLock org.h2.mvstore.db.MVTable+traceLock,376,7,2,,"private void traceLock(Session session, boolean exclusive, TraceLockEvent eventEnum, String extraInfo) {
        if (traceLock.isDebugEnabled()) {
            traceLock.debug(""{0} {1} {2} {3} {4}"", session.getId(),
                    exclusive ? ""exclusive write lock"" : ""shared read lock"", eventEnum.getEventText(),
                    getName(), extraInfo);
        }
    }",False
31,isLockedExclusively(),Method,,,,org.h2.mvstore.db.MVTable+lockExclusiveSession,103,4,1,,"@Override
    public boolean isLockedExclusively() {
        return lockExclusiveSession != null;
    }",True
32,isLockedExclusivelyBy(Session),Method,,,,org.h2.mvstore.db.MVTable+lockExclusiveSession,123,4,1,,"@Override
    public boolean isLockedExclusivelyBy(Session session) {
        return lockExclusiveSession == session;
    }",True
33,unlock(Session),Method,,,"org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) org.h2.mvstore.db.MVTable+traceLock(Session,boolean,TraceLockEvent,String) java.util.concurrent.ConcurrentHashMap+remove(Object) java.util.concurrent.ConcurrentHashMap+remove(Object) org.h2.util.DebuggingThreadLocal+get() org.h2.util.DebuggingThreadLocal+get() java.util.ArrayList+remove(Object) org.h2.util.DebuggingThreadLocal+get() org.h2.util.DebuggingThreadLocal+get() java.util.ArrayList+remove(Object) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() java.util.concurrent.ConcurrentHashMap+remove(Object) java.util.concurrent.ConcurrentHashMap+remove(Object) org.h2.util.DebuggingThreadLocal+get() org.h2.util.DebuggingThreadLocal+get() java.util.ArrayList+remove(Object) org.h2.util.DebuggingThreadLocal+get() org.h2.util.DebuggingThreadLocal+get() java.util.ArrayList+remove(Object) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() java.util.ArrayDeque+isEmpty() java.util.ArrayDeque+isEmpty() org.h2.mvstore.db.MVTable+getLockSyncObject() org.h2.mvstore.db.MVTable+getLockSyncObject() java.lang.Object+notifyAll() java.lang.Object+notifyAll()",org.h2.engine.DbObjectBase+database org.h2.mvstore.db.MVTable+lockExclusiveSession org.h2.mvstore.db.MVTable+TraceLockEvent org.h2.mvstore.db.MVTable+NO_EXTRA_INFO org.h2.mvstore.db.MVTable+lockSharedSessions org.h2.mvstore.db.MVTable+lockExclusiveSession org.h2.engine.SysProperties+THREAD_DEADLOCK_DETECTOR org.h2.mvstore.db.MVTable+EXCLUSIVE_LOCKS org.h2.mvstore.db.MVTable+EXCLUSIVE_LOCKS org.h2.mvstore.db.MVTable+lockSharedSessions org.h2.engine.SysProperties+THREAD_DEADLOCK_DETECTOR org.h2.mvstore.db.MVTable+SHARED_LOCKS org.h2.mvstore.db.MVTable+SHARED_LOCKS org.h2.mvstore.db.MVTable+waitingSessions,1149,29,1,,"@Override
    public void unlock(Session s) {
        if (database != null) {
            boolean wasLocked = lockExclusiveSession == s;
            traceLock(s, wasLocked, TraceLockEvent.TRACE_LOCK_UNLOCK, NO_EXTRA_INFO);
            if (wasLocked) {
                lockSharedSessions.remove(s);
                lockExclusiveSession = null;
                if (SysProperties.THREAD_DEADLOCK_DETECTOR) {
                    if (EXCLUSIVE_LOCKS.get() != null) {
                        EXCLUSIVE_LOCKS.get().remove(getName());
                    }
                }
            } else {
                wasLocked = lockSharedSessions.remove(s) != null;
                if (SysProperties.THREAD_DEADLOCK_DETECTOR) {
                    if (SHARED_LOCKS.get() != null) {
                        SHARED_LOCKS.get().remove(getName());
                    }
                }
            }
            if (wasLocked && !waitingSessions.isEmpty()) {
                Object lockSyncObject = getLockSyncObject();
                synchronized (lockSyncObject) {
                    lockSyncObject.notifyAll();
                }
            }
        }
    }",False
34,canTruncate(),Method,,,org.h2.table.Table+getCheckForeignKeyConstraints() org.h2.table.Table+getCheckForeignKeyConstraints() org.h2.engine.Database+getReferentialIntegrity() org.h2.engine.Database+getReferentialIntegrity() org.h2.table.Table+getConstraints() org.h2.table.Table+getConstraints() org.h2.constraint.Constraint+getConstraintType() org.h2.constraint.Constraint+getConstraintType() org.h2.constraint.ConstraintReferential+getRefTable() org.h2.constraint.ConstraintReferential+getRefTable(),org.h2.engine.DbObjectBase+database,694,19,1,,"@Override
    public boolean canTruncate() {
        if (getCheckForeignKeyConstraints() &&
                database.getReferentialIntegrity()) {
            ArrayList<Constraint> constraints = getConstraints();
            if (constraints != null) {
                for (Constraint c : constraints) {
                    if (c.getConstraintType() != Constraint.Type.REFERENTIAL) {
                        continue;
                    }
                    ConstraintReferential ref = (ConstraintReferential) c;
                    if (ref.getRefTable() == this) {
                        return false;
                    }
                }
            }
        }
        return true;
    }",True
35,close(Session),Method,removeChildrenAndResources(Session),,,,74,4,1,,"@Override
    public void close(Session session) {
        // ignore
    }",False
36,"getRow(Session,long)",Method,,"org.h2.mvstore.db.MVSecondaryIndex+MVStoreCursor.get() org.h2.mvstore.db.MVSpatialIndex+MVStoreCursor.get() org.h2.mvstore.db.MVSpatialIndex+FindBoundsCursor.check(boolean,SpatialKey,SpatialKey) org.h2.mvstore.db.MVSpatialIndex+FindBoundsCursor.check(boolean,SpatialKey,SpatialKey)","org.h2.mvstore.db.MVPrimaryIndex+getRow(Session,long) org.h2.mvstore.db.MVPrimaryIndex+getRow(Session,long)",org.h2.mvstore.db.MVTable+primaryIndex,116,4,1,,"@Override
    public Row getRow(Session session, long key) {
        return primaryIndex.getRow(session, key);
    }",False
37,"addIndex(Session,String,int,IndexColumn[],IndexType,boolean,String)",Method,,,"org.h2.index.IndexType+isPrimaryKey() org.h2.index.IndexType+isPrimaryKey() org.h2.table.Column+isNullable() org.h2.table.Column+isNullable() org.h2.message.DbException+get(int,String) org.h2.message.DbException+get(int,String) org.h2.table.Column+getName() org.h2.table.Column+getName() org.h2.table.Column+setPrimaryKey(boolean) org.h2.table.Column+setPrimaryKey(boolean) org.h2.engine.DbObjectBase+isTemporary() org.h2.engine.DbObjectBase+isTemporary() org.h2.table.TableBase+isGlobalTemporary() org.h2.table.TableBase+isGlobalTemporary() org.h2.engine.Database+lockMeta(Session) org.h2.engine.Database+lockMeta(Session) org.h2.mvstore.db.MVPrimaryIndex+getMainIndexColumn() org.h2.mvstore.db.MVPrimaryIndex+getMainIndexColumn() org.h2.table.TableBase+getMainIndexColumn(IndexType,IndexColumn[]) org.h2.table.TableBase+getMainIndexColumn(IndexType,IndexColumn[]) org.h2.engine.Database+isStarting() org.h2.engine.Database+isStarting() org.h2.mvstore.tx.TransactionStore+hasMap(String) org.h2.mvstore.tx.TransactionStore+hasMap(String) org.h2.mvstore.db.MVPrimaryIndex+getRowCountMax() org.h2.mvstore.db.MVPrimaryIndex+getRowCountMax() org.h2.mvstore.db.MVPrimaryIndex+setMainIndexColumn(int) org.h2.mvstore.db.MVPrimaryIndex+setMainIndexColumn(int) org.h2.mvstore.db.MVDelegateIndex+MVDelegateIndex(MVTable,int,String,MVPrimaryIndex,IndexType) org.h2.index.IndexType+isSpatial() org.h2.index.IndexType+isSpatial() org.h2.mvstore.db.MVSpatialIndex+MVSpatialIndex(Database,MVTable,int,String,IndexColumn[],IndexType) org.h2.engine.Session+getDatabase() org.h2.engine.Session+getDatabase() org.h2.mvstore.db.MVSecondaryIndex+MVSecondaryIndex(Database,MVTable,int,String,IndexColumn[],IndexType) org.h2.engine.Session+getDatabase() org.h2.engine.Session+getDatabase() org.h2.index.Index+needRebuild() org.h2.index.Index+needRebuild() org.h2.mvstore.db.MVTable+rebuildIndex(Session,MVIndex,String) org.h2.mvstore.db.MVTable+rebuildIndex(Session,MVIndex,String) org.h2.engine.DbObject+setTemporary(boolean) org.h2.engine.DbObject+setTemporary(boolean) org.h2.engine.DbObjectBase+isTemporary() org.h2.engine.DbObjectBase+isTemporary() org.h2.engine.DbObject+getCreateSQL() org.h2.engine.DbObject+getCreateSQL() org.h2.engine.DbObject+setComment(String) org.h2.engine.DbObject+setComment(String) org.h2.engine.Session+addLocalTempTableIndex(Index) org.h2.engine.Session+addLocalTempTableIndex(Index) org.h2.engine.Database+addSchemaObject(Session,SchemaObject) org.h2.engine.Database+addSchemaObject(Session,SchemaObject) java.util.ArrayList+add(E) java.util.ArrayList+add(E) org.h2.engine.DbObjectBase+setModified() org.h2.engine.DbObjectBase+setModified()",org.h2.table.IndexColumn+column org.h2.api.ErrorCode+COLUMN_MUST_NOT_BE_NULLABLE_1 org.h2.engine.DbObjectBase+database org.h2.mvstore.db.MVTable+primaryIndex org.h2.result.SearchRow+ROWID_INDEX org.h2.result.SearchRow+ROWID_INDEX org.h2.engine.DbObjectBase+database org.h2.mvstore.db.MVTable+transactionStore org.h2.result.SearchRow+ROWID_INDEX org.h2.mvstore.db.MVTable+primaryIndex org.h2.result.SearchRow+ROWID_INDEX org.h2.result.SearchRow+ROWID_INDEX org.h2.mvstore.db.MVTable+primaryIndex org.h2.mvstore.db.MVTable+primaryIndex org.h2.engine.DbObjectBase+database org.h2.mvstore.db.MVTable+indexes,2428,59,1,,"@Override
    public Index addIndex(Session session, String indexName, int indexId,
            IndexColumn[] cols, IndexType indexType, boolean create,
            String indexComment) {
        if (indexType.isPrimaryKey()) {
            for (IndexColumn c : cols) {
                Column column = c.column;
                if (column.isNullable()) {
                    throw DbException.get(
                            ErrorCode.COLUMN_MUST_NOT_BE_NULLABLE_1,
                            column.getName());
                }
                column.setPrimaryKey(true);
            }
        }
        boolean isSessionTemporary = isTemporary() && !isGlobalTemporary();
        if (!isSessionTemporary) {
            database.lockMeta(session);
        }
        MVIndex index;
        int mainIndexColumn = primaryIndex.getMainIndexColumn() != SearchRow.ROWID_INDEX
                ? SearchRow.ROWID_INDEX : getMainIndexColumn(indexType, cols);
        if (database.isStarting()) {
            // if index does exists as a separate map it can't be a delegate
            if (transactionStore.hasMap(""index."" + indexId)) {
                // we can not reuse primary index
                mainIndexColumn = SearchRow.ROWID_INDEX;
            }
        } else if (primaryIndex.getRowCountMax() != 0) {
            mainIndexColumn = SearchRow.ROWID_INDEX;
        }

        if (mainIndexColumn != SearchRow.ROWID_INDEX) {
            primaryIndex.setMainIndexColumn(mainIndexColumn);
            index = new MVDelegateIndex(this, indexId, indexName, primaryIndex,
                    indexType);
        } else if (indexType.isSpatial()) {
            index = new MVSpatialIndex(session.getDatabase(), this, indexId,
                    indexName, cols, indexType);
        } else {
            index = new MVSecondaryIndex(session.getDatabase(), this, indexId,
                    indexName, cols, indexType);
        }
        if (index.needRebuild()) {
            rebuildIndex(session, index, indexName);
        }
        index.setTemporary(isTemporary());
        if (index.getCreateSQL() != null) {
            index.setComment(indexComment);
            if (isSessionTemporary) {
                session.addLocalTempTableIndex(index);
            } else {
                database.addSchemaObject(session, index);
            }
        }
        indexes.add(index);
        setModified();
        return index;
    }",False
38,"rebuildIndex(Session,MVIndex,String)",Method,"addIndex(Session,String,int,IndexColumn[],IndexType,boolean,String)",,"org.h2.engine.Database+getStore() org.h2.engine.Session+getDatabase() org.h2.engine.Session+getDatabase() org.h2.engine.Database+getStore() org.h2.mvstore.db.MVTable+rebuildIndexBuffered(Session,Index) org.h2.mvstore.db.MVTable+rebuildIndexBuffered(Session,Index) org.h2.mvstore.db.MVTable+rebuildIndexBlockMerge(Session,MVIndex) org.h2.mvstore.db.MVTable+rebuildIndexBlockMerge(Session,MVIndex) org.h2.schema.Schema+freeUniqueName(String) org.h2.schema.SchemaObjectBase+getSchema() org.h2.schema.SchemaObjectBase+getSchema() org.h2.schema.Schema+freeUniqueName(String) org.h2.index.Index+remove(Session) org.h2.index.Index+remove(Session) org.h2.message.Trace+error(Throwable,String) org.h2.message.Trace+error(Throwable,String)",org.h2.engine.DbObjectBase+trace,891,23,2,,"private void rebuildIndex(Session session, MVIndex index, String indexName) {
        try {
            if (session.getDatabase().getStore() == null ||
                    index instanceof MVSpatialIndex) {
                // in-memory
                rebuildIndexBuffered(session, index);
            } else {
                rebuildIndexBlockMerge(session, index);
            }
        } catch (DbException e) {
            getSchema().freeUniqueName(indexName);
            try {
                index.remove(session);
            } catch (DbException e2) {
                // this could happen, for example on failure in the storage
                // but if that is not the case it means
                // there is something wrong with the database
                trace.error(e2, ""could not remove index"");
                throw e2;
            }
            throw e;
        }
    }",False
39,"rebuildIndexBlockMerge(Session,MVIndex)",Method,"rebuildIndex(Session,MVIndex,String)",,"org.h2.mvstore.db.MVTable+rebuildIndexBuffered(Session,Index) org.h2.mvstore.db.MVTable+rebuildIndexBuffered(Session,Index) org.h2.mvstore.db.MVTable+getScanIndex(Session) org.h2.mvstore.db.MVTable+getScanIndex(Session) org.h2.index.Index+getRowCount(Session) org.h2.index.Index+getRowCount(Session) org.h2.index.Index+find(Session,SearchRow,SearchRow) org.h2.index.Index+find(Session,SearchRow,SearchRow) org.h2.engine.Database+getStore() org.h2.engine.Session+getDatabase() org.h2.engine.Session+getDatabase() org.h2.engine.Database+getStore() org.h2.engine.Database+getMaxMemoryRows() org.h2.engine.Database+getMaxMemoryRows() org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObject+getName() org.h2.engine.DbObject+getName() org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.Utils+newSmallArrayList() org.h2.util.Utils+newSmallArrayList() org.h2.index.Cursor+next() org.h2.index.Cursor+next() org.h2.index.Cursor+get() org.h2.index.Cursor+get() java.util.ArrayList+add(E) java.util.ArrayList+add(E) org.h2.engine.Database+setProgress(int,String,int,int) org.h2.engine.Database+setProgress(int,String,int,int) org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long) java.util.ArrayList+size() java.util.ArrayList+size() org.h2.mvstore.db.MVTable+sortRows(ArrayList<? extends SearchRow>,Index) org.h2.mvstore.db.MVTable+sortRows(ArrayList<? extends SearchRow>,Index) org.h2.mvstore.db.MVTableEngine.Store+nextTemporaryMapName() org.h2.mvstore.db.MVTableEngine.Store+nextTemporaryMapName() org.h2.mvstore.db.MVIndex+addRowsToBuffer(List<Row>,String) org.h2.mvstore.db.MVIndex+addRowsToBuffer(List<Row>,String) java.util.ArrayList+add(E) java.util.ArrayList+add(E) java.util.ArrayList+clear() java.util.ArrayList+clear() org.h2.mvstore.db.MVTable+sortRows(ArrayList<? extends SearchRow>,Index) org.h2.mvstore.db.MVTable+sortRows(ArrayList<? extends SearchRow>,Index) java.util.ArrayList+isEmpty() java.util.ArrayList+isEmpty() org.h2.mvstore.db.MVTableEngine.Store+nextTemporaryMapName() org.h2.mvstore.db.MVTableEngine.Store+nextTemporaryMapName() org.h2.mvstore.db.MVIndex+addRowsToBuffer(List<Row>,String) org.h2.mvstore.db.MVIndex+addRowsToBuffer(List<Row>,String) java.util.ArrayList+add(E) java.util.ArrayList+add(E) java.util.ArrayList+clear() java.util.ArrayList+clear() org.h2.mvstore.db.MVIndex+addBufferedRows(List<String>) org.h2.mvstore.db.MVIndex+addBufferedRows(List<String>) org.h2.mvstore.db.MVTable+addRowsToIndex(Session,ArrayList<Row>,Index) org.h2.mvstore.db.MVTable+addRowsToIndex(Session,ArrayList<Row>,Index) org.h2.message.DbException+throwInternalError(String) org.h2.message.DbException+throwInternalError(String) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName()",org.h2.engine.DbObjectBase+database org.h2.engine.DbObjectBase+database org.h2.api.DatabaseEventListener+STATE_CREATE_INDEX,2418,53,2,,"private void rebuildIndexBlockMerge(Session session, MVIndex index) {
        if (index instanceof MVSpatialIndex) {
            // the spatial index doesn't support multi-way merge sort
            rebuildIndexBuffered(session, index);
        }
        // Read entries in memory, sort them, write to a new map (in sorted
        // order); repeat (using a new map for every block of 1 MB) until all
        // record are read. Merge all maps to the target (using merge sort;
        // duplicates are detected in the target). For randomly ordered data,
        // this should use relatively few write operations.
        // A possible optimization is: change the buffer size from ""row count""
        // to ""amount of memory"", and buffer index keys instead of rows.
        Index scan = getScanIndex(session);
        long remaining = scan.getRowCount(session);
        long total = remaining;
        Cursor cursor = scan.find(session, null, null);
        long i = 0;
        Store store = session.getDatabase().getStore();

        int bufferSize = database.getMaxMemoryRows() / 2;
        ArrayList<Row> buffer = new ArrayList<>(bufferSize);
        String n = getName() + "":"" + index.getName();
        int t = MathUtils.convertLongToInt(total);
        ArrayList<String> bufferNames = Utils.newSmallArrayList();
        while (cursor.next()) {
            Row row = cursor.get();
            buffer.add(row);
            database.setProgress(DatabaseEventListener.STATE_CREATE_INDEX, n,
                    MathUtils.convertLongToInt(i++), t);
            if (buffer.size() >= bufferSize) {
                sortRows(buffer, index);
                String mapName = store.nextTemporaryMapName();
                index.addRowsToBuffer(buffer, mapName);
                bufferNames.add(mapName);
                buffer.clear();
            }
            remaining--;
        }
        sortRows(buffer, index);
        if (!bufferNames.isEmpty()) {
            String mapName = store.nextTemporaryMapName();
            index.addRowsToBuffer(buffer, mapName);
            bufferNames.add(mapName);
            buffer.clear();
            index.addBufferedRows(bufferNames);
        } else {
            addRowsToIndex(session, buffer, index);
        }
        if (remaining != 0) {
            DbException.throwInternalError(""rowcount remaining="" + remaining +
                    "" "" + getName());
        }
    }",False
40,"rebuildIndexBuffered(Session,Index)",Method,"rebuildIndex(Session,MVIndex,String) rebuildIndexBlockMerge(Session,MVIndex)",,"org.h2.mvstore.db.MVTable+getScanIndex(Session) org.h2.mvstore.db.MVTable+getScanIndex(Session) org.h2.index.Index+getRowCount(Session) org.h2.index.Index+getRowCount(Session) org.h2.index.Index+find(Session,SearchRow,SearchRow) org.h2.index.Index+find(Session,SearchRow,SearchRow) java.lang.Math+min(long,long) java.lang.Math+min(long,long) org.h2.engine.Database+getMaxMemoryRows() org.h2.engine.Database+getMaxMemoryRows() org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObject+getName() org.h2.engine.DbObject+getName() org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long) org.h2.index.Cursor+next() org.h2.index.Cursor+next() org.h2.index.Cursor+get() org.h2.index.Cursor+get() java.util.ArrayList+add(E) java.util.ArrayList+add(E) org.h2.engine.Database+setProgress(int,String,int,int) org.h2.engine.Database+setProgress(int,String,int,int) org.h2.util.MathUtils+convertLongToInt(long) org.h2.util.MathUtils+convertLongToInt(long) java.util.ArrayList+size() java.util.ArrayList+size() org.h2.mvstore.db.MVTable+addRowsToIndex(Session,ArrayList<Row>,Index) org.h2.mvstore.db.MVTable+addRowsToIndex(Session,ArrayList<Row>,Index) org.h2.mvstore.db.MVTable+addRowsToIndex(Session,ArrayList<Row>,Index) org.h2.mvstore.db.MVTable+addRowsToIndex(Session,ArrayList<Row>,Index) org.h2.message.DbException+throwInternalError(String) org.h2.message.DbException+throwInternalError(String) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName()",org.h2.engine.DbObjectBase+database org.h2.engine.DbObjectBase+database org.h2.api.DatabaseEventListener+STATE_CREATE_INDEX,1107,26,2,,"private void rebuildIndexBuffered(Session session, Index index) {
        Index scan = getScanIndex(session);
        long remaining = scan.getRowCount(session);
        long total = remaining;
        Cursor cursor = scan.find(session, null, null);
        long i = 0;
        int bufferSize = (int) Math.min(total, database.getMaxMemoryRows());
        ArrayList<Row> buffer = new ArrayList<>(bufferSize);
        String n = getName() + "":"" + index.getName();
        int t = MathUtils.convertLongToInt(total);
        while (cursor.next()) {
            Row row = cursor.get();
            buffer.add(row);
            database.setProgress(DatabaseEventListener.STATE_CREATE_INDEX, n,
                    MathUtils.convertLongToInt(i++), t);
            if (buffer.size() >= bufferSize) {
                addRowsToIndex(session, buffer, index);
            }
            remaining--;
        }
        addRowsToIndex(session, buffer, index);
        if (remaining != 0) {
            DbException.throwInternalError(""rowcount remaining="" + remaining +
                    "" "" + getName());
        }
    }",False
41,"addRowsToIndex(Session,ArrayList<Row>,Index)",Method,"rebuildIndexBlockMerge(Session,MVIndex) rebuildIndexBuffered(Session,Index) rebuildIndexBuffered(Session,Index)",,"org.h2.mvstore.db.MVTable+sortRows(ArrayList<? extends SearchRow>,Index) org.h2.mvstore.db.MVTable+sortRows(ArrayList<? extends SearchRow>,Index) org.h2.index.Index+add(Session,Row) org.h2.index.Index+add(Session,Row) java.util.ArrayList+clear() java.util.ArrayList+clear()",,236,8,10,,"private static void addRowsToIndex(Session session, ArrayList<Row> list,
            Index index) {
        sortRows(list, index);
        for (Row row : list) {
            index.add(session, row);
        }
        list.clear();
    }",True
42,"sortRows(ArrayList<? extends SearchRow>,Index)",Method,"rebuildIndexBlockMerge(Session,MVIndex) rebuildIndexBlockMerge(Session,MVIndex) addRowsToIndex(Session,ArrayList<Row>,Index)",,"java.util.Collections+sort(List,Comparator) java.util.Collections+sort(List,Comparator) +() +compare(SearchRow,SearchRow)",,312,8,10,,"private static void sortRows(ArrayList<? extends SearchRow> list, final Index index) {
        Collections.sort(list, new Comparator<SearchRow>() {
            @Override
            public int compare(SearchRow r1, SearchRow r2) {
                return index.compareRows(r1, r2);
            }
        });
    }",True
43,"removeRow(Session,Row)",Method,,,"org.h2.mvstore.db.MVTable+syncLastModificationIdWithDatabase() org.h2.mvstore.db.MVTable+syncLastModificationIdWithDatabase() org.h2.engine.Session+getTransaction() org.h2.engine.Session+getTransaction() org.h2.mvstore.tx.Transaction+setSavepoint() org.h2.mvstore.tx.Transaction+setSavepoint() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) org.h2.index.Index+remove(Session,Row) org.h2.index.Index+remove(Session,Row) org.h2.mvstore.tx.Transaction+rollbackToSavepoint(long) org.h2.mvstore.tx.Transaction+rollbackToSavepoint(long) java.lang.Throwable+addSuppressed(Throwable) java.lang.Throwable+addSuppressed(Throwable) org.h2.message.DbException+convert(Throwable) org.h2.message.DbException+convert(Throwable) org.h2.mvstore.db.MVTable+analyzeIfRequired(Session) org.h2.mvstore.db.MVTable+analyzeIfRequired(Session)",org.h2.mvstore.db.MVTable+indexes org.h2.mvstore.db.MVTable+indexes,670,20,1,,"@Override
    public void removeRow(Session session, Row row) {
        syncLastModificationIdWithDatabase();
        Transaction t = session.getTransaction();
        long savepoint = t.setSavepoint();
        try {
            for (int i = indexes.size() - 1; i >= 0; i--) {
                Index index = indexes.get(i);
                index.remove(session, row);
            }
        } catch (Throwable e) {
            try {
                t.rollbackToSavepoint(savepoint);
            } catch (Throwable nested) {
                e.addSuppressed(nested);
            }
            throw DbException.convert(e);
        }
        analyzeIfRequired(session);
    }",False
44,truncate(Session),Method,removeChildrenAndResources(Session),,org.h2.mvstore.db.MVTable+syncLastModificationIdWithDatabase() org.h2.mvstore.db.MVTable+syncLastModificationIdWithDatabase() java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) org.h2.index.Index+truncate(Session) org.h2.index.Index+truncate(Session) java.util.concurrent.atomic.AtomicInteger+set(int) java.util.concurrent.atomic.AtomicInteger+set(int),org.h2.mvstore.db.MVTable+indexes org.h2.mvstore.db.MVTable+indexes org.h2.mvstore.db.MVTable+changesUntilAnalyze org.h2.mvstore.db.MVTable+changesUntilAnalyze org.h2.mvstore.db.MVTable+nextAnalyze,353,11,1,,"@Override
    public void truncate(Session session) {
        syncLastModificationIdWithDatabase();
        for (int i = indexes.size() - 1; i >= 0; i--) {
            Index index = indexes.get(i);
            index.truncate(session);
        }
        if (changesUntilAnalyze != null) {
            changesUntilAnalyze.set(nextAnalyze);
        }
    }",False
45,"addRow(Session,Row)",Method,,,"org.h2.mvstore.db.MVTable+syncLastModificationIdWithDatabase() org.h2.mvstore.db.MVTable+syncLastModificationIdWithDatabase() org.h2.engine.Session+getTransaction() org.h2.engine.Session+getTransaction() org.h2.mvstore.tx.Transaction+setSavepoint() org.h2.mvstore.tx.Transaction+setSavepoint() org.h2.index.Index+add(Session,Row) org.h2.index.Index+add(Session,Row) org.h2.mvstore.tx.Transaction+rollbackToSavepoint(long) org.h2.mvstore.tx.Transaction+rollbackToSavepoint(long) java.lang.Throwable+addSuppressed(Throwable) java.lang.Throwable+addSuppressed(Throwable) org.h2.message.DbException+convert(Throwable) org.h2.message.DbException+convert(Throwable) org.h2.mvstore.db.MVTable+analyzeIfRequired(Session) org.h2.mvstore.db.MVTable+analyzeIfRequired(Session)",org.h2.mvstore.db.MVTable+indexes,600,19,1,,"@Override
    public void addRow(Session session, Row row) {
        syncLastModificationIdWithDatabase();
        Transaction t = session.getTransaction();
        long savepoint = t.setSavepoint();
        try {
            for (Index index : indexes) {
                index.add(session, row);
            }
        } catch (Throwable e) {
            try {
                t.rollbackToSavepoint(savepoint);
            } catch (Throwable nested) {
                e.addSuppressed(nested);
            }
            throw DbException.convert(e);
        }
        analyzeIfRequired(session);
    }",False
46,"updateRow(Session,Row,Row)",Method,,,"org.h2.result.SearchRow+setKey(long) org.h2.result.SearchRow+setKey(long) org.h2.result.SearchRow+getKey() org.h2.result.SearchRow+getKey() org.h2.mvstore.db.MVTable+syncLastModificationIdWithDatabase() org.h2.mvstore.db.MVTable+syncLastModificationIdWithDatabase() org.h2.engine.Session+getTransaction() org.h2.engine.Session+getTransaction() org.h2.mvstore.tx.Transaction+setSavepoint() org.h2.mvstore.tx.Transaction+setSavepoint() org.h2.index.Index+update(Session,Row,Row) org.h2.index.Index+update(Session,Row,Row) org.h2.mvstore.tx.Transaction+rollbackToSavepoint(long) org.h2.mvstore.tx.Transaction+rollbackToSavepoint(long) java.lang.Throwable+addSuppressed(Throwable) java.lang.Throwable+addSuppressed(Throwable) org.h2.message.DbException+convert(Throwable) org.h2.message.DbException+convert(Throwable) org.h2.mvstore.db.MVTable+analyzeIfRequired(Session) org.h2.mvstore.db.MVTable+analyzeIfRequired(Session)",org.h2.mvstore.db.MVTable+indexes,672,20,1,,"@Override
    public void updateRow(Session session, Row oldRow, Row newRow) {
        newRow.setKey(oldRow.getKey());
        syncLastModificationIdWithDatabase();
        Transaction t = session.getTransaction();
        long savepoint = t.setSavepoint();
        try {
            for (Index index : indexes) {
                index.update(session, oldRow, newRow);
            }
        } catch (Throwable e) {
            try {
                t.rollbackToSavepoint(savepoint);
            } catch (Throwable nested) {
                e.addSuppressed(nested);
            }
            throw DbException.convert(e);
        }
        analyzeIfRequired(session);
    }",False
47,"lockRow(Session,Row)",Method,,,"org.h2.mvstore.db.MVPrimaryIndex+lockRow(Session,Row) org.h2.mvstore.db.MVPrimaryIndex+lockRow(Session,Row)",org.h2.mvstore.db.MVTable+primaryIndex,117,4,1,,"@Override
    public Row lockRow(Session session, Row row) {
        return primaryIndex.lockRow(session, row);
    }",False
48,analyzeIfRequired(Session),Method,"removeRow(Session,Row) addRow(Session,Row) updateRow(Session,Row,Row)",,java.util.concurrent.atomic.AtomicInteger+decrementAndGet() java.util.concurrent.atomic.AtomicInteger+decrementAndGet() java.util.concurrent.atomic.AtomicInteger+set(int) java.util.concurrent.atomic.AtomicInteger+set(int) org.h2.engine.Session+markTableForAnalyze(Table) org.h2.engine.Session+markTableForAnalyze(Table),org.h2.mvstore.db.MVTable+changesUntilAnalyze org.h2.mvstore.db.MVTable+changesUntilAnalyze org.h2.mvstore.db.MVTable+nextAnalyze java.lang.Integer+MAX_VALUE org.h2.mvstore.db.MVTable+nextAnalyze org.h2.mvstore.db.MVTable+changesUntilAnalyze org.h2.mvstore.db.MVTable+nextAnalyze,405,11,2,,"private void analyzeIfRequired(Session session) {
        if (changesUntilAnalyze != null) {
            if (changesUntilAnalyze.decrementAndGet() == 0) {
                if (nextAnalyze <= Integer.MAX_VALUE / 2) {
                    nextAnalyze *= 2;
                }
                changesUntilAnalyze.set(nextAnalyze);
                session.markTableForAnalyze(this);
            }
        }
    }",False
49,checkSupportAlter(),Method,,,,,67,4,1,,"@Override
    public void checkSupportAlter() {
        // ok
    }",True
50,getTableType(),Method,,,,,85,4,1,,"@Override
    public TableType getTableType() {
        return TableType.TABLE;
    }",True
51,getScanIndex(Session),Method,"rebuildIndexBlockMerge(Session,MVIndex) rebuildIndexBuffered(Session,Index)",,,org.h2.mvstore.db.MVTable+primaryIndex,93,4,1,,"@Override
    public Index getScanIndex(Session session) {
        return primaryIndex;
    }",False
52,getUniqueIndex(),Method,,,,org.h2.mvstore.db.MVTable+primaryIndex,80,4,1,,"@Override
    public Index getUniqueIndex() {
        return primaryIndex;
    }",False
53,getIndexes(),Method,,,,org.h2.mvstore.db.MVTable+indexes,82,4,1,,"@Override
    public ArrayList<Index> getIndexes() {
        return indexes;
    }",False
54,getMaxDataModificationId(),Method,,,java.util.concurrent.atomic.AtomicLong+get() java.util.concurrent.atomic.AtomicLong+get(),org.h2.mvstore.db.MVTable+lastModificationId,101,4,1,,"@Override
    public long getMaxDataModificationId() {
        return lastModificationId.get();
    }",False
55,getContainsLargeObject(),Method,,"org.h2.engine.Session+onRollback(MVMap<Object,VersionedValue>,Object,VersionedValue,VersionedValue) org.h2.mvstore.db.MVPrimaryIndex+add(Session,Row) org.h2.mvstore.db.MVPrimaryIndex+remove(Session,Row) org.h2.mvstore.db.MVPrimaryIndex+truncate(Session)",,org.h2.mvstore.db.MVTable+containsLargeObject,83,3,1,,"public boolean getContainsLargeObject() {
        return containsLargeObject;
    }",True
56,isDeterministic(),Method,,,,,75,4,1,,"@Override
    public boolean isDeterministic() {
        return true;
    }",True
57,canGetRowCount(),Method,,,,,74,4,1,,"@Override
    public boolean canGetRowCount() {
        return true;
    }",True
58,canDrop(),Method,,,,,67,4,1,,"@Override
    public boolean canDrop() {
        return true;
    }",True
59,removeChildrenAndResources(Session),Method,,,"org.h2.mvstore.db.MVTable+truncate(Session) org.h2.mvstore.db.MVTable+truncate(Session) org.h2.store.LobStorageInterface+removeAllForTable(int) org.h2.engine.Database+getLobStorage() org.h2.engine.Database+getLobStorage() org.h2.store.LobStorageInterface+removeAllForTable(int) org.h2.engine.DbObjectBase+getId() org.h2.engine.DbObjectBase+getId() org.h2.engine.Database+lockMeta(Session) org.h2.engine.Database+lockMeta(Session) org.h2.mvstore.db.MVTableEngine.Store+removeTable(MVTable) org.h2.engine.Database+getStore() org.h2.engine.Database+getStore() org.h2.mvstore.db.MVTableEngine.Store+removeTable(MVTable) org.h2.table.Table+removeChildrenAndResources(Session) java.util.ArrayList+size() java.util.ArrayList+size() java.util.ArrayList+get(int) java.util.ArrayList+get(int) org.h2.index.Index+remove(Session) org.h2.index.Index+remove(Session) org.h2.engine.DbObject+getName() org.h2.engine.DbObject+getName() org.h2.engine.Database+removeSchemaObject(Session,SchemaObject) org.h2.engine.Database+removeSchemaObject(Session,SchemaObject) java.util.ArrayList+remove(Object) java.util.ArrayList+remove(Object) org.h2.mvstore.db.MVPrimaryIndex+remove(Session) org.h2.mvstore.db.MVPrimaryIndex+remove(Session) java.util.ArrayList+clear() java.util.ArrayList+clear() org.h2.engine.Database+getAllSchemaObjects(int) org.h2.engine.Database+getAllSchemaObjects(int) org.h2.index.Index+getTable() org.h2.index.Index+getTable() org.h2.message.DbException+throwInternalError(String) org.h2.message.DbException+throwInternalError(String) org.h2.engine.DbObject+getName() org.h2.engine.DbObject+getName() org.h2.mvstore.db.MVTable+close(Session) org.h2.mvstore.db.MVTable+close(Session) org.h2.engine.DbObjectBase+invalidate() org.h2.engine.DbObjectBase+invalidate()",org.h2.mvstore.db.MVTable+containsLargeObject org.h2.engine.DbObjectBase+database org.h2.engine.DbObjectBase+database org.h2.engine.DbObjectBase+database org.h2.mvstore.db.MVTable+indexes org.h2.mvstore.db.MVTable+indexes org.h2.engine.DbObjectBase+database org.h2.mvstore.db.MVTable+indexes org.h2.mvstore.db.MVTable+primaryIndex org.h2.mvstore.db.MVTable+indexes org.h2.engine.SysProperties+CHECK org.h2.engine.DbObjectBase+database org.h2.engine.DbObject+INDEX,1309,35,1,,"@Override
    public void removeChildrenAndResources(Session session) {
        if (containsLargeObject) {
            // unfortunately, the data is gone on rollback
            truncate(session);
            database.getLobStorage().removeAllForTable(getId());
            database.lockMeta(session);
        }
        database.getStore().removeTable(this);
        super.removeChildrenAndResources(session);
        // remove scan index (at position 0 on the list) last
        while (indexes.size() > 1) {
            Index index = indexes.get(1);
            index.remove(session);
            if (index.getName() != null) {
                database.removeSchemaObject(session, index);
            }
            // needed for session temporary indexes
            indexes.remove(index);
        }
        primaryIndex.remove(session);
        indexes.clear();
        if (SysProperties.CHECK) {
            for (SchemaObject obj : database
                    .getAllSchemaObjects(DbObject.INDEX)) {
                Index index = (Index) obj;
                if (index.getTable() == this) {
                    DbException.throwInternalError(""index not dropped: "" +
                            index.getName());
                }
            }
        }
        close(session);
        invalidate();
    }",False
60,getRowCount(Session),Method,,,org.h2.mvstore.db.MVPrimaryIndex+getRowCount(Session) org.h2.mvstore.db.MVPrimaryIndex+getRowCount(Session),org.h2.mvstore.db.MVTable+primaryIndex,112,4,1,,"@Override
    public long getRowCount(Session session) {
        return primaryIndex.getRowCount(session);
    }",False
61,getRowCountApproximation(),Method,,,org.h2.mvstore.db.MVPrimaryIndex+getRowCountApproximation() org.h2.mvstore.db.MVPrimaryIndex+getRowCountApproximation(),org.h2.mvstore.db.MVTable+primaryIndex,116,4,1,,"@Override
    public long getRowCountApproximation() {
        return primaryIndex.getRowCountApproximation();
    }",False
62,getDiskSpaceUsed(),Method,,,org.h2.mvstore.db.MVPrimaryIndex+getDiskSpaceUsed() org.h2.mvstore.db.MVPrimaryIndex+getDiskSpaceUsed(),org.h2.mvstore.db.MVTable+primaryIndex,100,4,1,,"@Override
    public long getDiskSpaceUsed() {
        return primaryIndex.getDiskSpaceUsed();
    }",False
63,checkRename(),Method,,,,,61,4,1,,"@Override
    public void checkRename() {
        // ok
    }",True
64,getTransactionBegin(),Method,,"org.h2.mvstore.db.MVSpatialIndex+MVSpatialIndex(Database,MVTable,int,String,IndexColumn[],IndexType)",org.h2.mvstore.tx.TransactionStore+begin() org.h2.mvstore.tx.TransactionStore+begin(),org.h2.mvstore.db.MVTable+transactionStore,222,9,0,"/** 
 * Get a new transaction.
 * @return the transaction
 */
","/**
     * Get a new transaction.
     *
     * @return the transaction
     */
    Transaction getTransactionBegin() {
        // TODO need to commit/rollback the transaction
        return transactionStore.begin();
    }",False
65,getRowIdColumn(),Method,,,"org.h2.table.Column+Column(String,int) org.h2.table.Column+setTable(Table,int) org.h2.table.Column+setTable(Table,int) org.h2.table.Column+setRowId(boolean) org.h2.table.Column+setRowId(boolean)",org.h2.mvstore.db.MVTable+rowIdColumn org.h2.mvstore.db.MVTable+rowIdColumn org.h2.table.Column+ROWID org.h2.value.Value+LONG org.h2.mvstore.db.MVTable+rowIdColumn org.h2.result.SearchRow+ROWID_INDEX org.h2.mvstore.db.MVTable+rowIdColumn org.h2.mvstore.db.MVTable+rowIdColumn,292,9,1,,"@Override
    public Column getRowIdColumn() {
        if (rowIdColumn == null) {
            rowIdColumn = new Column(Column.ROWID, Value.LONG);
            rowIdColumn.setTable(this, SearchRow.ROWID_INDEX);
            rowIdColumn.setRowId(true);
        }
        return rowIdColumn;
    }",True
66,toString(),Method,,,org.h2.schema.SchemaObjectBase+getSQL(boolean) org.h2.schema.SchemaObjectBase+getSQL(boolean),,76,4,1,,"@Override
    public String toString() {
        return getSQL(false);
    }",True
67,isMVStore(),Method,,,,,69,4,1,,"@Override
    public boolean isMVStore() {
        return true;
    }",False
68,commit(),Method,,org.h2.engine.Session+commit(boolean),org.h2.mvstore.db.MVTable+syncLastModificationIdWithDatabase() org.h2.mvstore.db.MVTable+syncLastModificationIdWithDatabase(),org.h2.engine.DbObjectBase+database,250,9,1,"/** 
 * Mark the transaction as committed, so that the modification counter of the database is incremented.
 */
","/**
     * Mark the transaction as committed, so that the modification counter of
     * the database is incremented.
     */
    public void commit() {
        if (database != null) {
            syncLastModificationIdWithDatabase();
        }
    }",False
69,syncLastModificationIdWithDatabase(),Method,"removeRow(Session,Row) truncate(Session) addRow(Session,Row) updateRow(Session,Row,Row) commit()",,"org.h2.engine.Database+getNextModificationDataId() org.h2.engine.Database+getNextModificationDataId() java.util.concurrent.atomic.AtomicLong+get() java.util.concurrent.atomic.AtomicLong+get() java.util.concurrent.atomic.AtomicLong+compareAndSet(long,long) java.util.concurrent.atomic.AtomicLong+compareAndSet(long,long)",org.h2.engine.DbObjectBase+database org.h2.mvstore.db.MVTable+lastModificationId org.h2.mvstore.db.MVTable+lastModificationId,362,8,2,,"private void syncLastModificationIdWithDatabase() {
        long nextModificationDataId = database.getNextModificationDataId();
        long currentId;
        do {
            currentId = lastModificationId.get();
        } while (nextModificationDataId > currentId &&
                !lastModificationId.compareAndSet(currentId, nextModificationDataId));
    }",False
70,convertException(IllegalStateException),Method,,"org.h2.mvstore.db.MVPrimaryIndex+add(Session,Row) org.h2.mvstore.db.MVPrimaryIndex+remove(Session,Row) org.h2.mvstore.db.MVPrimaryIndex+lockRow(TransactionMap<Value,Value>,long) org.h2.mvstore.db.MVSecondaryIndex+add(Session,Row) org.h2.mvstore.db.MVSecondaryIndex+remove(Session,Row) org.h2.mvstore.db.MVSpatialIndex+add(Session,Row) org.h2.mvstore.db.MVSpatialIndex+remove(Session,Row)","org.h2.mvstore.DataUtils+getErrorCode(String) org.h2.mvstore.DataUtils+getErrorCode(String) java.lang.Throwable+getMessage() java.lang.Throwable+getMessage() org.h2.message.DbException+get(int,String) org.h2.message.DbException+get(int,String) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() org.h2.message.DbException+get(int,String) org.h2.message.DbException+get(int,String) org.h2.engine.DbObjectBase+getName() org.h2.engine.DbObjectBase+getName() org.h2.mvstore.db.MVTableEngine.Store+convertIllegalStateException(IllegalStateException) org.h2.mvstore.db.MVTableEngine.Store+convertIllegalStateException(IllegalStateException)",org.h2.mvstore.DataUtils+ERROR_TRANSACTION_LOCKED org.h2.api.ErrorCode+CONCURRENT_UPDATE_1 org.h2.mvstore.DataUtils+ERROR_TRANSACTIONS_DEADLOCK org.h2.api.ErrorCode+DEADLOCK_1 org.h2.mvstore.db.MVTable+store,692,18,0,"/** 
 * Convert the illegal state exception to a database exception.
 * @param e the illegal state exception
 * @return the database exception
 */
","/**
     * Convert the illegal state exception to a database exception.
     *
     * @param e the illegal state exception
     * @return the database exception
     */
    DbException convertException(IllegalStateException e) {
        int errorCode = DataUtils.getErrorCode(e.getMessage());
        if (errorCode == DataUtils.ERROR_TRANSACTION_LOCKED) {
            throw DbException.get(ErrorCode.CONCURRENT_UPDATE_1,
                    e, getName());
        }
        if (errorCode == DataUtils.ERROR_TRANSACTIONS_DEADLOCK) {
            throw DbException.get(ErrorCode.DEADLOCK_1,
                    e, getName());
        }
        return store.convertIllegalStateException(e);
    }",False
